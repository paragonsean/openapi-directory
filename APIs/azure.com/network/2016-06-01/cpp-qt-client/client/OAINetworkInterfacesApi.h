/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINetworkInterfacesApi_H
#define OAI_OAINetworkInterfacesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEffectiveNetworkSecurityGroupListResult.h"
#include "OAIEffectiveRouteListResult.h"
#include "OAINetworkInterface.h"
#include "OAINetworkInterfaceListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINetworkInterfacesApi : public QObject {
    Q_OBJECT

public:
    OAINetworkInterfacesApi(const int timeOut = 0);
    ~OAINetworkInterfacesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_interface_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAINetworkInterface [required]
    */
    virtual void networkInterfacesCreateOrUpdate(const QString &resource_group_name, const QString &network_interface_name, const QString &api_version, const QString &subscription_id, const OAINetworkInterface &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_interface_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void networkInterfacesDelete(const QString &resource_group_name, const QString &network_interface_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_interface_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void networkInterfacesGet(const QString &resource_group_name, const QString &network_interface_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_interface_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void networkInterfacesGetEffectiveRouteTable(const QString &resource_group_name, const QString &network_interface_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_machine_scale_set_name QString [required]
    * @param[in]  virtualmachine_index QString [required]
    * @param[in]  network_interface_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void networkInterfacesGetVirtualMachineScaleSetNetworkInterface(const QString &resource_group_name, const QString &virtual_machine_scale_set_name, const QString &virtualmachine_index, const QString &network_interface_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void networkInterfacesList(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void networkInterfacesListAll(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_interface_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void networkInterfacesListEffectiveNetworkSecurityGroups(const QString &resource_group_name, const QString &network_interface_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_machine_scale_set_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void networkInterfacesListVirtualMachineScaleSetNetworkInterfaces(const QString &resource_group_name, const QString &virtual_machine_scale_set_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_machine_scale_set_name QString [required]
    * @param[in]  virtualmachine_index QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void networkInterfacesListVirtualMachineScaleSetVMNetworkInterfaces(const QString &resource_group_name, const QString &virtual_machine_scale_set_name, const QString &virtualmachine_index, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void networkInterfacesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void networkInterfacesDeleteCallback(OAIHttpRequestWorker *worker);
    void networkInterfacesGetCallback(OAIHttpRequestWorker *worker);
    void networkInterfacesGetEffectiveRouteTableCallback(OAIHttpRequestWorker *worker);
    void networkInterfacesGetVirtualMachineScaleSetNetworkInterfaceCallback(OAIHttpRequestWorker *worker);
    void networkInterfacesListCallback(OAIHttpRequestWorker *worker);
    void networkInterfacesListAllCallback(OAIHttpRequestWorker *worker);
    void networkInterfacesListEffectiveNetworkSecurityGroupsCallback(OAIHttpRequestWorker *worker);
    void networkInterfacesListVirtualMachineScaleSetNetworkInterfacesCallback(OAIHttpRequestWorker *worker);
    void networkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void networkInterfacesCreateOrUpdateSignal(OAINetworkInterface summary);
    void networkInterfacesDeleteSignal();
    void networkInterfacesGetSignal(OAINetworkInterface summary);
    void networkInterfacesGetEffectiveRouteTableSignal(OAIEffectiveRouteListResult summary);
    void networkInterfacesGetVirtualMachineScaleSetNetworkInterfaceSignal(OAINetworkInterface summary);
    void networkInterfacesListSignal(OAINetworkInterfaceListResult summary);
    void networkInterfacesListAllSignal(OAINetworkInterfaceListResult summary);
    void networkInterfacesListEffectiveNetworkSecurityGroupsSignal(OAIEffectiveNetworkSecurityGroupListResult summary);
    void networkInterfacesListVirtualMachineScaleSetNetworkInterfacesSignal(OAINetworkInterfaceListResult summary);
    void networkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesSignal(OAINetworkInterfaceListResult summary);


    void networkInterfacesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAINetworkInterface summary);
    void networkInterfacesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void networkInterfacesGetSignalFull(OAIHttpRequestWorker *worker, OAINetworkInterface summary);
    void networkInterfacesGetEffectiveRouteTableSignalFull(OAIHttpRequestWorker *worker, OAIEffectiveRouteListResult summary);
    void networkInterfacesGetVirtualMachineScaleSetNetworkInterfaceSignalFull(OAIHttpRequestWorker *worker, OAINetworkInterface summary);
    void networkInterfacesListSignalFull(OAIHttpRequestWorker *worker, OAINetworkInterfaceListResult summary);
    void networkInterfacesListAllSignalFull(OAIHttpRequestWorker *worker, OAINetworkInterfaceListResult summary);
    void networkInterfacesListEffectiveNetworkSecurityGroupsSignalFull(OAIHttpRequestWorker *worker, OAIEffectiveNetworkSecurityGroupListResult summary);
    void networkInterfacesListVirtualMachineScaleSetNetworkInterfacesSignalFull(OAIHttpRequestWorker *worker, OAINetworkInterfaceListResult summary);
    void networkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesSignalFull(OAIHttpRequestWorker *worker, OAINetworkInterfaceListResult summary);

    Q_DECL_DEPRECATED_X("Use networkInterfacesCreateOrUpdateSignalError() instead")
    void networkInterfacesCreateOrUpdateSignalE(OAINetworkInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkInterfacesCreateOrUpdateSignalError(OAINetworkInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkInterfacesDeleteSignalError() instead")
    void networkInterfacesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void networkInterfacesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkInterfacesGetSignalError() instead")
    void networkInterfacesGetSignalE(OAINetworkInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkInterfacesGetSignalError(OAINetworkInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkInterfacesGetEffectiveRouteTableSignalError() instead")
    void networkInterfacesGetEffectiveRouteTableSignalE(OAIEffectiveRouteListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkInterfacesGetEffectiveRouteTableSignalError(OAIEffectiveRouteListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkInterfacesGetVirtualMachineScaleSetNetworkInterfaceSignalError() instead")
    void networkInterfacesGetVirtualMachineScaleSetNetworkInterfaceSignalE(OAINetworkInterface summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkInterfacesGetVirtualMachineScaleSetNetworkInterfaceSignalError(OAINetworkInterface summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkInterfacesListSignalError() instead")
    void networkInterfacesListSignalE(OAINetworkInterfaceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkInterfacesListSignalError(OAINetworkInterfaceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkInterfacesListAllSignalError() instead")
    void networkInterfacesListAllSignalE(OAINetworkInterfaceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkInterfacesListAllSignalError(OAINetworkInterfaceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkInterfacesListEffectiveNetworkSecurityGroupsSignalError() instead")
    void networkInterfacesListEffectiveNetworkSecurityGroupsSignalE(OAIEffectiveNetworkSecurityGroupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkInterfacesListEffectiveNetworkSecurityGroupsSignalError(OAIEffectiveNetworkSecurityGroupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkInterfacesListVirtualMachineScaleSetNetworkInterfacesSignalError() instead")
    void networkInterfacesListVirtualMachineScaleSetNetworkInterfacesSignalE(OAINetworkInterfaceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkInterfacesListVirtualMachineScaleSetNetworkInterfacesSignalError(OAINetworkInterfaceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesSignalError() instead")
    void networkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesSignalE(OAINetworkInterfaceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesSignalError(OAINetworkInterfaceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use networkInterfacesCreateOrUpdateSignalErrorFull() instead")
    void networkInterfacesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkInterfacesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkInterfacesDeleteSignalErrorFull() instead")
    void networkInterfacesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkInterfacesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkInterfacesGetSignalErrorFull() instead")
    void networkInterfacesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkInterfacesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkInterfacesGetEffectiveRouteTableSignalErrorFull() instead")
    void networkInterfacesGetEffectiveRouteTableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkInterfacesGetEffectiveRouteTableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkInterfacesGetVirtualMachineScaleSetNetworkInterfaceSignalErrorFull() instead")
    void networkInterfacesGetVirtualMachineScaleSetNetworkInterfaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkInterfacesGetVirtualMachineScaleSetNetworkInterfaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkInterfacesListSignalErrorFull() instead")
    void networkInterfacesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkInterfacesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkInterfacesListAllSignalErrorFull() instead")
    void networkInterfacesListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkInterfacesListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkInterfacesListEffectiveNetworkSecurityGroupsSignalErrorFull() instead")
    void networkInterfacesListEffectiveNetworkSecurityGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkInterfacesListEffectiveNetworkSecurityGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkInterfacesListVirtualMachineScaleSetNetworkInterfacesSignalErrorFull() instead")
    void networkInterfacesListVirtualMachineScaleSetNetworkInterfacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkInterfacesListVirtualMachineScaleSetNetworkInterfacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesSignalErrorFull() instead")
    void networkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkInterfacesListVirtualMachineScaleSetVMNetworkInterfacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
