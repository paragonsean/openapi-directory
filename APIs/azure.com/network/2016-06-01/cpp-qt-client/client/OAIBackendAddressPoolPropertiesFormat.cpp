/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackendAddressPoolPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackendAddressPoolPropertiesFormat::OAIBackendAddressPoolPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackendAddressPoolPropertiesFormat::OAIBackendAddressPoolPropertiesFormat() {
    this->initializeModel();
}

OAIBackendAddressPoolPropertiesFormat::~OAIBackendAddressPoolPropertiesFormat() {}

void OAIBackendAddressPoolPropertiesFormat::initializeModel() {

    m_backend_ip_configurations_isSet = false;
    m_backend_ip_configurations_isValid = false;

    m_load_balancing_rules_isSet = false;
    m_load_balancing_rules_isValid = false;

    m_outbound_nat_rule_isSet = false;
    m_outbound_nat_rule_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIBackendAddressPoolPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackendAddressPoolPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_backend_ip_configurations_isValid = ::OpenAPI::fromJsonValue(m_backend_ip_configurations, json[QString("backendIPConfigurations")]);
    m_backend_ip_configurations_isSet = !json[QString("backendIPConfigurations")].isNull() && m_backend_ip_configurations_isValid;

    m_load_balancing_rules_isValid = ::OpenAPI::fromJsonValue(m_load_balancing_rules, json[QString("loadBalancingRules")]);
    m_load_balancing_rules_isSet = !json[QString("loadBalancingRules")].isNull() && m_load_balancing_rules_isValid;

    m_outbound_nat_rule_isValid = ::OpenAPI::fromJsonValue(m_outbound_nat_rule, json[QString("outboundNatRule")]);
    m_outbound_nat_rule_isSet = !json[QString("outboundNatRule")].isNull() && m_outbound_nat_rule_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIBackendAddressPoolPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackendAddressPoolPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_ip_configurations.size() > 0) {
        obj.insert(QString("backendIPConfigurations"), ::OpenAPI::toJsonValue(m_backend_ip_configurations));
    }
    if (m_load_balancing_rules.size() > 0) {
        obj.insert(QString("loadBalancingRules"), ::OpenAPI::toJsonValue(m_load_balancing_rules));
    }
    if (m_outbound_nat_rule.isSet()) {
        obj.insert(QString("outboundNatRule"), ::OpenAPI::toJsonValue(m_outbound_nat_rule));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QList<OAINetworkInterfaceIPConfiguration> OAIBackendAddressPoolPropertiesFormat::getBackendIpConfigurations() const {
    return m_backend_ip_configurations;
}
void OAIBackendAddressPoolPropertiesFormat::setBackendIpConfigurations(const QList<OAINetworkInterfaceIPConfiguration> &backend_ip_configurations) {
    m_backend_ip_configurations = backend_ip_configurations;
    m_backend_ip_configurations_isSet = true;
}

bool OAIBackendAddressPoolPropertiesFormat::is_backend_ip_configurations_Set() const{
    return m_backend_ip_configurations_isSet;
}

bool OAIBackendAddressPoolPropertiesFormat::is_backend_ip_configurations_Valid() const{
    return m_backend_ip_configurations_isValid;
}

QList<OAISubResource> OAIBackendAddressPoolPropertiesFormat::getLoadBalancingRules() const {
    return m_load_balancing_rules;
}
void OAIBackendAddressPoolPropertiesFormat::setLoadBalancingRules(const QList<OAISubResource> &load_balancing_rules) {
    m_load_balancing_rules = load_balancing_rules;
    m_load_balancing_rules_isSet = true;
}

bool OAIBackendAddressPoolPropertiesFormat::is_load_balancing_rules_Set() const{
    return m_load_balancing_rules_isSet;
}

bool OAIBackendAddressPoolPropertiesFormat::is_load_balancing_rules_Valid() const{
    return m_load_balancing_rules_isValid;
}

OAISubResource OAIBackendAddressPoolPropertiesFormat::getOutboundNatRule() const {
    return m_outbound_nat_rule;
}
void OAIBackendAddressPoolPropertiesFormat::setOutboundNatRule(const OAISubResource &outbound_nat_rule) {
    m_outbound_nat_rule = outbound_nat_rule;
    m_outbound_nat_rule_isSet = true;
}

bool OAIBackendAddressPoolPropertiesFormat::is_outbound_nat_rule_Set() const{
    return m_outbound_nat_rule_isSet;
}

bool OAIBackendAddressPoolPropertiesFormat::is_outbound_nat_rule_Valid() const{
    return m_outbound_nat_rule_isValid;
}

QString OAIBackendAddressPoolPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIBackendAddressPoolPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIBackendAddressPoolPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIBackendAddressPoolPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIBackendAddressPoolPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_ip_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancing_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_outbound_nat_rule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackendAddressPoolPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
