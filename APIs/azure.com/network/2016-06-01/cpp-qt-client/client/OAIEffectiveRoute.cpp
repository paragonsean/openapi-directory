/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEffectiveRoute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEffectiveRoute::OAIEffectiveRoute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEffectiveRoute::OAIEffectiveRoute() {
    this->initializeModel();
}

OAIEffectiveRoute::~OAIEffectiveRoute() {}

void OAIEffectiveRoute::initializeModel() {

    m_address_prefix_isSet = false;
    m_address_prefix_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_next_hop_ip_address_isSet = false;
    m_next_hop_ip_address_isValid = false;

    m_next_hop_type_isSet = false;
    m_next_hop_type_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIEffectiveRoute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEffectiveRoute::fromJsonObject(QJsonObject json) {

    m_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_address_prefix, json[QString("addressPrefix")]);
    m_address_prefix_isSet = !json[QString("addressPrefix")].isNull() && m_address_prefix_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_next_hop_ip_address_isValid = ::OpenAPI::fromJsonValue(m_next_hop_ip_address, json[QString("nextHopIpAddress")]);
    m_next_hop_ip_address_isSet = !json[QString("nextHopIpAddress")].isNull() && m_next_hop_ip_address_isValid;

    m_next_hop_type_isValid = ::OpenAPI::fromJsonValue(m_next_hop_type, json[QString("nextHopType")]);
    m_next_hop_type_isSet = !json[QString("nextHopType")].isNull() && m_next_hop_type_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIEffectiveRoute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEffectiveRoute::asJsonObject() const {
    QJsonObject obj;
    if (m_address_prefix.size() > 0) {
        obj.insert(QString("addressPrefix"), ::OpenAPI::toJsonValue(m_address_prefix));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_next_hop_ip_address.size() > 0) {
        obj.insert(QString("nextHopIpAddress"), ::OpenAPI::toJsonValue(m_next_hop_ip_address));
    }
    if (m_next_hop_type_isSet) {
        obj.insert(QString("nextHopType"), ::OpenAPI::toJsonValue(m_next_hop_type));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QList<QString> OAIEffectiveRoute::getAddressPrefix() const {
    return m_address_prefix;
}
void OAIEffectiveRoute::setAddressPrefix(const QList<QString> &address_prefix) {
    m_address_prefix = address_prefix;
    m_address_prefix_isSet = true;
}

bool OAIEffectiveRoute::is_address_prefix_Set() const{
    return m_address_prefix_isSet;
}

bool OAIEffectiveRoute::is_address_prefix_Valid() const{
    return m_address_prefix_isValid;
}

QString OAIEffectiveRoute::getName() const {
    return m_name;
}
void OAIEffectiveRoute::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEffectiveRoute::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEffectiveRoute::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIEffectiveRoute::getNextHopIpAddress() const {
    return m_next_hop_ip_address;
}
void OAIEffectiveRoute::setNextHopIpAddress(const QList<QString> &next_hop_ip_address) {
    m_next_hop_ip_address = next_hop_ip_address;
    m_next_hop_ip_address_isSet = true;
}

bool OAIEffectiveRoute::is_next_hop_ip_address_Set() const{
    return m_next_hop_ip_address_isSet;
}

bool OAIEffectiveRoute::is_next_hop_ip_address_Valid() const{
    return m_next_hop_ip_address_isValid;
}

QString OAIEffectiveRoute::getNextHopType() const {
    return m_next_hop_type;
}
void OAIEffectiveRoute::setNextHopType(const QString &next_hop_type) {
    m_next_hop_type = next_hop_type;
    m_next_hop_type_isSet = true;
}

bool OAIEffectiveRoute::is_next_hop_type_Set() const{
    return m_next_hop_type_isSet;
}

bool OAIEffectiveRoute::is_next_hop_type_Valid() const{
    return m_next_hop_type_isValid;
}

QString OAIEffectiveRoute::getSource() const {
    return m_source;
}
void OAIEffectiveRoute::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIEffectiveRoute::is_source_Set() const{
    return m_source_isSet;
}

bool OAIEffectiveRoute::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIEffectiveRoute::getState() const {
    return m_state;
}
void OAIEffectiveRoute::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIEffectiveRoute::is_state_Set() const{
    return m_state_isSet;
}

bool OAIEffectiveRoute::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIEffectiveRoute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_prefix.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_hop_ip_address.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_hop_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEffectiveRoute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
