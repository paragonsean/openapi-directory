/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEffectiveNetworkSecurityRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEffectiveNetworkSecurityRule::OAIEffectiveNetworkSecurityRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEffectiveNetworkSecurityRule::OAIEffectiveNetworkSecurityRule() {
    this->initializeModel();
}

OAIEffectiveNetworkSecurityRule::~OAIEffectiveNetworkSecurityRule() {}

void OAIEffectiveNetworkSecurityRule::initializeModel() {

    m_access_isSet = false;
    m_access_isValid = false;

    m_destination_address_prefix_isSet = false;
    m_destination_address_prefix_isValid = false;

    m_destination_port_range_isSet = false;
    m_destination_port_range_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_expanded_destination_address_prefix_isSet = false;
    m_expanded_destination_address_prefix_isValid = false;

    m_expanded_source_address_prefix_isSet = false;
    m_expanded_source_address_prefix_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_source_address_prefix_isSet = false;
    m_source_address_prefix_isValid = false;

    m_source_port_range_isSet = false;
    m_source_port_range_isValid = false;
}

void OAIEffectiveNetworkSecurityRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEffectiveNetworkSecurityRule::fromJsonObject(QJsonObject json) {

    m_access_isValid = ::OpenAPI::fromJsonValue(m_access, json[QString("access")]);
    m_access_isSet = !json[QString("access")].isNull() && m_access_isValid;

    m_destination_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_destination_address_prefix, json[QString("destinationAddressPrefix")]);
    m_destination_address_prefix_isSet = !json[QString("destinationAddressPrefix")].isNull() && m_destination_address_prefix_isValid;

    m_destination_port_range_isValid = ::OpenAPI::fromJsonValue(m_destination_port_range, json[QString("destinationPortRange")]);
    m_destination_port_range_isSet = !json[QString("destinationPortRange")].isNull() && m_destination_port_range_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_expanded_destination_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_expanded_destination_address_prefix, json[QString("expandedDestinationAddressPrefix")]);
    m_expanded_destination_address_prefix_isSet = !json[QString("expandedDestinationAddressPrefix")].isNull() && m_expanded_destination_address_prefix_isValid;

    m_expanded_source_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_expanded_source_address_prefix, json[QString("expandedSourceAddressPrefix")]);
    m_expanded_source_address_prefix_isSet = !json[QString("expandedSourceAddressPrefix")].isNull() && m_expanded_source_address_prefix_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_source_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_source_address_prefix, json[QString("sourceAddressPrefix")]);
    m_source_address_prefix_isSet = !json[QString("sourceAddressPrefix")].isNull() && m_source_address_prefix_isValid;

    m_source_port_range_isValid = ::OpenAPI::fromJsonValue(m_source_port_range, json[QString("sourcePortRange")]);
    m_source_port_range_isSet = !json[QString("sourcePortRange")].isNull() && m_source_port_range_isValid;
}

QString OAIEffectiveNetworkSecurityRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEffectiveNetworkSecurityRule::asJsonObject() const {
    QJsonObject obj;
    if (m_access_isSet) {
        obj.insert(QString("access"), ::OpenAPI::toJsonValue(m_access));
    }
    if (m_destination_address_prefix_isSet) {
        obj.insert(QString("destinationAddressPrefix"), ::OpenAPI::toJsonValue(m_destination_address_prefix));
    }
    if (m_destination_port_range_isSet) {
        obj.insert(QString("destinationPortRange"), ::OpenAPI::toJsonValue(m_destination_port_range));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_expanded_destination_address_prefix.size() > 0) {
        obj.insert(QString("expandedDestinationAddressPrefix"), ::OpenAPI::toJsonValue(m_expanded_destination_address_prefix));
    }
    if (m_expanded_source_address_prefix.size() > 0) {
        obj.insert(QString("expandedSourceAddressPrefix"), ::OpenAPI::toJsonValue(m_expanded_source_address_prefix));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_source_address_prefix_isSet) {
        obj.insert(QString("sourceAddressPrefix"), ::OpenAPI::toJsonValue(m_source_address_prefix));
    }
    if (m_source_port_range_isSet) {
        obj.insert(QString("sourcePortRange"), ::OpenAPI::toJsonValue(m_source_port_range));
    }
    return obj;
}

QString OAIEffectiveNetworkSecurityRule::getAccess() const {
    return m_access;
}
void OAIEffectiveNetworkSecurityRule::setAccess(const QString &access) {
    m_access = access;
    m_access_isSet = true;
}

bool OAIEffectiveNetworkSecurityRule::is_access_Set() const{
    return m_access_isSet;
}

bool OAIEffectiveNetworkSecurityRule::is_access_Valid() const{
    return m_access_isValid;
}

QString OAIEffectiveNetworkSecurityRule::getDestinationAddressPrefix() const {
    return m_destination_address_prefix;
}
void OAIEffectiveNetworkSecurityRule::setDestinationAddressPrefix(const QString &destination_address_prefix) {
    m_destination_address_prefix = destination_address_prefix;
    m_destination_address_prefix_isSet = true;
}

bool OAIEffectiveNetworkSecurityRule::is_destination_address_prefix_Set() const{
    return m_destination_address_prefix_isSet;
}

bool OAIEffectiveNetworkSecurityRule::is_destination_address_prefix_Valid() const{
    return m_destination_address_prefix_isValid;
}

QString OAIEffectiveNetworkSecurityRule::getDestinationPortRange() const {
    return m_destination_port_range;
}
void OAIEffectiveNetworkSecurityRule::setDestinationPortRange(const QString &destination_port_range) {
    m_destination_port_range = destination_port_range;
    m_destination_port_range_isSet = true;
}

bool OAIEffectiveNetworkSecurityRule::is_destination_port_range_Set() const{
    return m_destination_port_range_isSet;
}

bool OAIEffectiveNetworkSecurityRule::is_destination_port_range_Valid() const{
    return m_destination_port_range_isValid;
}

QString OAIEffectiveNetworkSecurityRule::getDirection() const {
    return m_direction;
}
void OAIEffectiveNetworkSecurityRule::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIEffectiveNetworkSecurityRule::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIEffectiveNetworkSecurityRule::is_direction_Valid() const{
    return m_direction_isValid;
}

QList<QString> OAIEffectiveNetworkSecurityRule::getExpandedDestinationAddressPrefix() const {
    return m_expanded_destination_address_prefix;
}
void OAIEffectiveNetworkSecurityRule::setExpandedDestinationAddressPrefix(const QList<QString> &expanded_destination_address_prefix) {
    m_expanded_destination_address_prefix = expanded_destination_address_prefix;
    m_expanded_destination_address_prefix_isSet = true;
}

bool OAIEffectiveNetworkSecurityRule::is_expanded_destination_address_prefix_Set() const{
    return m_expanded_destination_address_prefix_isSet;
}

bool OAIEffectiveNetworkSecurityRule::is_expanded_destination_address_prefix_Valid() const{
    return m_expanded_destination_address_prefix_isValid;
}

QList<QString> OAIEffectiveNetworkSecurityRule::getExpandedSourceAddressPrefix() const {
    return m_expanded_source_address_prefix;
}
void OAIEffectiveNetworkSecurityRule::setExpandedSourceAddressPrefix(const QList<QString> &expanded_source_address_prefix) {
    m_expanded_source_address_prefix = expanded_source_address_prefix;
    m_expanded_source_address_prefix_isSet = true;
}

bool OAIEffectiveNetworkSecurityRule::is_expanded_source_address_prefix_Set() const{
    return m_expanded_source_address_prefix_isSet;
}

bool OAIEffectiveNetworkSecurityRule::is_expanded_source_address_prefix_Valid() const{
    return m_expanded_source_address_prefix_isValid;
}

QString OAIEffectiveNetworkSecurityRule::getName() const {
    return m_name;
}
void OAIEffectiveNetworkSecurityRule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEffectiveNetworkSecurityRule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEffectiveNetworkSecurityRule::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIEffectiveNetworkSecurityRule::getPriority() const {
    return m_priority;
}
void OAIEffectiveNetworkSecurityRule::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIEffectiveNetworkSecurityRule::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIEffectiveNetworkSecurityRule::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIEffectiveNetworkSecurityRule::getProtocol() const {
    return m_protocol;
}
void OAIEffectiveNetworkSecurityRule::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIEffectiveNetworkSecurityRule::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIEffectiveNetworkSecurityRule::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIEffectiveNetworkSecurityRule::getSourceAddressPrefix() const {
    return m_source_address_prefix;
}
void OAIEffectiveNetworkSecurityRule::setSourceAddressPrefix(const QString &source_address_prefix) {
    m_source_address_prefix = source_address_prefix;
    m_source_address_prefix_isSet = true;
}

bool OAIEffectiveNetworkSecurityRule::is_source_address_prefix_Set() const{
    return m_source_address_prefix_isSet;
}

bool OAIEffectiveNetworkSecurityRule::is_source_address_prefix_Valid() const{
    return m_source_address_prefix_isValid;
}

QString OAIEffectiveNetworkSecurityRule::getSourcePortRange() const {
    return m_source_port_range;
}
void OAIEffectiveNetworkSecurityRule::setSourcePortRange(const QString &source_port_range) {
    m_source_port_range = source_port_range;
    m_source_port_range_isSet = true;
}

bool OAIEffectiveNetworkSecurityRule::is_source_port_range_Set() const{
    return m_source_port_range_isSet;
}

bool OAIEffectiveNetworkSecurityRule::is_source_port_range_Valid() const{
    return m_source_port_range_isValid;
}

bool OAIEffectiveNetworkSecurityRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_address_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_port_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expanded_destination_address_prefix.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expanded_source_address_prefix.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_address_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_port_range_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEffectiveNetworkSecurityRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
