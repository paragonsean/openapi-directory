/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualNetworkPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualNetworkPropertiesFormat::OAIVirtualNetworkPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualNetworkPropertiesFormat::OAIVirtualNetworkPropertiesFormat() {
    this->initializeModel();
}

OAIVirtualNetworkPropertiesFormat::~OAIVirtualNetworkPropertiesFormat() {}

void OAIVirtualNetworkPropertiesFormat::initializeModel() {

    m_virtual_network_peerings_isSet = false;
    m_virtual_network_peerings_isValid = false;

    m_address_space_isSet = false;
    m_address_space_isValid = false;

    m_dhcp_options_isSet = false;
    m_dhcp_options_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_resource_guid_isSet = false;
    m_resource_guid_isValid = false;

    m_subnets_isSet = false;
    m_subnets_isValid = false;
}

void OAIVirtualNetworkPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualNetworkPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_virtual_network_peerings_isValid = ::OpenAPI::fromJsonValue(m_virtual_network_peerings, json[QString("VirtualNetworkPeerings")]);
    m_virtual_network_peerings_isSet = !json[QString("VirtualNetworkPeerings")].isNull() && m_virtual_network_peerings_isValid;

    m_address_space_isValid = ::OpenAPI::fromJsonValue(m_address_space, json[QString("addressSpace")]);
    m_address_space_isSet = !json[QString("addressSpace")].isNull() && m_address_space_isValid;

    m_dhcp_options_isValid = ::OpenAPI::fromJsonValue(m_dhcp_options, json[QString("dhcpOptions")]);
    m_dhcp_options_isSet = !json[QString("dhcpOptions")].isNull() && m_dhcp_options_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_resource_guid_isValid = ::OpenAPI::fromJsonValue(m_resource_guid, json[QString("resourceGuid")]);
    m_resource_guid_isSet = !json[QString("resourceGuid")].isNull() && m_resource_guid_isValid;

    m_subnets_isValid = ::OpenAPI::fromJsonValue(m_subnets, json[QString("subnets")]);
    m_subnets_isSet = !json[QString("subnets")].isNull() && m_subnets_isValid;
}

QString OAIVirtualNetworkPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualNetworkPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_virtual_network_peerings.size() > 0) {
        obj.insert(QString("VirtualNetworkPeerings"), ::OpenAPI::toJsonValue(m_virtual_network_peerings));
    }
    if (m_address_space.isSet()) {
        obj.insert(QString("addressSpace"), ::OpenAPI::toJsonValue(m_address_space));
    }
    if (m_dhcp_options.isSet()) {
        obj.insert(QString("dhcpOptions"), ::OpenAPI::toJsonValue(m_dhcp_options));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_resource_guid_isSet) {
        obj.insert(QString("resourceGuid"), ::OpenAPI::toJsonValue(m_resource_guid));
    }
    if (m_subnets.size() > 0) {
        obj.insert(QString("subnets"), ::OpenAPI::toJsonValue(m_subnets));
    }
    return obj;
}

QList<OAIVirtualNetworkPeering> OAIVirtualNetworkPropertiesFormat::getVirtualNetworkPeerings() const {
    return m_virtual_network_peerings;
}
void OAIVirtualNetworkPropertiesFormat::setVirtualNetworkPeerings(const QList<OAIVirtualNetworkPeering> &virtual_network_peerings) {
    m_virtual_network_peerings = virtual_network_peerings;
    m_virtual_network_peerings_isSet = true;
}

bool OAIVirtualNetworkPropertiesFormat::is_virtual_network_peerings_Set() const{
    return m_virtual_network_peerings_isSet;
}

bool OAIVirtualNetworkPropertiesFormat::is_virtual_network_peerings_Valid() const{
    return m_virtual_network_peerings_isValid;
}

OAIAddressSpace OAIVirtualNetworkPropertiesFormat::getAddressSpace() const {
    return m_address_space;
}
void OAIVirtualNetworkPropertiesFormat::setAddressSpace(const OAIAddressSpace &address_space) {
    m_address_space = address_space;
    m_address_space_isSet = true;
}

bool OAIVirtualNetworkPropertiesFormat::is_address_space_Set() const{
    return m_address_space_isSet;
}

bool OAIVirtualNetworkPropertiesFormat::is_address_space_Valid() const{
    return m_address_space_isValid;
}

OAIDhcpOptions OAIVirtualNetworkPropertiesFormat::getDhcpOptions() const {
    return m_dhcp_options;
}
void OAIVirtualNetworkPropertiesFormat::setDhcpOptions(const OAIDhcpOptions &dhcp_options) {
    m_dhcp_options = dhcp_options;
    m_dhcp_options_isSet = true;
}

bool OAIVirtualNetworkPropertiesFormat::is_dhcp_options_Set() const{
    return m_dhcp_options_isSet;
}

bool OAIVirtualNetworkPropertiesFormat::is_dhcp_options_Valid() const{
    return m_dhcp_options_isValid;
}

QString OAIVirtualNetworkPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVirtualNetworkPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVirtualNetworkPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVirtualNetworkPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIVirtualNetworkPropertiesFormat::getResourceGuid() const {
    return m_resource_guid;
}
void OAIVirtualNetworkPropertiesFormat::setResourceGuid(const QString &resource_guid) {
    m_resource_guid = resource_guid;
    m_resource_guid_isSet = true;
}

bool OAIVirtualNetworkPropertiesFormat::is_resource_guid_Set() const{
    return m_resource_guid_isSet;
}

bool OAIVirtualNetworkPropertiesFormat::is_resource_guid_Valid() const{
    return m_resource_guid_isValid;
}

QList<OAISubnet> OAIVirtualNetworkPropertiesFormat::getSubnets() const {
    return m_subnets;
}
void OAIVirtualNetworkPropertiesFormat::setSubnets(const QList<OAISubnet> &subnets) {
    m_subnets = subnets;
    m_subnets_isSet = true;
}

bool OAIVirtualNetworkPropertiesFormat::is_subnets_Set() const{
    return m_subnets_isSet;
}

bool OAIVirtualNetworkPropertiesFormat::is_subnets_Valid() const{
    return m_subnets_isValid;
}

bool OAIVirtualNetworkPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_virtual_network_peerings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_space.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dhcp_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualNetworkPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
