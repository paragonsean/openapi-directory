/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualNetworkPeeringPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualNetworkPeeringPropertiesFormat::OAIVirtualNetworkPeeringPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualNetworkPeeringPropertiesFormat::OAIVirtualNetworkPeeringPropertiesFormat() {
    this->initializeModel();
}

OAIVirtualNetworkPeeringPropertiesFormat::~OAIVirtualNetworkPeeringPropertiesFormat() {}

void OAIVirtualNetworkPeeringPropertiesFormat::initializeModel() {

    m_allow_forwarded_traffic_isSet = false;
    m_allow_forwarded_traffic_isValid = false;

    m_allow_gateway_transit_isSet = false;
    m_allow_gateway_transit_isValid = false;

    m_allow_virtual_network_access_isSet = false;
    m_allow_virtual_network_access_isValid = false;

    m_peering_state_isSet = false;
    m_peering_state_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_remote_virtual_network_isSet = false;
    m_remote_virtual_network_isValid = false;

    m_use_remote_gateways_isSet = false;
    m_use_remote_gateways_isValid = false;
}

void OAIVirtualNetworkPeeringPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualNetworkPeeringPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_allow_forwarded_traffic_isValid = ::OpenAPI::fromJsonValue(m_allow_forwarded_traffic, json[QString("allowForwardedTraffic")]);
    m_allow_forwarded_traffic_isSet = !json[QString("allowForwardedTraffic")].isNull() && m_allow_forwarded_traffic_isValid;

    m_allow_gateway_transit_isValid = ::OpenAPI::fromJsonValue(m_allow_gateway_transit, json[QString("allowGatewayTransit")]);
    m_allow_gateway_transit_isSet = !json[QString("allowGatewayTransit")].isNull() && m_allow_gateway_transit_isValid;

    m_allow_virtual_network_access_isValid = ::OpenAPI::fromJsonValue(m_allow_virtual_network_access, json[QString("allowVirtualNetworkAccess")]);
    m_allow_virtual_network_access_isSet = !json[QString("allowVirtualNetworkAccess")].isNull() && m_allow_virtual_network_access_isValid;

    m_peering_state_isValid = ::OpenAPI::fromJsonValue(m_peering_state, json[QString("peeringState")]);
    m_peering_state_isSet = !json[QString("peeringState")].isNull() && m_peering_state_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_remote_virtual_network_isValid = ::OpenAPI::fromJsonValue(m_remote_virtual_network, json[QString("remoteVirtualNetwork")]);
    m_remote_virtual_network_isSet = !json[QString("remoteVirtualNetwork")].isNull() && m_remote_virtual_network_isValid;

    m_use_remote_gateways_isValid = ::OpenAPI::fromJsonValue(m_use_remote_gateways, json[QString("useRemoteGateways")]);
    m_use_remote_gateways_isSet = !json[QString("useRemoteGateways")].isNull() && m_use_remote_gateways_isValid;
}

QString OAIVirtualNetworkPeeringPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualNetworkPeeringPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_forwarded_traffic_isSet) {
        obj.insert(QString("allowForwardedTraffic"), ::OpenAPI::toJsonValue(m_allow_forwarded_traffic));
    }
    if (m_allow_gateway_transit_isSet) {
        obj.insert(QString("allowGatewayTransit"), ::OpenAPI::toJsonValue(m_allow_gateway_transit));
    }
    if (m_allow_virtual_network_access_isSet) {
        obj.insert(QString("allowVirtualNetworkAccess"), ::OpenAPI::toJsonValue(m_allow_virtual_network_access));
    }
    if (m_peering_state_isSet) {
        obj.insert(QString("peeringState"), ::OpenAPI::toJsonValue(m_peering_state));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_remote_virtual_network.isSet()) {
        obj.insert(QString("remoteVirtualNetwork"), ::OpenAPI::toJsonValue(m_remote_virtual_network));
    }
    if (m_use_remote_gateways_isSet) {
        obj.insert(QString("useRemoteGateways"), ::OpenAPI::toJsonValue(m_use_remote_gateways));
    }
    return obj;
}

bool OAIVirtualNetworkPeeringPropertiesFormat::isAllowForwardedTraffic() const {
    return m_allow_forwarded_traffic;
}
void OAIVirtualNetworkPeeringPropertiesFormat::setAllowForwardedTraffic(const bool &allow_forwarded_traffic) {
    m_allow_forwarded_traffic = allow_forwarded_traffic;
    m_allow_forwarded_traffic_isSet = true;
}

bool OAIVirtualNetworkPeeringPropertiesFormat::is_allow_forwarded_traffic_Set() const{
    return m_allow_forwarded_traffic_isSet;
}

bool OAIVirtualNetworkPeeringPropertiesFormat::is_allow_forwarded_traffic_Valid() const{
    return m_allow_forwarded_traffic_isValid;
}

bool OAIVirtualNetworkPeeringPropertiesFormat::isAllowGatewayTransit() const {
    return m_allow_gateway_transit;
}
void OAIVirtualNetworkPeeringPropertiesFormat::setAllowGatewayTransit(const bool &allow_gateway_transit) {
    m_allow_gateway_transit = allow_gateway_transit;
    m_allow_gateway_transit_isSet = true;
}

bool OAIVirtualNetworkPeeringPropertiesFormat::is_allow_gateway_transit_Set() const{
    return m_allow_gateway_transit_isSet;
}

bool OAIVirtualNetworkPeeringPropertiesFormat::is_allow_gateway_transit_Valid() const{
    return m_allow_gateway_transit_isValid;
}

bool OAIVirtualNetworkPeeringPropertiesFormat::isAllowVirtualNetworkAccess() const {
    return m_allow_virtual_network_access;
}
void OAIVirtualNetworkPeeringPropertiesFormat::setAllowVirtualNetworkAccess(const bool &allow_virtual_network_access) {
    m_allow_virtual_network_access = allow_virtual_network_access;
    m_allow_virtual_network_access_isSet = true;
}

bool OAIVirtualNetworkPeeringPropertiesFormat::is_allow_virtual_network_access_Set() const{
    return m_allow_virtual_network_access_isSet;
}

bool OAIVirtualNetworkPeeringPropertiesFormat::is_allow_virtual_network_access_Valid() const{
    return m_allow_virtual_network_access_isValid;
}

QString OAIVirtualNetworkPeeringPropertiesFormat::getPeeringState() const {
    return m_peering_state;
}
void OAIVirtualNetworkPeeringPropertiesFormat::setPeeringState(const QString &peering_state) {
    m_peering_state = peering_state;
    m_peering_state_isSet = true;
}

bool OAIVirtualNetworkPeeringPropertiesFormat::is_peering_state_Set() const{
    return m_peering_state_isSet;
}

bool OAIVirtualNetworkPeeringPropertiesFormat::is_peering_state_Valid() const{
    return m_peering_state_isValid;
}

QString OAIVirtualNetworkPeeringPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVirtualNetworkPeeringPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVirtualNetworkPeeringPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVirtualNetworkPeeringPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAISubResource OAIVirtualNetworkPeeringPropertiesFormat::getRemoteVirtualNetwork() const {
    return m_remote_virtual_network;
}
void OAIVirtualNetworkPeeringPropertiesFormat::setRemoteVirtualNetwork(const OAISubResource &remote_virtual_network) {
    m_remote_virtual_network = remote_virtual_network;
    m_remote_virtual_network_isSet = true;
}

bool OAIVirtualNetworkPeeringPropertiesFormat::is_remote_virtual_network_Set() const{
    return m_remote_virtual_network_isSet;
}

bool OAIVirtualNetworkPeeringPropertiesFormat::is_remote_virtual_network_Valid() const{
    return m_remote_virtual_network_isValid;
}

bool OAIVirtualNetworkPeeringPropertiesFormat::isUseRemoteGateways() const {
    return m_use_remote_gateways;
}
void OAIVirtualNetworkPeeringPropertiesFormat::setUseRemoteGateways(const bool &use_remote_gateways) {
    m_use_remote_gateways = use_remote_gateways;
    m_use_remote_gateways_isSet = true;
}

bool OAIVirtualNetworkPeeringPropertiesFormat::is_use_remote_gateways_Set() const{
    return m_use_remote_gateways_isSet;
}

bool OAIVirtualNetworkPeeringPropertiesFormat::is_use_remote_gateways_Valid() const{
    return m_use_remote_gateways_isValid;
}

bool OAIVirtualNetworkPeeringPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_forwarded_traffic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_gateway_transit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_virtual_network_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peering_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_virtual_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_remote_gateways_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualNetworkPeeringPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
