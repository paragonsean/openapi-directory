/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVirtualNetworkPeeringPropertiesFormat.h
 *
 * 
 */

#ifndef OAIVirtualNetworkPeeringPropertiesFormat_H
#define OAIVirtualNetworkPeeringPropertiesFormat_H

#include <QJsonObject>

#include "OAISubResource.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISubResource;

class OAIVirtualNetworkPeeringPropertiesFormat : public OAIObject {
public:
    OAIVirtualNetworkPeeringPropertiesFormat();
    OAIVirtualNetworkPeeringPropertiesFormat(QString json);
    ~OAIVirtualNetworkPeeringPropertiesFormat() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAllowForwardedTraffic() const;
    void setAllowForwardedTraffic(const bool &allow_forwarded_traffic);
    bool is_allow_forwarded_traffic_Set() const;
    bool is_allow_forwarded_traffic_Valid() const;

    bool isAllowGatewayTransit() const;
    void setAllowGatewayTransit(const bool &allow_gateway_transit);
    bool is_allow_gateway_transit_Set() const;
    bool is_allow_gateway_transit_Valid() const;

    bool isAllowVirtualNetworkAccess() const;
    void setAllowVirtualNetworkAccess(const bool &allow_virtual_network_access);
    bool is_allow_virtual_network_access_Set() const;
    bool is_allow_virtual_network_access_Valid() const;

    QString getPeeringState() const;
    void setPeeringState(const QString &peering_state);
    bool is_peering_state_Set() const;
    bool is_peering_state_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    OAISubResource getRemoteVirtualNetwork() const;
    void setRemoteVirtualNetwork(const OAISubResource &remote_virtual_network);
    bool is_remote_virtual_network_Set() const;
    bool is_remote_virtual_network_Valid() const;

    bool isUseRemoteGateways() const;
    void setUseRemoteGateways(const bool &use_remote_gateways);
    bool is_use_remote_gateways_Set() const;
    bool is_use_remote_gateways_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_allow_forwarded_traffic;
    bool m_allow_forwarded_traffic_isSet;
    bool m_allow_forwarded_traffic_isValid;

    bool m_allow_gateway_transit;
    bool m_allow_gateway_transit_isSet;
    bool m_allow_gateway_transit_isValid;

    bool m_allow_virtual_network_access;
    bool m_allow_virtual_network_access_isSet;
    bool m_allow_virtual_network_access_isValid;

    QString m_peering_state;
    bool m_peering_state_isSet;
    bool m_peering_state_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    OAISubResource m_remote_virtual_network;
    bool m_remote_virtual_network_isSet;
    bool m_remote_virtual_network_isValid;

    bool m_use_remote_gateways;
    bool m_use_remote_gateways_isSet;
    bool m_use_remote_gateways_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVirtualNetworkPeeringPropertiesFormat)

#endif // OAIVirtualNetworkPeeringPropertiesFormat_H
