/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorizationPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorizationPropertiesFormat::OAIAuthorizationPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorizationPropertiesFormat::OAIAuthorizationPropertiesFormat() {
    this->initializeModel();
}

OAIAuthorizationPropertiesFormat::~OAIAuthorizationPropertiesFormat() {}

void OAIAuthorizationPropertiesFormat::initializeModel() {

    m_authorization_key_isSet = false;
    m_authorization_key_isValid = false;

    m_authorization_use_status_isSet = false;
    m_authorization_use_status_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIAuthorizationPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorizationPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_authorization_key_isValid = ::OpenAPI::fromJsonValue(m_authorization_key, json[QString("authorizationKey")]);
    m_authorization_key_isSet = !json[QString("authorizationKey")].isNull() && m_authorization_key_isValid;

    m_authorization_use_status_isValid = ::OpenAPI::fromJsonValue(m_authorization_use_status, json[QString("authorizationUseStatus")]);
    m_authorization_use_status_isSet = !json[QString("authorizationUseStatus")].isNull() && m_authorization_use_status_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIAuthorizationPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorizationPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_key_isSet) {
        obj.insert(QString("authorizationKey"), ::OpenAPI::toJsonValue(m_authorization_key));
    }
    if (m_authorization_use_status_isSet) {
        obj.insert(QString("authorizationUseStatus"), ::OpenAPI::toJsonValue(m_authorization_use_status));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QString OAIAuthorizationPropertiesFormat::getAuthorizationKey() const {
    return m_authorization_key;
}
void OAIAuthorizationPropertiesFormat::setAuthorizationKey(const QString &authorization_key) {
    m_authorization_key = authorization_key;
    m_authorization_key_isSet = true;
}

bool OAIAuthorizationPropertiesFormat::is_authorization_key_Set() const{
    return m_authorization_key_isSet;
}

bool OAIAuthorizationPropertiesFormat::is_authorization_key_Valid() const{
    return m_authorization_key_isValid;
}

QString OAIAuthorizationPropertiesFormat::getAuthorizationUseStatus() const {
    return m_authorization_use_status;
}
void OAIAuthorizationPropertiesFormat::setAuthorizationUseStatus(const QString &authorization_use_status) {
    m_authorization_use_status = authorization_use_status;
    m_authorization_use_status_isSet = true;
}

bool OAIAuthorizationPropertiesFormat::is_authorization_use_status_Set() const{
    return m_authorization_use_status_isSet;
}

bool OAIAuthorizationPropertiesFormat::is_authorization_use_status_Valid() const{
    return m_authorization_use_status_isValid;
}

QString OAIAuthorizationPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIAuthorizationPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIAuthorizationPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIAuthorizationPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIAuthorizationPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_use_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorizationPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
