/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExpressRouteCircuitPeering from '../model/ExpressRouteCircuitPeering';
import ExpressRouteCircuitPeeringListResult from '../model/ExpressRouteCircuitPeeringListResult';

/**
* ExpressRouteCircuitPeerings service.
* @module api/ExpressRouteCircuitPeeringsApi
* @version 2016-06-01
*/
export default class ExpressRouteCircuitPeeringsApi {

    /**
    * Constructs a new ExpressRouteCircuitPeeringsApi. 
    * @alias module:api/ExpressRouteCircuitPeeringsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the expressRouteCircuitPeeringsCreateOrUpdate operation.
     * @callback module:api/ExpressRouteCircuitPeeringsApi~expressRouteCircuitPeeringsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpressRouteCircuitPeering} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The Put Peering operation creates/updates an peering in the specified ExpressRouteCircuits
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} circuitName The name of the express route circuit.
     * @param {String} peeringName The name of the peering.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/ExpressRouteCircuitPeering} peeringParameters Parameters supplied to the create/update ExpressRouteCircuit Peering operation
     * @param {module:api/ExpressRouteCircuitPeeringsApi~expressRouteCircuitPeeringsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpressRouteCircuitPeering}
     */
    expressRouteCircuitPeeringsCreateOrUpdate(resourceGroupName, circuitName, peeringName, apiVersion, subscriptionId, peeringParameters, callback) {
      let postBody = peeringParameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling expressRouteCircuitPeeringsCreateOrUpdate");
      }
      // verify the required parameter 'circuitName' is set
      if (circuitName === undefined || circuitName === null) {
        throw new Error("Missing the required parameter 'circuitName' when calling expressRouteCircuitPeeringsCreateOrUpdate");
      }
      // verify the required parameter 'peeringName' is set
      if (peeringName === undefined || peeringName === null) {
        throw new Error("Missing the required parameter 'peeringName' when calling expressRouteCircuitPeeringsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling expressRouteCircuitPeeringsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling expressRouteCircuitPeeringsCreateOrUpdate");
      }
      // verify the required parameter 'peeringParameters' is set
      if (peeringParameters === undefined || peeringParameters === null) {
        throw new Error("Missing the required parameter 'peeringParameters' when calling expressRouteCircuitPeeringsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'circuitName': circuitName,
        'peeringName': peeringName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = ExpressRouteCircuitPeering;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expressRouteCircuitPeeringsDelete operation.
     * @callback module:api/ExpressRouteCircuitPeeringsApi~expressRouteCircuitPeeringsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The delete peering operation deletes the specified peering from the ExpressRouteCircuit.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} circuitName The name of the express route circuit.
     * @param {String} peeringName The name of the peering.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ExpressRouteCircuitPeeringsApi~expressRouteCircuitPeeringsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    expressRouteCircuitPeeringsDelete(resourceGroupName, circuitName, peeringName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling expressRouteCircuitPeeringsDelete");
      }
      // verify the required parameter 'circuitName' is set
      if (circuitName === undefined || circuitName === null) {
        throw new Error("Missing the required parameter 'circuitName' when calling expressRouteCircuitPeeringsDelete");
      }
      // verify the required parameter 'peeringName' is set
      if (peeringName === undefined || peeringName === null) {
        throw new Error("Missing the required parameter 'peeringName' when calling expressRouteCircuitPeeringsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling expressRouteCircuitPeeringsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling expressRouteCircuitPeeringsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'circuitName': circuitName,
        'peeringName': peeringName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expressRouteCircuitPeeringsGet operation.
     * @callback module:api/ExpressRouteCircuitPeeringsApi~expressRouteCircuitPeeringsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpressRouteCircuitPeering} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The GET peering operation retrieves the specified authorization from the ExpressRouteCircuit.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} circuitName The name of the express route circuit.
     * @param {String} peeringName The name of the peering.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ExpressRouteCircuitPeeringsApi~expressRouteCircuitPeeringsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpressRouteCircuitPeering}
     */
    expressRouteCircuitPeeringsGet(resourceGroupName, circuitName, peeringName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling expressRouteCircuitPeeringsGet");
      }
      // verify the required parameter 'circuitName' is set
      if (circuitName === undefined || circuitName === null) {
        throw new Error("Missing the required parameter 'circuitName' when calling expressRouteCircuitPeeringsGet");
      }
      // verify the required parameter 'peeringName' is set
      if (peeringName === undefined || peeringName === null) {
        throw new Error("Missing the required parameter 'peeringName' when calling expressRouteCircuitPeeringsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling expressRouteCircuitPeeringsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling expressRouteCircuitPeeringsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'circuitName': circuitName,
        'peeringName': peeringName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ExpressRouteCircuitPeering;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings/{peeringName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expressRouteCircuitPeeringsList operation.
     * @callback module:api/ExpressRouteCircuitPeeringsApi~expressRouteCircuitPeeringsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpressRouteCircuitPeeringListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The List peering operation retrieves all the peerings in an ExpressRouteCircuit.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} circuitName The name of the circuit.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ExpressRouteCircuitPeeringsApi~expressRouteCircuitPeeringsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpressRouteCircuitPeeringListResult}
     */
    expressRouteCircuitPeeringsList(resourceGroupName, circuitName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling expressRouteCircuitPeeringsList");
      }
      // verify the required parameter 'circuitName' is set
      if (circuitName === undefined || circuitName === null) {
        throw new Error("Missing the required parameter 'circuitName' when calling expressRouteCircuitPeeringsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling expressRouteCircuitPeeringsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling expressRouteCircuitPeeringsList");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'circuitName': circuitName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = ExpressRouteCircuitPeeringListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCircuits/{circuitName}/peerings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
