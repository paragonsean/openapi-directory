/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RouteTable from '../model/RouteTable';
import RouteTableListResult from '../model/RouteTableListResult';

/**
* RouteTables service.
* @module api/RouteTablesApi
* @version 2016-06-01
*/
export default class RouteTablesApi {

    /**
    * Constructs a new RouteTablesApi. 
    * @alias module:api/RouteTablesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the routeTablesCreateOrUpdate operation.
     * @callback module:api/RouteTablesApi~routeTablesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RouteTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The Put RouteTable operation creates/updates a route table in the specified resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} routeTableName The name of the route table.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/RouteTable} parameters Parameters supplied to the create/update Route Table operation
     * @param {module:api/RouteTablesApi~routeTablesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RouteTable}
     */
    routeTablesCreateOrUpdate(resourceGroupName, routeTableName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling routeTablesCreateOrUpdate");
      }
      // verify the required parameter 'routeTableName' is set
      if (routeTableName === undefined || routeTableName === null) {
        throw new Error("Missing the required parameter 'routeTableName' when calling routeTablesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling routeTablesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling routeTablesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling routeTablesCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'routeTableName': routeTableName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = RouteTable;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routeTablesDelete operation.
     * @callback module:api/RouteTablesApi~routeTablesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The Delete RouteTable operation deletes the specified Route Table
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} routeTableName The name of the route table.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/RouteTablesApi~routeTablesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    routeTablesDelete(resourceGroupName, routeTableName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling routeTablesDelete");
      }
      // verify the required parameter 'routeTableName' is set
      if (routeTableName === undefined || routeTableName === null) {
        throw new Error("Missing the required parameter 'routeTableName' when calling routeTablesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling routeTablesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling routeTablesDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'routeTableName': routeTableName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routeTablesGet operation.
     * @callback module:api/RouteTablesApi~routeTablesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RouteTable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The Get RouteTables operation retrieves information about the specified route table.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} routeTableName The name of the route table.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] expand references resources.
     * @param {module:api/RouteTablesApi~routeTablesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RouteTable}
     */
    routeTablesGet(resourceGroupName, routeTableName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling routeTablesGet");
      }
      // verify the required parameter 'routeTableName' is set
      if (routeTableName === undefined || routeTableName === null) {
        throw new Error("Missing the required parameter 'routeTableName' when calling routeTablesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling routeTablesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling routeTablesGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'routeTableName': routeTableName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RouteTable;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routeTablesList operation.
     * @callback module:api/RouteTablesApi~routeTablesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RouteTableListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The list RouteTables returns all route tables in a resource group
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/RouteTablesApi~routeTablesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RouteTableListResult}
     */
    routeTablesList(resourceGroupName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling routeTablesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling routeTablesList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling routeTablesList");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RouteTableListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routeTablesListAll operation.
     * @callback module:api/RouteTablesApi~routeTablesListAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RouteTableListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The list RouteTables returns all route tables in a subscription
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/RouteTablesApi~routeTablesListAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RouteTableListResult}
     */
    routeTablesListAll(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling routeTablesListAll");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling routeTablesListAll");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RouteTableListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Network/routeTables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
