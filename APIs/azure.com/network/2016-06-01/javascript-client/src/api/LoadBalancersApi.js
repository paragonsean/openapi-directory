/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LoadBalancer from '../model/LoadBalancer';
import LoadBalancerListResult from '../model/LoadBalancerListResult';

/**
* LoadBalancers service.
* @module api/LoadBalancersApi
* @version 2016-06-01
*/
export default class LoadBalancersApi {

    /**
    * Constructs a new LoadBalancersApi. 
    * @alias module:api/LoadBalancersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the loadBalancersCreateOrUpdate operation.
     * @callback module:api/LoadBalancersApi~loadBalancersCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoadBalancer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The Put LoadBalancer operation creates/updates a LoadBalancer
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} loadBalancerName The name of the loadBalancer.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/LoadBalancer} parameters Parameters supplied to the create/delete LoadBalancer operation
     * @param {module:api/LoadBalancersApi~loadBalancersCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoadBalancer}
     */
    loadBalancersCreateOrUpdate(resourceGroupName, loadBalancerName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling loadBalancersCreateOrUpdate");
      }
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling loadBalancersCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling loadBalancersCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling loadBalancersCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling loadBalancersCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'loadBalancerName': loadBalancerName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = LoadBalancer;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadBalancersDelete operation.
     * @callback module:api/LoadBalancersApi~loadBalancersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The delete LoadBalancer operation deletes the specified load balancer.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} loadBalancerName The name of the loadBalancer.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/LoadBalancersApi~loadBalancersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    loadBalancersDelete(resourceGroupName, loadBalancerName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling loadBalancersDelete");
      }
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling loadBalancersDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling loadBalancersDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling loadBalancersDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'loadBalancerName': loadBalancerName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadBalancersGet operation.
     * @callback module:api/LoadBalancersApi~loadBalancersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoadBalancer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The Get LoadBalancer operation retrieves information about the specified LoadBalancer.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} loadBalancerName The name of the loadBalancer.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] expand references resources.
     * @param {module:api/LoadBalancersApi~loadBalancersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoadBalancer}
     */
    loadBalancersGet(resourceGroupName, loadBalancerName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling loadBalancersGet");
      }
      // verify the required parameter 'loadBalancerName' is set
      if (loadBalancerName === undefined || loadBalancerName === null) {
        throw new Error("Missing the required parameter 'loadBalancerName' when calling loadBalancersGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling loadBalancersGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling loadBalancersGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'loadBalancerName': loadBalancerName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = LoadBalancer;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadBalancersList operation.
     * @callback module:api/LoadBalancersApi~loadBalancersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoadBalancerListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The List loadBalancer operation retrieves all the load balancers in a resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/LoadBalancersApi~loadBalancersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoadBalancerListResult}
     */
    loadBalancersList(resourceGroupName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling loadBalancersList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling loadBalancersList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling loadBalancersList");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = LoadBalancerListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadBalancersListAll operation.
     * @callback module:api/LoadBalancersApi~loadBalancersListAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoadBalancerListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The List loadBalancer operation retrieves all the load balancers in a subscription.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/LoadBalancersApi~loadBalancersListAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoadBalancerListResult}
     */
    loadBalancersListAll(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling loadBalancersListAll");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling loadBalancersListAll");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = LoadBalancerListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Network/loadBalancers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
