/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Route from '../model/Route';
import RouteListResult from '../model/RouteListResult';

/**
* Routes service.
* @module api/RoutesApi
* @version 2016-06-01
*/
export default class RoutesApi {

    /**
    * Constructs a new RoutesApi. 
    * @alias module:api/RoutesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the routesCreateOrUpdate operation.
     * @callback module:api/RoutesApi~routesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Route} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The Put route operation creates/updates a route in the specified route table
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} routeTableName The name of the route table.
     * @param {String} routeName The name of the route.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/Route} routeParameters Parameters supplied to the create/update route operation
     * @param {module:api/RoutesApi~routesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Route}
     */
    routesCreateOrUpdate(resourceGroupName, routeTableName, routeName, apiVersion, subscriptionId, routeParameters, callback) {
      let postBody = routeParameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling routesCreateOrUpdate");
      }
      // verify the required parameter 'routeTableName' is set
      if (routeTableName === undefined || routeTableName === null) {
        throw new Error("Missing the required parameter 'routeTableName' when calling routesCreateOrUpdate");
      }
      // verify the required parameter 'routeName' is set
      if (routeName === undefined || routeName === null) {
        throw new Error("Missing the required parameter 'routeName' when calling routesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling routesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling routesCreateOrUpdate");
      }
      // verify the required parameter 'routeParameters' is set
      if (routeParameters === undefined || routeParameters === null) {
        throw new Error("Missing the required parameter 'routeParameters' when calling routesCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'routeTableName': routeTableName,
        'routeName': routeName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = Route;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}/routes/{routeName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routesDelete operation.
     * @callback module:api/RoutesApi~routesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The delete route operation deletes the specified route from a route table.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} routeTableName The name of the route table.
     * @param {String} routeName The name of the route.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/RoutesApi~routesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    routesDelete(resourceGroupName, routeTableName, routeName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling routesDelete");
      }
      // verify the required parameter 'routeTableName' is set
      if (routeTableName === undefined || routeTableName === null) {
        throw new Error("Missing the required parameter 'routeTableName' when calling routesDelete");
      }
      // verify the required parameter 'routeName' is set
      if (routeName === undefined || routeName === null) {
        throw new Error("Missing the required parameter 'routeName' when calling routesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling routesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling routesDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'routeTableName': routeTableName,
        'routeName': routeName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}/routes/{routeName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routesGet operation.
     * @callback module:api/RoutesApi~routesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Route} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The Get route operation retrieves information about the specified route from the route table.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} routeTableName The name of the route table.
     * @param {String} routeName The name of the route.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/RoutesApi~routesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Route}
     */
    routesGet(resourceGroupName, routeTableName, routeName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling routesGet");
      }
      // verify the required parameter 'routeTableName' is set
      if (routeTableName === undefined || routeTableName === null) {
        throw new Error("Missing the required parameter 'routeTableName' when calling routesGet");
      }
      // verify the required parameter 'routeName' is set
      if (routeName === undefined || routeName === null) {
        throw new Error("Missing the required parameter 'routeName' when calling routesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling routesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling routesGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'routeTableName': routeTableName,
        'routeName': routeName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = Route;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}/routes/{routeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routesList operation.
     * @callback module:api/RoutesApi~routesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RouteListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The List network security rule operation retrieves all the routes in a route table.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} routeTableName The name of the route table.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/RoutesApi~routesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RouteListResult}
     */
    routesList(resourceGroupName, routeTableName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling routesList");
      }
      // verify the required parameter 'routeTableName' is set
      if (routeTableName === undefined || routeTableName === null) {
        throw new Error("Missing the required parameter 'routeTableName' when calling routesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling routesList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling routesList");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'routeTableName': routeTableName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = RouteListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/routeTables/{routeTableName}/routes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
