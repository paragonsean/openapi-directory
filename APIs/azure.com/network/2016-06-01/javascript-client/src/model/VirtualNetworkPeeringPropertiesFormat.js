/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubResource from './SubResource';

/**
 * The VirtualNetworkPeeringPropertiesFormat model module.
 * @module model/VirtualNetworkPeeringPropertiesFormat
 * @version 2016-06-01
 */
class VirtualNetworkPeeringPropertiesFormat {
    /**
     * Constructs a new <code>VirtualNetworkPeeringPropertiesFormat</code>.
     * @alias module:model/VirtualNetworkPeeringPropertiesFormat
     */
    constructor() { 
        
        VirtualNetworkPeeringPropertiesFormat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VirtualNetworkPeeringPropertiesFormat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualNetworkPeeringPropertiesFormat} obj Optional instance to populate.
     * @return {module:model/VirtualNetworkPeeringPropertiesFormat} The populated <code>VirtualNetworkPeeringPropertiesFormat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualNetworkPeeringPropertiesFormat();

            if (data.hasOwnProperty('allowForwardedTraffic')) {
                obj['allowForwardedTraffic'] = ApiClient.convertToType(data['allowForwardedTraffic'], 'Boolean');
            }
            if (data.hasOwnProperty('allowGatewayTransit')) {
                obj['allowGatewayTransit'] = ApiClient.convertToType(data['allowGatewayTransit'], 'Boolean');
            }
            if (data.hasOwnProperty('allowVirtualNetworkAccess')) {
                obj['allowVirtualNetworkAccess'] = ApiClient.convertToType(data['allowVirtualNetworkAccess'], 'Boolean');
            }
            if (data.hasOwnProperty('peeringState')) {
                obj['peeringState'] = ApiClient.convertToType(data['peeringState'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('remoteVirtualNetwork')) {
                obj['remoteVirtualNetwork'] = SubResource.constructFromObject(data['remoteVirtualNetwork']);
            }
            if (data.hasOwnProperty('useRemoteGateways')) {
                obj['useRemoteGateways'] = ApiClient.convertToType(data['useRemoteGateways'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualNetworkPeeringPropertiesFormat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualNetworkPeeringPropertiesFormat</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['peeringState'] && !(typeof data['peeringState'] === 'string' || data['peeringState'] instanceof String)) {
            throw new Error("Expected the field `peeringState` to be a primitive type in the JSON string but got " + data['peeringState']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `remoteVirtualNetwork`
        if (data['remoteVirtualNetwork']) { // data not null
          SubResource.validateJSON(data['remoteVirtualNetwork']);
        }

        return true;
    }


}



/**
 * Gets or sets whether the forwarded traffic from the VMs in the remote virtual network will be allowed/disallowed
 * @member {Boolean} allowForwardedTraffic
 */
VirtualNetworkPeeringPropertiesFormat.prototype['allowForwardedTraffic'] = undefined;

/**
 * Gets or sets if gatewayLinks can be used in remote virtual networkâ€™s link to this virtual network
 * @member {Boolean} allowGatewayTransit
 */
VirtualNetworkPeeringPropertiesFormat.prototype['allowGatewayTransit'] = undefined;

/**
 * Gets or sets whether the VMs in the linked virtual network space would be able to access all the VMs in local Virtual network space
 * @member {Boolean} allowVirtualNetworkAccess
 */
VirtualNetworkPeeringPropertiesFormat.prototype['allowVirtualNetworkAccess'] = undefined;

/**
 * Gets the status of the virtual network peering
 * @member {module:model/VirtualNetworkPeeringPropertiesFormat.PeeringStateEnum} peeringState
 */
VirtualNetworkPeeringPropertiesFormat.prototype['peeringState'] = undefined;

/**
 * Gets provisioning state of the resource
 * @member {String} provisioningState
 */
VirtualNetworkPeeringPropertiesFormat.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/SubResource} remoteVirtualNetwork
 */
VirtualNetworkPeeringPropertiesFormat.prototype['remoteVirtualNetwork'] = undefined;

/**
 * Gets or sets if remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only 1 peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.
 * @member {Boolean} useRemoteGateways
 */
VirtualNetworkPeeringPropertiesFormat.prototype['useRemoteGateways'] = undefined;





/**
 * Allowed values for the <code>peeringState</code> property.
 * @enum {String}
 * @readonly
 */
VirtualNetworkPeeringPropertiesFormat['PeeringStateEnum'] = {

    /**
     * value: "Initiated"
     * @const
     */
    "Initiated": "Initiated",

    /**
     * value: "Connected"
     * @const
     */
    "Connected": "Connected",

    /**
     * value: "Disconnected"
     * @const
     */
    "Disconnected": "Disconnected"
};



export default VirtualNetworkPeeringPropertiesFormat;

