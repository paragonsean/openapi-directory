/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationGatewayAuthenticationCertificate from './ApplicationGatewayAuthenticationCertificate';
import ApplicationGatewayBackendAddressPool from './ApplicationGatewayBackendAddressPool';
import ApplicationGatewayBackendHttpSettings from './ApplicationGatewayBackendHttpSettings';
import ApplicationGatewayFrontendIPConfiguration from './ApplicationGatewayFrontendIPConfiguration';
import ApplicationGatewayFrontendPort from './ApplicationGatewayFrontendPort';
import ApplicationGatewayHttpListener from './ApplicationGatewayHttpListener';
import ApplicationGatewayIPConfiguration from './ApplicationGatewayIPConfiguration';
import ApplicationGatewayProbe from './ApplicationGatewayProbe';
import ApplicationGatewayRequestRoutingRule from './ApplicationGatewayRequestRoutingRule';
import ApplicationGatewaySku from './ApplicationGatewaySku';
import ApplicationGatewaySslCertificate from './ApplicationGatewaySslCertificate';
import ApplicationGatewaySslPolicy from './ApplicationGatewaySslPolicy';
import ApplicationGatewayUrlPathMap from './ApplicationGatewayUrlPathMap';

/**
 * The ApplicationGatewayPropertiesFormat model module.
 * @module model/ApplicationGatewayPropertiesFormat
 * @version 2016-06-01
 */
class ApplicationGatewayPropertiesFormat {
    /**
     * Constructs a new <code>ApplicationGatewayPropertiesFormat</code>.
     * Properties of Application Gateway
     * @alias module:model/ApplicationGatewayPropertiesFormat
     */
    constructor() { 
        
        ApplicationGatewayPropertiesFormat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApplicationGatewayPropertiesFormat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationGatewayPropertiesFormat} obj Optional instance to populate.
     * @return {module:model/ApplicationGatewayPropertiesFormat} The populated <code>ApplicationGatewayPropertiesFormat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationGatewayPropertiesFormat();

            if (data.hasOwnProperty('authenticationCertificates')) {
                obj['authenticationCertificates'] = ApiClient.convertToType(data['authenticationCertificates'], [ApplicationGatewayAuthenticationCertificate]);
            }
            if (data.hasOwnProperty('backendAddressPools')) {
                obj['backendAddressPools'] = ApiClient.convertToType(data['backendAddressPools'], [ApplicationGatewayBackendAddressPool]);
            }
            if (data.hasOwnProperty('backendHttpSettingsCollection')) {
                obj['backendHttpSettingsCollection'] = ApiClient.convertToType(data['backendHttpSettingsCollection'], [ApplicationGatewayBackendHttpSettings]);
            }
            if (data.hasOwnProperty('frontendIPConfigurations')) {
                obj['frontendIPConfigurations'] = ApiClient.convertToType(data['frontendIPConfigurations'], [ApplicationGatewayFrontendIPConfiguration]);
            }
            if (data.hasOwnProperty('frontendPorts')) {
                obj['frontendPorts'] = ApiClient.convertToType(data['frontendPorts'], [ApplicationGatewayFrontendPort]);
            }
            if (data.hasOwnProperty('gatewayIPConfigurations')) {
                obj['gatewayIPConfigurations'] = ApiClient.convertToType(data['gatewayIPConfigurations'], [ApplicationGatewayIPConfiguration]);
            }
            if (data.hasOwnProperty('httpListeners')) {
                obj['httpListeners'] = ApiClient.convertToType(data['httpListeners'], [ApplicationGatewayHttpListener]);
            }
            if (data.hasOwnProperty('operationalState')) {
                obj['operationalState'] = ApiClient.convertToType(data['operationalState'], 'String');
            }
            if (data.hasOwnProperty('probes')) {
                obj['probes'] = ApiClient.convertToType(data['probes'], [ApplicationGatewayProbe]);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('requestRoutingRules')) {
                obj['requestRoutingRules'] = ApiClient.convertToType(data['requestRoutingRules'], [ApplicationGatewayRequestRoutingRule]);
            }
            if (data.hasOwnProperty('resourceGuid')) {
                obj['resourceGuid'] = ApiClient.convertToType(data['resourceGuid'], 'String');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = ApplicationGatewaySku.constructFromObject(data['sku']);
            }
            if (data.hasOwnProperty('sslCertificates')) {
                obj['sslCertificates'] = ApiClient.convertToType(data['sslCertificates'], [ApplicationGatewaySslCertificate]);
            }
            if (data.hasOwnProperty('sslPolicy')) {
                obj['sslPolicy'] = ApplicationGatewaySslPolicy.constructFromObject(data['sslPolicy']);
            }
            if (data.hasOwnProperty('urlPathMaps')) {
                obj['urlPathMaps'] = ApiClient.convertToType(data['urlPathMaps'], [ApplicationGatewayUrlPathMap]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplicationGatewayPropertiesFormat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplicationGatewayPropertiesFormat</code>.
     */
    static validateJSON(data) {
        if (data['authenticationCertificates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authenticationCertificates'])) {
                throw new Error("Expected the field `authenticationCertificates` to be an array in the JSON data but got " + data['authenticationCertificates']);
            }
            // validate the optional field `authenticationCertificates` (array)
            for (const item of data['authenticationCertificates']) {
                ApplicationGatewayAuthenticationCertificate.validateJSON(item);
            };
        }
        if (data['backendAddressPools']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['backendAddressPools'])) {
                throw new Error("Expected the field `backendAddressPools` to be an array in the JSON data but got " + data['backendAddressPools']);
            }
            // validate the optional field `backendAddressPools` (array)
            for (const item of data['backendAddressPools']) {
                ApplicationGatewayBackendAddressPool.validateJSON(item);
            };
        }
        if (data['backendHttpSettingsCollection']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['backendHttpSettingsCollection'])) {
                throw new Error("Expected the field `backendHttpSettingsCollection` to be an array in the JSON data but got " + data['backendHttpSettingsCollection']);
            }
            // validate the optional field `backendHttpSettingsCollection` (array)
            for (const item of data['backendHttpSettingsCollection']) {
                ApplicationGatewayBackendHttpSettings.validateJSON(item);
            };
        }
        if (data['frontendIPConfigurations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['frontendIPConfigurations'])) {
                throw new Error("Expected the field `frontendIPConfigurations` to be an array in the JSON data but got " + data['frontendIPConfigurations']);
            }
            // validate the optional field `frontendIPConfigurations` (array)
            for (const item of data['frontendIPConfigurations']) {
                ApplicationGatewayFrontendIPConfiguration.validateJSON(item);
            };
        }
        if (data['frontendPorts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['frontendPorts'])) {
                throw new Error("Expected the field `frontendPorts` to be an array in the JSON data but got " + data['frontendPorts']);
            }
            // validate the optional field `frontendPorts` (array)
            for (const item of data['frontendPorts']) {
                ApplicationGatewayFrontendPort.validateJSON(item);
            };
        }
        if (data['gatewayIPConfigurations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['gatewayIPConfigurations'])) {
                throw new Error("Expected the field `gatewayIPConfigurations` to be an array in the JSON data but got " + data['gatewayIPConfigurations']);
            }
            // validate the optional field `gatewayIPConfigurations` (array)
            for (const item of data['gatewayIPConfigurations']) {
                ApplicationGatewayIPConfiguration.validateJSON(item);
            };
        }
        if (data['httpListeners']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['httpListeners'])) {
                throw new Error("Expected the field `httpListeners` to be an array in the JSON data but got " + data['httpListeners']);
            }
            // validate the optional field `httpListeners` (array)
            for (const item of data['httpListeners']) {
                ApplicationGatewayHttpListener.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['operationalState'] && !(typeof data['operationalState'] === 'string' || data['operationalState'] instanceof String)) {
            throw new Error("Expected the field `operationalState` to be a primitive type in the JSON string but got " + data['operationalState']);
        }
        if (data['probes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['probes'])) {
                throw new Error("Expected the field `probes` to be an array in the JSON data but got " + data['probes']);
            }
            // validate the optional field `probes` (array)
            for (const item of data['probes']) {
                ApplicationGatewayProbe.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        if (data['requestRoutingRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['requestRoutingRules'])) {
                throw new Error("Expected the field `requestRoutingRules` to be an array in the JSON data but got " + data['requestRoutingRules']);
            }
            // validate the optional field `requestRoutingRules` (array)
            for (const item of data['requestRoutingRules']) {
                ApplicationGatewayRequestRoutingRule.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['resourceGuid'] && !(typeof data['resourceGuid'] === 'string' || data['resourceGuid'] instanceof String)) {
            throw new Error("Expected the field `resourceGuid` to be a primitive type in the JSON string but got " + data['resourceGuid']);
        }
        // validate the optional field `sku`
        if (data['sku']) { // data not null
          ApplicationGatewaySku.validateJSON(data['sku']);
        }
        if (data['sslCertificates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sslCertificates'])) {
                throw new Error("Expected the field `sslCertificates` to be an array in the JSON data but got " + data['sslCertificates']);
            }
            // validate the optional field `sslCertificates` (array)
            for (const item of data['sslCertificates']) {
                ApplicationGatewaySslCertificate.validateJSON(item);
            };
        }
        // validate the optional field `sslPolicy`
        if (data['sslPolicy']) { // data not null
          ApplicationGatewaySslPolicy.validateJSON(data['sslPolicy']);
        }
        if (data['urlPathMaps']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['urlPathMaps'])) {
                throw new Error("Expected the field `urlPathMaps` to be an array in the JSON data but got " + data['urlPathMaps']);
            }
            // validate the optional field `urlPathMaps` (array)
            for (const item of data['urlPathMaps']) {
                ApplicationGatewayUrlPathMap.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Authentication certificates of application gateway resource
 * @member {Array.<module:model/ApplicationGatewayAuthenticationCertificate>} authenticationCertificates
 */
ApplicationGatewayPropertiesFormat.prototype['authenticationCertificates'] = undefined;

/**
 * Backend address pool of application gateway resource
 * @member {Array.<module:model/ApplicationGatewayBackendAddressPool>} backendAddressPools
 */
ApplicationGatewayPropertiesFormat.prototype['backendAddressPools'] = undefined;

/**
 * Backend http settings of application gateway resource
 * @member {Array.<module:model/ApplicationGatewayBackendHttpSettings>} backendHttpSettingsCollection
 */
ApplicationGatewayPropertiesFormat.prototype['backendHttpSettingsCollection'] = undefined;

/**
 * Frontend IP addresses of application gateway resource
 * @member {Array.<module:model/ApplicationGatewayFrontendIPConfiguration>} frontendIPConfigurations
 */
ApplicationGatewayPropertiesFormat.prototype['frontendIPConfigurations'] = undefined;

/**
 * Frontend ports of application gateway resource
 * @member {Array.<module:model/ApplicationGatewayFrontendPort>} frontendPorts
 */
ApplicationGatewayPropertiesFormat.prototype['frontendPorts'] = undefined;

/**
 * Subnets of application gateway resource
 * @member {Array.<module:model/ApplicationGatewayIPConfiguration>} gatewayIPConfigurations
 */
ApplicationGatewayPropertiesFormat.prototype['gatewayIPConfigurations'] = undefined;

/**
 * HTTP listeners of application gateway resource
 * @member {Array.<module:model/ApplicationGatewayHttpListener>} httpListeners
 */
ApplicationGatewayPropertiesFormat.prototype['httpListeners'] = undefined;

/**
 * Operational state of application gateway resource
 * @member {module:model/ApplicationGatewayPropertiesFormat.OperationalStateEnum} operationalState
 */
ApplicationGatewayPropertiesFormat.prototype['operationalState'] = undefined;

/**
 * Probes of application gateway resource
 * @member {Array.<module:model/ApplicationGatewayProbe>} probes
 */
ApplicationGatewayPropertiesFormat.prototype['probes'] = undefined;

/**
 * Provisioning state of the ApplicationGateway resource Updating/Deleting/Failed
 * @member {String} provisioningState
 */
ApplicationGatewayPropertiesFormat.prototype['provisioningState'] = undefined;

/**
 * Request routing rules of application gateway resource
 * @member {Array.<module:model/ApplicationGatewayRequestRoutingRule>} requestRoutingRules
 */
ApplicationGatewayPropertiesFormat.prototype['requestRoutingRules'] = undefined;

/**
 * Resource guid property of the ApplicationGateway resource
 * @member {String} resourceGuid
 */
ApplicationGatewayPropertiesFormat.prototype['resourceGuid'] = undefined;

/**
 * @member {module:model/ApplicationGatewaySku} sku
 */
ApplicationGatewayPropertiesFormat.prototype['sku'] = undefined;

/**
 * SSL certificates of application gateway resource
 * @member {Array.<module:model/ApplicationGatewaySslCertificate>} sslCertificates
 */
ApplicationGatewayPropertiesFormat.prototype['sslCertificates'] = undefined;

/**
 * @member {module:model/ApplicationGatewaySslPolicy} sslPolicy
 */
ApplicationGatewayPropertiesFormat.prototype['sslPolicy'] = undefined;

/**
 * URL path map of application gateway resource
 * @member {Array.<module:model/ApplicationGatewayUrlPathMap>} urlPathMaps
 */
ApplicationGatewayPropertiesFormat.prototype['urlPathMaps'] = undefined;





/**
 * Allowed values for the <code>operationalState</code> property.
 * @enum {String}
 * @readonly
 */
ApplicationGatewayPropertiesFormat['OperationalStateEnum'] = {

    /**
     * value: "Stopped"
     * @const
     */
    "Stopped": "Stopped",

    /**
     * value: "Starting"
     * @const
     */
    "Starting": "Starting",

    /**
     * value: "Running"
     * @const
     */
    "Running": "Running",

    /**
     * value: "Stopping"
     * @const
     */
    "Stopping": "Stopping"
};



export default ApplicationGatewayPropertiesFormat;

