/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubResource from './SubResource';

/**
 * The InboundNatPoolPropertiesFormat model module.
 * @module model/InboundNatPoolPropertiesFormat
 * @version 2016-06-01
 */
class InboundNatPoolPropertiesFormat {
    /**
     * Constructs a new <code>InboundNatPoolPropertiesFormat</code>.
     * Properties of Inbound NAT pool
     * @alias module:model/InboundNatPoolPropertiesFormat
     * @param backendPort {Number} Gets or sets a port used for internal connections on the endpoint. The localPort attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where a role must communicate to an internal component on a port that is different from the one that is exposed externally. If not specified, the value of localPort is the same as the port attribute. Set the value of localPort to '*' to automatically assign an unallocated port that is discoverable using the runtime API
     * @param frontendPortRangeEnd {Number} Gets or sets the ending port range for the NAT pool. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive
     * @param frontendPortRangeStart {Number} Gets or sets the starting port range for the NAT pool. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive
     * @param protocol {module:model/InboundNatPoolPropertiesFormat.ProtocolEnum} Gets or sets the transport protocol for the endpoint. Possible values are Udp or Tcp
     */
    constructor(backendPort, frontendPortRangeEnd, frontendPortRangeStart, protocol) { 
        
        InboundNatPoolPropertiesFormat.initialize(this, backendPort, frontendPortRangeEnd, frontendPortRangeStart, protocol);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, backendPort, frontendPortRangeEnd, frontendPortRangeStart, protocol) { 
        obj['backendPort'] = backendPort;
        obj['frontendPortRangeEnd'] = frontendPortRangeEnd;
        obj['frontendPortRangeStart'] = frontendPortRangeStart;
        obj['protocol'] = protocol;
    }

    /**
     * Constructs a <code>InboundNatPoolPropertiesFormat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InboundNatPoolPropertiesFormat} obj Optional instance to populate.
     * @return {module:model/InboundNatPoolPropertiesFormat} The populated <code>InboundNatPoolPropertiesFormat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InboundNatPoolPropertiesFormat();

            if (data.hasOwnProperty('backendPort')) {
                obj['backendPort'] = ApiClient.convertToType(data['backendPort'], 'Number');
            }
            if (data.hasOwnProperty('frontendIPConfiguration')) {
                obj['frontendIPConfiguration'] = SubResource.constructFromObject(data['frontendIPConfiguration']);
            }
            if (data.hasOwnProperty('frontendPortRangeEnd')) {
                obj['frontendPortRangeEnd'] = ApiClient.convertToType(data['frontendPortRangeEnd'], 'Number');
            }
            if (data.hasOwnProperty('frontendPortRangeStart')) {
                obj['frontendPortRangeStart'] = ApiClient.convertToType(data['frontendPortRangeStart'], 'Number');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InboundNatPoolPropertiesFormat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InboundNatPoolPropertiesFormat</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InboundNatPoolPropertiesFormat.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `frontendIPConfiguration`
        if (data['frontendIPConfiguration']) { // data not null
          SubResource.validateJSON(data['frontendIPConfiguration']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}

InboundNatPoolPropertiesFormat.RequiredProperties = ["backendPort", "frontendPortRangeEnd", "frontendPortRangeStart", "protocol"];

/**
 * Gets or sets a port used for internal connections on the endpoint. The localPort attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where a role must communicate to an internal component on a port that is different from the one that is exposed externally. If not specified, the value of localPort is the same as the port attribute. Set the value of localPort to '*' to automatically assign an unallocated port that is discoverable using the runtime API
 * @member {Number} backendPort
 */
InboundNatPoolPropertiesFormat.prototype['backendPort'] = undefined;

/**
 * @member {module:model/SubResource} frontendIPConfiguration
 */
InboundNatPoolPropertiesFormat.prototype['frontendIPConfiguration'] = undefined;

/**
 * Gets or sets the ending port range for the NAT pool. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive
 * @member {Number} frontendPortRangeEnd
 */
InboundNatPoolPropertiesFormat.prototype['frontendPortRangeEnd'] = undefined;

/**
 * Gets or sets the starting port range for the NAT pool. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive
 * @member {Number} frontendPortRangeStart
 */
InboundNatPoolPropertiesFormat.prototype['frontendPortRangeStart'] = undefined;

/**
 * Gets or sets the transport protocol for the endpoint. Possible values are Udp or Tcp
 * @member {module:model/InboundNatPoolPropertiesFormat.ProtocolEnum} protocol
 */
InboundNatPoolPropertiesFormat.prototype['protocol'] = undefined;

/**
 * Gets provisioning state of the PublicIP resource Updating/Deleting/Failed
 * @member {String} provisioningState
 */
InboundNatPoolPropertiesFormat.prototype['provisioningState'] = undefined;





/**
 * Allowed values for the <code>protocol</code> property.
 * @enum {String}
 * @readonly
 */
InboundNatPoolPropertiesFormat['ProtocolEnum'] = {

    /**
     * value: "Udp"
     * @const
     */
    "Udp": "Udp",

    /**
     * value: "Tcp"
     * @const
     */
    "Tcp": "Tcp"
};



export default InboundNatPoolPropertiesFormat;

