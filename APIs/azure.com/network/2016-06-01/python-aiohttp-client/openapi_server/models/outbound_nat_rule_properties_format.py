# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sub_resource import SubResource
from openapi_server import util


class OutboundNatRulePropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allocated_outbound_ports: int=None, backend_address_pool: SubResource=None, frontend_ip_configurations: List[SubResource]=None, provisioning_state: str=None):
        """OutboundNatRulePropertiesFormat - a model defined in OpenAPI

        :param allocated_outbound_ports: The allocated_outbound_ports of this OutboundNatRulePropertiesFormat.
        :param backend_address_pool: The backend_address_pool of this OutboundNatRulePropertiesFormat.
        :param frontend_ip_configurations: The frontend_ip_configurations of this OutboundNatRulePropertiesFormat.
        :param provisioning_state: The provisioning_state of this OutboundNatRulePropertiesFormat.
        """
        self.openapi_types = {
            'allocated_outbound_ports': int,
            'backend_address_pool': SubResource,
            'frontend_ip_configurations': List[SubResource],
            'provisioning_state': str
        }

        self.attribute_map = {
            'allocated_outbound_ports': 'allocatedOutboundPorts',
            'backend_address_pool': 'backendAddressPool',
            'frontend_ip_configurations': 'frontendIPConfigurations',
            'provisioning_state': 'provisioningState'
        }

        self._allocated_outbound_ports = allocated_outbound_ports
        self._backend_address_pool = backend_address_pool
        self._frontend_ip_configurations = frontend_ip_configurations
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutboundNatRulePropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutboundNatRulePropertiesFormat of this OutboundNatRulePropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocated_outbound_ports(self):
        """Gets the allocated_outbound_ports of this OutboundNatRulePropertiesFormat.

        Gets or sets the number of outbound ports to be used for SNAT

        :return: The allocated_outbound_ports of this OutboundNatRulePropertiesFormat.
        :rtype: int
        """
        return self._allocated_outbound_ports

    @allocated_outbound_ports.setter
    def allocated_outbound_ports(self, allocated_outbound_ports):
        """Sets the allocated_outbound_ports of this OutboundNatRulePropertiesFormat.

        Gets or sets the number of outbound ports to be used for SNAT

        :param allocated_outbound_ports: The allocated_outbound_ports of this OutboundNatRulePropertiesFormat.
        :type allocated_outbound_ports: int
        """

        self._allocated_outbound_ports = allocated_outbound_ports

    @property
    def backend_address_pool(self):
        """Gets the backend_address_pool of this OutboundNatRulePropertiesFormat.


        :return: The backend_address_pool of this OutboundNatRulePropertiesFormat.
        :rtype: SubResource
        """
        return self._backend_address_pool

    @backend_address_pool.setter
    def backend_address_pool(self, backend_address_pool):
        """Sets the backend_address_pool of this OutboundNatRulePropertiesFormat.


        :param backend_address_pool: The backend_address_pool of this OutboundNatRulePropertiesFormat.
        :type backend_address_pool: SubResource
        """
        if backend_address_pool is None:
            raise ValueError("Invalid value for `backend_address_pool`, must not be `None`")

        self._backend_address_pool = backend_address_pool

    @property
    def frontend_ip_configurations(self):
        """Gets the frontend_ip_configurations of this OutboundNatRulePropertiesFormat.

        Gets or sets Frontend IP addresses of the load balancer

        :return: The frontend_ip_configurations of this OutboundNatRulePropertiesFormat.
        :rtype: List[SubResource]
        """
        return self._frontend_ip_configurations

    @frontend_ip_configurations.setter
    def frontend_ip_configurations(self, frontend_ip_configurations):
        """Sets the frontend_ip_configurations of this OutboundNatRulePropertiesFormat.

        Gets or sets Frontend IP addresses of the load balancer

        :param frontend_ip_configurations: The frontend_ip_configurations of this OutboundNatRulePropertiesFormat.
        :type frontend_ip_configurations: List[SubResource]
        """

        self._frontend_ip_configurations = frontend_ip_configurations

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this OutboundNatRulePropertiesFormat.

        Gets provisioning state of the PublicIP resource Updating/Deleting/Failed

        :return: The provisioning_state of this OutboundNatRulePropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this OutboundNatRulePropertiesFormat.

        Gets provisioning state of the PublicIP resource Updating/Deleting/Failed

        :param provisioning_state: The provisioning_state of this OutboundNatRulePropertiesFormat.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state
