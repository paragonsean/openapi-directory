# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sub_resource import SubResource
from openapi_server import util


class InboundNatPoolPropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backend_port: int=None, frontend_ip_configuration: SubResource=None, frontend_port_range_end: int=None, frontend_port_range_start: int=None, protocol: str=None, provisioning_state: str=None):
        """InboundNatPoolPropertiesFormat - a model defined in OpenAPI

        :param backend_port: The backend_port of this InboundNatPoolPropertiesFormat.
        :param frontend_ip_configuration: The frontend_ip_configuration of this InboundNatPoolPropertiesFormat.
        :param frontend_port_range_end: The frontend_port_range_end of this InboundNatPoolPropertiesFormat.
        :param frontend_port_range_start: The frontend_port_range_start of this InboundNatPoolPropertiesFormat.
        :param protocol: The protocol of this InboundNatPoolPropertiesFormat.
        :param provisioning_state: The provisioning_state of this InboundNatPoolPropertiesFormat.
        """
        self.openapi_types = {
            'backend_port': int,
            'frontend_ip_configuration': SubResource,
            'frontend_port_range_end': int,
            'frontend_port_range_start': int,
            'protocol': str,
            'provisioning_state': str
        }

        self.attribute_map = {
            'backend_port': 'backendPort',
            'frontend_ip_configuration': 'frontendIPConfiguration',
            'frontend_port_range_end': 'frontendPortRangeEnd',
            'frontend_port_range_start': 'frontendPortRangeStart',
            'protocol': 'protocol',
            'provisioning_state': 'provisioningState'
        }

        self._backend_port = backend_port
        self._frontend_ip_configuration = frontend_ip_configuration
        self._frontend_port_range_end = frontend_port_range_end
        self._frontend_port_range_start = frontend_port_range_start
        self._protocol = protocol
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InboundNatPoolPropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InboundNatPoolPropertiesFormat of this InboundNatPoolPropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backend_port(self):
        """Gets the backend_port of this InboundNatPoolPropertiesFormat.

        Gets or sets a port used for internal connections on the endpoint. The localPort attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where a role must communicate to an internal component on a port that is different from the one that is exposed externally. If not specified, the value of localPort is the same as the port attribute. Set the value of localPort to '*' to automatically assign an unallocated port that is discoverable using the runtime API

        :return: The backend_port of this InboundNatPoolPropertiesFormat.
        :rtype: int
        """
        return self._backend_port

    @backend_port.setter
    def backend_port(self, backend_port):
        """Sets the backend_port of this InboundNatPoolPropertiesFormat.

        Gets or sets a port used for internal connections on the endpoint. The localPort attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where a role must communicate to an internal component on a port that is different from the one that is exposed externally. If not specified, the value of localPort is the same as the port attribute. Set the value of localPort to '*' to automatically assign an unallocated port that is discoverable using the runtime API

        :param backend_port: The backend_port of this InboundNatPoolPropertiesFormat.
        :type backend_port: int
        """
        if backend_port is None:
            raise ValueError("Invalid value for `backend_port`, must not be `None`")

        self._backend_port = backend_port

    @property
    def frontend_ip_configuration(self):
        """Gets the frontend_ip_configuration of this InboundNatPoolPropertiesFormat.


        :return: The frontend_ip_configuration of this InboundNatPoolPropertiesFormat.
        :rtype: SubResource
        """
        return self._frontend_ip_configuration

    @frontend_ip_configuration.setter
    def frontend_ip_configuration(self, frontend_ip_configuration):
        """Sets the frontend_ip_configuration of this InboundNatPoolPropertiesFormat.


        :param frontend_ip_configuration: The frontend_ip_configuration of this InboundNatPoolPropertiesFormat.
        :type frontend_ip_configuration: SubResource
        """

        self._frontend_ip_configuration = frontend_ip_configuration

    @property
    def frontend_port_range_end(self):
        """Gets the frontend_port_range_end of this InboundNatPoolPropertiesFormat.

        Gets or sets the ending port range for the NAT pool. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive

        :return: The frontend_port_range_end of this InboundNatPoolPropertiesFormat.
        :rtype: int
        """
        return self._frontend_port_range_end

    @frontend_port_range_end.setter
    def frontend_port_range_end(self, frontend_port_range_end):
        """Sets the frontend_port_range_end of this InboundNatPoolPropertiesFormat.

        Gets or sets the ending port range for the NAT pool. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive

        :param frontend_port_range_end: The frontend_port_range_end of this InboundNatPoolPropertiesFormat.
        :type frontend_port_range_end: int
        """
        if frontend_port_range_end is None:
            raise ValueError("Invalid value for `frontend_port_range_end`, must not be `None`")

        self._frontend_port_range_end = frontend_port_range_end

    @property
    def frontend_port_range_start(self):
        """Gets the frontend_port_range_start of this InboundNatPoolPropertiesFormat.

        Gets or sets the starting port range for the NAT pool. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive

        :return: The frontend_port_range_start of this InboundNatPoolPropertiesFormat.
        :rtype: int
        """
        return self._frontend_port_range_start

    @frontend_port_range_start.setter
    def frontend_port_range_start(self, frontend_port_range_start):
        """Sets the frontend_port_range_start of this InboundNatPoolPropertiesFormat.

        Gets or sets the starting port range for the NAT pool. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive

        :param frontend_port_range_start: The frontend_port_range_start of this InboundNatPoolPropertiesFormat.
        :type frontend_port_range_start: int
        """
        if frontend_port_range_start is None:
            raise ValueError("Invalid value for `frontend_port_range_start`, must not be `None`")

        self._frontend_port_range_start = frontend_port_range_start

    @property
    def protocol(self):
        """Gets the protocol of this InboundNatPoolPropertiesFormat.

        Gets or sets the transport protocol for the endpoint. Possible values are Udp or Tcp

        :return: The protocol of this InboundNatPoolPropertiesFormat.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this InboundNatPoolPropertiesFormat.

        Gets or sets the transport protocol for the endpoint. Possible values are Udp or Tcp

        :param protocol: The protocol of this InboundNatPoolPropertiesFormat.
        :type protocol: str
        """
        allowed_values = ["Udp", "Tcp"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this InboundNatPoolPropertiesFormat.

        Gets provisioning state of the PublicIP resource Updating/Deleting/Failed

        :return: The provisioning_state of this InboundNatPoolPropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this InboundNatPoolPropertiesFormat.

        Gets provisioning state of the PublicIP resource Updating/Deleting/Failed

        :param provisioning_state: The provisioning_state of this InboundNatPoolPropertiesFormat.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state
