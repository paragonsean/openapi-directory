# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationGatewayProbePropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host: str=None, interval: int=None, path: str=None, protocol: str=None, provisioning_state: str=None, timeout: int=None, unhealthy_threshold: int=None):
        """ApplicationGatewayProbePropertiesFormat - a model defined in OpenAPI

        :param host: The host of this ApplicationGatewayProbePropertiesFormat.
        :param interval: The interval of this ApplicationGatewayProbePropertiesFormat.
        :param path: The path of this ApplicationGatewayProbePropertiesFormat.
        :param protocol: The protocol of this ApplicationGatewayProbePropertiesFormat.
        :param provisioning_state: The provisioning_state of this ApplicationGatewayProbePropertiesFormat.
        :param timeout: The timeout of this ApplicationGatewayProbePropertiesFormat.
        :param unhealthy_threshold: The unhealthy_threshold of this ApplicationGatewayProbePropertiesFormat.
        """
        self.openapi_types = {
            'host': str,
            'interval': int,
            'path': str,
            'protocol': str,
            'provisioning_state': str,
            'timeout': int,
            'unhealthy_threshold': int
        }

        self.attribute_map = {
            'host': 'host',
            'interval': 'interval',
            'path': 'path',
            'protocol': 'protocol',
            'provisioning_state': 'provisioningState',
            'timeout': 'timeout',
            'unhealthy_threshold': 'unhealthyThreshold'
        }

        self._host = host
        self._interval = interval
        self._path = path
        self._protocol = protocol
        self._provisioning_state = provisioning_state
        self._timeout = timeout
        self._unhealthy_threshold = unhealthy_threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationGatewayProbePropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationGatewayProbePropertiesFormat of this ApplicationGatewayProbePropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host(self):
        """Gets the host of this ApplicationGatewayProbePropertiesFormat.

        Host to send probe to 

        :return: The host of this ApplicationGatewayProbePropertiesFormat.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this ApplicationGatewayProbePropertiesFormat.

        Host to send probe to 

        :param host: The host of this ApplicationGatewayProbePropertiesFormat.
        :type host: str
        """

        self._host = host

    @property
    def interval(self):
        """Gets the interval of this ApplicationGatewayProbePropertiesFormat.

        Probing interval in seconds 

        :return: The interval of this ApplicationGatewayProbePropertiesFormat.
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ApplicationGatewayProbePropertiesFormat.

        Probing interval in seconds 

        :param interval: The interval of this ApplicationGatewayProbePropertiesFormat.
        :type interval: int
        """

        self._interval = interval

    @property
    def path(self):
        """Gets the path of this ApplicationGatewayProbePropertiesFormat.

        Relative path of probe 

        :return: The path of this ApplicationGatewayProbePropertiesFormat.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ApplicationGatewayProbePropertiesFormat.

        Relative path of probe 

        :param path: The path of this ApplicationGatewayProbePropertiesFormat.
        :type path: str
        """

        self._path = path

    @property
    def protocol(self):
        """Gets the protocol of this ApplicationGatewayProbePropertiesFormat.

        Protocol

        :return: The protocol of this ApplicationGatewayProbePropertiesFormat.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ApplicationGatewayProbePropertiesFormat.

        Protocol

        :param protocol: The protocol of this ApplicationGatewayProbePropertiesFormat.
        :type protocol: str
        """
        allowed_values = ["Http", "Https"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ApplicationGatewayProbePropertiesFormat.

        Provisioning state of the backend http settings resource Updating/Deleting/Failed

        :return: The provisioning_state of this ApplicationGatewayProbePropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ApplicationGatewayProbePropertiesFormat.

        Provisioning state of the backend http settings resource Updating/Deleting/Failed

        :param provisioning_state: The provisioning_state of this ApplicationGatewayProbePropertiesFormat.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def timeout(self):
        """Gets the timeout of this ApplicationGatewayProbePropertiesFormat.

        Probing timeout in seconds 

        :return: The timeout of this ApplicationGatewayProbePropertiesFormat.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ApplicationGatewayProbePropertiesFormat.

        Probing timeout in seconds 

        :param timeout: The timeout of this ApplicationGatewayProbePropertiesFormat.
        :type timeout: int
        """

        self._timeout = timeout

    @property
    def unhealthy_threshold(self):
        """Gets the unhealthy_threshold of this ApplicationGatewayProbePropertiesFormat.

        Probing unhealthy threshold 

        :return: The unhealthy_threshold of this ApplicationGatewayProbePropertiesFormat.
        :rtype: int
        """
        return self._unhealthy_threshold

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, unhealthy_threshold):
        """Sets the unhealthy_threshold of this ApplicationGatewayProbePropertiesFormat.

        Probing unhealthy threshold 

        :param unhealthy_threshold: The unhealthy_threshold of this ApplicationGatewayProbePropertiesFormat.
        :type unhealthy_threshold: int
        """

        self._unhealthy_threshold = unhealthy_threshold
