# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.network_interface_ip_configuration import NetworkInterfaceIPConfiguration
from openapi_server.models.sub_resource import SubResource
from openapi_server import util


class InboundNatRulePropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backend_ip_configuration: NetworkInterfaceIPConfiguration=None, backend_port: int=None, enable_floating_ip: bool=None, frontend_ip_configuration: SubResource=None, frontend_port: int=None, idle_timeout_in_minutes: int=None, protocol: str=None, provisioning_state: str=None):
        """InboundNatRulePropertiesFormat - a model defined in OpenAPI

        :param backend_ip_configuration: The backend_ip_configuration of this InboundNatRulePropertiesFormat.
        :param backend_port: The backend_port of this InboundNatRulePropertiesFormat.
        :param enable_floating_ip: The enable_floating_ip of this InboundNatRulePropertiesFormat.
        :param frontend_ip_configuration: The frontend_ip_configuration of this InboundNatRulePropertiesFormat.
        :param frontend_port: The frontend_port of this InboundNatRulePropertiesFormat.
        :param idle_timeout_in_minutes: The idle_timeout_in_minutes of this InboundNatRulePropertiesFormat.
        :param protocol: The protocol of this InboundNatRulePropertiesFormat.
        :param provisioning_state: The provisioning_state of this InboundNatRulePropertiesFormat.
        """
        self.openapi_types = {
            'backend_ip_configuration': NetworkInterfaceIPConfiguration,
            'backend_port': int,
            'enable_floating_ip': bool,
            'frontend_ip_configuration': SubResource,
            'frontend_port': int,
            'idle_timeout_in_minutes': int,
            'protocol': str,
            'provisioning_state': str
        }

        self.attribute_map = {
            'backend_ip_configuration': 'backendIPConfiguration',
            'backend_port': 'backendPort',
            'enable_floating_ip': 'enableFloatingIP',
            'frontend_ip_configuration': 'frontendIPConfiguration',
            'frontend_port': 'frontendPort',
            'idle_timeout_in_minutes': 'idleTimeoutInMinutes',
            'protocol': 'protocol',
            'provisioning_state': 'provisioningState'
        }

        self._backend_ip_configuration = backend_ip_configuration
        self._backend_port = backend_port
        self._enable_floating_ip = enable_floating_ip
        self._frontend_ip_configuration = frontend_ip_configuration
        self._frontend_port = frontend_port
        self._idle_timeout_in_minutes = idle_timeout_in_minutes
        self._protocol = protocol
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InboundNatRulePropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InboundNatRulePropertiesFormat of this InboundNatRulePropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backend_ip_configuration(self):
        """Gets the backend_ip_configuration of this InboundNatRulePropertiesFormat.


        :return: The backend_ip_configuration of this InboundNatRulePropertiesFormat.
        :rtype: NetworkInterfaceIPConfiguration
        """
        return self._backend_ip_configuration

    @backend_ip_configuration.setter
    def backend_ip_configuration(self, backend_ip_configuration):
        """Sets the backend_ip_configuration of this InboundNatRulePropertiesFormat.


        :param backend_ip_configuration: The backend_ip_configuration of this InboundNatRulePropertiesFormat.
        :type backend_ip_configuration: NetworkInterfaceIPConfiguration
        """

        self._backend_ip_configuration = backend_ip_configuration

    @property
    def backend_port(self):
        """Gets the backend_port of this InboundNatRulePropertiesFormat.

        Gets or sets a port used for internal connections on the endpoint. The localPort attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where a role must communicate to an internal component on a port that is different from the one that is exposed externally. If not specified, the value of localPort is the same as the port attribute. Set the value of localPort to '*' to automatically assign an unallocated port that is discoverable using the runtime API

        :return: The backend_port of this InboundNatRulePropertiesFormat.
        :rtype: int
        """
        return self._backend_port

    @backend_port.setter
    def backend_port(self, backend_port):
        """Sets the backend_port of this InboundNatRulePropertiesFormat.

        Gets or sets a port used for internal connections on the endpoint. The localPort attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where a role must communicate to an internal component on a port that is different from the one that is exposed externally. If not specified, the value of localPort is the same as the port attribute. Set the value of localPort to '*' to automatically assign an unallocated port that is discoverable using the runtime API

        :param backend_port: The backend_port of this InboundNatRulePropertiesFormat.
        :type backend_port: int
        """

        self._backend_port = backend_port

    @property
    def enable_floating_ip(self):
        """Gets the enable_floating_ip of this InboundNatRulePropertiesFormat.

        Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn availability Group. This setting is required when using the SQL Always ON availability Groups in SQL server. This setting can't be changed after you create the endpoint

        :return: The enable_floating_ip of this InboundNatRulePropertiesFormat.
        :rtype: bool
        """
        return self._enable_floating_ip

    @enable_floating_ip.setter
    def enable_floating_ip(self, enable_floating_ip):
        """Sets the enable_floating_ip of this InboundNatRulePropertiesFormat.

        Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn availability Group. This setting is required when using the SQL Always ON availability Groups in SQL server. This setting can't be changed after you create the endpoint

        :param enable_floating_ip: The enable_floating_ip of this InboundNatRulePropertiesFormat.
        :type enable_floating_ip: bool
        """

        self._enable_floating_ip = enable_floating_ip

    @property
    def frontend_ip_configuration(self):
        """Gets the frontend_ip_configuration of this InboundNatRulePropertiesFormat.


        :return: The frontend_ip_configuration of this InboundNatRulePropertiesFormat.
        :rtype: SubResource
        """
        return self._frontend_ip_configuration

    @frontend_ip_configuration.setter
    def frontend_ip_configuration(self, frontend_ip_configuration):
        """Sets the frontend_ip_configuration of this InboundNatRulePropertiesFormat.


        :param frontend_ip_configuration: The frontend_ip_configuration of this InboundNatRulePropertiesFormat.
        :type frontend_ip_configuration: SubResource
        """

        self._frontend_ip_configuration = frontend_ip_configuration

    @property
    def frontend_port(self):
        """Gets the frontend_port of this InboundNatRulePropertiesFormat.

        Gets or sets the port for the external endpoint. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive

        :return: The frontend_port of this InboundNatRulePropertiesFormat.
        :rtype: int
        """
        return self._frontend_port

    @frontend_port.setter
    def frontend_port(self, frontend_port):
        """Sets the frontend_port of this InboundNatRulePropertiesFormat.

        Gets or sets the port for the external endpoint. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive

        :param frontend_port: The frontend_port of this InboundNatRulePropertiesFormat.
        :type frontend_port: int
        """

        self._frontend_port = frontend_port

    @property
    def idle_timeout_in_minutes(self):
        """Gets the idle_timeout_in_minutes of this InboundNatRulePropertiesFormat.

        Gets or sets the timeout for the Tcp idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to Tcp

        :return: The idle_timeout_in_minutes of this InboundNatRulePropertiesFormat.
        :rtype: int
        """
        return self._idle_timeout_in_minutes

    @idle_timeout_in_minutes.setter
    def idle_timeout_in_minutes(self, idle_timeout_in_minutes):
        """Sets the idle_timeout_in_minutes of this InboundNatRulePropertiesFormat.

        Gets or sets the timeout for the Tcp idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to Tcp

        :param idle_timeout_in_minutes: The idle_timeout_in_minutes of this InboundNatRulePropertiesFormat.
        :type idle_timeout_in_minutes: int
        """

        self._idle_timeout_in_minutes = idle_timeout_in_minutes

    @property
    def protocol(self):
        """Gets the protocol of this InboundNatRulePropertiesFormat.

        Gets or sets the transport protocol for the endpoint. Possible values are Udp or Tcp

        :return: The protocol of this InboundNatRulePropertiesFormat.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this InboundNatRulePropertiesFormat.

        Gets or sets the transport protocol for the endpoint. Possible values are Udp or Tcp

        :param protocol: The protocol of this InboundNatRulePropertiesFormat.
        :type protocol: str
        """
        allowed_values = ["Udp", "Tcp"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this InboundNatRulePropertiesFormat.

        Gets provisioning state of the PublicIP resource Updating/Deleting/Failed

        :return: The provisioning_state of this InboundNatRulePropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this InboundNatRulePropertiesFormat.

        Gets provisioning state of the PublicIP resource Updating/Deleting/Failed

        :param provisioning_state: The provisioning_state of this InboundNatRulePropertiesFormat.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state
