# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sub_resource import SubResource
from openapi_server import util


class EffectiveNetworkSecurityGroupAssociation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, network_interface: SubResource=None, subnet: SubResource=None):
        """EffectiveNetworkSecurityGroupAssociation - a model defined in OpenAPI

        :param network_interface: The network_interface of this EffectiveNetworkSecurityGroupAssociation.
        :param subnet: The subnet of this EffectiveNetworkSecurityGroupAssociation.
        """
        self.openapi_types = {
            'network_interface': SubResource,
            'subnet': SubResource
        }

        self.attribute_map = {
            'network_interface': 'networkInterface',
            'subnet': 'subnet'
        }

        self._network_interface = network_interface
        self._subnet = subnet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EffectiveNetworkSecurityGroupAssociation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EffectiveNetworkSecurityGroupAssociation of this EffectiveNetworkSecurityGroupAssociation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network_interface(self):
        """Gets the network_interface of this EffectiveNetworkSecurityGroupAssociation.


        :return: The network_interface of this EffectiveNetworkSecurityGroupAssociation.
        :rtype: SubResource
        """
        return self._network_interface

    @network_interface.setter
    def network_interface(self, network_interface):
        """Sets the network_interface of this EffectiveNetworkSecurityGroupAssociation.


        :param network_interface: The network_interface of this EffectiveNetworkSecurityGroupAssociation.
        :type network_interface: SubResource
        """

        self._network_interface = network_interface

    @property
    def subnet(self):
        """Gets the subnet of this EffectiveNetworkSecurityGroupAssociation.


        :return: The subnet of this EffectiveNetworkSecurityGroupAssociation.
        :rtype: SubResource
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this EffectiveNetworkSecurityGroupAssociation.


        :param subnet: The subnet of this EffectiveNetworkSecurityGroupAssociation.
        :type subnet: SubResource
        """

        self._subnet = subnet
