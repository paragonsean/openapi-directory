# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EffectiveRoute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_prefix: List[str]=None, name: str=None, next_hop_ip_address: List[str]=None, next_hop_type: str=None, source: str=None, state: str=None):
        """EffectiveRoute - a model defined in OpenAPI

        :param address_prefix: The address_prefix of this EffectiveRoute.
        :param name: The name of this EffectiveRoute.
        :param next_hop_ip_address: The next_hop_ip_address of this EffectiveRoute.
        :param next_hop_type: The next_hop_type of this EffectiveRoute.
        :param source: The source of this EffectiveRoute.
        :param state: The state of this EffectiveRoute.
        """
        self.openapi_types = {
            'address_prefix': List[str],
            'name': str,
            'next_hop_ip_address': List[str],
            'next_hop_type': str,
            'source': str,
            'state': str
        }

        self.attribute_map = {
            'address_prefix': 'addressPrefix',
            'name': 'name',
            'next_hop_ip_address': 'nextHopIpAddress',
            'next_hop_type': 'nextHopType',
            'source': 'source',
            'state': 'state'
        }

        self._address_prefix = address_prefix
        self._name = name
        self._next_hop_ip_address = next_hop_ip_address
        self._next_hop_type = next_hop_type
        self._source = source
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EffectiveRoute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EffectiveRoute of this EffectiveRoute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_prefix(self):
        """Gets the address_prefix of this EffectiveRoute.

        Gets address prefixes of the effective routes in CIDR notation.

        :return: The address_prefix of this EffectiveRoute.
        :rtype: List[str]
        """
        return self._address_prefix

    @address_prefix.setter
    def address_prefix(self, address_prefix):
        """Sets the address_prefix of this EffectiveRoute.

        Gets address prefixes of the effective routes in CIDR notation.

        :param address_prefix: The address_prefix of this EffectiveRoute.
        :type address_prefix: List[str]
        """

        self._address_prefix = address_prefix

    @property
    def name(self):
        """Gets the name of this EffectiveRoute.

        Gets the name of the user defined route. This is optional.

        :return: The name of this EffectiveRoute.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EffectiveRoute.

        Gets the name of the user defined route. This is optional.

        :param name: The name of this EffectiveRoute.
        :type name: str
        """

        self._name = name

    @property
    def next_hop_ip_address(self):
        """Gets the next_hop_ip_address of this EffectiveRoute.

        Gets the IP address of the next hop of the effective route

        :return: The next_hop_ip_address of this EffectiveRoute.
        :rtype: List[str]
        """
        return self._next_hop_ip_address

    @next_hop_ip_address.setter
    def next_hop_ip_address(self, next_hop_ip_address):
        """Sets the next_hop_ip_address of this EffectiveRoute.

        Gets the IP address of the next hop of the effective route

        :param next_hop_ip_address: The next_hop_ip_address of this EffectiveRoute.
        :type next_hop_ip_address: List[str]
        """

        self._next_hop_ip_address = next_hop_ip_address

    @property
    def next_hop_type(self):
        """Gets the next_hop_type of this EffectiveRoute.

        Gets or sets the type of Azure hop the packet should be sent to.

        :return: The next_hop_type of this EffectiveRoute.
        :rtype: str
        """
        return self._next_hop_type

    @next_hop_type.setter
    def next_hop_type(self, next_hop_type):
        """Sets the next_hop_type of this EffectiveRoute.

        Gets or sets the type of Azure hop the packet should be sent to.

        :param next_hop_type: The next_hop_type of this EffectiveRoute.
        :type next_hop_type: str
        """
        allowed_values = ["VirtualNetworkGateway", "VnetLocal", "Internet", "VirtualAppliance", "None"]  # noqa: E501
        if next_hop_type not in allowed_values:
            raise ValueError(
                "Invalid value for `next_hop_type` ({0}), must be one of {1}"
                .format(next_hop_type, allowed_values)
            )

        self._next_hop_type = next_hop_type

    @property
    def source(self):
        """Gets the source of this EffectiveRoute.

        Gets who created the route

        :return: The source of this EffectiveRoute.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this EffectiveRoute.

        Gets who created the route

        :param source: The source of this EffectiveRoute.
        :type source: str
        """
        allowed_values = ["Unknown", "User", "VirtualNetworkGateway", "Default"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def state(self):
        """Gets the state of this EffectiveRoute.

        Gets value of effective route

        :return: The state of this EffectiveRoute.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this EffectiveRoute.

        Gets value of effective route

        :param state: The state of this EffectiveRoute.
        :type state: str
        """
        allowed_values = ["Active", "Invalid"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
