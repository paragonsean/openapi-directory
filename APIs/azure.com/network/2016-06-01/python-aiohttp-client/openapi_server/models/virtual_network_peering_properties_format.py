# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sub_resource import SubResource
from openapi_server import util


class VirtualNetworkPeeringPropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_forwarded_traffic: bool=None, allow_gateway_transit: bool=None, allow_virtual_network_access: bool=None, peering_state: str=None, provisioning_state: str=None, remote_virtual_network: SubResource=None, use_remote_gateways: bool=None):
        """VirtualNetworkPeeringPropertiesFormat - a model defined in OpenAPI

        :param allow_forwarded_traffic: The allow_forwarded_traffic of this VirtualNetworkPeeringPropertiesFormat.
        :param allow_gateway_transit: The allow_gateway_transit of this VirtualNetworkPeeringPropertiesFormat.
        :param allow_virtual_network_access: The allow_virtual_network_access of this VirtualNetworkPeeringPropertiesFormat.
        :param peering_state: The peering_state of this VirtualNetworkPeeringPropertiesFormat.
        :param provisioning_state: The provisioning_state of this VirtualNetworkPeeringPropertiesFormat.
        :param remote_virtual_network: The remote_virtual_network of this VirtualNetworkPeeringPropertiesFormat.
        :param use_remote_gateways: The use_remote_gateways of this VirtualNetworkPeeringPropertiesFormat.
        """
        self.openapi_types = {
            'allow_forwarded_traffic': bool,
            'allow_gateway_transit': bool,
            'allow_virtual_network_access': bool,
            'peering_state': str,
            'provisioning_state': str,
            'remote_virtual_network': SubResource,
            'use_remote_gateways': bool
        }

        self.attribute_map = {
            'allow_forwarded_traffic': 'allowForwardedTraffic',
            'allow_gateway_transit': 'allowGatewayTransit',
            'allow_virtual_network_access': 'allowVirtualNetworkAccess',
            'peering_state': 'peeringState',
            'provisioning_state': 'provisioningState',
            'remote_virtual_network': 'remoteVirtualNetwork',
            'use_remote_gateways': 'useRemoteGateways'
        }

        self._allow_forwarded_traffic = allow_forwarded_traffic
        self._allow_gateway_transit = allow_gateway_transit
        self._allow_virtual_network_access = allow_virtual_network_access
        self._peering_state = peering_state
        self._provisioning_state = provisioning_state
        self._remote_virtual_network = remote_virtual_network
        self._use_remote_gateways = use_remote_gateways

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualNetworkPeeringPropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualNetworkPeeringPropertiesFormat of this VirtualNetworkPeeringPropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_forwarded_traffic(self):
        """Gets the allow_forwarded_traffic of this VirtualNetworkPeeringPropertiesFormat.

        Gets or sets whether the forwarded traffic from the VMs in the remote virtual network will be allowed/disallowed

        :return: The allow_forwarded_traffic of this VirtualNetworkPeeringPropertiesFormat.
        :rtype: bool
        """
        return self._allow_forwarded_traffic

    @allow_forwarded_traffic.setter
    def allow_forwarded_traffic(self, allow_forwarded_traffic):
        """Sets the allow_forwarded_traffic of this VirtualNetworkPeeringPropertiesFormat.

        Gets or sets whether the forwarded traffic from the VMs in the remote virtual network will be allowed/disallowed

        :param allow_forwarded_traffic: The allow_forwarded_traffic of this VirtualNetworkPeeringPropertiesFormat.
        :type allow_forwarded_traffic: bool
        """

        self._allow_forwarded_traffic = allow_forwarded_traffic

    @property
    def allow_gateway_transit(self):
        """Gets the allow_gateway_transit of this VirtualNetworkPeeringPropertiesFormat.

        Gets or sets if gatewayLinks can be used in remote virtual network’s link to this virtual network

        :return: The allow_gateway_transit of this VirtualNetworkPeeringPropertiesFormat.
        :rtype: bool
        """
        return self._allow_gateway_transit

    @allow_gateway_transit.setter
    def allow_gateway_transit(self, allow_gateway_transit):
        """Sets the allow_gateway_transit of this VirtualNetworkPeeringPropertiesFormat.

        Gets or sets if gatewayLinks can be used in remote virtual network’s link to this virtual network

        :param allow_gateway_transit: The allow_gateway_transit of this VirtualNetworkPeeringPropertiesFormat.
        :type allow_gateway_transit: bool
        """

        self._allow_gateway_transit = allow_gateway_transit

    @property
    def allow_virtual_network_access(self):
        """Gets the allow_virtual_network_access of this VirtualNetworkPeeringPropertiesFormat.

        Gets or sets whether the VMs in the linked virtual network space would be able to access all the VMs in local Virtual network space

        :return: The allow_virtual_network_access of this VirtualNetworkPeeringPropertiesFormat.
        :rtype: bool
        """
        return self._allow_virtual_network_access

    @allow_virtual_network_access.setter
    def allow_virtual_network_access(self, allow_virtual_network_access):
        """Sets the allow_virtual_network_access of this VirtualNetworkPeeringPropertiesFormat.

        Gets or sets whether the VMs in the linked virtual network space would be able to access all the VMs in local Virtual network space

        :param allow_virtual_network_access: The allow_virtual_network_access of this VirtualNetworkPeeringPropertiesFormat.
        :type allow_virtual_network_access: bool
        """

        self._allow_virtual_network_access = allow_virtual_network_access

    @property
    def peering_state(self):
        """Gets the peering_state of this VirtualNetworkPeeringPropertiesFormat.

        Gets the status of the virtual network peering

        :return: The peering_state of this VirtualNetworkPeeringPropertiesFormat.
        :rtype: str
        """
        return self._peering_state

    @peering_state.setter
    def peering_state(self, peering_state):
        """Sets the peering_state of this VirtualNetworkPeeringPropertiesFormat.

        Gets the status of the virtual network peering

        :param peering_state: The peering_state of this VirtualNetworkPeeringPropertiesFormat.
        :type peering_state: str
        """
        allowed_values = ["Initiated", "Connected", "Disconnected"]  # noqa: E501
        if peering_state not in allowed_values:
            raise ValueError(
                "Invalid value for `peering_state` ({0}), must be one of {1}"
                .format(peering_state, allowed_values)
            )

        self._peering_state = peering_state

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this VirtualNetworkPeeringPropertiesFormat.

        Gets provisioning state of the resource

        :return: The provisioning_state of this VirtualNetworkPeeringPropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this VirtualNetworkPeeringPropertiesFormat.

        Gets provisioning state of the resource

        :param provisioning_state: The provisioning_state of this VirtualNetworkPeeringPropertiesFormat.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def remote_virtual_network(self):
        """Gets the remote_virtual_network of this VirtualNetworkPeeringPropertiesFormat.


        :return: The remote_virtual_network of this VirtualNetworkPeeringPropertiesFormat.
        :rtype: SubResource
        """
        return self._remote_virtual_network

    @remote_virtual_network.setter
    def remote_virtual_network(self, remote_virtual_network):
        """Sets the remote_virtual_network of this VirtualNetworkPeeringPropertiesFormat.


        :param remote_virtual_network: The remote_virtual_network of this VirtualNetworkPeeringPropertiesFormat.
        :type remote_virtual_network: SubResource
        """

        self._remote_virtual_network = remote_virtual_network

    @property
    def use_remote_gateways(self):
        """Gets the use_remote_gateways of this VirtualNetworkPeeringPropertiesFormat.

        Gets or sets if remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only 1 peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.

        :return: The use_remote_gateways of this VirtualNetworkPeeringPropertiesFormat.
        :rtype: bool
        """
        return self._use_remote_gateways

    @use_remote_gateways.setter
    def use_remote_gateways(self, use_remote_gateways):
        """Sets the use_remote_gateways of this VirtualNetworkPeeringPropertiesFormat.

        Gets or sets if remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only 1 peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway.

        :param use_remote_gateways: The use_remote_gateways of this VirtualNetworkPeeringPropertiesFormat.
        :type use_remote_gateways: bool
        """

        self._use_remote_gateways = use_remote_gateways
