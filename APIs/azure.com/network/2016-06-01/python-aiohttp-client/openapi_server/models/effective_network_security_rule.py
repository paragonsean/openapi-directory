# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EffectiveNetworkSecurityRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: str=None, destination_address_prefix: str=None, destination_port_range: str=None, direction: str=None, expanded_destination_address_prefix: List[str]=None, expanded_source_address_prefix: List[str]=None, name: str=None, priority: int=None, protocol: str=None, source_address_prefix: str=None, source_port_range: str=None):
        """EffectiveNetworkSecurityRule - a model defined in OpenAPI

        :param access: The access of this EffectiveNetworkSecurityRule.
        :param destination_address_prefix: The destination_address_prefix of this EffectiveNetworkSecurityRule.
        :param destination_port_range: The destination_port_range of this EffectiveNetworkSecurityRule.
        :param direction: The direction of this EffectiveNetworkSecurityRule.
        :param expanded_destination_address_prefix: The expanded_destination_address_prefix of this EffectiveNetworkSecurityRule.
        :param expanded_source_address_prefix: The expanded_source_address_prefix of this EffectiveNetworkSecurityRule.
        :param name: The name of this EffectiveNetworkSecurityRule.
        :param priority: The priority of this EffectiveNetworkSecurityRule.
        :param protocol: The protocol of this EffectiveNetworkSecurityRule.
        :param source_address_prefix: The source_address_prefix of this EffectiveNetworkSecurityRule.
        :param source_port_range: The source_port_range of this EffectiveNetworkSecurityRule.
        """
        self.openapi_types = {
            'access': str,
            'destination_address_prefix': str,
            'destination_port_range': str,
            'direction': str,
            'expanded_destination_address_prefix': List[str],
            'expanded_source_address_prefix': List[str],
            'name': str,
            'priority': int,
            'protocol': str,
            'source_address_prefix': str,
            'source_port_range': str
        }

        self.attribute_map = {
            'access': 'access',
            'destination_address_prefix': 'destinationAddressPrefix',
            'destination_port_range': 'destinationPortRange',
            'direction': 'direction',
            'expanded_destination_address_prefix': 'expandedDestinationAddressPrefix',
            'expanded_source_address_prefix': 'expandedSourceAddressPrefix',
            'name': 'name',
            'priority': 'priority',
            'protocol': 'protocol',
            'source_address_prefix': 'sourceAddressPrefix',
            'source_port_range': 'sourcePortRange'
        }

        self._access = access
        self._destination_address_prefix = destination_address_prefix
        self._destination_port_range = destination_port_range
        self._direction = direction
        self._expanded_destination_address_prefix = expanded_destination_address_prefix
        self._expanded_source_address_prefix = expanded_source_address_prefix
        self._name = name
        self._priority = priority
        self._protocol = protocol
        self._source_address_prefix = source_address_prefix
        self._source_port_range = source_port_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EffectiveNetworkSecurityRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EffectiveNetworkSecurityRule of this EffectiveNetworkSecurityRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this EffectiveNetworkSecurityRule.

        Gets network traffic is allowed or denied

        :return: The access of this EffectiveNetworkSecurityRule.
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this EffectiveNetworkSecurityRule.

        Gets network traffic is allowed or denied

        :param access: The access of this EffectiveNetworkSecurityRule.
        :type access: str
        """
        allowed_values = ["Allow", "Deny"]  # noqa: E501
        if access not in allowed_values:
            raise ValueError(
                "Invalid value for `access` ({0}), must be one of {1}"
                .format(access, allowed_values)
            )

        self._access = access

    @property
    def destination_address_prefix(self):
        """Gets the destination_address_prefix of this EffectiveNetworkSecurityRule.

        Gets destination address prefix

        :return: The destination_address_prefix of this EffectiveNetworkSecurityRule.
        :rtype: str
        """
        return self._destination_address_prefix

    @destination_address_prefix.setter
    def destination_address_prefix(self, destination_address_prefix):
        """Sets the destination_address_prefix of this EffectiveNetworkSecurityRule.

        Gets destination address prefix

        :param destination_address_prefix: The destination_address_prefix of this EffectiveNetworkSecurityRule.
        :type destination_address_prefix: str
        """

        self._destination_address_prefix = destination_address_prefix

    @property
    def destination_port_range(self):
        """Gets the destination_port_range of this EffectiveNetworkSecurityRule.

        Gets destination port or range

        :return: The destination_port_range of this EffectiveNetworkSecurityRule.
        :rtype: str
        """
        return self._destination_port_range

    @destination_port_range.setter
    def destination_port_range(self, destination_port_range):
        """Sets the destination_port_range of this EffectiveNetworkSecurityRule.

        Gets destination port or range

        :param destination_port_range: The destination_port_range of this EffectiveNetworkSecurityRule.
        :type destination_port_range: str
        """

        self._destination_port_range = destination_port_range

    @property
    def direction(self):
        """Gets the direction of this EffectiveNetworkSecurityRule.

        Gets the direction of the rule

        :return: The direction of this EffectiveNetworkSecurityRule.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this EffectiveNetworkSecurityRule.

        Gets the direction of the rule

        :param direction: The direction of this EffectiveNetworkSecurityRule.
        :type direction: str
        """
        allowed_values = ["Inbound", "Outbound"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def expanded_destination_address_prefix(self):
        """Gets the expanded_destination_address_prefix of this EffectiveNetworkSecurityRule.

        Gets expanded destination address prefix

        :return: The expanded_destination_address_prefix of this EffectiveNetworkSecurityRule.
        :rtype: List[str]
        """
        return self._expanded_destination_address_prefix

    @expanded_destination_address_prefix.setter
    def expanded_destination_address_prefix(self, expanded_destination_address_prefix):
        """Sets the expanded_destination_address_prefix of this EffectiveNetworkSecurityRule.

        Gets expanded destination address prefix

        :param expanded_destination_address_prefix: The expanded_destination_address_prefix of this EffectiveNetworkSecurityRule.
        :type expanded_destination_address_prefix: List[str]
        """

        self._expanded_destination_address_prefix = expanded_destination_address_prefix

    @property
    def expanded_source_address_prefix(self):
        """Gets the expanded_source_address_prefix of this EffectiveNetworkSecurityRule.

        Gets expanded source address prefix

        :return: The expanded_source_address_prefix of this EffectiveNetworkSecurityRule.
        :rtype: List[str]
        """
        return self._expanded_source_address_prefix

    @expanded_source_address_prefix.setter
    def expanded_source_address_prefix(self, expanded_source_address_prefix):
        """Sets the expanded_source_address_prefix of this EffectiveNetworkSecurityRule.

        Gets expanded source address prefix

        :param expanded_source_address_prefix: The expanded_source_address_prefix of this EffectiveNetworkSecurityRule.
        :type expanded_source_address_prefix: List[str]
        """

        self._expanded_source_address_prefix = expanded_source_address_prefix

    @property
    def name(self):
        """Gets the name of this EffectiveNetworkSecurityRule.

        Gets the name of the security rule specified by the user (if created by the user)

        :return: The name of this EffectiveNetworkSecurityRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EffectiveNetworkSecurityRule.

        Gets the name of the security rule specified by the user (if created by the user)

        :param name: The name of this EffectiveNetworkSecurityRule.
        :type name: str
        """

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this EffectiveNetworkSecurityRule.

        Gets the priority of the rule

        :return: The priority of this EffectiveNetworkSecurityRule.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this EffectiveNetworkSecurityRule.

        Gets the priority of the rule

        :param priority: The priority of this EffectiveNetworkSecurityRule.
        :type priority: int
        """

        self._priority = priority

    @property
    def protocol(self):
        """Gets the protocol of this EffectiveNetworkSecurityRule.

        Gets Network protocol this rule applies to

        :return: The protocol of this EffectiveNetworkSecurityRule.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this EffectiveNetworkSecurityRule.

        Gets Network protocol this rule applies to

        :param protocol: The protocol of this EffectiveNetworkSecurityRule.
        :type protocol: str
        """
        allowed_values = ["Tcp", "Udp", "*"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def source_address_prefix(self):
        """Gets the source_address_prefix of this EffectiveNetworkSecurityRule.

        Gets source address prefix

        :return: The source_address_prefix of this EffectiveNetworkSecurityRule.
        :rtype: str
        """
        return self._source_address_prefix

    @source_address_prefix.setter
    def source_address_prefix(self, source_address_prefix):
        """Sets the source_address_prefix of this EffectiveNetworkSecurityRule.

        Gets source address prefix

        :param source_address_prefix: The source_address_prefix of this EffectiveNetworkSecurityRule.
        :type source_address_prefix: str
        """

        self._source_address_prefix = source_address_prefix

    @property
    def source_port_range(self):
        """Gets the source_port_range of this EffectiveNetworkSecurityRule.

        Gets source port or range

        :return: The source_port_range of this EffectiveNetworkSecurityRule.
        :rtype: str
        """
        return self._source_port_range

    @source_port_range.setter
    def source_port_range(self, source_port_range):
        """Sets the source_port_range of this EffectiveNetworkSecurityRule.

        Gets source port or range

        :param source_port_range: The source_port_range of this EffectiveNetworkSecurityRule.
        :type source_port_range: str
        """

        self._source_port_range = source_port_range
