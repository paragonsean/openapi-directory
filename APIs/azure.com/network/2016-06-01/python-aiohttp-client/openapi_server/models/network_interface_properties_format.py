# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.network_interface_dns_settings import NetworkInterfaceDnsSettings
from openapi_server.models.network_interface_ip_configuration import NetworkInterfaceIPConfiguration
from openapi_server.models.network_security_group import NetworkSecurityGroup
from openapi_server.models.sub_resource import SubResource
from openapi_server import util


class NetworkInterfacePropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dns_settings: NetworkInterfaceDnsSettings=None, enable_ip_forwarding: bool=None, ip_configurations: List[NetworkInterfaceIPConfiguration]=None, mac_address: str=None, network_security_group: NetworkSecurityGroup=None, primary: bool=None, provisioning_state: str=None, resource_guid: str=None, virtual_machine: SubResource=None):
        """NetworkInterfacePropertiesFormat - a model defined in OpenAPI

        :param dns_settings: The dns_settings of this NetworkInterfacePropertiesFormat.
        :param enable_ip_forwarding: The enable_ip_forwarding of this NetworkInterfacePropertiesFormat.
        :param ip_configurations: The ip_configurations of this NetworkInterfacePropertiesFormat.
        :param mac_address: The mac_address of this NetworkInterfacePropertiesFormat.
        :param network_security_group: The network_security_group of this NetworkInterfacePropertiesFormat.
        :param primary: The primary of this NetworkInterfacePropertiesFormat.
        :param provisioning_state: The provisioning_state of this NetworkInterfacePropertiesFormat.
        :param resource_guid: The resource_guid of this NetworkInterfacePropertiesFormat.
        :param virtual_machine: The virtual_machine of this NetworkInterfacePropertiesFormat.
        """
        self.openapi_types = {
            'dns_settings': NetworkInterfaceDnsSettings,
            'enable_ip_forwarding': bool,
            'ip_configurations': List[NetworkInterfaceIPConfiguration],
            'mac_address': str,
            'network_security_group': NetworkSecurityGroup,
            'primary': bool,
            'provisioning_state': str,
            'resource_guid': str,
            'virtual_machine': SubResource
        }

        self.attribute_map = {
            'dns_settings': 'dnsSettings',
            'enable_ip_forwarding': 'enableIPForwarding',
            'ip_configurations': 'ipConfigurations',
            'mac_address': 'macAddress',
            'network_security_group': 'networkSecurityGroup',
            'primary': 'primary',
            'provisioning_state': 'provisioningState',
            'resource_guid': 'resourceGuid',
            'virtual_machine': 'virtualMachine'
        }

        self._dns_settings = dns_settings
        self._enable_ip_forwarding = enable_ip_forwarding
        self._ip_configurations = ip_configurations
        self._mac_address = mac_address
        self._network_security_group = network_security_group
        self._primary = primary
        self._provisioning_state = provisioning_state
        self._resource_guid = resource_guid
        self._virtual_machine = virtual_machine

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkInterfacePropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkInterfacePropertiesFormat of this NetworkInterfacePropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns_settings(self):
        """Gets the dns_settings of this NetworkInterfacePropertiesFormat.


        :return: The dns_settings of this NetworkInterfacePropertiesFormat.
        :rtype: NetworkInterfaceDnsSettings
        """
        return self._dns_settings

    @dns_settings.setter
    def dns_settings(self, dns_settings):
        """Sets the dns_settings of this NetworkInterfacePropertiesFormat.


        :param dns_settings: The dns_settings of this NetworkInterfacePropertiesFormat.
        :type dns_settings: NetworkInterfaceDnsSettings
        """

        self._dns_settings = dns_settings

    @property
    def enable_ip_forwarding(self):
        """Gets the enable_ip_forwarding of this NetworkInterfacePropertiesFormat.

        Gets or sets whether IPForwarding is enabled on the NIC

        :return: The enable_ip_forwarding of this NetworkInterfacePropertiesFormat.
        :rtype: bool
        """
        return self._enable_ip_forwarding

    @enable_ip_forwarding.setter
    def enable_ip_forwarding(self, enable_ip_forwarding):
        """Sets the enable_ip_forwarding of this NetworkInterfacePropertiesFormat.

        Gets or sets whether IPForwarding is enabled on the NIC

        :param enable_ip_forwarding: The enable_ip_forwarding of this NetworkInterfacePropertiesFormat.
        :type enable_ip_forwarding: bool
        """

        self._enable_ip_forwarding = enable_ip_forwarding

    @property
    def ip_configurations(self):
        """Gets the ip_configurations of this NetworkInterfacePropertiesFormat.

        Gets or sets list of IPConfigurations of the network interface

        :return: The ip_configurations of this NetworkInterfacePropertiesFormat.
        :rtype: List[NetworkInterfaceIPConfiguration]
        """
        return self._ip_configurations

    @ip_configurations.setter
    def ip_configurations(self, ip_configurations):
        """Sets the ip_configurations of this NetworkInterfacePropertiesFormat.

        Gets or sets list of IPConfigurations of the network interface

        :param ip_configurations: The ip_configurations of this NetworkInterfacePropertiesFormat.
        :type ip_configurations: List[NetworkInterfaceIPConfiguration]
        """

        self._ip_configurations = ip_configurations

    @property
    def mac_address(self):
        """Gets the mac_address of this NetworkInterfacePropertiesFormat.

        Gets the MAC address of the network interface

        :return: The mac_address of this NetworkInterfacePropertiesFormat.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this NetworkInterfacePropertiesFormat.

        Gets the MAC address of the network interface

        :param mac_address: The mac_address of this NetworkInterfacePropertiesFormat.
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def network_security_group(self):
        """Gets the network_security_group of this NetworkInterfacePropertiesFormat.


        :return: The network_security_group of this NetworkInterfacePropertiesFormat.
        :rtype: NetworkSecurityGroup
        """
        return self._network_security_group

    @network_security_group.setter
    def network_security_group(self, network_security_group):
        """Sets the network_security_group of this NetworkInterfacePropertiesFormat.


        :param network_security_group: The network_security_group of this NetworkInterfacePropertiesFormat.
        :type network_security_group: NetworkSecurityGroup
        """

        self._network_security_group = network_security_group

    @property
    def primary(self):
        """Gets the primary of this NetworkInterfacePropertiesFormat.

        Gets whether this is a primary NIC on a virtual machine

        :return: The primary of this NetworkInterfacePropertiesFormat.
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this NetworkInterfacePropertiesFormat.

        Gets whether this is a primary NIC on a virtual machine

        :param primary: The primary of this NetworkInterfacePropertiesFormat.
        :type primary: bool
        """

        self._primary = primary

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this NetworkInterfacePropertiesFormat.

        Gets provisioning state of the PublicIP resource Updating/Deleting/Failed

        :return: The provisioning_state of this NetworkInterfacePropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this NetworkInterfacePropertiesFormat.

        Gets provisioning state of the PublicIP resource Updating/Deleting/Failed

        :param provisioning_state: The provisioning_state of this NetworkInterfacePropertiesFormat.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def resource_guid(self):
        """Gets the resource_guid of this NetworkInterfacePropertiesFormat.

        Gets or sets resource guid property of the network interface resource

        :return: The resource_guid of this NetworkInterfacePropertiesFormat.
        :rtype: str
        """
        return self._resource_guid

    @resource_guid.setter
    def resource_guid(self, resource_guid):
        """Sets the resource_guid of this NetworkInterfacePropertiesFormat.

        Gets or sets resource guid property of the network interface resource

        :param resource_guid: The resource_guid of this NetworkInterfacePropertiesFormat.
        :type resource_guid: str
        """

        self._resource_guid = resource_guid

    @property
    def virtual_machine(self):
        """Gets the virtual_machine of this NetworkInterfacePropertiesFormat.


        :return: The virtual_machine of this NetworkInterfacePropertiesFormat.
        :rtype: SubResource
        """
        return self._virtual_machine

    @virtual_machine.setter
    def virtual_machine(self, virtual_machine):
        """Sets the virtual_machine of this NetworkInterfacePropertiesFormat.


        :param virtual_machine: The virtual_machine of this NetworkInterfacePropertiesFormat.
        :type virtual_machine: SubResource
        """

        self._virtual_machine = virtual_machine
