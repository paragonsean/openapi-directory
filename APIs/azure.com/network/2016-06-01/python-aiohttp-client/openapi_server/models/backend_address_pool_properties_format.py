# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.network_interface_ip_configuration import NetworkInterfaceIPConfiguration
from openapi_server.models.sub_resource import SubResource
from openapi_server import util


class BackendAddressPoolPropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backend_ip_configurations: List[NetworkInterfaceIPConfiguration]=None, load_balancing_rules: List[SubResource]=None, outbound_nat_rule: SubResource=None, provisioning_state: str=None):
        """BackendAddressPoolPropertiesFormat - a model defined in OpenAPI

        :param backend_ip_configurations: The backend_ip_configurations of this BackendAddressPoolPropertiesFormat.
        :param load_balancing_rules: The load_balancing_rules of this BackendAddressPoolPropertiesFormat.
        :param outbound_nat_rule: The outbound_nat_rule of this BackendAddressPoolPropertiesFormat.
        :param provisioning_state: The provisioning_state of this BackendAddressPoolPropertiesFormat.
        """
        self.openapi_types = {
            'backend_ip_configurations': List[NetworkInterfaceIPConfiguration],
            'load_balancing_rules': List[SubResource],
            'outbound_nat_rule': SubResource,
            'provisioning_state': str
        }

        self.attribute_map = {
            'backend_ip_configurations': 'backendIPConfigurations',
            'load_balancing_rules': 'loadBalancingRules',
            'outbound_nat_rule': 'outboundNatRule',
            'provisioning_state': 'provisioningState'
        }

        self._backend_ip_configurations = backend_ip_configurations
        self._load_balancing_rules = load_balancing_rules
        self._outbound_nat_rule = outbound_nat_rule
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackendAddressPoolPropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackendAddressPoolPropertiesFormat of this BackendAddressPoolPropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backend_ip_configurations(self):
        """Gets the backend_ip_configurations of this BackendAddressPoolPropertiesFormat.

        Gets collection of references to IPs defined in NICs

        :return: The backend_ip_configurations of this BackendAddressPoolPropertiesFormat.
        :rtype: List[NetworkInterfaceIPConfiguration]
        """
        return self._backend_ip_configurations

    @backend_ip_configurations.setter
    def backend_ip_configurations(self, backend_ip_configurations):
        """Sets the backend_ip_configurations of this BackendAddressPoolPropertiesFormat.

        Gets collection of references to IPs defined in NICs

        :param backend_ip_configurations: The backend_ip_configurations of this BackendAddressPoolPropertiesFormat.
        :type backend_ip_configurations: List[NetworkInterfaceIPConfiguration]
        """

        self._backend_ip_configurations = backend_ip_configurations

    @property
    def load_balancing_rules(self):
        """Gets the load_balancing_rules of this BackendAddressPoolPropertiesFormat.

        Gets Load Balancing rules that use this Backend Address Pool

        :return: The load_balancing_rules of this BackendAddressPoolPropertiesFormat.
        :rtype: List[SubResource]
        """
        return self._load_balancing_rules

    @load_balancing_rules.setter
    def load_balancing_rules(self, load_balancing_rules):
        """Sets the load_balancing_rules of this BackendAddressPoolPropertiesFormat.

        Gets Load Balancing rules that use this Backend Address Pool

        :param load_balancing_rules: The load_balancing_rules of this BackendAddressPoolPropertiesFormat.
        :type load_balancing_rules: List[SubResource]
        """

        self._load_balancing_rules = load_balancing_rules

    @property
    def outbound_nat_rule(self):
        """Gets the outbound_nat_rule of this BackendAddressPoolPropertiesFormat.


        :return: The outbound_nat_rule of this BackendAddressPoolPropertiesFormat.
        :rtype: SubResource
        """
        return self._outbound_nat_rule

    @outbound_nat_rule.setter
    def outbound_nat_rule(self, outbound_nat_rule):
        """Sets the outbound_nat_rule of this BackendAddressPoolPropertiesFormat.


        :param outbound_nat_rule: The outbound_nat_rule of this BackendAddressPoolPropertiesFormat.
        :type outbound_nat_rule: SubResource
        """

        self._outbound_nat_rule = outbound_nat_rule

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this BackendAddressPoolPropertiesFormat.

        Get provisioning state of the PublicIP resource Updating/Deleting/Failed

        :return: The provisioning_state of this BackendAddressPoolPropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this BackendAddressPoolPropertiesFormat.

        Get provisioning state of the PublicIP resource Updating/Deleting/Failed

        :param provisioning_state: The provisioning_state of this BackendAddressPoolPropertiesFormat.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state
