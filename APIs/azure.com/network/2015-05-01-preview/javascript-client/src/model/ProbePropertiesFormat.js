/**
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubResource from './SubResource';

/**
 * The ProbePropertiesFormat model module.
 * @module model/ProbePropertiesFormat
 * @version 2015-05-01-preview
 */
class ProbePropertiesFormat {
    /**
     * Constructs a new <code>ProbePropertiesFormat</code>.
     * @alias module:model/ProbePropertiesFormat
     * @param port {Number} Gets or sets Port for communicating the probe. Possible values range from 1 to 65535, inclusive.
     * @param protocol {module:model/ProbePropertiesFormat.ProtocolEnum} Gets or sets the protocol of the end point. Possible values are http pr Tcp. If Tcp is specified, a received ACK is required for the probe to be successful. If http is specified,a 200 OK response from the specifies URI is required for the probe to be successful
     */
    constructor(port, protocol) { 
        
        ProbePropertiesFormat.initialize(this, port, protocol);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, port, protocol) { 
        obj['port'] = port;
        obj['protocol'] = protocol;
    }

    /**
     * Constructs a <code>ProbePropertiesFormat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProbePropertiesFormat} obj Optional instance to populate.
     * @return {module:model/ProbePropertiesFormat} The populated <code>ProbePropertiesFormat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProbePropertiesFormat();

            if (data.hasOwnProperty('intervalInSeconds')) {
                obj['intervalInSeconds'] = ApiClient.convertToType(data['intervalInSeconds'], 'Number');
            }
            if (data.hasOwnProperty('loadBalancingRules')) {
                obj['loadBalancingRules'] = ApiClient.convertToType(data['loadBalancingRules'], [SubResource]);
            }
            if (data.hasOwnProperty('numberOfProbes')) {
                obj['numberOfProbes'] = ApiClient.convertToType(data['numberOfProbes'], 'Number');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('requestPath')) {
                obj['requestPath'] = ApiClient.convertToType(data['requestPath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProbePropertiesFormat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProbePropertiesFormat</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProbePropertiesFormat.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['loadBalancingRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['loadBalancingRules'])) {
                throw new Error("Expected the field `loadBalancingRules` to be an array in the JSON data but got " + data['loadBalancingRules']);
            }
            // validate the optional field `loadBalancingRules` (array)
            for (const item of data['loadBalancingRules']) {
                SubResource.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['requestPath'] && !(typeof data['requestPath'] === 'string' || data['requestPath'] instanceof String)) {
            throw new Error("Expected the field `requestPath` to be a primitive type in the JSON string but got " + data['requestPath']);
        }

        return true;
    }


}

ProbePropertiesFormat.RequiredProperties = ["port", "protocol"];

/**
 * Gets or sets the interval, in seconds, for how frequently to probe the endpoint for health status. Typically, the interval is slightly less than half the allocated timeout period (in seconds) which allows two full probes before taking the instance out of rotation. The default value is 15, the minimum value is 5
 * @member {Number} intervalInSeconds
 */
ProbePropertiesFormat.prototype['intervalInSeconds'] = undefined;

/**
 * Gets Load balancer rules that use this probe
 * @member {Array.<module:model/SubResource>} loadBalancingRules
 */
ProbePropertiesFormat.prototype['loadBalancingRules'] = undefined;

/**
 * Gets or sets the number of probes where if no response, will result in stopping further traffic from being delivered to the endpoint. This values allows endpoints to be taken out of rotation faster or slower than the typical times used in Azure. 
 * @member {Number} numberOfProbes
 */
ProbePropertiesFormat.prototype['numberOfProbes'] = undefined;

/**
 * Gets or sets Port for communicating the probe. Possible values range from 1 to 65535, inclusive.
 * @member {Number} port
 */
ProbePropertiesFormat.prototype['port'] = undefined;

/**
 * Gets or sets the protocol of the end point. Possible values are http pr Tcp. If Tcp is specified, a received ACK is required for the probe to be successful. If http is specified,a 200 OK response from the specifies URI is required for the probe to be successful
 * @member {module:model/ProbePropertiesFormat.ProtocolEnum} protocol
 */
ProbePropertiesFormat.prototype['protocol'] = undefined;

/**
 * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
 * @member {String} provisioningState
 */
ProbePropertiesFormat.prototype['provisioningState'] = undefined;

/**
 * Gets or sets the URI used for requesting health status from the VM. Path is required if a protocol is set to http. Otherwise, it is not allowed. There is no default value
 * @member {String} requestPath
 */
ProbePropertiesFormat.prototype['requestPath'] = undefined;





/**
 * Allowed values for the <code>protocol</code> property.
 * @enum {String}
 * @readonly
 */
ProbePropertiesFormat['ProtocolEnum'] = {

    /**
     * value: "Http"
     * @const
     */
    "Http": "Http",

    /**
     * value: "Tcp"
     * @const
     */
    "Tcp": "Tcp"
};



export default ProbePropertiesFormat;

