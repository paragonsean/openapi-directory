/**
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SubResource from './SubResource';

/**
 * The OutboundNatRulePropertiesFormat model module.
 * @module model/OutboundNatRulePropertiesFormat
 * @version 2015-05-01-preview
 */
class OutboundNatRulePropertiesFormat {
    /**
     * Constructs a new <code>OutboundNatRulePropertiesFormat</code>.
     * Outbound NAT pool of the loadbalancer
     * @alias module:model/OutboundNatRulePropertiesFormat
     * @param allocatedOutboundPorts {Number} Gets or sets the number of outbound ports to be used for SNAT
     * @param backendAddressPool {module:model/SubResource} 
     */
    constructor(allocatedOutboundPorts, backendAddressPool) { 
        
        OutboundNatRulePropertiesFormat.initialize(this, allocatedOutboundPorts, backendAddressPool);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, allocatedOutboundPorts, backendAddressPool) { 
        obj['allocatedOutboundPorts'] = allocatedOutboundPorts;
        obj['backendAddressPool'] = backendAddressPool;
    }

    /**
     * Constructs a <code>OutboundNatRulePropertiesFormat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OutboundNatRulePropertiesFormat} obj Optional instance to populate.
     * @return {module:model/OutboundNatRulePropertiesFormat} The populated <code>OutboundNatRulePropertiesFormat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OutboundNatRulePropertiesFormat();

            if (data.hasOwnProperty('allocatedOutboundPorts')) {
                obj['allocatedOutboundPorts'] = ApiClient.convertToType(data['allocatedOutboundPorts'], 'Number');
            }
            if (data.hasOwnProperty('backendAddressPool')) {
                obj['backendAddressPool'] = SubResource.constructFromObject(data['backendAddressPool']);
            }
            if (data.hasOwnProperty('frontendIPConfigurations')) {
                obj['frontendIPConfigurations'] = ApiClient.convertToType(data['frontendIPConfigurations'], [SubResource]);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OutboundNatRulePropertiesFormat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OutboundNatRulePropertiesFormat</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OutboundNatRulePropertiesFormat.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `backendAddressPool`
        if (data['backendAddressPool']) { // data not null
          SubResource.validateJSON(data['backendAddressPool']);
        }
        if (data['frontendIPConfigurations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['frontendIPConfigurations'])) {
                throw new Error("Expected the field `frontendIPConfigurations` to be an array in the JSON data but got " + data['frontendIPConfigurations']);
            }
            // validate the optional field `frontendIPConfigurations` (array)
            for (const item of data['frontendIPConfigurations']) {
                SubResource.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}

OutboundNatRulePropertiesFormat.RequiredProperties = ["allocatedOutboundPorts", "backendAddressPool"];

/**
 * Gets or sets the number of outbound ports to be used for SNAT
 * @member {Number} allocatedOutboundPorts
 */
OutboundNatRulePropertiesFormat.prototype['allocatedOutboundPorts'] = undefined;

/**
 * @member {module:model/SubResource} backendAddressPool
 */
OutboundNatRulePropertiesFormat.prototype['backendAddressPool'] = undefined;

/**
 * Gets or sets Frontend IP addresses of the load balancer
 * @member {Array.<module:model/SubResource>} frontendIPConfigurations
 */
OutboundNatRulePropertiesFormat.prototype['frontendIPConfigurations'] = undefined;

/**
 * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
 * @member {String} provisioningState
 */
OutboundNatRulePropertiesFormat.prototype['provisioningState'] = undefined;






export default OutboundNatRulePropertiesFormat;

