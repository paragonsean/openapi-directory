/**
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublicIpAddressPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublicIpAddressPropertiesFormat::OAIPublicIpAddressPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublicIpAddressPropertiesFormat::OAIPublicIpAddressPropertiesFormat() {
    this->initializeModel();
}

OAIPublicIpAddressPropertiesFormat::~OAIPublicIpAddressPropertiesFormat() {}

void OAIPublicIpAddressPropertiesFormat::initializeModel() {

    m_dns_settings_isSet = false;
    m_dns_settings_isValid = false;

    m_idle_timeout_in_minutes_isSet = false;
    m_idle_timeout_in_minutes_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_ip_configuration_isSet = false;
    m_ip_configuration_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_public_ip_allocation_method_isSet = false;
    m_public_ip_allocation_method_isValid = false;

    m_resource_guid_isSet = false;
    m_resource_guid_isValid = false;
}

void OAIPublicIpAddressPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublicIpAddressPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_dns_settings_isValid = ::OpenAPI::fromJsonValue(m_dns_settings, json[QString("dnsSettings")]);
    m_dns_settings_isSet = !json[QString("dnsSettings")].isNull() && m_dns_settings_isValid;

    m_idle_timeout_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_idle_timeout_in_minutes, json[QString("idleTimeoutInMinutes")]);
    m_idle_timeout_in_minutes_isSet = !json[QString("idleTimeoutInMinutes")].isNull() && m_idle_timeout_in_minutes_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_ip_configuration_isValid = ::OpenAPI::fromJsonValue(m_ip_configuration, json[QString("ipConfiguration")]);
    m_ip_configuration_isSet = !json[QString("ipConfiguration")].isNull() && m_ip_configuration_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_public_ip_allocation_method_isValid = ::OpenAPI::fromJsonValue(m_public_ip_allocation_method, json[QString("publicIPAllocationMethod")]);
    m_public_ip_allocation_method_isSet = !json[QString("publicIPAllocationMethod")].isNull() && m_public_ip_allocation_method_isValid;

    m_resource_guid_isValid = ::OpenAPI::fromJsonValue(m_resource_guid, json[QString("resourceGuid")]);
    m_resource_guid_isSet = !json[QString("resourceGuid")].isNull() && m_resource_guid_isValid;
}

QString OAIPublicIpAddressPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublicIpAddressPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_dns_settings.isSet()) {
        obj.insert(QString("dnsSettings"), ::OpenAPI::toJsonValue(m_dns_settings));
    }
    if (m_idle_timeout_in_minutes_isSet) {
        obj.insert(QString("idleTimeoutInMinutes"), ::OpenAPI::toJsonValue(m_idle_timeout_in_minutes));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_ip_configuration.isSet()) {
        obj.insert(QString("ipConfiguration"), ::OpenAPI::toJsonValue(m_ip_configuration));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_public_ip_allocation_method_isSet) {
        obj.insert(QString("publicIPAllocationMethod"), ::OpenAPI::toJsonValue(m_public_ip_allocation_method));
    }
    if (m_resource_guid_isSet) {
        obj.insert(QString("resourceGuid"), ::OpenAPI::toJsonValue(m_resource_guid));
    }
    return obj;
}

OAIPublicIpAddressDnsSettings OAIPublicIpAddressPropertiesFormat::getDnsSettings() const {
    return m_dns_settings;
}
void OAIPublicIpAddressPropertiesFormat::setDnsSettings(const OAIPublicIpAddressDnsSettings &dns_settings) {
    m_dns_settings = dns_settings;
    m_dns_settings_isSet = true;
}

bool OAIPublicIpAddressPropertiesFormat::is_dns_settings_Set() const{
    return m_dns_settings_isSet;
}

bool OAIPublicIpAddressPropertiesFormat::is_dns_settings_Valid() const{
    return m_dns_settings_isValid;
}

qint32 OAIPublicIpAddressPropertiesFormat::getIdleTimeoutInMinutes() const {
    return m_idle_timeout_in_minutes;
}
void OAIPublicIpAddressPropertiesFormat::setIdleTimeoutInMinutes(const qint32 &idle_timeout_in_minutes) {
    m_idle_timeout_in_minutes = idle_timeout_in_minutes;
    m_idle_timeout_in_minutes_isSet = true;
}

bool OAIPublicIpAddressPropertiesFormat::is_idle_timeout_in_minutes_Set() const{
    return m_idle_timeout_in_minutes_isSet;
}

bool OAIPublicIpAddressPropertiesFormat::is_idle_timeout_in_minutes_Valid() const{
    return m_idle_timeout_in_minutes_isValid;
}

QString OAIPublicIpAddressPropertiesFormat::getIpAddress() const {
    return m_ip_address;
}
void OAIPublicIpAddressPropertiesFormat::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIPublicIpAddressPropertiesFormat::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIPublicIpAddressPropertiesFormat::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

OAISubResource OAIPublicIpAddressPropertiesFormat::getIpConfiguration() const {
    return m_ip_configuration;
}
void OAIPublicIpAddressPropertiesFormat::setIpConfiguration(const OAISubResource &ip_configuration) {
    m_ip_configuration = ip_configuration;
    m_ip_configuration_isSet = true;
}

bool OAIPublicIpAddressPropertiesFormat::is_ip_configuration_Set() const{
    return m_ip_configuration_isSet;
}

bool OAIPublicIpAddressPropertiesFormat::is_ip_configuration_Valid() const{
    return m_ip_configuration_isValid;
}

QString OAIPublicIpAddressPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIPublicIpAddressPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIPublicIpAddressPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIPublicIpAddressPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIPublicIpAddressPropertiesFormat::getPublicIpAllocationMethod() const {
    return m_public_ip_allocation_method;
}
void OAIPublicIpAddressPropertiesFormat::setPublicIpAllocationMethod(const QString &public_ip_allocation_method) {
    m_public_ip_allocation_method = public_ip_allocation_method;
    m_public_ip_allocation_method_isSet = true;
}

bool OAIPublicIpAddressPropertiesFormat::is_public_ip_allocation_method_Set() const{
    return m_public_ip_allocation_method_isSet;
}

bool OAIPublicIpAddressPropertiesFormat::is_public_ip_allocation_method_Valid() const{
    return m_public_ip_allocation_method_isValid;
}

QString OAIPublicIpAddressPropertiesFormat::getResourceGuid() const {
    return m_resource_guid;
}
void OAIPublicIpAddressPropertiesFormat::setResourceGuid(const QString &resource_guid) {
    m_resource_guid = resource_guid;
    m_resource_guid_isSet = true;
}

bool OAIPublicIpAddressPropertiesFormat::is_resource_guid_Set() const{
    return m_resource_guid_isSet;
}

bool OAIPublicIpAddressPropertiesFormat::is_resource_guid_Valid() const{
    return m_resource_guid_isValid;
}

bool OAIPublicIpAddressPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dns_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_timeout_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_allocation_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_guid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublicIpAddressPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_public_ip_allocation_method_isValid && true;
}

} // namespace OpenAPI
