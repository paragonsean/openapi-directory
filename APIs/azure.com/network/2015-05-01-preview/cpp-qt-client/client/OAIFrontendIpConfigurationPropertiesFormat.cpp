/**
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFrontendIpConfigurationPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFrontendIpConfigurationPropertiesFormat::OAIFrontendIpConfigurationPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFrontendIpConfigurationPropertiesFormat::OAIFrontendIpConfigurationPropertiesFormat() {
    this->initializeModel();
}

OAIFrontendIpConfigurationPropertiesFormat::~OAIFrontendIpConfigurationPropertiesFormat() {}

void OAIFrontendIpConfigurationPropertiesFormat::initializeModel() {

    m_inbound_nat_pools_isSet = false;
    m_inbound_nat_pools_isValid = false;

    m_inbound_nat_rules_isSet = false;
    m_inbound_nat_rules_isValid = false;

    m_load_balancing_rules_isSet = false;
    m_load_balancing_rules_isValid = false;

    m_outbound_nat_rules_isSet = false;
    m_outbound_nat_rules_isValid = false;

    m_private_ip_address_isSet = false;
    m_private_ip_address_isValid = false;

    m_private_ip_allocation_method_isSet = false;
    m_private_ip_allocation_method_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_public_ip_address_isSet = false;
    m_public_ip_address_isValid = false;

    m_subnet_isSet = false;
    m_subnet_isValid = false;
}

void OAIFrontendIpConfigurationPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFrontendIpConfigurationPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_inbound_nat_pools_isValid = ::OpenAPI::fromJsonValue(m_inbound_nat_pools, json[QString("inboundNatPools")]);
    m_inbound_nat_pools_isSet = !json[QString("inboundNatPools")].isNull() && m_inbound_nat_pools_isValid;

    m_inbound_nat_rules_isValid = ::OpenAPI::fromJsonValue(m_inbound_nat_rules, json[QString("inboundNatRules")]);
    m_inbound_nat_rules_isSet = !json[QString("inboundNatRules")].isNull() && m_inbound_nat_rules_isValid;

    m_load_balancing_rules_isValid = ::OpenAPI::fromJsonValue(m_load_balancing_rules, json[QString("loadBalancingRules")]);
    m_load_balancing_rules_isSet = !json[QString("loadBalancingRules")].isNull() && m_load_balancing_rules_isValid;

    m_outbound_nat_rules_isValid = ::OpenAPI::fromJsonValue(m_outbound_nat_rules, json[QString("outboundNatRules")]);
    m_outbound_nat_rules_isSet = !json[QString("outboundNatRules")].isNull() && m_outbound_nat_rules_isValid;

    m_private_ip_address_isValid = ::OpenAPI::fromJsonValue(m_private_ip_address, json[QString("privateIPAddress")]);
    m_private_ip_address_isSet = !json[QString("privateIPAddress")].isNull() && m_private_ip_address_isValid;

    m_private_ip_allocation_method_isValid = ::OpenAPI::fromJsonValue(m_private_ip_allocation_method, json[QString("privateIPAllocationMethod")]);
    m_private_ip_allocation_method_isSet = !json[QString("privateIPAllocationMethod")].isNull() && m_private_ip_allocation_method_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_public_ip_address_isValid = ::OpenAPI::fromJsonValue(m_public_ip_address, json[QString("publicIPAddress")]);
    m_public_ip_address_isSet = !json[QString("publicIPAddress")].isNull() && m_public_ip_address_isValid;

    m_subnet_isValid = ::OpenAPI::fromJsonValue(m_subnet, json[QString("subnet")]);
    m_subnet_isSet = !json[QString("subnet")].isNull() && m_subnet_isValid;
}

QString OAIFrontendIpConfigurationPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFrontendIpConfigurationPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_inbound_nat_pools.size() > 0) {
        obj.insert(QString("inboundNatPools"), ::OpenAPI::toJsonValue(m_inbound_nat_pools));
    }
    if (m_inbound_nat_rules.size() > 0) {
        obj.insert(QString("inboundNatRules"), ::OpenAPI::toJsonValue(m_inbound_nat_rules));
    }
    if (m_load_balancing_rules.size() > 0) {
        obj.insert(QString("loadBalancingRules"), ::OpenAPI::toJsonValue(m_load_balancing_rules));
    }
    if (m_outbound_nat_rules.size() > 0) {
        obj.insert(QString("outboundNatRules"), ::OpenAPI::toJsonValue(m_outbound_nat_rules));
    }
    if (m_private_ip_address_isSet) {
        obj.insert(QString("privateIPAddress"), ::OpenAPI::toJsonValue(m_private_ip_address));
    }
    if (m_private_ip_allocation_method_isSet) {
        obj.insert(QString("privateIPAllocationMethod"), ::OpenAPI::toJsonValue(m_private_ip_allocation_method));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_public_ip_address.isSet()) {
        obj.insert(QString("publicIPAddress"), ::OpenAPI::toJsonValue(m_public_ip_address));
    }
    if (m_subnet.isSet()) {
        obj.insert(QString("subnet"), ::OpenAPI::toJsonValue(m_subnet));
    }
    return obj;
}

QList<OAISubResource> OAIFrontendIpConfigurationPropertiesFormat::getInboundNatPools() const {
    return m_inbound_nat_pools;
}
void OAIFrontendIpConfigurationPropertiesFormat::setInboundNatPools(const QList<OAISubResource> &inbound_nat_pools) {
    m_inbound_nat_pools = inbound_nat_pools;
    m_inbound_nat_pools_isSet = true;
}

bool OAIFrontendIpConfigurationPropertiesFormat::is_inbound_nat_pools_Set() const{
    return m_inbound_nat_pools_isSet;
}

bool OAIFrontendIpConfigurationPropertiesFormat::is_inbound_nat_pools_Valid() const{
    return m_inbound_nat_pools_isValid;
}

QList<OAISubResource> OAIFrontendIpConfigurationPropertiesFormat::getInboundNatRules() const {
    return m_inbound_nat_rules;
}
void OAIFrontendIpConfigurationPropertiesFormat::setInboundNatRules(const QList<OAISubResource> &inbound_nat_rules) {
    m_inbound_nat_rules = inbound_nat_rules;
    m_inbound_nat_rules_isSet = true;
}

bool OAIFrontendIpConfigurationPropertiesFormat::is_inbound_nat_rules_Set() const{
    return m_inbound_nat_rules_isSet;
}

bool OAIFrontendIpConfigurationPropertiesFormat::is_inbound_nat_rules_Valid() const{
    return m_inbound_nat_rules_isValid;
}

QList<OAISubResource> OAIFrontendIpConfigurationPropertiesFormat::getLoadBalancingRules() const {
    return m_load_balancing_rules;
}
void OAIFrontendIpConfigurationPropertiesFormat::setLoadBalancingRules(const QList<OAISubResource> &load_balancing_rules) {
    m_load_balancing_rules = load_balancing_rules;
    m_load_balancing_rules_isSet = true;
}

bool OAIFrontendIpConfigurationPropertiesFormat::is_load_balancing_rules_Set() const{
    return m_load_balancing_rules_isSet;
}

bool OAIFrontendIpConfigurationPropertiesFormat::is_load_balancing_rules_Valid() const{
    return m_load_balancing_rules_isValid;
}

QList<OAISubResource> OAIFrontendIpConfigurationPropertiesFormat::getOutboundNatRules() const {
    return m_outbound_nat_rules;
}
void OAIFrontendIpConfigurationPropertiesFormat::setOutboundNatRules(const QList<OAISubResource> &outbound_nat_rules) {
    m_outbound_nat_rules = outbound_nat_rules;
    m_outbound_nat_rules_isSet = true;
}

bool OAIFrontendIpConfigurationPropertiesFormat::is_outbound_nat_rules_Set() const{
    return m_outbound_nat_rules_isSet;
}

bool OAIFrontendIpConfigurationPropertiesFormat::is_outbound_nat_rules_Valid() const{
    return m_outbound_nat_rules_isValid;
}

QString OAIFrontendIpConfigurationPropertiesFormat::getPrivateIpAddress() const {
    return m_private_ip_address;
}
void OAIFrontendIpConfigurationPropertiesFormat::setPrivateIpAddress(const QString &private_ip_address) {
    m_private_ip_address = private_ip_address;
    m_private_ip_address_isSet = true;
}

bool OAIFrontendIpConfigurationPropertiesFormat::is_private_ip_address_Set() const{
    return m_private_ip_address_isSet;
}

bool OAIFrontendIpConfigurationPropertiesFormat::is_private_ip_address_Valid() const{
    return m_private_ip_address_isValid;
}

QString OAIFrontendIpConfigurationPropertiesFormat::getPrivateIpAllocationMethod() const {
    return m_private_ip_allocation_method;
}
void OAIFrontendIpConfigurationPropertiesFormat::setPrivateIpAllocationMethod(const QString &private_ip_allocation_method) {
    m_private_ip_allocation_method = private_ip_allocation_method;
    m_private_ip_allocation_method_isSet = true;
}

bool OAIFrontendIpConfigurationPropertiesFormat::is_private_ip_allocation_method_Set() const{
    return m_private_ip_allocation_method_isSet;
}

bool OAIFrontendIpConfigurationPropertiesFormat::is_private_ip_allocation_method_Valid() const{
    return m_private_ip_allocation_method_isValid;
}

QString OAIFrontendIpConfigurationPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIFrontendIpConfigurationPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIFrontendIpConfigurationPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIFrontendIpConfigurationPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAISubResource OAIFrontendIpConfigurationPropertiesFormat::getPublicIpAddress() const {
    return m_public_ip_address;
}
void OAIFrontendIpConfigurationPropertiesFormat::setPublicIpAddress(const OAISubResource &public_ip_address) {
    m_public_ip_address = public_ip_address;
    m_public_ip_address_isSet = true;
}

bool OAIFrontendIpConfigurationPropertiesFormat::is_public_ip_address_Set() const{
    return m_public_ip_address_isSet;
}

bool OAIFrontendIpConfigurationPropertiesFormat::is_public_ip_address_Valid() const{
    return m_public_ip_address_isValid;
}

OAISubResource OAIFrontendIpConfigurationPropertiesFormat::getSubnet() const {
    return m_subnet;
}
void OAIFrontendIpConfigurationPropertiesFormat::setSubnet(const OAISubResource &subnet) {
    m_subnet = subnet;
    m_subnet_isSet = true;
}

bool OAIFrontendIpConfigurationPropertiesFormat::is_subnet_Set() const{
    return m_subnet_isSet;
}

bool OAIFrontendIpConfigurationPropertiesFormat::is_subnet_Valid() const{
    return m_subnet_isValid;
}

bool OAIFrontendIpConfigurationPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_inbound_nat_pools.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_nat_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancing_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_outbound_nat_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_ip_allocation_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFrontendIpConfigurationPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
