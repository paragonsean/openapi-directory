/**
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExpressRouteCircuitServiceProviderProperties.h
 *
 * Contains ServiceProviderProperties in an ExpressRouteCircuit
 */

#ifndef OAIExpressRouteCircuitServiceProviderProperties_H
#define OAIExpressRouteCircuitServiceProviderProperties_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIExpressRouteCircuitServiceProviderProperties : public OAIObject {
public:
    OAIExpressRouteCircuitServiceProviderProperties();
    OAIExpressRouteCircuitServiceProviderProperties(QString json);
    ~OAIExpressRouteCircuitServiceProviderProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBandwidthInMbps() const;
    void setBandwidthInMbps(const qint32 &bandwidth_in_mbps);
    bool is_bandwidth_in_mbps_Set() const;
    bool is_bandwidth_in_mbps_Valid() const;

    QString getPeeringLocation() const;
    void setPeeringLocation(const QString &peering_location);
    bool is_peering_location_Set() const;
    bool is_peering_location_Valid() const;

    QString getServiceProviderName() const;
    void setServiceProviderName(const QString &service_provider_name);
    bool is_service_provider_name_Set() const;
    bool is_service_provider_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_bandwidth_in_mbps;
    bool m_bandwidth_in_mbps_isSet;
    bool m_bandwidth_in_mbps_isValid;

    QString m_peering_location;
    bool m_peering_location_isSet;
    bool m_peering_location_isValid;

    QString m_service_provider_name;
    bool m_service_provider_name_isSet;
    bool m_service_provider_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExpressRouteCircuitServiceProviderProperties)

#endif // OAIExpressRouteCircuitServiceProviderProperties_H
