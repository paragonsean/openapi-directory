/**
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRouteCircuitStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRouteCircuitStats::OAIExpressRouteCircuitStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRouteCircuitStats::OAIExpressRouteCircuitStats() {
    this->initializeModel();
}

OAIExpressRouteCircuitStats::~OAIExpressRouteCircuitStats() {}

void OAIExpressRouteCircuitStats::initializeModel() {

    m_bytes_in_isSet = false;
    m_bytes_in_isValid = false;

    m_bytes_out_isSet = false;
    m_bytes_out_isValid = false;
}

void OAIExpressRouteCircuitStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRouteCircuitStats::fromJsonObject(QJsonObject json) {

    m_bytes_in_isValid = ::OpenAPI::fromJsonValue(m_bytes_in, json[QString("bytesIn")]);
    m_bytes_in_isSet = !json[QString("bytesIn")].isNull() && m_bytes_in_isValid;

    m_bytes_out_isValid = ::OpenAPI::fromJsonValue(m_bytes_out, json[QString("bytesOut")]);
    m_bytes_out_isSet = !json[QString("bytesOut")].isNull() && m_bytes_out_isValid;
}

QString OAIExpressRouteCircuitStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRouteCircuitStats::asJsonObject() const {
    QJsonObject obj;
    if (m_bytes_in_isSet) {
        obj.insert(QString("bytesIn"), ::OpenAPI::toJsonValue(m_bytes_in));
    }
    if (m_bytes_out_isSet) {
        obj.insert(QString("bytesOut"), ::OpenAPI::toJsonValue(m_bytes_out));
    }
    return obj;
}

qint32 OAIExpressRouteCircuitStats::getBytesIn() const {
    return m_bytes_in;
}
void OAIExpressRouteCircuitStats::setBytesIn(const qint32 &bytes_in) {
    m_bytes_in = bytes_in;
    m_bytes_in_isSet = true;
}

bool OAIExpressRouteCircuitStats::is_bytes_in_Set() const{
    return m_bytes_in_isSet;
}

bool OAIExpressRouteCircuitStats::is_bytes_in_Valid() const{
    return m_bytes_in_isValid;
}

qint32 OAIExpressRouteCircuitStats::getBytesOut() const {
    return m_bytes_out;
}
void OAIExpressRouteCircuitStats::setBytesOut(const qint32 &bytes_out) {
    m_bytes_out = bytes_out;
    m_bytes_out_isSet = true;
}

bool OAIExpressRouteCircuitStats::is_bytes_out_Set() const{
    return m_bytes_out_isSet;
}

bool OAIExpressRouteCircuitStats::is_bytes_out_Valid() const{
    return m_bytes_out_isValid;
}

bool OAIExpressRouteCircuitStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bytes_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bytes_out_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRouteCircuitStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
