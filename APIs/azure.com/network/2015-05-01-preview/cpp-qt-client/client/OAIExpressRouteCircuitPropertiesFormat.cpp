/**
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRouteCircuitPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRouteCircuitPropertiesFormat::OAIExpressRouteCircuitPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRouteCircuitPropertiesFormat::OAIExpressRouteCircuitPropertiesFormat() {
    this->initializeModel();
}

OAIExpressRouteCircuitPropertiesFormat::~OAIExpressRouteCircuitPropertiesFormat() {}

void OAIExpressRouteCircuitPropertiesFormat::initializeModel() {

    m_authorizations_isSet = false;
    m_authorizations_isValid = false;

    m_circuit_provisioning_state_isSet = false;
    m_circuit_provisioning_state_isValid = false;

    m_peerings_isSet = false;
    m_peerings_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_service_key_isSet = false;
    m_service_key_isValid = false;

    m_service_provider_notes_isSet = false;
    m_service_provider_notes_isValid = false;

    m_service_provider_properties_isSet = false;
    m_service_provider_properties_isValid = false;

    m_service_provider_provisioning_state_isSet = false;
    m_service_provider_provisioning_state_isValid = false;
}

void OAIExpressRouteCircuitPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRouteCircuitPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_authorizations_isValid = ::OpenAPI::fromJsonValue(m_authorizations, json[QString("authorizations")]);
    m_authorizations_isSet = !json[QString("authorizations")].isNull() && m_authorizations_isValid;

    m_circuit_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_circuit_provisioning_state, json[QString("circuitProvisioningState")]);
    m_circuit_provisioning_state_isSet = !json[QString("circuitProvisioningState")].isNull() && m_circuit_provisioning_state_isValid;

    m_peerings_isValid = ::OpenAPI::fromJsonValue(m_peerings, json[QString("peerings")]);
    m_peerings_isSet = !json[QString("peerings")].isNull() && m_peerings_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_service_key_isValid = ::OpenAPI::fromJsonValue(m_service_key, json[QString("serviceKey")]);
    m_service_key_isSet = !json[QString("serviceKey")].isNull() && m_service_key_isValid;

    m_service_provider_notes_isValid = ::OpenAPI::fromJsonValue(m_service_provider_notes, json[QString("serviceProviderNotes")]);
    m_service_provider_notes_isSet = !json[QString("serviceProviderNotes")].isNull() && m_service_provider_notes_isValid;

    m_service_provider_properties_isValid = ::OpenAPI::fromJsonValue(m_service_provider_properties, json[QString("serviceProviderProperties")]);
    m_service_provider_properties_isSet = !json[QString("serviceProviderProperties")].isNull() && m_service_provider_properties_isValid;

    m_service_provider_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_service_provider_provisioning_state, json[QString("serviceProviderProvisioningState")]);
    m_service_provider_provisioning_state_isSet = !json[QString("serviceProviderProvisioningState")].isNull() && m_service_provider_provisioning_state_isValid;
}

QString OAIExpressRouteCircuitPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRouteCircuitPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_authorizations.size() > 0) {
        obj.insert(QString("authorizations"), ::OpenAPI::toJsonValue(m_authorizations));
    }
    if (m_circuit_provisioning_state_isSet) {
        obj.insert(QString("circuitProvisioningState"), ::OpenAPI::toJsonValue(m_circuit_provisioning_state));
    }
    if (m_peerings.size() > 0) {
        obj.insert(QString("peerings"), ::OpenAPI::toJsonValue(m_peerings));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_service_key_isSet) {
        obj.insert(QString("serviceKey"), ::OpenAPI::toJsonValue(m_service_key));
    }
    if (m_service_provider_notes_isSet) {
        obj.insert(QString("serviceProviderNotes"), ::OpenAPI::toJsonValue(m_service_provider_notes));
    }
    if (m_service_provider_properties.isSet()) {
        obj.insert(QString("serviceProviderProperties"), ::OpenAPI::toJsonValue(m_service_provider_properties));
    }
    if (m_service_provider_provisioning_state_isSet) {
        obj.insert(QString("serviceProviderProvisioningState"), ::OpenAPI::toJsonValue(m_service_provider_provisioning_state));
    }
    return obj;
}

QList<OAIExpressRouteCircuitAuthorization> OAIExpressRouteCircuitPropertiesFormat::getAuthorizations() const {
    return m_authorizations;
}
void OAIExpressRouteCircuitPropertiesFormat::setAuthorizations(const QList<OAIExpressRouteCircuitAuthorization> &authorizations) {
    m_authorizations = authorizations;
    m_authorizations_isSet = true;
}

bool OAIExpressRouteCircuitPropertiesFormat::is_authorizations_Set() const{
    return m_authorizations_isSet;
}

bool OAIExpressRouteCircuitPropertiesFormat::is_authorizations_Valid() const{
    return m_authorizations_isValid;
}

QString OAIExpressRouteCircuitPropertiesFormat::getCircuitProvisioningState() const {
    return m_circuit_provisioning_state;
}
void OAIExpressRouteCircuitPropertiesFormat::setCircuitProvisioningState(const QString &circuit_provisioning_state) {
    m_circuit_provisioning_state = circuit_provisioning_state;
    m_circuit_provisioning_state_isSet = true;
}

bool OAIExpressRouteCircuitPropertiesFormat::is_circuit_provisioning_state_Set() const{
    return m_circuit_provisioning_state_isSet;
}

bool OAIExpressRouteCircuitPropertiesFormat::is_circuit_provisioning_state_Valid() const{
    return m_circuit_provisioning_state_isValid;
}

QList<OAIExpressRouteCircuitPeering> OAIExpressRouteCircuitPropertiesFormat::getPeerings() const {
    return m_peerings;
}
void OAIExpressRouteCircuitPropertiesFormat::setPeerings(const QList<OAIExpressRouteCircuitPeering> &peerings) {
    m_peerings = peerings;
    m_peerings_isSet = true;
}

bool OAIExpressRouteCircuitPropertiesFormat::is_peerings_Set() const{
    return m_peerings_isSet;
}

bool OAIExpressRouteCircuitPropertiesFormat::is_peerings_Valid() const{
    return m_peerings_isValid;
}

QString OAIExpressRouteCircuitPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIExpressRouteCircuitPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIExpressRouteCircuitPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIExpressRouteCircuitPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIExpressRouteCircuitPropertiesFormat::getServiceKey() const {
    return m_service_key;
}
void OAIExpressRouteCircuitPropertiesFormat::setServiceKey(const QString &service_key) {
    m_service_key = service_key;
    m_service_key_isSet = true;
}

bool OAIExpressRouteCircuitPropertiesFormat::is_service_key_Set() const{
    return m_service_key_isSet;
}

bool OAIExpressRouteCircuitPropertiesFormat::is_service_key_Valid() const{
    return m_service_key_isValid;
}

QString OAIExpressRouteCircuitPropertiesFormat::getServiceProviderNotes() const {
    return m_service_provider_notes;
}
void OAIExpressRouteCircuitPropertiesFormat::setServiceProviderNotes(const QString &service_provider_notes) {
    m_service_provider_notes = service_provider_notes;
    m_service_provider_notes_isSet = true;
}

bool OAIExpressRouteCircuitPropertiesFormat::is_service_provider_notes_Set() const{
    return m_service_provider_notes_isSet;
}

bool OAIExpressRouteCircuitPropertiesFormat::is_service_provider_notes_Valid() const{
    return m_service_provider_notes_isValid;
}

OAIExpressRouteCircuitServiceProviderProperties OAIExpressRouteCircuitPropertiesFormat::getServiceProviderProperties() const {
    return m_service_provider_properties;
}
void OAIExpressRouteCircuitPropertiesFormat::setServiceProviderProperties(const OAIExpressRouteCircuitServiceProviderProperties &service_provider_properties) {
    m_service_provider_properties = service_provider_properties;
    m_service_provider_properties_isSet = true;
}

bool OAIExpressRouteCircuitPropertiesFormat::is_service_provider_properties_Set() const{
    return m_service_provider_properties_isSet;
}

bool OAIExpressRouteCircuitPropertiesFormat::is_service_provider_properties_Valid() const{
    return m_service_provider_properties_isValid;
}

QString OAIExpressRouteCircuitPropertiesFormat::getServiceProviderProvisioningState() const {
    return m_service_provider_provisioning_state;
}
void OAIExpressRouteCircuitPropertiesFormat::setServiceProviderProvisioningState(const QString &service_provider_provisioning_state) {
    m_service_provider_provisioning_state = service_provider_provisioning_state;
    m_service_provider_provisioning_state_isSet = true;
}

bool OAIExpressRouteCircuitPropertiesFormat::is_service_provider_provisioning_state_Set() const{
    return m_service_provider_provisioning_state_isSet;
}

bool OAIExpressRouteCircuitPropertiesFormat::is_service_provider_provisioning_state_Valid() const{
    return m_service_provider_provisioning_state_isValid;
}

bool OAIExpressRouteCircuitPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorizations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_circuit_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peerings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_provider_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_provider_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_provider_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRouteCircuitPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
