/**
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkInterfaceIpConfigurationPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkInterfaceIpConfigurationPropertiesFormat::OAINetworkInterfaceIpConfigurationPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkInterfaceIpConfigurationPropertiesFormat::OAINetworkInterfaceIpConfigurationPropertiesFormat() {
    this->initializeModel();
}

OAINetworkInterfaceIpConfigurationPropertiesFormat::~OAINetworkInterfaceIpConfigurationPropertiesFormat() {}

void OAINetworkInterfaceIpConfigurationPropertiesFormat::initializeModel() {

    m_load_balancer_backend_address_pools_isSet = false;
    m_load_balancer_backend_address_pools_isValid = false;

    m_load_balancer_inbound_nat_rules_isSet = false;
    m_load_balancer_inbound_nat_rules_isValid = false;

    m_private_ip_address_isSet = false;
    m_private_ip_address_isValid = false;

    m_private_ip_allocation_method_isSet = false;
    m_private_ip_allocation_method_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_public_ip_address_isSet = false;
    m_public_ip_address_isValid = false;

    m_subnet_isSet = false;
    m_subnet_isValid = false;
}

void OAINetworkInterfaceIpConfigurationPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkInterfaceIpConfigurationPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_load_balancer_backend_address_pools_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_backend_address_pools, json[QString("loadBalancerBackendAddressPools")]);
    m_load_balancer_backend_address_pools_isSet = !json[QString("loadBalancerBackendAddressPools")].isNull() && m_load_balancer_backend_address_pools_isValid;

    m_load_balancer_inbound_nat_rules_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_inbound_nat_rules, json[QString("loadBalancerInboundNatRules")]);
    m_load_balancer_inbound_nat_rules_isSet = !json[QString("loadBalancerInboundNatRules")].isNull() && m_load_balancer_inbound_nat_rules_isValid;

    m_private_ip_address_isValid = ::OpenAPI::fromJsonValue(m_private_ip_address, json[QString("privateIPAddress")]);
    m_private_ip_address_isSet = !json[QString("privateIPAddress")].isNull() && m_private_ip_address_isValid;

    m_private_ip_allocation_method_isValid = ::OpenAPI::fromJsonValue(m_private_ip_allocation_method, json[QString("privateIPAllocationMethod")]);
    m_private_ip_allocation_method_isSet = !json[QString("privateIPAllocationMethod")].isNull() && m_private_ip_allocation_method_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_public_ip_address_isValid = ::OpenAPI::fromJsonValue(m_public_ip_address, json[QString("publicIPAddress")]);
    m_public_ip_address_isSet = !json[QString("publicIPAddress")].isNull() && m_public_ip_address_isValid;

    m_subnet_isValid = ::OpenAPI::fromJsonValue(m_subnet, json[QString("subnet")]);
    m_subnet_isSet = !json[QString("subnet")].isNull() && m_subnet_isValid;
}

QString OAINetworkInterfaceIpConfigurationPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkInterfaceIpConfigurationPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_load_balancer_backend_address_pools.size() > 0) {
        obj.insert(QString("loadBalancerBackendAddressPools"), ::OpenAPI::toJsonValue(m_load_balancer_backend_address_pools));
    }
    if (m_load_balancer_inbound_nat_rules.size() > 0) {
        obj.insert(QString("loadBalancerInboundNatRules"), ::OpenAPI::toJsonValue(m_load_balancer_inbound_nat_rules));
    }
    if (m_private_ip_address_isSet) {
        obj.insert(QString("privateIPAddress"), ::OpenAPI::toJsonValue(m_private_ip_address));
    }
    if (m_private_ip_allocation_method_isSet) {
        obj.insert(QString("privateIPAllocationMethod"), ::OpenAPI::toJsonValue(m_private_ip_allocation_method));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_public_ip_address.isSet()) {
        obj.insert(QString("publicIPAddress"), ::OpenAPI::toJsonValue(m_public_ip_address));
    }
    if (m_subnet.isSet()) {
        obj.insert(QString("subnet"), ::OpenAPI::toJsonValue(m_subnet));
    }
    return obj;
}

QList<OAISubResource> OAINetworkInterfaceIpConfigurationPropertiesFormat::getLoadBalancerBackendAddressPools() const {
    return m_load_balancer_backend_address_pools;
}
void OAINetworkInterfaceIpConfigurationPropertiesFormat::setLoadBalancerBackendAddressPools(const QList<OAISubResource> &load_balancer_backend_address_pools) {
    m_load_balancer_backend_address_pools = load_balancer_backend_address_pools;
    m_load_balancer_backend_address_pools_isSet = true;
}

bool OAINetworkInterfaceIpConfigurationPropertiesFormat::is_load_balancer_backend_address_pools_Set() const{
    return m_load_balancer_backend_address_pools_isSet;
}

bool OAINetworkInterfaceIpConfigurationPropertiesFormat::is_load_balancer_backend_address_pools_Valid() const{
    return m_load_balancer_backend_address_pools_isValid;
}

QList<OAISubResource> OAINetworkInterfaceIpConfigurationPropertiesFormat::getLoadBalancerInboundNatRules() const {
    return m_load_balancer_inbound_nat_rules;
}
void OAINetworkInterfaceIpConfigurationPropertiesFormat::setLoadBalancerInboundNatRules(const QList<OAISubResource> &load_balancer_inbound_nat_rules) {
    m_load_balancer_inbound_nat_rules = load_balancer_inbound_nat_rules;
    m_load_balancer_inbound_nat_rules_isSet = true;
}

bool OAINetworkInterfaceIpConfigurationPropertiesFormat::is_load_balancer_inbound_nat_rules_Set() const{
    return m_load_balancer_inbound_nat_rules_isSet;
}

bool OAINetworkInterfaceIpConfigurationPropertiesFormat::is_load_balancer_inbound_nat_rules_Valid() const{
    return m_load_balancer_inbound_nat_rules_isValid;
}

QString OAINetworkInterfaceIpConfigurationPropertiesFormat::getPrivateIpAddress() const {
    return m_private_ip_address;
}
void OAINetworkInterfaceIpConfigurationPropertiesFormat::setPrivateIpAddress(const QString &private_ip_address) {
    m_private_ip_address = private_ip_address;
    m_private_ip_address_isSet = true;
}

bool OAINetworkInterfaceIpConfigurationPropertiesFormat::is_private_ip_address_Set() const{
    return m_private_ip_address_isSet;
}

bool OAINetworkInterfaceIpConfigurationPropertiesFormat::is_private_ip_address_Valid() const{
    return m_private_ip_address_isValid;
}

QString OAINetworkInterfaceIpConfigurationPropertiesFormat::getPrivateIpAllocationMethod() const {
    return m_private_ip_allocation_method;
}
void OAINetworkInterfaceIpConfigurationPropertiesFormat::setPrivateIpAllocationMethod(const QString &private_ip_allocation_method) {
    m_private_ip_allocation_method = private_ip_allocation_method;
    m_private_ip_allocation_method_isSet = true;
}

bool OAINetworkInterfaceIpConfigurationPropertiesFormat::is_private_ip_allocation_method_Set() const{
    return m_private_ip_allocation_method_isSet;
}

bool OAINetworkInterfaceIpConfigurationPropertiesFormat::is_private_ip_allocation_method_Valid() const{
    return m_private_ip_allocation_method_isValid;
}

QString OAINetworkInterfaceIpConfigurationPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAINetworkInterfaceIpConfigurationPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAINetworkInterfaceIpConfigurationPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAINetworkInterfaceIpConfigurationPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAISubResource OAINetworkInterfaceIpConfigurationPropertiesFormat::getPublicIpAddress() const {
    return m_public_ip_address;
}
void OAINetworkInterfaceIpConfigurationPropertiesFormat::setPublicIpAddress(const OAISubResource &public_ip_address) {
    m_public_ip_address = public_ip_address;
    m_public_ip_address_isSet = true;
}

bool OAINetworkInterfaceIpConfigurationPropertiesFormat::is_public_ip_address_Set() const{
    return m_public_ip_address_isSet;
}

bool OAINetworkInterfaceIpConfigurationPropertiesFormat::is_public_ip_address_Valid() const{
    return m_public_ip_address_isValid;
}

OAISubResource OAINetworkInterfaceIpConfigurationPropertiesFormat::getSubnet() const {
    return m_subnet;
}
void OAINetworkInterfaceIpConfigurationPropertiesFormat::setSubnet(const OAISubResource &subnet) {
    m_subnet = subnet;
    m_subnet_isSet = true;
}

bool OAINetworkInterfaceIpConfigurationPropertiesFormat::is_subnet_Set() const{
    return m_subnet_isSet;
}

bool OAINetworkInterfaceIpConfigurationPropertiesFormat::is_subnet_Valid() const{
    return m_subnet_isValid;
}

bool OAINetworkInterfaceIpConfigurationPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_load_balancer_backend_address_pools.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancer_inbound_nat_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_ip_allocation_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkInterfaceIpConfigurationPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
