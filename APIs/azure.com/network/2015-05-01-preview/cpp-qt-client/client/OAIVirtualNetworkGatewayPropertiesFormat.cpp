/**
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualNetworkGatewayPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualNetworkGatewayPropertiesFormat::OAIVirtualNetworkGatewayPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualNetworkGatewayPropertiesFormat::OAIVirtualNetworkGatewayPropertiesFormat() {
    this->initializeModel();
}

OAIVirtualNetworkGatewayPropertiesFormat::~OAIVirtualNetworkGatewayPropertiesFormat() {}

void OAIVirtualNetworkGatewayPropertiesFormat::initializeModel() {

    m_enable_bgp_isSet = false;
    m_enable_bgp_isValid = false;

    m_gateway_default_site_isSet = false;
    m_gateway_default_site_isValid = false;

    m_gateway_type_isSet = false;
    m_gateway_type_isValid = false;

    m_ip_configurations_isSet = false;
    m_ip_configurations_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_resource_guid_isSet = false;
    m_resource_guid_isValid = false;

    m_vpn_type_isSet = false;
    m_vpn_type_isValid = false;
}

void OAIVirtualNetworkGatewayPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualNetworkGatewayPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_enable_bgp_isValid = ::OpenAPI::fromJsonValue(m_enable_bgp, json[QString("enableBgp")]);
    m_enable_bgp_isSet = !json[QString("enableBgp")].isNull() && m_enable_bgp_isValid;

    m_gateway_default_site_isValid = ::OpenAPI::fromJsonValue(m_gateway_default_site, json[QString("gatewayDefaultSite")]);
    m_gateway_default_site_isSet = !json[QString("gatewayDefaultSite")].isNull() && m_gateway_default_site_isValid;

    m_gateway_type_isValid = ::OpenAPI::fromJsonValue(m_gateway_type, json[QString("gatewayType")]);
    m_gateway_type_isSet = !json[QString("gatewayType")].isNull() && m_gateway_type_isValid;

    m_ip_configurations_isValid = ::OpenAPI::fromJsonValue(m_ip_configurations, json[QString("ipConfigurations")]);
    m_ip_configurations_isSet = !json[QString("ipConfigurations")].isNull() && m_ip_configurations_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_resource_guid_isValid = ::OpenAPI::fromJsonValue(m_resource_guid, json[QString("resourceGuid")]);
    m_resource_guid_isSet = !json[QString("resourceGuid")].isNull() && m_resource_guid_isValid;

    m_vpn_type_isValid = ::OpenAPI::fromJsonValue(m_vpn_type, json[QString("vpnType")]);
    m_vpn_type_isSet = !json[QString("vpnType")].isNull() && m_vpn_type_isValid;
}

QString OAIVirtualNetworkGatewayPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualNetworkGatewayPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_bgp_isSet) {
        obj.insert(QString("enableBgp"), ::OpenAPI::toJsonValue(m_enable_bgp));
    }
    if (m_gateway_default_site.isSet()) {
        obj.insert(QString("gatewayDefaultSite"), ::OpenAPI::toJsonValue(m_gateway_default_site));
    }
    if (m_gateway_type_isSet) {
        obj.insert(QString("gatewayType"), ::OpenAPI::toJsonValue(m_gateway_type));
    }
    if (m_ip_configurations.size() > 0) {
        obj.insert(QString("ipConfigurations"), ::OpenAPI::toJsonValue(m_ip_configurations));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_resource_guid_isSet) {
        obj.insert(QString("resourceGuid"), ::OpenAPI::toJsonValue(m_resource_guid));
    }
    if (m_vpn_type_isSet) {
        obj.insert(QString("vpnType"), ::OpenAPI::toJsonValue(m_vpn_type));
    }
    return obj;
}

bool OAIVirtualNetworkGatewayPropertiesFormat::isEnableBgp() const {
    return m_enable_bgp;
}
void OAIVirtualNetworkGatewayPropertiesFormat::setEnableBgp(const bool &enable_bgp) {
    m_enable_bgp = enable_bgp;
    m_enable_bgp_isSet = true;
}

bool OAIVirtualNetworkGatewayPropertiesFormat::is_enable_bgp_Set() const{
    return m_enable_bgp_isSet;
}

bool OAIVirtualNetworkGatewayPropertiesFormat::is_enable_bgp_Valid() const{
    return m_enable_bgp_isValid;
}

OAISubResource OAIVirtualNetworkGatewayPropertiesFormat::getGatewayDefaultSite() const {
    return m_gateway_default_site;
}
void OAIVirtualNetworkGatewayPropertiesFormat::setGatewayDefaultSite(const OAISubResource &gateway_default_site) {
    m_gateway_default_site = gateway_default_site;
    m_gateway_default_site_isSet = true;
}

bool OAIVirtualNetworkGatewayPropertiesFormat::is_gateway_default_site_Set() const{
    return m_gateway_default_site_isSet;
}

bool OAIVirtualNetworkGatewayPropertiesFormat::is_gateway_default_site_Valid() const{
    return m_gateway_default_site_isValid;
}

QString OAIVirtualNetworkGatewayPropertiesFormat::getGatewayType() const {
    return m_gateway_type;
}
void OAIVirtualNetworkGatewayPropertiesFormat::setGatewayType(const QString &gateway_type) {
    m_gateway_type = gateway_type;
    m_gateway_type_isSet = true;
}

bool OAIVirtualNetworkGatewayPropertiesFormat::is_gateway_type_Set() const{
    return m_gateway_type_isSet;
}

bool OAIVirtualNetworkGatewayPropertiesFormat::is_gateway_type_Valid() const{
    return m_gateway_type_isValid;
}

QList<OAIVirtualNetworkGatewayIpConfiguration> OAIVirtualNetworkGatewayPropertiesFormat::getIpConfigurations() const {
    return m_ip_configurations;
}
void OAIVirtualNetworkGatewayPropertiesFormat::setIpConfigurations(const QList<OAIVirtualNetworkGatewayIpConfiguration> &ip_configurations) {
    m_ip_configurations = ip_configurations;
    m_ip_configurations_isSet = true;
}

bool OAIVirtualNetworkGatewayPropertiesFormat::is_ip_configurations_Set() const{
    return m_ip_configurations_isSet;
}

bool OAIVirtualNetworkGatewayPropertiesFormat::is_ip_configurations_Valid() const{
    return m_ip_configurations_isValid;
}

QString OAIVirtualNetworkGatewayPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVirtualNetworkGatewayPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVirtualNetworkGatewayPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVirtualNetworkGatewayPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIVirtualNetworkGatewayPropertiesFormat::getResourceGuid() const {
    return m_resource_guid;
}
void OAIVirtualNetworkGatewayPropertiesFormat::setResourceGuid(const QString &resource_guid) {
    m_resource_guid = resource_guid;
    m_resource_guid_isSet = true;
}

bool OAIVirtualNetworkGatewayPropertiesFormat::is_resource_guid_Set() const{
    return m_resource_guid_isSet;
}

bool OAIVirtualNetworkGatewayPropertiesFormat::is_resource_guid_Valid() const{
    return m_resource_guid_isValid;
}

QString OAIVirtualNetworkGatewayPropertiesFormat::getVpnType() const {
    return m_vpn_type;
}
void OAIVirtualNetworkGatewayPropertiesFormat::setVpnType(const QString &vpn_type) {
    m_vpn_type = vpn_type;
    m_vpn_type_isSet = true;
}

bool OAIVirtualNetworkGatewayPropertiesFormat::is_vpn_type_Set() const{
    return m_vpn_type_isSet;
}

bool OAIVirtualNetworkGatewayPropertiesFormat::is_vpn_type_Valid() const{
    return m_vpn_type_isValid;
}

bool OAIVirtualNetworkGatewayPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_bgp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_default_site.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpn_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualNetworkGatewayPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
