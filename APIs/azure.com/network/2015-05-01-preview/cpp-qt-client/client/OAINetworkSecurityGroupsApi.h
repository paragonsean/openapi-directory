/**
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINetworkSecurityGroupsApi_H
#define OAI_OAINetworkSecurityGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINetworkSecurityGroup.h"
#include "OAINetworkSecurityGroupListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINetworkSecurityGroupsApi : public QObject {
    Q_OBJECT

public:
    OAINetworkSecurityGroupsApi(const int timeOut = 0);
    ~OAINetworkSecurityGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_security_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAINetworkSecurityGroup [required]
    */
    virtual void networkSecurityGroupsCreateOrUpdate(const QString &resource_group_name, const QString &network_security_group_name, const QString &api_version, const QString &subscription_id, const OAINetworkSecurityGroup &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_security_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void networkSecurityGroupsDelete(const QString &resource_group_name, const QString &network_security_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_security_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void networkSecurityGroupsGet(const QString &resource_group_name, const QString &network_security_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void networkSecurityGroupsList(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void networkSecurityGroupsListAll(const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void networkSecurityGroupsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void networkSecurityGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void networkSecurityGroupsGetCallback(OAIHttpRequestWorker *worker);
    void networkSecurityGroupsListCallback(OAIHttpRequestWorker *worker);
    void networkSecurityGroupsListAllCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void networkSecurityGroupsCreateOrUpdateSignal(OAINetworkSecurityGroup summary);
    void networkSecurityGroupsDeleteSignal();
    void networkSecurityGroupsGetSignal(OAINetworkSecurityGroup summary);
    void networkSecurityGroupsListSignal(OAINetworkSecurityGroupListResult summary);
    void networkSecurityGroupsListAllSignal(OAINetworkSecurityGroupListResult summary);


    void networkSecurityGroupsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAINetworkSecurityGroup summary);
    void networkSecurityGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void networkSecurityGroupsGetSignalFull(OAIHttpRequestWorker *worker, OAINetworkSecurityGroup summary);
    void networkSecurityGroupsListSignalFull(OAIHttpRequestWorker *worker, OAINetworkSecurityGroupListResult summary);
    void networkSecurityGroupsListAllSignalFull(OAIHttpRequestWorker *worker, OAINetworkSecurityGroupListResult summary);

    Q_DECL_DEPRECATED_X("Use networkSecurityGroupsCreateOrUpdateSignalError() instead")
    void networkSecurityGroupsCreateOrUpdateSignalE(OAINetworkSecurityGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkSecurityGroupsCreateOrUpdateSignalError(OAINetworkSecurityGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkSecurityGroupsDeleteSignalError() instead")
    void networkSecurityGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void networkSecurityGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkSecurityGroupsGetSignalError() instead")
    void networkSecurityGroupsGetSignalE(OAINetworkSecurityGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkSecurityGroupsGetSignalError(OAINetworkSecurityGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkSecurityGroupsListSignalError() instead")
    void networkSecurityGroupsListSignalE(OAINetworkSecurityGroupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkSecurityGroupsListSignalError(OAINetworkSecurityGroupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkSecurityGroupsListAllSignalError() instead")
    void networkSecurityGroupsListAllSignalE(OAINetworkSecurityGroupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void networkSecurityGroupsListAllSignalError(OAINetworkSecurityGroupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use networkSecurityGroupsCreateOrUpdateSignalErrorFull() instead")
    void networkSecurityGroupsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkSecurityGroupsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkSecurityGroupsDeleteSignalErrorFull() instead")
    void networkSecurityGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkSecurityGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkSecurityGroupsGetSignalErrorFull() instead")
    void networkSecurityGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkSecurityGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkSecurityGroupsListSignalErrorFull() instead")
    void networkSecurityGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkSecurityGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use networkSecurityGroupsListAllSignalErrorFull() instead")
    void networkSecurityGroupsListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void networkSecurityGroupsListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
