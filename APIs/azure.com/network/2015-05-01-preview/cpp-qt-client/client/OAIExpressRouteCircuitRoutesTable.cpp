/**
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRouteCircuitRoutesTable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRouteCircuitRoutesTable::OAIExpressRouteCircuitRoutesTable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRouteCircuitRoutesTable::OAIExpressRouteCircuitRoutesTable() {
    this->initializeModel();
}

OAIExpressRouteCircuitRoutesTable::~OAIExpressRouteCircuitRoutesTable() {}

void OAIExpressRouteCircuitRoutesTable::initializeModel() {

    m_address_prefix_isSet = false;
    m_address_prefix_isValid = false;

    m_as_path_isSet = false;
    m_as_path_isValid = false;

    m_next_hop_ip_isSet = false;
    m_next_hop_ip_isValid = false;

    m_next_hop_type_isSet = false;
    m_next_hop_type_isValid = false;
}

void OAIExpressRouteCircuitRoutesTable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRouteCircuitRoutesTable::fromJsonObject(QJsonObject json) {

    m_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_address_prefix, json[QString("addressPrefix")]);
    m_address_prefix_isSet = !json[QString("addressPrefix")].isNull() && m_address_prefix_isValid;

    m_as_path_isValid = ::OpenAPI::fromJsonValue(m_as_path, json[QString("asPath")]);
    m_as_path_isSet = !json[QString("asPath")].isNull() && m_as_path_isValid;

    m_next_hop_ip_isValid = ::OpenAPI::fromJsonValue(m_next_hop_ip, json[QString("nextHopIP")]);
    m_next_hop_ip_isSet = !json[QString("nextHopIP")].isNull() && m_next_hop_ip_isValid;

    m_next_hop_type_isValid = ::OpenAPI::fromJsonValue(m_next_hop_type, json[QString("nextHopType")]);
    m_next_hop_type_isSet = !json[QString("nextHopType")].isNull() && m_next_hop_type_isValid;
}

QString OAIExpressRouteCircuitRoutesTable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRouteCircuitRoutesTable::asJsonObject() const {
    QJsonObject obj;
    if (m_address_prefix_isSet) {
        obj.insert(QString("addressPrefix"), ::OpenAPI::toJsonValue(m_address_prefix));
    }
    if (m_as_path_isSet) {
        obj.insert(QString("asPath"), ::OpenAPI::toJsonValue(m_as_path));
    }
    if (m_next_hop_ip_isSet) {
        obj.insert(QString("nextHopIP"), ::OpenAPI::toJsonValue(m_next_hop_ip));
    }
    if (m_next_hop_type_isSet) {
        obj.insert(QString("nextHopType"), ::OpenAPI::toJsonValue(m_next_hop_type));
    }
    return obj;
}

QString OAIExpressRouteCircuitRoutesTable::getAddressPrefix() const {
    return m_address_prefix;
}
void OAIExpressRouteCircuitRoutesTable::setAddressPrefix(const QString &address_prefix) {
    m_address_prefix = address_prefix;
    m_address_prefix_isSet = true;
}

bool OAIExpressRouteCircuitRoutesTable::is_address_prefix_Set() const{
    return m_address_prefix_isSet;
}

bool OAIExpressRouteCircuitRoutesTable::is_address_prefix_Valid() const{
    return m_address_prefix_isValid;
}

QString OAIExpressRouteCircuitRoutesTable::getAsPath() const {
    return m_as_path;
}
void OAIExpressRouteCircuitRoutesTable::setAsPath(const QString &as_path) {
    m_as_path = as_path;
    m_as_path_isSet = true;
}

bool OAIExpressRouteCircuitRoutesTable::is_as_path_Set() const{
    return m_as_path_isSet;
}

bool OAIExpressRouteCircuitRoutesTable::is_as_path_Valid() const{
    return m_as_path_isValid;
}

QString OAIExpressRouteCircuitRoutesTable::getNextHopIp() const {
    return m_next_hop_ip;
}
void OAIExpressRouteCircuitRoutesTable::setNextHopIp(const QString &next_hop_ip) {
    m_next_hop_ip = next_hop_ip;
    m_next_hop_ip_isSet = true;
}

bool OAIExpressRouteCircuitRoutesTable::is_next_hop_ip_Set() const{
    return m_next_hop_ip_isSet;
}

bool OAIExpressRouteCircuitRoutesTable::is_next_hop_ip_Valid() const{
    return m_next_hop_ip_isValid;
}

QString OAIExpressRouteCircuitRoutesTable::getNextHopType() const {
    return m_next_hop_type;
}
void OAIExpressRouteCircuitRoutesTable::setNextHopType(const QString &next_hop_type) {
    m_next_hop_type = next_hop_type;
    m_next_hop_type_isSet = true;
}

bool OAIExpressRouteCircuitRoutesTable::is_next_hop_type_Set() const{
    return m_next_hop_type_isSet;
}

bool OAIExpressRouteCircuitRoutesTable::is_next_hop_type_Valid() const{
    return m_next_hop_type_isValid;
}

bool OAIExpressRouteCircuitRoutesTable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_as_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_hop_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_hop_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRouteCircuitRoutesTable::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_next_hop_type_isValid && true;
}

} // namespace OpenAPI
