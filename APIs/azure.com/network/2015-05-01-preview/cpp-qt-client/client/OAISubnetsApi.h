/**
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISubnetsApi_H
#define OAI_OAISubnetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISubnet.h"
#include "OAISubnetListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISubnetsApi : public QObject {
    Q_OBJECT

public:
    OAISubnetsApi(const int timeOut = 0);
    ~OAISubnetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_name QString [required]
    * @param[in]  subnet_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  subnet_parameters OAISubnet [required]
    */
    virtual void subnetsCreateOrUpdate(const QString &resource_group_name, const QString &virtual_network_name, const QString &subnet_name, const QString &api_version, const QString &subscription_id, const OAISubnet &subnet_parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_name QString [required]
    * @param[in]  subnet_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void subnetsDelete(const QString &resource_group_name, const QString &virtual_network_name, const QString &subnet_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_name QString [required]
    * @param[in]  subnet_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void subnetsGet(const QString &resource_group_name, const QString &virtual_network_name, const QString &subnet_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_network_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void subnetsList(const QString &resource_group_name, const QString &virtual_network_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void subnetsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void subnetsDeleteCallback(OAIHttpRequestWorker *worker);
    void subnetsGetCallback(OAIHttpRequestWorker *worker);
    void subnetsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void subnetsCreateOrUpdateSignal(OAISubnet summary);
    void subnetsDeleteSignal();
    void subnetsGetSignal(OAISubnet summary);
    void subnetsListSignal(OAISubnetListResult summary);


    void subnetsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAISubnet summary);
    void subnetsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void subnetsGetSignalFull(OAIHttpRequestWorker *worker, OAISubnet summary);
    void subnetsListSignalFull(OAIHttpRequestWorker *worker, OAISubnetListResult summary);

    Q_DECL_DEPRECATED_X("Use subnetsCreateOrUpdateSignalError() instead")
    void subnetsCreateOrUpdateSignalE(OAISubnet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subnetsCreateOrUpdateSignalError(OAISubnet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subnetsDeleteSignalError() instead")
    void subnetsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void subnetsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subnetsGetSignalError() instead")
    void subnetsGetSignalE(OAISubnet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subnetsGetSignalError(OAISubnet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subnetsListSignalError() instead")
    void subnetsListSignalE(OAISubnetListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subnetsListSignalError(OAISubnetListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use subnetsCreateOrUpdateSignalErrorFull() instead")
    void subnetsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subnetsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subnetsDeleteSignalErrorFull() instead")
    void subnetsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subnetsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subnetsGetSignalErrorFull() instead")
    void subnetsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subnetsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subnetsListSignalErrorFull() instead")
    void subnetsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subnetsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
