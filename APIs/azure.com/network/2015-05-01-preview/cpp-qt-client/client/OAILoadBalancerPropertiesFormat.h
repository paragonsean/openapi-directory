/**
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILoadBalancerPropertiesFormat.h
 *
 * Properties of Load Balancer
 */

#ifndef OAILoadBalancerPropertiesFormat_H
#define OAILoadBalancerPropertiesFormat_H

#include <QJsonObject>

#include "OAIBackendAddressPool.h"
#include "OAIFrontendIpConfiguration.h"
#include "OAIInboundNatPool.h"
#include "OAIInboundNatRule.h"
#include "OAILoadBalancingRule.h"
#include "OAIOutboundNatRule.h"
#include "OAIProbe.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBackendAddressPool;
class OAIFrontendIpConfiguration;
class OAIInboundNatPool;
class OAIInboundNatRule;
class OAILoadBalancingRule;
class OAIOutboundNatRule;
class OAIProbe;

class OAILoadBalancerPropertiesFormat : public OAIObject {
public:
    OAILoadBalancerPropertiesFormat();
    OAILoadBalancerPropertiesFormat(QString json);
    ~OAILoadBalancerPropertiesFormat() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIBackendAddressPool> getBackendAddressPools() const;
    void setBackendAddressPools(const QList<OAIBackendAddressPool> &backend_address_pools);
    bool is_backend_address_pools_Set() const;
    bool is_backend_address_pools_Valid() const;

    QList<OAIFrontendIpConfiguration> getFrontendIpConfigurations() const;
    void setFrontendIpConfigurations(const QList<OAIFrontendIpConfiguration> &frontend_ip_configurations);
    bool is_frontend_ip_configurations_Set() const;
    bool is_frontend_ip_configurations_Valid() const;

    QList<OAIInboundNatPool> getInboundNatPools() const;
    void setInboundNatPools(const QList<OAIInboundNatPool> &inbound_nat_pools);
    bool is_inbound_nat_pools_Set() const;
    bool is_inbound_nat_pools_Valid() const;

    QList<OAIInboundNatRule> getInboundNatRules() const;
    void setInboundNatRules(const QList<OAIInboundNatRule> &inbound_nat_rules);
    bool is_inbound_nat_rules_Set() const;
    bool is_inbound_nat_rules_Valid() const;

    QList<OAILoadBalancingRule> getLoadBalancingRules() const;
    void setLoadBalancingRules(const QList<OAILoadBalancingRule> &load_balancing_rules);
    bool is_load_balancing_rules_Set() const;
    bool is_load_balancing_rules_Valid() const;

    QList<OAIOutboundNatRule> getOutboundNatRules() const;
    void setOutboundNatRules(const QList<OAIOutboundNatRule> &outbound_nat_rules);
    bool is_outbound_nat_rules_Set() const;
    bool is_outbound_nat_rules_Valid() const;

    QList<OAIProbe> getProbes() const;
    void setProbes(const QList<OAIProbe> &probes);
    bool is_probes_Set() const;
    bool is_probes_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    QString getResourceGuid() const;
    void setResourceGuid(const QString &resource_guid);
    bool is_resource_guid_Set() const;
    bool is_resource_guid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIBackendAddressPool> m_backend_address_pools;
    bool m_backend_address_pools_isSet;
    bool m_backend_address_pools_isValid;

    QList<OAIFrontendIpConfiguration> m_frontend_ip_configurations;
    bool m_frontend_ip_configurations_isSet;
    bool m_frontend_ip_configurations_isValid;

    QList<OAIInboundNatPool> m_inbound_nat_pools;
    bool m_inbound_nat_pools_isSet;
    bool m_inbound_nat_pools_isValid;

    QList<OAIInboundNatRule> m_inbound_nat_rules;
    bool m_inbound_nat_rules_isSet;
    bool m_inbound_nat_rules_isValid;

    QList<OAILoadBalancingRule> m_load_balancing_rules;
    bool m_load_balancing_rules_isSet;
    bool m_load_balancing_rules_isValid;

    QList<OAIOutboundNatRule> m_outbound_nat_rules;
    bool m_outbound_nat_rules_isSet;
    bool m_outbound_nat_rules_isValid;

    QList<OAIProbe> m_probes;
    bool m_probes_isSet;
    bool m_probes_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    QString m_resource_guid;
    bool m_resource_guid_isSet;
    bool m_resource_guid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILoadBalancerPropertiesFormat)

#endif // OAILoadBalancerPropertiesFormat_H
