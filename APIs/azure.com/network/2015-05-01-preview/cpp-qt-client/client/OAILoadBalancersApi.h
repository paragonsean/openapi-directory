/**
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILoadBalancersApi_H
#define OAI_OAILoadBalancersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILoadBalancer.h"
#include "OAILoadBalancerListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILoadBalancersApi : public QObject {
    Q_OBJECT

public:
    OAILoadBalancersApi(const int timeOut = 0);
    ~OAILoadBalancersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAILoadBalancer [required]
    */
    virtual void loadBalancersCreateOrUpdate(const QString &resource_group_name, const QString &load_balancer_name, const QString &api_version, const QString &subscription_id, const OAILoadBalancer &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void loadBalancersDelete(const QString &resource_group_name, const QString &load_balancer_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  load_balancer_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void loadBalancersGet(const QString &resource_group_name, const QString &load_balancer_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void loadBalancersList(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void loadBalancersListAll(const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void loadBalancersCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void loadBalancersDeleteCallback(OAIHttpRequestWorker *worker);
    void loadBalancersGetCallback(OAIHttpRequestWorker *worker);
    void loadBalancersListCallback(OAIHttpRequestWorker *worker);
    void loadBalancersListAllCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void loadBalancersCreateOrUpdateSignal(OAILoadBalancer summary);
    void loadBalancersDeleteSignal();
    void loadBalancersGetSignal(OAILoadBalancer summary);
    void loadBalancersListSignal(OAILoadBalancerListResult summary);
    void loadBalancersListAllSignal(OAILoadBalancerListResult summary);


    void loadBalancersCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAILoadBalancer summary);
    void loadBalancersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void loadBalancersGetSignalFull(OAIHttpRequestWorker *worker, OAILoadBalancer summary);
    void loadBalancersListSignalFull(OAIHttpRequestWorker *worker, OAILoadBalancerListResult summary);
    void loadBalancersListAllSignalFull(OAIHttpRequestWorker *worker, OAILoadBalancerListResult summary);

    Q_DECL_DEPRECATED_X("Use loadBalancersCreateOrUpdateSignalError() instead")
    void loadBalancersCreateOrUpdateSignalE(OAILoadBalancer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loadBalancersCreateOrUpdateSignalError(OAILoadBalancer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loadBalancersDeleteSignalError() instead")
    void loadBalancersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void loadBalancersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loadBalancersGetSignalError() instead")
    void loadBalancersGetSignalE(OAILoadBalancer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loadBalancersGetSignalError(OAILoadBalancer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loadBalancersListSignalError() instead")
    void loadBalancersListSignalE(OAILoadBalancerListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loadBalancersListSignalError(OAILoadBalancerListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loadBalancersListAllSignalError() instead")
    void loadBalancersListAllSignalE(OAILoadBalancerListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loadBalancersListAllSignalError(OAILoadBalancerListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use loadBalancersCreateOrUpdateSignalErrorFull() instead")
    void loadBalancersCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loadBalancersCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loadBalancersDeleteSignalErrorFull() instead")
    void loadBalancersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loadBalancersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loadBalancersGetSignalErrorFull() instead")
    void loadBalancersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loadBalancersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loadBalancersListSignalErrorFull() instead")
    void loadBalancersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loadBalancersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loadBalancersListAllSignalErrorFull() instead")
    void loadBalancersListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loadBalancersListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
