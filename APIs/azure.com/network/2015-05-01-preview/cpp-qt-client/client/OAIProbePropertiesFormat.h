/**
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProbePropertiesFormat.h
 *
 * 
 */

#ifndef OAIProbePropertiesFormat_H
#define OAIProbePropertiesFormat_H

#include <QJsonObject>

#include "OAISubResource.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISubResource;

class OAIProbePropertiesFormat : public OAIObject {
public:
    OAIProbePropertiesFormat();
    OAIProbePropertiesFormat(QString json);
    ~OAIProbePropertiesFormat() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getIntervalInSeconds() const;
    void setIntervalInSeconds(const qint32 &interval_in_seconds);
    bool is_interval_in_seconds_Set() const;
    bool is_interval_in_seconds_Valid() const;

    QList<OAISubResource> getLoadBalancingRules() const;
    void setLoadBalancingRules(const QList<OAISubResource> &load_balancing_rules);
    bool is_load_balancing_rules_Set() const;
    bool is_load_balancing_rules_Valid() const;

    qint32 getNumberOfProbes() const;
    void setNumberOfProbes(const qint32 &number_of_probes);
    bool is_number_of_probes_Set() const;
    bool is_number_of_probes_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    QString getProtocol() const;
    void setProtocol(const QString &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    QString getRequestPath() const;
    void setRequestPath(const QString &request_path);
    bool is_request_path_Set() const;
    bool is_request_path_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_interval_in_seconds;
    bool m_interval_in_seconds_isSet;
    bool m_interval_in_seconds_isValid;

    QList<OAISubResource> m_load_balancing_rules;
    bool m_load_balancing_rules_isSet;
    bool m_load_balancing_rules_isValid;

    qint32 m_number_of_probes;
    bool m_number_of_probes_isSet;
    bool m_number_of_probes_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    QString m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    QString m_request_path;
    bool m_request_path_isSet;
    bool m_request_path_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProbePropertiesFormat)

#endif // OAIProbePropertiesFormat_H
