/**
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISecurityRulesApi_H
#define OAI_OAISecurityRulesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAISecurityRule.h"
#include "OAISecurityRuleListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISecurityRulesApi : public QObject {
    Q_OBJECT

public:
    OAISecurityRulesApi(const int timeOut = 0);
    ~OAISecurityRulesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_security_group_name QString [required]
    * @param[in]  security_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  security_rule_parameters OAISecurityRule [required]
    */
    virtual void securityRulesCreateOrUpdate(const QString &resource_group_name, const QString &network_security_group_name, const QString &security_rule_name, const QString &api_version, const QString &subscription_id, const OAISecurityRule &security_rule_parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_security_group_name QString [required]
    * @param[in]  security_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void securityRulesDelete(const QString &resource_group_name, const QString &network_security_group_name, const QString &security_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_security_group_name QString [required]
    * @param[in]  security_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void securityRulesGet(const QString &resource_group_name, const QString &network_security_group_name, const QString &security_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  network_security_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void securityRulesList(const QString &resource_group_name, const QString &network_security_group_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void securityRulesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void securityRulesDeleteCallback(OAIHttpRequestWorker *worker);
    void securityRulesGetCallback(OAIHttpRequestWorker *worker);
    void securityRulesListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void securityRulesCreateOrUpdateSignal(OAISecurityRule summary);
    void securityRulesDeleteSignal();
    void securityRulesGetSignal(OAISecurityRule summary);
    void securityRulesListSignal(OAISecurityRuleListResult summary);


    void securityRulesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAISecurityRule summary);
    void securityRulesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void securityRulesGetSignalFull(OAIHttpRequestWorker *worker, OAISecurityRule summary);
    void securityRulesListSignalFull(OAIHttpRequestWorker *worker, OAISecurityRuleListResult summary);

    Q_DECL_DEPRECATED_X("Use securityRulesCreateOrUpdateSignalError() instead")
    void securityRulesCreateOrUpdateSignalE(OAISecurityRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void securityRulesCreateOrUpdateSignalError(OAISecurityRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityRulesDeleteSignalError() instead")
    void securityRulesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void securityRulesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityRulesGetSignalError() instead")
    void securityRulesGetSignalE(OAISecurityRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void securityRulesGetSignalError(OAISecurityRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityRulesListSignalError() instead")
    void securityRulesListSignalE(OAISecurityRuleListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void securityRulesListSignalError(OAISecurityRuleListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use securityRulesCreateOrUpdateSignalErrorFull() instead")
    void securityRulesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityRulesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityRulesDeleteSignalErrorFull() instead")
    void securityRulesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityRulesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityRulesGetSignalErrorFull() instead")
    void securityRulesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityRulesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use securityRulesListSignalErrorFull() instead")
    void securityRulesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void securityRulesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
