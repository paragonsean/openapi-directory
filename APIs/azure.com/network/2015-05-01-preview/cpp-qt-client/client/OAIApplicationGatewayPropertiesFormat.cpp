/**
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationGatewayPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationGatewayPropertiesFormat::OAIApplicationGatewayPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationGatewayPropertiesFormat::OAIApplicationGatewayPropertiesFormat() {
    this->initializeModel();
}

OAIApplicationGatewayPropertiesFormat::~OAIApplicationGatewayPropertiesFormat() {}

void OAIApplicationGatewayPropertiesFormat::initializeModel() {

    m_backend_address_pools_isSet = false;
    m_backend_address_pools_isValid = false;

    m_backend_http_settings_collection_isSet = false;
    m_backend_http_settings_collection_isValid = false;

    m_frontend_ip_configurations_isSet = false;
    m_frontend_ip_configurations_isValid = false;

    m_frontend_ports_isSet = false;
    m_frontend_ports_isValid = false;

    m_gateway_ip_configurations_isSet = false;
    m_gateway_ip_configurations_isValid = false;

    m_http_listeners_isSet = false;
    m_http_listeners_isValid = false;

    m_operational_state_isSet = false;
    m_operational_state_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_request_routing_rules_isSet = false;
    m_request_routing_rules_isValid = false;

    m_resource_guid_isSet = false;
    m_resource_guid_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_ssl_certificates_isSet = false;
    m_ssl_certificates_isValid = false;
}

void OAIApplicationGatewayPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationGatewayPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_backend_address_pools_isValid = ::OpenAPI::fromJsonValue(m_backend_address_pools, json[QString("backendAddressPools")]);
    m_backend_address_pools_isSet = !json[QString("backendAddressPools")].isNull() && m_backend_address_pools_isValid;

    m_backend_http_settings_collection_isValid = ::OpenAPI::fromJsonValue(m_backend_http_settings_collection, json[QString("backendHttpSettingsCollection")]);
    m_backend_http_settings_collection_isSet = !json[QString("backendHttpSettingsCollection")].isNull() && m_backend_http_settings_collection_isValid;

    m_frontend_ip_configurations_isValid = ::OpenAPI::fromJsonValue(m_frontend_ip_configurations, json[QString("frontendIPConfigurations")]);
    m_frontend_ip_configurations_isSet = !json[QString("frontendIPConfigurations")].isNull() && m_frontend_ip_configurations_isValid;

    m_frontend_ports_isValid = ::OpenAPI::fromJsonValue(m_frontend_ports, json[QString("frontendPorts")]);
    m_frontend_ports_isSet = !json[QString("frontendPorts")].isNull() && m_frontend_ports_isValid;

    m_gateway_ip_configurations_isValid = ::OpenAPI::fromJsonValue(m_gateway_ip_configurations, json[QString("gatewayIPConfigurations")]);
    m_gateway_ip_configurations_isSet = !json[QString("gatewayIPConfigurations")].isNull() && m_gateway_ip_configurations_isValid;

    m_http_listeners_isValid = ::OpenAPI::fromJsonValue(m_http_listeners, json[QString("httpListeners")]);
    m_http_listeners_isSet = !json[QString("httpListeners")].isNull() && m_http_listeners_isValid;

    m_operational_state_isValid = ::OpenAPI::fromJsonValue(m_operational_state, json[QString("operationalState")]);
    m_operational_state_isSet = !json[QString("operationalState")].isNull() && m_operational_state_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_request_routing_rules_isValid = ::OpenAPI::fromJsonValue(m_request_routing_rules, json[QString("requestRoutingRules")]);
    m_request_routing_rules_isSet = !json[QString("requestRoutingRules")].isNull() && m_request_routing_rules_isValid;

    m_resource_guid_isValid = ::OpenAPI::fromJsonValue(m_resource_guid, json[QString("resourceGuid")]);
    m_resource_guid_isSet = !json[QString("resourceGuid")].isNull() && m_resource_guid_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_ssl_certificates_isValid = ::OpenAPI::fromJsonValue(m_ssl_certificates, json[QString("sslCertificates")]);
    m_ssl_certificates_isSet = !json[QString("sslCertificates")].isNull() && m_ssl_certificates_isValid;
}

QString OAIApplicationGatewayPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationGatewayPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_address_pools.size() > 0) {
        obj.insert(QString("backendAddressPools"), ::OpenAPI::toJsonValue(m_backend_address_pools));
    }
    if (m_backend_http_settings_collection.size() > 0) {
        obj.insert(QString("backendHttpSettingsCollection"), ::OpenAPI::toJsonValue(m_backend_http_settings_collection));
    }
    if (m_frontend_ip_configurations.size() > 0) {
        obj.insert(QString("frontendIPConfigurations"), ::OpenAPI::toJsonValue(m_frontend_ip_configurations));
    }
    if (m_frontend_ports.size() > 0) {
        obj.insert(QString("frontendPorts"), ::OpenAPI::toJsonValue(m_frontend_ports));
    }
    if (m_gateway_ip_configurations.size() > 0) {
        obj.insert(QString("gatewayIPConfigurations"), ::OpenAPI::toJsonValue(m_gateway_ip_configurations));
    }
    if (m_http_listeners.size() > 0) {
        obj.insert(QString("httpListeners"), ::OpenAPI::toJsonValue(m_http_listeners));
    }
    if (m_operational_state_isSet) {
        obj.insert(QString("operationalState"), ::OpenAPI::toJsonValue(m_operational_state));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_request_routing_rules.size() > 0) {
        obj.insert(QString("requestRoutingRules"), ::OpenAPI::toJsonValue(m_request_routing_rules));
    }
    if (m_resource_guid_isSet) {
        obj.insert(QString("resourceGuid"), ::OpenAPI::toJsonValue(m_resource_guid));
    }
    if (m_sku.isSet()) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_ssl_certificates.size() > 0) {
        obj.insert(QString("sslCertificates"), ::OpenAPI::toJsonValue(m_ssl_certificates));
    }
    return obj;
}

QList<OAIApplicationGatewayBackendAddressPool> OAIApplicationGatewayPropertiesFormat::getBackendAddressPools() const {
    return m_backend_address_pools;
}
void OAIApplicationGatewayPropertiesFormat::setBackendAddressPools(const QList<OAIApplicationGatewayBackendAddressPool> &backend_address_pools) {
    m_backend_address_pools = backend_address_pools;
    m_backend_address_pools_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_backend_address_pools_Set() const{
    return m_backend_address_pools_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_backend_address_pools_Valid() const{
    return m_backend_address_pools_isValid;
}

QList<OAIApplicationGatewayBackendHttpSettings> OAIApplicationGatewayPropertiesFormat::getBackendHttpSettingsCollection() const {
    return m_backend_http_settings_collection;
}
void OAIApplicationGatewayPropertiesFormat::setBackendHttpSettingsCollection(const QList<OAIApplicationGatewayBackendHttpSettings> &backend_http_settings_collection) {
    m_backend_http_settings_collection = backend_http_settings_collection;
    m_backend_http_settings_collection_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_backend_http_settings_collection_Set() const{
    return m_backend_http_settings_collection_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_backend_http_settings_collection_Valid() const{
    return m_backend_http_settings_collection_isValid;
}

QList<OAIApplicationGatewayFrontendIPConfiguration> OAIApplicationGatewayPropertiesFormat::getFrontendIpConfigurations() const {
    return m_frontend_ip_configurations;
}
void OAIApplicationGatewayPropertiesFormat::setFrontendIpConfigurations(const QList<OAIApplicationGatewayFrontendIPConfiguration> &frontend_ip_configurations) {
    m_frontend_ip_configurations = frontend_ip_configurations;
    m_frontend_ip_configurations_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_frontend_ip_configurations_Set() const{
    return m_frontend_ip_configurations_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_frontend_ip_configurations_Valid() const{
    return m_frontend_ip_configurations_isValid;
}

QList<OAIApplicationGatewayFrontendPort> OAIApplicationGatewayPropertiesFormat::getFrontendPorts() const {
    return m_frontend_ports;
}
void OAIApplicationGatewayPropertiesFormat::setFrontendPorts(const QList<OAIApplicationGatewayFrontendPort> &frontend_ports) {
    m_frontend_ports = frontend_ports;
    m_frontend_ports_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_frontend_ports_Set() const{
    return m_frontend_ports_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_frontend_ports_Valid() const{
    return m_frontend_ports_isValid;
}

QList<OAIApplicationGatewayIPConfiguration> OAIApplicationGatewayPropertiesFormat::getGatewayIpConfigurations() const {
    return m_gateway_ip_configurations;
}
void OAIApplicationGatewayPropertiesFormat::setGatewayIpConfigurations(const QList<OAIApplicationGatewayIPConfiguration> &gateway_ip_configurations) {
    m_gateway_ip_configurations = gateway_ip_configurations;
    m_gateway_ip_configurations_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_gateway_ip_configurations_Set() const{
    return m_gateway_ip_configurations_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_gateway_ip_configurations_Valid() const{
    return m_gateway_ip_configurations_isValid;
}

QList<OAIApplicationGatewayHttpListener> OAIApplicationGatewayPropertiesFormat::getHttpListeners() const {
    return m_http_listeners;
}
void OAIApplicationGatewayPropertiesFormat::setHttpListeners(const QList<OAIApplicationGatewayHttpListener> &http_listeners) {
    m_http_listeners = http_listeners;
    m_http_listeners_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_http_listeners_Set() const{
    return m_http_listeners_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_http_listeners_Valid() const{
    return m_http_listeners_isValid;
}

QString OAIApplicationGatewayPropertiesFormat::getOperationalState() const {
    return m_operational_state;
}
void OAIApplicationGatewayPropertiesFormat::setOperationalState(const QString &operational_state) {
    m_operational_state = operational_state;
    m_operational_state_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_operational_state_Set() const{
    return m_operational_state_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_operational_state_Valid() const{
    return m_operational_state_isValid;
}

QString OAIApplicationGatewayPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIApplicationGatewayPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QList<OAIApplicationGatewayRequestRoutingRule> OAIApplicationGatewayPropertiesFormat::getRequestRoutingRules() const {
    return m_request_routing_rules;
}
void OAIApplicationGatewayPropertiesFormat::setRequestRoutingRules(const QList<OAIApplicationGatewayRequestRoutingRule> &request_routing_rules) {
    m_request_routing_rules = request_routing_rules;
    m_request_routing_rules_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_request_routing_rules_Set() const{
    return m_request_routing_rules_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_request_routing_rules_Valid() const{
    return m_request_routing_rules_isValid;
}

QString OAIApplicationGatewayPropertiesFormat::getResourceGuid() const {
    return m_resource_guid;
}
void OAIApplicationGatewayPropertiesFormat::setResourceGuid(const QString &resource_guid) {
    m_resource_guid = resource_guid;
    m_resource_guid_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_resource_guid_Set() const{
    return m_resource_guid_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_resource_guid_Valid() const{
    return m_resource_guid_isValid;
}

OAIApplicationGatewaySku OAIApplicationGatewayPropertiesFormat::getSku() const {
    return m_sku;
}
void OAIApplicationGatewayPropertiesFormat::setSku(const OAIApplicationGatewaySku &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_sku_Valid() const{
    return m_sku_isValid;
}

QList<OAIApplicationGatewaySslCertificate> OAIApplicationGatewayPropertiesFormat::getSslCertificates() const {
    return m_ssl_certificates;
}
void OAIApplicationGatewayPropertiesFormat::setSslCertificates(const QList<OAIApplicationGatewaySslCertificate> &ssl_certificates) {
    m_ssl_certificates = ssl_certificates;
    m_ssl_certificates_isSet = true;
}

bool OAIApplicationGatewayPropertiesFormat::is_ssl_certificates_Set() const{
    return m_ssl_certificates_isSet;
}

bool OAIApplicationGatewayPropertiesFormat::is_ssl_certificates_Valid() const{
    return m_ssl_certificates_isValid;
}

bool OAIApplicationGatewayPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_address_pools.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_http_settings_collection.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend_ip_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_frontend_ports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_ip_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_listeners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operational_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_routing_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_certificates.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationGatewayPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
