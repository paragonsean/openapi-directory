# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.express_route_circuit_authorization import ExpressRouteCircuitAuthorization
from openapi_server.models.express_route_circuit_peering import ExpressRouteCircuitPeering
from openapi_server.models.express_route_circuit_service_provider_properties import ExpressRouteCircuitServiceProviderProperties
from openapi_server import util


class ExpressRouteCircuitPropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorizations: List[ExpressRouteCircuitAuthorization]=None, circuit_provisioning_state: str=None, peerings: List[ExpressRouteCircuitPeering]=None, provisioning_state: str=None, service_key: str=None, service_provider_notes: str=None, service_provider_properties: ExpressRouteCircuitServiceProviderProperties=None, service_provider_provisioning_state: str=None):
        """ExpressRouteCircuitPropertiesFormat - a model defined in OpenAPI

        :param authorizations: The authorizations of this ExpressRouteCircuitPropertiesFormat.
        :param circuit_provisioning_state: The circuit_provisioning_state of this ExpressRouteCircuitPropertiesFormat.
        :param peerings: The peerings of this ExpressRouteCircuitPropertiesFormat.
        :param provisioning_state: The provisioning_state of this ExpressRouteCircuitPropertiesFormat.
        :param service_key: The service_key of this ExpressRouteCircuitPropertiesFormat.
        :param service_provider_notes: The service_provider_notes of this ExpressRouteCircuitPropertiesFormat.
        :param service_provider_properties: The service_provider_properties of this ExpressRouteCircuitPropertiesFormat.
        :param service_provider_provisioning_state: The service_provider_provisioning_state of this ExpressRouteCircuitPropertiesFormat.
        """
        self.openapi_types = {
            'authorizations': List[ExpressRouteCircuitAuthorization],
            'circuit_provisioning_state': str,
            'peerings': List[ExpressRouteCircuitPeering],
            'provisioning_state': str,
            'service_key': str,
            'service_provider_notes': str,
            'service_provider_properties': ExpressRouteCircuitServiceProviderProperties,
            'service_provider_provisioning_state': str
        }

        self.attribute_map = {
            'authorizations': 'authorizations',
            'circuit_provisioning_state': 'circuitProvisioningState',
            'peerings': 'peerings',
            'provisioning_state': 'provisioningState',
            'service_key': 'serviceKey',
            'service_provider_notes': 'serviceProviderNotes',
            'service_provider_properties': 'serviceProviderProperties',
            'service_provider_provisioning_state': 'serviceProviderProvisioningState'
        }

        self._authorizations = authorizations
        self._circuit_provisioning_state = circuit_provisioning_state
        self._peerings = peerings
        self._provisioning_state = provisioning_state
        self._service_key = service_key
        self._service_provider_notes = service_provider_notes
        self._service_provider_properties = service_provider_properties
        self._service_provider_provisioning_state = service_provider_provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpressRouteCircuitPropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpressRouteCircuitPropertiesFormat of this ExpressRouteCircuitPropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorizations(self):
        """Gets the authorizations of this ExpressRouteCircuitPropertiesFormat.

        Gets or sets list of authorizations

        :return: The authorizations of this ExpressRouteCircuitPropertiesFormat.
        :rtype: List[ExpressRouteCircuitAuthorization]
        """
        return self._authorizations

    @authorizations.setter
    def authorizations(self, authorizations):
        """Sets the authorizations of this ExpressRouteCircuitPropertiesFormat.

        Gets or sets list of authorizations

        :param authorizations: The authorizations of this ExpressRouteCircuitPropertiesFormat.
        :type authorizations: List[ExpressRouteCircuitAuthorization]
        """

        self._authorizations = authorizations

    @property
    def circuit_provisioning_state(self):
        """Gets the circuit_provisioning_state of this ExpressRouteCircuitPropertiesFormat.

        Gets or sets CircuitProvisioningState state of the resource 

        :return: The circuit_provisioning_state of this ExpressRouteCircuitPropertiesFormat.
        :rtype: str
        """
        return self._circuit_provisioning_state

    @circuit_provisioning_state.setter
    def circuit_provisioning_state(self, circuit_provisioning_state):
        """Sets the circuit_provisioning_state of this ExpressRouteCircuitPropertiesFormat.

        Gets or sets CircuitProvisioningState state of the resource 

        :param circuit_provisioning_state: The circuit_provisioning_state of this ExpressRouteCircuitPropertiesFormat.
        :type circuit_provisioning_state: str
        """

        self._circuit_provisioning_state = circuit_provisioning_state

    @property
    def peerings(self):
        """Gets the peerings of this ExpressRouteCircuitPropertiesFormat.

        Gets or sets list of peerings

        :return: The peerings of this ExpressRouteCircuitPropertiesFormat.
        :rtype: List[ExpressRouteCircuitPeering]
        """
        return self._peerings

    @peerings.setter
    def peerings(self, peerings):
        """Sets the peerings of this ExpressRouteCircuitPropertiesFormat.

        Gets or sets list of peerings

        :param peerings: The peerings of this ExpressRouteCircuitPropertiesFormat.
        :type peerings: List[ExpressRouteCircuitPeering]
        """

        self._peerings = peerings

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ExpressRouteCircuitPropertiesFormat.

        Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed

        :return: The provisioning_state of this ExpressRouteCircuitPropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ExpressRouteCircuitPropertiesFormat.

        Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed

        :param provisioning_state: The provisioning_state of this ExpressRouteCircuitPropertiesFormat.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def service_key(self):
        """Gets the service_key of this ExpressRouteCircuitPropertiesFormat.

        Gets or sets ServiceKey

        :return: The service_key of this ExpressRouteCircuitPropertiesFormat.
        :rtype: str
        """
        return self._service_key

    @service_key.setter
    def service_key(self, service_key):
        """Sets the service_key of this ExpressRouteCircuitPropertiesFormat.

        Gets or sets ServiceKey

        :param service_key: The service_key of this ExpressRouteCircuitPropertiesFormat.
        :type service_key: str
        """

        self._service_key = service_key

    @property
    def service_provider_notes(self):
        """Gets the service_provider_notes of this ExpressRouteCircuitPropertiesFormat.

        Gets or sets ServiceProviderNotes

        :return: The service_provider_notes of this ExpressRouteCircuitPropertiesFormat.
        :rtype: str
        """
        return self._service_provider_notes

    @service_provider_notes.setter
    def service_provider_notes(self, service_provider_notes):
        """Sets the service_provider_notes of this ExpressRouteCircuitPropertiesFormat.

        Gets or sets ServiceProviderNotes

        :param service_provider_notes: The service_provider_notes of this ExpressRouteCircuitPropertiesFormat.
        :type service_provider_notes: str
        """

        self._service_provider_notes = service_provider_notes

    @property
    def service_provider_properties(self):
        """Gets the service_provider_properties of this ExpressRouteCircuitPropertiesFormat.


        :return: The service_provider_properties of this ExpressRouteCircuitPropertiesFormat.
        :rtype: ExpressRouteCircuitServiceProviderProperties
        """
        return self._service_provider_properties

    @service_provider_properties.setter
    def service_provider_properties(self, service_provider_properties):
        """Sets the service_provider_properties of this ExpressRouteCircuitPropertiesFormat.


        :param service_provider_properties: The service_provider_properties of this ExpressRouteCircuitPropertiesFormat.
        :type service_provider_properties: ExpressRouteCircuitServiceProviderProperties
        """

        self._service_provider_properties = service_provider_properties

    @property
    def service_provider_provisioning_state(self):
        """Gets the service_provider_provisioning_state of this ExpressRouteCircuitPropertiesFormat.

        Gets or sets ServiceProviderProvisioningState state of the resource 

        :return: The service_provider_provisioning_state of this ExpressRouteCircuitPropertiesFormat.
        :rtype: str
        """
        return self._service_provider_provisioning_state

    @service_provider_provisioning_state.setter
    def service_provider_provisioning_state(self, service_provider_provisioning_state):
        """Sets the service_provider_provisioning_state of this ExpressRouteCircuitPropertiesFormat.

        Gets or sets ServiceProviderProvisioningState state of the resource 

        :param service_provider_provisioning_state: The service_provider_provisioning_state of this ExpressRouteCircuitPropertiesFormat.
        :type service_provider_provisioning_state: str
        """
        allowed_values = ["NotProvisioned", "Provisioning", "Provisioned", "Deprovisioning"]  # noqa: E501
        if service_provider_provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `service_provider_provisioning_state` ({0}), must be one of {1}"
                .format(service_provider_provisioning_state, allowed_values)
            )

        self._service_provider_provisioning_state = service_provider_provisioning_state
