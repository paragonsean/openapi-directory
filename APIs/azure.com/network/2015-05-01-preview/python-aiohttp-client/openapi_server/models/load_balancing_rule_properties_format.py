# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sub_resource import SubResource
from openapi_server import util


class LoadBalancingRulePropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backend_address_pool: SubResource=None, backend_port: int=None, enable_floating_ip: bool=None, frontend_ip_configuration: SubResource=None, frontend_port: int=None, idle_timeout_in_minutes: int=None, load_distribution: str=None, probe: SubResource=None, protocol: str=None, provisioning_state: str=None):
        """LoadBalancingRulePropertiesFormat - a model defined in OpenAPI

        :param backend_address_pool: The backend_address_pool of this LoadBalancingRulePropertiesFormat.
        :param backend_port: The backend_port of this LoadBalancingRulePropertiesFormat.
        :param enable_floating_ip: The enable_floating_ip of this LoadBalancingRulePropertiesFormat.
        :param frontend_ip_configuration: The frontend_ip_configuration of this LoadBalancingRulePropertiesFormat.
        :param frontend_port: The frontend_port of this LoadBalancingRulePropertiesFormat.
        :param idle_timeout_in_minutes: The idle_timeout_in_minutes of this LoadBalancingRulePropertiesFormat.
        :param load_distribution: The load_distribution of this LoadBalancingRulePropertiesFormat.
        :param probe: The probe of this LoadBalancingRulePropertiesFormat.
        :param protocol: The protocol of this LoadBalancingRulePropertiesFormat.
        :param provisioning_state: The provisioning_state of this LoadBalancingRulePropertiesFormat.
        """
        self.openapi_types = {
            'backend_address_pool': SubResource,
            'backend_port': int,
            'enable_floating_ip': bool,
            'frontend_ip_configuration': SubResource,
            'frontend_port': int,
            'idle_timeout_in_minutes': int,
            'load_distribution': str,
            'probe': SubResource,
            'protocol': str,
            'provisioning_state': str
        }

        self.attribute_map = {
            'backend_address_pool': 'backendAddressPool',
            'backend_port': 'backendPort',
            'enable_floating_ip': 'enableFloatingIP',
            'frontend_ip_configuration': 'frontendIPConfiguration',
            'frontend_port': 'frontendPort',
            'idle_timeout_in_minutes': 'idleTimeoutInMinutes',
            'load_distribution': 'loadDistribution',
            'probe': 'probe',
            'protocol': 'protocol',
            'provisioning_state': 'provisioningState'
        }

        self._backend_address_pool = backend_address_pool
        self._backend_port = backend_port
        self._enable_floating_ip = enable_floating_ip
        self._frontend_ip_configuration = frontend_ip_configuration
        self._frontend_port = frontend_port
        self._idle_timeout_in_minutes = idle_timeout_in_minutes
        self._load_distribution = load_distribution
        self._probe = probe
        self._protocol = protocol
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoadBalancingRulePropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoadBalancingRulePropertiesFormat of this LoadBalancingRulePropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backend_address_pool(self):
        """Gets the backend_address_pool of this LoadBalancingRulePropertiesFormat.


        :return: The backend_address_pool of this LoadBalancingRulePropertiesFormat.
        :rtype: SubResource
        """
        return self._backend_address_pool

    @backend_address_pool.setter
    def backend_address_pool(self, backend_address_pool):
        """Sets the backend_address_pool of this LoadBalancingRulePropertiesFormat.


        :param backend_address_pool: The backend_address_pool of this LoadBalancingRulePropertiesFormat.
        :type backend_address_pool: SubResource
        """
        if backend_address_pool is None:
            raise ValueError("Invalid value for `backend_address_pool`, must not be `None`")

        self._backend_address_pool = backend_address_pool

    @property
    def backend_port(self):
        """Gets the backend_port of this LoadBalancingRulePropertiesFormat.

        Gets or sets a port used for internal connections on the endpoint. The localPort attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where a role must communicate to an internal component on a port that is different from the one that is exposed externally. If not specified, the value of localPort is the same as the port attribute. Set the value of localPort to '*' to automatically assign an unallocated port that is discoverable using the runtime API

        :return: The backend_port of this LoadBalancingRulePropertiesFormat.
        :rtype: int
        """
        return self._backend_port

    @backend_port.setter
    def backend_port(self, backend_port):
        """Sets the backend_port of this LoadBalancingRulePropertiesFormat.

        Gets or sets a port used for internal connections on the endpoint. The localPort attribute maps the eternal port of the endpoint to an internal port on a role. This is useful in scenarios where a role must communicate to an internal component on a port that is different from the one that is exposed externally. If not specified, the value of localPort is the same as the port attribute. Set the value of localPort to '*' to automatically assign an unallocated port that is discoverable using the runtime API

        :param backend_port: The backend_port of this LoadBalancingRulePropertiesFormat.
        :type backend_port: int
        """

        self._backend_port = backend_port

    @property
    def enable_floating_ip(self):
        """Gets the enable_floating_ip of this LoadBalancingRulePropertiesFormat.

        Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn availability Group. This setting is required when using the SQL Always ON availability Groups in SQL server. This setting can't be changed after you create the endpoint

        :return: The enable_floating_ip of this LoadBalancingRulePropertiesFormat.
        :rtype: bool
        """
        return self._enable_floating_ip

    @enable_floating_ip.setter
    def enable_floating_ip(self, enable_floating_ip):
        """Sets the enable_floating_ip of this LoadBalancingRulePropertiesFormat.

        Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn availability Group. This setting is required when using the SQL Always ON availability Groups in SQL server. This setting can't be changed after you create the endpoint

        :param enable_floating_ip: The enable_floating_ip of this LoadBalancingRulePropertiesFormat.
        :type enable_floating_ip: bool
        """
        if enable_floating_ip is None:
            raise ValueError("Invalid value for `enable_floating_ip`, must not be `None`")

        self._enable_floating_ip = enable_floating_ip

    @property
    def frontend_ip_configuration(self):
        """Gets the frontend_ip_configuration of this LoadBalancingRulePropertiesFormat.


        :return: The frontend_ip_configuration of this LoadBalancingRulePropertiesFormat.
        :rtype: SubResource
        """
        return self._frontend_ip_configuration

    @frontend_ip_configuration.setter
    def frontend_ip_configuration(self, frontend_ip_configuration):
        """Sets the frontend_ip_configuration of this LoadBalancingRulePropertiesFormat.


        :param frontend_ip_configuration: The frontend_ip_configuration of this LoadBalancingRulePropertiesFormat.
        :type frontend_ip_configuration: SubResource
        """

        self._frontend_ip_configuration = frontend_ip_configuration

    @property
    def frontend_port(self):
        """Gets the frontend_port of this LoadBalancingRulePropertiesFormat.

        Gets or sets the port for the external endpoint. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive

        :return: The frontend_port of this LoadBalancingRulePropertiesFormat.
        :rtype: int
        """
        return self._frontend_port

    @frontend_port.setter
    def frontend_port(self, frontend_port):
        """Sets the frontend_port of this LoadBalancingRulePropertiesFormat.

        Gets or sets the port for the external endpoint. You can specify any port number you choose, but the port numbers specified for each role in the service must be unique. Possible values range between 1 and 65535, inclusive

        :param frontend_port: The frontend_port of this LoadBalancingRulePropertiesFormat.
        :type frontend_port: int
        """
        if frontend_port is None:
            raise ValueError("Invalid value for `frontend_port`, must not be `None`")

        self._frontend_port = frontend_port

    @property
    def idle_timeout_in_minutes(self):
        """Gets the idle_timeout_in_minutes of this LoadBalancingRulePropertiesFormat.

        Gets or sets the timeout for the Tcp idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to Tcp

        :return: The idle_timeout_in_minutes of this LoadBalancingRulePropertiesFormat.
        :rtype: int
        """
        return self._idle_timeout_in_minutes

    @idle_timeout_in_minutes.setter
    def idle_timeout_in_minutes(self, idle_timeout_in_minutes):
        """Sets the idle_timeout_in_minutes of this LoadBalancingRulePropertiesFormat.

        Gets or sets the timeout for the Tcp idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes. This element is only used when the protocol is set to Tcp

        :param idle_timeout_in_minutes: The idle_timeout_in_minutes of this LoadBalancingRulePropertiesFormat.
        :type idle_timeout_in_minutes: int
        """

        self._idle_timeout_in_minutes = idle_timeout_in_minutes

    @property
    def load_distribution(self):
        """Gets the load_distribution of this LoadBalancingRulePropertiesFormat.

        Gets or sets the load distribution policy for this rule

        :return: The load_distribution of this LoadBalancingRulePropertiesFormat.
        :rtype: str
        """
        return self._load_distribution

    @load_distribution.setter
    def load_distribution(self, load_distribution):
        """Sets the load_distribution of this LoadBalancingRulePropertiesFormat.

        Gets or sets the load distribution policy for this rule

        :param load_distribution: The load_distribution of this LoadBalancingRulePropertiesFormat.
        :type load_distribution: str
        """
        allowed_values = ["Default", "SourceIP", "SourceIPProtocol"]  # noqa: E501
        if load_distribution not in allowed_values:
            raise ValueError(
                "Invalid value for `load_distribution` ({0}), must be one of {1}"
                .format(load_distribution, allowed_values)
            )

        self._load_distribution = load_distribution

    @property
    def probe(self):
        """Gets the probe of this LoadBalancingRulePropertiesFormat.


        :return: The probe of this LoadBalancingRulePropertiesFormat.
        :rtype: SubResource
        """
        return self._probe

    @probe.setter
    def probe(self, probe):
        """Sets the probe of this LoadBalancingRulePropertiesFormat.


        :param probe: The probe of this LoadBalancingRulePropertiesFormat.
        :type probe: SubResource
        """

        self._probe = probe

    @property
    def protocol(self):
        """Gets the protocol of this LoadBalancingRulePropertiesFormat.

        Gets or sets the transport protocol for the external endpoint. Possible values are Udp or Tcp

        :return: The protocol of this LoadBalancingRulePropertiesFormat.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this LoadBalancingRulePropertiesFormat.

        Gets or sets the transport protocol for the external endpoint. Possible values are Udp or Tcp

        :param protocol: The protocol of this LoadBalancingRulePropertiesFormat.
        :type protocol: str
        """
        allowed_values = ["Udp", "Tcp"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this LoadBalancingRulePropertiesFormat.

        Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed

        :return: The provisioning_state of this LoadBalancingRulePropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this LoadBalancingRulePropertiesFormat.

        Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed

        :param provisioning_state: The provisioning_state of this LoadBalancingRulePropertiesFormat.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state
