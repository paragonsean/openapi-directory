# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sub_resource import SubResource
from openapi_server import util


class ApplicationGatewayRequestRoutingRulePropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backend_address_pool: SubResource=None, backend_http_settings: SubResource=None, http_listener: SubResource=None, provisioning_state: str=None, rule_type: str=None):
        """ApplicationGatewayRequestRoutingRulePropertiesFormat - a model defined in OpenAPI

        :param backend_address_pool: The backend_address_pool of this ApplicationGatewayRequestRoutingRulePropertiesFormat.
        :param backend_http_settings: The backend_http_settings of this ApplicationGatewayRequestRoutingRulePropertiesFormat.
        :param http_listener: The http_listener of this ApplicationGatewayRequestRoutingRulePropertiesFormat.
        :param provisioning_state: The provisioning_state of this ApplicationGatewayRequestRoutingRulePropertiesFormat.
        :param rule_type: The rule_type of this ApplicationGatewayRequestRoutingRulePropertiesFormat.
        """
        self.openapi_types = {
            'backend_address_pool': SubResource,
            'backend_http_settings': SubResource,
            'http_listener': SubResource,
            'provisioning_state': str,
            'rule_type': str
        }

        self.attribute_map = {
            'backend_address_pool': 'backendAddressPool',
            'backend_http_settings': 'backendHttpSettings',
            'http_listener': 'httpListener',
            'provisioning_state': 'provisioningState',
            'rule_type': 'ruleType'
        }

        self._backend_address_pool = backend_address_pool
        self._backend_http_settings = backend_http_settings
        self._http_listener = http_listener
        self._provisioning_state = provisioning_state
        self._rule_type = rule_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationGatewayRequestRoutingRulePropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationGatewayRequestRoutingRulePropertiesFormat of this ApplicationGatewayRequestRoutingRulePropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backend_address_pool(self):
        """Gets the backend_address_pool of this ApplicationGatewayRequestRoutingRulePropertiesFormat.


        :return: The backend_address_pool of this ApplicationGatewayRequestRoutingRulePropertiesFormat.
        :rtype: SubResource
        """
        return self._backend_address_pool

    @backend_address_pool.setter
    def backend_address_pool(self, backend_address_pool):
        """Sets the backend_address_pool of this ApplicationGatewayRequestRoutingRulePropertiesFormat.


        :param backend_address_pool: The backend_address_pool of this ApplicationGatewayRequestRoutingRulePropertiesFormat.
        :type backend_address_pool: SubResource
        """

        self._backend_address_pool = backend_address_pool

    @property
    def backend_http_settings(self):
        """Gets the backend_http_settings of this ApplicationGatewayRequestRoutingRulePropertiesFormat.


        :return: The backend_http_settings of this ApplicationGatewayRequestRoutingRulePropertiesFormat.
        :rtype: SubResource
        """
        return self._backend_http_settings

    @backend_http_settings.setter
    def backend_http_settings(self, backend_http_settings):
        """Sets the backend_http_settings of this ApplicationGatewayRequestRoutingRulePropertiesFormat.


        :param backend_http_settings: The backend_http_settings of this ApplicationGatewayRequestRoutingRulePropertiesFormat.
        :type backend_http_settings: SubResource
        """

        self._backend_http_settings = backend_http_settings

    @property
    def http_listener(self):
        """Gets the http_listener of this ApplicationGatewayRequestRoutingRulePropertiesFormat.


        :return: The http_listener of this ApplicationGatewayRequestRoutingRulePropertiesFormat.
        :rtype: SubResource
        """
        return self._http_listener

    @http_listener.setter
    def http_listener(self, http_listener):
        """Sets the http_listener of this ApplicationGatewayRequestRoutingRulePropertiesFormat.


        :param http_listener: The http_listener of this ApplicationGatewayRequestRoutingRulePropertiesFormat.
        :type http_listener: SubResource
        """

        self._http_listener = http_listener

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ApplicationGatewayRequestRoutingRulePropertiesFormat.

        Gets or sets Provisioning state of the request routing rule resource Updating/Deleting/Failed

        :return: The provisioning_state of this ApplicationGatewayRequestRoutingRulePropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ApplicationGatewayRequestRoutingRulePropertiesFormat.

        Gets or sets Provisioning state of the request routing rule resource Updating/Deleting/Failed

        :param provisioning_state: The provisioning_state of this ApplicationGatewayRequestRoutingRulePropertiesFormat.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def rule_type(self):
        """Gets the rule_type of this ApplicationGatewayRequestRoutingRulePropertiesFormat.

        Gets or sets the rule type

        :return: The rule_type of this ApplicationGatewayRequestRoutingRulePropertiesFormat.
        :rtype: str
        """
        return self._rule_type

    @rule_type.setter
    def rule_type(self, rule_type):
        """Sets the rule_type of this ApplicationGatewayRequestRoutingRulePropertiesFormat.

        Gets or sets the rule type

        :param rule_type: The rule_type of this ApplicationGatewayRequestRoutingRulePropertiesFormat.
        :type rule_type: str
        """
        allowed_values = ["Basic"]  # noqa: E501
        if rule_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rule_type` ({0}), must be one of {1}"
                .format(rule_type, allowed_values)
            )

        self._rule_type = rule_type
