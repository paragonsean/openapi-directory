# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sub_resource import SubResource
from openapi_server import util


class SubnetPropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_prefix: str=None, ip_configurations: List[SubResource]=None, network_security_group: SubResource=None, provisioning_state: str=None, route_table: SubResource=None):
        """SubnetPropertiesFormat - a model defined in OpenAPI

        :param address_prefix: The address_prefix of this SubnetPropertiesFormat.
        :param ip_configurations: The ip_configurations of this SubnetPropertiesFormat.
        :param network_security_group: The network_security_group of this SubnetPropertiesFormat.
        :param provisioning_state: The provisioning_state of this SubnetPropertiesFormat.
        :param route_table: The route_table of this SubnetPropertiesFormat.
        """
        self.openapi_types = {
            'address_prefix': str,
            'ip_configurations': List[SubResource],
            'network_security_group': SubResource,
            'provisioning_state': str,
            'route_table': SubResource
        }

        self.attribute_map = {
            'address_prefix': 'addressPrefix',
            'ip_configurations': 'ipConfigurations',
            'network_security_group': 'networkSecurityGroup',
            'provisioning_state': 'provisioningState',
            'route_table': 'routeTable'
        }

        self._address_prefix = address_prefix
        self._ip_configurations = ip_configurations
        self._network_security_group = network_security_group
        self._provisioning_state = provisioning_state
        self._route_table = route_table

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubnetPropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubnetPropertiesFormat of this SubnetPropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_prefix(self):
        """Gets the address_prefix of this SubnetPropertiesFormat.

        Gets or sets Address prefix for the subnet.

        :return: The address_prefix of this SubnetPropertiesFormat.
        :rtype: str
        """
        return self._address_prefix

    @address_prefix.setter
    def address_prefix(self, address_prefix):
        """Sets the address_prefix of this SubnetPropertiesFormat.

        Gets or sets Address prefix for the subnet.

        :param address_prefix: The address_prefix of this SubnetPropertiesFormat.
        :type address_prefix: str
        """
        if address_prefix is None:
            raise ValueError("Invalid value for `address_prefix`, must not be `None`")

        self._address_prefix = address_prefix

    @property
    def ip_configurations(self):
        """Gets the ip_configurations of this SubnetPropertiesFormat.

        Gets array of references to the network interface IP configurations using subnet

        :return: The ip_configurations of this SubnetPropertiesFormat.
        :rtype: List[SubResource]
        """
        return self._ip_configurations

    @ip_configurations.setter
    def ip_configurations(self, ip_configurations):
        """Sets the ip_configurations of this SubnetPropertiesFormat.

        Gets array of references to the network interface IP configurations using subnet

        :param ip_configurations: The ip_configurations of this SubnetPropertiesFormat.
        :type ip_configurations: List[SubResource]
        """

        self._ip_configurations = ip_configurations

    @property
    def network_security_group(self):
        """Gets the network_security_group of this SubnetPropertiesFormat.


        :return: The network_security_group of this SubnetPropertiesFormat.
        :rtype: SubResource
        """
        return self._network_security_group

    @network_security_group.setter
    def network_security_group(self, network_security_group):
        """Sets the network_security_group of this SubnetPropertiesFormat.


        :param network_security_group: The network_security_group of this SubnetPropertiesFormat.
        :type network_security_group: SubResource
        """

        self._network_security_group = network_security_group

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this SubnetPropertiesFormat.

        Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed

        :return: The provisioning_state of this SubnetPropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this SubnetPropertiesFormat.

        Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed

        :param provisioning_state: The provisioning_state of this SubnetPropertiesFormat.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def route_table(self):
        """Gets the route_table of this SubnetPropertiesFormat.


        :return: The route_table of this SubnetPropertiesFormat.
        :rtype: SubResource
        """
        return self._route_table

    @route_table.setter
    def route_table(self, route_table):
        """Sets the route_table of this SubnetPropertiesFormat.


        :param route_table: The route_table of this SubnetPropertiesFormat.
        :type route_table: SubResource
        """

        self._route_table = route_table
