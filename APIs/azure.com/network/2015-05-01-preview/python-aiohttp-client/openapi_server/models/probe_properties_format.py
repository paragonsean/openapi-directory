# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sub_resource import SubResource
from openapi_server import util


class ProbePropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interval_in_seconds: int=None, load_balancing_rules: List[SubResource]=None, number_of_probes: int=None, port: int=None, protocol: str=None, provisioning_state: str=None, request_path: str=None):
        """ProbePropertiesFormat - a model defined in OpenAPI

        :param interval_in_seconds: The interval_in_seconds of this ProbePropertiesFormat.
        :param load_balancing_rules: The load_balancing_rules of this ProbePropertiesFormat.
        :param number_of_probes: The number_of_probes of this ProbePropertiesFormat.
        :param port: The port of this ProbePropertiesFormat.
        :param protocol: The protocol of this ProbePropertiesFormat.
        :param provisioning_state: The provisioning_state of this ProbePropertiesFormat.
        :param request_path: The request_path of this ProbePropertiesFormat.
        """
        self.openapi_types = {
            'interval_in_seconds': int,
            'load_balancing_rules': List[SubResource],
            'number_of_probes': int,
            'port': int,
            'protocol': str,
            'provisioning_state': str,
            'request_path': str
        }

        self.attribute_map = {
            'interval_in_seconds': 'intervalInSeconds',
            'load_balancing_rules': 'loadBalancingRules',
            'number_of_probes': 'numberOfProbes',
            'port': 'port',
            'protocol': 'protocol',
            'provisioning_state': 'provisioningState',
            'request_path': 'requestPath'
        }

        self._interval_in_seconds = interval_in_seconds
        self._load_balancing_rules = load_balancing_rules
        self._number_of_probes = number_of_probes
        self._port = port
        self._protocol = protocol
        self._provisioning_state = provisioning_state
        self._request_path = request_path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProbePropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProbePropertiesFormat of this ProbePropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interval_in_seconds(self):
        """Gets the interval_in_seconds of this ProbePropertiesFormat.

        Gets or sets the interval, in seconds, for how frequently to probe the endpoint for health status. Typically, the interval is slightly less than half the allocated timeout period (in seconds) which allows two full probes before taking the instance out of rotation. The default value is 15, the minimum value is 5

        :return: The interval_in_seconds of this ProbePropertiesFormat.
        :rtype: int
        """
        return self._interval_in_seconds

    @interval_in_seconds.setter
    def interval_in_seconds(self, interval_in_seconds):
        """Sets the interval_in_seconds of this ProbePropertiesFormat.

        Gets or sets the interval, in seconds, for how frequently to probe the endpoint for health status. Typically, the interval is slightly less than half the allocated timeout period (in seconds) which allows two full probes before taking the instance out of rotation. The default value is 15, the minimum value is 5

        :param interval_in_seconds: The interval_in_seconds of this ProbePropertiesFormat.
        :type interval_in_seconds: int
        """

        self._interval_in_seconds = interval_in_seconds

    @property
    def load_balancing_rules(self):
        """Gets the load_balancing_rules of this ProbePropertiesFormat.

        Gets Load balancer rules that use this probe

        :return: The load_balancing_rules of this ProbePropertiesFormat.
        :rtype: List[SubResource]
        """
        return self._load_balancing_rules

    @load_balancing_rules.setter
    def load_balancing_rules(self, load_balancing_rules):
        """Sets the load_balancing_rules of this ProbePropertiesFormat.

        Gets Load balancer rules that use this probe

        :param load_balancing_rules: The load_balancing_rules of this ProbePropertiesFormat.
        :type load_balancing_rules: List[SubResource]
        """

        self._load_balancing_rules = load_balancing_rules

    @property
    def number_of_probes(self):
        """Gets the number_of_probes of this ProbePropertiesFormat.

        Gets or sets the number of probes where if no response, will result in stopping further traffic from being delivered to the endpoint. This values allows endpoints to be taken out of rotation faster or slower than the typical times used in Azure. 

        :return: The number_of_probes of this ProbePropertiesFormat.
        :rtype: int
        """
        return self._number_of_probes

    @number_of_probes.setter
    def number_of_probes(self, number_of_probes):
        """Sets the number_of_probes of this ProbePropertiesFormat.

        Gets or sets the number of probes where if no response, will result in stopping further traffic from being delivered to the endpoint. This values allows endpoints to be taken out of rotation faster or slower than the typical times used in Azure. 

        :param number_of_probes: The number_of_probes of this ProbePropertiesFormat.
        :type number_of_probes: int
        """

        self._number_of_probes = number_of_probes

    @property
    def port(self):
        """Gets the port of this ProbePropertiesFormat.

        Gets or sets Port for communicating the probe. Possible values range from 1 to 65535, inclusive.

        :return: The port of this ProbePropertiesFormat.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this ProbePropertiesFormat.

        Gets or sets Port for communicating the probe. Possible values range from 1 to 65535, inclusive.

        :param port: The port of this ProbePropertiesFormat.
        :type port: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this ProbePropertiesFormat.

        Gets or sets the protocol of the end point. Possible values are http pr Tcp. If Tcp is specified, a received ACK is required for the probe to be successful. If http is specified,a 200 OK response from the specifies URI is required for the probe to be successful

        :return: The protocol of this ProbePropertiesFormat.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ProbePropertiesFormat.

        Gets or sets the protocol of the end point. Possible values are http pr Tcp. If Tcp is specified, a received ACK is required for the probe to be successful. If http is specified,a 200 OK response from the specifies URI is required for the probe to be successful

        :param protocol: The protocol of this ProbePropertiesFormat.
        :type protocol: str
        """
        allowed_values = ["Http", "Tcp"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ProbePropertiesFormat.

        Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed

        :return: The provisioning_state of this ProbePropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ProbePropertiesFormat.

        Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed

        :param provisioning_state: The provisioning_state of this ProbePropertiesFormat.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def request_path(self):
        """Gets the request_path of this ProbePropertiesFormat.

        Gets or sets the URI used for requesting health status from the VM. Path is required if a protocol is set to http. Otherwise, it is not allowed. There is no default value

        :return: The request_path of this ProbePropertiesFormat.
        :rtype: str
        """
        return self._request_path

    @request_path.setter
    def request_path(self, request_path):
        """Sets the request_path of this ProbePropertiesFormat.

        Gets or sets the URI used for requesting health status from the VM. Path is required if a protocol is set to http. Otherwise, it is not allowed. There is no default value

        :param request_path: The request_path of this ProbePropertiesFormat.
        :type request_path: str
        """

        self._request_path = request_path
