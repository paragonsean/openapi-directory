/*
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Route resource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:56.955675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RoutePropertiesFormat {
  public static final String SERIALIZED_NAME_ADDRESS_PREFIX = "addressPrefix";
  @SerializedName(SERIALIZED_NAME_ADDRESS_PREFIX)
  private String addressPrefix;

  public static final String SERIALIZED_NAME_NEXT_HOP_IP_ADDRESS = "nextHopIpAddress";
  @SerializedName(SERIALIZED_NAME_NEXT_HOP_IP_ADDRESS)
  private String nextHopIpAddress;

  /**
   * Gets or sets the type of Azure hop the packet should be sent to.
   */
  @JsonAdapter(NextHopTypeEnum.Adapter.class)
  public enum NextHopTypeEnum {
    VIRTUAL_NETWORK_GATEWAY("VirtualNetworkGateway"),
    
    VNET_LOCAL("VnetLocal"),
    
    INTERNET("Internet"),
    
    VIRTUAL_APPLIANCE("VirtualAppliance"),
    
    NONE("None");

    private String value;

    NextHopTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NextHopTypeEnum fromValue(String value) {
      for (NextHopTypeEnum b : NextHopTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NextHopTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NextHopTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NextHopTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NextHopTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NextHopTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NEXT_HOP_TYPE = "nextHopType";
  @SerializedName(SERIALIZED_NAME_NEXT_HOP_TYPE)
  private NextHopTypeEnum nextHopType;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public RoutePropertiesFormat() {
  }

  public RoutePropertiesFormat addressPrefix(String addressPrefix) {
    this.addressPrefix = addressPrefix;
    return this;
  }

  /**
   * Gets or sets the destination CIDR to which the route applies.
   * @return addressPrefix
   */
  @javax.annotation.Nullable
  public String getAddressPrefix() {
    return addressPrefix;
  }

  public void setAddressPrefix(String addressPrefix) {
    this.addressPrefix = addressPrefix;
  }


  public RoutePropertiesFormat nextHopIpAddress(String nextHopIpAddress) {
    this.nextHopIpAddress = nextHopIpAddress;
    return this;
  }

  /**
   * Gets or sets the IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
   * @return nextHopIpAddress
   */
  @javax.annotation.Nullable
  public String getNextHopIpAddress() {
    return nextHopIpAddress;
  }

  public void setNextHopIpAddress(String nextHopIpAddress) {
    this.nextHopIpAddress = nextHopIpAddress;
  }


  public RoutePropertiesFormat nextHopType(NextHopTypeEnum nextHopType) {
    this.nextHopType = nextHopType;
    return this;
  }

  /**
   * Gets or sets the type of Azure hop the packet should be sent to.
   * @return nextHopType
   */
  @javax.annotation.Nonnull
  public NextHopTypeEnum getNextHopType() {
    return nextHopType;
  }

  public void setNextHopType(NextHopTypeEnum nextHopType) {
    this.nextHopType = nextHopType;
  }


  public RoutePropertiesFormat provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Gets or sets Provisioning state of the resource Updating/Deleting/Failed
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoutePropertiesFormat routePropertiesFormat = (RoutePropertiesFormat) o;
    return Objects.equals(this.addressPrefix, routePropertiesFormat.addressPrefix) &&
        Objects.equals(this.nextHopIpAddress, routePropertiesFormat.nextHopIpAddress) &&
        Objects.equals(this.nextHopType, routePropertiesFormat.nextHopType) &&
        Objects.equals(this.provisioningState, routePropertiesFormat.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressPrefix, nextHopIpAddress, nextHopType, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoutePropertiesFormat {\n");
    sb.append("    addressPrefix: ").append(toIndentedString(addressPrefix)).append("\n");
    sb.append("    nextHopIpAddress: ").append(toIndentedString(nextHopIpAddress)).append("\n");
    sb.append("    nextHopType: ").append(toIndentedString(nextHopType)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressPrefix");
    openapiFields.add("nextHopIpAddress");
    openapiFields.add("nextHopType");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("nextHopType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RoutePropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RoutePropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoutePropertiesFormat is not found in the empty JSON string", RoutePropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RoutePropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoutePropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RoutePropertiesFormat.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("addressPrefix") != null && !jsonObj.get("addressPrefix").isJsonNull()) && !jsonObj.get("addressPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressPrefix").toString()));
      }
      if ((jsonObj.get("nextHopIpAddress") != null && !jsonObj.get("nextHopIpAddress").isJsonNull()) && !jsonObj.get("nextHopIpAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextHopIpAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextHopIpAddress").toString()));
      }
      if (!jsonObj.get("nextHopType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextHopType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextHopType").toString()));
      }
      // validate the required field `nextHopType`
      NextHopTypeEnum.validateJsonElement(jsonObj.get("nextHopType"));
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoutePropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoutePropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoutePropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoutePropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<RoutePropertiesFormat>() {
           @Override
           public void write(JsonWriter out, RoutePropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoutePropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RoutePropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RoutePropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to RoutePropertiesFormat
   */
  public static RoutePropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoutePropertiesFormat.class);
  }

  /**
   * Convert an instance of RoutePropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

