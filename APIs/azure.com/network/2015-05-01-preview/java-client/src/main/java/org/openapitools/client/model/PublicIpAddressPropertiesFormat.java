/*
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PublicIpAddressDnsSettings;
import org.openapitools.client.model.SubResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PublicIpAddress properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:56.955675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublicIpAddressPropertiesFormat {
  public static final String SERIALIZED_NAME_DNS_SETTINGS = "dnsSettings";
  @SerializedName(SERIALIZED_NAME_DNS_SETTINGS)
  private PublicIpAddressDnsSettings dnsSettings;

  public static final String SERIALIZED_NAME_IDLE_TIMEOUT_IN_MINUTES = "idleTimeoutInMinutes";
  @SerializedName(SERIALIZED_NAME_IDLE_TIMEOUT_IN_MINUTES)
  private Integer idleTimeoutInMinutes;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_IP_CONFIGURATION = "ipConfiguration";
  @SerializedName(SERIALIZED_NAME_IP_CONFIGURATION)
  private SubResource ipConfiguration;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  /**
   * Gets or sets PublicIP allocation method (Static/Dynamic)
   */
  @JsonAdapter(PublicIPAllocationMethodEnum.Adapter.class)
  public enum PublicIPAllocationMethodEnum {
    STATIC("Static"),
    
    DYNAMIC("Dynamic");

    private String value;

    PublicIPAllocationMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PublicIPAllocationMethodEnum fromValue(String value) {
      for (PublicIPAllocationMethodEnum b : PublicIPAllocationMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PublicIPAllocationMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PublicIPAllocationMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PublicIPAllocationMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PublicIPAllocationMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PublicIPAllocationMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PUBLIC_I_P_ALLOCATION_METHOD = "publicIPAllocationMethod";
  @SerializedName(SERIALIZED_NAME_PUBLIC_I_P_ALLOCATION_METHOD)
  private PublicIPAllocationMethodEnum publicIPAllocationMethod;

  public static final String SERIALIZED_NAME_RESOURCE_GUID = "resourceGuid";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GUID)
  private String resourceGuid;

  public PublicIpAddressPropertiesFormat() {
  }

  public PublicIpAddressPropertiesFormat dnsSettings(PublicIpAddressDnsSettings dnsSettings) {
    this.dnsSettings = dnsSettings;
    return this;
  }

  /**
   * Get dnsSettings
   * @return dnsSettings
   */
  @javax.annotation.Nullable
  public PublicIpAddressDnsSettings getDnsSettings() {
    return dnsSettings;
  }

  public void setDnsSettings(PublicIpAddressDnsSettings dnsSettings) {
    this.dnsSettings = dnsSettings;
  }


  public PublicIpAddressPropertiesFormat idleTimeoutInMinutes(Integer idleTimeoutInMinutes) {
    this.idleTimeoutInMinutes = idleTimeoutInMinutes;
    return this;
  }

  /**
   * Gets or sets the idle timeout of the public IP address
   * @return idleTimeoutInMinutes
   */
  @javax.annotation.Nullable
  public Integer getIdleTimeoutInMinutes() {
    return idleTimeoutInMinutes;
  }

  public void setIdleTimeoutInMinutes(Integer idleTimeoutInMinutes) {
    this.idleTimeoutInMinutes = idleTimeoutInMinutes;
  }


  public PublicIpAddressPropertiesFormat ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Gets the assigned public IP address
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public PublicIpAddressPropertiesFormat ipConfiguration(SubResource ipConfiguration) {
    this.ipConfiguration = ipConfiguration;
    return this;
  }

  /**
   * Get ipConfiguration
   * @return ipConfiguration
   */
  @javax.annotation.Nullable
  public SubResource getIpConfiguration() {
    return ipConfiguration;
  }

  public void setIpConfiguration(SubResource ipConfiguration) {
    this.ipConfiguration = ipConfiguration;
  }


  public PublicIpAddressPropertiesFormat provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public PublicIpAddressPropertiesFormat publicIPAllocationMethod(PublicIPAllocationMethodEnum publicIPAllocationMethod) {
    this.publicIPAllocationMethod = publicIPAllocationMethod;
    return this;
  }

  /**
   * Gets or sets PublicIP allocation method (Static/Dynamic)
   * @return publicIPAllocationMethod
   */
  @javax.annotation.Nonnull
  public PublicIPAllocationMethodEnum getPublicIPAllocationMethod() {
    return publicIPAllocationMethod;
  }

  public void setPublicIPAllocationMethod(PublicIPAllocationMethodEnum publicIPAllocationMethod) {
    this.publicIPAllocationMethod = publicIPAllocationMethod;
  }


  public PublicIpAddressPropertiesFormat resourceGuid(String resourceGuid) {
    this.resourceGuid = resourceGuid;
    return this;
  }

  /**
   * Gets or sets resource guid property of the PublicIP resource
   * @return resourceGuid
   */
  @javax.annotation.Nullable
  public String getResourceGuid() {
    return resourceGuid;
  }

  public void setResourceGuid(String resourceGuid) {
    this.resourceGuid = resourceGuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicIpAddressPropertiesFormat publicIpAddressPropertiesFormat = (PublicIpAddressPropertiesFormat) o;
    return Objects.equals(this.dnsSettings, publicIpAddressPropertiesFormat.dnsSettings) &&
        Objects.equals(this.idleTimeoutInMinutes, publicIpAddressPropertiesFormat.idleTimeoutInMinutes) &&
        Objects.equals(this.ipAddress, publicIpAddressPropertiesFormat.ipAddress) &&
        Objects.equals(this.ipConfiguration, publicIpAddressPropertiesFormat.ipConfiguration) &&
        Objects.equals(this.provisioningState, publicIpAddressPropertiesFormat.provisioningState) &&
        Objects.equals(this.publicIPAllocationMethod, publicIpAddressPropertiesFormat.publicIPAllocationMethod) &&
        Objects.equals(this.resourceGuid, publicIpAddressPropertiesFormat.resourceGuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dnsSettings, idleTimeoutInMinutes, ipAddress, ipConfiguration, provisioningState, publicIPAllocationMethod, resourceGuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicIpAddressPropertiesFormat {\n");
    sb.append("    dnsSettings: ").append(toIndentedString(dnsSettings)).append("\n");
    sb.append("    idleTimeoutInMinutes: ").append(toIndentedString(idleTimeoutInMinutes)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    ipConfiguration: ").append(toIndentedString(ipConfiguration)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    publicIPAllocationMethod: ").append(toIndentedString(publicIPAllocationMethod)).append("\n");
    sb.append("    resourceGuid: ").append(toIndentedString(resourceGuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dnsSettings");
    openapiFields.add("idleTimeoutInMinutes");
    openapiFields.add("ipAddress");
    openapiFields.add("ipConfiguration");
    openapiFields.add("provisioningState");
    openapiFields.add("publicIPAllocationMethod");
    openapiFields.add("resourceGuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("publicIPAllocationMethod");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublicIpAddressPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublicIpAddressPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublicIpAddressPropertiesFormat is not found in the empty JSON string", PublicIpAddressPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublicIpAddressPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublicIpAddressPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PublicIpAddressPropertiesFormat.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dnsSettings`
      if (jsonObj.get("dnsSettings") != null && !jsonObj.get("dnsSettings").isJsonNull()) {
        PublicIpAddressDnsSettings.validateJsonElement(jsonObj.get("dnsSettings"));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      // validate the optional field `ipConfiguration`
      if (jsonObj.get("ipConfiguration") != null && !jsonObj.get("ipConfiguration").isJsonNull()) {
        SubResource.validateJsonElement(jsonObj.get("ipConfiguration"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if (!jsonObj.get("publicIPAllocationMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicIPAllocationMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicIPAllocationMethod").toString()));
      }
      // validate the required field `publicIPAllocationMethod`
      PublicIPAllocationMethodEnum.validateJsonElement(jsonObj.get("publicIPAllocationMethod"));
      if ((jsonObj.get("resourceGuid") != null && !jsonObj.get("resourceGuid").isJsonNull()) && !jsonObj.get("resourceGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublicIpAddressPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublicIpAddressPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublicIpAddressPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublicIpAddressPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<PublicIpAddressPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, PublicIpAddressPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublicIpAddressPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublicIpAddressPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublicIpAddressPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to PublicIpAddressPropertiesFormat
   */
  public static PublicIpAddressPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublicIpAddressPropertiesFormat.class);
  }

  /**
   * Convert an instance of PublicIpAddressPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

