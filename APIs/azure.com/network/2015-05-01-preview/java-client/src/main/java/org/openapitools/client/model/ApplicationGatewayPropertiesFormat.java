/*
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationGatewayBackendAddressPool;
import org.openapitools.client.model.ApplicationGatewayBackendHttpSettings;
import org.openapitools.client.model.ApplicationGatewayFrontendIPConfiguration;
import org.openapitools.client.model.ApplicationGatewayFrontendPort;
import org.openapitools.client.model.ApplicationGatewayHttpListener;
import org.openapitools.client.model.ApplicationGatewayIPConfiguration;
import org.openapitools.client.model.ApplicationGatewayRequestRoutingRule;
import org.openapitools.client.model.ApplicationGatewaySku;
import org.openapitools.client.model.ApplicationGatewaySslCertificate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of Application Gateway
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:56.955675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayPropertiesFormat {
  public static final String SERIALIZED_NAME_BACKEND_ADDRESS_POOLS = "backendAddressPools";
  @SerializedName(SERIALIZED_NAME_BACKEND_ADDRESS_POOLS)
  private List<ApplicationGatewayBackendAddressPool> backendAddressPools = new ArrayList<>();

  public static final String SERIALIZED_NAME_BACKEND_HTTP_SETTINGS_COLLECTION = "backendHttpSettingsCollection";
  @SerializedName(SERIALIZED_NAME_BACKEND_HTTP_SETTINGS_COLLECTION)
  private List<ApplicationGatewayBackendHttpSettings> backendHttpSettingsCollection = new ArrayList<>();

  public static final String SERIALIZED_NAME_FRONTEND_I_P_CONFIGURATIONS = "frontendIPConfigurations";
  @SerializedName(SERIALIZED_NAME_FRONTEND_I_P_CONFIGURATIONS)
  private List<ApplicationGatewayFrontendIPConfiguration> frontendIPConfigurations = new ArrayList<>();

  public static final String SERIALIZED_NAME_FRONTEND_PORTS = "frontendPorts";
  @SerializedName(SERIALIZED_NAME_FRONTEND_PORTS)
  private List<ApplicationGatewayFrontendPort> frontendPorts = new ArrayList<>();

  public static final String SERIALIZED_NAME_GATEWAY_I_P_CONFIGURATIONS = "gatewayIPConfigurations";
  @SerializedName(SERIALIZED_NAME_GATEWAY_I_P_CONFIGURATIONS)
  private List<ApplicationGatewayIPConfiguration> gatewayIPConfigurations = new ArrayList<>();

  public static final String SERIALIZED_NAME_HTTP_LISTENERS = "httpListeners";
  @SerializedName(SERIALIZED_NAME_HTTP_LISTENERS)
  private List<ApplicationGatewayHttpListener> httpListeners = new ArrayList<>();

  /**
   * Gets operational state of application gateway resource
   */
  @JsonAdapter(OperationalStateEnum.Adapter.class)
  public enum OperationalStateEnum {
    STOPPED("Stopped"),
    
    STARTING("Starting"),
    
    RUNNING("Running"),
    
    STOPPING("Stopping");

    private String value;

    OperationalStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationalStateEnum fromValue(String value) {
      for (OperationalStateEnum b : OperationalStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperationalStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationalStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationalStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperationalStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperationalStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATIONAL_STATE = "operationalState";
  @SerializedName(SERIALIZED_NAME_OPERATIONAL_STATE)
  private OperationalStateEnum operationalState;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_REQUEST_ROUTING_RULES = "requestRoutingRules";
  @SerializedName(SERIALIZED_NAME_REQUEST_ROUTING_RULES)
  private List<ApplicationGatewayRequestRoutingRule> requestRoutingRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCE_GUID = "resourceGuid";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GUID)
  private String resourceGuid;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private ApplicationGatewaySku sku;

  public static final String SERIALIZED_NAME_SSL_CERTIFICATES = "sslCertificates";
  @SerializedName(SERIALIZED_NAME_SSL_CERTIFICATES)
  private List<ApplicationGatewaySslCertificate> sslCertificates = new ArrayList<>();

  public ApplicationGatewayPropertiesFormat() {
  }

  public ApplicationGatewayPropertiesFormat(
     OperationalStateEnum operationalState
  ) {
    this();
    this.operationalState = operationalState;
  }

  public ApplicationGatewayPropertiesFormat backendAddressPools(List<ApplicationGatewayBackendAddressPool> backendAddressPools) {
    this.backendAddressPools = backendAddressPools;
    return this;
  }

  public ApplicationGatewayPropertiesFormat addBackendAddressPoolsItem(ApplicationGatewayBackendAddressPool backendAddressPoolsItem) {
    if (this.backendAddressPools == null) {
      this.backendAddressPools = new ArrayList<>();
    }
    this.backendAddressPools.add(backendAddressPoolsItem);
    return this;
  }

  /**
   * Gets or sets backend address pool of application gateway resource
   * @return backendAddressPools
   */
  @javax.annotation.Nullable
  public List<ApplicationGatewayBackendAddressPool> getBackendAddressPools() {
    return backendAddressPools;
  }

  public void setBackendAddressPools(List<ApplicationGatewayBackendAddressPool> backendAddressPools) {
    this.backendAddressPools = backendAddressPools;
  }


  public ApplicationGatewayPropertiesFormat backendHttpSettingsCollection(List<ApplicationGatewayBackendHttpSettings> backendHttpSettingsCollection) {
    this.backendHttpSettingsCollection = backendHttpSettingsCollection;
    return this;
  }

  public ApplicationGatewayPropertiesFormat addBackendHttpSettingsCollectionItem(ApplicationGatewayBackendHttpSettings backendHttpSettingsCollectionItem) {
    if (this.backendHttpSettingsCollection == null) {
      this.backendHttpSettingsCollection = new ArrayList<>();
    }
    this.backendHttpSettingsCollection.add(backendHttpSettingsCollectionItem);
    return this;
  }

  /**
   * Gets or sets backend http settings of application gateway resource
   * @return backendHttpSettingsCollection
   */
  @javax.annotation.Nullable
  public List<ApplicationGatewayBackendHttpSettings> getBackendHttpSettingsCollection() {
    return backendHttpSettingsCollection;
  }

  public void setBackendHttpSettingsCollection(List<ApplicationGatewayBackendHttpSettings> backendHttpSettingsCollection) {
    this.backendHttpSettingsCollection = backendHttpSettingsCollection;
  }


  public ApplicationGatewayPropertiesFormat frontendIPConfigurations(List<ApplicationGatewayFrontendIPConfiguration> frontendIPConfigurations) {
    this.frontendIPConfigurations = frontendIPConfigurations;
    return this;
  }

  public ApplicationGatewayPropertiesFormat addFrontendIPConfigurationsItem(ApplicationGatewayFrontendIPConfiguration frontendIPConfigurationsItem) {
    if (this.frontendIPConfigurations == null) {
      this.frontendIPConfigurations = new ArrayList<>();
    }
    this.frontendIPConfigurations.add(frontendIPConfigurationsItem);
    return this;
  }

  /**
   * Gets or sets frontend IP addresses of application gateway resource
   * @return frontendIPConfigurations
   */
  @javax.annotation.Nullable
  public List<ApplicationGatewayFrontendIPConfiguration> getFrontendIPConfigurations() {
    return frontendIPConfigurations;
  }

  public void setFrontendIPConfigurations(List<ApplicationGatewayFrontendIPConfiguration> frontendIPConfigurations) {
    this.frontendIPConfigurations = frontendIPConfigurations;
  }


  public ApplicationGatewayPropertiesFormat frontendPorts(List<ApplicationGatewayFrontendPort> frontendPorts) {
    this.frontendPorts = frontendPorts;
    return this;
  }

  public ApplicationGatewayPropertiesFormat addFrontendPortsItem(ApplicationGatewayFrontendPort frontendPortsItem) {
    if (this.frontendPorts == null) {
      this.frontendPorts = new ArrayList<>();
    }
    this.frontendPorts.add(frontendPortsItem);
    return this;
  }

  /**
   * Gets or sets frontend ports of application gateway resource
   * @return frontendPorts
   */
  @javax.annotation.Nullable
  public List<ApplicationGatewayFrontendPort> getFrontendPorts() {
    return frontendPorts;
  }

  public void setFrontendPorts(List<ApplicationGatewayFrontendPort> frontendPorts) {
    this.frontendPorts = frontendPorts;
  }


  public ApplicationGatewayPropertiesFormat gatewayIPConfigurations(List<ApplicationGatewayIPConfiguration> gatewayIPConfigurations) {
    this.gatewayIPConfigurations = gatewayIPConfigurations;
    return this;
  }

  public ApplicationGatewayPropertiesFormat addGatewayIPConfigurationsItem(ApplicationGatewayIPConfiguration gatewayIPConfigurationsItem) {
    if (this.gatewayIPConfigurations == null) {
      this.gatewayIPConfigurations = new ArrayList<>();
    }
    this.gatewayIPConfigurations.add(gatewayIPConfigurationsItem);
    return this;
  }

  /**
   * Gets or sets subnets of application gateway resource
   * @return gatewayIPConfigurations
   */
  @javax.annotation.Nullable
  public List<ApplicationGatewayIPConfiguration> getGatewayIPConfigurations() {
    return gatewayIPConfigurations;
  }

  public void setGatewayIPConfigurations(List<ApplicationGatewayIPConfiguration> gatewayIPConfigurations) {
    this.gatewayIPConfigurations = gatewayIPConfigurations;
  }


  public ApplicationGatewayPropertiesFormat httpListeners(List<ApplicationGatewayHttpListener> httpListeners) {
    this.httpListeners = httpListeners;
    return this;
  }

  public ApplicationGatewayPropertiesFormat addHttpListenersItem(ApplicationGatewayHttpListener httpListenersItem) {
    if (this.httpListeners == null) {
      this.httpListeners = new ArrayList<>();
    }
    this.httpListeners.add(httpListenersItem);
    return this;
  }

  /**
   * Gets or sets HTTP listeners of application gateway resource
   * @return httpListeners
   */
  @javax.annotation.Nullable
  public List<ApplicationGatewayHttpListener> getHttpListeners() {
    return httpListeners;
  }

  public void setHttpListeners(List<ApplicationGatewayHttpListener> httpListeners) {
    this.httpListeners = httpListeners;
  }


  /**
   * Gets operational state of application gateway resource
   * @return operationalState
   */
  @javax.annotation.Nullable
  public OperationalStateEnum getOperationalState() {
    return operationalState;
  }



  public ApplicationGatewayPropertiesFormat provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Gets or sets Provisioning state of the ApplicationGateway resource Updating/Deleting/Failed
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ApplicationGatewayPropertiesFormat requestRoutingRules(List<ApplicationGatewayRequestRoutingRule> requestRoutingRules) {
    this.requestRoutingRules = requestRoutingRules;
    return this;
  }

  public ApplicationGatewayPropertiesFormat addRequestRoutingRulesItem(ApplicationGatewayRequestRoutingRule requestRoutingRulesItem) {
    if (this.requestRoutingRules == null) {
      this.requestRoutingRules = new ArrayList<>();
    }
    this.requestRoutingRules.add(requestRoutingRulesItem);
    return this;
  }

  /**
   * Gets or sets request routing rules of application gateway resource
   * @return requestRoutingRules
   */
  @javax.annotation.Nullable
  public List<ApplicationGatewayRequestRoutingRule> getRequestRoutingRules() {
    return requestRoutingRules;
  }

  public void setRequestRoutingRules(List<ApplicationGatewayRequestRoutingRule> requestRoutingRules) {
    this.requestRoutingRules = requestRoutingRules;
  }


  public ApplicationGatewayPropertiesFormat resourceGuid(String resourceGuid) {
    this.resourceGuid = resourceGuid;
    return this;
  }

  /**
   * Gets or sets resource guid property of the ApplicationGateway resource
   * @return resourceGuid
   */
  @javax.annotation.Nullable
  public String getResourceGuid() {
    return resourceGuid;
  }

  public void setResourceGuid(String resourceGuid) {
    this.resourceGuid = resourceGuid;
  }


  public ApplicationGatewayPropertiesFormat sku(ApplicationGatewaySku sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Get sku
   * @return sku
   */
  @javax.annotation.Nullable
  public ApplicationGatewaySku getSku() {
    return sku;
  }

  public void setSku(ApplicationGatewaySku sku) {
    this.sku = sku;
  }


  public ApplicationGatewayPropertiesFormat sslCertificates(List<ApplicationGatewaySslCertificate> sslCertificates) {
    this.sslCertificates = sslCertificates;
    return this;
  }

  public ApplicationGatewayPropertiesFormat addSslCertificatesItem(ApplicationGatewaySslCertificate sslCertificatesItem) {
    if (this.sslCertificates == null) {
      this.sslCertificates = new ArrayList<>();
    }
    this.sslCertificates.add(sslCertificatesItem);
    return this;
  }

  /**
   * Gets or sets ssl certificates of application gateway resource
   * @return sslCertificates
   */
  @javax.annotation.Nullable
  public List<ApplicationGatewaySslCertificate> getSslCertificates() {
    return sslCertificates;
  }

  public void setSslCertificates(List<ApplicationGatewaySslCertificate> sslCertificates) {
    this.sslCertificates = sslCertificates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayPropertiesFormat applicationGatewayPropertiesFormat = (ApplicationGatewayPropertiesFormat) o;
    return Objects.equals(this.backendAddressPools, applicationGatewayPropertiesFormat.backendAddressPools) &&
        Objects.equals(this.backendHttpSettingsCollection, applicationGatewayPropertiesFormat.backendHttpSettingsCollection) &&
        Objects.equals(this.frontendIPConfigurations, applicationGatewayPropertiesFormat.frontendIPConfigurations) &&
        Objects.equals(this.frontendPorts, applicationGatewayPropertiesFormat.frontendPorts) &&
        Objects.equals(this.gatewayIPConfigurations, applicationGatewayPropertiesFormat.gatewayIPConfigurations) &&
        Objects.equals(this.httpListeners, applicationGatewayPropertiesFormat.httpListeners) &&
        Objects.equals(this.operationalState, applicationGatewayPropertiesFormat.operationalState) &&
        Objects.equals(this.provisioningState, applicationGatewayPropertiesFormat.provisioningState) &&
        Objects.equals(this.requestRoutingRules, applicationGatewayPropertiesFormat.requestRoutingRules) &&
        Objects.equals(this.resourceGuid, applicationGatewayPropertiesFormat.resourceGuid) &&
        Objects.equals(this.sku, applicationGatewayPropertiesFormat.sku) &&
        Objects.equals(this.sslCertificates, applicationGatewayPropertiesFormat.sslCertificates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backendAddressPools, backendHttpSettingsCollection, frontendIPConfigurations, frontendPorts, gatewayIPConfigurations, httpListeners, operationalState, provisioningState, requestRoutingRules, resourceGuid, sku, sslCertificates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayPropertiesFormat {\n");
    sb.append("    backendAddressPools: ").append(toIndentedString(backendAddressPools)).append("\n");
    sb.append("    backendHttpSettingsCollection: ").append(toIndentedString(backendHttpSettingsCollection)).append("\n");
    sb.append("    frontendIPConfigurations: ").append(toIndentedString(frontendIPConfigurations)).append("\n");
    sb.append("    frontendPorts: ").append(toIndentedString(frontendPorts)).append("\n");
    sb.append("    gatewayIPConfigurations: ").append(toIndentedString(gatewayIPConfigurations)).append("\n");
    sb.append("    httpListeners: ").append(toIndentedString(httpListeners)).append("\n");
    sb.append("    operationalState: ").append(toIndentedString(operationalState)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    requestRoutingRules: ").append(toIndentedString(requestRoutingRules)).append("\n");
    sb.append("    resourceGuid: ").append(toIndentedString(resourceGuid)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    sslCertificates: ").append(toIndentedString(sslCertificates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backendAddressPools");
    openapiFields.add("backendHttpSettingsCollection");
    openapiFields.add("frontendIPConfigurations");
    openapiFields.add("frontendPorts");
    openapiFields.add("gatewayIPConfigurations");
    openapiFields.add("httpListeners");
    openapiFields.add("operationalState");
    openapiFields.add("provisioningState");
    openapiFields.add("requestRoutingRules");
    openapiFields.add("resourceGuid");
    openapiFields.add("sku");
    openapiFields.add("sslCertificates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayPropertiesFormat is not found in the empty JSON string", ApplicationGatewayPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("backendAddressPools") != null && !jsonObj.get("backendAddressPools").isJsonNull()) {
        JsonArray jsonArraybackendAddressPools = jsonObj.getAsJsonArray("backendAddressPools");
        if (jsonArraybackendAddressPools != null) {
          // ensure the json data is an array
          if (!jsonObj.get("backendAddressPools").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `backendAddressPools` to be an array in the JSON string but got `%s`", jsonObj.get("backendAddressPools").toString()));
          }

          // validate the optional field `backendAddressPools` (array)
          for (int i = 0; i < jsonArraybackendAddressPools.size(); i++) {
            ApplicationGatewayBackendAddressPool.validateJsonElement(jsonArraybackendAddressPools.get(i));
          };
        }
      }
      if (jsonObj.get("backendHttpSettingsCollection") != null && !jsonObj.get("backendHttpSettingsCollection").isJsonNull()) {
        JsonArray jsonArraybackendHttpSettingsCollection = jsonObj.getAsJsonArray("backendHttpSettingsCollection");
        if (jsonArraybackendHttpSettingsCollection != null) {
          // ensure the json data is an array
          if (!jsonObj.get("backendHttpSettingsCollection").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `backendHttpSettingsCollection` to be an array in the JSON string but got `%s`", jsonObj.get("backendHttpSettingsCollection").toString()));
          }

          // validate the optional field `backendHttpSettingsCollection` (array)
          for (int i = 0; i < jsonArraybackendHttpSettingsCollection.size(); i++) {
            ApplicationGatewayBackendHttpSettings.validateJsonElement(jsonArraybackendHttpSettingsCollection.get(i));
          };
        }
      }
      if (jsonObj.get("frontendIPConfigurations") != null && !jsonObj.get("frontendIPConfigurations").isJsonNull()) {
        JsonArray jsonArrayfrontendIPConfigurations = jsonObj.getAsJsonArray("frontendIPConfigurations");
        if (jsonArrayfrontendIPConfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("frontendIPConfigurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `frontendIPConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("frontendIPConfigurations").toString()));
          }

          // validate the optional field `frontendIPConfigurations` (array)
          for (int i = 0; i < jsonArrayfrontendIPConfigurations.size(); i++) {
            ApplicationGatewayFrontendIPConfiguration.validateJsonElement(jsonArrayfrontendIPConfigurations.get(i));
          };
        }
      }
      if (jsonObj.get("frontendPorts") != null && !jsonObj.get("frontendPorts").isJsonNull()) {
        JsonArray jsonArrayfrontendPorts = jsonObj.getAsJsonArray("frontendPorts");
        if (jsonArrayfrontendPorts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("frontendPorts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `frontendPorts` to be an array in the JSON string but got `%s`", jsonObj.get("frontendPorts").toString()));
          }

          // validate the optional field `frontendPorts` (array)
          for (int i = 0; i < jsonArrayfrontendPorts.size(); i++) {
            ApplicationGatewayFrontendPort.validateJsonElement(jsonArrayfrontendPorts.get(i));
          };
        }
      }
      if (jsonObj.get("gatewayIPConfigurations") != null && !jsonObj.get("gatewayIPConfigurations").isJsonNull()) {
        JsonArray jsonArraygatewayIPConfigurations = jsonObj.getAsJsonArray("gatewayIPConfigurations");
        if (jsonArraygatewayIPConfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("gatewayIPConfigurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `gatewayIPConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("gatewayIPConfigurations").toString()));
          }

          // validate the optional field `gatewayIPConfigurations` (array)
          for (int i = 0; i < jsonArraygatewayIPConfigurations.size(); i++) {
            ApplicationGatewayIPConfiguration.validateJsonElement(jsonArraygatewayIPConfigurations.get(i));
          };
        }
      }
      if (jsonObj.get("httpListeners") != null && !jsonObj.get("httpListeners").isJsonNull()) {
        JsonArray jsonArrayhttpListeners = jsonObj.getAsJsonArray("httpListeners");
        if (jsonArrayhttpListeners != null) {
          // ensure the json data is an array
          if (!jsonObj.get("httpListeners").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `httpListeners` to be an array in the JSON string but got `%s`", jsonObj.get("httpListeners").toString()));
          }

          // validate the optional field `httpListeners` (array)
          for (int i = 0; i < jsonArrayhttpListeners.size(); i++) {
            ApplicationGatewayHttpListener.validateJsonElement(jsonArrayhttpListeners.get(i));
          };
        }
      }
      if ((jsonObj.get("operationalState") != null && !jsonObj.get("operationalState").isJsonNull()) && !jsonObj.get("operationalState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationalState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationalState").toString()));
      }
      // validate the optional field `operationalState`
      if (jsonObj.get("operationalState") != null && !jsonObj.get("operationalState").isJsonNull()) {
        OperationalStateEnum.validateJsonElement(jsonObj.get("operationalState"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if (jsonObj.get("requestRoutingRules") != null && !jsonObj.get("requestRoutingRules").isJsonNull()) {
        JsonArray jsonArrayrequestRoutingRules = jsonObj.getAsJsonArray("requestRoutingRules");
        if (jsonArrayrequestRoutingRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("requestRoutingRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `requestRoutingRules` to be an array in the JSON string but got `%s`", jsonObj.get("requestRoutingRules").toString()));
          }

          // validate the optional field `requestRoutingRules` (array)
          for (int i = 0; i < jsonArrayrequestRoutingRules.size(); i++) {
            ApplicationGatewayRequestRoutingRule.validateJsonElement(jsonArrayrequestRoutingRules.get(i));
          };
        }
      }
      if ((jsonObj.get("resourceGuid") != null && !jsonObj.get("resourceGuid").isJsonNull()) && !jsonObj.get("resourceGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGuid").toString()));
      }
      // validate the optional field `sku`
      if (jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) {
        ApplicationGatewaySku.validateJsonElement(jsonObj.get("sku"));
      }
      if (jsonObj.get("sslCertificates") != null && !jsonObj.get("sslCertificates").isJsonNull()) {
        JsonArray jsonArraysslCertificates = jsonObj.getAsJsonArray("sslCertificates");
        if (jsonArraysslCertificates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sslCertificates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sslCertificates` to be an array in the JSON string but got `%s`", jsonObj.get("sslCertificates").toString()));
          }

          // validate the optional field `sslCertificates` (array)
          for (int i = 0; i < jsonArraysslCertificates.size(); i++) {
            ApplicationGatewaySslCertificate.validateJsonElement(jsonArraysslCertificates.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayPropertiesFormat
   */
  public static ApplicationGatewayPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayPropertiesFormat.class);
  }

  /**
   * Convert an instance of ApplicationGatewayPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

