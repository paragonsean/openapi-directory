/*
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The routes table associated with the ExpressRouteCircuit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:56.955675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExpressRouteCircuitRoutesTable {
  public static final String SERIALIZED_NAME_ADDRESS_PREFIX = "addressPrefix";
  @SerializedName(SERIALIZED_NAME_ADDRESS_PREFIX)
  private String addressPrefix;

  public static final String SERIALIZED_NAME_AS_PATH = "asPath";
  @SerializedName(SERIALIZED_NAME_AS_PATH)
  private String asPath;

  public static final String SERIALIZED_NAME_NEXT_HOP_I_P = "nextHopIP";
  @SerializedName(SERIALIZED_NAME_NEXT_HOP_I_P)
  private String nextHopIP;

  /**
   * Gets NextHopType.
   */
  @JsonAdapter(NextHopTypeEnum.Adapter.class)
  public enum NextHopTypeEnum {
    VIRTUAL_NETWORK_GATEWAY("VirtualNetworkGateway"),
    
    VNET_LOCAL("VnetLocal"),
    
    INTERNET("Internet"),
    
    VIRTUAL_APPLIANCE("VirtualAppliance"),
    
    NONE("None");

    private String value;

    NextHopTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NextHopTypeEnum fromValue(String value) {
      for (NextHopTypeEnum b : NextHopTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NextHopTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NextHopTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NextHopTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NextHopTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NextHopTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NEXT_HOP_TYPE = "nextHopType";
  @SerializedName(SERIALIZED_NAME_NEXT_HOP_TYPE)
  private NextHopTypeEnum nextHopType;

  public ExpressRouteCircuitRoutesTable() {
  }

  public ExpressRouteCircuitRoutesTable addressPrefix(String addressPrefix) {
    this.addressPrefix = addressPrefix;
    return this;
  }

  /**
   * Gets AddressPrefix.
   * @return addressPrefix
   */
  @javax.annotation.Nullable
  public String getAddressPrefix() {
    return addressPrefix;
  }

  public void setAddressPrefix(String addressPrefix) {
    this.addressPrefix = addressPrefix;
  }


  public ExpressRouteCircuitRoutesTable asPath(String asPath) {
    this.asPath = asPath;
    return this;
  }

  /**
   * Gets AsPath.
   * @return asPath
   */
  @javax.annotation.Nullable
  public String getAsPath() {
    return asPath;
  }

  public void setAsPath(String asPath) {
    this.asPath = asPath;
  }


  public ExpressRouteCircuitRoutesTable nextHopIP(String nextHopIP) {
    this.nextHopIP = nextHopIP;
    return this;
  }

  /**
   * Gets NextHopIP.
   * @return nextHopIP
   */
  @javax.annotation.Nullable
  public String getNextHopIP() {
    return nextHopIP;
  }

  public void setNextHopIP(String nextHopIP) {
    this.nextHopIP = nextHopIP;
  }


  public ExpressRouteCircuitRoutesTable nextHopType(NextHopTypeEnum nextHopType) {
    this.nextHopType = nextHopType;
    return this;
  }

  /**
   * Gets NextHopType.
   * @return nextHopType
   */
  @javax.annotation.Nonnull
  public NextHopTypeEnum getNextHopType() {
    return nextHopType;
  }

  public void setNextHopType(NextHopTypeEnum nextHopType) {
    this.nextHopType = nextHopType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpressRouteCircuitRoutesTable expressRouteCircuitRoutesTable = (ExpressRouteCircuitRoutesTable) o;
    return Objects.equals(this.addressPrefix, expressRouteCircuitRoutesTable.addressPrefix) &&
        Objects.equals(this.asPath, expressRouteCircuitRoutesTable.asPath) &&
        Objects.equals(this.nextHopIP, expressRouteCircuitRoutesTable.nextHopIP) &&
        Objects.equals(this.nextHopType, expressRouteCircuitRoutesTable.nextHopType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressPrefix, asPath, nextHopIP, nextHopType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpressRouteCircuitRoutesTable {\n");
    sb.append("    addressPrefix: ").append(toIndentedString(addressPrefix)).append("\n");
    sb.append("    asPath: ").append(toIndentedString(asPath)).append("\n");
    sb.append("    nextHopIP: ").append(toIndentedString(nextHopIP)).append("\n");
    sb.append("    nextHopType: ").append(toIndentedString(nextHopType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressPrefix");
    openapiFields.add("asPath");
    openapiFields.add("nextHopIP");
    openapiFields.add("nextHopType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("nextHopType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExpressRouteCircuitRoutesTable
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExpressRouteCircuitRoutesTable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpressRouteCircuitRoutesTable is not found in the empty JSON string", ExpressRouteCircuitRoutesTable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExpressRouteCircuitRoutesTable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExpressRouteCircuitRoutesTable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExpressRouteCircuitRoutesTable.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("addressPrefix") != null && !jsonObj.get("addressPrefix").isJsonNull()) && !jsonObj.get("addressPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressPrefix").toString()));
      }
      if ((jsonObj.get("asPath") != null && !jsonObj.get("asPath").isJsonNull()) && !jsonObj.get("asPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asPath").toString()));
      }
      if ((jsonObj.get("nextHopIP") != null && !jsonObj.get("nextHopIP").isJsonNull()) && !jsonObj.get("nextHopIP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextHopIP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextHopIP").toString()));
      }
      if (!jsonObj.get("nextHopType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextHopType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextHopType").toString()));
      }
      // validate the required field `nextHopType`
      NextHopTypeEnum.validateJsonElement(jsonObj.get("nextHopType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpressRouteCircuitRoutesTable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpressRouteCircuitRoutesTable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpressRouteCircuitRoutesTable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpressRouteCircuitRoutesTable.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpressRouteCircuitRoutesTable>() {
           @Override
           public void write(JsonWriter out, ExpressRouteCircuitRoutesTable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpressRouteCircuitRoutesTable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExpressRouteCircuitRoutesTable given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExpressRouteCircuitRoutesTable
   * @throws IOException if the JSON string is invalid with respect to ExpressRouteCircuitRoutesTable
   */
  public static ExpressRouteCircuitRoutesTable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpressRouteCircuitRoutesTable.class);
  }

  /**
   * Convert an instance of ExpressRouteCircuitRoutesTable to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

