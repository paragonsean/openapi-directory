/*
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Dns Settings of a network interface
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:56.955675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkInterfaceDnsSettings {
  public static final String SERIALIZED_NAME_APPLIED_DNS_SERVERS = "appliedDnsServers";
  @SerializedName(SERIALIZED_NAME_APPLIED_DNS_SERVERS)
  private List<String> appliedDnsServers = new ArrayList<>();

  public static final String SERIALIZED_NAME_DNS_SERVERS = "dnsServers";
  @SerializedName(SERIALIZED_NAME_DNS_SERVERS)
  private List<String> dnsServers = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTERNAL_DNS_NAME_LABEL = "internalDnsNameLabel";
  @SerializedName(SERIALIZED_NAME_INTERNAL_DNS_NAME_LABEL)
  private String internalDnsNameLabel;

  public static final String SERIALIZED_NAME_INTERNAL_FQDN = "internalFqdn";
  @SerializedName(SERIALIZED_NAME_INTERNAL_FQDN)
  private String internalFqdn;

  public NetworkInterfaceDnsSettings() {
  }

  public NetworkInterfaceDnsSettings appliedDnsServers(List<String> appliedDnsServers) {
    this.appliedDnsServers = appliedDnsServers;
    return this;
  }

  public NetworkInterfaceDnsSettings addAppliedDnsServersItem(String appliedDnsServersItem) {
    if (this.appliedDnsServers == null) {
      this.appliedDnsServers = new ArrayList<>();
    }
    this.appliedDnsServers.add(appliedDnsServersItem);
    return this;
  }

  /**
   * Gets or sets list of Applied DNS servers IP addresses
   * @return appliedDnsServers
   */
  @javax.annotation.Nullable
  public List<String> getAppliedDnsServers() {
    return appliedDnsServers;
  }

  public void setAppliedDnsServers(List<String> appliedDnsServers) {
    this.appliedDnsServers = appliedDnsServers;
  }


  public NetworkInterfaceDnsSettings dnsServers(List<String> dnsServers) {
    this.dnsServers = dnsServers;
    return this;
  }

  public NetworkInterfaceDnsSettings addDnsServersItem(String dnsServersItem) {
    if (this.dnsServers == null) {
      this.dnsServers = new ArrayList<>();
    }
    this.dnsServers.add(dnsServersItem);
    return this;
  }

  /**
   * Gets or sets list of DNS servers IP addresses
   * @return dnsServers
   */
  @javax.annotation.Nullable
  public List<String> getDnsServers() {
    return dnsServers;
  }

  public void setDnsServers(List<String> dnsServers) {
    this.dnsServers = dnsServers;
  }


  public NetworkInterfaceDnsSettings internalDnsNameLabel(String internalDnsNameLabel) {
    this.internalDnsNameLabel = internalDnsNameLabel;
    return this;
  }

  /**
   * Gets or sets the Internal DNS name
   * @return internalDnsNameLabel
   */
  @javax.annotation.Nullable
  public String getInternalDnsNameLabel() {
    return internalDnsNameLabel;
  }

  public void setInternalDnsNameLabel(String internalDnsNameLabel) {
    this.internalDnsNameLabel = internalDnsNameLabel;
  }


  public NetworkInterfaceDnsSettings internalFqdn(String internalFqdn) {
    this.internalFqdn = internalFqdn;
    return this;
  }

  /**
   * Gets or sets full IDNS name in the form, DnsName.VnetId.ZoneId.TopLevelSuffix. This is set when the NIC is associated to a VM
   * @return internalFqdn
   */
  @javax.annotation.Nullable
  public String getInternalFqdn() {
    return internalFqdn;
  }

  public void setInternalFqdn(String internalFqdn) {
    this.internalFqdn = internalFqdn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkInterfaceDnsSettings networkInterfaceDnsSettings = (NetworkInterfaceDnsSettings) o;
    return Objects.equals(this.appliedDnsServers, networkInterfaceDnsSettings.appliedDnsServers) &&
        Objects.equals(this.dnsServers, networkInterfaceDnsSettings.dnsServers) &&
        Objects.equals(this.internalDnsNameLabel, networkInterfaceDnsSettings.internalDnsNameLabel) &&
        Objects.equals(this.internalFqdn, networkInterfaceDnsSettings.internalFqdn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appliedDnsServers, dnsServers, internalDnsNameLabel, internalFqdn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkInterfaceDnsSettings {\n");
    sb.append("    appliedDnsServers: ").append(toIndentedString(appliedDnsServers)).append("\n");
    sb.append("    dnsServers: ").append(toIndentedString(dnsServers)).append("\n");
    sb.append("    internalDnsNameLabel: ").append(toIndentedString(internalDnsNameLabel)).append("\n");
    sb.append("    internalFqdn: ").append(toIndentedString(internalFqdn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appliedDnsServers");
    openapiFields.add("dnsServers");
    openapiFields.add("internalDnsNameLabel");
    openapiFields.add("internalFqdn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkInterfaceDnsSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkInterfaceDnsSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkInterfaceDnsSettings is not found in the empty JSON string", NetworkInterfaceDnsSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkInterfaceDnsSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkInterfaceDnsSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("appliedDnsServers") != null && !jsonObj.get("appliedDnsServers").isJsonNull() && !jsonObj.get("appliedDnsServers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `appliedDnsServers` to be an array in the JSON string but got `%s`", jsonObj.get("appliedDnsServers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dnsServers") != null && !jsonObj.get("dnsServers").isJsonNull() && !jsonObj.get("dnsServers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsServers` to be an array in the JSON string but got `%s`", jsonObj.get("dnsServers").toString()));
      }
      if ((jsonObj.get("internalDnsNameLabel") != null && !jsonObj.get("internalDnsNameLabel").isJsonNull()) && !jsonObj.get("internalDnsNameLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalDnsNameLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalDnsNameLabel").toString()));
      }
      if ((jsonObj.get("internalFqdn") != null && !jsonObj.get("internalFqdn").isJsonNull()) && !jsonObj.get("internalFqdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalFqdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalFqdn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkInterfaceDnsSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkInterfaceDnsSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkInterfaceDnsSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkInterfaceDnsSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkInterfaceDnsSettings>() {
           @Override
           public void write(JsonWriter out, NetworkInterfaceDnsSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkInterfaceDnsSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkInterfaceDnsSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkInterfaceDnsSettings
   * @throws IOException if the JSON string is invalid with respect to NetworkInterfaceDnsSettings
   */
  public static NetworkInterfaceDnsSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkInterfaceDnsSettings.class);
  }

  /**
   * Convert an instance of NetworkInterfaceDnsSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

