/*
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SubResource;
import org.openapitools.client.model.VirtualNetworkGatewayIpConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VirtualNetworkGateway properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:56.955675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualNetworkGatewayPropertiesFormat {
  public static final String SERIALIZED_NAME_ENABLE_BGP = "enableBgp";
  @SerializedName(SERIALIZED_NAME_ENABLE_BGP)
  private Boolean enableBgp;

  public static final String SERIALIZED_NAME_GATEWAY_DEFAULT_SITE = "gatewayDefaultSite";
  @SerializedName(SERIALIZED_NAME_GATEWAY_DEFAULT_SITE)
  private SubResource gatewayDefaultSite;

  /**
   * The type of this virtual network gateway.
   */
  @JsonAdapter(GatewayTypeEnum.Adapter.class)
  public enum GatewayTypeEnum {
    VPN("Vpn"),
    
    EXPRESS_ROUTE("ExpressRoute");

    private String value;

    GatewayTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GatewayTypeEnum fromValue(String value) {
      for (GatewayTypeEnum b : GatewayTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GatewayTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GatewayTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GatewayTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GatewayTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GatewayTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GATEWAY_TYPE = "gatewayType";
  @SerializedName(SERIALIZED_NAME_GATEWAY_TYPE)
  private GatewayTypeEnum gatewayType;

  public static final String SERIALIZED_NAME_IP_CONFIGURATIONS = "ipConfigurations";
  @SerializedName(SERIALIZED_NAME_IP_CONFIGURATIONS)
  private List<VirtualNetworkGatewayIpConfiguration> ipConfigurations = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_RESOURCE_GUID = "resourceGuid";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GUID)
  private String resourceGuid;

  /**
   * The type of this virtual network gateway.
   */
  @JsonAdapter(VpnTypeEnum.Adapter.class)
  public enum VpnTypeEnum {
    POLICY_BASED("PolicyBased"),
    
    ROUTE_BASED("RouteBased");

    private String value;

    VpnTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VpnTypeEnum fromValue(String value) {
      for (VpnTypeEnum b : VpnTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VpnTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VpnTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VpnTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VpnTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VpnTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VPN_TYPE = "vpnType";
  @SerializedName(SERIALIZED_NAME_VPN_TYPE)
  private VpnTypeEnum vpnType;

  public VirtualNetworkGatewayPropertiesFormat() {
  }

  public VirtualNetworkGatewayPropertiesFormat enableBgp(Boolean enableBgp) {
    this.enableBgp = enableBgp;
    return this;
  }

  /**
   * EnableBgp Flag
   * @return enableBgp
   */
  @javax.annotation.Nullable
  public Boolean getEnableBgp() {
    return enableBgp;
  }

  public void setEnableBgp(Boolean enableBgp) {
    this.enableBgp = enableBgp;
  }


  public VirtualNetworkGatewayPropertiesFormat gatewayDefaultSite(SubResource gatewayDefaultSite) {
    this.gatewayDefaultSite = gatewayDefaultSite;
    return this;
  }

  /**
   * Get gatewayDefaultSite
   * @return gatewayDefaultSite
   */
  @javax.annotation.Nullable
  public SubResource getGatewayDefaultSite() {
    return gatewayDefaultSite;
  }

  public void setGatewayDefaultSite(SubResource gatewayDefaultSite) {
    this.gatewayDefaultSite = gatewayDefaultSite;
  }


  public VirtualNetworkGatewayPropertiesFormat gatewayType(GatewayTypeEnum gatewayType) {
    this.gatewayType = gatewayType;
    return this;
  }

  /**
   * The type of this virtual network gateway.
   * @return gatewayType
   */
  @javax.annotation.Nullable
  public GatewayTypeEnum getGatewayType() {
    return gatewayType;
  }

  public void setGatewayType(GatewayTypeEnum gatewayType) {
    this.gatewayType = gatewayType;
  }


  public VirtualNetworkGatewayPropertiesFormat ipConfigurations(List<VirtualNetworkGatewayIpConfiguration> ipConfigurations) {
    this.ipConfigurations = ipConfigurations;
    return this;
  }

  public VirtualNetworkGatewayPropertiesFormat addIpConfigurationsItem(VirtualNetworkGatewayIpConfiguration ipConfigurationsItem) {
    if (this.ipConfigurations == null) {
      this.ipConfigurations = new ArrayList<>();
    }
    this.ipConfigurations.add(ipConfigurationsItem);
    return this;
  }

  /**
   * IpConfigurations for Virtual network gateway.
   * @return ipConfigurations
   */
  @javax.annotation.Nullable
  public List<VirtualNetworkGatewayIpConfiguration> getIpConfigurations() {
    return ipConfigurations;
  }

  public void setIpConfigurations(List<VirtualNetworkGatewayIpConfiguration> ipConfigurations) {
    this.ipConfigurations = ipConfigurations;
  }


  public VirtualNetworkGatewayPropertiesFormat provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Gets or sets Provisioning state of the VirtualNetworkGateway resource Updating/Deleting/Failed
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public VirtualNetworkGatewayPropertiesFormat resourceGuid(String resourceGuid) {
    this.resourceGuid = resourceGuid;
    return this;
  }

  /**
   * Gets or sets resource guid property of the VirtualNetworkGateway resource
   * @return resourceGuid
   */
  @javax.annotation.Nullable
  public String getResourceGuid() {
    return resourceGuid;
  }

  public void setResourceGuid(String resourceGuid) {
    this.resourceGuid = resourceGuid;
  }


  public VirtualNetworkGatewayPropertiesFormat vpnType(VpnTypeEnum vpnType) {
    this.vpnType = vpnType;
    return this;
  }

  /**
   * The type of this virtual network gateway.
   * @return vpnType
   */
  @javax.annotation.Nullable
  public VpnTypeEnum getVpnType() {
    return vpnType;
  }

  public void setVpnType(VpnTypeEnum vpnType) {
    this.vpnType = vpnType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualNetworkGatewayPropertiesFormat virtualNetworkGatewayPropertiesFormat = (VirtualNetworkGatewayPropertiesFormat) o;
    return Objects.equals(this.enableBgp, virtualNetworkGatewayPropertiesFormat.enableBgp) &&
        Objects.equals(this.gatewayDefaultSite, virtualNetworkGatewayPropertiesFormat.gatewayDefaultSite) &&
        Objects.equals(this.gatewayType, virtualNetworkGatewayPropertiesFormat.gatewayType) &&
        Objects.equals(this.ipConfigurations, virtualNetworkGatewayPropertiesFormat.ipConfigurations) &&
        Objects.equals(this.provisioningState, virtualNetworkGatewayPropertiesFormat.provisioningState) &&
        Objects.equals(this.resourceGuid, virtualNetworkGatewayPropertiesFormat.resourceGuid) &&
        Objects.equals(this.vpnType, virtualNetworkGatewayPropertiesFormat.vpnType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enableBgp, gatewayDefaultSite, gatewayType, ipConfigurations, provisioningState, resourceGuid, vpnType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualNetworkGatewayPropertiesFormat {\n");
    sb.append("    enableBgp: ").append(toIndentedString(enableBgp)).append("\n");
    sb.append("    gatewayDefaultSite: ").append(toIndentedString(gatewayDefaultSite)).append("\n");
    sb.append("    gatewayType: ").append(toIndentedString(gatewayType)).append("\n");
    sb.append("    ipConfigurations: ").append(toIndentedString(ipConfigurations)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    resourceGuid: ").append(toIndentedString(resourceGuid)).append("\n");
    sb.append("    vpnType: ").append(toIndentedString(vpnType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enableBgp");
    openapiFields.add("gatewayDefaultSite");
    openapiFields.add("gatewayType");
    openapiFields.add("ipConfigurations");
    openapiFields.add("provisioningState");
    openapiFields.add("resourceGuid");
    openapiFields.add("vpnType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualNetworkGatewayPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualNetworkGatewayPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualNetworkGatewayPropertiesFormat is not found in the empty JSON string", VirtualNetworkGatewayPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualNetworkGatewayPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualNetworkGatewayPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `gatewayDefaultSite`
      if (jsonObj.get("gatewayDefaultSite") != null && !jsonObj.get("gatewayDefaultSite").isJsonNull()) {
        SubResource.validateJsonElement(jsonObj.get("gatewayDefaultSite"));
      }
      if ((jsonObj.get("gatewayType") != null && !jsonObj.get("gatewayType").isJsonNull()) && !jsonObj.get("gatewayType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatewayType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatewayType").toString()));
      }
      // validate the optional field `gatewayType`
      if (jsonObj.get("gatewayType") != null && !jsonObj.get("gatewayType").isJsonNull()) {
        GatewayTypeEnum.validateJsonElement(jsonObj.get("gatewayType"));
      }
      if (jsonObj.get("ipConfigurations") != null && !jsonObj.get("ipConfigurations").isJsonNull()) {
        JsonArray jsonArrayipConfigurations = jsonObj.getAsJsonArray("ipConfigurations");
        if (jsonArrayipConfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ipConfigurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ipConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("ipConfigurations").toString()));
          }

          // validate the optional field `ipConfigurations` (array)
          for (int i = 0; i < jsonArrayipConfigurations.size(); i++) {
            VirtualNetworkGatewayIpConfiguration.validateJsonElement(jsonArrayipConfigurations.get(i));
          };
        }
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("resourceGuid") != null && !jsonObj.get("resourceGuid").isJsonNull()) && !jsonObj.get("resourceGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGuid").toString()));
      }
      if ((jsonObj.get("vpnType") != null && !jsonObj.get("vpnType").isJsonNull()) && !jsonObj.get("vpnType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vpnType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vpnType").toString()));
      }
      // validate the optional field `vpnType`
      if (jsonObj.get("vpnType") != null && !jsonObj.get("vpnType").isJsonNull()) {
        VpnTypeEnum.validateJsonElement(jsonObj.get("vpnType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualNetworkGatewayPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualNetworkGatewayPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualNetworkGatewayPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualNetworkGatewayPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualNetworkGatewayPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, VirtualNetworkGatewayPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualNetworkGatewayPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualNetworkGatewayPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualNetworkGatewayPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to VirtualNetworkGatewayPropertiesFormat
   */
  public static VirtualNetworkGatewayPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualNetworkGatewayPropertiesFormat.class);
  }

  /**
   * Convert an instance of VirtualNetworkGatewayPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

