/*
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of Backend address pool settings of application gateway
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:56.955675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationGatewayBackendHttpSettingsPropertiesFormat {
  /**
   * Gets or sets the cookie affinity
   */
  @JsonAdapter(CookieBasedAffinityEnum.Adapter.class)
  public enum CookieBasedAffinityEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    CookieBasedAffinityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CookieBasedAffinityEnum fromValue(String value) {
      for (CookieBasedAffinityEnum b : CookieBasedAffinityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CookieBasedAffinityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CookieBasedAffinityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CookieBasedAffinityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CookieBasedAffinityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CookieBasedAffinityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COOKIE_BASED_AFFINITY = "cookieBasedAffinity";
  @SerializedName(SERIALIZED_NAME_COOKIE_BASED_AFFINITY)
  private CookieBasedAffinityEnum cookieBasedAffinity;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  /**
   * Gets or sets the protocol
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    HTTP("Http"),
    
    HTTPS("Https");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public ApplicationGatewayBackendHttpSettingsPropertiesFormat() {
  }

  public ApplicationGatewayBackendHttpSettingsPropertiesFormat cookieBasedAffinity(CookieBasedAffinityEnum cookieBasedAffinity) {
    this.cookieBasedAffinity = cookieBasedAffinity;
    return this;
  }

  /**
   * Gets or sets the cookie affinity
   * @return cookieBasedAffinity
   */
  @javax.annotation.Nullable
  public CookieBasedAffinityEnum getCookieBasedAffinity() {
    return cookieBasedAffinity;
  }

  public void setCookieBasedAffinity(CookieBasedAffinityEnum cookieBasedAffinity) {
    this.cookieBasedAffinity = cookieBasedAffinity;
  }


  public ApplicationGatewayBackendHttpSettingsPropertiesFormat port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Gets or sets the port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public ApplicationGatewayBackendHttpSettingsPropertiesFormat protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

  /**
   * Gets or sets the protocol
   * @return protocol
   */
  @javax.annotation.Nullable
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }


  public ApplicationGatewayBackendHttpSettingsPropertiesFormat provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Gets or sets Provisioning state of the backend http settings resource Updating/Deleting/Failed
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationGatewayBackendHttpSettingsPropertiesFormat applicationGatewayBackendHttpSettingsPropertiesFormat = (ApplicationGatewayBackendHttpSettingsPropertiesFormat) o;
    return Objects.equals(this.cookieBasedAffinity, applicationGatewayBackendHttpSettingsPropertiesFormat.cookieBasedAffinity) &&
        Objects.equals(this.port, applicationGatewayBackendHttpSettingsPropertiesFormat.port) &&
        Objects.equals(this.protocol, applicationGatewayBackendHttpSettingsPropertiesFormat.protocol) &&
        Objects.equals(this.provisioningState, applicationGatewayBackendHttpSettingsPropertiesFormat.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cookieBasedAffinity, port, protocol, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationGatewayBackendHttpSettingsPropertiesFormat {\n");
    sb.append("    cookieBasedAffinity: ").append(toIndentedString(cookieBasedAffinity)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cookieBasedAffinity");
    openapiFields.add("port");
    openapiFields.add("protocol");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationGatewayBackendHttpSettingsPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationGatewayBackendHttpSettingsPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationGatewayBackendHttpSettingsPropertiesFormat is not found in the empty JSON string", ApplicationGatewayBackendHttpSettingsPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationGatewayBackendHttpSettingsPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationGatewayBackendHttpSettingsPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cookieBasedAffinity") != null && !jsonObj.get("cookieBasedAffinity").isJsonNull()) && !jsonObj.get("cookieBasedAffinity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cookieBasedAffinity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cookieBasedAffinity").toString()));
      }
      // validate the optional field `cookieBasedAffinity`
      if (jsonObj.get("cookieBasedAffinity") != null && !jsonObj.get("cookieBasedAffinity").isJsonNull()) {
        CookieBasedAffinityEnum.validateJsonElement(jsonObj.get("cookieBasedAffinity"));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationGatewayBackendHttpSettingsPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationGatewayBackendHttpSettingsPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationGatewayBackendHttpSettingsPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationGatewayBackendHttpSettingsPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationGatewayBackendHttpSettingsPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, ApplicationGatewayBackendHttpSettingsPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationGatewayBackendHttpSettingsPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationGatewayBackendHttpSettingsPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationGatewayBackendHttpSettingsPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to ApplicationGatewayBackendHttpSettingsPropertiesFormat
   */
  public static ApplicationGatewayBackendHttpSettingsPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationGatewayBackendHttpSettingsPropertiesFormat.class);
  }

  /**
   * Convert an instance of ApplicationGatewayBackendHttpSettingsPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

