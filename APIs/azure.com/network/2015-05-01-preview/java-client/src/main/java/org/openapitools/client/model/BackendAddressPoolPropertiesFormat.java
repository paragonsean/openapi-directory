/*
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SubResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of BackendAddressPool
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:56.955675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackendAddressPoolPropertiesFormat {
  public static final String SERIALIZED_NAME_BACKEND_I_P_CONFIGURATIONS = "backendIPConfigurations";
  @SerializedName(SERIALIZED_NAME_BACKEND_I_P_CONFIGURATIONS)
  private List<SubResource> backendIPConfigurations = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOAD_BALANCING_RULES = "loadBalancingRules";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCING_RULES)
  private List<SubResource> loadBalancingRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTBOUND_NAT_RULE = "outboundNatRule";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_NAT_RULE)
  private SubResource outboundNatRule;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public BackendAddressPoolPropertiesFormat() {
  }

  public BackendAddressPoolPropertiesFormat backendIPConfigurations(List<SubResource> backendIPConfigurations) {
    this.backendIPConfigurations = backendIPConfigurations;
    return this;
  }

  public BackendAddressPoolPropertiesFormat addBackendIPConfigurationsItem(SubResource backendIPConfigurationsItem) {
    if (this.backendIPConfigurations == null) {
      this.backendIPConfigurations = new ArrayList<>();
    }
    this.backendIPConfigurations.add(backendIPConfigurationsItem);
    return this;
  }

  /**
   * Gets collection of references to IPs defined in NICs
   * @return backendIPConfigurations
   */
  @javax.annotation.Nullable
  public List<SubResource> getBackendIPConfigurations() {
    return backendIPConfigurations;
  }

  public void setBackendIPConfigurations(List<SubResource> backendIPConfigurations) {
    this.backendIPConfigurations = backendIPConfigurations;
  }


  public BackendAddressPoolPropertiesFormat loadBalancingRules(List<SubResource> loadBalancingRules) {
    this.loadBalancingRules = loadBalancingRules;
    return this;
  }

  public BackendAddressPoolPropertiesFormat addLoadBalancingRulesItem(SubResource loadBalancingRulesItem) {
    if (this.loadBalancingRules == null) {
      this.loadBalancingRules = new ArrayList<>();
    }
    this.loadBalancingRules.add(loadBalancingRulesItem);
    return this;
  }

  /**
   * Gets Load Balancing rules that use this Backend Address Pool
   * @return loadBalancingRules
   */
  @javax.annotation.Nullable
  public List<SubResource> getLoadBalancingRules() {
    return loadBalancingRules;
  }

  public void setLoadBalancingRules(List<SubResource> loadBalancingRules) {
    this.loadBalancingRules = loadBalancingRules;
  }


  public BackendAddressPoolPropertiesFormat outboundNatRule(SubResource outboundNatRule) {
    this.outboundNatRule = outboundNatRule;
    return this;
  }

  /**
   * Get outboundNatRule
   * @return outboundNatRule
   */
  @javax.annotation.Nullable
  public SubResource getOutboundNatRule() {
    return outboundNatRule;
  }

  public void setOutboundNatRule(SubResource outboundNatRule) {
    this.outboundNatRule = outboundNatRule;
  }


  public BackendAddressPoolPropertiesFormat provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Provisioning state of the PublicIP resource Updating/Deleting/Failed
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackendAddressPoolPropertiesFormat backendAddressPoolPropertiesFormat = (BackendAddressPoolPropertiesFormat) o;
    return Objects.equals(this.backendIPConfigurations, backendAddressPoolPropertiesFormat.backendIPConfigurations) &&
        Objects.equals(this.loadBalancingRules, backendAddressPoolPropertiesFormat.loadBalancingRules) &&
        Objects.equals(this.outboundNatRule, backendAddressPoolPropertiesFormat.outboundNatRule) &&
        Objects.equals(this.provisioningState, backendAddressPoolPropertiesFormat.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backendIPConfigurations, loadBalancingRules, outboundNatRule, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackendAddressPoolPropertiesFormat {\n");
    sb.append("    backendIPConfigurations: ").append(toIndentedString(backendIPConfigurations)).append("\n");
    sb.append("    loadBalancingRules: ").append(toIndentedString(loadBalancingRules)).append("\n");
    sb.append("    outboundNatRule: ").append(toIndentedString(outboundNatRule)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backendIPConfigurations");
    openapiFields.add("loadBalancingRules");
    openapiFields.add("outboundNatRule");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackendAddressPoolPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackendAddressPoolPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackendAddressPoolPropertiesFormat is not found in the empty JSON string", BackendAddressPoolPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackendAddressPoolPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackendAddressPoolPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("backendIPConfigurations") != null && !jsonObj.get("backendIPConfigurations").isJsonNull()) {
        JsonArray jsonArraybackendIPConfigurations = jsonObj.getAsJsonArray("backendIPConfigurations");
        if (jsonArraybackendIPConfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("backendIPConfigurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `backendIPConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("backendIPConfigurations").toString()));
          }

          // validate the optional field `backendIPConfigurations` (array)
          for (int i = 0; i < jsonArraybackendIPConfigurations.size(); i++) {
            SubResource.validateJsonElement(jsonArraybackendIPConfigurations.get(i));
          };
        }
      }
      if (jsonObj.get("loadBalancingRules") != null && !jsonObj.get("loadBalancingRules").isJsonNull()) {
        JsonArray jsonArrayloadBalancingRules = jsonObj.getAsJsonArray("loadBalancingRules");
        if (jsonArrayloadBalancingRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("loadBalancingRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `loadBalancingRules` to be an array in the JSON string but got `%s`", jsonObj.get("loadBalancingRules").toString()));
          }

          // validate the optional field `loadBalancingRules` (array)
          for (int i = 0; i < jsonArrayloadBalancingRules.size(); i++) {
            SubResource.validateJsonElement(jsonArrayloadBalancingRules.get(i));
          };
        }
      }
      // validate the optional field `outboundNatRule`
      if (jsonObj.get("outboundNatRule") != null && !jsonObj.get("outboundNatRule").isJsonNull()) {
        SubResource.validateJsonElement(jsonObj.get("outboundNatRule"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackendAddressPoolPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackendAddressPoolPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackendAddressPoolPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackendAddressPoolPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<BackendAddressPoolPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, BackendAddressPoolPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackendAddressPoolPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackendAddressPoolPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackendAddressPoolPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to BackendAddressPoolPropertiesFormat
   */
  public static BackendAddressPoolPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackendAddressPoolPropertiesFormat.class);
  }

  /**
   * Convert an instance of BackendAddressPoolPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

