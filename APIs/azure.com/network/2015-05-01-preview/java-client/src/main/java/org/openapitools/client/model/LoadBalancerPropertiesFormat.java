/*
 * NetworkResourceProviderClient
 * The Windows Azure Network management API provides a RESTful set of web services that interact with Windows Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Windows Azure Networks service.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BackendAddressPool;
import org.openapitools.client.model.FrontendIpConfiguration;
import org.openapitools.client.model.InboundNatPool;
import org.openapitools.client.model.InboundNatRule;
import org.openapitools.client.model.LoadBalancingRule;
import org.openapitools.client.model.OutboundNatRule;
import org.openapitools.client.model.Probe;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of Load Balancer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:56.955675-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoadBalancerPropertiesFormat {
  public static final String SERIALIZED_NAME_BACKEND_ADDRESS_POOLS = "backendAddressPools";
  @SerializedName(SERIALIZED_NAME_BACKEND_ADDRESS_POOLS)
  private List<BackendAddressPool> backendAddressPools = new ArrayList<>();

  public static final String SERIALIZED_NAME_FRONTEND_I_P_CONFIGURATIONS = "frontendIPConfigurations";
  @SerializedName(SERIALIZED_NAME_FRONTEND_I_P_CONFIGURATIONS)
  private List<FrontendIpConfiguration> frontendIPConfigurations = new ArrayList<>();

  public static final String SERIALIZED_NAME_INBOUND_NAT_POOLS = "inboundNatPools";
  @SerializedName(SERIALIZED_NAME_INBOUND_NAT_POOLS)
  private List<InboundNatPool> inboundNatPools = new ArrayList<>();

  public static final String SERIALIZED_NAME_INBOUND_NAT_RULES = "inboundNatRules";
  @SerializedName(SERIALIZED_NAME_INBOUND_NAT_RULES)
  private List<InboundNatRule> inboundNatRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOAD_BALANCING_RULES = "loadBalancingRules";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCING_RULES)
  private List<LoadBalancingRule> loadBalancingRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTBOUND_NAT_RULES = "outboundNatRules";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_NAT_RULES)
  private List<OutboundNatRule> outboundNatRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROBES = "probes";
  @SerializedName(SERIALIZED_NAME_PROBES)
  private List<Probe> probes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_RESOURCE_GUID = "resourceGuid";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GUID)
  private String resourceGuid;

  public LoadBalancerPropertiesFormat() {
  }

  public LoadBalancerPropertiesFormat backendAddressPools(List<BackendAddressPool> backendAddressPools) {
    this.backendAddressPools = backendAddressPools;
    return this;
  }

  public LoadBalancerPropertiesFormat addBackendAddressPoolsItem(BackendAddressPool backendAddressPoolsItem) {
    if (this.backendAddressPools == null) {
      this.backendAddressPools = new ArrayList<>();
    }
    this.backendAddressPools.add(backendAddressPoolsItem);
    return this;
  }

  /**
   * Gets or sets Pools of backend IP addresses
   * @return backendAddressPools
   */
  @javax.annotation.Nullable
  public List<BackendAddressPool> getBackendAddressPools() {
    return backendAddressPools;
  }

  public void setBackendAddressPools(List<BackendAddressPool> backendAddressPools) {
    this.backendAddressPools = backendAddressPools;
  }


  public LoadBalancerPropertiesFormat frontendIPConfigurations(List<FrontendIpConfiguration> frontendIPConfigurations) {
    this.frontendIPConfigurations = frontendIPConfigurations;
    return this;
  }

  public LoadBalancerPropertiesFormat addFrontendIPConfigurationsItem(FrontendIpConfiguration frontendIPConfigurationsItem) {
    if (this.frontendIPConfigurations == null) {
      this.frontendIPConfigurations = new ArrayList<>();
    }
    this.frontendIPConfigurations.add(frontendIPConfigurationsItem);
    return this;
  }

  /**
   * Gets or sets frontend IP addresses of the load balancer
   * @return frontendIPConfigurations
   */
  @javax.annotation.Nullable
  public List<FrontendIpConfiguration> getFrontendIPConfigurations() {
    return frontendIPConfigurations;
  }

  public void setFrontendIPConfigurations(List<FrontendIpConfiguration> frontendIPConfigurations) {
    this.frontendIPConfigurations = frontendIPConfigurations;
  }


  public LoadBalancerPropertiesFormat inboundNatPools(List<InboundNatPool> inboundNatPools) {
    this.inboundNatPools = inboundNatPools;
    return this;
  }

  public LoadBalancerPropertiesFormat addInboundNatPoolsItem(InboundNatPool inboundNatPoolsItem) {
    if (this.inboundNatPools == null) {
      this.inboundNatPools = new ArrayList<>();
    }
    this.inboundNatPools.add(inboundNatPoolsItem);
    return this;
  }

  /**
   * Gets or sets inbound NAT pools
   * @return inboundNatPools
   */
  @javax.annotation.Nullable
  public List<InboundNatPool> getInboundNatPools() {
    return inboundNatPools;
  }

  public void setInboundNatPools(List<InboundNatPool> inboundNatPools) {
    this.inboundNatPools = inboundNatPools;
  }


  public LoadBalancerPropertiesFormat inboundNatRules(List<InboundNatRule> inboundNatRules) {
    this.inboundNatRules = inboundNatRules;
    return this;
  }

  public LoadBalancerPropertiesFormat addInboundNatRulesItem(InboundNatRule inboundNatRulesItem) {
    if (this.inboundNatRules == null) {
      this.inboundNatRules = new ArrayList<>();
    }
    this.inboundNatRules.add(inboundNatRulesItem);
    return this;
  }

  /**
   * Gets or sets list of inbound rules
   * @return inboundNatRules
   */
  @javax.annotation.Nullable
  public List<InboundNatRule> getInboundNatRules() {
    return inboundNatRules;
  }

  public void setInboundNatRules(List<InboundNatRule> inboundNatRules) {
    this.inboundNatRules = inboundNatRules;
  }


  public LoadBalancerPropertiesFormat loadBalancingRules(List<LoadBalancingRule> loadBalancingRules) {
    this.loadBalancingRules = loadBalancingRules;
    return this;
  }

  public LoadBalancerPropertiesFormat addLoadBalancingRulesItem(LoadBalancingRule loadBalancingRulesItem) {
    if (this.loadBalancingRules == null) {
      this.loadBalancingRules = new ArrayList<>();
    }
    this.loadBalancingRules.add(loadBalancingRulesItem);
    return this;
  }

  /**
   * Gets or sets load balancing rules
   * @return loadBalancingRules
   */
  @javax.annotation.Nullable
  public List<LoadBalancingRule> getLoadBalancingRules() {
    return loadBalancingRules;
  }

  public void setLoadBalancingRules(List<LoadBalancingRule> loadBalancingRules) {
    this.loadBalancingRules = loadBalancingRules;
  }


  public LoadBalancerPropertiesFormat outboundNatRules(List<OutboundNatRule> outboundNatRules) {
    this.outboundNatRules = outboundNatRules;
    return this;
  }

  public LoadBalancerPropertiesFormat addOutboundNatRulesItem(OutboundNatRule outboundNatRulesItem) {
    if (this.outboundNatRules == null) {
      this.outboundNatRules = new ArrayList<>();
    }
    this.outboundNatRules.add(outboundNatRulesItem);
    return this;
  }

  /**
   * Gets or sets outbound NAT rules
   * @return outboundNatRules
   */
  @javax.annotation.Nullable
  public List<OutboundNatRule> getOutboundNatRules() {
    return outboundNatRules;
  }

  public void setOutboundNatRules(List<OutboundNatRule> outboundNatRules) {
    this.outboundNatRules = outboundNatRules;
  }


  public LoadBalancerPropertiesFormat probes(List<Probe> probes) {
    this.probes = probes;
    return this;
  }

  public LoadBalancerPropertiesFormat addProbesItem(Probe probesItem) {
    if (this.probes == null) {
      this.probes = new ArrayList<>();
    }
    this.probes.add(probesItem);
    return this;
  }

  /**
   * Gets or sets list of Load balancer probes
   * @return probes
   */
  @javax.annotation.Nullable
  public List<Probe> getProbes() {
    return probes;
  }

  public void setProbes(List<Probe> probes) {
    this.probes = probes;
  }


  public LoadBalancerPropertiesFormat provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Gets or sets Provisioning state of the PublicIP resource Updating/Deleting/Failed
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public LoadBalancerPropertiesFormat resourceGuid(String resourceGuid) {
    this.resourceGuid = resourceGuid;
    return this;
  }

  /**
   * Gets or sets resource guid property of the Load balancer resource
   * @return resourceGuid
   */
  @javax.annotation.Nullable
  public String getResourceGuid() {
    return resourceGuid;
  }

  public void setResourceGuid(String resourceGuid) {
    this.resourceGuid = resourceGuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoadBalancerPropertiesFormat loadBalancerPropertiesFormat = (LoadBalancerPropertiesFormat) o;
    return Objects.equals(this.backendAddressPools, loadBalancerPropertiesFormat.backendAddressPools) &&
        Objects.equals(this.frontendIPConfigurations, loadBalancerPropertiesFormat.frontendIPConfigurations) &&
        Objects.equals(this.inboundNatPools, loadBalancerPropertiesFormat.inboundNatPools) &&
        Objects.equals(this.inboundNatRules, loadBalancerPropertiesFormat.inboundNatRules) &&
        Objects.equals(this.loadBalancingRules, loadBalancerPropertiesFormat.loadBalancingRules) &&
        Objects.equals(this.outboundNatRules, loadBalancerPropertiesFormat.outboundNatRules) &&
        Objects.equals(this.probes, loadBalancerPropertiesFormat.probes) &&
        Objects.equals(this.provisioningState, loadBalancerPropertiesFormat.provisioningState) &&
        Objects.equals(this.resourceGuid, loadBalancerPropertiesFormat.resourceGuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backendAddressPools, frontendIPConfigurations, inboundNatPools, inboundNatRules, loadBalancingRules, outboundNatRules, probes, provisioningState, resourceGuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoadBalancerPropertiesFormat {\n");
    sb.append("    backendAddressPools: ").append(toIndentedString(backendAddressPools)).append("\n");
    sb.append("    frontendIPConfigurations: ").append(toIndentedString(frontendIPConfigurations)).append("\n");
    sb.append("    inboundNatPools: ").append(toIndentedString(inboundNatPools)).append("\n");
    sb.append("    inboundNatRules: ").append(toIndentedString(inboundNatRules)).append("\n");
    sb.append("    loadBalancingRules: ").append(toIndentedString(loadBalancingRules)).append("\n");
    sb.append("    outboundNatRules: ").append(toIndentedString(outboundNatRules)).append("\n");
    sb.append("    probes: ").append(toIndentedString(probes)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    resourceGuid: ").append(toIndentedString(resourceGuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backendAddressPools");
    openapiFields.add("frontendIPConfigurations");
    openapiFields.add("inboundNatPools");
    openapiFields.add("inboundNatRules");
    openapiFields.add("loadBalancingRules");
    openapiFields.add("outboundNatRules");
    openapiFields.add("probes");
    openapiFields.add("provisioningState");
    openapiFields.add("resourceGuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoadBalancerPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoadBalancerPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoadBalancerPropertiesFormat is not found in the empty JSON string", LoadBalancerPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoadBalancerPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoadBalancerPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("backendAddressPools") != null && !jsonObj.get("backendAddressPools").isJsonNull()) {
        JsonArray jsonArraybackendAddressPools = jsonObj.getAsJsonArray("backendAddressPools");
        if (jsonArraybackendAddressPools != null) {
          // ensure the json data is an array
          if (!jsonObj.get("backendAddressPools").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `backendAddressPools` to be an array in the JSON string but got `%s`", jsonObj.get("backendAddressPools").toString()));
          }

          // validate the optional field `backendAddressPools` (array)
          for (int i = 0; i < jsonArraybackendAddressPools.size(); i++) {
            BackendAddressPool.validateJsonElement(jsonArraybackendAddressPools.get(i));
          };
        }
      }
      if (jsonObj.get("frontendIPConfigurations") != null && !jsonObj.get("frontendIPConfigurations").isJsonNull()) {
        JsonArray jsonArrayfrontendIPConfigurations = jsonObj.getAsJsonArray("frontendIPConfigurations");
        if (jsonArrayfrontendIPConfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("frontendIPConfigurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `frontendIPConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("frontendIPConfigurations").toString()));
          }

          // validate the optional field `frontendIPConfigurations` (array)
          for (int i = 0; i < jsonArrayfrontendIPConfigurations.size(); i++) {
            FrontendIpConfiguration.validateJsonElement(jsonArrayfrontendIPConfigurations.get(i));
          };
        }
      }
      if (jsonObj.get("inboundNatPools") != null && !jsonObj.get("inboundNatPools").isJsonNull()) {
        JsonArray jsonArrayinboundNatPools = jsonObj.getAsJsonArray("inboundNatPools");
        if (jsonArrayinboundNatPools != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inboundNatPools").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inboundNatPools` to be an array in the JSON string but got `%s`", jsonObj.get("inboundNatPools").toString()));
          }

          // validate the optional field `inboundNatPools` (array)
          for (int i = 0; i < jsonArrayinboundNatPools.size(); i++) {
            InboundNatPool.validateJsonElement(jsonArrayinboundNatPools.get(i));
          };
        }
      }
      if (jsonObj.get("inboundNatRules") != null && !jsonObj.get("inboundNatRules").isJsonNull()) {
        JsonArray jsonArrayinboundNatRules = jsonObj.getAsJsonArray("inboundNatRules");
        if (jsonArrayinboundNatRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inboundNatRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inboundNatRules` to be an array in the JSON string but got `%s`", jsonObj.get("inboundNatRules").toString()));
          }

          // validate the optional field `inboundNatRules` (array)
          for (int i = 0; i < jsonArrayinboundNatRules.size(); i++) {
            InboundNatRule.validateJsonElement(jsonArrayinboundNatRules.get(i));
          };
        }
      }
      if (jsonObj.get("loadBalancingRules") != null && !jsonObj.get("loadBalancingRules").isJsonNull()) {
        JsonArray jsonArrayloadBalancingRules = jsonObj.getAsJsonArray("loadBalancingRules");
        if (jsonArrayloadBalancingRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("loadBalancingRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `loadBalancingRules` to be an array in the JSON string but got `%s`", jsonObj.get("loadBalancingRules").toString()));
          }

          // validate the optional field `loadBalancingRules` (array)
          for (int i = 0; i < jsonArrayloadBalancingRules.size(); i++) {
            LoadBalancingRule.validateJsonElement(jsonArrayloadBalancingRules.get(i));
          };
        }
      }
      if (jsonObj.get("outboundNatRules") != null && !jsonObj.get("outboundNatRules").isJsonNull()) {
        JsonArray jsonArrayoutboundNatRules = jsonObj.getAsJsonArray("outboundNatRules");
        if (jsonArrayoutboundNatRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("outboundNatRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `outboundNatRules` to be an array in the JSON string but got `%s`", jsonObj.get("outboundNatRules").toString()));
          }

          // validate the optional field `outboundNatRules` (array)
          for (int i = 0; i < jsonArrayoutboundNatRules.size(); i++) {
            OutboundNatRule.validateJsonElement(jsonArrayoutboundNatRules.get(i));
          };
        }
      }
      if (jsonObj.get("probes") != null && !jsonObj.get("probes").isJsonNull()) {
        JsonArray jsonArrayprobes = jsonObj.getAsJsonArray("probes");
        if (jsonArrayprobes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("probes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `probes` to be an array in the JSON string but got `%s`", jsonObj.get("probes").toString()));
          }

          // validate the optional field `probes` (array)
          for (int i = 0; i < jsonArrayprobes.size(); i++) {
            Probe.validateJsonElement(jsonArrayprobes.get(i));
          };
        }
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("resourceGuid") != null && !jsonObj.get("resourceGuid").isJsonNull()) && !jsonObj.get("resourceGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoadBalancerPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoadBalancerPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoadBalancerPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoadBalancerPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<LoadBalancerPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, LoadBalancerPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoadBalancerPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoadBalancerPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoadBalancerPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to LoadBalancerPropertiesFormat
   */
  public static LoadBalancerPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoadBalancerPropertiesFormat.class);
  }

  /**
   * Convert an instance of LoadBalancerPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

