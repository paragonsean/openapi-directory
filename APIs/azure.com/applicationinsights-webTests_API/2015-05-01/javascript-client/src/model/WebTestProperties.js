/**
 * ApplicationInsightsManagementClient
 * Azure Application Insights client for web test based alerting.
 *
 * The version of the OpenAPI document: 2015-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WebTestGeolocation from './WebTestGeolocation';
import WebTestPropertiesConfiguration from './WebTestPropertiesConfiguration';

/**
 * The WebTestProperties model module.
 * @module model/WebTestProperties
 * @version 2015-05-01
 */
class WebTestProperties {
    /**
     * Constructs a new <code>WebTestProperties</code>.
     * Metadata describing a web test for an Azure resource.
     * @alias module:model/WebTestProperties
     * @param kind {module:model/WebTestProperties.KindEnum} The kind of web test this is, valid choices are ping and multistep.
     * @param locations {Array.<module:model/WebTestGeolocation>} A list of where to physically run the tests from to give global coverage for accessibility of your application.
     * @param name {String} User defined name if this WebTest.
     * @param syntheticMonitorId {String} Unique ID of this WebTest. This is typically the same value as the Name field.
     */
    constructor(kind, locations, name, syntheticMonitorId) { 
        
        WebTestProperties.initialize(this, kind, locations, name, syntheticMonitorId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, kind, locations, name, syntheticMonitorId) { 
        obj['Frequency'] = 300;
        obj['Kind'] = kind || 'ping';
        obj['Locations'] = locations;
        obj['Name'] = name;
        obj['SyntheticMonitorId'] = syntheticMonitorId;
        obj['Timeout'] = 30;
    }

    /**
     * Constructs a <code>WebTestProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebTestProperties} obj Optional instance to populate.
     * @return {module:model/WebTestProperties} The populated <code>WebTestProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebTestProperties();

            if (data.hasOwnProperty('Configuration')) {
                obj['Configuration'] = WebTestPropertiesConfiguration.constructFromObject(data['Configuration']);
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Enabled')) {
                obj['Enabled'] = ApiClient.convertToType(data['Enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('Frequency')) {
                obj['Frequency'] = ApiClient.convertToType(data['Frequency'], 'Number');
            }
            if (data.hasOwnProperty('Kind')) {
                obj['Kind'] = ApiClient.convertToType(data['Kind'], 'String');
            }
            if (data.hasOwnProperty('Locations')) {
                obj['Locations'] = ApiClient.convertToType(data['Locations'], [WebTestGeolocation]);
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('RetryEnabled')) {
                obj['RetryEnabled'] = ApiClient.convertToType(data['RetryEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('SyntheticMonitorId')) {
                obj['SyntheticMonitorId'] = ApiClient.convertToType(data['SyntheticMonitorId'], 'String');
            }
            if (data.hasOwnProperty('Timeout')) {
                obj['Timeout'] = ApiClient.convertToType(data['Timeout'], 'Number');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebTestProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebTestProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WebTestProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Configuration`
        if (data['Configuration']) { // data not null
          WebTestPropertiesConfiguration.validateJSON(data['Configuration']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['Kind'] && !(typeof data['Kind'] === 'string' || data['Kind'] instanceof String)) {
            throw new Error("Expected the field `Kind` to be a primitive type in the JSON string but got " + data['Kind']);
        }
        if (data['Locations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Locations'])) {
                throw new Error("Expected the field `Locations` to be an array in the JSON data but got " + data['Locations']);
            }
            // validate the optional field `Locations` (array)
            for (const item of data['Locations']) {
                WebTestGeolocation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['SyntheticMonitorId'] && !(typeof data['SyntheticMonitorId'] === 'string' || data['SyntheticMonitorId'] instanceof String)) {
            throw new Error("Expected the field `SyntheticMonitorId` to be a primitive type in the JSON string but got " + data['SyntheticMonitorId']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}

WebTestProperties.RequiredProperties = ["Kind", "Locations", "Name", "SyntheticMonitorId"];

/**
 * @member {module:model/WebTestPropertiesConfiguration} Configuration
 */
WebTestProperties.prototype['Configuration'] = undefined;

/**
 * Purpose/user defined descriptive test for this WebTest.
 * @member {String} Description
 */
WebTestProperties.prototype['Description'] = undefined;

/**
 * Is the test actively being monitored.
 * @member {Boolean} Enabled
 */
WebTestProperties.prototype['Enabled'] = undefined;

/**
 * Interval in seconds between test runs for this WebTest. Default value is 300.
 * @member {Number} Frequency
 * @default 300
 */
WebTestProperties.prototype['Frequency'] = 300;

/**
 * The kind of web test this is, valid choices are ping and multistep.
 * @member {module:model/WebTestProperties.KindEnum} Kind
 * @default 'ping'
 */
WebTestProperties.prototype['Kind'] = 'ping';

/**
 * A list of where to physically run the tests from to give global coverage for accessibility of your application.
 * @member {Array.<module:model/WebTestGeolocation>} Locations
 */
WebTestProperties.prototype['Locations'] = undefined;

/**
 * User defined name if this WebTest.
 * @member {String} Name
 */
WebTestProperties.prototype['Name'] = undefined;

/**
 * Allow for retries should this WebTest fail.
 * @member {Boolean} RetryEnabled
 */
WebTestProperties.prototype['RetryEnabled'] = undefined;

/**
 * Unique ID of this WebTest. This is typically the same value as the Name field.
 * @member {String} SyntheticMonitorId
 */
WebTestProperties.prototype['SyntheticMonitorId'] = undefined;

/**
 * Seconds until this WebTest will timeout and fail. Default value is 30.
 * @member {Number} Timeout
 * @default 30
 */
WebTestProperties.prototype['Timeout'] = 30;

/**
 * Current state of this component, whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.
 * @member {String} provisioningState
 */
WebTestProperties.prototype['provisioningState'] = undefined;





/**
 * Allowed values for the <code>Kind</code> property.
 * @enum {String}
 * @readonly
 */
WebTestProperties['KindEnum'] = {

    /**
     * value: "ping"
     * @const
     */
    "ping": "ping",

    /**
     * value: "multistep"
     * @const
     */
    "multistep": "multistep"
};



export default WebTestProperties;

