/*
 * ApplicationInsightsManagementClient
 * Azure Application Insights client for web test based alerting.
 *
 * The version of the OpenAPI document: 2015-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WebTestGeolocation;
import org.openapitools.client.model.WebTestPropertiesConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata describing a web test for an Azure resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:33.107051-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebTestProperties {
  public static final String SERIALIZED_NAME_CONFIGURATION = "Configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private WebTestPropertiesConfiguration _configuration;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_FREQUENCY = "Frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private Integer frequency = 300;

  /**
   * The kind of web test this is, valid choices are ping and multistep.
   */
  @JsonAdapter(KindEnum.Adapter.class)
  public enum KindEnum {
    PING("ping"),
    
    MULTISTEP("multistep");

    private String value;

    KindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KindEnum fromValue(String value) {
      for (KindEnum b : KindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KIND = "Kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private KindEnum kind = KindEnum.PING;

  public static final String SERIALIZED_NAME_LOCATIONS = "Locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<WebTestGeolocation> locations = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RETRY_ENABLED = "RetryEnabled";
  @SerializedName(SERIALIZED_NAME_RETRY_ENABLED)
  private Boolean retryEnabled;

  public static final String SERIALIZED_NAME_SYNTHETIC_MONITOR_ID = "SyntheticMonitorId";
  @SerializedName(SERIALIZED_NAME_SYNTHETIC_MONITOR_ID)
  private String syntheticMonitorId;

  public static final String SERIALIZED_NAME_TIMEOUT = "Timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Integer timeout = 30;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public WebTestProperties() {
  }

  public WebTestProperties(
     String provisioningState
  ) {
    this();
    this.provisioningState = provisioningState;
  }

  public WebTestProperties _configuration(WebTestPropertiesConfiguration _configuration) {
    this._configuration = _configuration;
    return this;
  }

  /**
   * Get _configuration
   * @return _configuration
   */
  @javax.annotation.Nullable
  public WebTestPropertiesConfiguration getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(WebTestPropertiesConfiguration _configuration) {
    this._configuration = _configuration;
  }


  public WebTestProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Purpose/user defined descriptive test for this WebTest.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public WebTestProperties enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Is the test actively being monitored.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public WebTestProperties frequency(Integer frequency) {
    this.frequency = frequency;
    return this;
  }

  /**
   * Interval in seconds between test runs for this WebTest. Default value is 300.
   * @return frequency
   */
  @javax.annotation.Nullable
  public Integer getFrequency() {
    return frequency;
  }

  public void setFrequency(Integer frequency) {
    this.frequency = frequency;
  }


  public WebTestProperties kind(KindEnum kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The kind of web test this is, valid choices are ping and multistep.
   * @return kind
   */
  @javax.annotation.Nonnull
  public KindEnum getKind() {
    return kind;
  }

  public void setKind(KindEnum kind) {
    this.kind = kind;
  }


  public WebTestProperties locations(List<WebTestGeolocation> locations) {
    this.locations = locations;
    return this;
  }

  public WebTestProperties addLocationsItem(WebTestGeolocation locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * A list of where to physically run the tests from to give global coverage for accessibility of your application.
   * @return locations
   */
  @javax.annotation.Nonnull
  public List<WebTestGeolocation> getLocations() {
    return locations;
  }

  public void setLocations(List<WebTestGeolocation> locations) {
    this.locations = locations;
  }


  public WebTestProperties name(String name) {
    this.name = name;
    return this;
  }

  /**
   * User defined name if this WebTest.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public WebTestProperties retryEnabled(Boolean retryEnabled) {
    this.retryEnabled = retryEnabled;
    return this;
  }

  /**
   * Allow for retries should this WebTest fail.
   * @return retryEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRetryEnabled() {
    return retryEnabled;
  }

  public void setRetryEnabled(Boolean retryEnabled) {
    this.retryEnabled = retryEnabled;
  }


  public WebTestProperties syntheticMonitorId(String syntheticMonitorId) {
    this.syntheticMonitorId = syntheticMonitorId;
    return this;
  }

  /**
   * Unique ID of this WebTest. This is typically the same value as the Name field.
   * @return syntheticMonitorId
   */
  @javax.annotation.Nonnull
  public String getSyntheticMonitorId() {
    return syntheticMonitorId;
  }

  public void setSyntheticMonitorId(String syntheticMonitorId) {
    this.syntheticMonitorId = syntheticMonitorId;
  }


  public WebTestProperties timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Seconds until this WebTest will timeout and fail. Default value is 30.
   * @return timeout
   */
  @javax.annotation.Nullable
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }


  /**
   * Current state of this component, whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebTestProperties webTestProperties = (WebTestProperties) o;
    return Objects.equals(this._configuration, webTestProperties._configuration) &&
        Objects.equals(this.description, webTestProperties.description) &&
        Objects.equals(this.enabled, webTestProperties.enabled) &&
        Objects.equals(this.frequency, webTestProperties.frequency) &&
        Objects.equals(this.kind, webTestProperties.kind) &&
        Objects.equals(this.locations, webTestProperties.locations) &&
        Objects.equals(this.name, webTestProperties.name) &&
        Objects.equals(this.retryEnabled, webTestProperties.retryEnabled) &&
        Objects.equals(this.syntheticMonitorId, webTestProperties.syntheticMonitorId) &&
        Objects.equals(this.timeout, webTestProperties.timeout) &&
        Objects.equals(this.provisioningState, webTestProperties.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_configuration, description, enabled, frequency, kind, locations, name, retryEnabled, syntheticMonitorId, timeout, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebTestProperties {\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    retryEnabled: ").append(toIndentedString(retryEnabled)).append("\n");
    sb.append("    syntheticMonitorId: ").append(toIndentedString(syntheticMonitorId)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Configuration");
    openapiFields.add("Description");
    openapiFields.add("Enabled");
    openapiFields.add("Frequency");
    openapiFields.add("Kind");
    openapiFields.add("Locations");
    openapiFields.add("Name");
    openapiFields.add("RetryEnabled");
    openapiFields.add("SyntheticMonitorId");
    openapiFields.add("Timeout");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Kind");
    openapiRequiredFields.add("Locations");
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("SyntheticMonitorId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebTestProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebTestProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebTestProperties is not found in the empty JSON string", WebTestProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebTestProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebTestProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebTestProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Configuration`
      if (jsonObj.get("Configuration") != null && !jsonObj.get("Configuration").isJsonNull()) {
        WebTestPropertiesConfiguration.validateJsonElement(jsonObj.get("Configuration"));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if (!jsonObj.get("Kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Kind").toString()));
      }
      // validate the required field `Kind`
      KindEnum.validateJsonElement(jsonObj.get("Kind"));
      // ensure the json data is an array
      if (!jsonObj.get("Locations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Locations` to be an array in the JSON string but got `%s`", jsonObj.get("Locations").toString()));
      }

      JsonArray jsonArraylocations = jsonObj.getAsJsonArray("Locations");
      // validate the required field `Locations` (array)
      for (int i = 0; i < jsonArraylocations.size(); i++) {
        WebTestGeolocation.validateJsonElement(jsonArraylocations.get(i));
      };
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (!jsonObj.get("SyntheticMonitorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SyntheticMonitorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SyntheticMonitorId").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebTestProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebTestProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebTestProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebTestProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<WebTestProperties>() {
           @Override
           public void write(JsonWriter out, WebTestProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebTestProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebTestProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebTestProperties
   * @throws IOException if the JSON string is invalid with respect to WebTestProperties
   */
  public static WebTestProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebTestProperties.class);
  }

  /**
   * Convert an instance of WebTestProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

