/**
 * ApplicationInsightsManagementClient
 * Azure Application Insights client for web test based alerting.
 *
 * The version of the OpenAPI document: 2015-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebTestProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebTestProperties::OAIWebTestProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebTestProperties::OAIWebTestProperties() {
    this->initializeModel();
}

OAIWebTestProperties::~OAIWebTestProperties() {}

void OAIWebTestProperties::initializeModel() {

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_retry_enabled_isSet = false;
    m_retry_enabled_isValid = false;

    m_synthetic_monitor_id_isSet = false;
    m_synthetic_monitor_id_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIWebTestProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebTestProperties::fromJsonObject(QJsonObject json) {

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("Configuration")]);
    m_configuration_isSet = !json[QString("Configuration")].isNull() && m_configuration_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("Frequency")]);
    m_frequency_isSet = !json[QString("Frequency")].isNull() && m_frequency_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("Kind")]);
    m_kind_isSet = !json[QString("Kind")].isNull() && m_kind_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("Locations")]);
    m_locations_isSet = !json[QString("Locations")].isNull() && m_locations_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_retry_enabled_isValid = ::OpenAPI::fromJsonValue(m_retry_enabled, json[QString("RetryEnabled")]);
    m_retry_enabled_isSet = !json[QString("RetryEnabled")].isNull() && m_retry_enabled_isValid;

    m_synthetic_monitor_id_isValid = ::OpenAPI::fromJsonValue(m_synthetic_monitor_id, json[QString("SyntheticMonitorId")]);
    m_synthetic_monitor_id_isSet = !json[QString("SyntheticMonitorId")].isNull() && m_synthetic_monitor_id_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("Timeout")]);
    m_timeout_isSet = !json[QString("Timeout")].isNull() && m_timeout_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIWebTestProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebTestProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration.isSet()) {
        obj.insert(QString("Configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("Frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_kind_isSet) {
        obj.insert(QString("Kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("Locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_retry_enabled_isSet) {
        obj.insert(QString("RetryEnabled"), ::OpenAPI::toJsonValue(m_retry_enabled));
    }
    if (m_synthetic_monitor_id_isSet) {
        obj.insert(QString("SyntheticMonitorId"), ::OpenAPI::toJsonValue(m_synthetic_monitor_id));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("Timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

OAIWebTestProperties_Configuration OAIWebTestProperties::getConfiguration() const {
    return m_configuration;
}
void OAIWebTestProperties::setConfiguration(const OAIWebTestProperties_Configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIWebTestProperties::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIWebTestProperties::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QString OAIWebTestProperties::getDescription() const {
    return m_description;
}
void OAIWebTestProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWebTestProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWebTestProperties::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIWebTestProperties::isEnabled() const {
    return m_enabled;
}
void OAIWebTestProperties::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIWebTestProperties::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIWebTestProperties::is_enabled_Valid() const{
    return m_enabled_isValid;
}

qint32 OAIWebTestProperties::getFrequency() const {
    return m_frequency;
}
void OAIWebTestProperties::setFrequency(const qint32 &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIWebTestProperties::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIWebTestProperties::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QString OAIWebTestProperties::getKind() const {
    return m_kind;
}
void OAIWebTestProperties::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIWebTestProperties::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIWebTestProperties::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<OAIWebTestGeolocation> OAIWebTestProperties::getLocations() const {
    return m_locations;
}
void OAIWebTestProperties::setLocations(const QList<OAIWebTestGeolocation> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIWebTestProperties::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIWebTestProperties::is_locations_Valid() const{
    return m_locations_isValid;
}

QString OAIWebTestProperties::getName() const {
    return m_name;
}
void OAIWebTestProperties::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWebTestProperties::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWebTestProperties::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIWebTestProperties::isRetryEnabled() const {
    return m_retry_enabled;
}
void OAIWebTestProperties::setRetryEnabled(const bool &retry_enabled) {
    m_retry_enabled = retry_enabled;
    m_retry_enabled_isSet = true;
}

bool OAIWebTestProperties::is_retry_enabled_Set() const{
    return m_retry_enabled_isSet;
}

bool OAIWebTestProperties::is_retry_enabled_Valid() const{
    return m_retry_enabled_isValid;
}

QString OAIWebTestProperties::getSyntheticMonitorId() const {
    return m_synthetic_monitor_id;
}
void OAIWebTestProperties::setSyntheticMonitorId(const QString &synthetic_monitor_id) {
    m_synthetic_monitor_id = synthetic_monitor_id;
    m_synthetic_monitor_id_isSet = true;
}

bool OAIWebTestProperties::is_synthetic_monitor_id_Set() const{
    return m_synthetic_monitor_id_isSet;
}

bool OAIWebTestProperties::is_synthetic_monitor_id_Valid() const{
    return m_synthetic_monitor_id_isValid;
}

qint32 OAIWebTestProperties::getTimeout() const {
    return m_timeout;
}
void OAIWebTestProperties::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIWebTestProperties::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIWebTestProperties::is_timeout_Valid() const{
    return m_timeout_isValid;
}

QString OAIWebTestProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIWebTestProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIWebTestProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIWebTestProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIWebTestProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synthetic_monitor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebTestProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_kind_isValid && m_locations_isValid && m_name_isValid && m_synthetic_monitor_id_isValid && true;
}

} // namespace OpenAPI
