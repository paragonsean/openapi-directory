/**
 * ApplicationInsightsManagementClient
 * Azure Application Insights client for web test based alerting.
 *
 * The version of the OpenAPI document: 2015-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAITagsResource.h"
#include "OAIWebTest.h"
#include "OAIWebTestListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  web_test_name QString [required]
    * @param[in]  web_test_definition OAIWebTest [required]
    */
    virtual void webTestsCreateOrUpdate(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &web_test_name, const OAIWebTest &web_test_definition);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  web_test_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void webTestsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &web_test_name, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  web_test_name QString [required]
    */
    virtual void webTestsGet(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &web_test_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void webTestsList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  component_name QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void webTestsListByComponent(const QString &component_name, const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void webTestsListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  web_test_name QString [required]
    * @param[in]  web_test_tags OAITagsResource [required]
    */
    virtual void webTestsUpdateTags(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &web_test_name, const OAITagsResource &web_test_tags);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void webTestsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void webTestsDeleteCallback(OAIHttpRequestWorker *worker);
    void webTestsGetCallback(OAIHttpRequestWorker *worker);
    void webTestsListCallback(OAIHttpRequestWorker *worker);
    void webTestsListByComponentCallback(OAIHttpRequestWorker *worker);
    void webTestsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void webTestsUpdateTagsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void webTestsCreateOrUpdateSignal(OAIWebTest summary);
    void webTestsDeleteSignal();
    void webTestsGetSignal(OAIWebTest summary);
    void webTestsListSignal(OAIWebTestListResult summary);
    void webTestsListByComponentSignal(OAIWebTestListResult summary);
    void webTestsListByResourceGroupSignal(OAIWebTestListResult summary);
    void webTestsUpdateTagsSignal(OAIWebTest summary);


    void webTestsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWebTest summary);
    void webTestsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void webTestsGetSignalFull(OAIHttpRequestWorker *worker, OAIWebTest summary);
    void webTestsListSignalFull(OAIHttpRequestWorker *worker, OAIWebTestListResult summary);
    void webTestsListByComponentSignalFull(OAIHttpRequestWorker *worker, OAIWebTestListResult summary);
    void webTestsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIWebTestListResult summary);
    void webTestsUpdateTagsSignalFull(OAIHttpRequestWorker *worker, OAIWebTest summary);

    Q_DECL_DEPRECATED_X("Use webTestsCreateOrUpdateSignalError() instead")
    void webTestsCreateOrUpdateSignalE(OAIWebTest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webTestsCreateOrUpdateSignalError(OAIWebTest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webTestsDeleteSignalError() instead")
    void webTestsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void webTestsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webTestsGetSignalError() instead")
    void webTestsGetSignalE(OAIWebTest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webTestsGetSignalError(OAIWebTest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webTestsListSignalError() instead")
    void webTestsListSignalE(OAIWebTestListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webTestsListSignalError(OAIWebTestListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webTestsListByComponentSignalError() instead")
    void webTestsListByComponentSignalE(OAIWebTestListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webTestsListByComponentSignalError(OAIWebTestListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webTestsListByResourceGroupSignalError() instead")
    void webTestsListByResourceGroupSignalE(OAIWebTestListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webTestsListByResourceGroupSignalError(OAIWebTestListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webTestsUpdateTagsSignalError() instead")
    void webTestsUpdateTagsSignalE(OAIWebTest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void webTestsUpdateTagsSignalError(OAIWebTest summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use webTestsCreateOrUpdateSignalErrorFull() instead")
    void webTestsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webTestsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webTestsDeleteSignalErrorFull() instead")
    void webTestsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webTestsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webTestsGetSignalErrorFull() instead")
    void webTestsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webTestsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webTestsListSignalErrorFull() instead")
    void webTestsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webTestsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webTestsListByComponentSignalErrorFull() instead")
    void webTestsListByComponentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webTestsListByComponentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webTestsListByResourceGroupSignalErrorFull() instead")
    void webTestsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webTestsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use webTestsUpdateTagsSignalErrorFull() instead")
    void webTestsUpdateTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void webTestsUpdateTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
