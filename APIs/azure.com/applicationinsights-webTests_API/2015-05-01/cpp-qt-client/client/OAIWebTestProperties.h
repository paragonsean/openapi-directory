/**
 * ApplicationInsightsManagementClient
 * Azure Application Insights client for web test based alerting.
 *
 * The version of the OpenAPI document: 2015-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWebTestProperties.h
 *
 * Metadata describing a web test for an Azure resource.
 */

#ifndef OAIWebTestProperties_H
#define OAIWebTestProperties_H

#include <QJsonObject>

#include "OAIWebTestGeolocation.h"
#include "OAIWebTestProperties_Configuration.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIWebTestProperties_Configuration;
class OAIWebTestGeolocation;

class OAIWebTestProperties : public OAIObject {
public:
    OAIWebTestProperties();
    OAIWebTestProperties(QString json);
    ~OAIWebTestProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIWebTestProperties_Configuration getConfiguration() const;
    void setConfiguration(const OAIWebTestProperties_Configuration &configuration);
    bool is_configuration_Set() const;
    bool is_configuration_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    qint32 getFrequency() const;
    void setFrequency(const qint32 &frequency);
    bool is_frequency_Set() const;
    bool is_frequency_Valid() const;

    QString getKind() const;
    void setKind(const QString &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    QList<OAIWebTestGeolocation> getLocations() const;
    void setLocations(const QList<OAIWebTestGeolocation> &locations);
    bool is_locations_Set() const;
    bool is_locations_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isRetryEnabled() const;
    void setRetryEnabled(const bool &retry_enabled);
    bool is_retry_enabled_Set() const;
    bool is_retry_enabled_Valid() const;

    QString getSyntheticMonitorId() const;
    void setSyntheticMonitorId(const QString &synthetic_monitor_id);
    bool is_synthetic_monitor_id_Set() const;
    bool is_synthetic_monitor_id_Valid() const;

    qint32 getTimeout() const;
    void setTimeout(const qint32 &timeout);
    bool is_timeout_Set() const;
    bool is_timeout_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIWebTestProperties_Configuration m_configuration;
    bool m_configuration_isSet;
    bool m_configuration_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    qint32 m_frequency;
    bool m_frequency_isSet;
    bool m_frequency_isValid;

    QString m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;

    QList<OAIWebTestGeolocation> m_locations;
    bool m_locations_isSet;
    bool m_locations_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_retry_enabled;
    bool m_retry_enabled_isSet;
    bool m_retry_enabled_isValid;

    QString m_synthetic_monitor_id;
    bool m_synthetic_monitor_id_isSet;
    bool m_synthetic_monitor_id_isValid;

    qint32 m_timeout;
    bool m_timeout_isSet;
    bool m_timeout_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWebTestProperties)

#endif // OAIWebTestProperties_H
