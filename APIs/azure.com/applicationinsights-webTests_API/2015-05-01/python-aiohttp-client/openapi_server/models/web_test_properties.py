# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.web_test_geolocation import WebTestGeolocation
from openapi_server.models.web_test_properties_configuration import WebTestPropertiesConfiguration
from openapi_server import util


class WebTestProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration: WebTestPropertiesConfiguration=None, description: str=None, enabled: bool=None, frequency: int=300, kind: str='ping', locations: List[WebTestGeolocation]=None, name: str=None, retry_enabled: bool=None, synthetic_monitor_id: str=None, timeout: int=30, provisioning_state: str=None):
        """WebTestProperties - a model defined in OpenAPI

        :param configuration: The configuration of this WebTestProperties.
        :param description: The description of this WebTestProperties.
        :param enabled: The enabled of this WebTestProperties.
        :param frequency: The frequency of this WebTestProperties.
        :param kind: The kind of this WebTestProperties.
        :param locations: The locations of this WebTestProperties.
        :param name: The name of this WebTestProperties.
        :param retry_enabled: The retry_enabled of this WebTestProperties.
        :param synthetic_monitor_id: The synthetic_monitor_id of this WebTestProperties.
        :param timeout: The timeout of this WebTestProperties.
        :param provisioning_state: The provisioning_state of this WebTestProperties.
        """
        self.openapi_types = {
            'configuration': WebTestPropertiesConfiguration,
            'description': str,
            'enabled': bool,
            'frequency': int,
            'kind': str,
            'locations': List[WebTestGeolocation],
            'name': str,
            'retry_enabled': bool,
            'synthetic_monitor_id': str,
            'timeout': int,
            'provisioning_state': str
        }

        self.attribute_map = {
            'configuration': 'Configuration',
            'description': 'Description',
            'enabled': 'Enabled',
            'frequency': 'Frequency',
            'kind': 'Kind',
            'locations': 'Locations',
            'name': 'Name',
            'retry_enabled': 'RetryEnabled',
            'synthetic_monitor_id': 'SyntheticMonitorId',
            'timeout': 'Timeout',
            'provisioning_state': 'provisioningState'
        }

        self._configuration = configuration
        self._description = description
        self._enabled = enabled
        self._frequency = frequency
        self._kind = kind
        self._locations = locations
        self._name = name
        self._retry_enabled = retry_enabled
        self._synthetic_monitor_id = synthetic_monitor_id
        self._timeout = timeout
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebTestProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebTestProperties of this WebTestProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self):
        """Gets the configuration of this WebTestProperties.


        :return: The configuration of this WebTestProperties.
        :rtype: WebTestPropertiesConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this WebTestProperties.


        :param configuration: The configuration of this WebTestProperties.
        :type configuration: WebTestPropertiesConfiguration
        """

        self._configuration = configuration

    @property
    def description(self):
        """Gets the description of this WebTestProperties.

        Purpose/user defined descriptive test for this WebTest.

        :return: The description of this WebTestProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WebTestProperties.

        Purpose/user defined descriptive test for this WebTest.

        :param description: The description of this WebTestProperties.
        :type description: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this WebTestProperties.

        Is the test actively being monitored.

        :return: The enabled of this WebTestProperties.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this WebTestProperties.

        Is the test actively being monitored.

        :param enabled: The enabled of this WebTestProperties.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def frequency(self):
        """Gets the frequency of this WebTestProperties.

        Interval in seconds between test runs for this WebTest. Default value is 300.

        :return: The frequency of this WebTestProperties.
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this WebTestProperties.

        Interval in seconds between test runs for this WebTest. Default value is 300.

        :param frequency: The frequency of this WebTestProperties.
        :type frequency: int
        """

        self._frequency = frequency

    @property
    def kind(self):
        """Gets the kind of this WebTestProperties.

        The kind of web test this is, valid choices are ping and multistep.

        :return: The kind of this WebTestProperties.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this WebTestProperties.

        The kind of web test this is, valid choices are ping and multistep.

        :param kind: The kind of this WebTestProperties.
        :type kind: str
        """
        allowed_values = ["ping", "multistep"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def locations(self):
        """Gets the locations of this WebTestProperties.

        A list of where to physically run the tests from to give global coverage for accessibility of your application.

        :return: The locations of this WebTestProperties.
        :rtype: List[WebTestGeolocation]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this WebTestProperties.

        A list of where to physically run the tests from to give global coverage for accessibility of your application.

        :param locations: The locations of this WebTestProperties.
        :type locations: List[WebTestGeolocation]
        """
        if locations is None:
            raise ValueError("Invalid value for `locations`, must not be `None`")

        self._locations = locations

    @property
    def name(self):
        """Gets the name of this WebTestProperties.

        User defined name if this WebTest.

        :return: The name of this WebTestProperties.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WebTestProperties.

        User defined name if this WebTest.

        :param name: The name of this WebTestProperties.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def retry_enabled(self):
        """Gets the retry_enabled of this WebTestProperties.

        Allow for retries should this WebTest fail.

        :return: The retry_enabled of this WebTestProperties.
        :rtype: bool
        """
        return self._retry_enabled

    @retry_enabled.setter
    def retry_enabled(self, retry_enabled):
        """Sets the retry_enabled of this WebTestProperties.

        Allow for retries should this WebTest fail.

        :param retry_enabled: The retry_enabled of this WebTestProperties.
        :type retry_enabled: bool
        """

        self._retry_enabled = retry_enabled

    @property
    def synthetic_monitor_id(self):
        """Gets the synthetic_monitor_id of this WebTestProperties.

        Unique ID of this WebTest. This is typically the same value as the Name field.

        :return: The synthetic_monitor_id of this WebTestProperties.
        :rtype: str
        """
        return self._synthetic_monitor_id

    @synthetic_monitor_id.setter
    def synthetic_monitor_id(self, synthetic_monitor_id):
        """Sets the synthetic_monitor_id of this WebTestProperties.

        Unique ID of this WebTest. This is typically the same value as the Name field.

        :param synthetic_monitor_id: The synthetic_monitor_id of this WebTestProperties.
        :type synthetic_monitor_id: str
        """
        if synthetic_monitor_id is None:
            raise ValueError("Invalid value for `synthetic_monitor_id`, must not be `None`")

        self._synthetic_monitor_id = synthetic_monitor_id

    @property
    def timeout(self):
        """Gets the timeout of this WebTestProperties.

        Seconds until this WebTest will timeout and fail. Default value is 30.

        :return: The timeout of this WebTestProperties.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this WebTestProperties.

        Seconds until this WebTest will timeout and fail. Default value is 30.

        :param timeout: The timeout of this WebTestProperties.
        :type timeout: int
        """

        self._timeout = timeout

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this WebTestProperties.

        Current state of this component, whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.

        :return: The provisioning_state of this WebTestProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this WebTestProperties.

        Current state of this component, whether or not is has been provisioned within the resource group it is defined. Users cannot change this value but are able to read from it. Values will include Succeeded, Deploying, Canceled, and Failed.

        :param provisioning_state: The provisioning_state of this WebTestProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state
