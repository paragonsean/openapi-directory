/**
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2015-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContainerServiceOrchestratorProfile model module.
 * @module model/ContainerServiceOrchestratorProfile
 * @version 2015-11-01-preview
 */
class ContainerServiceOrchestratorProfile {
    /**
     * Constructs a new <code>ContainerServiceOrchestratorProfile</code>.
     * Profile for Orchestrator
     * @alias module:model/ContainerServiceOrchestratorProfile
     */
    constructor() { 
        
        ContainerServiceOrchestratorProfile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContainerServiceOrchestratorProfile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerServiceOrchestratorProfile} obj Optional instance to populate.
     * @return {module:model/ContainerServiceOrchestratorProfile} The populated <code>ContainerServiceOrchestratorProfile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerServiceOrchestratorProfile();

            if (data.hasOwnProperty('orchestratorType')) {
                obj['orchestratorType'] = ApiClient.convertToType(data['orchestratorType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContainerServiceOrchestratorProfile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContainerServiceOrchestratorProfile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['orchestratorType'] && !(typeof data['orchestratorType'] === 'string' || data['orchestratorType'] instanceof String)) {
            throw new Error("Expected the field `orchestratorType` to be a primitive type in the JSON string but got " + data['orchestratorType']);
        }

        return true;
    }


}



/**
 * Specifies what orchestrator will be used to manage container cluster resources.
 * @member {module:model/ContainerServiceOrchestratorProfile.OrchestratorTypeEnum} orchestratorType
 */
ContainerServiceOrchestratorProfile.prototype['orchestratorType'] = undefined;





/**
 * Allowed values for the <code>orchestratorType</code> property.
 * @enum {String}
 * @readonly
 */
ContainerServiceOrchestratorProfile['OrchestratorTypeEnum'] = {

    /**
     * value: "Mesos"
     * @const
     */
    "Mesos": "Mesos",

    /**
     * value: "SwarmPreview"
     * @const
     */
    "SwarmPreview": "SwarmPreview",

    /**
     * value: "DCOS"
     * @const
     */
    "DCOS": "DCOS"
};



export default ContainerServiceOrchestratorProfile;

