/**
 * ContainerServiceClient
 * The Container Service Client.
 *
 * The version of the OpenAPI document: 2015-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerServiceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerServiceProperties::OAIContainerServiceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerServiceProperties::OAIContainerServiceProperties() {
    this->initializeModel();
}

OAIContainerServiceProperties::~OAIContainerServiceProperties() {}

void OAIContainerServiceProperties::initializeModel() {

    m_agent_pool_profiles_isSet = false;
    m_agent_pool_profiles_isValid = false;

    m_diagnostics_profile_isSet = false;
    m_diagnostics_profile_isValid = false;

    m_linux_profile_isSet = false;
    m_linux_profile_isValid = false;

    m_master_profile_isSet = false;
    m_master_profile_isValid = false;

    m_orchestrator_profile_isSet = false;
    m_orchestrator_profile_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_windows_profile_isSet = false;
    m_windows_profile_isValid = false;
}

void OAIContainerServiceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerServiceProperties::fromJsonObject(QJsonObject json) {

    m_agent_pool_profiles_isValid = ::OpenAPI::fromJsonValue(m_agent_pool_profiles, json[QString("agentPoolProfiles")]);
    m_agent_pool_profiles_isSet = !json[QString("agentPoolProfiles")].isNull() && m_agent_pool_profiles_isValid;

    m_diagnostics_profile_isValid = ::OpenAPI::fromJsonValue(m_diagnostics_profile, json[QString("diagnosticsProfile")]);
    m_diagnostics_profile_isSet = !json[QString("diagnosticsProfile")].isNull() && m_diagnostics_profile_isValid;

    m_linux_profile_isValid = ::OpenAPI::fromJsonValue(m_linux_profile, json[QString("linuxProfile")]);
    m_linux_profile_isSet = !json[QString("linuxProfile")].isNull() && m_linux_profile_isValid;

    m_master_profile_isValid = ::OpenAPI::fromJsonValue(m_master_profile, json[QString("masterProfile")]);
    m_master_profile_isSet = !json[QString("masterProfile")].isNull() && m_master_profile_isValid;

    m_orchestrator_profile_isValid = ::OpenAPI::fromJsonValue(m_orchestrator_profile, json[QString("orchestratorProfile")]);
    m_orchestrator_profile_isSet = !json[QString("orchestratorProfile")].isNull() && m_orchestrator_profile_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_windows_profile_isValid = ::OpenAPI::fromJsonValue(m_windows_profile, json[QString("windowsProfile")]);
    m_windows_profile_isSet = !json[QString("windowsProfile")].isNull() && m_windows_profile_isValid;
}

QString OAIContainerServiceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerServiceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_pool_profiles.size() > 0) {
        obj.insert(QString("agentPoolProfiles"), ::OpenAPI::toJsonValue(m_agent_pool_profiles));
    }
    if (m_diagnostics_profile.isSet()) {
        obj.insert(QString("diagnosticsProfile"), ::OpenAPI::toJsonValue(m_diagnostics_profile));
    }
    if (m_linux_profile.isSet()) {
        obj.insert(QString("linuxProfile"), ::OpenAPI::toJsonValue(m_linux_profile));
    }
    if (m_master_profile.isSet()) {
        obj.insert(QString("masterProfile"), ::OpenAPI::toJsonValue(m_master_profile));
    }
    if (m_orchestrator_profile.isSet()) {
        obj.insert(QString("orchestratorProfile"), ::OpenAPI::toJsonValue(m_orchestrator_profile));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_windows_profile.isSet()) {
        obj.insert(QString("windowsProfile"), ::OpenAPI::toJsonValue(m_windows_profile));
    }
    return obj;
}

QList<OAIContainerServiceAgentPoolProfile> OAIContainerServiceProperties::getAgentPoolProfiles() const {
    return m_agent_pool_profiles;
}
void OAIContainerServiceProperties::setAgentPoolProfiles(const QList<OAIContainerServiceAgentPoolProfile> &agent_pool_profiles) {
    m_agent_pool_profiles = agent_pool_profiles;
    m_agent_pool_profiles_isSet = true;
}

bool OAIContainerServiceProperties::is_agent_pool_profiles_Set() const{
    return m_agent_pool_profiles_isSet;
}

bool OAIContainerServiceProperties::is_agent_pool_profiles_Valid() const{
    return m_agent_pool_profiles_isValid;
}

OAIContainerServiceDiagnosticsProfile OAIContainerServiceProperties::getDiagnosticsProfile() const {
    return m_diagnostics_profile;
}
void OAIContainerServiceProperties::setDiagnosticsProfile(const OAIContainerServiceDiagnosticsProfile &diagnostics_profile) {
    m_diagnostics_profile = diagnostics_profile;
    m_diagnostics_profile_isSet = true;
}

bool OAIContainerServiceProperties::is_diagnostics_profile_Set() const{
    return m_diagnostics_profile_isSet;
}

bool OAIContainerServiceProperties::is_diagnostics_profile_Valid() const{
    return m_diagnostics_profile_isValid;
}

OAIContainerServiceLinuxProfile OAIContainerServiceProperties::getLinuxProfile() const {
    return m_linux_profile;
}
void OAIContainerServiceProperties::setLinuxProfile(const OAIContainerServiceLinuxProfile &linux_profile) {
    m_linux_profile = linux_profile;
    m_linux_profile_isSet = true;
}

bool OAIContainerServiceProperties::is_linux_profile_Set() const{
    return m_linux_profile_isSet;
}

bool OAIContainerServiceProperties::is_linux_profile_Valid() const{
    return m_linux_profile_isValid;
}

OAIContainerServiceMasterProfile OAIContainerServiceProperties::getMasterProfile() const {
    return m_master_profile;
}
void OAIContainerServiceProperties::setMasterProfile(const OAIContainerServiceMasterProfile &master_profile) {
    m_master_profile = master_profile;
    m_master_profile_isSet = true;
}

bool OAIContainerServiceProperties::is_master_profile_Set() const{
    return m_master_profile_isSet;
}

bool OAIContainerServiceProperties::is_master_profile_Valid() const{
    return m_master_profile_isValid;
}

OAIContainerServiceOrchestratorProfile OAIContainerServiceProperties::getOrchestratorProfile() const {
    return m_orchestrator_profile;
}
void OAIContainerServiceProperties::setOrchestratorProfile(const OAIContainerServiceOrchestratorProfile &orchestrator_profile) {
    m_orchestrator_profile = orchestrator_profile;
    m_orchestrator_profile_isSet = true;
}

bool OAIContainerServiceProperties::is_orchestrator_profile_Set() const{
    return m_orchestrator_profile_isSet;
}

bool OAIContainerServiceProperties::is_orchestrator_profile_Valid() const{
    return m_orchestrator_profile_isValid;
}

QString OAIContainerServiceProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIContainerServiceProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIContainerServiceProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIContainerServiceProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIContainerServiceWindowsProfile OAIContainerServiceProperties::getWindowsProfile() const {
    return m_windows_profile;
}
void OAIContainerServiceProperties::setWindowsProfile(const OAIContainerServiceWindowsProfile &windows_profile) {
    m_windows_profile = windows_profile;
    m_windows_profile_isSet = true;
}

bool OAIContainerServiceProperties::is_windows_profile_Set() const{
    return m_windows_profile_isSet;
}

bool OAIContainerServiceProperties::is_windows_profile_Valid() const{
    return m_windows_profile_isValid;
}

bool OAIContainerServiceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_pool_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_diagnostics_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_linux_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_orchestrator_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerServiceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_agent_pool_profiles_isValid && m_linux_profile_isValid && m_master_profile_isValid && true;
}

} // namespace OpenAPI
