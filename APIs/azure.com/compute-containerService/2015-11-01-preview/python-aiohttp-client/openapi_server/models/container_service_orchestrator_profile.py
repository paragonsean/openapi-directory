# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainerServiceOrchestratorProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, orchestrator_type: str=None):
        """ContainerServiceOrchestratorProfile - a model defined in OpenAPI

        :param orchestrator_type: The orchestrator_type of this ContainerServiceOrchestratorProfile.
        """
        self.openapi_types = {
            'orchestrator_type': str
        }

        self.attribute_map = {
            'orchestrator_type': 'orchestratorType'
        }

        self._orchestrator_type = orchestrator_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerServiceOrchestratorProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerServiceOrchestratorProfile of this ContainerServiceOrchestratorProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def orchestrator_type(self):
        """Gets the orchestrator_type of this ContainerServiceOrchestratorProfile.

        Specifies what orchestrator will be used to manage container cluster resources.

        :return: The orchestrator_type of this ContainerServiceOrchestratorProfile.
        :rtype: str
        """
        return self._orchestrator_type

    @orchestrator_type.setter
    def orchestrator_type(self, orchestrator_type):
        """Sets the orchestrator_type of this ContainerServiceOrchestratorProfile.

        Specifies what orchestrator will be used to manage container cluster resources.

        :param orchestrator_type: The orchestrator_type of this ContainerServiceOrchestratorProfile.
        :type orchestrator_type: str
        """
        allowed_values = ["Mesos", "SwarmPreview", "DCOS"]  # noqa: E501
        if orchestrator_type not in allowed_values:
            raise ValueError(
                "Invalid value for `orchestrator_type` ({0}), must be one of {1}"
                .format(orchestrator_type, allowed_values)
            )

        self._orchestrator_type = orchestrator_type
