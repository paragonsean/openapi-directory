# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainerServiceMasterProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, dns_prefix: str=None, fqdn: str=None):
        """ContainerServiceMasterProfile - a model defined in OpenAPI

        :param count: The count of this ContainerServiceMasterProfile.
        :param dns_prefix: The dns_prefix of this ContainerServiceMasterProfile.
        :param fqdn: The fqdn of this ContainerServiceMasterProfile.
        """
        self.openapi_types = {
            'count': int,
            'dns_prefix': str,
            'fqdn': str
        }

        self.attribute_map = {
            'count': 'count',
            'dns_prefix': 'dnsPrefix',
            'fqdn': 'fqdn'
        }

        self._count = count
        self._dns_prefix = dns_prefix
        self._fqdn = fqdn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerServiceMasterProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerServiceMasterProfile of this ContainerServiceMasterProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this ContainerServiceMasterProfile.

        Number of masters (VMs) in the container cluster

        :return: The count of this ContainerServiceMasterProfile.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ContainerServiceMasterProfile.

        Number of masters (VMs) in the container cluster

        :param count: The count of this ContainerServiceMasterProfile.
        :type count: int
        """
        allowed_values = [1, 3, 5]  # noqa: E501
        if count not in allowed_values:
            raise ValueError(
                "Invalid value for `count` ({0}), must be one of {1}"
                .format(count, allowed_values)
            )

        self._count = count

    @property
    def dns_prefix(self):
        """Gets the dns_prefix of this ContainerServiceMasterProfile.

        DNS prefix to be used to create FQDN for master

        :return: The dns_prefix of this ContainerServiceMasterProfile.
        :rtype: str
        """
        return self._dns_prefix

    @dns_prefix.setter
    def dns_prefix(self, dns_prefix):
        """Sets the dns_prefix of this ContainerServiceMasterProfile.

        DNS prefix to be used to create FQDN for master

        :param dns_prefix: The dns_prefix of this ContainerServiceMasterProfile.
        :type dns_prefix: str
        """
        if dns_prefix is None:
            raise ValueError("Invalid value for `dns_prefix`, must not be `None`")

        self._dns_prefix = dns_prefix

    @property
    def fqdn(self):
        """Gets the fqdn of this ContainerServiceMasterProfile.

        FQDN for the master

        :return: The fqdn of this ContainerServiceMasterProfile.
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this ContainerServiceMasterProfile.

        FQDN for the master

        :param fqdn: The fqdn of this ContainerServiceMasterProfile.
        :type fqdn: str
        """

        self._fqdn = fqdn
