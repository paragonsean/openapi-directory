/**
 * Azure Dedicated HSM Resource Provider
 * The Azure management API provides a RESTful set of web services that interact with Azure Dedicated HSM RP.
 *
 * The version of the OpenAPI document: 2018-10-31-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDedicatedHsmsApi_H
#define OAI_OAIDedicatedHsmsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDedicatedHsm.h"
#include "OAIDedicatedHsmError.h"
#include "OAIDedicatedHsmListResult.h"
#include "OAIDedicatedHsmPatchParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDedicatedHsmsApi : public QObject {
    Q_OBJECT

public:
    OAIDedicatedHsmsApi(const int timeOut = 0);
    ~OAIDedicatedHsmsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIDedicatedHsm [required]
    */
    virtual void dedicatedHsmCreateOrUpdate(const QString &resource_group_name, const QString &name, const QString &api_version, const QString &subscription_id, const OAIDedicatedHsm &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void dedicatedHsmDelete(const QString &resource_group_name, const QString &name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void dedicatedHsmGet(const QString &resource_group_name, const QString &name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void dedicatedHsmListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void dedicatedHsmListBySubscription(const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIDedicatedHsmPatchParameters [required]
    */
    virtual void dedicatedHsmUpdate(const QString &resource_group_name, const QString &name, const QString &api_version, const QString &subscription_id, const OAIDedicatedHsmPatchParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dedicatedHsmCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void dedicatedHsmDeleteCallback(OAIHttpRequestWorker *worker);
    void dedicatedHsmGetCallback(OAIHttpRequestWorker *worker);
    void dedicatedHsmListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void dedicatedHsmListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void dedicatedHsmUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dedicatedHsmCreateOrUpdateSignal(OAIDedicatedHsm summary);
    void dedicatedHsmDeleteSignal();
    void dedicatedHsmGetSignal(OAIDedicatedHsm summary);
    void dedicatedHsmListByResourceGroupSignal(OAIDedicatedHsmListResult summary);
    void dedicatedHsmListBySubscriptionSignal(OAIDedicatedHsmListResult summary);
    void dedicatedHsmUpdateSignal(OAIDedicatedHsm summary);


    void dedicatedHsmCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDedicatedHsm summary);
    void dedicatedHsmDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dedicatedHsmGetSignalFull(OAIHttpRequestWorker *worker, OAIDedicatedHsm summary);
    void dedicatedHsmListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIDedicatedHsmListResult summary);
    void dedicatedHsmListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIDedicatedHsmListResult summary);
    void dedicatedHsmUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDedicatedHsm summary);

    Q_DECL_DEPRECATED_X("Use dedicatedHsmCreateOrUpdateSignalError() instead")
    void dedicatedHsmCreateOrUpdateSignalE(OAIDedicatedHsm summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedHsmCreateOrUpdateSignalError(OAIDedicatedHsm summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedHsmDeleteSignalError() instead")
    void dedicatedHsmDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedHsmDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedHsmGetSignalError() instead")
    void dedicatedHsmGetSignalE(OAIDedicatedHsm summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedHsmGetSignalError(OAIDedicatedHsm summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedHsmListByResourceGroupSignalError() instead")
    void dedicatedHsmListByResourceGroupSignalE(OAIDedicatedHsmListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedHsmListByResourceGroupSignalError(OAIDedicatedHsmListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedHsmListBySubscriptionSignalError() instead")
    void dedicatedHsmListBySubscriptionSignalE(OAIDedicatedHsmListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedHsmListBySubscriptionSignalError(OAIDedicatedHsmListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedHsmUpdateSignalError() instead")
    void dedicatedHsmUpdateSignalE(OAIDedicatedHsm summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedHsmUpdateSignalError(OAIDedicatedHsm summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dedicatedHsmCreateOrUpdateSignalErrorFull() instead")
    void dedicatedHsmCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedHsmCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedHsmDeleteSignalErrorFull() instead")
    void dedicatedHsmDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedHsmDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedHsmGetSignalErrorFull() instead")
    void dedicatedHsmGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedHsmGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedHsmListByResourceGroupSignalErrorFull() instead")
    void dedicatedHsmListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedHsmListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedHsmListBySubscriptionSignalErrorFull() instead")
    void dedicatedHsmListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedHsmListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedHsmUpdateSignalErrorFull() instead")
    void dedicatedHsmUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedHsmUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
