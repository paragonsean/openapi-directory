# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_entity_reference import ApiEntityReference
from openapi_server.models.network_interface import NetworkInterface
from openapi_server import util


class NetworkProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, network_interfaces: List[NetworkInterface]=None, subnet: ApiEntityReference=None):
        """NetworkProfile - a model defined in OpenAPI

        :param network_interfaces: The network_interfaces of this NetworkProfile.
        :param subnet: The subnet of this NetworkProfile.
        """
        self.openapi_types = {
            'network_interfaces': List[NetworkInterface],
            'subnet': ApiEntityReference
        }

        self.attribute_map = {
            'network_interfaces': 'networkInterfaces',
            'subnet': 'subnet'
        }

        self._network_interfaces = network_interfaces
        self._subnet = subnet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkProfile of this NetworkProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def network_interfaces(self):
        """Gets the network_interfaces of this NetworkProfile.

        Specifies the list of resource Ids for the network interfaces associated with the dedicated HSM.

        :return: The network_interfaces of this NetworkProfile.
        :rtype: List[NetworkInterface]
        """
        return self._network_interfaces

    @network_interfaces.setter
    def network_interfaces(self, network_interfaces):
        """Sets the network_interfaces of this NetworkProfile.

        Specifies the list of resource Ids for the network interfaces associated with the dedicated HSM.

        :param network_interfaces: The network_interfaces of this NetworkProfile.
        :type network_interfaces: List[NetworkInterface]
        """

        self._network_interfaces = network_interfaces

    @property
    def subnet(self):
        """Gets the subnet of this NetworkProfile.


        :return: The subnet of this NetworkProfile.
        :rtype: ApiEntityReference
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this NetworkProfile.


        :param subnet: The subnet of this NetworkProfile.
        :type subnet: ApiEntityReference
        """

        self._subnet = subnet
