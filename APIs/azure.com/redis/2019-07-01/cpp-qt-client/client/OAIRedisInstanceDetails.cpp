/**
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRedisInstanceDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRedisInstanceDetails::OAIRedisInstanceDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRedisInstanceDetails::OAIRedisInstanceDetails() {
    this->initializeModel();
}

OAIRedisInstanceDetails::~OAIRedisInstanceDetails() {}

void OAIRedisInstanceDetails::initializeModel() {

    m_non_ssl_port_isSet = false;
    m_non_ssl_port_isValid = false;

    m_shard_id_isSet = false;
    m_shard_id_isValid = false;

    m_ssl_port_isSet = false;
    m_ssl_port_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAIRedisInstanceDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRedisInstanceDetails::fromJsonObject(QJsonObject json) {

    m_non_ssl_port_isValid = ::OpenAPI::fromJsonValue(m_non_ssl_port, json[QString("nonSslPort")]);
    m_non_ssl_port_isSet = !json[QString("nonSslPort")].isNull() && m_non_ssl_port_isValid;

    m_shard_id_isValid = ::OpenAPI::fromJsonValue(m_shard_id, json[QString("shardId")]);
    m_shard_id_isSet = !json[QString("shardId")].isNull() && m_shard_id_isValid;

    m_ssl_port_isValid = ::OpenAPI::fromJsonValue(m_ssl_port, json[QString("sslPort")]);
    m_ssl_port_isSet = !json[QString("sslPort")].isNull() && m_ssl_port_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAIRedisInstanceDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRedisInstanceDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_non_ssl_port_isSet) {
        obj.insert(QString("nonSslPort"), ::OpenAPI::toJsonValue(m_non_ssl_port));
    }
    if (m_shard_id_isSet) {
        obj.insert(QString("shardId"), ::OpenAPI::toJsonValue(m_shard_id));
    }
    if (m_ssl_port_isSet) {
        obj.insert(QString("sslPort"), ::OpenAPI::toJsonValue(m_ssl_port));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

qint32 OAIRedisInstanceDetails::getNonSslPort() const {
    return m_non_ssl_port;
}
void OAIRedisInstanceDetails::setNonSslPort(const qint32 &non_ssl_port) {
    m_non_ssl_port = non_ssl_port;
    m_non_ssl_port_isSet = true;
}

bool OAIRedisInstanceDetails::is_non_ssl_port_Set() const{
    return m_non_ssl_port_isSet;
}

bool OAIRedisInstanceDetails::is_non_ssl_port_Valid() const{
    return m_non_ssl_port_isValid;
}

qint32 OAIRedisInstanceDetails::getShardId() const {
    return m_shard_id;
}
void OAIRedisInstanceDetails::setShardId(const qint32 &shard_id) {
    m_shard_id = shard_id;
    m_shard_id_isSet = true;
}

bool OAIRedisInstanceDetails::is_shard_id_Set() const{
    return m_shard_id_isSet;
}

bool OAIRedisInstanceDetails::is_shard_id_Valid() const{
    return m_shard_id_isValid;
}

qint32 OAIRedisInstanceDetails::getSslPort() const {
    return m_ssl_port;
}
void OAIRedisInstanceDetails::setSslPort(const qint32 &ssl_port) {
    m_ssl_port = ssl_port;
    m_ssl_port_isSet = true;
}

bool OAIRedisInstanceDetails::is_ssl_port_Set() const{
    return m_ssl_port_isSet;
}

bool OAIRedisInstanceDetails::is_ssl_port_Valid() const{
    return m_ssl_port_isValid;
}

QString OAIRedisInstanceDetails::getZone() const {
    return m_zone;
}
void OAIRedisInstanceDetails::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAIRedisInstanceDetails::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAIRedisInstanceDetails::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAIRedisInstanceDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_non_ssl_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shard_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRedisInstanceDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
