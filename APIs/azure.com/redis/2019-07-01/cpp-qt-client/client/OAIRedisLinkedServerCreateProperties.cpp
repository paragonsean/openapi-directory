/**
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRedisLinkedServerCreateProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRedisLinkedServerCreateProperties::OAIRedisLinkedServerCreateProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRedisLinkedServerCreateProperties::OAIRedisLinkedServerCreateProperties() {
    this->initializeModel();
}

OAIRedisLinkedServerCreateProperties::~OAIRedisLinkedServerCreateProperties() {}

void OAIRedisLinkedServerCreateProperties::initializeModel() {

    m_linked_redis_cache_id_isSet = false;
    m_linked_redis_cache_id_isValid = false;

    m_linked_redis_cache_location_isSet = false;
    m_linked_redis_cache_location_isValid = false;

    m_server_role_isSet = false;
    m_server_role_isValid = false;
}

void OAIRedisLinkedServerCreateProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRedisLinkedServerCreateProperties::fromJsonObject(QJsonObject json) {

    m_linked_redis_cache_id_isValid = ::OpenAPI::fromJsonValue(m_linked_redis_cache_id, json[QString("linkedRedisCacheId")]);
    m_linked_redis_cache_id_isSet = !json[QString("linkedRedisCacheId")].isNull() && m_linked_redis_cache_id_isValid;

    m_linked_redis_cache_location_isValid = ::OpenAPI::fromJsonValue(m_linked_redis_cache_location, json[QString("linkedRedisCacheLocation")]);
    m_linked_redis_cache_location_isSet = !json[QString("linkedRedisCacheLocation")].isNull() && m_linked_redis_cache_location_isValid;

    m_server_role_isValid = ::OpenAPI::fromJsonValue(m_server_role, json[QString("serverRole")]);
    m_server_role_isSet = !json[QString("serverRole")].isNull() && m_server_role_isValid;
}

QString OAIRedisLinkedServerCreateProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRedisLinkedServerCreateProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_linked_redis_cache_id_isSet) {
        obj.insert(QString("linkedRedisCacheId"), ::OpenAPI::toJsonValue(m_linked_redis_cache_id));
    }
    if (m_linked_redis_cache_location_isSet) {
        obj.insert(QString("linkedRedisCacheLocation"), ::OpenAPI::toJsonValue(m_linked_redis_cache_location));
    }
    if (m_server_role_isSet) {
        obj.insert(QString("serverRole"), ::OpenAPI::toJsonValue(m_server_role));
    }
    return obj;
}

QString OAIRedisLinkedServerCreateProperties::getLinkedRedisCacheId() const {
    return m_linked_redis_cache_id;
}
void OAIRedisLinkedServerCreateProperties::setLinkedRedisCacheId(const QString &linked_redis_cache_id) {
    m_linked_redis_cache_id = linked_redis_cache_id;
    m_linked_redis_cache_id_isSet = true;
}

bool OAIRedisLinkedServerCreateProperties::is_linked_redis_cache_id_Set() const{
    return m_linked_redis_cache_id_isSet;
}

bool OAIRedisLinkedServerCreateProperties::is_linked_redis_cache_id_Valid() const{
    return m_linked_redis_cache_id_isValid;
}

QString OAIRedisLinkedServerCreateProperties::getLinkedRedisCacheLocation() const {
    return m_linked_redis_cache_location;
}
void OAIRedisLinkedServerCreateProperties::setLinkedRedisCacheLocation(const QString &linked_redis_cache_location) {
    m_linked_redis_cache_location = linked_redis_cache_location;
    m_linked_redis_cache_location_isSet = true;
}

bool OAIRedisLinkedServerCreateProperties::is_linked_redis_cache_location_Set() const{
    return m_linked_redis_cache_location_isSet;
}

bool OAIRedisLinkedServerCreateProperties::is_linked_redis_cache_location_Valid() const{
    return m_linked_redis_cache_location_isValid;
}

QString OAIRedisLinkedServerCreateProperties::getServerRole() const {
    return m_server_role;
}
void OAIRedisLinkedServerCreateProperties::setServerRole(const QString &server_role) {
    m_server_role = server_role;
    m_server_role_isSet = true;
}

bool OAIRedisLinkedServerCreateProperties::is_server_role_Set() const{
    return m_server_role_isSet;
}

bool OAIRedisLinkedServerCreateProperties::is_server_role_Valid() const{
    return m_server_role_isValid;
}

bool OAIRedisLinkedServerCreateProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_linked_redis_cache_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_redis_cache_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRedisLinkedServerCreateProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_linked_redis_cache_id_isValid && m_linked_redis_cache_location_isValid && m_server_role_isValid && true;
}

} // namespace OpenAPI
