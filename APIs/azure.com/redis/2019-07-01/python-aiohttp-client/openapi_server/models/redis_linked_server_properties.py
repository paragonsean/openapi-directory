# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RedisLinkedServerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, provisioning_state: str=None, linked_redis_cache_id: str=None, linked_redis_cache_location: str=None, server_role: str=None):
        """RedisLinkedServerProperties - a model defined in OpenAPI

        :param provisioning_state: The provisioning_state of this RedisLinkedServerProperties.
        :param linked_redis_cache_id: The linked_redis_cache_id of this RedisLinkedServerProperties.
        :param linked_redis_cache_location: The linked_redis_cache_location of this RedisLinkedServerProperties.
        :param server_role: The server_role of this RedisLinkedServerProperties.
        """
        self.openapi_types = {
            'provisioning_state': str,
            'linked_redis_cache_id': str,
            'linked_redis_cache_location': str,
            'server_role': str
        }

        self.attribute_map = {
            'provisioning_state': 'provisioningState',
            'linked_redis_cache_id': 'linkedRedisCacheId',
            'linked_redis_cache_location': 'linkedRedisCacheLocation',
            'server_role': 'serverRole'
        }

        self._provisioning_state = provisioning_state
        self._linked_redis_cache_id = linked_redis_cache_id
        self._linked_redis_cache_location = linked_redis_cache_location
        self._server_role = server_role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RedisLinkedServerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RedisLinkedServerProperties of this RedisLinkedServerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this RedisLinkedServerProperties.

        Terminal state of the link between primary and secondary redis cache.

        :return: The provisioning_state of this RedisLinkedServerProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this RedisLinkedServerProperties.

        Terminal state of the link between primary and secondary redis cache.

        :param provisioning_state: The provisioning_state of this RedisLinkedServerProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def linked_redis_cache_id(self):
        """Gets the linked_redis_cache_id of this RedisLinkedServerProperties.

        Fully qualified resourceId of the linked redis cache.

        :return: The linked_redis_cache_id of this RedisLinkedServerProperties.
        :rtype: str
        """
        return self._linked_redis_cache_id

    @linked_redis_cache_id.setter
    def linked_redis_cache_id(self, linked_redis_cache_id):
        """Sets the linked_redis_cache_id of this RedisLinkedServerProperties.

        Fully qualified resourceId of the linked redis cache.

        :param linked_redis_cache_id: The linked_redis_cache_id of this RedisLinkedServerProperties.
        :type linked_redis_cache_id: str
        """
        if linked_redis_cache_id is None:
            raise ValueError("Invalid value for `linked_redis_cache_id`, must not be `None`")

        self._linked_redis_cache_id = linked_redis_cache_id

    @property
    def linked_redis_cache_location(self):
        """Gets the linked_redis_cache_location of this RedisLinkedServerProperties.

        Location of the linked redis cache.

        :return: The linked_redis_cache_location of this RedisLinkedServerProperties.
        :rtype: str
        """
        return self._linked_redis_cache_location

    @linked_redis_cache_location.setter
    def linked_redis_cache_location(self, linked_redis_cache_location):
        """Sets the linked_redis_cache_location of this RedisLinkedServerProperties.

        Location of the linked redis cache.

        :param linked_redis_cache_location: The linked_redis_cache_location of this RedisLinkedServerProperties.
        :type linked_redis_cache_location: str
        """
        if linked_redis_cache_location is None:
            raise ValueError("Invalid value for `linked_redis_cache_location`, must not be `None`")

        self._linked_redis_cache_location = linked_redis_cache_location

    @property
    def server_role(self):
        """Gets the server_role of this RedisLinkedServerProperties.

        Role of the linked server.

        :return: The server_role of this RedisLinkedServerProperties.
        :rtype: str
        """
        return self._server_role

    @server_role.setter
    def server_role(self, server_role):
        """Sets the server_role of this RedisLinkedServerProperties.

        Role of the linked server.

        :param server_role: The server_role of this RedisLinkedServerProperties.
        :type server_role: str
        """
        allowed_values = ["Primary", "Secondary"]  # noqa: E501
        if server_role not in allowed_values:
            raise ValueError(
                "Invalid value for `server_role` ({0}), must be one of {1}"
                .format(server_role, allowed_values)
            )

        self._server_role = server_role
