# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RedisInstanceDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, non_ssl_port: int=None, shard_id: int=None, ssl_port: int=None, zone: str=None):
        """RedisInstanceDetails - a model defined in OpenAPI

        :param non_ssl_port: The non_ssl_port of this RedisInstanceDetails.
        :param shard_id: The shard_id of this RedisInstanceDetails.
        :param ssl_port: The ssl_port of this RedisInstanceDetails.
        :param zone: The zone of this RedisInstanceDetails.
        """
        self.openapi_types = {
            'non_ssl_port': int,
            'shard_id': int,
            'ssl_port': int,
            'zone': str
        }

        self.attribute_map = {
            'non_ssl_port': 'nonSslPort',
            'shard_id': 'shardId',
            'ssl_port': 'sslPort',
            'zone': 'zone'
        }

        self._non_ssl_port = non_ssl_port
        self._shard_id = shard_id
        self._ssl_port = ssl_port
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RedisInstanceDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RedisInstanceDetails of this RedisInstanceDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def non_ssl_port(self):
        """Gets the non_ssl_port of this RedisInstanceDetails.

        If enableNonSslPort is true, provides Redis instance Non-SSL port.

        :return: The non_ssl_port of this RedisInstanceDetails.
        :rtype: int
        """
        return self._non_ssl_port

    @non_ssl_port.setter
    def non_ssl_port(self, non_ssl_port):
        """Sets the non_ssl_port of this RedisInstanceDetails.

        If enableNonSslPort is true, provides Redis instance Non-SSL port.

        :param non_ssl_port: The non_ssl_port of this RedisInstanceDetails.
        :type non_ssl_port: int
        """

        self._non_ssl_port = non_ssl_port

    @property
    def shard_id(self):
        """Gets the shard_id of this RedisInstanceDetails.

        If clustering is enabled, the Shard ID of Redis Instance

        :return: The shard_id of this RedisInstanceDetails.
        :rtype: int
        """
        return self._shard_id

    @shard_id.setter
    def shard_id(self, shard_id):
        """Sets the shard_id of this RedisInstanceDetails.

        If clustering is enabled, the Shard ID of Redis Instance

        :param shard_id: The shard_id of this RedisInstanceDetails.
        :type shard_id: int
        """

        self._shard_id = shard_id

    @property
    def ssl_port(self):
        """Gets the ssl_port of this RedisInstanceDetails.

        Redis instance SSL port.

        :return: The ssl_port of this RedisInstanceDetails.
        :rtype: int
        """
        return self._ssl_port

    @ssl_port.setter
    def ssl_port(self, ssl_port):
        """Sets the ssl_port of this RedisInstanceDetails.

        Redis instance SSL port.

        :param ssl_port: The ssl_port of this RedisInstanceDetails.
        :type ssl_port: int
        """

        self._ssl_port = ssl_port

    @property
    def zone(self):
        """Gets the zone of this RedisInstanceDetails.

        If the Cache uses availability zones, specifies availability zone where this instance is located.

        :return: The zone of this RedisInstanceDetails.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this RedisInstanceDetails.

        If the Cache uses availability zones, specifies availability zone where this instance is located.

        :param zone: The zone of this RedisInstanceDetails.
        :type zone: str
        """

        self._zone = zone
