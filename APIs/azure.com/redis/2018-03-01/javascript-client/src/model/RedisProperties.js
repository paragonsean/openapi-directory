/**
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2018-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RedisAccessKeys from './RedisAccessKeys';
import RedisCreateProperties from './RedisCreateProperties';
import RedisLinkedServer from './RedisLinkedServer';
import Sku from './Sku';

/**
 * The RedisProperties model module.
 * @module model/RedisProperties
 * @version 2018-03-01
 */
class RedisProperties {
    /**
     * Constructs a new <code>RedisProperties</code>.
     * Properties of the redis cache.
     * @alias module:model/RedisProperties
     * @implements module:model/RedisCreateProperties
     * @param sku {module:model/Sku} 
     */
    constructor(sku) { 
        RedisCreateProperties.initialize(this);
        RedisProperties.initialize(this, sku);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sku) { 
        obj['sku'] = sku;
    }

    /**
     * Constructs a <code>RedisProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RedisProperties} obj Optional instance to populate.
     * @return {module:model/RedisProperties} The populated <code>RedisProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RedisProperties();
            RedisCreateProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('accessKeys')) {
                obj['accessKeys'] = RedisAccessKeys.constructFromObject(data['accessKeys']);
            }
            if (data.hasOwnProperty('hostName')) {
                obj['hostName'] = ApiClient.convertToType(data['hostName'], 'String');
            }
            if (data.hasOwnProperty('linkedServers')) {
                obj['linkedServers'] = ApiClient.convertToType(data['linkedServers'], [RedisLinkedServer]);
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('redisVersion')) {
                obj['redisVersion'] = ApiClient.convertToType(data['redisVersion'], 'String');
            }
            if (data.hasOwnProperty('sslPort')) {
                obj['sslPort'] = ApiClient.convertToType(data['sslPort'], 'Number');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = Sku.constructFromObject(data['sku']);
            }
            if (data.hasOwnProperty('staticIP')) {
                obj['staticIP'] = ApiClient.convertToType(data['staticIP'], 'String');
            }
            if (data.hasOwnProperty('subnetId')) {
                obj['subnetId'] = ApiClient.convertToType(data['subnetId'], 'String');
            }
            if (data.hasOwnProperty('enableNonSslPort')) {
                obj['enableNonSslPort'] = ApiClient.convertToType(data['enableNonSslPort'], 'Boolean');
            }
            if (data.hasOwnProperty('minimumTlsVersion')) {
                obj['minimumTlsVersion'] = ApiClient.convertToType(data['minimumTlsVersion'], 'String');
            }
            if (data.hasOwnProperty('redisConfiguration')) {
                obj['redisConfiguration'] = ApiClient.convertToType(data['redisConfiguration'], {'String': 'String'});
            }
            if (data.hasOwnProperty('shardCount')) {
                obj['shardCount'] = ApiClient.convertToType(data['shardCount'], 'Number');
            }
            if (data.hasOwnProperty('tenantSettings')) {
                obj['tenantSettings'] = ApiClient.convertToType(data['tenantSettings'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RedisProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RedisProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RedisProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `accessKeys`
        if (data['accessKeys']) { // data not null
          RedisAccessKeys.validateJSON(data['accessKeys']);
        }
        // ensure the json data is a string
        if (data['hostName'] && !(typeof data['hostName'] === 'string' || data['hostName'] instanceof String)) {
            throw new Error("Expected the field `hostName` to be a primitive type in the JSON string but got " + data['hostName']);
        }
        if (data['linkedServers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['linkedServers'])) {
                throw new Error("Expected the field `linkedServers` to be an array in the JSON data but got " + data['linkedServers']);
            }
            // validate the optional field `linkedServers` (array)
            for (const item of data['linkedServers']) {
                RedisLinkedServer.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['redisVersion'] && !(typeof data['redisVersion'] === 'string' || data['redisVersion'] instanceof String)) {
            throw new Error("Expected the field `redisVersion` to be a primitive type in the JSON string but got " + data['redisVersion']);
        }
        // validate the optional field `sku`
        if (data['sku']) { // data not null
          Sku.validateJSON(data['sku']);
        }
        // ensure the json data is a string
        if (data['staticIP'] && !(typeof data['staticIP'] === 'string' || data['staticIP'] instanceof String)) {
            throw new Error("Expected the field `staticIP` to be a primitive type in the JSON string but got " + data['staticIP']);
        }
        // ensure the json data is a string
        if (data['subnetId'] && !(typeof data['subnetId'] === 'string' || data['subnetId'] instanceof String)) {
            throw new Error("Expected the field `subnetId` to be a primitive type in the JSON string but got " + data['subnetId']);
        }
        // ensure the json data is a string
        if (data['minimumTlsVersion'] && !(typeof data['minimumTlsVersion'] === 'string' || data['minimumTlsVersion'] instanceof String)) {
            throw new Error("Expected the field `minimumTlsVersion` to be a primitive type in the JSON string but got " + data['minimumTlsVersion']);
        }

        return true;
    }


}

RedisProperties.RequiredProperties = ["sku"];

/**
 * @member {module:model/RedisAccessKeys} accessKeys
 */
RedisProperties.prototype['accessKeys'] = undefined;

/**
 * Redis host name.
 * @member {String} hostName
 */
RedisProperties.prototype['hostName'] = undefined;

/**
 * List of the linked servers associated with the cache
 * @member {Array.<module:model/RedisLinkedServer>} linkedServers
 */
RedisProperties.prototype['linkedServers'] = undefined;

/**
 * Redis non-SSL port.
 * @member {Number} port
 */
RedisProperties.prototype['port'] = undefined;

/**
 * Redis instance provisioning status.
 * @member {module:model/RedisProperties.ProvisioningStateEnum} provisioningState
 */
RedisProperties.prototype['provisioningState'] = undefined;

/**
 * Redis version.
 * @member {String} redisVersion
 */
RedisProperties.prototype['redisVersion'] = undefined;

/**
 * Redis SSL port.
 * @member {Number} sslPort
 */
RedisProperties.prototype['sslPort'] = undefined;

/**
 * @member {module:model/Sku} sku
 */
RedisProperties.prototype['sku'] = undefined;

/**
 * Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual Network.
 * @member {String} staticIP
 */
RedisProperties.prototype['staticIP'] = undefined;

/**
 * The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1
 * @member {String} subnetId
 */
RedisProperties.prototype['subnetId'] = undefined;

/**
 * Specifies whether the non-ssl Redis server port (6379) is enabled.
 * @member {Boolean} enableNonSslPort
 */
RedisProperties.prototype['enableNonSslPort'] = undefined;

/**
 * Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
 * @member {module:model/RedisProperties.MinimumTlsVersionEnum} minimumTlsVersion
 */
RedisProperties.prototype['minimumTlsVersion'] = undefined;

/**
 * All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
 * @member {Object.<String, String>} redisConfiguration
 */
RedisProperties.prototype['redisConfiguration'] = undefined;

/**
 * The number of shards to be created on a Premium Cluster Cache.
 * @member {Number} shardCount
 */
RedisProperties.prototype['shardCount'] = undefined;

/**
 * A dictionary of tenant settings
 * @member {Object.<String, String>} tenantSettings
 */
RedisProperties.prototype['tenantSettings'] = undefined;


// Implement RedisCreateProperties interface:
/**
 * Specifies whether the non-ssl Redis server port (6379) is enabled.
 * @member {Boolean} enableNonSslPort
 */
RedisCreateProperties.prototype['enableNonSslPort'] = undefined;
/**
 * Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
 * @member {module:model/RedisCreateProperties.MinimumTlsVersionEnum} minimumTlsVersion
 */
RedisCreateProperties.prototype['minimumTlsVersion'] = undefined;
/**
 * All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
 * @member {Object.<String, String>} redisConfiguration
 */
RedisCreateProperties.prototype['redisConfiguration'] = undefined;
/**
 * The number of shards to be created on a Premium Cluster Cache.
 * @member {Number} shardCount
 */
RedisCreateProperties.prototype['shardCount'] = undefined;
/**
 * A dictionary of tenant settings
 * @member {Object.<String, String>} tenantSettings
 */
RedisCreateProperties.prototype['tenantSettings'] = undefined;



/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
RedisProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Linking"
     * @const
     */
    "Linking": "Linking",

    /**
     * value: "Provisioning"
     * @const
     */
    "Provisioning": "Provisioning",

    /**
     * value: "RecoveringScaleFailure"
     * @const
     */
    "RecoveringScaleFailure": "RecoveringScaleFailure",

    /**
     * value: "Scaling"
     * @const
     */
    "Scaling": "Scaling",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Unlinking"
     * @const
     */
    "Unlinking": "Unlinking",

    /**
     * value: "Unprovisioning"
     * @const
     */
    "Unprovisioning": "Unprovisioning",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating"
};


/**
 * Allowed values for the <code>minimumTlsVersion</code> property.
 * @enum {String}
 * @readonly
 */
RedisProperties['MinimumTlsVersionEnum'] = {

    /**
     * value: "1.0"
     * @const
     */
    "0": "1.0",

    /**
     * value: "1.1"
     * @const
     */
    "1": "1.1",

    /**
     * value: "1.2"
     * @const
     */
    "2": "1.2"
};



export default RedisProperties;

