/**
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2018-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RedisCommonProperties from './RedisCommonProperties';
import Sku from './Sku';

/**
 * The RedisUpdateProperties model module.
 * @module model/RedisUpdateProperties
 * @version 2018-03-01
 */
class RedisUpdateProperties {
    /**
     * Constructs a new <code>RedisUpdateProperties</code>.
     * Patchable properties of the redis cache.
     * @alias module:model/RedisUpdateProperties
     * @implements module:model/RedisCommonProperties
     */
    constructor() { 
        RedisCommonProperties.initialize(this);
        RedisUpdateProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RedisUpdateProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RedisUpdateProperties} obj Optional instance to populate.
     * @return {module:model/RedisUpdateProperties} The populated <code>RedisUpdateProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RedisUpdateProperties();
            RedisCommonProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('sku')) {
                obj['sku'] = Sku.constructFromObject(data['sku']);
            }
            if (data.hasOwnProperty('enableNonSslPort')) {
                obj['enableNonSslPort'] = ApiClient.convertToType(data['enableNonSslPort'], 'Boolean');
            }
            if (data.hasOwnProperty('minimumTlsVersion')) {
                obj['minimumTlsVersion'] = ApiClient.convertToType(data['minimumTlsVersion'], 'String');
            }
            if (data.hasOwnProperty('redisConfiguration')) {
                obj['redisConfiguration'] = ApiClient.convertToType(data['redisConfiguration'], {'String': 'String'});
            }
            if (data.hasOwnProperty('shardCount')) {
                obj['shardCount'] = ApiClient.convertToType(data['shardCount'], 'Number');
            }
            if (data.hasOwnProperty('tenantSettings')) {
                obj['tenantSettings'] = ApiClient.convertToType(data['tenantSettings'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RedisUpdateProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RedisUpdateProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `sku`
        if (data['sku']) { // data not null
          Sku.validateJSON(data['sku']);
        }
        // ensure the json data is a string
        if (data['minimumTlsVersion'] && !(typeof data['minimumTlsVersion'] === 'string' || data['minimumTlsVersion'] instanceof String)) {
            throw new Error("Expected the field `minimumTlsVersion` to be a primitive type in the JSON string but got " + data['minimumTlsVersion']);
        }

        return true;
    }


}



/**
 * @member {module:model/Sku} sku
 */
RedisUpdateProperties.prototype['sku'] = undefined;

/**
 * Specifies whether the non-ssl Redis server port (6379) is enabled.
 * @member {Boolean} enableNonSslPort
 */
RedisUpdateProperties.prototype['enableNonSslPort'] = undefined;

/**
 * Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
 * @member {module:model/RedisUpdateProperties.MinimumTlsVersionEnum} minimumTlsVersion
 */
RedisUpdateProperties.prototype['minimumTlsVersion'] = undefined;

/**
 * All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
 * @member {Object.<String, String>} redisConfiguration
 */
RedisUpdateProperties.prototype['redisConfiguration'] = undefined;

/**
 * The number of shards to be created on a Premium Cluster Cache.
 * @member {Number} shardCount
 */
RedisUpdateProperties.prototype['shardCount'] = undefined;

/**
 * A dictionary of tenant settings
 * @member {Object.<String, String>} tenantSettings
 */
RedisUpdateProperties.prototype['tenantSettings'] = undefined;


// Implement RedisCommonProperties interface:
/**
 * Specifies whether the non-ssl Redis server port (6379) is enabled.
 * @member {Boolean} enableNonSslPort
 */
RedisCommonProperties.prototype['enableNonSslPort'] = undefined;
/**
 * Optional: requires clients to use a specified TLS version (or higher) to connect (e,g, '1.0', '1.1', '1.2')
 * @member {module:model/RedisCommonProperties.MinimumTlsVersionEnum} minimumTlsVersion
 */
RedisCommonProperties.prototype['minimumTlsVersion'] = undefined;
/**
 * All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
 * @member {Object.<String, String>} redisConfiguration
 */
RedisCommonProperties.prototype['redisConfiguration'] = undefined;
/**
 * The number of shards to be created on a Premium Cluster Cache.
 * @member {Number} shardCount
 */
RedisCommonProperties.prototype['shardCount'] = undefined;
/**
 * A dictionary of tenant settings
 * @member {Object.<String, String>} tenantSettings
 */
RedisCommonProperties.prototype['tenantSettings'] = undefined;



/**
 * Allowed values for the <code>minimumTlsVersion</code> property.
 * @enum {String}
 * @readonly
 */
RedisUpdateProperties['MinimumTlsVersionEnum'] = {

    /**
     * value: "1.0"
     * @const
     */
    "0": "1.0",

    /**
     * value: "1.1"
     * @const
     */
    "1": "1.1",

    /**
     * value: "1.2"
     * @const
     */
    "2": "1.2"
};



export default RedisUpdateProperties;

