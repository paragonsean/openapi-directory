/**
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2018-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRedisProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRedisProperties::OAIRedisProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRedisProperties::OAIRedisProperties() {
    this->initializeModel();
}

OAIRedisProperties::~OAIRedisProperties() {}

void OAIRedisProperties::initializeModel() {

    m_access_keys_isSet = false;
    m_access_keys_isValid = false;

    m_host_name_isSet = false;
    m_host_name_isValid = false;

    m_linked_servers_isSet = false;
    m_linked_servers_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_redis_version_isSet = false;
    m_redis_version_isValid = false;

    m_ssl_port_isSet = false;
    m_ssl_port_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_static_ip_isSet = false;
    m_static_ip_isValid = false;

    m_subnet_id_isSet = false;
    m_subnet_id_isValid = false;

    m_enable_non_ssl_port_isSet = false;
    m_enable_non_ssl_port_isValid = false;

    m_minimum_tls_version_isSet = false;
    m_minimum_tls_version_isValid = false;

    m_redis_configuration_isSet = false;
    m_redis_configuration_isValid = false;

    m_shard_count_isSet = false;
    m_shard_count_isValid = false;

    m_tenant_settings_isSet = false;
    m_tenant_settings_isValid = false;
}

void OAIRedisProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRedisProperties::fromJsonObject(QJsonObject json) {

    m_access_keys_isValid = ::OpenAPI::fromJsonValue(m_access_keys, json[QString("accessKeys")]);
    m_access_keys_isSet = !json[QString("accessKeys")].isNull() && m_access_keys_isValid;

    m_host_name_isValid = ::OpenAPI::fromJsonValue(m_host_name, json[QString("hostName")]);
    m_host_name_isSet = !json[QString("hostName")].isNull() && m_host_name_isValid;

    m_linked_servers_isValid = ::OpenAPI::fromJsonValue(m_linked_servers, json[QString("linkedServers")]);
    m_linked_servers_isSet = !json[QString("linkedServers")].isNull() && m_linked_servers_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_redis_version_isValid = ::OpenAPI::fromJsonValue(m_redis_version, json[QString("redisVersion")]);
    m_redis_version_isSet = !json[QString("redisVersion")].isNull() && m_redis_version_isValid;

    m_ssl_port_isValid = ::OpenAPI::fromJsonValue(m_ssl_port, json[QString("sslPort")]);
    m_ssl_port_isSet = !json[QString("sslPort")].isNull() && m_ssl_port_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_static_ip_isValid = ::OpenAPI::fromJsonValue(m_static_ip, json[QString("staticIP")]);
    m_static_ip_isSet = !json[QString("staticIP")].isNull() && m_static_ip_isValid;

    m_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_subnet_id, json[QString("subnetId")]);
    m_subnet_id_isSet = !json[QString("subnetId")].isNull() && m_subnet_id_isValid;

    m_enable_non_ssl_port_isValid = ::OpenAPI::fromJsonValue(m_enable_non_ssl_port, json[QString("enableNonSslPort")]);
    m_enable_non_ssl_port_isSet = !json[QString("enableNonSslPort")].isNull() && m_enable_non_ssl_port_isValid;

    m_minimum_tls_version_isValid = ::OpenAPI::fromJsonValue(m_minimum_tls_version, json[QString("minimumTlsVersion")]);
    m_minimum_tls_version_isSet = !json[QString("minimumTlsVersion")].isNull() && m_minimum_tls_version_isValid;

    m_redis_configuration_isValid = ::OpenAPI::fromJsonValue(m_redis_configuration, json[QString("redisConfiguration")]);
    m_redis_configuration_isSet = !json[QString("redisConfiguration")].isNull() && m_redis_configuration_isValid;

    m_shard_count_isValid = ::OpenAPI::fromJsonValue(m_shard_count, json[QString("shardCount")]);
    m_shard_count_isSet = !json[QString("shardCount")].isNull() && m_shard_count_isValid;

    m_tenant_settings_isValid = ::OpenAPI::fromJsonValue(m_tenant_settings, json[QString("tenantSettings")]);
    m_tenant_settings_isSet = !json[QString("tenantSettings")].isNull() && m_tenant_settings_isValid;
}

QString OAIRedisProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRedisProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_access_keys.isSet()) {
        obj.insert(QString("accessKeys"), ::OpenAPI::toJsonValue(m_access_keys));
    }
    if (m_host_name_isSet) {
        obj.insert(QString("hostName"), ::OpenAPI::toJsonValue(m_host_name));
    }
    if (m_linked_servers.size() > 0) {
        obj.insert(QString("linkedServers"), ::OpenAPI::toJsonValue(m_linked_servers));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_redis_version_isSet) {
        obj.insert(QString("redisVersion"), ::OpenAPI::toJsonValue(m_redis_version));
    }
    if (m_ssl_port_isSet) {
        obj.insert(QString("sslPort"), ::OpenAPI::toJsonValue(m_ssl_port));
    }
    if (m_sku.isSet()) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_static_ip_isSet) {
        obj.insert(QString("staticIP"), ::OpenAPI::toJsonValue(m_static_ip));
    }
    if (m_subnet_id_isSet) {
        obj.insert(QString("subnetId"), ::OpenAPI::toJsonValue(m_subnet_id));
    }
    if (m_enable_non_ssl_port_isSet) {
        obj.insert(QString("enableNonSslPort"), ::OpenAPI::toJsonValue(m_enable_non_ssl_port));
    }
    if (m_minimum_tls_version_isSet) {
        obj.insert(QString("minimumTlsVersion"), ::OpenAPI::toJsonValue(m_minimum_tls_version));
    }
    if (m_redis_configuration.size() > 0) {
        obj.insert(QString("redisConfiguration"), ::OpenAPI::toJsonValue(m_redis_configuration));
    }
    if (m_shard_count_isSet) {
        obj.insert(QString("shardCount"), ::OpenAPI::toJsonValue(m_shard_count));
    }
    if (m_tenant_settings.size() > 0) {
        obj.insert(QString("tenantSettings"), ::OpenAPI::toJsonValue(m_tenant_settings));
    }
    return obj;
}

OAIRedisAccessKeys OAIRedisProperties::getAccessKeys() const {
    return m_access_keys;
}
void OAIRedisProperties::setAccessKeys(const OAIRedisAccessKeys &access_keys) {
    m_access_keys = access_keys;
    m_access_keys_isSet = true;
}

bool OAIRedisProperties::is_access_keys_Set() const{
    return m_access_keys_isSet;
}

bool OAIRedisProperties::is_access_keys_Valid() const{
    return m_access_keys_isValid;
}

QString OAIRedisProperties::getHostName() const {
    return m_host_name;
}
void OAIRedisProperties::setHostName(const QString &host_name) {
    m_host_name = host_name;
    m_host_name_isSet = true;
}

bool OAIRedisProperties::is_host_name_Set() const{
    return m_host_name_isSet;
}

bool OAIRedisProperties::is_host_name_Valid() const{
    return m_host_name_isValid;
}

QList<OAIRedisLinkedServer> OAIRedisProperties::getLinkedServers() const {
    return m_linked_servers;
}
void OAIRedisProperties::setLinkedServers(const QList<OAIRedisLinkedServer> &linked_servers) {
    m_linked_servers = linked_servers;
    m_linked_servers_isSet = true;
}

bool OAIRedisProperties::is_linked_servers_Set() const{
    return m_linked_servers_isSet;
}

bool OAIRedisProperties::is_linked_servers_Valid() const{
    return m_linked_servers_isValid;
}

qint32 OAIRedisProperties::getPort() const {
    return m_port;
}
void OAIRedisProperties::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIRedisProperties::is_port_Set() const{
    return m_port_isSet;
}

bool OAIRedisProperties::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIRedisProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIRedisProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIRedisProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIRedisProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIRedisProperties::getRedisVersion() const {
    return m_redis_version;
}
void OAIRedisProperties::setRedisVersion(const QString &redis_version) {
    m_redis_version = redis_version;
    m_redis_version_isSet = true;
}

bool OAIRedisProperties::is_redis_version_Set() const{
    return m_redis_version_isSet;
}

bool OAIRedisProperties::is_redis_version_Valid() const{
    return m_redis_version_isValid;
}

qint32 OAIRedisProperties::getSslPort() const {
    return m_ssl_port;
}
void OAIRedisProperties::setSslPort(const qint32 &ssl_port) {
    m_ssl_port = ssl_port;
    m_ssl_port_isSet = true;
}

bool OAIRedisProperties::is_ssl_port_Set() const{
    return m_ssl_port_isSet;
}

bool OAIRedisProperties::is_ssl_port_Valid() const{
    return m_ssl_port_isValid;
}

OAISku OAIRedisProperties::getSku() const {
    return m_sku;
}
void OAIRedisProperties::setSku(const OAISku &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIRedisProperties::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIRedisProperties::is_sku_Valid() const{
    return m_sku_isValid;
}

QString OAIRedisProperties::getStaticIp() const {
    return m_static_ip;
}
void OAIRedisProperties::setStaticIp(const QString &static_ip) {
    m_static_ip = static_ip;
    m_static_ip_isSet = true;
}

bool OAIRedisProperties::is_static_ip_Set() const{
    return m_static_ip_isSet;
}

bool OAIRedisProperties::is_static_ip_Valid() const{
    return m_static_ip_isValid;
}

QString OAIRedisProperties::getSubnetId() const {
    return m_subnet_id;
}
void OAIRedisProperties::setSubnetId(const QString &subnet_id) {
    m_subnet_id = subnet_id;
    m_subnet_id_isSet = true;
}

bool OAIRedisProperties::is_subnet_id_Set() const{
    return m_subnet_id_isSet;
}

bool OAIRedisProperties::is_subnet_id_Valid() const{
    return m_subnet_id_isValid;
}

bool OAIRedisProperties::isEnableNonSslPort() const {
    return m_enable_non_ssl_port;
}
void OAIRedisProperties::setEnableNonSslPort(const bool &enable_non_ssl_port) {
    m_enable_non_ssl_port = enable_non_ssl_port;
    m_enable_non_ssl_port_isSet = true;
}

bool OAIRedisProperties::is_enable_non_ssl_port_Set() const{
    return m_enable_non_ssl_port_isSet;
}

bool OAIRedisProperties::is_enable_non_ssl_port_Valid() const{
    return m_enable_non_ssl_port_isValid;
}

QString OAIRedisProperties::getMinimumTlsVersion() const {
    return m_minimum_tls_version;
}
void OAIRedisProperties::setMinimumTlsVersion(const QString &minimum_tls_version) {
    m_minimum_tls_version = minimum_tls_version;
    m_minimum_tls_version_isSet = true;
}

bool OAIRedisProperties::is_minimum_tls_version_Set() const{
    return m_minimum_tls_version_isSet;
}

bool OAIRedisProperties::is_minimum_tls_version_Valid() const{
    return m_minimum_tls_version_isValid;
}

QMap<QString, QString> OAIRedisProperties::getRedisConfiguration() const {
    return m_redis_configuration;
}
void OAIRedisProperties::setRedisConfiguration(const QMap<QString, QString> &redis_configuration) {
    m_redis_configuration = redis_configuration;
    m_redis_configuration_isSet = true;
}

bool OAIRedisProperties::is_redis_configuration_Set() const{
    return m_redis_configuration_isSet;
}

bool OAIRedisProperties::is_redis_configuration_Valid() const{
    return m_redis_configuration_isValid;
}

qint32 OAIRedisProperties::getShardCount() const {
    return m_shard_count;
}
void OAIRedisProperties::setShardCount(const qint32 &shard_count) {
    m_shard_count = shard_count;
    m_shard_count_isSet = true;
}

bool OAIRedisProperties::is_shard_count_Set() const{
    return m_shard_count_isSet;
}

bool OAIRedisProperties::is_shard_count_Valid() const{
    return m_shard_count_isValid;
}

QMap<QString, QString> OAIRedisProperties::getTenantSettings() const {
    return m_tenant_settings;
}
void OAIRedisProperties::setTenantSettings(const QMap<QString, QString> &tenant_settings) {
    m_tenant_settings = tenant_settings;
    m_tenant_settings_isSet = true;
}

bool OAIRedisProperties::is_tenant_settings_Set() const{
    return m_tenant_settings_isSet;
}

bool OAIRedisProperties::is_tenant_settings_Valid() const{
    return m_tenant_settings_isValid;
}

bool OAIRedisProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redis_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_non_ssl_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_tls_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redis_configuration.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shard_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRedisProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sku_isValid && true;
}

} // namespace OpenAPI
