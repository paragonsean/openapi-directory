/**
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2018-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRedisApi_H
#define OAI_OAIRedisApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICheckNameAvailabilityParameters.h"
#include "OAIExportRDBParameters.h"
#include "OAIImportRDBParameters.h"
#include "OAINotificationListResponse.h"
#include "OAIRedisAccessKeys.h"
#include "OAIRedisCreateParameters.h"
#include "OAIRedisFirewallRule.h"
#include "OAIRedisFirewallRuleCreateParameters.h"
#include "OAIRedisFirewallRuleListResult.h"
#include "OAIRedisForceRebootResponse.h"
#include "OAIRedisLinkedServerCreateParameters.h"
#include "OAIRedisLinkedServerWithProperties.h"
#include "OAIRedisLinkedServerWithPropertiesList.h"
#include "OAIRedisListResult.h"
#include "OAIRedisPatchSchedule.h"
#include "OAIRedisPatchScheduleListResult.h"
#include "OAIRedisRebootParameters.h"
#include "OAIRedisRegenerateKeyParameters.h"
#include "OAIRedisResource.h"
#include "OAIRedisUpdateParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRedisApi : public QObject {
    Q_OBJECT

public:
    OAIRedisApi(const int timeOut = 0);
    ~OAIRedisApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cache_name QString [required]
    * @param[in]  rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIRedisFirewallRuleCreateParameters [required]
    */
    virtual void firewallRulesCreateOrUpdate(const QString &resource_group_name, const QString &cache_name, const QString &rule_name, const QString &api_version, const QString &subscription_id, const OAIRedisFirewallRuleCreateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cache_name QString [required]
    * @param[in]  rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void firewallRulesDelete(const QString &resource_group_name, const QString &cache_name, const QString &rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cache_name QString [required]
    * @param[in]  rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void firewallRulesGet(const QString &resource_group_name, const QString &cache_name, const QString &rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cache_name QString [required]
    */
    virtual void firewallRulesListByRedisResource(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &cache_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  linked_server_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIRedisLinkedServerCreateParameters [required]
    */
    virtual void linkedServerCreate(const QString &resource_group_name, const QString &name, const QString &linked_server_name, const QString &api_version, const QString &subscription_id, const OAIRedisLinkedServerCreateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  linked_server_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void linkedServerDelete(const QString &resource_group_name, const QString &name, const QString &linked_server_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  linked_server_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void linkedServerGet(const QString &resource_group_name, const QString &name, const QString &linked_server_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void linkedServerList(const QString &resource_group_name, const QString &name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  r_default QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIRedisPatchSchedule [required]
    */
    virtual void patchSchedulesCreateOrUpdate(const QString &resource_group_name, const QString &name, const QString &r_default, const QString &api_version, const QString &subscription_id, const OAIRedisPatchSchedule &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  r_default QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void patchSchedulesDelete(const QString &resource_group_name, const QString &name, const QString &r_default, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  r_default QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void patchSchedulesGet(const QString &resource_group_name, const QString &name, const QString &r_default, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cache_name QString [required]
    */
    virtual void patchSchedulesListByRedisResource(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &cache_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAICheckNameAvailabilityParameters [required]
    */
    virtual void redisCheckNameAvailability(const QString &api_version, const QString &subscription_id, const OAICheckNameAvailabilityParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIRedisCreateParameters [required]
    */
    virtual void redisCreate(const QString &resource_group_name, const QString &name, const QString &api_version, const QString &subscription_id, const OAIRedisCreateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void redisDelete(const QString &resource_group_name, const QString &name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIExportRDBParameters [required]
    */
    virtual void redisExportData(const QString &resource_group_name, const QString &name, const QString &api_version, const QString &subscription_id, const OAIExportRDBParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIRedisRebootParameters [required]
    */
    virtual void redisForceReboot(const QString &resource_group_name, const QString &name, const QString &api_version, const QString &subscription_id, const OAIRedisRebootParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void redisGet(const QString &resource_group_name, const QString &name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIImportRDBParameters [required]
    */
    virtual void redisImportData(const QString &resource_group_name, const QString &name, const QString &api_version, const QString &subscription_id, const OAIImportRDBParameters &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void redisList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void redisListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void redisListKeys(const QString &resource_group_name, const QString &name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  history double [required]
    */
    virtual void redisListUpgradeNotifications(const QString &resource_group_name, const QString &name, const QString &api_version, const QString &subscription_id, const double &history);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIRedisRegenerateKeyParameters [required]
    */
    virtual void redisRegenerateKey(const QString &resource_group_name, const QString &name, const QString &api_version, const QString &subscription_id, const OAIRedisRegenerateKeyParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIRedisUpdateParameters [required]
    */
    virtual void redisUpdate(const QString &resource_group_name, const QString &name, const QString &api_version, const QString &subscription_id, const OAIRedisUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void firewallRulesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void firewallRulesDeleteCallback(OAIHttpRequestWorker *worker);
    void firewallRulesGetCallback(OAIHttpRequestWorker *worker);
    void firewallRulesListByRedisResourceCallback(OAIHttpRequestWorker *worker);
    void linkedServerCreateCallback(OAIHttpRequestWorker *worker);
    void linkedServerDeleteCallback(OAIHttpRequestWorker *worker);
    void linkedServerGetCallback(OAIHttpRequestWorker *worker);
    void linkedServerListCallback(OAIHttpRequestWorker *worker);
    void patchSchedulesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void patchSchedulesDeleteCallback(OAIHttpRequestWorker *worker);
    void patchSchedulesGetCallback(OAIHttpRequestWorker *worker);
    void patchSchedulesListByRedisResourceCallback(OAIHttpRequestWorker *worker);
    void redisCheckNameAvailabilityCallback(OAIHttpRequestWorker *worker);
    void redisCreateCallback(OAIHttpRequestWorker *worker);
    void redisDeleteCallback(OAIHttpRequestWorker *worker);
    void redisExportDataCallback(OAIHttpRequestWorker *worker);
    void redisForceRebootCallback(OAIHttpRequestWorker *worker);
    void redisGetCallback(OAIHttpRequestWorker *worker);
    void redisImportDataCallback(OAIHttpRequestWorker *worker);
    void redisListCallback(OAIHttpRequestWorker *worker);
    void redisListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void redisListKeysCallback(OAIHttpRequestWorker *worker);
    void redisListUpgradeNotificationsCallback(OAIHttpRequestWorker *worker);
    void redisRegenerateKeyCallback(OAIHttpRequestWorker *worker);
    void redisUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void firewallRulesCreateOrUpdateSignal(OAIRedisFirewallRule summary);
    void firewallRulesDeleteSignal();
    void firewallRulesGetSignal(OAIRedisFirewallRule summary);
    void firewallRulesListByRedisResourceSignal(OAIRedisFirewallRuleListResult summary);
    void linkedServerCreateSignal(OAIRedisLinkedServerWithProperties summary);
    void linkedServerDeleteSignal();
    void linkedServerGetSignal(OAIRedisLinkedServerWithProperties summary);
    void linkedServerListSignal(OAIRedisLinkedServerWithPropertiesList summary);
    void patchSchedulesCreateOrUpdateSignal(OAIRedisPatchSchedule summary);
    void patchSchedulesDeleteSignal();
    void patchSchedulesGetSignal(OAIRedisPatchSchedule summary);
    void patchSchedulesListByRedisResourceSignal(OAIRedisPatchScheduleListResult summary);
    void redisCheckNameAvailabilitySignal();
    void redisCreateSignal(OAIRedisResource summary);
    void redisDeleteSignal();
    void redisExportDataSignal();
    void redisForceRebootSignal(OAIRedisForceRebootResponse summary);
    void redisGetSignal(OAIRedisResource summary);
    void redisImportDataSignal();
    void redisListSignal(OAIRedisListResult summary);
    void redisListByResourceGroupSignal(OAIRedisListResult summary);
    void redisListKeysSignal(OAIRedisAccessKeys summary);
    void redisListUpgradeNotificationsSignal(OAINotificationListResponse summary);
    void redisRegenerateKeySignal(OAIRedisAccessKeys summary);
    void redisUpdateSignal(OAIRedisResource summary);


    void firewallRulesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRedisFirewallRule summary);
    void firewallRulesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void firewallRulesGetSignalFull(OAIHttpRequestWorker *worker, OAIRedisFirewallRule summary);
    void firewallRulesListByRedisResourceSignalFull(OAIHttpRequestWorker *worker, OAIRedisFirewallRuleListResult summary);
    void linkedServerCreateSignalFull(OAIHttpRequestWorker *worker, OAIRedisLinkedServerWithProperties summary);
    void linkedServerDeleteSignalFull(OAIHttpRequestWorker *worker);
    void linkedServerGetSignalFull(OAIHttpRequestWorker *worker, OAIRedisLinkedServerWithProperties summary);
    void linkedServerListSignalFull(OAIHttpRequestWorker *worker, OAIRedisLinkedServerWithPropertiesList summary);
    void patchSchedulesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRedisPatchSchedule summary);
    void patchSchedulesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void patchSchedulesGetSignalFull(OAIHttpRequestWorker *worker, OAIRedisPatchSchedule summary);
    void patchSchedulesListByRedisResourceSignalFull(OAIHttpRequestWorker *worker, OAIRedisPatchScheduleListResult summary);
    void redisCheckNameAvailabilitySignalFull(OAIHttpRequestWorker *worker);
    void redisCreateSignalFull(OAIHttpRequestWorker *worker, OAIRedisResource summary);
    void redisDeleteSignalFull(OAIHttpRequestWorker *worker);
    void redisExportDataSignalFull(OAIHttpRequestWorker *worker);
    void redisForceRebootSignalFull(OAIHttpRequestWorker *worker, OAIRedisForceRebootResponse summary);
    void redisGetSignalFull(OAIHttpRequestWorker *worker, OAIRedisResource summary);
    void redisImportDataSignalFull(OAIHttpRequestWorker *worker);
    void redisListSignalFull(OAIHttpRequestWorker *worker, OAIRedisListResult summary);
    void redisListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIRedisListResult summary);
    void redisListKeysSignalFull(OAIHttpRequestWorker *worker, OAIRedisAccessKeys summary);
    void redisListUpgradeNotificationsSignalFull(OAIHttpRequestWorker *worker, OAINotificationListResponse summary);
    void redisRegenerateKeySignalFull(OAIHttpRequestWorker *worker, OAIRedisAccessKeys summary);
    void redisUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRedisResource summary);

    Q_DECL_DEPRECATED_X("Use firewallRulesCreateOrUpdateSignalError() instead")
    void firewallRulesCreateOrUpdateSignalE(OAIRedisFirewallRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallRulesCreateOrUpdateSignalError(OAIRedisFirewallRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallRulesDeleteSignalError() instead")
    void firewallRulesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void firewallRulesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallRulesGetSignalError() instead")
    void firewallRulesGetSignalE(OAIRedisFirewallRule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallRulesGetSignalError(OAIRedisFirewallRule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallRulesListByRedisResourceSignalError() instead")
    void firewallRulesListByRedisResourceSignalE(OAIRedisFirewallRuleListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallRulesListByRedisResourceSignalError(OAIRedisFirewallRuleListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkedServerCreateSignalError() instead")
    void linkedServerCreateSignalE(OAIRedisLinkedServerWithProperties summary, QNetworkReply::NetworkError error_type, QString error_str);
    void linkedServerCreateSignalError(OAIRedisLinkedServerWithProperties summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkedServerDeleteSignalError() instead")
    void linkedServerDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void linkedServerDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkedServerGetSignalError() instead")
    void linkedServerGetSignalE(OAIRedisLinkedServerWithProperties summary, QNetworkReply::NetworkError error_type, QString error_str);
    void linkedServerGetSignalError(OAIRedisLinkedServerWithProperties summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkedServerListSignalError() instead")
    void linkedServerListSignalE(OAIRedisLinkedServerWithPropertiesList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void linkedServerListSignalError(OAIRedisLinkedServerWithPropertiesList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchSchedulesCreateOrUpdateSignalError() instead")
    void patchSchedulesCreateOrUpdateSignalE(OAIRedisPatchSchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchSchedulesCreateOrUpdateSignalError(OAIRedisPatchSchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchSchedulesDeleteSignalError() instead")
    void patchSchedulesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void patchSchedulesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchSchedulesGetSignalError() instead")
    void patchSchedulesGetSignalE(OAIRedisPatchSchedule summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchSchedulesGetSignalError(OAIRedisPatchSchedule summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchSchedulesListByRedisResourceSignalError() instead")
    void patchSchedulesListByRedisResourceSignalE(OAIRedisPatchScheduleListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchSchedulesListByRedisResourceSignalError(OAIRedisPatchScheduleListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisCheckNameAvailabilitySignalError() instead")
    void redisCheckNameAvailabilitySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void redisCheckNameAvailabilitySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisCreateSignalError() instead")
    void redisCreateSignalE(OAIRedisResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void redisCreateSignalError(OAIRedisResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisDeleteSignalError() instead")
    void redisDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void redisDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisExportDataSignalError() instead")
    void redisExportDataSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void redisExportDataSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisForceRebootSignalError() instead")
    void redisForceRebootSignalE(OAIRedisForceRebootResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void redisForceRebootSignalError(OAIRedisForceRebootResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisGetSignalError() instead")
    void redisGetSignalE(OAIRedisResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void redisGetSignalError(OAIRedisResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisImportDataSignalError() instead")
    void redisImportDataSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void redisImportDataSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisListSignalError() instead")
    void redisListSignalE(OAIRedisListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void redisListSignalError(OAIRedisListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisListByResourceGroupSignalError() instead")
    void redisListByResourceGroupSignalE(OAIRedisListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void redisListByResourceGroupSignalError(OAIRedisListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisListKeysSignalError() instead")
    void redisListKeysSignalE(OAIRedisAccessKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void redisListKeysSignalError(OAIRedisAccessKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisListUpgradeNotificationsSignalError() instead")
    void redisListUpgradeNotificationsSignalE(OAINotificationListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void redisListUpgradeNotificationsSignalError(OAINotificationListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisRegenerateKeySignalError() instead")
    void redisRegenerateKeySignalE(OAIRedisAccessKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void redisRegenerateKeySignalError(OAIRedisAccessKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisUpdateSignalError() instead")
    void redisUpdateSignalE(OAIRedisResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void redisUpdateSignalError(OAIRedisResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use firewallRulesCreateOrUpdateSignalErrorFull() instead")
    void firewallRulesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallRulesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallRulesDeleteSignalErrorFull() instead")
    void firewallRulesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallRulesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallRulesGetSignalErrorFull() instead")
    void firewallRulesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallRulesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firewallRulesListByRedisResourceSignalErrorFull() instead")
    void firewallRulesListByRedisResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void firewallRulesListByRedisResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkedServerCreateSignalErrorFull() instead")
    void linkedServerCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void linkedServerCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkedServerDeleteSignalErrorFull() instead")
    void linkedServerDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void linkedServerDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkedServerGetSignalErrorFull() instead")
    void linkedServerGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void linkedServerGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linkedServerListSignalErrorFull() instead")
    void linkedServerListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void linkedServerListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchSchedulesCreateOrUpdateSignalErrorFull() instead")
    void patchSchedulesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchSchedulesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchSchedulesDeleteSignalErrorFull() instead")
    void patchSchedulesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchSchedulesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchSchedulesGetSignalErrorFull() instead")
    void patchSchedulesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchSchedulesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchSchedulesListByRedisResourceSignalErrorFull() instead")
    void patchSchedulesListByRedisResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchSchedulesListByRedisResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisCheckNameAvailabilitySignalErrorFull() instead")
    void redisCheckNameAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redisCheckNameAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisCreateSignalErrorFull() instead")
    void redisCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redisCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisDeleteSignalErrorFull() instead")
    void redisDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redisDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisExportDataSignalErrorFull() instead")
    void redisExportDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redisExportDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisForceRebootSignalErrorFull() instead")
    void redisForceRebootSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redisForceRebootSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisGetSignalErrorFull() instead")
    void redisGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redisGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisImportDataSignalErrorFull() instead")
    void redisImportDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redisImportDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisListSignalErrorFull() instead")
    void redisListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redisListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisListByResourceGroupSignalErrorFull() instead")
    void redisListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redisListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisListKeysSignalErrorFull() instead")
    void redisListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redisListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisListUpgradeNotificationsSignalErrorFull() instead")
    void redisListUpgradeNotificationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redisListUpgradeNotificationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisRegenerateKeySignalErrorFull() instead")
    void redisRegenerateKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redisRegenerateKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisUpdateSignalErrorFull() instead")
    void redisUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redisUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
