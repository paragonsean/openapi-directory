/**
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2018-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRedisRebootParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRedisRebootParameters::OAIRedisRebootParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRedisRebootParameters::OAIRedisRebootParameters() {
    this->initializeModel();
}

OAIRedisRebootParameters::~OAIRedisRebootParameters() {}

void OAIRedisRebootParameters::initializeModel() {

    m_reboot_type_isSet = false;
    m_reboot_type_isValid = false;

    m_shard_id_isSet = false;
    m_shard_id_isValid = false;
}

void OAIRedisRebootParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRedisRebootParameters::fromJsonObject(QJsonObject json) {

    m_reboot_type_isValid = ::OpenAPI::fromJsonValue(m_reboot_type, json[QString("rebootType")]);
    m_reboot_type_isSet = !json[QString("rebootType")].isNull() && m_reboot_type_isValid;

    m_shard_id_isValid = ::OpenAPI::fromJsonValue(m_shard_id, json[QString("shardId")]);
    m_shard_id_isSet = !json[QString("shardId")].isNull() && m_shard_id_isValid;
}

QString OAIRedisRebootParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRedisRebootParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_reboot_type_isSet) {
        obj.insert(QString("rebootType"), ::OpenAPI::toJsonValue(m_reboot_type));
    }
    if (m_shard_id_isSet) {
        obj.insert(QString("shardId"), ::OpenAPI::toJsonValue(m_shard_id));
    }
    return obj;
}

QString OAIRedisRebootParameters::getRebootType() const {
    return m_reboot_type;
}
void OAIRedisRebootParameters::setRebootType(const QString &reboot_type) {
    m_reboot_type = reboot_type;
    m_reboot_type_isSet = true;
}

bool OAIRedisRebootParameters::is_reboot_type_Set() const{
    return m_reboot_type_isSet;
}

bool OAIRedisRebootParameters::is_reboot_type_Valid() const{
    return m_reboot_type_isValid;
}

qint32 OAIRedisRebootParameters::getShardId() const {
    return m_shard_id;
}
void OAIRedisRebootParameters::setShardId(const qint32 &shard_id) {
    m_shard_id = shard_id;
    m_shard_id_isSet = true;
}

bool OAIRedisRebootParameters::is_shard_id_Set() const{
    return m_shard_id_isSet;
}

bool OAIRedisRebootParameters::is_shard_id_Valid() const{
    return m_shard_id_isValid;
}

bool OAIRedisRebootParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reboot_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shard_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRedisRebootParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_reboot_type_isValid && true;
}

} // namespace OpenAPI
