/**
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2018-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpgradeNotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpgradeNotification::OAIUpgradeNotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpgradeNotification::OAIUpgradeNotification() {
    this->initializeModel();
}

OAIUpgradeNotification::~OAIUpgradeNotification() {}

void OAIUpgradeNotification::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_upsell_notification_isSet = false;
    m_upsell_notification_isValid = false;
}

void OAIUpgradeNotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpgradeNotification::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_upsell_notification_isValid = ::OpenAPI::fromJsonValue(m_upsell_notification, json[QString("upsellNotification")]);
    m_upsell_notification_isSet = !json[QString("upsellNotification")].isNull() && m_upsell_notification_isValid;
}

QString OAIUpgradeNotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpgradeNotification::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_upsell_notification.size() > 0) {
        obj.insert(QString("upsellNotification"), ::OpenAPI::toJsonValue(m_upsell_notification));
    }
    return obj;
}

QString OAIUpgradeNotification::getName() const {
    return m_name;
}
void OAIUpgradeNotification::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpgradeNotification::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpgradeNotification::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIUpgradeNotification::getTimestamp() const {
    return m_timestamp;
}
void OAIUpgradeNotification::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIUpgradeNotification::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIUpgradeNotification::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QMap<QString, QString> OAIUpgradeNotification::getUpsellNotification() const {
    return m_upsell_notification;
}
void OAIUpgradeNotification::setUpsellNotification(const QMap<QString, QString> &upsell_notification) {
    m_upsell_notification = upsell_notification;
    m_upsell_notification_isSet = true;
}

bool OAIUpgradeNotification::is_upsell_notification_Set() const{
    return m_upsell_notification_isSet;
}

bool OAIUpgradeNotification::is_upsell_notification_Valid() const{
    return m_upsell_notification_isValid;
}

bool OAIUpgradeNotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upsell_notification.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpgradeNotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
