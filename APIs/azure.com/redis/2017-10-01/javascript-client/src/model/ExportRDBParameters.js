/**
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2017-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExportRDBParameters model module.
 * @module model/ExportRDBParameters
 * @version 2017-10-01
 */
class ExportRDBParameters {
    /**
     * Constructs a new <code>ExportRDBParameters</code>.
     * Parameters for Redis export operation.
     * @alias module:model/ExportRDBParameters
     * @param container {String} Container name to export to.
     * @param prefix {String} Prefix to use for exported files.
     */
    constructor(container, prefix) { 
        
        ExportRDBParameters.initialize(this, container, prefix);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, container, prefix) { 
        obj['container'] = container;
        obj['prefix'] = prefix;
    }

    /**
     * Constructs a <code>ExportRDBParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExportRDBParameters} obj Optional instance to populate.
     * @return {module:model/ExportRDBParameters} The populated <code>ExportRDBParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExportRDBParameters();

            if (data.hasOwnProperty('container')) {
                obj['container'] = ApiClient.convertToType(data['container'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExportRDBParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExportRDBParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ExportRDBParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['container'] && !(typeof data['container'] === 'string' || data['container'] instanceof String)) {
            throw new Error("Expected the field `container` to be a primitive type in the JSON string but got " + data['container']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['prefix'] && !(typeof data['prefix'] === 'string' || data['prefix'] instanceof String)) {
            throw new Error("Expected the field `prefix` to be a primitive type in the JSON string but got " + data['prefix']);
        }

        return true;
    }


}

ExportRDBParameters.RequiredProperties = ["container", "prefix"];

/**
 * Container name to export to.
 * @member {String} container
 */
ExportRDBParameters.prototype['container'] = undefined;

/**
 * File format.
 * @member {String} format
 */
ExportRDBParameters.prototype['format'] = undefined;

/**
 * Prefix to use for exported files.
 * @member {String} prefix
 */
ExportRDBParameters.prototype['prefix'] = undefined;






export default ExportRDBParameters;

