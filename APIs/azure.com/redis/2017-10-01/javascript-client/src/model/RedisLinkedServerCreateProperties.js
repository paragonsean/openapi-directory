/**
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2017-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RedisLinkedServerCreateProperties model module.
 * @module model/RedisLinkedServerCreateProperties
 * @version 2017-10-01
 */
class RedisLinkedServerCreateProperties {
    /**
     * Constructs a new <code>RedisLinkedServerCreateProperties</code>.
     * Create properties for a linked server
     * @alias module:model/RedisLinkedServerCreateProperties
     * @param linkedRedisCacheId {String} Fully qualified resourceId of the linked redis cache.
     * @param linkedRedisCacheLocation {String} Location of the linked redis cache.
     * @param serverRole {module:model/RedisLinkedServerCreateProperties.ServerRoleEnum} Role of the linked server.
     */
    constructor(linkedRedisCacheId, linkedRedisCacheLocation, serverRole) { 
        
        RedisLinkedServerCreateProperties.initialize(this, linkedRedisCacheId, linkedRedisCacheLocation, serverRole);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, linkedRedisCacheId, linkedRedisCacheLocation, serverRole) { 
        obj['linkedRedisCacheId'] = linkedRedisCacheId;
        obj['linkedRedisCacheLocation'] = linkedRedisCacheLocation;
        obj['serverRole'] = serverRole;
    }

    /**
     * Constructs a <code>RedisLinkedServerCreateProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RedisLinkedServerCreateProperties} obj Optional instance to populate.
     * @return {module:model/RedisLinkedServerCreateProperties} The populated <code>RedisLinkedServerCreateProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RedisLinkedServerCreateProperties();

            if (data.hasOwnProperty('linkedRedisCacheId')) {
                obj['linkedRedisCacheId'] = ApiClient.convertToType(data['linkedRedisCacheId'], 'String');
            }
            if (data.hasOwnProperty('linkedRedisCacheLocation')) {
                obj['linkedRedisCacheLocation'] = ApiClient.convertToType(data['linkedRedisCacheLocation'], 'String');
            }
            if (data.hasOwnProperty('serverRole')) {
                obj['serverRole'] = ApiClient.convertToType(data['serverRole'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RedisLinkedServerCreateProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RedisLinkedServerCreateProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RedisLinkedServerCreateProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['linkedRedisCacheId'] && !(typeof data['linkedRedisCacheId'] === 'string' || data['linkedRedisCacheId'] instanceof String)) {
            throw new Error("Expected the field `linkedRedisCacheId` to be a primitive type in the JSON string but got " + data['linkedRedisCacheId']);
        }
        // ensure the json data is a string
        if (data['linkedRedisCacheLocation'] && !(typeof data['linkedRedisCacheLocation'] === 'string' || data['linkedRedisCacheLocation'] instanceof String)) {
            throw new Error("Expected the field `linkedRedisCacheLocation` to be a primitive type in the JSON string but got " + data['linkedRedisCacheLocation']);
        }
        // ensure the json data is a string
        if (data['serverRole'] && !(typeof data['serverRole'] === 'string' || data['serverRole'] instanceof String)) {
            throw new Error("Expected the field `serverRole` to be a primitive type in the JSON string but got " + data['serverRole']);
        }

        return true;
    }


}

RedisLinkedServerCreateProperties.RequiredProperties = ["linkedRedisCacheId", "linkedRedisCacheLocation", "serverRole"];

/**
 * Fully qualified resourceId of the linked redis cache.
 * @member {String} linkedRedisCacheId
 */
RedisLinkedServerCreateProperties.prototype['linkedRedisCacheId'] = undefined;

/**
 * Location of the linked redis cache.
 * @member {String} linkedRedisCacheLocation
 */
RedisLinkedServerCreateProperties.prototype['linkedRedisCacheLocation'] = undefined;

/**
 * Role of the linked server.
 * @member {module:model/RedisLinkedServerCreateProperties.ServerRoleEnum} serverRole
 */
RedisLinkedServerCreateProperties.prototype['serverRole'] = undefined;





/**
 * Allowed values for the <code>serverRole</code> property.
 * @enum {String}
 * @readonly
 */
RedisLinkedServerCreateProperties['ServerRoleEnum'] = {

    /**
     * value: "Primary"
     * @const
     */
    "Primary": "Primary",

    /**
     * value: "Secondary"
     * @const
     */
    "Secondary": "Secondary"
};



export default RedisLinkedServerCreateProperties;

