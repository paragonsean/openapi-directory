/**
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2017-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RedisCommonProperties model module.
 * @module model/RedisCommonProperties
 * @version 2017-10-01
 */
class RedisCommonProperties {
    /**
     * Constructs a new <code>RedisCommonProperties</code>.
     * Create/Update/Get common properties of the redis cache.
     * @alias module:model/RedisCommonProperties
     */
    constructor() { 
        
        RedisCommonProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RedisCommonProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RedisCommonProperties} obj Optional instance to populate.
     * @return {module:model/RedisCommonProperties} The populated <code>RedisCommonProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RedisCommonProperties();

            if (data.hasOwnProperty('enableNonSslPort')) {
                obj['enableNonSslPort'] = ApiClient.convertToType(data['enableNonSslPort'], 'Boolean');
            }
            if (data.hasOwnProperty('redisConfiguration')) {
                obj['redisConfiguration'] = ApiClient.convertToType(data['redisConfiguration'], {'String': 'String'});
            }
            if (data.hasOwnProperty('shardCount')) {
                obj['shardCount'] = ApiClient.convertToType(data['shardCount'], 'Number');
            }
            if (data.hasOwnProperty('tenantSettings')) {
                obj['tenantSettings'] = ApiClient.convertToType(data['tenantSettings'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RedisCommonProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RedisCommonProperties</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Specifies whether the non-ssl Redis server port (6379) is enabled.
 * @member {Boolean} enableNonSslPort
 */
RedisCommonProperties.prototype['enableNonSslPort'] = undefined;

/**
 * All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
 * @member {Object.<String, String>} redisConfiguration
 */
RedisCommonProperties.prototype['redisConfiguration'] = undefined;

/**
 * The number of shards to be created on a Premium Cluster Cache.
 * @member {Number} shardCount
 */
RedisCommonProperties.prototype['shardCount'] = undefined;

/**
 * A dictionary of tenant settings
 * @member {Object.<String, String>} tenantSettings
 */
RedisCommonProperties.prototype['tenantSettings'] = undefined;






export default RedisCommonProperties;

