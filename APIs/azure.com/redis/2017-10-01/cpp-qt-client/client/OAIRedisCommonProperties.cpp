/**
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2017-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRedisCommonProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRedisCommonProperties::OAIRedisCommonProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRedisCommonProperties::OAIRedisCommonProperties() {
    this->initializeModel();
}

OAIRedisCommonProperties::~OAIRedisCommonProperties() {}

void OAIRedisCommonProperties::initializeModel() {

    m_enable_non_ssl_port_isSet = false;
    m_enable_non_ssl_port_isValid = false;

    m_redis_configuration_isSet = false;
    m_redis_configuration_isValid = false;

    m_shard_count_isSet = false;
    m_shard_count_isValid = false;

    m_tenant_settings_isSet = false;
    m_tenant_settings_isValid = false;
}

void OAIRedisCommonProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRedisCommonProperties::fromJsonObject(QJsonObject json) {

    m_enable_non_ssl_port_isValid = ::OpenAPI::fromJsonValue(m_enable_non_ssl_port, json[QString("enableNonSslPort")]);
    m_enable_non_ssl_port_isSet = !json[QString("enableNonSslPort")].isNull() && m_enable_non_ssl_port_isValid;

    m_redis_configuration_isValid = ::OpenAPI::fromJsonValue(m_redis_configuration, json[QString("redisConfiguration")]);
    m_redis_configuration_isSet = !json[QString("redisConfiguration")].isNull() && m_redis_configuration_isValid;

    m_shard_count_isValid = ::OpenAPI::fromJsonValue(m_shard_count, json[QString("shardCount")]);
    m_shard_count_isSet = !json[QString("shardCount")].isNull() && m_shard_count_isValid;

    m_tenant_settings_isValid = ::OpenAPI::fromJsonValue(m_tenant_settings, json[QString("tenantSettings")]);
    m_tenant_settings_isSet = !json[QString("tenantSettings")].isNull() && m_tenant_settings_isValid;
}

QString OAIRedisCommonProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRedisCommonProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_non_ssl_port_isSet) {
        obj.insert(QString("enableNonSslPort"), ::OpenAPI::toJsonValue(m_enable_non_ssl_port));
    }
    if (m_redis_configuration.size() > 0) {
        obj.insert(QString("redisConfiguration"), ::OpenAPI::toJsonValue(m_redis_configuration));
    }
    if (m_shard_count_isSet) {
        obj.insert(QString("shardCount"), ::OpenAPI::toJsonValue(m_shard_count));
    }
    if (m_tenant_settings.size() > 0) {
        obj.insert(QString("tenantSettings"), ::OpenAPI::toJsonValue(m_tenant_settings));
    }
    return obj;
}

bool OAIRedisCommonProperties::isEnableNonSslPort() const {
    return m_enable_non_ssl_port;
}
void OAIRedisCommonProperties::setEnableNonSslPort(const bool &enable_non_ssl_port) {
    m_enable_non_ssl_port = enable_non_ssl_port;
    m_enable_non_ssl_port_isSet = true;
}

bool OAIRedisCommonProperties::is_enable_non_ssl_port_Set() const{
    return m_enable_non_ssl_port_isSet;
}

bool OAIRedisCommonProperties::is_enable_non_ssl_port_Valid() const{
    return m_enable_non_ssl_port_isValid;
}

QMap<QString, QString> OAIRedisCommonProperties::getRedisConfiguration() const {
    return m_redis_configuration;
}
void OAIRedisCommonProperties::setRedisConfiguration(const QMap<QString, QString> &redis_configuration) {
    m_redis_configuration = redis_configuration;
    m_redis_configuration_isSet = true;
}

bool OAIRedisCommonProperties::is_redis_configuration_Set() const{
    return m_redis_configuration_isSet;
}

bool OAIRedisCommonProperties::is_redis_configuration_Valid() const{
    return m_redis_configuration_isValid;
}

qint32 OAIRedisCommonProperties::getShardCount() const {
    return m_shard_count;
}
void OAIRedisCommonProperties::setShardCount(const qint32 &shard_count) {
    m_shard_count = shard_count;
    m_shard_count_isSet = true;
}

bool OAIRedisCommonProperties::is_shard_count_Set() const{
    return m_shard_count_isSet;
}

bool OAIRedisCommonProperties::is_shard_count_Valid() const{
    return m_shard_count_isValid;
}

QMap<QString, QString> OAIRedisCommonProperties::getTenantSettings() const {
    return m_tenant_settings;
}
void OAIRedisCommonProperties::setTenantSettings(const QMap<QString, QString> &tenant_settings) {
    m_tenant_settings = tenant_settings;
    m_tenant_settings_isSet = true;
}

bool OAIRedisCommonProperties::is_tenant_settings_Set() const{
    return m_tenant_settings_isSet;
}

bool OAIRedisCommonProperties::is_tenant_settings_Valid() const{
    return m_tenant_settings_isValid;
}

bool OAIRedisCommonProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_non_ssl_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redis_configuration.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shard_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRedisCommonProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
