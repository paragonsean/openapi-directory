/*
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2017-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies which Redis node(s) to reboot.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:52:18.093093-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RedisRebootParameters {
  /**
   * Which Redis node(s) to reboot. Depending on this value data loss is possible.
   */
  @JsonAdapter(RebootTypeEnum.Adapter.class)
  public enum RebootTypeEnum {
    PRIMARY_NODE("PrimaryNode"),
    
    SECONDARY_NODE("SecondaryNode"),
    
    ALL_NODES("AllNodes");

    private String value;

    RebootTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RebootTypeEnum fromValue(String value) {
      for (RebootTypeEnum b : RebootTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RebootTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RebootTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RebootTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RebootTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RebootTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REBOOT_TYPE = "rebootType";
  @SerializedName(SERIALIZED_NAME_REBOOT_TYPE)
  private RebootTypeEnum rebootType;

  public static final String SERIALIZED_NAME_SHARD_ID = "shardId";
  @SerializedName(SERIALIZED_NAME_SHARD_ID)
  private Integer shardId;

  public RedisRebootParameters() {
  }

  public RedisRebootParameters rebootType(RebootTypeEnum rebootType) {
    this.rebootType = rebootType;
    return this;
  }

  /**
   * Which Redis node(s) to reboot. Depending on this value data loss is possible.
   * @return rebootType
   */
  @javax.annotation.Nonnull
  public RebootTypeEnum getRebootType() {
    return rebootType;
  }

  public void setRebootType(RebootTypeEnum rebootType) {
    this.rebootType = rebootType;
  }


  public RedisRebootParameters shardId(Integer shardId) {
    this.shardId = shardId;
    return this;
  }

  /**
   * If clustering is enabled, the ID of the shard to be rebooted.
   * @return shardId
   */
  @javax.annotation.Nullable
  public Integer getShardId() {
    return shardId;
  }

  public void setShardId(Integer shardId) {
    this.shardId = shardId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RedisRebootParameters redisRebootParameters = (RedisRebootParameters) o;
    return Objects.equals(this.rebootType, redisRebootParameters.rebootType) &&
        Objects.equals(this.shardId, redisRebootParameters.shardId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rebootType, shardId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RedisRebootParameters {\n");
    sb.append("    rebootType: ").append(toIndentedString(rebootType)).append("\n");
    sb.append("    shardId: ").append(toIndentedString(shardId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rebootType");
    openapiFields.add("shardId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("rebootType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RedisRebootParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RedisRebootParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RedisRebootParameters is not found in the empty JSON string", RedisRebootParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RedisRebootParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RedisRebootParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RedisRebootParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("rebootType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rebootType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rebootType").toString()));
      }
      // validate the required field `rebootType`
      RebootTypeEnum.validateJsonElement(jsonObj.get("rebootType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RedisRebootParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RedisRebootParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RedisRebootParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RedisRebootParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<RedisRebootParameters>() {
           @Override
           public void write(JsonWriter out, RedisRebootParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RedisRebootParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RedisRebootParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RedisRebootParameters
   * @throws IOException if the JSON string is invalid with respect to RedisRebootParameters
   */
  public static RedisRebootParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RedisRebootParameters.class);
  }

  /**
   * Convert an instance of RedisRebootParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

