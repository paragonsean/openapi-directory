/*
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2017-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RedisFirewallRule;
import org.openapitools.client.model.RedisFirewallRuleCreateParameters;
import org.openapitools.client.model.RedisFirewallRuleListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FirewallRulesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FirewallRulesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FirewallRulesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for firewallRulesCreateOrUpdate_0
     * @param resourceGroupName The name of the resource group. (required)
     * @param cacheName The name of the Redis cache. (required)
     * @param ruleName The name of the firewall rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create or update redis firewall rule operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource was successfully updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Resource was successfully created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallRulesCreateOrUpdate_0Call(String resourceGroupName, String cacheName, String ruleName, String apiVersion, String subscriptionId, RedisFirewallRuleCreateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{cacheName}/firewallRules/{ruleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "cacheName" + "}", localVarApiClient.escapeString(cacheName.toString()))
            .replace("{" + "ruleName" + "}", localVarApiClient.escapeString(ruleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call firewallRulesCreateOrUpdate_0ValidateBeforeCall(String resourceGroupName, String cacheName, String ruleName, String apiVersion, String subscriptionId, RedisFirewallRuleCreateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling firewallRulesCreateOrUpdate_0(Async)");
        }

        // verify the required parameter 'cacheName' is set
        if (cacheName == null) {
            throw new ApiException("Missing the required parameter 'cacheName' when calling firewallRulesCreateOrUpdate_0(Async)");
        }

        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling firewallRulesCreateOrUpdate_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling firewallRulesCreateOrUpdate_0(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling firewallRulesCreateOrUpdate_0(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling firewallRulesCreateOrUpdate_0(Async)");
        }

        return firewallRulesCreateOrUpdate_0Call(resourceGroupName, cacheName, ruleName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Create or update a redis cache firewall rule
     * @param resourceGroupName The name of the resource group. (required)
     * @param cacheName The name of the Redis cache. (required)
     * @param ruleName The name of the firewall rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create or update redis firewall rule operation. (required)
     * @return RedisFirewallRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource was successfully updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Resource was successfully created </td><td>  -  </td></tr>
     </table>
     */
    public RedisFirewallRule firewallRulesCreateOrUpdate_0(String resourceGroupName, String cacheName, String ruleName, String apiVersion, String subscriptionId, RedisFirewallRuleCreateParameters parameters) throws ApiException {
        ApiResponse<RedisFirewallRule> localVarResp = firewallRulesCreateOrUpdate_0WithHttpInfo(resourceGroupName, cacheName, ruleName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update a redis cache firewall rule
     * @param resourceGroupName The name of the resource group. (required)
     * @param cacheName The name of the Redis cache. (required)
     * @param ruleName The name of the firewall rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create or update redis firewall rule operation. (required)
     * @return ApiResponse&lt;RedisFirewallRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource was successfully updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Resource was successfully created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RedisFirewallRule> firewallRulesCreateOrUpdate_0WithHttpInfo(String resourceGroupName, String cacheName, String ruleName, String apiVersion, String subscriptionId, RedisFirewallRuleCreateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = firewallRulesCreateOrUpdate_0ValidateBeforeCall(resourceGroupName, cacheName, ruleName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<RedisFirewallRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update a redis cache firewall rule
     * @param resourceGroupName The name of the resource group. (required)
     * @param cacheName The name of the Redis cache. (required)
     * @param ruleName The name of the firewall rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to the create or update redis firewall rule operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Resource was successfully updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Resource was successfully created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallRulesCreateOrUpdate_0Async(String resourceGroupName, String cacheName, String ruleName, String apiVersion, String subscriptionId, RedisFirewallRuleCreateParameters parameters, final ApiCallback<RedisFirewallRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = firewallRulesCreateOrUpdate_0ValidateBeforeCall(resourceGroupName, cacheName, ruleName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<RedisFirewallRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for firewallRulesDelete_0
     * @param resourceGroupName The name of the resource group. (required)
     * @param cacheName The name of the Redis cache. (required)
     * @param ruleName The name of the firewall rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the rule </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the rule </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallRulesDelete_0Call(String resourceGroupName, String cacheName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{cacheName}/firewallRules/{ruleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "cacheName" + "}", localVarApiClient.escapeString(cacheName.toString()))
            .replace("{" + "ruleName" + "}", localVarApiClient.escapeString(ruleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call firewallRulesDelete_0ValidateBeforeCall(String resourceGroupName, String cacheName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling firewallRulesDelete_0(Async)");
        }

        // verify the required parameter 'cacheName' is set
        if (cacheName == null) {
            throw new ApiException("Missing the required parameter 'cacheName' when calling firewallRulesDelete_0(Async)");
        }

        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling firewallRulesDelete_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling firewallRulesDelete_0(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling firewallRulesDelete_0(Async)");
        }

        return firewallRulesDelete_0Call(resourceGroupName, cacheName, ruleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes a single firewall rule in a specified redis cache.
     * @param resourceGroupName The name of the resource group. (required)
     * @param cacheName The name of the Redis cache. (required)
     * @param ruleName The name of the firewall rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the rule </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the rule </td><td>  -  </td></tr>
     </table>
     */
    public void firewallRulesDelete_0(String resourceGroupName, String cacheName, String ruleName, String apiVersion, String subscriptionId) throws ApiException {
        firewallRulesDelete_0WithHttpInfo(resourceGroupName, cacheName, ruleName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes a single firewall rule in a specified redis cache.
     * @param resourceGroupName The name of the resource group. (required)
     * @param cacheName The name of the Redis cache. (required)
     * @param ruleName The name of the firewall rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the rule </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the rule </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> firewallRulesDelete_0WithHttpInfo(String resourceGroupName, String cacheName, String ruleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = firewallRulesDelete_0ValidateBeforeCall(resourceGroupName, cacheName, ruleName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a single firewall rule in a specified redis cache.
     * @param resourceGroupName The name of the resource group. (required)
     * @param cacheName The name of the Redis cache. (required)
     * @param ruleName The name of the firewall rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the rule </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the rule </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallRulesDelete_0Async(String resourceGroupName, String cacheName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = firewallRulesDelete_0ValidateBeforeCall(resourceGroupName, cacheName, ruleName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for firewallRulesGet_0
     * @param resourceGroupName The name of the resource group. (required)
     * @param cacheName The name of the Redis cache. (required)
     * @param ruleName The name of the firewall rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully found the rule </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallRulesGet_0Call(String resourceGroupName, String cacheName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{cacheName}/firewallRules/{ruleName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "cacheName" + "}", localVarApiClient.escapeString(cacheName.toString()))
            .replace("{" + "ruleName" + "}", localVarApiClient.escapeString(ruleName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call firewallRulesGet_0ValidateBeforeCall(String resourceGroupName, String cacheName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling firewallRulesGet_0(Async)");
        }

        // verify the required parameter 'cacheName' is set
        if (cacheName == null) {
            throw new ApiException("Missing the required parameter 'cacheName' when calling firewallRulesGet_0(Async)");
        }

        // verify the required parameter 'ruleName' is set
        if (ruleName == null) {
            throw new ApiException("Missing the required parameter 'ruleName' when calling firewallRulesGet_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling firewallRulesGet_0(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling firewallRulesGet_0(Async)");
        }

        return firewallRulesGet_0Call(resourceGroupName, cacheName, ruleName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets a single firewall rule in a specified redis cache.
     * @param resourceGroupName The name of the resource group. (required)
     * @param cacheName The name of the Redis cache. (required)
     * @param ruleName The name of the firewall rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return RedisFirewallRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully found the rule </td><td>  -  </td></tr>
     </table>
     */
    public RedisFirewallRule firewallRulesGet_0(String resourceGroupName, String cacheName, String ruleName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<RedisFirewallRule> localVarResp = firewallRulesGet_0WithHttpInfo(resourceGroupName, cacheName, ruleName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a single firewall rule in a specified redis cache.
     * @param resourceGroupName The name of the resource group. (required)
     * @param cacheName The name of the Redis cache. (required)
     * @param ruleName The name of the firewall rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;RedisFirewallRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully found the rule </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RedisFirewallRule> firewallRulesGet_0WithHttpInfo(String resourceGroupName, String cacheName, String ruleName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = firewallRulesGet_0ValidateBeforeCall(resourceGroupName, cacheName, ruleName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<RedisFirewallRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a single firewall rule in a specified redis cache.
     * @param resourceGroupName The name of the resource group. (required)
     * @param cacheName The name of the Redis cache. (required)
     * @param ruleName The name of the firewall rule. (required)
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully found the rule </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallRulesGet_0Async(String resourceGroupName, String cacheName, String ruleName, String apiVersion, String subscriptionId, final ApiCallback<RedisFirewallRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = firewallRulesGet_0ValidateBeforeCall(resourceGroupName, cacheName, ruleName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<RedisFirewallRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for firewallRulesListByRedisResource_0
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param cacheName The name of the Redis cache. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got the current rules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallRulesListByRedisResource_0Call(String apiVersion, String subscriptionId, String resourceGroupName, String cacheName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cache/Redis/{cacheName}/firewallRules"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "cacheName" + "}", localVarApiClient.escapeString(cacheName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call firewallRulesListByRedisResource_0ValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String cacheName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling firewallRulesListByRedisResource_0(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling firewallRulesListByRedisResource_0(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling firewallRulesListByRedisResource_0(Async)");
        }

        // verify the required parameter 'cacheName' is set
        if (cacheName == null) {
            throw new ApiException("Missing the required parameter 'cacheName' when calling firewallRulesListByRedisResource_0(Async)");
        }

        return firewallRulesListByRedisResource_0Call(apiVersion, subscriptionId, resourceGroupName, cacheName, _callback);

    }

    /**
     * 
     * Gets all firewall rules in the specified redis cache.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param cacheName The name of the Redis cache. (required)
     * @return RedisFirewallRuleListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got the current rules </td><td>  -  </td></tr>
     </table>
     */
    public RedisFirewallRuleListResult firewallRulesListByRedisResource_0(String apiVersion, String subscriptionId, String resourceGroupName, String cacheName) throws ApiException {
        ApiResponse<RedisFirewallRuleListResult> localVarResp = firewallRulesListByRedisResource_0WithHttpInfo(apiVersion, subscriptionId, resourceGroupName, cacheName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all firewall rules in the specified redis cache.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param cacheName The name of the Redis cache. (required)
     * @return ApiResponse&lt;RedisFirewallRuleListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got the current rules </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RedisFirewallRuleListResult> firewallRulesListByRedisResource_0WithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String cacheName) throws ApiException {
        okhttp3.Call localVarCall = firewallRulesListByRedisResource_0ValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, cacheName, null);
        Type localVarReturnType = new TypeToken<RedisFirewallRuleListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all firewall rules in the specified redis cache.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Gets subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param cacheName The name of the Redis cache. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got the current rules </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call firewallRulesListByRedisResource_0Async(String apiVersion, String subscriptionId, String resourceGroupName, String cacheName, final ApiCallback<RedisFirewallRuleListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = firewallRulesListByRedisResource_0ValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, cacheName, _callback);
        Type localVarReturnType = new TypeToken<RedisFirewallRuleListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
