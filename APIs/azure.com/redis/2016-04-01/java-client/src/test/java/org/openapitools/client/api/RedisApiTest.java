/*
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2016-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ExportRDBParameters;
import org.openapitools.client.model.ImportRDBParameters;
import org.openapitools.client.model.RedisAccessKeys;
import org.openapitools.client.model.RedisCreateParameters;
import org.openapitools.client.model.RedisFirewallRule;
import org.openapitools.client.model.RedisFirewallRuleListResult;
import org.openapitools.client.model.RedisForceRebootResponse;
import org.openapitools.client.model.RedisListResult;
import org.openapitools.client.model.RedisPatchSchedule;
import org.openapitools.client.model.RedisRebootParameters;
import org.openapitools.client.model.RedisRegenerateKeyParameters;
import org.openapitools.client.model.RedisResource;
import org.openapitools.client.model.RedisUpdateParameters;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RedisApi
 */
@Disabled
public class RedisApiTest {

    private final RedisApi api = new RedisApi();

    /**
     * Gets all firewall rules in the specified redis cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firewallRulesListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String cacheName = null;
        RedisFirewallRuleListResult response = api.firewallRulesList(apiVersion, subscriptionId, resourceGroupName, cacheName);
        // TODO: test validations
    }

    /**
     * Create or replace the patching schedule for Redis cache (requires Premium SKU).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchSchedulesCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String apiVersion = null;
        String subscriptionId = null;
        RedisPatchSchedule parameters = null;
        RedisPatchSchedule response = api.patchSchedulesCreateOrUpdate(resourceGroupName, name, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes the patching schedule of a redis cache (requires Premium SKU).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchSchedulesDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.patchSchedulesDelete(resourceGroupName, name, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the patching schedule of a redis cache (requires Premium SKU).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchSchedulesGetTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String apiVersion = null;
        String subscriptionId = null;
        RedisPatchSchedule response = api.patchSchedulesGet(resourceGroupName, name, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Create or replace (overwrite/recreate, with potential downtime) an existing Redis cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redisCreateTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String apiVersion = null;
        String subscriptionId = null;
        RedisCreateParameters parameters = null;
        RedisResource response = api.redisCreate(resourceGroupName, name, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a Redis cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redisDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.redisDelete(resourceGroupName, name, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Export data from the redis cache to blobs in a container.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redisExportDataTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String apiVersion = null;
        String subscriptionId = null;
        ExportRDBParameters parameters = null;
        api.redisExportData(resourceGroupName, name, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Create or update a redis cache firewall rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redisFirewallRuleCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String cacheName = null;
        String ruleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        RedisFirewallRule parameters = null;
        RedisFirewallRule response = api.redisFirewallRuleCreateOrUpdate(resourceGroupName, cacheName, ruleName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a single firewall rule in a specified redis cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redisFirewallRuleDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String cacheName = null;
        String ruleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.redisFirewallRuleDelete(resourceGroupName, cacheName, ruleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets a single firewall rule in a specified redis cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redisFirewallRuleGetTest() throws ApiException {
        String resourceGroupName = null;
        String cacheName = null;
        String ruleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        RedisFirewallRule response = api.redisFirewallRuleGet(resourceGroupName, cacheName, ruleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Reboot specified Redis node(s). This operation requires write permission to the cache resource. There can be potential data loss.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redisForceRebootTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String apiVersion = null;
        String subscriptionId = null;
        RedisRebootParameters parameters = null;
        RedisForceRebootResponse response = api.redisForceReboot(resourceGroupName, name, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Gets a Redis cache (resource description).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redisGetTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String apiVersion = null;
        String subscriptionId = null;
        RedisResource response = api.redisGet(resourceGroupName, name, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Import data into Redis cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redisImportDataTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String apiVersion = null;
        String subscriptionId = null;
        ImportRDBParameters parameters = null;
        api.redisImportData(resourceGroupName, name, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Gets all Redis caches in the specified subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redisListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        RedisListResult response = api.redisList(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all Redis caches in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redisListByResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        RedisListResult response = api.redisListByResourceGroup(resourceGroupName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Retrieve a Redis cache&#39;s access keys. This operation requires write permission to the cache resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redisListKeysTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String apiVersion = null;
        String subscriptionId = null;
        RedisAccessKeys response = api.redisListKeys(resourceGroupName, name, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Regenerate Redis cache&#39;s access keys. This operation requires write permission to the cache resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redisRegenerateKeyTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String apiVersion = null;
        String subscriptionId = null;
        RedisRegenerateKeyParameters parameters = null;
        RedisAccessKeys response = api.redisRegenerateKey(resourceGroupName, name, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Update an existing Redis cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redisUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String apiVersion = null;
        String subscriptionId = null;
        RedisUpdateParameters parameters = null;
        RedisResource response = api.redisUpdate(resourceGroupName, name, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
