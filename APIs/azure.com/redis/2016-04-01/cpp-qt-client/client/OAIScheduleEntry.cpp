/**
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2016-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleEntry::OAIScheduleEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleEntry::OAIScheduleEntry() {
    this->initializeModel();
}

OAIScheduleEntry::~OAIScheduleEntry() {}

void OAIScheduleEntry::initializeModel() {

    m_day_of_week_isSet = false;
    m_day_of_week_isValid = false;

    m_maintenance_window_isSet = false;
    m_maintenance_window_isValid = false;

    m_start_hour_utc_isSet = false;
    m_start_hour_utc_isValid = false;
}

void OAIScheduleEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleEntry::fromJsonObject(QJsonObject json) {

    m_day_of_week_isValid = ::OpenAPI::fromJsonValue(m_day_of_week, json[QString("dayOfWeek")]);
    m_day_of_week_isSet = !json[QString("dayOfWeek")].isNull() && m_day_of_week_isValid;

    m_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_maintenance_window, json[QString("maintenanceWindow")]);
    m_maintenance_window_isSet = !json[QString("maintenanceWindow")].isNull() && m_maintenance_window_isValid;

    m_start_hour_utc_isValid = ::OpenAPI::fromJsonValue(m_start_hour_utc, json[QString("startHourUtc")]);
    m_start_hour_utc_isSet = !json[QString("startHourUtc")].isNull() && m_start_hour_utc_isValid;
}

QString OAIScheduleEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_day_of_week_isSet) {
        obj.insert(QString("dayOfWeek"), ::OpenAPI::toJsonValue(m_day_of_week));
    }
    if (m_maintenance_window_isSet) {
        obj.insert(QString("maintenanceWindow"), ::OpenAPI::toJsonValue(m_maintenance_window));
    }
    if (m_start_hour_utc_isSet) {
        obj.insert(QString("startHourUtc"), ::OpenAPI::toJsonValue(m_start_hour_utc));
    }
    return obj;
}

QString OAIScheduleEntry::getDayOfWeek() const {
    return m_day_of_week;
}
void OAIScheduleEntry::setDayOfWeek(const QString &day_of_week) {
    m_day_of_week = day_of_week;
    m_day_of_week_isSet = true;
}

bool OAIScheduleEntry::is_day_of_week_Set() const{
    return m_day_of_week_isSet;
}

bool OAIScheduleEntry::is_day_of_week_Valid() const{
    return m_day_of_week_isValid;
}

QString OAIScheduleEntry::getMaintenanceWindow() const {
    return m_maintenance_window;
}
void OAIScheduleEntry::setMaintenanceWindow(const QString &maintenance_window) {
    m_maintenance_window = maintenance_window;
    m_maintenance_window_isSet = true;
}

bool OAIScheduleEntry::is_maintenance_window_Set() const{
    return m_maintenance_window_isSet;
}

bool OAIScheduleEntry::is_maintenance_window_Valid() const{
    return m_maintenance_window_isValid;
}

qint32 OAIScheduleEntry::getStartHourUtc() const {
    return m_start_hour_utc;
}
void OAIScheduleEntry::setStartHourUtc(const qint32 &start_hour_utc) {
    m_start_hour_utc = start_hour_utc;
    m_start_hour_utc_isSet = true;
}

bool OAIScheduleEntry::is_start_hour_utc_Set() const{
    return m_start_hour_utc_isSet;
}

bool OAIScheduleEntry::is_start_hour_utc_Valid() const{
    return m_start_hour_utc_isValid;
}

bool OAIScheduleEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_day_of_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_hour_utc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_day_of_week_isValid && m_start_hour_utc_isValid && true;
}

} // namespace OpenAPI
