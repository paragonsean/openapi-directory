# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExportRDBParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container: str=None, format: str=None, prefix: str=None):
        """ExportRDBParameters - a model defined in OpenAPI

        :param container: The container of this ExportRDBParameters.
        :param format: The format of this ExportRDBParameters.
        :param prefix: The prefix of this ExportRDBParameters.
        """
        self.openapi_types = {
            'container': str,
            'format': str,
            'prefix': str
        }

        self.attribute_map = {
            'container': 'container',
            'format': 'format',
            'prefix': 'prefix'
        }

        self._container = container
        self._format = format
        self._prefix = prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportRDBParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExportRDBParameters of this ExportRDBParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container(self):
        """Gets the container of this ExportRDBParameters.

        Container name to export to.

        :return: The container of this ExportRDBParameters.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this ExportRDBParameters.

        Container name to export to.

        :param container: The container of this ExportRDBParameters.
        :type container: str
        """
        if container is None:
            raise ValueError("Invalid value for `container`, must not be `None`")

        self._container = container

    @property
    def format(self):
        """Gets the format of this ExportRDBParameters.

        File format.

        :return: The format of this ExportRDBParameters.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ExportRDBParameters.

        File format.

        :param format: The format of this ExportRDBParameters.
        :type format: str
        """

        self._format = format

    @property
    def prefix(self):
        """Gets the prefix of this ExportRDBParameters.

        Prefix to use for exported files.

        :return: The prefix of this ExportRDBParameters.
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this ExportRDBParameters.

        Prefix to use for exported files.

        :param prefix: The prefix of this ExportRDBParameters.
        :type prefix: str
        """
        if prefix is None:
            raise ValueError("Invalid value for `prefix`, must not be `None`")

        self._prefix = prefix
