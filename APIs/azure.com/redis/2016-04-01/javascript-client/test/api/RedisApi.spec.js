/**
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2016-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RedisManagementClient);
  }
}(this, function(expect, RedisManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RedisManagementClient.RedisApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RedisApi', function() {
    describe('firewallRulesList', function() {
      it('should call firewallRulesList successfully', function(done) {
        //uncomment below and update the code to test firewallRulesList
        //instance.firewallRulesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchSchedulesCreateOrUpdate', function() {
      it('should call patchSchedulesCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test patchSchedulesCreateOrUpdate
        //instance.patchSchedulesCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchSchedulesDelete', function() {
      it('should call patchSchedulesDelete successfully', function(done) {
        //uncomment below and update the code to test patchSchedulesDelete
        //instance.patchSchedulesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchSchedulesGet', function() {
      it('should call patchSchedulesGet successfully', function(done) {
        //uncomment below and update the code to test patchSchedulesGet
        //instance.patchSchedulesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('redisCreate', function() {
      it('should call redisCreate successfully', function(done) {
        //uncomment below and update the code to test redisCreate
        //instance.redisCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('redisDelete', function() {
      it('should call redisDelete successfully', function(done) {
        //uncomment below and update the code to test redisDelete
        //instance.redisDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('redisExportData', function() {
      it('should call redisExportData successfully', function(done) {
        //uncomment below and update the code to test redisExportData
        //instance.redisExportData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('redisFirewallRuleCreateOrUpdate', function() {
      it('should call redisFirewallRuleCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test redisFirewallRuleCreateOrUpdate
        //instance.redisFirewallRuleCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('redisFirewallRuleDelete', function() {
      it('should call redisFirewallRuleDelete successfully', function(done) {
        //uncomment below and update the code to test redisFirewallRuleDelete
        //instance.redisFirewallRuleDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('redisFirewallRuleGet', function() {
      it('should call redisFirewallRuleGet successfully', function(done) {
        //uncomment below and update the code to test redisFirewallRuleGet
        //instance.redisFirewallRuleGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('redisForceReboot', function() {
      it('should call redisForceReboot successfully', function(done) {
        //uncomment below and update the code to test redisForceReboot
        //instance.redisForceReboot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('redisGet', function() {
      it('should call redisGet successfully', function(done) {
        //uncomment below and update the code to test redisGet
        //instance.redisGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('redisImportData', function() {
      it('should call redisImportData successfully', function(done) {
        //uncomment below and update the code to test redisImportData
        //instance.redisImportData(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('redisList', function() {
      it('should call redisList successfully', function(done) {
        //uncomment below and update the code to test redisList
        //instance.redisList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('redisListByResourceGroup', function() {
      it('should call redisListByResourceGroup successfully', function(done) {
        //uncomment below and update the code to test redisListByResourceGroup
        //instance.redisListByResourceGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('redisListKeys', function() {
      it('should call redisListKeys successfully', function(done) {
        //uncomment below and update the code to test redisListKeys
        //instance.redisListKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('redisRegenerateKey', function() {
      it('should call redisRegenerateKey successfully', function(done) {
        //uncomment below and update the code to test redisRegenerateKey
        //instance.redisRegenerateKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('redisUpdate', function() {
      it('should call redisUpdate successfully', function(done) {
        //uncomment below and update the code to test redisUpdate
        //instance.redisUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
