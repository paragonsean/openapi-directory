/**
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2016-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImportRDBParameters model module.
 * @module model/ImportRDBParameters
 * @version 2016-04-01
 */
class ImportRDBParameters {
    /**
     * Constructs a new <code>ImportRDBParameters</code>.
     * Parameters for Redis import operation.
     * @alias module:model/ImportRDBParameters
     * @param files {Array.<String>} files to import.
     */
    constructor(files) { 
        
        ImportRDBParameters.initialize(this, files);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, files) { 
        obj['files'] = files;
    }

    /**
     * Constructs a <code>ImportRDBParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportRDBParameters} obj Optional instance to populate.
     * @return {module:model/ImportRDBParameters} The populated <code>ImportRDBParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportRDBParameters();

            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], ['String']);
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportRDBParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportRDBParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImportRDBParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['files'])) {
            throw new Error("Expected the field `files` to be an array in the JSON data but got " + data['files']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }

        return true;
    }


}

ImportRDBParameters.RequiredProperties = ["files"];

/**
 * files to import.
 * @member {Array.<String>} files
 */
ImportRDBParameters.prototype['files'] = undefined;

/**
 * File format.
 * @member {String} format
 */
ImportRDBParameters.prototype['format'] = undefined;






export default ImportRDBParameters;

