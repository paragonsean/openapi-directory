/**
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2017-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportRDBParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportRDBParameters::OAIExportRDBParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportRDBParameters::OAIExportRDBParameters() {
    this->initializeModel();
}

OAIExportRDBParameters::~OAIExportRDBParameters() {}

void OAIExportRDBParameters::initializeModel() {

    m_container_isSet = false;
    m_container_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;
}

void OAIExportRDBParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportRDBParameters::fromJsonObject(QJsonObject json) {

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;
}

QString OAIExportRDBParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportRDBParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_container_isSet) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    return obj;
}

QString OAIExportRDBParameters::getContainer() const {
    return m_container;
}
void OAIExportRDBParameters::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIExportRDBParameters::is_container_Set() const{
    return m_container_isSet;
}

bool OAIExportRDBParameters::is_container_Valid() const{
    return m_container_isValid;
}

QString OAIExportRDBParameters::getFormat() const {
    return m_format;
}
void OAIExportRDBParameters::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIExportRDBParameters::is_format_Set() const{
    return m_format_isSet;
}

bool OAIExportRDBParameters::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIExportRDBParameters::getPrefix() const {
    return m_prefix;
}
void OAIExportRDBParameters::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAIExportRDBParameters::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAIExportRDBParameters::is_prefix_Valid() const{
    return m_prefix_isValid;
}

bool OAIExportRDBParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportRDBParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_container_isValid && m_prefix_isValid && true;
}

} // namespace OpenAPI
