/*
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2017-02-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.RedisFirewallRule;
import org.openapitools.client.model.RedisFirewallRuleListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FirewallRulesApi
 */
@Disabled
public class FirewallRulesApiTest {

    private final FirewallRulesApi api = new FirewallRulesApi();

    /**
     * Create or update a redis cache firewall rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firewallRulesCreateOrUpdate_0Test() throws ApiException {
        String resourceGroupName = null;
        String cacheName = null;
        String ruleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        RedisFirewallRule parameters = null;
        RedisFirewallRule response = api.firewallRulesCreateOrUpdate_0(resourceGroupName, cacheName, ruleName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a single firewall rule in a specified redis cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firewallRulesDelete_0Test() throws ApiException {
        String resourceGroupName = null;
        String cacheName = null;
        String ruleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.firewallRulesDelete_0(resourceGroupName, cacheName, ruleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets a single firewall rule in a specified redis cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firewallRulesGet_0Test() throws ApiException {
        String resourceGroupName = null;
        String cacheName = null;
        String ruleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        RedisFirewallRule response = api.firewallRulesGet_0(resourceGroupName, cacheName, ruleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets all firewall rules in the specified redis cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firewallRulesListByRedisResource_0Test() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String cacheName = null;
        RedisFirewallRuleListResult response = api.firewallRulesListByRedisResource_0(apiVersion, subscriptionId, resourceGroupName, cacheName);
        // TODO: test validations
    }

}
