# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.redis_access_keys import RedisAccessKeys
from openapi_server.models.redis_linked_server_list import RedisLinkedServerList
from openapi_server.models.sku import Sku
import re
from openapi_server import util


class RedisResourceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_keys: RedisAccessKeys=None, host_name: str=None, linked_servers: RedisLinkedServerList=None, port: int=None, provisioning_state: str=None, redis_version: str=None, sku: Sku=None, ssl_port: int=None, enable_non_ssl_port: bool=None, redis_configuration: Dict[str, str]=None, shard_count: int=None, static_ip: str=None, subnet_id: str=None, tenant_settings: Dict[str, str]=None):
        """RedisResourceProperties - a model defined in OpenAPI

        :param access_keys: The access_keys of this RedisResourceProperties.
        :param host_name: The host_name of this RedisResourceProperties.
        :param linked_servers: The linked_servers of this RedisResourceProperties.
        :param port: The port of this RedisResourceProperties.
        :param provisioning_state: The provisioning_state of this RedisResourceProperties.
        :param redis_version: The redis_version of this RedisResourceProperties.
        :param sku: The sku of this RedisResourceProperties.
        :param ssl_port: The ssl_port of this RedisResourceProperties.
        :param enable_non_ssl_port: The enable_non_ssl_port of this RedisResourceProperties.
        :param redis_configuration: The redis_configuration of this RedisResourceProperties.
        :param shard_count: The shard_count of this RedisResourceProperties.
        :param static_ip: The static_ip of this RedisResourceProperties.
        :param subnet_id: The subnet_id of this RedisResourceProperties.
        :param tenant_settings: The tenant_settings of this RedisResourceProperties.
        """
        self.openapi_types = {
            'access_keys': RedisAccessKeys,
            'host_name': str,
            'linked_servers': RedisLinkedServerList,
            'port': int,
            'provisioning_state': str,
            'redis_version': str,
            'sku': Sku,
            'ssl_port': int,
            'enable_non_ssl_port': bool,
            'redis_configuration': Dict[str, str],
            'shard_count': int,
            'static_ip': str,
            'subnet_id': str,
            'tenant_settings': Dict[str, str]
        }

        self.attribute_map = {
            'access_keys': 'accessKeys',
            'host_name': 'hostName',
            'linked_servers': 'linkedServers',
            'port': 'port',
            'provisioning_state': 'provisioningState',
            'redis_version': 'redisVersion',
            'sku': 'sku',
            'ssl_port': 'sslPort',
            'enable_non_ssl_port': 'enableNonSslPort',
            'redis_configuration': 'redisConfiguration',
            'shard_count': 'shardCount',
            'static_ip': 'staticIP',
            'subnet_id': 'subnetId',
            'tenant_settings': 'tenantSettings'
        }

        self._access_keys = access_keys
        self._host_name = host_name
        self._linked_servers = linked_servers
        self._port = port
        self._provisioning_state = provisioning_state
        self._redis_version = redis_version
        self._sku = sku
        self._ssl_port = ssl_port
        self._enable_non_ssl_port = enable_non_ssl_port
        self._redis_configuration = redis_configuration
        self._shard_count = shard_count
        self._static_ip = static_ip
        self._subnet_id = subnet_id
        self._tenant_settings = tenant_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RedisResourceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RedisResourceProperties of this RedisResourceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_keys(self):
        """Gets the access_keys of this RedisResourceProperties.


        :return: The access_keys of this RedisResourceProperties.
        :rtype: RedisAccessKeys
        """
        return self._access_keys

    @access_keys.setter
    def access_keys(self, access_keys):
        """Sets the access_keys of this RedisResourceProperties.


        :param access_keys: The access_keys of this RedisResourceProperties.
        :type access_keys: RedisAccessKeys
        """

        self._access_keys = access_keys

    @property
    def host_name(self):
        """Gets the host_name of this RedisResourceProperties.

        Redis host name.

        :return: The host_name of this RedisResourceProperties.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this RedisResourceProperties.

        Redis host name.

        :param host_name: The host_name of this RedisResourceProperties.
        :type host_name: str
        """

        self._host_name = host_name

    @property
    def linked_servers(self):
        """Gets the linked_servers of this RedisResourceProperties.


        :return: The linked_servers of this RedisResourceProperties.
        :rtype: RedisLinkedServerList
        """
        return self._linked_servers

    @linked_servers.setter
    def linked_servers(self, linked_servers):
        """Sets the linked_servers of this RedisResourceProperties.


        :param linked_servers: The linked_servers of this RedisResourceProperties.
        :type linked_servers: RedisLinkedServerList
        """

        self._linked_servers = linked_servers

    @property
    def port(self):
        """Gets the port of this RedisResourceProperties.

        Redis non-SSL port.

        :return: The port of this RedisResourceProperties.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this RedisResourceProperties.

        Redis non-SSL port.

        :param port: The port of this RedisResourceProperties.
        :type port: int
        """

        self._port = port

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this RedisResourceProperties.

        Redis instance provisioning status.

        :return: The provisioning_state of this RedisResourceProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this RedisResourceProperties.

        Redis instance provisioning status.

        :param provisioning_state: The provisioning_state of this RedisResourceProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def redis_version(self):
        """Gets the redis_version of this RedisResourceProperties.

        Redis version.

        :return: The redis_version of this RedisResourceProperties.
        :rtype: str
        """
        return self._redis_version

    @redis_version.setter
    def redis_version(self, redis_version):
        """Sets the redis_version of this RedisResourceProperties.

        Redis version.

        :param redis_version: The redis_version of this RedisResourceProperties.
        :type redis_version: str
        """

        self._redis_version = redis_version

    @property
    def sku(self):
        """Gets the sku of this RedisResourceProperties.


        :return: The sku of this RedisResourceProperties.
        :rtype: Sku
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this RedisResourceProperties.


        :param sku: The sku of this RedisResourceProperties.
        :type sku: Sku
        """

        self._sku = sku

    @property
    def ssl_port(self):
        """Gets the ssl_port of this RedisResourceProperties.

        Redis SSL port.

        :return: The ssl_port of this RedisResourceProperties.
        :rtype: int
        """
        return self._ssl_port

    @ssl_port.setter
    def ssl_port(self, ssl_port):
        """Sets the ssl_port of this RedisResourceProperties.

        Redis SSL port.

        :param ssl_port: The ssl_port of this RedisResourceProperties.
        :type ssl_port: int
        """

        self._ssl_port = ssl_port

    @property
    def enable_non_ssl_port(self):
        """Gets the enable_non_ssl_port of this RedisResourceProperties.

        Specifies whether the non-ssl Redis server port (6379) is enabled.

        :return: The enable_non_ssl_port of this RedisResourceProperties.
        :rtype: bool
        """
        return self._enable_non_ssl_port

    @enable_non_ssl_port.setter
    def enable_non_ssl_port(self, enable_non_ssl_port):
        """Sets the enable_non_ssl_port of this RedisResourceProperties.

        Specifies whether the non-ssl Redis server port (6379) is enabled.

        :param enable_non_ssl_port: The enable_non_ssl_port of this RedisResourceProperties.
        :type enable_non_ssl_port: bool
        """

        self._enable_non_ssl_port = enable_non_ssl_port

    @property
    def redis_configuration(self):
        """Gets the redis_configuration of this RedisResourceProperties.

        All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.

        :return: The redis_configuration of this RedisResourceProperties.
        :rtype: Dict[str, str]
        """
        return self._redis_configuration

    @redis_configuration.setter
    def redis_configuration(self, redis_configuration):
        """Sets the redis_configuration of this RedisResourceProperties.

        All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.

        :param redis_configuration: The redis_configuration of this RedisResourceProperties.
        :type redis_configuration: Dict[str, str]
        """

        self._redis_configuration = redis_configuration

    @property
    def shard_count(self):
        """Gets the shard_count of this RedisResourceProperties.

        The number of shards to be created on a Premium Cluster Cache.

        :return: The shard_count of this RedisResourceProperties.
        :rtype: int
        """
        return self._shard_count

    @shard_count.setter
    def shard_count(self, shard_count):
        """Sets the shard_count of this RedisResourceProperties.

        The number of shards to be created on a Premium Cluster Cache.

        :param shard_count: The shard_count of this RedisResourceProperties.
        :type shard_count: int
        """

        self._shard_count = shard_count

    @property
    def static_ip(self):
        """Gets the static_ip of this RedisResourceProperties.

        Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual Network.

        :return: The static_ip of this RedisResourceProperties.
        :rtype: str
        """
        return self._static_ip

    @static_ip.setter
    def static_ip(self, static_ip):
        """Sets the static_ip of this RedisResourceProperties.

        Static IP address. Required when deploying a Redis cache inside an existing Azure Virtual Network.

        :param static_ip: The static_ip of this RedisResourceProperties.
        :type static_ip: str
        """
        if static_ip is not None and not re.search(r'^\d+\.\d+\.\d+\.\d+$', static_ip):
            raise ValueError("Invalid value for `static_ip`, must be a follow pattern or equal to `/^\d+\.\d+\.\d+\.\d+$/`")

        self._static_ip = static_ip

    @property
    def subnet_id(self):
        """Gets the subnet_id of this RedisResourceProperties.

        The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1

        :return: The subnet_id of this RedisResourceProperties.
        :rtype: str
        """
        return self._subnet_id

    @subnet_id.setter
    def subnet_id(self, subnet_id):
        """Sets the subnet_id of this RedisResourceProperties.

        The full resource ID of a subnet in a virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.{Network|ClassicNetwork}/VirtualNetworks/vnet1/subnets/subnet1

        :param subnet_id: The subnet_id of this RedisResourceProperties.
        :type subnet_id: str
        """
        if subnet_id is not None and not re.search(r'^\/subscriptions\/[^\/]*\/resourceGroups\/[^\/]*\/providers\/Microsoft.(ClassicNetwork|Network)\/virtualNetworks\/[^\/]*\/subnets\/[^\/]*$', subnet_id):
            raise ValueError("Invalid value for `subnet_id`, must be a follow pattern or equal to `/^\/subscriptions\/[^\/]*\/resourceGroups\/[^\/]*\/providers\/Microsoft.(ClassicNetwork|Network)\/virtualNetworks\/[^\/]*\/subnets\/[^\/]*$/`")

        self._subnet_id = subnet_id

    @property
    def tenant_settings(self):
        """Gets the tenant_settings of this RedisResourceProperties.

        tenantSettings

        :return: The tenant_settings of this RedisResourceProperties.
        :rtype: Dict[str, str]
        """
        return self._tenant_settings

    @tenant_settings.setter
    def tenant_settings(self, tenant_settings):
        """Sets the tenant_settings of this RedisResourceProperties.

        tenantSettings

        :param tenant_settings: The tenant_settings of this RedisResourceProperties.
        :type tenant_settings: Dict[str, str]
        """

        self._tenant_settings = tenant_settings
