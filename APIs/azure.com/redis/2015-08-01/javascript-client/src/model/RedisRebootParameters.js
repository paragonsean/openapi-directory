/**
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RedisRebootParameters model module.
 * @module model/RedisRebootParameters
 * @version 2015-08-01
 */
class RedisRebootParameters {
    /**
     * Constructs a new <code>RedisRebootParameters</code>.
     * Specifies which Redis node(s) to reboot.
     * @alias module:model/RedisRebootParameters
     * @param rebootType {module:model/RedisRebootParameters.RebootTypeEnum} Which Redis node(s) to reboot. Depending on this value data loss is possible.
     */
    constructor(rebootType) { 
        
        RedisRebootParameters.initialize(this, rebootType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, rebootType) { 
        obj['rebootType'] = rebootType;
    }

    /**
     * Constructs a <code>RedisRebootParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RedisRebootParameters} obj Optional instance to populate.
     * @return {module:model/RedisRebootParameters} The populated <code>RedisRebootParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RedisRebootParameters();

            if (data.hasOwnProperty('rebootType')) {
                obj['rebootType'] = ApiClient.convertToType(data['rebootType'], 'String');
            }
            if (data.hasOwnProperty('shardId')) {
                obj['shardId'] = ApiClient.convertToType(data['shardId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RedisRebootParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RedisRebootParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RedisRebootParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['rebootType'] && !(typeof data['rebootType'] === 'string' || data['rebootType'] instanceof String)) {
            throw new Error("Expected the field `rebootType` to be a primitive type in the JSON string but got " + data['rebootType']);
        }

        return true;
    }


}

RedisRebootParameters.RequiredProperties = ["rebootType"];

/**
 * Which Redis node(s) to reboot. Depending on this value data loss is possible.
 * @member {module:model/RedisRebootParameters.RebootTypeEnum} rebootType
 */
RedisRebootParameters.prototype['rebootType'] = undefined;

/**
 * If clustering is enabled, the ID of the shared be rebooted.
 * @member {Number} shardId
 */
RedisRebootParameters.prototype['shardId'] = undefined;





/**
 * Allowed values for the <code>rebootType</code> property.
 * @enum {String}
 * @readonly
 */
RedisRebootParameters['RebootTypeEnum'] = {

    /**
     * value: "PrimaryNode"
     * @const
     */
    "PrimaryNode": "PrimaryNode",

    /**
     * value: "SecondaryNode"
     * @const
     */
    "SecondaryNode": "SecondaryNode",

    /**
     * value: "AllNodes"
     * @const
     */
    "AllNodes": "AllNodes"
};



export default RedisRebootParameters;

