/**
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RedisAccessKeys from './RedisAccessKeys';
import RedisReadableProperties from './RedisReadableProperties';
import Sku from './Sku';

/**
 * The RedisReadablePropertiesWithAccessKey model module.
 * @module model/RedisReadablePropertiesWithAccessKey
 * @version 2015-08-01
 */
class RedisReadablePropertiesWithAccessKey {
    /**
     * Constructs a new <code>RedisReadablePropertiesWithAccessKey</code>.
     * Properties generated only in response to CreateOrUpdate Redis operation.
     * @alias module:model/RedisReadablePropertiesWithAccessKey
     * @implements module:model/RedisReadableProperties
     * @param sku {module:model/Sku} 
     */
    constructor(sku) { 
        RedisReadableProperties.initialize(this, sku);
        RedisReadablePropertiesWithAccessKey.initialize(this, sku);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sku) { 
        obj['sku'] = sku;
    }

    /**
     * Constructs a <code>RedisReadablePropertiesWithAccessKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RedisReadablePropertiesWithAccessKey} obj Optional instance to populate.
     * @return {module:model/RedisReadablePropertiesWithAccessKey} The populated <code>RedisReadablePropertiesWithAccessKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RedisReadablePropertiesWithAccessKey();
            RedisReadableProperties.constructFromObject(data, obj);

            if (data.hasOwnProperty('accessKeys')) {
                obj['accessKeys'] = RedisAccessKeys.constructFromObject(data['accessKeys']);
            }
            if (data.hasOwnProperty('hostName')) {
                obj['hostName'] = ApiClient.convertToType(data['hostName'], 'String');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('sslPort')) {
                obj['sslPort'] = ApiClient.convertToType(data['sslPort'], 'Number');
            }
            if (data.hasOwnProperty('enableNonSslPort')) {
                obj['enableNonSslPort'] = ApiClient.convertToType(data['enableNonSslPort'], 'Boolean');
            }
            if (data.hasOwnProperty('redisConfiguration')) {
                obj['redisConfiguration'] = ApiClient.convertToType(data['redisConfiguration'], {'String': 'String'});
            }
            if (data.hasOwnProperty('redisVersion')) {
                obj['redisVersion'] = ApiClient.convertToType(data['redisVersion'], 'String');
            }
            if (data.hasOwnProperty('shardCount')) {
                obj['shardCount'] = ApiClient.convertToType(data['shardCount'], 'Number');
            }
            if (data.hasOwnProperty('sku')) {
                obj['sku'] = Sku.constructFromObject(data['sku']);
            }
            if (data.hasOwnProperty('staticIP')) {
                obj['staticIP'] = ApiClient.convertToType(data['staticIP'], 'String');
            }
            if (data.hasOwnProperty('subnet')) {
                obj['subnet'] = ApiClient.convertToType(data['subnet'], 'String');
            }
            if (data.hasOwnProperty('tenantSettings')) {
                obj['tenantSettings'] = ApiClient.convertToType(data['tenantSettings'], {'String': 'String'});
            }
            if (data.hasOwnProperty('virtualNetwork')) {
                obj['virtualNetwork'] = ApiClient.convertToType(data['virtualNetwork'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RedisReadablePropertiesWithAccessKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RedisReadablePropertiesWithAccessKey</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RedisReadablePropertiesWithAccessKey.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `accessKeys`
        if (data['accessKeys']) { // data not null
          RedisAccessKeys.validateJSON(data['accessKeys']);
        }
        // ensure the json data is a string
        if (data['hostName'] && !(typeof data['hostName'] === 'string' || data['hostName'] instanceof String)) {
            throw new Error("Expected the field `hostName` to be a primitive type in the JSON string but got " + data['hostName']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['redisVersion'] && !(typeof data['redisVersion'] === 'string' || data['redisVersion'] instanceof String)) {
            throw new Error("Expected the field `redisVersion` to be a primitive type in the JSON string but got " + data['redisVersion']);
        }
        // validate the optional field `sku`
        if (data['sku']) { // data not null
          Sku.validateJSON(data['sku']);
        }
        // ensure the json data is a string
        if (data['staticIP'] && !(typeof data['staticIP'] === 'string' || data['staticIP'] instanceof String)) {
            throw new Error("Expected the field `staticIP` to be a primitive type in the JSON string but got " + data['staticIP']);
        }
        // ensure the json data is a string
        if (data['subnet'] && !(typeof data['subnet'] === 'string' || data['subnet'] instanceof String)) {
            throw new Error("Expected the field `subnet` to be a primitive type in the JSON string but got " + data['subnet']);
        }
        // ensure the json data is a string
        if (data['virtualNetwork'] && !(typeof data['virtualNetwork'] === 'string' || data['virtualNetwork'] instanceof String)) {
            throw new Error("Expected the field `virtualNetwork` to be a primitive type in the JSON string but got " + data['virtualNetwork']);
        }

        return true;
    }


}

RedisReadablePropertiesWithAccessKey.RequiredProperties = ["sku"];

/**
 * @member {module:model/RedisAccessKeys} accessKeys
 */
RedisReadablePropertiesWithAccessKey.prototype['accessKeys'] = undefined;

/**
 * Redis host name.
 * @member {String} hostName
 */
RedisReadablePropertiesWithAccessKey.prototype['hostName'] = undefined;

/**
 * Redis non-SSL port.
 * @member {Number} port
 */
RedisReadablePropertiesWithAccessKey.prototype['port'] = undefined;

/**
 * Redis instance provisioning status.
 * @member {String} provisioningState
 */
RedisReadablePropertiesWithAccessKey.prototype['provisioningState'] = undefined;

/**
 * Redis SSL port.
 * @member {Number} sslPort
 */
RedisReadablePropertiesWithAccessKey.prototype['sslPort'] = undefined;

/**
 * If the value is true, then the non-SLL Redis server port (6379) will be enabled.
 * @member {Boolean} enableNonSslPort
 */
RedisReadablePropertiesWithAccessKey.prototype['enableNonSslPort'] = undefined;

/**
 * All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
 * @member {Object.<String, String>} redisConfiguration
 */
RedisReadablePropertiesWithAccessKey.prototype['redisConfiguration'] = undefined;

/**
 * RedisVersion parameter has been deprecated. As such, it is no longer necessary to provide this parameter and any value specified is ignored.
 * @member {String} redisVersion
 */
RedisReadablePropertiesWithAccessKey.prototype['redisVersion'] = undefined;

/**
 * The number of shards to be created on a Premium Cluster Cache.
 * @member {Number} shardCount
 */
RedisReadablePropertiesWithAccessKey.prototype['shardCount'] = undefined;

/**
 * @member {module:model/Sku} sku
 */
RedisReadablePropertiesWithAccessKey.prototype['sku'] = undefined;

/**
 * Required when deploying a Redis cache inside an existing Azure Virtual Network.
 * @member {String} staticIP
 */
RedisReadablePropertiesWithAccessKey.prototype['staticIP'] = undefined;

/**
 * Required when deploying a Redis cache inside an existing Azure Virtual Network.
 * @member {String} subnet
 */
RedisReadablePropertiesWithAccessKey.prototype['subnet'] = undefined;

/**
 * tenantSettings
 * @member {Object.<String, String>} tenantSettings
 */
RedisReadablePropertiesWithAccessKey.prototype['tenantSettings'] = undefined;

/**
 * The exact ARM resource ID of the virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.ClassicNetwork/VirtualNetworks/vnet1
 * @member {String} virtualNetwork
 */
RedisReadablePropertiesWithAccessKey.prototype['virtualNetwork'] = undefined;


// Implement RedisReadableProperties interface:
/**
 * If the value is true, then the non-SLL Redis server port (6379) will be enabled.
 * @member {Boolean} enableNonSslPort
 */
RedisReadableProperties.prototype['enableNonSslPort'] = undefined;
/**
 * All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.
 * @member {Object.<String, String>} redisConfiguration
 */
RedisReadableProperties.prototype['redisConfiguration'] = undefined;
/**
 * RedisVersion parameter has been deprecated. As such, it is no longer necessary to provide this parameter and any value specified is ignored.
 * @member {String} redisVersion
 */
RedisReadableProperties.prototype['redisVersion'] = undefined;
/**
 * The number of shards to be created on a Premium Cluster Cache.
 * @member {Number} shardCount
 */
RedisReadableProperties.prototype['shardCount'] = undefined;
/**
 * @member {module:model/Sku} sku
 */
RedisReadableProperties.prototype['sku'] = undefined;
/**
 * Required when deploying a Redis cache inside an existing Azure Virtual Network.
 * @member {String} staticIP
 */
RedisReadableProperties.prototype['staticIP'] = undefined;
/**
 * Required when deploying a Redis cache inside an existing Azure Virtual Network.
 * @member {String} subnet
 */
RedisReadableProperties.prototype['subnet'] = undefined;
/**
 * tenantSettings
 * @member {Object.<String, String>} tenantSettings
 */
RedisReadableProperties.prototype['tenantSettings'] = undefined;
/**
 * The exact ARM resource ID of the virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.ClassicNetwork/VirtualNetworks/vnet1
 * @member {String} virtualNetwork
 */
RedisReadableProperties.prototype['virtualNetwork'] = undefined;




export default RedisReadablePropertiesWithAccessKey;

