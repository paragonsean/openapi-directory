/**
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import RedisAccessKeys from './model/RedisAccessKeys';
import RedisCreateOrUpdateParameters from './model/RedisCreateOrUpdateParameters';
import RedisListKeysResult from './model/RedisListKeysResult';
import RedisListResult from './model/RedisListResult';
import RedisProperties from './model/RedisProperties';
import RedisReadableProperties from './model/RedisReadableProperties';
import RedisReadablePropertiesWithAccessKey from './model/RedisReadablePropertiesWithAccessKey';
import RedisRebootParameters from './model/RedisRebootParameters';
import RedisRegenerateKeyParameters from './model/RedisRegenerateKeyParameters';
import RedisResource from './model/RedisResource';
import RedisResourceWithAccessKey from './model/RedisResourceWithAccessKey';
import Resource from './model/Resource';
import Sku from './model/Sku';
import RedisApi from './api/RedisApi';


/**
* REST API for Azure Redis Cache Service..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var RedisManagementClient = require('index'); // See note below*.
* var xxxSvc = new RedisManagementClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new RedisManagementClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new RedisManagementClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new RedisManagementClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2015-08-01
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The RedisAccessKeys model constructor.
     * @property {module:model/RedisAccessKeys}
     */
    RedisAccessKeys,

    /**
     * The RedisCreateOrUpdateParameters model constructor.
     * @property {module:model/RedisCreateOrUpdateParameters}
     */
    RedisCreateOrUpdateParameters,

    /**
     * The RedisListKeysResult model constructor.
     * @property {module:model/RedisListKeysResult}
     */
    RedisListKeysResult,

    /**
     * The RedisListResult model constructor.
     * @property {module:model/RedisListResult}
     */
    RedisListResult,

    /**
     * The RedisProperties model constructor.
     * @property {module:model/RedisProperties}
     */
    RedisProperties,

    /**
     * The RedisReadableProperties model constructor.
     * @property {module:model/RedisReadableProperties}
     */
    RedisReadableProperties,

    /**
     * The RedisReadablePropertiesWithAccessKey model constructor.
     * @property {module:model/RedisReadablePropertiesWithAccessKey}
     */
    RedisReadablePropertiesWithAccessKey,

    /**
     * The RedisRebootParameters model constructor.
     * @property {module:model/RedisRebootParameters}
     */
    RedisRebootParameters,

    /**
     * The RedisRegenerateKeyParameters model constructor.
     * @property {module:model/RedisRegenerateKeyParameters}
     */
    RedisRegenerateKeyParameters,

    /**
     * The RedisResource model constructor.
     * @property {module:model/RedisResource}
     */
    RedisResource,

    /**
     * The RedisResourceWithAccessKey model constructor.
     * @property {module:model/RedisResourceWithAccessKey}
     */
    RedisResourceWithAccessKey,

    /**
     * The Resource model constructor.
     * @property {module:model/Resource}
     */
    Resource,

    /**
     * The Sku model constructor.
     * @property {module:model/Sku}
     */
    Sku,

    /**
    * The RedisApi service constructor.
    * @property {module:api/RedisApi}
    */
    RedisApi
};
