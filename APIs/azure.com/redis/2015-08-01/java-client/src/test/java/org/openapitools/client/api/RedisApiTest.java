/*
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2015-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.RedisCreateOrUpdateParameters;
import org.openapitools.client.model.RedisListKeysResult;
import org.openapitools.client.model.RedisListResult;
import org.openapitools.client.model.RedisRebootParameters;
import org.openapitools.client.model.RedisRegenerateKeyParameters;
import org.openapitools.client.model.RedisResource;
import org.openapitools.client.model.RedisResourceWithAccessKey;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RedisApi
 */
@Disabled
public class RedisApiTest {

    private final RedisApi api = new RedisApi();

    /**
     * Create a Redis cache, or replace (overwrite/recreate, with potential downtime) an existing cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redisCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String apiVersion = null;
        String subscriptionId = null;
        RedisCreateOrUpdateParameters parameters = null;
        RedisResourceWithAccessKey response = api.redisCreateOrUpdate(resourceGroupName, name, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a Redis cache.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redisDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.redisDelete(resourceGroupName, name, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Reboot specified Redis node(s). This operation requires write permission to the cache resource. There can be potential data loss.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redisForceRebootTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String apiVersion = null;
        String subscriptionId = null;
        RedisRebootParameters parameters = null;
        api.redisForceReboot(resourceGroupName, name, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Gets a Redis cache (resource description).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redisGetTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String apiVersion = null;
        String subscriptionId = null;
        RedisResource response = api.redisGet(resourceGroupName, name, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets all Redis caches in the specified subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redisListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        RedisListResult response = api.redisList(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets all Redis caches in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redisListByResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        RedisListResult response = api.redisListByResourceGroup(resourceGroupName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Retrieve a Redis cache&#39;s access keys. This operation requires write permission to the cache resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redisListKeysTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String apiVersion = null;
        String subscriptionId = null;
        RedisListKeysResult response = api.redisListKeys(resourceGroupName, name, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Regenerate the access keys for a Redis cache. This operation requires write permission to the cache resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redisRegenerateKeyTest() throws ApiException {
        String resourceGroupName = null;
        String name = null;
        String apiVersion = null;
        String subscriptionId = null;
        RedisRegenerateKeyParameters parameters = null;
        RedisListKeysResult response = api.redisRegenerateKey(resourceGroupName, name, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
