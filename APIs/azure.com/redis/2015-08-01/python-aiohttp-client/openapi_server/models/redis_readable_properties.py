# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sku import Sku
from openapi_server import util


class RedisReadableProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host_name: str=None, port: int=None, provisioning_state: str=None, ssl_port: int=None, enable_non_ssl_port: bool=None, redis_configuration: Dict[str, str]=None, redis_version: str=None, shard_count: int=None, sku: Sku=None, static_ip: str=None, subnet: str=None, tenant_settings: Dict[str, str]=None, virtual_network: str=None):
        """RedisReadableProperties - a model defined in OpenAPI

        :param host_name: The host_name of this RedisReadableProperties.
        :param port: The port of this RedisReadableProperties.
        :param provisioning_state: The provisioning_state of this RedisReadableProperties.
        :param ssl_port: The ssl_port of this RedisReadableProperties.
        :param enable_non_ssl_port: The enable_non_ssl_port of this RedisReadableProperties.
        :param redis_configuration: The redis_configuration of this RedisReadableProperties.
        :param redis_version: The redis_version of this RedisReadableProperties.
        :param shard_count: The shard_count of this RedisReadableProperties.
        :param sku: The sku of this RedisReadableProperties.
        :param static_ip: The static_ip of this RedisReadableProperties.
        :param subnet: The subnet of this RedisReadableProperties.
        :param tenant_settings: The tenant_settings of this RedisReadableProperties.
        :param virtual_network: The virtual_network of this RedisReadableProperties.
        """
        self.openapi_types = {
            'host_name': str,
            'port': int,
            'provisioning_state': str,
            'ssl_port': int,
            'enable_non_ssl_port': bool,
            'redis_configuration': Dict[str, str],
            'redis_version': str,
            'shard_count': int,
            'sku': Sku,
            'static_ip': str,
            'subnet': str,
            'tenant_settings': Dict[str, str],
            'virtual_network': str
        }

        self.attribute_map = {
            'host_name': 'hostName',
            'port': 'port',
            'provisioning_state': 'provisioningState',
            'ssl_port': 'sslPort',
            'enable_non_ssl_port': 'enableNonSslPort',
            'redis_configuration': 'redisConfiguration',
            'redis_version': 'redisVersion',
            'shard_count': 'shardCount',
            'sku': 'sku',
            'static_ip': 'staticIP',
            'subnet': 'subnet',
            'tenant_settings': 'tenantSettings',
            'virtual_network': 'virtualNetwork'
        }

        self._host_name = host_name
        self._port = port
        self._provisioning_state = provisioning_state
        self._ssl_port = ssl_port
        self._enable_non_ssl_port = enable_non_ssl_port
        self._redis_configuration = redis_configuration
        self._redis_version = redis_version
        self._shard_count = shard_count
        self._sku = sku
        self._static_ip = static_ip
        self._subnet = subnet
        self._tenant_settings = tenant_settings
        self._virtual_network = virtual_network

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RedisReadableProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RedisReadableProperties of this RedisReadableProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host_name(self):
        """Gets the host_name of this RedisReadableProperties.

        Redis host name.

        :return: The host_name of this RedisReadableProperties.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this RedisReadableProperties.

        Redis host name.

        :param host_name: The host_name of this RedisReadableProperties.
        :type host_name: str
        """

        self._host_name = host_name

    @property
    def port(self):
        """Gets the port of this RedisReadableProperties.

        Redis non-SSL port.

        :return: The port of this RedisReadableProperties.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this RedisReadableProperties.

        Redis non-SSL port.

        :param port: The port of this RedisReadableProperties.
        :type port: int
        """

        self._port = port

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this RedisReadableProperties.

        Redis instance provisioning status.

        :return: The provisioning_state of this RedisReadableProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this RedisReadableProperties.

        Redis instance provisioning status.

        :param provisioning_state: The provisioning_state of this RedisReadableProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def ssl_port(self):
        """Gets the ssl_port of this RedisReadableProperties.

        Redis SSL port.

        :return: The ssl_port of this RedisReadableProperties.
        :rtype: int
        """
        return self._ssl_port

    @ssl_port.setter
    def ssl_port(self, ssl_port):
        """Sets the ssl_port of this RedisReadableProperties.

        Redis SSL port.

        :param ssl_port: The ssl_port of this RedisReadableProperties.
        :type ssl_port: int
        """

        self._ssl_port = ssl_port

    @property
    def enable_non_ssl_port(self):
        """Gets the enable_non_ssl_port of this RedisReadableProperties.

        If the value is true, then the non-SLL Redis server port (6379) will be enabled.

        :return: The enable_non_ssl_port of this RedisReadableProperties.
        :rtype: bool
        """
        return self._enable_non_ssl_port

    @enable_non_ssl_port.setter
    def enable_non_ssl_port(self, enable_non_ssl_port):
        """Sets the enable_non_ssl_port of this RedisReadableProperties.

        If the value is true, then the non-SLL Redis server port (6379) will be enabled.

        :param enable_non_ssl_port: The enable_non_ssl_port of this RedisReadableProperties.
        :type enable_non_ssl_port: bool
        """

        self._enable_non_ssl_port = enable_non_ssl_port

    @property
    def redis_configuration(self):
        """Gets the redis_configuration of this RedisReadableProperties.

        All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.

        :return: The redis_configuration of this RedisReadableProperties.
        :rtype: Dict[str, str]
        """
        return self._redis_configuration

    @redis_configuration.setter
    def redis_configuration(self, redis_configuration):
        """Sets the redis_configuration of this RedisReadableProperties.

        All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc.

        :param redis_configuration: The redis_configuration of this RedisReadableProperties.
        :type redis_configuration: Dict[str, str]
        """

        self._redis_configuration = redis_configuration

    @property
    def redis_version(self):
        """Gets the redis_version of this RedisReadableProperties.

        RedisVersion parameter has been deprecated. As such, it is no longer necessary to provide this parameter and any value specified is ignored.

        :return: The redis_version of this RedisReadableProperties.
        :rtype: str
        """
        return self._redis_version

    @redis_version.setter
    def redis_version(self, redis_version):
        """Sets the redis_version of this RedisReadableProperties.

        RedisVersion parameter has been deprecated. As such, it is no longer necessary to provide this parameter and any value specified is ignored.

        :param redis_version: The redis_version of this RedisReadableProperties.
        :type redis_version: str
        """

        self._redis_version = redis_version

    @property
    def shard_count(self):
        """Gets the shard_count of this RedisReadableProperties.

        The number of shards to be created on a Premium Cluster Cache.

        :return: The shard_count of this RedisReadableProperties.
        :rtype: int
        """
        return self._shard_count

    @shard_count.setter
    def shard_count(self, shard_count):
        """Sets the shard_count of this RedisReadableProperties.

        The number of shards to be created on a Premium Cluster Cache.

        :param shard_count: The shard_count of this RedisReadableProperties.
        :type shard_count: int
        """

        self._shard_count = shard_count

    @property
    def sku(self):
        """Gets the sku of this RedisReadableProperties.


        :return: The sku of this RedisReadableProperties.
        :rtype: Sku
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this RedisReadableProperties.


        :param sku: The sku of this RedisReadableProperties.
        :type sku: Sku
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku

    @property
    def static_ip(self):
        """Gets the static_ip of this RedisReadableProperties.

        Required when deploying a Redis cache inside an existing Azure Virtual Network.

        :return: The static_ip of this RedisReadableProperties.
        :rtype: str
        """
        return self._static_ip

    @static_ip.setter
    def static_ip(self, static_ip):
        """Sets the static_ip of this RedisReadableProperties.

        Required when deploying a Redis cache inside an existing Azure Virtual Network.

        :param static_ip: The static_ip of this RedisReadableProperties.
        :type static_ip: str
        """

        self._static_ip = static_ip

    @property
    def subnet(self):
        """Gets the subnet of this RedisReadableProperties.

        Required when deploying a Redis cache inside an existing Azure Virtual Network.

        :return: The subnet of this RedisReadableProperties.
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this RedisReadableProperties.

        Required when deploying a Redis cache inside an existing Azure Virtual Network.

        :param subnet: The subnet of this RedisReadableProperties.
        :type subnet: str
        """

        self._subnet = subnet

    @property
    def tenant_settings(self):
        """Gets the tenant_settings of this RedisReadableProperties.

        tenantSettings

        :return: The tenant_settings of this RedisReadableProperties.
        :rtype: Dict[str, str]
        """
        return self._tenant_settings

    @tenant_settings.setter
    def tenant_settings(self, tenant_settings):
        """Sets the tenant_settings of this RedisReadableProperties.

        tenantSettings

        :param tenant_settings: The tenant_settings of this RedisReadableProperties.
        :type tenant_settings: Dict[str, str]
        """

        self._tenant_settings = tenant_settings

    @property
    def virtual_network(self):
        """Gets the virtual_network of this RedisReadableProperties.

        The exact ARM resource ID of the virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.ClassicNetwork/VirtualNetworks/vnet1

        :return: The virtual_network of this RedisReadableProperties.
        :rtype: str
        """
        return self._virtual_network

    @virtual_network.setter
    def virtual_network(self, virtual_network):
        """Sets the virtual_network of this RedisReadableProperties.

        The exact ARM resource ID of the virtual network to deploy the Redis cache in. Example format: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/Microsoft.ClassicNetwork/VirtualNetworks/vnet1

        :param virtual_network: The virtual_network of this RedisReadableProperties.
        :type virtual_network: str
        """

        self._virtual_network = virtual_network
