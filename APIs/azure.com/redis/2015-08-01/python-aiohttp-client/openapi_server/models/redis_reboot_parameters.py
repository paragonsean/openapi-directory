# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RedisRebootParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reboot_type: str=None, shard_id: int=None):
        """RedisRebootParameters - a model defined in OpenAPI

        :param reboot_type: The reboot_type of this RedisRebootParameters.
        :param shard_id: The shard_id of this RedisRebootParameters.
        """
        self.openapi_types = {
            'reboot_type': str,
            'shard_id': int
        }

        self.attribute_map = {
            'reboot_type': 'rebootType',
            'shard_id': 'shardId'
        }

        self._reboot_type = reboot_type
        self._shard_id = shard_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RedisRebootParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RedisRebootParameters of this RedisRebootParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reboot_type(self):
        """Gets the reboot_type of this RedisRebootParameters.

        Which Redis node(s) to reboot. Depending on this value data loss is possible.

        :return: The reboot_type of this RedisRebootParameters.
        :rtype: str
        """
        return self._reboot_type

    @reboot_type.setter
    def reboot_type(self, reboot_type):
        """Sets the reboot_type of this RedisRebootParameters.

        Which Redis node(s) to reboot. Depending on this value data loss is possible.

        :param reboot_type: The reboot_type of this RedisRebootParameters.
        :type reboot_type: str
        """
        allowed_values = ["PrimaryNode", "SecondaryNode", "AllNodes"]  # noqa: E501
        if reboot_type not in allowed_values:
            raise ValueError(
                "Invalid value for `reboot_type` ({0}), must be one of {1}"
                .format(reboot_type, allowed_values)
            )

        self._reboot_type = reboot_type

    @property
    def shard_id(self):
        """Gets the shard_id of this RedisRebootParameters.

        If clustering is enabled, the ID of the shared be rebooted.

        :return: The shard_id of this RedisRebootParameters.
        :rtype: int
        """
        return self._shard_id

    @shard_id.setter
    def shard_id(self, shard_id):
        """Sets the shard_id of this RedisRebootParameters.

        If clustering is enabled, the ID of the shared be rebooted.

        :param shard_id: The shard_id of this RedisRebootParameters.
        :type shard_id: int
        """

        self._shard_id = shard_id
