/**
 * RedisManagementClient
 * REST API for Azure Redis Cache Service.
 *
 * The version of the OpenAPI document: 2015-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRedisApi_H
#define OAI_OAIRedisApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRedisCreateOrUpdateParameters.h"
#include "OAIRedisListKeysResult.h"
#include "OAIRedisListResult.h"
#include "OAIRedisRebootParameters.h"
#include "OAIRedisRegenerateKeyParameters.h"
#include "OAIRedisResource.h"
#include "OAIRedisResourceWithAccessKey.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRedisApi : public QObject {
    Q_OBJECT

public:
    OAIRedisApi(const int timeOut = 0);
    ~OAIRedisApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIRedisCreateOrUpdateParameters [required]
    */
    virtual void redisCreateOrUpdate(const QString &resource_group_name, const QString &name, const QString &api_version, const QString &subscription_id, const OAIRedisCreateOrUpdateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void redisDelete(const QString &resource_group_name, const QString &name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIRedisRebootParameters [required]
    */
    virtual void redisForceReboot(const QString &resource_group_name, const QString &name, const QString &api_version, const QString &subscription_id, const OAIRedisRebootParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void redisGet(const QString &resource_group_name, const QString &name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void redisList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void redisListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void redisListKeys(const QString &resource_group_name, const QString &name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIRedisRegenerateKeyParameters [required]
    */
    virtual void redisRegenerateKey(const QString &resource_group_name, const QString &name, const QString &api_version, const QString &subscription_id, const OAIRedisRegenerateKeyParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void redisCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void redisDeleteCallback(OAIHttpRequestWorker *worker);
    void redisForceRebootCallback(OAIHttpRequestWorker *worker);
    void redisGetCallback(OAIHttpRequestWorker *worker);
    void redisListCallback(OAIHttpRequestWorker *worker);
    void redisListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void redisListKeysCallback(OAIHttpRequestWorker *worker);
    void redisRegenerateKeyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void redisCreateOrUpdateSignal(OAIRedisResourceWithAccessKey summary);
    void redisDeleteSignal();
    void redisForceRebootSignal();
    void redisGetSignal(OAIRedisResource summary);
    void redisListSignal(OAIRedisListResult summary);
    void redisListByResourceGroupSignal(OAIRedisListResult summary);
    void redisListKeysSignal(OAIRedisListKeysResult summary);
    void redisRegenerateKeySignal(OAIRedisListKeysResult summary);


    void redisCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRedisResourceWithAccessKey summary);
    void redisDeleteSignalFull(OAIHttpRequestWorker *worker);
    void redisForceRebootSignalFull(OAIHttpRequestWorker *worker);
    void redisGetSignalFull(OAIHttpRequestWorker *worker, OAIRedisResource summary);
    void redisListSignalFull(OAIHttpRequestWorker *worker, OAIRedisListResult summary);
    void redisListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIRedisListResult summary);
    void redisListKeysSignalFull(OAIHttpRequestWorker *worker, OAIRedisListKeysResult summary);
    void redisRegenerateKeySignalFull(OAIHttpRequestWorker *worker, OAIRedisListKeysResult summary);

    Q_DECL_DEPRECATED_X("Use redisCreateOrUpdateSignalError() instead")
    void redisCreateOrUpdateSignalE(OAIRedisResourceWithAccessKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void redisCreateOrUpdateSignalError(OAIRedisResourceWithAccessKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisDeleteSignalError() instead")
    void redisDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void redisDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisForceRebootSignalError() instead")
    void redisForceRebootSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void redisForceRebootSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisGetSignalError() instead")
    void redisGetSignalE(OAIRedisResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void redisGetSignalError(OAIRedisResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisListSignalError() instead")
    void redisListSignalE(OAIRedisListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void redisListSignalError(OAIRedisListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisListByResourceGroupSignalError() instead")
    void redisListByResourceGroupSignalE(OAIRedisListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void redisListByResourceGroupSignalError(OAIRedisListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisListKeysSignalError() instead")
    void redisListKeysSignalE(OAIRedisListKeysResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void redisListKeysSignalError(OAIRedisListKeysResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisRegenerateKeySignalError() instead")
    void redisRegenerateKeySignalE(OAIRedisListKeysResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void redisRegenerateKeySignalError(OAIRedisListKeysResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use redisCreateOrUpdateSignalErrorFull() instead")
    void redisCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redisCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisDeleteSignalErrorFull() instead")
    void redisDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redisDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisForceRebootSignalErrorFull() instead")
    void redisForceRebootSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redisForceRebootSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisGetSignalErrorFull() instead")
    void redisGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redisGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisListSignalErrorFull() instead")
    void redisListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redisListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisListByResourceGroupSignalErrorFull() instead")
    void redisListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redisListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisListKeysSignalErrorFull() instead")
    void redisListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redisListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redisRegenerateKeySignalErrorFull() instead")
    void redisRegenerateKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redisRegenerateKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
