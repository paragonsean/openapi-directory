/*
 * AutomationManagement
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-05-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Definition of source control sync job properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:10:16.440469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceControlSyncJobProperties {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  /**
   * The provisioning state of the job.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    COMPLETED("Completed"),
    
    FAILED("Failed"),
    
    RUNNING("Running");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_SOURCE_CONTROL_SYNC_JOB_ID = "sourceControlSyncJobId";
  @SerializedName(SERIALIZED_NAME_SOURCE_CONTROL_SYNC_JOB_ID)
  private String sourceControlSyncJobId;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  /**
   * The sync type.
   */
  @JsonAdapter(SyncTypeEnum.Adapter.class)
  public enum SyncTypeEnum {
    PARTIAL_SYNC("PartialSync"),
    
    FULL_SYNC("FullSync");

    private String value;

    SyncTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SyncTypeEnum fromValue(String value) {
      for (SyncTypeEnum b : SyncTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SyncTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyncTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SyncTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SyncTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SyncTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYNC_TYPE = "syncType";
  @SerializedName(SERIALIZED_NAME_SYNC_TYPE)
  private SyncTypeEnum syncType;

  public SourceControlSyncJobProperties() {
  }

  public SourceControlSyncJobProperties(
     OffsetDateTime creationTime, 
     OffsetDateTime endTime, 
     OffsetDateTime startTime
  ) {
    this();
    this.creationTime = creationTime;
    this.endTime = endTime;
    this.startTime = startTime;
  }

  /**
   * The creation time of the job.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }



  /**
   * The end time of the job.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }



  public SourceControlSyncJobProperties provisioningState(ProvisioningStateEnum provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The provisioning state of the job.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningStateEnum provisioningState) {
    this.provisioningState = provisioningState;
  }


  public SourceControlSyncJobProperties sourceControlSyncJobId(String sourceControlSyncJobId) {
    this.sourceControlSyncJobId = sourceControlSyncJobId;
    return this;
  }

  /**
   * The source control sync job id.
   * @return sourceControlSyncJobId
   */
  @javax.annotation.Nullable
  public String getSourceControlSyncJobId() {
    return sourceControlSyncJobId;
  }

  public void setSourceControlSyncJobId(String sourceControlSyncJobId) {
    this.sourceControlSyncJobId = sourceControlSyncJobId;
  }


  /**
   * The start time of the job.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }



  public SourceControlSyncJobProperties syncType(SyncTypeEnum syncType) {
    this.syncType = syncType;
    return this;
  }

  /**
   * The sync type.
   * @return syncType
   */
  @javax.annotation.Nullable
  public SyncTypeEnum getSyncType() {
    return syncType;
  }

  public void setSyncType(SyncTypeEnum syncType) {
    this.syncType = syncType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceControlSyncJobProperties sourceControlSyncJobProperties = (SourceControlSyncJobProperties) o;
    return Objects.equals(this.creationTime, sourceControlSyncJobProperties.creationTime) &&
        Objects.equals(this.endTime, sourceControlSyncJobProperties.endTime) &&
        Objects.equals(this.provisioningState, sourceControlSyncJobProperties.provisioningState) &&
        Objects.equals(this.sourceControlSyncJobId, sourceControlSyncJobProperties.sourceControlSyncJobId) &&
        Objects.equals(this.startTime, sourceControlSyncJobProperties.startTime) &&
        Objects.equals(this.syncType, sourceControlSyncJobProperties.syncType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, endTime, provisioningState, sourceControlSyncJobId, startTime, syncType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceControlSyncJobProperties {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    sourceControlSyncJobId: ").append(toIndentedString(sourceControlSyncJobId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    syncType: ").append(toIndentedString(syncType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("endTime");
    openapiFields.add("provisioningState");
    openapiFields.add("sourceControlSyncJobId");
    openapiFields.add("startTime");
    openapiFields.add("syncType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceControlSyncJobProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceControlSyncJobProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceControlSyncJobProperties is not found in the empty JSON string", SourceControlSyncJobProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceControlSyncJobProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceControlSyncJobProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("sourceControlSyncJobId") != null && !jsonObj.get("sourceControlSyncJobId").isJsonNull()) && !jsonObj.get("sourceControlSyncJobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceControlSyncJobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceControlSyncJobId").toString()));
      }
      if ((jsonObj.get("syncType") != null && !jsonObj.get("syncType").isJsonNull()) && !jsonObj.get("syncType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncType").toString()));
      }
      // validate the optional field `syncType`
      if (jsonObj.get("syncType") != null && !jsonObj.get("syncType").isJsonNull()) {
        SyncTypeEnum.validateJsonElement(jsonObj.get("syncType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceControlSyncJobProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceControlSyncJobProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceControlSyncJobProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceControlSyncJobProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceControlSyncJobProperties>() {
           @Override
           public void write(JsonWriter out, SourceControlSyncJobProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceControlSyncJobProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceControlSyncJobProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceControlSyncJobProperties
   * @throws IOException if the JSON string is invalid with respect to SourceControlSyncJobProperties
   */
  public static SourceControlSyncJobProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceControlSyncJobProperties.class);
  }

  /**
   * Convert an instance of SourceControlSyncJobProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

