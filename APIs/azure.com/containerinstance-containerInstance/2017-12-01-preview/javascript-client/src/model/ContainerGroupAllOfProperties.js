/**
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Container from './Container';
import ContainerGroupAllOfPropertiesInstanceView from './ContainerGroupAllOfPropertiesInstanceView';
import ImageRegistryCredential from './ImageRegistryCredential';
import IpAddress from './IpAddress';
import Volume from './Volume';

/**
 * The ContainerGroupAllOfProperties model module.
 * @module model/ContainerGroupAllOfProperties
 * @version 2017-12-01-preview
 */
class ContainerGroupAllOfProperties {
    /**
     * Constructs a new <code>ContainerGroupAllOfProperties</code>.
     * @alias module:model/ContainerGroupAllOfProperties
     * @param containers {Array.<module:model/Container>} The containers within the container group.
     * @param osType {module:model/ContainerGroupAllOfProperties.OsTypeEnum} The operating system type required by the containers in the container group.
     */
    constructor(containers, osType) { 
        
        ContainerGroupAllOfProperties.initialize(this, containers, osType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, containers, osType) { 
        obj['containers'] = containers;
        obj['osType'] = osType;
    }

    /**
     * Constructs a <code>ContainerGroupAllOfProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerGroupAllOfProperties} obj Optional instance to populate.
     * @return {module:model/ContainerGroupAllOfProperties} The populated <code>ContainerGroupAllOfProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerGroupAllOfProperties();

            if (data.hasOwnProperty('containers')) {
                obj['containers'] = ApiClient.convertToType(data['containers'], [Container]);
            }
            if (data.hasOwnProperty('imageRegistryCredentials')) {
                obj['imageRegistryCredentials'] = ApiClient.convertToType(data['imageRegistryCredentials'], [ImageRegistryCredential]);
            }
            if (data.hasOwnProperty('instanceView')) {
                obj['instanceView'] = ContainerGroupAllOfPropertiesInstanceView.constructFromObject(data['instanceView']);
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = IpAddress.constructFromObject(data['ipAddress']);
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('restartPolicy')) {
                obj['restartPolicy'] = ApiClient.convertToType(data['restartPolicy'], 'String');
            }
            if (data.hasOwnProperty('volumes')) {
                obj['volumes'] = ApiClient.convertToType(data['volumes'], [Volume]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContainerGroupAllOfProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContainerGroupAllOfProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContainerGroupAllOfProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['containers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['containers'])) {
                throw new Error("Expected the field `containers` to be an array in the JSON data but got " + data['containers']);
            }
            // validate the optional field `containers` (array)
            for (const item of data['containers']) {
                Container.validateJSON(item);
            };
        }
        if (data['imageRegistryCredentials']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['imageRegistryCredentials'])) {
                throw new Error("Expected the field `imageRegistryCredentials` to be an array in the JSON data but got " + data['imageRegistryCredentials']);
            }
            // validate the optional field `imageRegistryCredentials` (array)
            for (const item of data['imageRegistryCredentials']) {
                ImageRegistryCredential.validateJSON(item);
            };
        }
        // validate the optional field `instanceView`
        if (data['instanceView']) { // data not null
          ContainerGroupAllOfPropertiesInstanceView.validateJSON(data['instanceView']);
        }
        // validate the optional field `ipAddress`
        if (data['ipAddress']) { // data not null
          IpAddress.validateJSON(data['ipAddress']);
        }
        // ensure the json data is a string
        if (data['osType'] && !(typeof data['osType'] === 'string' || data['osType'] instanceof String)) {
            throw new Error("Expected the field `osType` to be a primitive type in the JSON string but got " + data['osType']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['restartPolicy'] && !(typeof data['restartPolicy'] === 'string' || data['restartPolicy'] instanceof String)) {
            throw new Error("Expected the field `restartPolicy` to be a primitive type in the JSON string but got " + data['restartPolicy']);
        }
        if (data['volumes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['volumes'])) {
                throw new Error("Expected the field `volumes` to be an array in the JSON data but got " + data['volumes']);
            }
            // validate the optional field `volumes` (array)
            for (const item of data['volumes']) {
                Volume.validateJSON(item);
            };
        }

        return true;
    }


}

ContainerGroupAllOfProperties.RequiredProperties = ["containers", "osType"];

/**
 * The containers within the container group.
 * @member {Array.<module:model/Container>} containers
 */
ContainerGroupAllOfProperties.prototype['containers'] = undefined;

/**
 * The image registry credentials by which the container group is created from.
 * @member {Array.<module:model/ImageRegistryCredential>} imageRegistryCredentials
 */
ContainerGroupAllOfProperties.prototype['imageRegistryCredentials'] = undefined;

/**
 * @member {module:model/ContainerGroupAllOfPropertiesInstanceView} instanceView
 */
ContainerGroupAllOfProperties.prototype['instanceView'] = undefined;

/**
 * @member {module:model/IpAddress} ipAddress
 */
ContainerGroupAllOfProperties.prototype['ipAddress'] = undefined;

/**
 * The operating system type required by the containers in the container group.
 * @member {module:model/ContainerGroupAllOfProperties.OsTypeEnum} osType
 */
ContainerGroupAllOfProperties.prototype['osType'] = undefined;

/**
 * The provisioning state of the container group. This only appears in the response.
 * @member {String} provisioningState
 */
ContainerGroupAllOfProperties.prototype['provisioningState'] = undefined;

/**
 * Restart policy for all containers within the container group.  - `Always` Always restart - `OnFailure` Restart on failure - `Never` Never restart 
 * @member {module:model/ContainerGroupAllOfProperties.RestartPolicyEnum} restartPolicy
 */
ContainerGroupAllOfProperties.prototype['restartPolicy'] = undefined;

/**
 * The list of volumes that can be mounted by containers in this container group.
 * @member {Array.<module:model/Volume>} volumes
 */
ContainerGroupAllOfProperties.prototype['volumes'] = undefined;





/**
 * Allowed values for the <code>osType</code> property.
 * @enum {String}
 * @readonly
 */
ContainerGroupAllOfProperties['OsTypeEnum'] = {

    /**
     * value: "Windows"
     * @const
     */
    "Windows": "Windows",

    /**
     * value: "Linux"
     * @const
     */
    "Linux": "Linux"
};


/**
 * Allowed values for the <code>restartPolicy</code> property.
 * @enum {String}
 * @readonly
 */
ContainerGroupAllOfProperties['RestartPolicyEnum'] = {

    /**
     * value: "Always"
     * @const
     */
    "Always": "Always",

    /**
     * value: "OnFailure"
     * @const
     */
    "OnFailure": "OnFailure",

    /**
     * value: "Never"
     * @const
     */
    "Never": "Never"
};



export default ContainerGroupAllOfProperties;

