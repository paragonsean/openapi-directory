/**
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Port from './Port';

/**
 * The IpAddress model module.
 * @module model/IpAddress
 * @version 2017-12-01-preview
 */
class IpAddress {
    /**
     * Constructs a new <code>IpAddress</code>.
     * IP address for the container group.
     * @alias module:model/IpAddress
     * @param ports {Array.<module:model/Port>} The list of ports exposed on the container group.
     * @param type {module:model/IpAddress.TypeEnum} Specifies if the IP is exposed to the public internet.
     */
    constructor(ports, type) { 
        
        IpAddress.initialize(this, ports, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ports, type) { 
        obj['ports'] = ports;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>IpAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IpAddress} obj Optional instance to populate.
     * @return {module:model/IpAddress} The populated <code>IpAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IpAddress();

            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('ports')) {
                obj['ports'] = ApiClient.convertToType(data['ports'], [Port]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IpAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IpAddress</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IpAddress.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        if (data['ports']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ports'])) {
                throw new Error("Expected the field `ports` to be an array in the JSON data but got " + data['ports']);
            }
            // validate the optional field `ports` (array)
            for (const item of data['ports']) {
                Port.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

IpAddress.RequiredProperties = ["ports", "type"];

/**
 * The IP exposed to the public internet.
 * @member {String} ip
 */
IpAddress.prototype['ip'] = undefined;

/**
 * The list of ports exposed on the container group.
 * @member {Array.<module:model/Port>} ports
 */
IpAddress.prototype['ports'] = undefined;

/**
 * Specifies if the IP is exposed to the public internet.
 * @member {module:model/IpAddress.TypeEnum} type
 */
IpAddress.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
IpAddress['TypeEnum'] = {

    /**
     * value: "Public"
     * @const
     */
    "Public": "Public"
};



export default IpAddress;

