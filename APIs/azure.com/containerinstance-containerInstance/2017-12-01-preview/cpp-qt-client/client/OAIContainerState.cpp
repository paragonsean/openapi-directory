/**
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerState::OAIContainerState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerState::OAIContainerState() {
    this->initializeModel();
}

OAIContainerState::~OAIContainerState() {}

void OAIContainerState::initializeModel() {

    m_detail_status_isSet = false;
    m_detail_status_isValid = false;

    m_exit_code_isSet = false;
    m_exit_code_isValid = false;

    m_finish_time_isSet = false;
    m_finish_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIContainerState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerState::fromJsonObject(QJsonObject json) {

    m_detail_status_isValid = ::OpenAPI::fromJsonValue(m_detail_status, json[QString("detailStatus")]);
    m_detail_status_isSet = !json[QString("detailStatus")].isNull() && m_detail_status_isValid;

    m_exit_code_isValid = ::OpenAPI::fromJsonValue(m_exit_code, json[QString("exitCode")]);
    m_exit_code_isSet = !json[QString("exitCode")].isNull() && m_exit_code_isValid;

    m_finish_time_isValid = ::OpenAPI::fromJsonValue(m_finish_time, json[QString("finishTime")]);
    m_finish_time_isSet = !json[QString("finishTime")].isNull() && m_finish_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIContainerState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerState::asJsonObject() const {
    QJsonObject obj;
    if (m_detail_status_isSet) {
        obj.insert(QString("detailStatus"), ::OpenAPI::toJsonValue(m_detail_status));
    }
    if (m_exit_code_isSet) {
        obj.insert(QString("exitCode"), ::OpenAPI::toJsonValue(m_exit_code));
    }
    if (m_finish_time_isSet) {
        obj.insert(QString("finishTime"), ::OpenAPI::toJsonValue(m_finish_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIContainerState::getDetailStatus() const {
    return m_detail_status;
}
void OAIContainerState::setDetailStatus(const QString &detail_status) {
    m_detail_status = detail_status;
    m_detail_status_isSet = true;
}

bool OAIContainerState::is_detail_status_Set() const{
    return m_detail_status_isSet;
}

bool OAIContainerState::is_detail_status_Valid() const{
    return m_detail_status_isValid;
}

qint32 OAIContainerState::getExitCode() const {
    return m_exit_code;
}
void OAIContainerState::setExitCode(const qint32 &exit_code) {
    m_exit_code = exit_code;
    m_exit_code_isSet = true;
}

bool OAIContainerState::is_exit_code_Set() const{
    return m_exit_code_isSet;
}

bool OAIContainerState::is_exit_code_Valid() const{
    return m_exit_code_isValid;
}

QDateTime OAIContainerState::getFinishTime() const {
    return m_finish_time;
}
void OAIContainerState::setFinishTime(const QDateTime &finish_time) {
    m_finish_time = finish_time;
    m_finish_time_isSet = true;
}

bool OAIContainerState::is_finish_time_Set() const{
    return m_finish_time_isSet;
}

bool OAIContainerState::is_finish_time_Valid() const{
    return m_finish_time_isValid;
}

QDateTime OAIContainerState::getStartTime() const {
    return m_start_time;
}
void OAIContainerState::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIContainerState::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIContainerState::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIContainerState::getState() const {
    return m_state;
}
void OAIContainerState::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIContainerState::is_state_Set() const{
    return m_state_isSet;
}

bool OAIContainerState::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIContainerState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detail_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exit_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finish_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
