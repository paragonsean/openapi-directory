/*
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContainerState;
import org.openapitools.client.model.Event;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The instance view of the container instance. Only valid in response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:36.199312-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainerPropertiesInstanceView {
  public static final String SERIALIZED_NAME_CURRENT_STATE = "currentState";
  @SerializedName(SERIALIZED_NAME_CURRENT_STATE)
  private ContainerState currentState;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<Event> events = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREVIOUS_STATE = "previousState";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_STATE)
  private ContainerState previousState;

  public static final String SERIALIZED_NAME_RESTART_COUNT = "restartCount";
  @SerializedName(SERIALIZED_NAME_RESTART_COUNT)
  private Integer restartCount;

  public ContainerPropertiesInstanceView() {
  }

  public ContainerPropertiesInstanceView(
     List<Event> events, 
     Integer restartCount
  ) {
    this();
    this.events = events;
    this.restartCount = restartCount;
  }

  public ContainerPropertiesInstanceView currentState(ContainerState currentState) {
    this.currentState = currentState;
    return this;
  }

  /**
   * Get currentState
   * @return currentState
   */
  @javax.annotation.Nullable
  public ContainerState getCurrentState() {
    return currentState;
  }

  public void setCurrentState(ContainerState currentState) {
    this.currentState = currentState;
  }


  /**
   * The events of the container instance.
   * @return events
   */
  @javax.annotation.Nullable
  public List<Event> getEvents() {
    return events;
  }



  public ContainerPropertiesInstanceView previousState(ContainerState previousState) {
    this.previousState = previousState;
    return this;
  }

  /**
   * Get previousState
   * @return previousState
   */
  @javax.annotation.Nullable
  public ContainerState getPreviousState() {
    return previousState;
  }

  public void setPreviousState(ContainerState previousState) {
    this.previousState = previousState;
  }


  /**
   * The number of times that the container instance has been restarted.
   * @return restartCount
   */
  @javax.annotation.Nullable
  public Integer getRestartCount() {
    return restartCount;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerPropertiesInstanceView containerPropertiesInstanceView = (ContainerPropertiesInstanceView) o;
    return Objects.equals(this.currentState, containerPropertiesInstanceView.currentState) &&
        Objects.equals(this.events, containerPropertiesInstanceView.events) &&
        Objects.equals(this.previousState, containerPropertiesInstanceView.previousState) &&
        Objects.equals(this.restartCount, containerPropertiesInstanceView.restartCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentState, events, previousState, restartCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerPropertiesInstanceView {\n");
    sb.append("    currentState: ").append(toIndentedString(currentState)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    previousState: ").append(toIndentedString(previousState)).append("\n");
    sb.append("    restartCount: ").append(toIndentedString(restartCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentState");
    openapiFields.add("events");
    openapiFields.add("previousState");
    openapiFields.add("restartCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainerPropertiesInstanceView
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainerPropertiesInstanceView.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainerPropertiesInstanceView is not found in the empty JSON string", ContainerPropertiesInstanceView.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainerPropertiesInstanceView.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainerPropertiesInstanceView` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `currentState`
      if (jsonObj.get("currentState") != null && !jsonObj.get("currentState").isJsonNull()) {
        ContainerState.validateJsonElement(jsonObj.get("currentState"));
      }
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull()) {
        JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
        if (jsonArrayevents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("events").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
          }

          // validate the optional field `events` (array)
          for (int i = 0; i < jsonArrayevents.size(); i++) {
            Event.validateJsonElement(jsonArrayevents.get(i));
          };
        }
      }
      // validate the optional field `previousState`
      if (jsonObj.get("previousState") != null && !jsonObj.get("previousState").isJsonNull()) {
        ContainerState.validateJsonElement(jsonObj.get("previousState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainerPropertiesInstanceView.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainerPropertiesInstanceView' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainerPropertiesInstanceView> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainerPropertiesInstanceView.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainerPropertiesInstanceView>() {
           @Override
           public void write(JsonWriter out, ContainerPropertiesInstanceView value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainerPropertiesInstanceView read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainerPropertiesInstanceView given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainerPropertiesInstanceView
   * @throws IOException if the JSON string is invalid with respect to ContainerPropertiesInstanceView
   */
  public static ContainerPropertiesInstanceView fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerPropertiesInstanceView.class);
  }

  /**
   * Convert an instance of ContainerPropertiesInstanceView to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

