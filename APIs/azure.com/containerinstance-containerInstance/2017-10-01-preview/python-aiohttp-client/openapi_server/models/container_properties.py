# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_port import ContainerPort
from openapi_server.models.container_properties_instance_view import ContainerPropertiesInstanceView
from openapi_server.models.environment_variable import EnvironmentVariable
from openapi_server.models.resource_requirements import ResourceRequirements
from openapi_server.models.volume_mount import VolumeMount
from openapi_server import util


class ContainerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command: List[str]=None, environment_variables: List[EnvironmentVariable]=None, image: str=None, instance_view: ContainerPropertiesInstanceView=None, ports: List[ContainerPort]=None, resources: ResourceRequirements=None, volume_mounts: List[VolumeMount]=None):
        """ContainerProperties - a model defined in OpenAPI

        :param command: The command of this ContainerProperties.
        :param environment_variables: The environment_variables of this ContainerProperties.
        :param image: The image of this ContainerProperties.
        :param instance_view: The instance_view of this ContainerProperties.
        :param ports: The ports of this ContainerProperties.
        :param resources: The resources of this ContainerProperties.
        :param volume_mounts: The volume_mounts of this ContainerProperties.
        """
        self.openapi_types = {
            'command': List[str],
            'environment_variables': List[EnvironmentVariable],
            'image': str,
            'instance_view': ContainerPropertiesInstanceView,
            'ports': List[ContainerPort],
            'resources': ResourceRequirements,
            'volume_mounts': List[VolumeMount]
        }

        self.attribute_map = {
            'command': 'command',
            'environment_variables': 'environmentVariables',
            'image': 'image',
            'instance_view': 'instanceView',
            'ports': 'ports',
            'resources': 'resources',
            'volume_mounts': 'volumeMounts'
        }

        self._command = command
        self._environment_variables = environment_variables
        self._image = image
        self._instance_view = instance_view
        self._ports = ports
        self._resources = resources
        self._volume_mounts = volume_mounts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerProperties of this ContainerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command(self):
        """Gets the command of this ContainerProperties.

        The commands to execute within the container instance in exec form.

        :return: The command of this ContainerProperties.
        :rtype: List[str]
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this ContainerProperties.

        The commands to execute within the container instance in exec form.

        :param command: The command of this ContainerProperties.
        :type command: List[str]
        """

        self._command = command

    @property
    def environment_variables(self):
        """Gets the environment_variables of this ContainerProperties.

        The environment variables to set in the container instance.

        :return: The environment_variables of this ContainerProperties.
        :rtype: List[EnvironmentVariable]
        """
        return self._environment_variables

    @environment_variables.setter
    def environment_variables(self, environment_variables):
        """Sets the environment_variables of this ContainerProperties.

        The environment variables to set in the container instance.

        :param environment_variables: The environment_variables of this ContainerProperties.
        :type environment_variables: List[EnvironmentVariable]
        """

        self._environment_variables = environment_variables

    @property
    def image(self):
        """Gets the image of this ContainerProperties.

        The name of the image used to create the container instance.

        :return: The image of this ContainerProperties.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ContainerProperties.

        The name of the image used to create the container instance.

        :param image: The image of this ContainerProperties.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def instance_view(self):
        """Gets the instance_view of this ContainerProperties.


        :return: The instance_view of this ContainerProperties.
        :rtype: ContainerPropertiesInstanceView
        """
        return self._instance_view

    @instance_view.setter
    def instance_view(self, instance_view):
        """Sets the instance_view of this ContainerProperties.


        :param instance_view: The instance_view of this ContainerProperties.
        :type instance_view: ContainerPropertiesInstanceView
        """

        self._instance_view = instance_view

    @property
    def ports(self):
        """Gets the ports of this ContainerProperties.

        The exposed ports on the container instance.

        :return: The ports of this ContainerProperties.
        :rtype: List[ContainerPort]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this ContainerProperties.

        The exposed ports on the container instance.

        :param ports: The ports of this ContainerProperties.
        :type ports: List[ContainerPort]
        """

        self._ports = ports

    @property
    def resources(self):
        """Gets the resources of this ContainerProperties.


        :return: The resources of this ContainerProperties.
        :rtype: ResourceRequirements
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this ContainerProperties.


        :param resources: The resources of this ContainerProperties.
        :type resources: ResourceRequirements
        """
        if resources is None:
            raise ValueError("Invalid value for `resources`, must not be `None`")

        self._resources = resources

    @property
    def volume_mounts(self):
        """Gets the volume_mounts of this ContainerProperties.

        The volume mounts available to the container instance.

        :return: The volume_mounts of this ContainerProperties.
        :rtype: List[VolumeMount]
        """
        return self._volume_mounts

    @volume_mounts.setter
    def volume_mounts(self, volume_mounts):
        """Sets the volume_mounts of this ContainerProperties.

        The volume mounts available to the container instance.

        :param volume_mounts: The volume_mounts of this ContainerProperties.
        :type volume_mounts: List[VolumeMount]
        """

        self._volume_mounts = volume_mounts
