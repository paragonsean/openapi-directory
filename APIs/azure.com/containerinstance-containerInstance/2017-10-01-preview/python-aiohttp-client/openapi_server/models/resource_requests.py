# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceRequests(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cpu: float=None, memory_in_gb: float=None):
        """ResourceRequests - a model defined in OpenAPI

        :param cpu: The cpu of this ResourceRequests.
        :param memory_in_gb: The memory_in_gb of this ResourceRequests.
        """
        self.openapi_types = {
            'cpu': float,
            'memory_in_gb': float
        }

        self.attribute_map = {
            'cpu': 'cpu',
            'memory_in_gb': 'memoryInGB'
        }

        self._cpu = cpu
        self._memory_in_gb = memory_in_gb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceRequests':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceRequests of this ResourceRequests.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cpu(self):
        """Gets the cpu of this ResourceRequests.

        The CPU request of this container instance.

        :return: The cpu of this ResourceRequests.
        :rtype: float
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this ResourceRequests.

        The CPU request of this container instance.

        :param cpu: The cpu of this ResourceRequests.
        :type cpu: float
        """
        if cpu is None:
            raise ValueError("Invalid value for `cpu`, must not be `None`")

        self._cpu = cpu

    @property
    def memory_in_gb(self):
        """Gets the memory_in_gb of this ResourceRequests.

        The memory request in GB of this container instance.

        :return: The memory_in_gb of this ResourceRequests.
        :rtype: float
        """
        return self._memory_in_gb

    @memory_in_gb.setter
    def memory_in_gb(self, memory_in_gb):
        """Sets the memory_in_gb of this ResourceRequests.

        The memory request in GB of this container instance.

        :param memory_in_gb: The memory_in_gb of this ResourceRequests.
        :type memory_in_gb: float
        """
        if memory_in_gb is None:
            raise ValueError("Invalid value for `memory_in_gb`, must not be `None`")

        self._memory_in_gb = memory_in_gb
