# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, first_timestamp: datetime=None, last_timestamp: datetime=None, message: str=None, name: str=None, type: str=None):
        """Event - a model defined in OpenAPI

        :param count: The count of this Event.
        :param first_timestamp: The first_timestamp of this Event.
        :param last_timestamp: The last_timestamp of this Event.
        :param message: The message of this Event.
        :param name: The name of this Event.
        :param type: The type of this Event.
        """
        self.openapi_types = {
            'count': int,
            'first_timestamp': datetime,
            'last_timestamp': datetime,
            'message': str,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'count': 'count',
            'first_timestamp': 'firstTimestamp',
            'last_timestamp': 'lastTimestamp',
            'message': 'message',
            'name': 'name',
            'type': 'type'
        }

        self._count = count
        self._first_timestamp = first_timestamp
        self._last_timestamp = last_timestamp
        self._message = message
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this Event.

        The count of the event.

        :return: The count of this Event.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Event.

        The count of the event.

        :param count: The count of this Event.
        :type count: int
        """

        self._count = count

    @property
    def first_timestamp(self):
        """Gets the first_timestamp of this Event.

        The date-time of the earliest logged event.

        :return: The first_timestamp of this Event.
        :rtype: datetime
        """
        return self._first_timestamp

    @first_timestamp.setter
    def first_timestamp(self, first_timestamp):
        """Sets the first_timestamp of this Event.

        The date-time of the earliest logged event.

        :param first_timestamp: The first_timestamp of this Event.
        :type first_timestamp: datetime
        """

        self._first_timestamp = first_timestamp

    @property
    def last_timestamp(self):
        """Gets the last_timestamp of this Event.

        The date-time of the latest logged event.

        :return: The last_timestamp of this Event.
        :rtype: datetime
        """
        return self._last_timestamp

    @last_timestamp.setter
    def last_timestamp(self, last_timestamp):
        """Sets the last_timestamp of this Event.

        The date-time of the latest logged event.

        :param last_timestamp: The last_timestamp of this Event.
        :type last_timestamp: datetime
        """

        self._last_timestamp = last_timestamp

    @property
    def message(self):
        """Gets the message of this Event.

        The event message.

        :return: The message of this Event.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Event.

        The event message.

        :param message: The message of this Event.
        :type message: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this Event.

        The event name.

        :return: The name of this Event.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Event.

        The event name.

        :param name: The name of this Event.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Event.

        The event type.

        :return: The type of this Event.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Event.

        The event type.

        :param type: The type of this Event.
        :type type: str
        """

        self._type = type
