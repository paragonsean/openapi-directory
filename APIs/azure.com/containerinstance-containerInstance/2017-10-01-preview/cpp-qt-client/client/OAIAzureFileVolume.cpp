/**
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureFileVolume.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureFileVolume::OAIAzureFileVolume(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureFileVolume::OAIAzureFileVolume() {
    this->initializeModel();
}

OAIAzureFileVolume::~OAIAzureFileVolume() {}

void OAIAzureFileVolume::initializeModel() {

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_share_name_isSet = false;
    m_share_name_isValid = false;

    m_storage_account_key_isSet = false;
    m_storage_account_key_isValid = false;

    m_storage_account_name_isSet = false;
    m_storage_account_name_isValid = false;
}

void OAIAzureFileVolume::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureFileVolume::fromJsonObject(QJsonObject json) {

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("readOnly")]);
    m_read_only_isSet = !json[QString("readOnly")].isNull() && m_read_only_isValid;

    m_share_name_isValid = ::OpenAPI::fromJsonValue(m_share_name, json[QString("shareName")]);
    m_share_name_isSet = !json[QString("shareName")].isNull() && m_share_name_isValid;

    m_storage_account_key_isValid = ::OpenAPI::fromJsonValue(m_storage_account_key, json[QString("storageAccountKey")]);
    m_storage_account_key_isSet = !json[QString("storageAccountKey")].isNull() && m_storage_account_key_isValid;

    m_storage_account_name_isValid = ::OpenAPI::fromJsonValue(m_storage_account_name, json[QString("storageAccountName")]);
    m_storage_account_name_isSet = !json[QString("storageAccountName")].isNull() && m_storage_account_name_isValid;
}

QString OAIAzureFileVolume::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureFileVolume::asJsonObject() const {
    QJsonObject obj;
    if (m_read_only_isSet) {
        obj.insert(QString("readOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_share_name_isSet) {
        obj.insert(QString("shareName"), ::OpenAPI::toJsonValue(m_share_name));
    }
    if (m_storage_account_key_isSet) {
        obj.insert(QString("storageAccountKey"), ::OpenAPI::toJsonValue(m_storage_account_key));
    }
    if (m_storage_account_name_isSet) {
        obj.insert(QString("storageAccountName"), ::OpenAPI::toJsonValue(m_storage_account_name));
    }
    return obj;
}

bool OAIAzureFileVolume::isReadOnly() const {
    return m_read_only;
}
void OAIAzureFileVolume::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAIAzureFileVolume::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAIAzureFileVolume::is_read_only_Valid() const{
    return m_read_only_isValid;
}

QString OAIAzureFileVolume::getShareName() const {
    return m_share_name;
}
void OAIAzureFileVolume::setShareName(const QString &share_name) {
    m_share_name = share_name;
    m_share_name_isSet = true;
}

bool OAIAzureFileVolume::is_share_name_Set() const{
    return m_share_name_isSet;
}

bool OAIAzureFileVolume::is_share_name_Valid() const{
    return m_share_name_isValid;
}

QString OAIAzureFileVolume::getStorageAccountKey() const {
    return m_storage_account_key;
}
void OAIAzureFileVolume::setStorageAccountKey(const QString &storage_account_key) {
    m_storage_account_key = storage_account_key;
    m_storage_account_key_isSet = true;
}

bool OAIAzureFileVolume::is_storage_account_key_Set() const{
    return m_storage_account_key_isSet;
}

bool OAIAzureFileVolume::is_storage_account_key_Valid() const{
    return m_storage_account_key_isValid;
}

QString OAIAzureFileVolume::getStorageAccountName() const {
    return m_storage_account_name;
}
void OAIAzureFileVolume::setStorageAccountName(const QString &storage_account_name) {
    m_storage_account_name = storage_account_name;
    m_storage_account_name_isSet = true;
}

bool OAIAzureFileVolume::is_storage_account_name_Set() const{
    return m_storage_account_name_isSet;
}

bool OAIAzureFileVolume::is_storage_account_name_Valid() const{
    return m_storage_account_name_isValid;
}

bool OAIAzureFileVolume::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureFileVolume::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_share_name_isValid && m_storage_account_name_isValid && true;
}

} // namespace OpenAPI
