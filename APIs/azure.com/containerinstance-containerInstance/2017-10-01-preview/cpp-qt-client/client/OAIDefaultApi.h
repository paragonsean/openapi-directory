/**
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIContainerGroup.h"
#include "OAIContainerGroupListResult.h"
#include "OAILogs.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  container_group_name QString [required]
    * @param[in]  container_group OAIContainerGroup [required]
    */
    virtual void containerGroupsCreateOrUpdate(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &container_group_name, const OAIContainerGroup &container_group);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  container_group_name QString [required]
    */
    virtual void containerGroupsDelete(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &container_group_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  container_group_name QString [required]
    */
    virtual void containerGroupsGet(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &container_group_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void containerGroupsList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void containerGroupsListByResourceGroup(const QString &subscription_id, const QString &api_version, const QString &resource_group_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  container_group_name QString [required]
    * @param[in]  container_name QString [required]
    * @param[in]  tail qint32 [optional]
    */
    virtual void containerLogsList(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &container_group_name, const QString &container_name, const ::OpenAPI::OptionalParam<qint32> &tail = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void containerGroupsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void containerGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void containerGroupsGetCallback(OAIHttpRequestWorker *worker);
    void containerGroupsListCallback(OAIHttpRequestWorker *worker);
    void containerGroupsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void containerLogsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void containerGroupsCreateOrUpdateSignal(OAIContainerGroup summary);
    void containerGroupsDeleteSignal(OAIContainerGroup summary);
    void containerGroupsGetSignal(OAIContainerGroup summary);
    void containerGroupsListSignal(OAIContainerGroupListResult summary);
    void containerGroupsListByResourceGroupSignal(OAIContainerGroupListResult summary);
    void containerLogsListSignal(OAILogs summary);


    void containerGroupsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIContainerGroup summary);
    void containerGroupsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIContainerGroup summary);
    void containerGroupsGetSignalFull(OAIHttpRequestWorker *worker, OAIContainerGroup summary);
    void containerGroupsListSignalFull(OAIHttpRequestWorker *worker, OAIContainerGroupListResult summary);
    void containerGroupsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIContainerGroupListResult summary);
    void containerLogsListSignalFull(OAIHttpRequestWorker *worker, OAILogs summary);

    Q_DECL_DEPRECATED_X("Use containerGroupsCreateOrUpdateSignalError() instead")
    void containerGroupsCreateOrUpdateSignalE(OAIContainerGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void containerGroupsCreateOrUpdateSignalError(OAIContainerGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containerGroupsDeleteSignalError() instead")
    void containerGroupsDeleteSignalE(OAIContainerGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void containerGroupsDeleteSignalError(OAIContainerGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containerGroupsGetSignalError() instead")
    void containerGroupsGetSignalE(OAIContainerGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void containerGroupsGetSignalError(OAIContainerGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containerGroupsListSignalError() instead")
    void containerGroupsListSignalE(OAIContainerGroupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void containerGroupsListSignalError(OAIContainerGroupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containerGroupsListByResourceGroupSignalError() instead")
    void containerGroupsListByResourceGroupSignalE(OAIContainerGroupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void containerGroupsListByResourceGroupSignalError(OAIContainerGroupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containerLogsListSignalError() instead")
    void containerLogsListSignalE(OAILogs summary, QNetworkReply::NetworkError error_type, QString error_str);
    void containerLogsListSignalError(OAILogs summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use containerGroupsCreateOrUpdateSignalErrorFull() instead")
    void containerGroupsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containerGroupsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containerGroupsDeleteSignalErrorFull() instead")
    void containerGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containerGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containerGroupsGetSignalErrorFull() instead")
    void containerGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containerGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containerGroupsListSignalErrorFull() instead")
    void containerGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containerGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containerGroupsListByResourceGroupSignalErrorFull() instead")
    void containerGroupsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containerGroupsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use containerLogsListSignalErrorFull() instead")
    void containerLogsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void containerLogsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
