/**
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolume.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolume::OAIVolume(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolume::OAIVolume() {
    this->initializeModel();
}

OAIVolume::~OAIVolume() {}

void OAIVolume::initializeModel() {

    m_azure_file_isSet = false;
    m_azure_file_isValid = false;

    m_empty_dir_isSet = false;
    m_empty_dir_isValid = false;

    m_git_repo_isSet = false;
    m_git_repo_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;
}

void OAIVolume::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolume::fromJsonObject(QJsonObject json) {

    m_azure_file_isValid = ::OpenAPI::fromJsonValue(m_azure_file, json[QString("azureFile")]);
    m_azure_file_isSet = !json[QString("azureFile")].isNull() && m_azure_file_isValid;

    m_empty_dir_isValid = ::OpenAPI::fromJsonValue(m_empty_dir, json[QString("emptyDir")]);
    m_empty_dir_isSet = !json[QString("emptyDir")].isNull() && m_empty_dir_isValid;

    m_git_repo_isValid = ::OpenAPI::fromJsonValue(m_git_repo, json[QString("gitRepo")]);
    m_git_repo_isSet = !json[QString("gitRepo")].isNull() && m_git_repo_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;
}

QString OAIVolume::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolume::asJsonObject() const {
    QJsonObject obj;
    if (m_azure_file.isSet()) {
        obj.insert(QString("azureFile"), ::OpenAPI::toJsonValue(m_azure_file));
    }
    if (m_empty_dir_isSet) {
        obj.insert(QString("emptyDir"), ::OpenAPI::toJsonValue(m_empty_dir));
    }
    if (m_git_repo.isSet()) {
        obj.insert(QString("gitRepo"), ::OpenAPI::toJsonValue(m_git_repo));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_secret.size() > 0) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    return obj;
}

OAIAzureFileVolume OAIVolume::getAzureFile() const {
    return m_azure_file;
}
void OAIVolume::setAzureFile(const OAIAzureFileVolume &azure_file) {
    m_azure_file = azure_file;
    m_azure_file_isSet = true;
}

bool OAIVolume::is_azure_file_Set() const{
    return m_azure_file_isSet;
}

bool OAIVolume::is_azure_file_Valid() const{
    return m_azure_file_isValid;
}

OAIObject OAIVolume::getEmptyDir() const {
    return m_empty_dir;
}
void OAIVolume::setEmptyDir(const OAIObject &empty_dir) {
    m_empty_dir = empty_dir;
    m_empty_dir_isSet = true;
}

bool OAIVolume::is_empty_dir_Set() const{
    return m_empty_dir_isSet;
}

bool OAIVolume::is_empty_dir_Valid() const{
    return m_empty_dir_isValid;
}

OAIGitRepoVolume OAIVolume::getGitRepo() const {
    return m_git_repo;
}
void OAIVolume::setGitRepo(const OAIGitRepoVolume &git_repo) {
    m_git_repo = git_repo;
    m_git_repo_isSet = true;
}

bool OAIVolume::is_git_repo_Set() const{
    return m_git_repo_isSet;
}

bool OAIVolume::is_git_repo_Valid() const{
    return m_git_repo_isValid;
}

QString OAIVolume::getName() const {
    return m_name;
}
void OAIVolume::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVolume::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVolume::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, QString> OAIVolume::getSecret() const {
    return m_secret;
}
void OAIVolume::setSecret(const QMap<QString, QString> &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIVolume::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIVolume::is_secret_Valid() const{
    return m_secret_isValid;
}

bool OAIVolume::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azure_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_empty_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_repo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolume::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
