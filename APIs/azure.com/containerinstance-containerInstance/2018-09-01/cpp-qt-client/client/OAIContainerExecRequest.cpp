/**
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerExecRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerExecRequest::OAIContainerExecRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerExecRequest::OAIContainerExecRequest() {
    this->initializeModel();
}

OAIContainerExecRequest::~OAIContainerExecRequest() {}

void OAIContainerExecRequest::initializeModel() {

    m_command_isSet = false;
    m_command_isValid = false;

    m_terminal_size_isSet = false;
    m_terminal_size_isValid = false;
}

void OAIContainerExecRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerExecRequest::fromJsonObject(QJsonObject json) {

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("command")]);
    m_command_isSet = !json[QString("command")].isNull() && m_command_isValid;

    m_terminal_size_isValid = ::OpenAPI::fromJsonValue(m_terminal_size, json[QString("terminalSize")]);
    m_terminal_size_isSet = !json[QString("terminalSize")].isNull() && m_terminal_size_isValid;
}

QString OAIContainerExecRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerExecRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_command_isSet) {
        obj.insert(QString("command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_terminal_size.isSet()) {
        obj.insert(QString("terminalSize"), ::OpenAPI::toJsonValue(m_terminal_size));
    }
    return obj;
}

QString OAIContainerExecRequest::getCommand() const {
    return m_command;
}
void OAIContainerExecRequest::setCommand(const QString &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAIContainerExecRequest::is_command_Set() const{
    return m_command_isSet;
}

bool OAIContainerExecRequest::is_command_Valid() const{
    return m_command_isValid;
}

OAIContainerExecRequest_terminalSize OAIContainerExecRequest::getTerminalSize() const {
    return m_terminal_size;
}
void OAIContainerExecRequest::setTerminalSize(const OAIContainerExecRequest_terminalSize &terminal_size) {
    m_terminal_size = terminal_size;
    m_terminal_size_isSet = true;
}

bool OAIContainerExecRequest::is_terminal_size_Set() const{
    return m_terminal_size_isSet;
}

bool OAIContainerExecRequest::is_terminal_size_Valid() const{
    return m_terminal_size_isValid;
}

bool OAIContainerExecRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_command_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminal_size.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerExecRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
