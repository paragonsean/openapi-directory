# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LogAnalytics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, log_type: str=None, metadata: Dict[str, str]=None, workspace_id: str=None, workspace_key: str=None):
        """LogAnalytics - a model defined in OpenAPI

        :param log_type: The log_type of this LogAnalytics.
        :param metadata: The metadata of this LogAnalytics.
        :param workspace_id: The workspace_id of this LogAnalytics.
        :param workspace_key: The workspace_key of this LogAnalytics.
        """
        self.openapi_types = {
            'log_type': str,
            'metadata': Dict[str, str],
            'workspace_id': str,
            'workspace_key': str
        }

        self.attribute_map = {
            'log_type': 'logType',
            'metadata': 'metadata',
            'workspace_id': 'workspaceId',
            'workspace_key': 'workspaceKey'
        }

        self._log_type = log_type
        self._metadata = metadata
        self._workspace_id = workspace_id
        self._workspace_key = workspace_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogAnalytics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogAnalytics of this LogAnalytics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def log_type(self):
        """Gets the log_type of this LogAnalytics.

        The log type to be used.

        :return: The log_type of this LogAnalytics.
        :rtype: str
        """
        return self._log_type

    @log_type.setter
    def log_type(self, log_type):
        """Sets the log_type of this LogAnalytics.

        The log type to be used.

        :param log_type: The log_type of this LogAnalytics.
        :type log_type: str
        """
        allowed_values = ["ContainerInsights", "ContainerInstanceLogs"]  # noqa: E501
        if log_type not in allowed_values:
            raise ValueError(
                "Invalid value for `log_type` ({0}), must be one of {1}"
                .format(log_type, allowed_values)
            )

        self._log_type = log_type

    @property
    def metadata(self):
        """Gets the metadata of this LogAnalytics.

        Metadata for log analytics.

        :return: The metadata of this LogAnalytics.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this LogAnalytics.

        Metadata for log analytics.

        :param metadata: The metadata of this LogAnalytics.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def workspace_id(self):
        """Gets the workspace_id of this LogAnalytics.

        The workspace id for log analytics

        :return: The workspace_id of this LogAnalytics.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this LogAnalytics.

        The workspace id for log analytics

        :param workspace_id: The workspace_id of this LogAnalytics.
        :type workspace_id: str
        """
        if workspace_id is None:
            raise ValueError("Invalid value for `workspace_id`, must not be `None`")

        self._workspace_id = workspace_id

    @property
    def workspace_key(self):
        """Gets the workspace_key of this LogAnalytics.

        The workspace key for log analytics

        :return: The workspace_key of this LogAnalytics.
        :rtype: str
        """
        return self._workspace_key

    @workspace_key.setter
    def workspace_key(self, workspace_key):
        """Sets the workspace_key of this LogAnalytics.

        The workspace key for log analytics

        :param workspace_key: The workspace_key of this LogAnalytics.
        :type workspace_key: str
        """
        if workspace_key is None:
            raise ValueError("Invalid value for `workspace_key`, must not be `None`")

        self._workspace_key = workspace_key
