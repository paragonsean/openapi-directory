# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.port import Port
from openapi_server import util


class IpAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dns_name_label: str=None, fqdn: str=None, ip: str=None, ports: List[Port]=None, type: str=None):
        """IpAddress - a model defined in OpenAPI

        :param dns_name_label: The dns_name_label of this IpAddress.
        :param fqdn: The fqdn of this IpAddress.
        :param ip: The ip of this IpAddress.
        :param ports: The ports of this IpAddress.
        :param type: The type of this IpAddress.
        """
        self.openapi_types = {
            'dns_name_label': str,
            'fqdn': str,
            'ip': str,
            'ports': List[Port],
            'type': str
        }

        self.attribute_map = {
            'dns_name_label': 'dnsNameLabel',
            'fqdn': 'fqdn',
            'ip': 'ip',
            'ports': 'ports',
            'type': 'type'
        }

        self._dns_name_label = dns_name_label
        self._fqdn = fqdn
        self._ip = ip
        self._ports = ports
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IpAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IpAddress of this IpAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns_name_label(self):
        """Gets the dns_name_label of this IpAddress.

        The Dns name label for the IP.

        :return: The dns_name_label of this IpAddress.
        :rtype: str
        """
        return self._dns_name_label

    @dns_name_label.setter
    def dns_name_label(self, dns_name_label):
        """Sets the dns_name_label of this IpAddress.

        The Dns name label for the IP.

        :param dns_name_label: The dns_name_label of this IpAddress.
        :type dns_name_label: str
        """

        self._dns_name_label = dns_name_label

    @property
    def fqdn(self):
        """Gets the fqdn of this IpAddress.

        The FQDN for the IP.

        :return: The fqdn of this IpAddress.
        :rtype: str
        """
        return self._fqdn

    @fqdn.setter
    def fqdn(self, fqdn):
        """Sets the fqdn of this IpAddress.

        The FQDN for the IP.

        :param fqdn: The fqdn of this IpAddress.
        :type fqdn: str
        """

        self._fqdn = fqdn

    @property
    def ip(self):
        """Gets the ip of this IpAddress.

        The IP exposed to the public internet.

        :return: The ip of this IpAddress.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this IpAddress.

        The IP exposed to the public internet.

        :param ip: The ip of this IpAddress.
        :type ip: str
        """

        self._ip = ip

    @property
    def ports(self):
        """Gets the ports of this IpAddress.

        The list of ports exposed on the container group.

        :return: The ports of this IpAddress.
        :rtype: List[Port]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this IpAddress.

        The list of ports exposed on the container group.

        :param ports: The ports of this IpAddress.
        :type ports: List[Port]
        """
        if ports is None:
            raise ValueError("Invalid value for `ports`, must not be `None`")

        self._ports = ports

    @property
    def type(self):
        """Gets the type of this IpAddress.

        Specifies if the IP is exposed to the public internet.

        :return: The type of this IpAddress.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IpAddress.

        Specifies if the IP is exposed to the public internet.

        :param type: The type of this IpAddress.
        :type type: str
        """
        allowed_values = ["Public", "Private"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
