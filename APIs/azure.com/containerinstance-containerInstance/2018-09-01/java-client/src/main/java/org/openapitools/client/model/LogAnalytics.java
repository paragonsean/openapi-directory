/*
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Container group log analytics information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:39.357907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LogAnalytics {
  /**
   * The log type to be used.
   */
  @JsonAdapter(LogTypeEnum.Adapter.class)
  public enum LogTypeEnum {
    CONTAINER_INSIGHTS("ContainerInsights"),
    
    CONTAINER_INSTANCE_LOGS("ContainerInstanceLogs");

    private String value;

    LogTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LogTypeEnum fromValue(String value) {
      for (LogTypeEnum b : LogTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LogTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LogTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LogTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LogTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LogTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOG_TYPE = "logType";
  @SerializedName(SERIALIZED_NAME_LOG_TYPE)
  private LogTypeEnum logType;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_WORKSPACE_ID = "workspaceId";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_ID)
  private String workspaceId;

  public static final String SERIALIZED_NAME_WORKSPACE_KEY = "workspaceKey";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_KEY)
  private String workspaceKey;

  public LogAnalytics() {
  }

  public LogAnalytics logType(LogTypeEnum logType) {
    this.logType = logType;
    return this;
  }

  /**
   * The log type to be used.
   * @return logType
   */
  @javax.annotation.Nullable
  public LogTypeEnum getLogType() {
    return logType;
  }

  public void setLogType(LogTypeEnum logType) {
    this.logType = logType;
  }


  public LogAnalytics metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public LogAnalytics putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Metadata for log analytics.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public LogAnalytics workspaceId(String workspaceId) {
    this.workspaceId = workspaceId;
    return this;
  }

  /**
   * The workspace id for log analytics
   * @return workspaceId
   */
  @javax.annotation.Nonnull
  public String getWorkspaceId() {
    return workspaceId;
  }

  public void setWorkspaceId(String workspaceId) {
    this.workspaceId = workspaceId;
  }


  public LogAnalytics workspaceKey(String workspaceKey) {
    this.workspaceKey = workspaceKey;
    return this;
  }

  /**
   * The workspace key for log analytics
   * @return workspaceKey
   */
  @javax.annotation.Nonnull
  public String getWorkspaceKey() {
    return workspaceKey;
  }

  public void setWorkspaceKey(String workspaceKey) {
    this.workspaceKey = workspaceKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogAnalytics logAnalytics = (LogAnalytics) o;
    return Objects.equals(this.logType, logAnalytics.logType) &&
        Objects.equals(this.metadata, logAnalytics.metadata) &&
        Objects.equals(this.workspaceId, logAnalytics.workspaceId) &&
        Objects.equals(this.workspaceKey, logAnalytics.workspaceKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logType, metadata, workspaceId, workspaceKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogAnalytics {\n");
    sb.append("    logType: ").append(toIndentedString(logType)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    workspaceId: ").append(toIndentedString(workspaceId)).append("\n");
    sb.append("    workspaceKey: ").append(toIndentedString(workspaceKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("logType");
    openapiFields.add("metadata");
    openapiFields.add("workspaceId");
    openapiFields.add("workspaceKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("workspaceId");
    openapiRequiredFields.add("workspaceKey");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LogAnalytics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LogAnalytics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LogAnalytics is not found in the empty JSON string", LogAnalytics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LogAnalytics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LogAnalytics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LogAnalytics.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("logType") != null && !jsonObj.get("logType").isJsonNull()) && !jsonObj.get("logType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logType").toString()));
      }
      // validate the optional field `logType`
      if (jsonObj.get("logType") != null && !jsonObj.get("logType").isJsonNull()) {
        LogTypeEnum.validateJsonElement(jsonObj.get("logType"));
      }
      if (!jsonObj.get("workspaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceId").toString()));
      }
      if (!jsonObj.get("workspaceKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LogAnalytics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LogAnalytics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LogAnalytics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LogAnalytics.class));

       return (TypeAdapter<T>) new TypeAdapter<LogAnalytics>() {
           @Override
           public void write(JsonWriter out, LogAnalytics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LogAnalytics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LogAnalytics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LogAnalytics
   * @throws IOException if the JSON string is invalid with respect to LogAnalytics
   */
  public static LogAnalytics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LogAnalytics.class);
  }

  /**
   * Convert an instance of LogAnalytics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

