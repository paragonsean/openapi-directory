/*
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Container;
import org.openapitools.client.model.ContainerGroupAllOfPropertiesInstanceView;
import org.openapitools.client.model.ContainerGroupDiagnostics;
import org.openapitools.client.model.ContainerGroupNetworkProfile;
import org.openapitools.client.model.ImageRegistryCredential;
import org.openapitools.client.model.IpAddress;
import org.openapitools.client.model.Volume;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ContainerGroupAllOfProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:39.357907-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainerGroupAllOfProperties {
  public static final String SERIALIZED_NAME_CONTAINERS = "containers";
  @SerializedName(SERIALIZED_NAME_CONTAINERS)
  private List<Container> containers = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIAGNOSTICS = "diagnostics";
  @SerializedName(SERIALIZED_NAME_DIAGNOSTICS)
  private ContainerGroupDiagnostics diagnostics;

  public static final String SERIALIZED_NAME_IMAGE_REGISTRY_CREDENTIALS = "imageRegistryCredentials";
  @SerializedName(SERIALIZED_NAME_IMAGE_REGISTRY_CREDENTIALS)
  private List<ImageRegistryCredential> imageRegistryCredentials = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTANCE_VIEW = "instanceView";
  @SerializedName(SERIALIZED_NAME_INSTANCE_VIEW)
  private ContainerGroupAllOfPropertiesInstanceView instanceView;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private IpAddress ipAddress;

  public static final String SERIALIZED_NAME_NETWORK_PROFILE = "networkProfile";
  @SerializedName(SERIALIZED_NAME_NETWORK_PROFILE)
  private ContainerGroupNetworkProfile networkProfile;

  /**
   * The operating system type required by the containers in the container group.
   */
  @JsonAdapter(OsTypeEnum.Adapter.class)
  public enum OsTypeEnum {
    WINDOWS("Windows"),
    
    LINUX("Linux");

    private String value;

    OsTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OsTypeEnum fromValue(String value) {
      for (OsTypeEnum b : OsTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OsTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OsTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private OsTypeEnum osType;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  /**
   * Restart policy for all containers within the container group.  - &#x60;Always&#x60; Always restart - &#x60;OnFailure&#x60; Restart on failure - &#x60;Never&#x60; Never restart 
   */
  @JsonAdapter(RestartPolicyEnum.Adapter.class)
  public enum RestartPolicyEnum {
    ALWAYS("Always"),
    
    ON_FAILURE("OnFailure"),
    
    NEVER("Never");

    private String value;

    RestartPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RestartPolicyEnum fromValue(String value) {
      for (RestartPolicyEnum b : RestartPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RestartPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RestartPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RestartPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RestartPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RestartPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESTART_POLICY = "restartPolicy";
  @SerializedName(SERIALIZED_NAME_RESTART_POLICY)
  private RestartPolicyEnum restartPolicy;

  public static final String SERIALIZED_NAME_VOLUMES = "volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private List<Volume> volumes = new ArrayList<>();

  public ContainerGroupAllOfProperties() {
  }

  public ContainerGroupAllOfProperties(
     String provisioningState
  ) {
    this();
    this.provisioningState = provisioningState;
  }

  public ContainerGroupAllOfProperties containers(List<Container> containers) {
    this.containers = containers;
    return this;
  }

  public ContainerGroupAllOfProperties addContainersItem(Container containersItem) {
    if (this.containers == null) {
      this.containers = new ArrayList<>();
    }
    this.containers.add(containersItem);
    return this;
  }

  /**
   * The containers within the container group.
   * @return containers
   */
  @javax.annotation.Nonnull
  public List<Container> getContainers() {
    return containers;
  }

  public void setContainers(List<Container> containers) {
    this.containers = containers;
  }


  public ContainerGroupAllOfProperties diagnostics(ContainerGroupDiagnostics diagnostics) {
    this.diagnostics = diagnostics;
    return this;
  }

  /**
   * Get diagnostics
   * @return diagnostics
   */
  @javax.annotation.Nullable
  public ContainerGroupDiagnostics getDiagnostics() {
    return diagnostics;
  }

  public void setDiagnostics(ContainerGroupDiagnostics diagnostics) {
    this.diagnostics = diagnostics;
  }


  public ContainerGroupAllOfProperties imageRegistryCredentials(List<ImageRegistryCredential> imageRegistryCredentials) {
    this.imageRegistryCredentials = imageRegistryCredentials;
    return this;
  }

  public ContainerGroupAllOfProperties addImageRegistryCredentialsItem(ImageRegistryCredential imageRegistryCredentialsItem) {
    if (this.imageRegistryCredentials == null) {
      this.imageRegistryCredentials = new ArrayList<>();
    }
    this.imageRegistryCredentials.add(imageRegistryCredentialsItem);
    return this;
  }

  /**
   * The image registry credentials by which the container group is created from.
   * @return imageRegistryCredentials
   */
  @javax.annotation.Nullable
  public List<ImageRegistryCredential> getImageRegistryCredentials() {
    return imageRegistryCredentials;
  }

  public void setImageRegistryCredentials(List<ImageRegistryCredential> imageRegistryCredentials) {
    this.imageRegistryCredentials = imageRegistryCredentials;
  }


  public ContainerGroupAllOfProperties instanceView(ContainerGroupAllOfPropertiesInstanceView instanceView) {
    this.instanceView = instanceView;
    return this;
  }

  /**
   * Get instanceView
   * @return instanceView
   */
  @javax.annotation.Nullable
  public ContainerGroupAllOfPropertiesInstanceView getInstanceView() {
    return instanceView;
  }

  public void setInstanceView(ContainerGroupAllOfPropertiesInstanceView instanceView) {
    this.instanceView = instanceView;
  }


  public ContainerGroupAllOfProperties ipAddress(IpAddress ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public IpAddress getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(IpAddress ipAddress) {
    this.ipAddress = ipAddress;
  }


  public ContainerGroupAllOfProperties networkProfile(ContainerGroupNetworkProfile networkProfile) {
    this.networkProfile = networkProfile;
    return this;
  }

  /**
   * Get networkProfile
   * @return networkProfile
   */
  @javax.annotation.Nullable
  public ContainerGroupNetworkProfile getNetworkProfile() {
    return networkProfile;
  }

  public void setNetworkProfile(ContainerGroupNetworkProfile networkProfile) {
    this.networkProfile = networkProfile;
  }


  public ContainerGroupAllOfProperties osType(OsTypeEnum osType) {
    this.osType = osType;
    return this;
  }

  /**
   * The operating system type required by the containers in the container group.
   * @return osType
   */
  @javax.annotation.Nonnull
  public OsTypeEnum getOsType() {
    return osType;
  }

  public void setOsType(OsTypeEnum osType) {
    this.osType = osType;
  }


  /**
   * The provisioning state of the container group. This only appears in the response.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  public ContainerGroupAllOfProperties restartPolicy(RestartPolicyEnum restartPolicy) {
    this.restartPolicy = restartPolicy;
    return this;
  }

  /**
   * Restart policy for all containers within the container group.  - &#x60;Always&#x60; Always restart - &#x60;OnFailure&#x60; Restart on failure - &#x60;Never&#x60; Never restart 
   * @return restartPolicy
   */
  @javax.annotation.Nullable
  public RestartPolicyEnum getRestartPolicy() {
    return restartPolicy;
  }

  public void setRestartPolicy(RestartPolicyEnum restartPolicy) {
    this.restartPolicy = restartPolicy;
  }


  public ContainerGroupAllOfProperties volumes(List<Volume> volumes) {
    this.volumes = volumes;
    return this;
  }

  public ContainerGroupAllOfProperties addVolumesItem(Volume volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

  /**
   * The list of volumes that can be mounted by containers in this container group.
   * @return volumes
   */
  @javax.annotation.Nullable
  public List<Volume> getVolumes() {
    return volumes;
  }

  public void setVolumes(List<Volume> volumes) {
    this.volumes = volumes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerGroupAllOfProperties containerGroupAllOfProperties = (ContainerGroupAllOfProperties) o;
    return Objects.equals(this.containers, containerGroupAllOfProperties.containers) &&
        Objects.equals(this.diagnostics, containerGroupAllOfProperties.diagnostics) &&
        Objects.equals(this.imageRegistryCredentials, containerGroupAllOfProperties.imageRegistryCredentials) &&
        Objects.equals(this.instanceView, containerGroupAllOfProperties.instanceView) &&
        Objects.equals(this.ipAddress, containerGroupAllOfProperties.ipAddress) &&
        Objects.equals(this.networkProfile, containerGroupAllOfProperties.networkProfile) &&
        Objects.equals(this.osType, containerGroupAllOfProperties.osType) &&
        Objects.equals(this.provisioningState, containerGroupAllOfProperties.provisioningState) &&
        Objects.equals(this.restartPolicy, containerGroupAllOfProperties.restartPolicy) &&
        Objects.equals(this.volumes, containerGroupAllOfProperties.volumes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containers, diagnostics, imageRegistryCredentials, instanceView, ipAddress, networkProfile, osType, provisioningState, restartPolicy, volumes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerGroupAllOfProperties {\n");
    sb.append("    containers: ").append(toIndentedString(containers)).append("\n");
    sb.append("    diagnostics: ").append(toIndentedString(diagnostics)).append("\n");
    sb.append("    imageRegistryCredentials: ").append(toIndentedString(imageRegistryCredentials)).append("\n");
    sb.append("    instanceView: ").append(toIndentedString(instanceView)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    networkProfile: ").append(toIndentedString(networkProfile)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    restartPolicy: ").append(toIndentedString(restartPolicy)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containers");
    openapiFields.add("diagnostics");
    openapiFields.add("imageRegistryCredentials");
    openapiFields.add("instanceView");
    openapiFields.add("ipAddress");
    openapiFields.add("networkProfile");
    openapiFields.add("osType");
    openapiFields.add("provisioningState");
    openapiFields.add("restartPolicy");
    openapiFields.add("volumes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("containers");
    openapiRequiredFields.add("osType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainerGroupAllOfProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainerGroupAllOfProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainerGroupAllOfProperties is not found in the empty JSON string", ContainerGroupAllOfProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainerGroupAllOfProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainerGroupAllOfProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContainerGroupAllOfProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("containers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `containers` to be an array in the JSON string but got `%s`", jsonObj.get("containers").toString()));
      }

      JsonArray jsonArraycontainers = jsonObj.getAsJsonArray("containers");
      // validate the required field `containers` (array)
      for (int i = 0; i < jsonArraycontainers.size(); i++) {
        Container.validateJsonElement(jsonArraycontainers.get(i));
      };
      // validate the optional field `diagnostics`
      if (jsonObj.get("diagnostics") != null && !jsonObj.get("diagnostics").isJsonNull()) {
        ContainerGroupDiagnostics.validateJsonElement(jsonObj.get("diagnostics"));
      }
      if (jsonObj.get("imageRegistryCredentials") != null && !jsonObj.get("imageRegistryCredentials").isJsonNull()) {
        JsonArray jsonArrayimageRegistryCredentials = jsonObj.getAsJsonArray("imageRegistryCredentials");
        if (jsonArrayimageRegistryCredentials != null) {
          // ensure the json data is an array
          if (!jsonObj.get("imageRegistryCredentials").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `imageRegistryCredentials` to be an array in the JSON string but got `%s`", jsonObj.get("imageRegistryCredentials").toString()));
          }

          // validate the optional field `imageRegistryCredentials` (array)
          for (int i = 0; i < jsonArrayimageRegistryCredentials.size(); i++) {
            ImageRegistryCredential.validateJsonElement(jsonArrayimageRegistryCredentials.get(i));
          };
        }
      }
      // validate the optional field `instanceView`
      if (jsonObj.get("instanceView") != null && !jsonObj.get("instanceView").isJsonNull()) {
        ContainerGroupAllOfPropertiesInstanceView.validateJsonElement(jsonObj.get("instanceView"));
      }
      // validate the optional field `ipAddress`
      if (jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) {
        IpAddress.validateJsonElement(jsonObj.get("ipAddress"));
      }
      // validate the optional field `networkProfile`
      if (jsonObj.get("networkProfile") != null && !jsonObj.get("networkProfile").isJsonNull()) {
        ContainerGroupNetworkProfile.validateJsonElement(jsonObj.get("networkProfile"));
      }
      if (!jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      // validate the required field `osType`
      OsTypeEnum.validateJsonElement(jsonObj.get("osType"));
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("restartPolicy") != null && !jsonObj.get("restartPolicy").isJsonNull()) && !jsonObj.get("restartPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `restartPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("restartPolicy").toString()));
      }
      // validate the optional field `restartPolicy`
      if (jsonObj.get("restartPolicy") != null && !jsonObj.get("restartPolicy").isJsonNull()) {
        RestartPolicyEnum.validateJsonElement(jsonObj.get("restartPolicy"));
      }
      if (jsonObj.get("volumes") != null && !jsonObj.get("volumes").isJsonNull()) {
        JsonArray jsonArrayvolumes = jsonObj.getAsJsonArray("volumes");
        if (jsonArrayvolumes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumes` to be an array in the JSON string but got `%s`", jsonObj.get("volumes").toString()));
          }

          // validate the optional field `volumes` (array)
          for (int i = 0; i < jsonArrayvolumes.size(); i++) {
            Volume.validateJsonElement(jsonArrayvolumes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainerGroupAllOfProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainerGroupAllOfProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainerGroupAllOfProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainerGroupAllOfProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainerGroupAllOfProperties>() {
           @Override
           public void write(JsonWriter out, ContainerGroupAllOfProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainerGroupAllOfProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainerGroupAllOfProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainerGroupAllOfProperties
   * @throws IOException if the JSON string is invalid with respect to ContainerGroupAllOfProperties
   */
  public static ContainerGroupAllOfProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerGroupAllOfProperties.class);
  }

  /**
   * Convert an instance of ContainerGroupAllOfProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

