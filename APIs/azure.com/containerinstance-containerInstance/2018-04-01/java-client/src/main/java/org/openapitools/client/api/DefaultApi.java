/*
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ContainerExecRequest;
import org.openapitools.client.model.ContainerExecResponse;
import org.openapitools.client.model.ContainerGroup;
import org.openapitools.client.model.ContainerGroupListResult;
import org.openapitools.client.model.Logs;
import org.openapitools.client.model.Resource;
import org.openapitools.client.model.UsageListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for containerGroupUsageList
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location The identifier for the physical azure location. (required)
     * @param apiVersion Client API version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containerGroupUsageListCall(String subscriptionId, String location, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/locations/{location}/usages"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call containerGroupUsageListValidateBeforeCall(String subscriptionId, String location, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling containerGroupUsageList(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling containerGroupUsageList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling containerGroupUsageList(Async)");
        }

        return containerGroupUsageListCall(subscriptionId, location, apiVersion, _callback);

    }

    /**
     * 
     * Get the usage for a subscription
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location The identifier for the physical azure location. (required)
     * @param apiVersion Client API version (required)
     * @return UsageListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UsageListResult containerGroupUsageList(String subscriptionId, String location, String apiVersion) throws ApiException {
        ApiResponse<UsageListResult> localVarResp = containerGroupUsageListWithHttpInfo(subscriptionId, location, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the usage for a subscription
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location The identifier for the physical azure location. (required)
     * @param apiVersion Client API version (required)
     * @return ApiResponse&lt;UsageListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsageListResult> containerGroupUsageListWithHttpInfo(String subscriptionId, String location, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = containerGroupUsageListValidateBeforeCall(subscriptionId, location, apiVersion, null);
        Type localVarReturnType = new TypeToken<UsageListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the usage for a subscription
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param location The identifier for the physical azure location. (required)
     * @param apiVersion Client API version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containerGroupUsageListAsync(String subscriptionId, String location, String apiVersion, final ApiCallback<UsageListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = containerGroupUsageListValidateBeforeCall(subscriptionId, location, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<UsageListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for containerGroupsCreateOrUpdate
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @param containerGroup The properties of the container group to be created or updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - the container group is created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containerGroupsCreateOrUpdateCall(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, ContainerGroup containerGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = containerGroup;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "containerGroupName" + "}", localVarApiClient.escapeString(containerGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call containerGroupsCreateOrUpdateValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, ContainerGroup containerGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling containerGroupsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling containerGroupsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling containerGroupsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'containerGroupName' is set
        if (containerGroupName == null) {
            throw new ApiException("Missing the required parameter 'containerGroupName' when calling containerGroupsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'containerGroup' is set
        if (containerGroup == null) {
            throw new ApiException("Missing the required parameter 'containerGroup' when calling containerGroupsCreateOrUpdate(Async)");
        }

        return containerGroupsCreateOrUpdateCall(subscriptionId, apiVersion, resourceGroupName, containerGroupName, containerGroup, _callback);

    }

    /**
     * Create or update container groups.
     * Create or update container groups with specified configurations.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @param containerGroup The properties of the container group to be created or updated. (required)
     * @return ContainerGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - the container group is created. </td><td>  -  </td></tr>
     </table>
     */
    public ContainerGroup containerGroupsCreateOrUpdate(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, ContainerGroup containerGroup) throws ApiException {
        ApiResponse<ContainerGroup> localVarResp = containerGroupsCreateOrUpdateWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, containerGroupName, containerGroup);
        return localVarResp.getData();
    }

    /**
     * Create or update container groups.
     * Create or update container groups with specified configurations.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @param containerGroup The properties of the container group to be created or updated. (required)
     * @return ApiResponse&lt;ContainerGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - the container group is created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContainerGroup> containerGroupsCreateOrUpdateWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, ContainerGroup containerGroup) throws ApiException {
        okhttp3.Call localVarCall = containerGroupsCreateOrUpdateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, containerGroupName, containerGroup, null);
        Type localVarReturnType = new TypeToken<ContainerGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update container groups. (asynchronously)
     * Create or update container groups with specified configurations.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @param containerGroup The properties of the container group to be created or updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - the container group is created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containerGroupsCreateOrUpdateAsync(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, ContainerGroup containerGroup, final ApiCallback<ContainerGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = containerGroupsCreateOrUpdateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, containerGroupName, containerGroup, _callback);
        Type localVarReturnType = new TypeToken<ContainerGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for containerGroupsDelete
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified container group was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containerGroupsDeleteCall(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "containerGroupName" + "}", localVarApiClient.escapeString(containerGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call containerGroupsDeleteValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling containerGroupsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling containerGroupsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling containerGroupsDelete(Async)");
        }

        // verify the required parameter 'containerGroupName' is set
        if (containerGroupName == null) {
            throw new ApiException("Missing the required parameter 'containerGroupName' when calling containerGroupsDelete(Async)");
        }

        return containerGroupsDeleteCall(subscriptionId, apiVersion, resourceGroupName, containerGroupName, _callback);

    }

    /**
     * Delete the specified container group.
     * Delete the specified container group in the specified subscription and resource group. The operation does not delete other resources provided by the user, such as volumes.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @return ContainerGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified container group was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ContainerGroup containerGroupsDelete(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName) throws ApiException {
        ApiResponse<ContainerGroup> localVarResp = containerGroupsDeleteWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, containerGroupName);
        return localVarResp.getData();
    }

    /**
     * Delete the specified container group.
     * Delete the specified container group in the specified subscription and resource group. The operation does not delete other resources provided by the user, such as volumes.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @return ApiResponse&lt;ContainerGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified container group was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContainerGroup> containerGroupsDeleteWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName) throws ApiException {
        okhttp3.Call localVarCall = containerGroupsDeleteValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, containerGroupName, null);
        Type localVarReturnType = new TypeToken<ContainerGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete the specified container group. (asynchronously)
     * Delete the specified container group in the specified subscription and resource group. The operation does not delete other resources provided by the user, such as volumes.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified container group was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containerGroupsDeleteAsync(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, final ApiCallback<ContainerGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = containerGroupsDeleteValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, containerGroupName, _callback);
        Type localVarReturnType = new TypeToken<ContainerGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for containerGroupsGet
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containerGroupsGetCall(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "containerGroupName" + "}", localVarApiClient.escapeString(containerGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call containerGroupsGetValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling containerGroupsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling containerGroupsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling containerGroupsGet(Async)");
        }

        // verify the required parameter 'containerGroupName' is set
        if (containerGroupName == null) {
            throw new ApiException("Missing the required parameter 'containerGroupName' when calling containerGroupsGet(Async)");
        }

        return containerGroupsGetCall(subscriptionId, apiVersion, resourceGroupName, containerGroupName, _callback);

    }

    /**
     * Get the properties of the specified container group.
     * Gets the properties of the specified container group in the specified subscription and resource group. The operation returns the properties of each container group including containers, image registry credentials, restart policy, IP address type, OS type, state, and volumes.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @return ContainerGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ContainerGroup containerGroupsGet(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName) throws ApiException {
        ApiResponse<ContainerGroup> localVarResp = containerGroupsGetWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, containerGroupName);
        return localVarResp.getData();
    }

    /**
     * Get the properties of the specified container group.
     * Gets the properties of the specified container group in the specified subscription and resource group. The operation returns the properties of each container group including containers, image registry credentials, restart policy, IP address type, OS type, state, and volumes.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @return ApiResponse&lt;ContainerGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContainerGroup> containerGroupsGetWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName) throws ApiException {
        okhttp3.Call localVarCall = containerGroupsGetValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, containerGroupName, null);
        Type localVarReturnType = new TypeToken<ContainerGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the properties of the specified container group. (asynchronously)
     * Gets the properties of the specified container group in the specified subscription and resource group. The operation returns the properties of each container group including containers, image registry credentials, restart policy, IP address type, OS type, state, and volumes.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containerGroupsGetAsync(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, final ApiCallback<ContainerGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = containerGroupsGetValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, containerGroupName, _callback);
        Type localVarReturnType = new TypeToken<ContainerGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for containerGroupsList
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containerGroupsListCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerInstance/containerGroups"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call containerGroupsListValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling containerGroupsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling containerGroupsList(Async)");
        }

        return containerGroupsListCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * Get a list of container groups in the specified subscription.
     * Get a list of container groups in the specified subscription. This operation returns properties of each container group including containers, image registry credentials, restart policy, IP address type, OS type, state, and volumes.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @return ContainerGroupListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ContainerGroupListResult containerGroupsList(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ContainerGroupListResult> localVarResp = containerGroupsListWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a list of container groups in the specified subscription.
     * Get a list of container groups in the specified subscription. This operation returns properties of each container group including containers, image registry credentials, restart policy, IP address type, OS type, state, and volumes.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @return ApiResponse&lt;ContainerGroupListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContainerGroupListResult> containerGroupsListWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = containerGroupsListValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ContainerGroupListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of container groups in the specified subscription. (asynchronously)
     * Get a list of container groups in the specified subscription. This operation returns properties of each container group including containers, image registry credentials, restart policy, IP address type, OS type, state, and volumes.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containerGroupsListAsync(String subscriptionId, String apiVersion, final ApiCallback<ContainerGroupListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = containerGroupsListValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ContainerGroupListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for containerGroupsListByResourceGroup
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containerGroupsListByResourceGroupCall(String subscriptionId, String apiVersion, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call containerGroupsListByResourceGroupValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling containerGroupsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling containerGroupsListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling containerGroupsListByResourceGroup(Async)");
        }

        return containerGroupsListByResourceGroupCall(subscriptionId, apiVersion, resourceGroupName, _callback);

    }

    /**
     * Get a list of container groups in the specified subscription and resource group.
     * Get a list of container groups in a specified subscription and resource group. This operation returns properties of each container group including containers, image registry credentials, restart policy, IP address type, OS type, state, and volumes.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @return ContainerGroupListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ContainerGroupListResult containerGroupsListByResourceGroup(String subscriptionId, String apiVersion, String resourceGroupName) throws ApiException {
        ApiResponse<ContainerGroupListResult> localVarResp = containerGroupsListByResourceGroupWithHttpInfo(subscriptionId, apiVersion, resourceGroupName);
        return localVarResp.getData();
    }

    /**
     * Get a list of container groups in the specified subscription and resource group.
     * Get a list of container groups in a specified subscription and resource group. This operation returns properties of each container group including containers, image registry credentials, restart policy, IP address type, OS type, state, and volumes.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @return ApiResponse&lt;ContainerGroupListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContainerGroupListResult> containerGroupsListByResourceGroupWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName) throws ApiException {
        okhttp3.Call localVarCall = containerGroupsListByResourceGroupValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, null);
        Type localVarReturnType = new TypeToken<ContainerGroupListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of container groups in the specified subscription and resource group. (asynchronously)
     * Get a list of container groups in a specified subscription and resource group. This operation returns properties of each container group including containers, image registry credentials, restart policy, IP address type, OS type, state, and volumes.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containerGroupsListByResourceGroupAsync(String subscriptionId, String apiVersion, String resourceGroupName, final ApiCallback<ContainerGroupListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = containerGroupsListByResourceGroupValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, _callback);
        Type localVarReturnType = new TypeToken<ContainerGroupListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for containerGroupsUpdate
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @param resource The container group resource with just the tags to be updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containerGroupsUpdateCall(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, Resource resource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resource;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "containerGroupName" + "}", localVarApiClient.escapeString(containerGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call containerGroupsUpdateValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, Resource resource, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling containerGroupsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling containerGroupsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling containerGroupsUpdate(Async)");
        }

        // verify the required parameter 'containerGroupName' is set
        if (containerGroupName == null) {
            throw new ApiException("Missing the required parameter 'containerGroupName' when calling containerGroupsUpdate(Async)");
        }

        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling containerGroupsUpdate(Async)");
        }

        return containerGroupsUpdateCall(subscriptionId, apiVersion, resourceGroupName, containerGroupName, resource, _callback);

    }

    /**
     * Update container groups.
     * Updates container group tags with specified values.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @param resource The container group resource with just the tags to be updated. (required)
     * @return ContainerGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ContainerGroup containerGroupsUpdate(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, Resource resource) throws ApiException {
        ApiResponse<ContainerGroup> localVarResp = containerGroupsUpdateWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, containerGroupName, resource);
        return localVarResp.getData();
    }

    /**
     * Update container groups.
     * Updates container group tags with specified values.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @param resource The container group resource with just the tags to be updated. (required)
     * @return ApiResponse&lt;ContainerGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContainerGroup> containerGroupsUpdateWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, Resource resource) throws ApiException {
        okhttp3.Call localVarCall = containerGroupsUpdateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, containerGroupName, resource, null);
        Type localVarReturnType = new TypeToken<ContainerGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update container groups. (asynchronously)
     * Updates container group tags with specified values.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @param resource The container group resource with just the tags to be updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containerGroupsUpdateAsync(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, Resource resource, final ApiCallback<ContainerGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = containerGroupsUpdateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, containerGroupName, resource, _callback);
        Type localVarReturnType = new TypeToken<ContainerGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for containerLogsList
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @param containerName The name of the container instance. (required)
     * @param tail The number of lines to show from the tail of the container instance log. If not provided, all available logs are shown up to 4mb. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containerLogsListCall(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, String containerName, Integer tail, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/containers/{containerName}/logs"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "containerGroupName" + "}", localVarApiClient.escapeString(containerGroupName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (tail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tail", tail));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call containerLogsListValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, String containerName, Integer tail, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling containerLogsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling containerLogsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling containerLogsList(Async)");
        }

        // verify the required parameter 'containerGroupName' is set
        if (containerGroupName == null) {
            throw new ApiException("Missing the required parameter 'containerGroupName' when calling containerLogsList(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling containerLogsList(Async)");
        }

        return containerLogsListCall(subscriptionId, apiVersion, resourceGroupName, containerGroupName, containerName, tail, _callback);

    }

    /**
     * Get the logs for a specified container instance.
     * Get the logs for a specified container instance in a specified resource group and container group.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @param containerName The name of the container instance. (required)
     * @param tail The number of lines to show from the tail of the container instance log. If not provided, all available logs are shown up to 4mb. (optional)
     * @return Logs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Logs containerLogsList(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, String containerName, Integer tail) throws ApiException {
        ApiResponse<Logs> localVarResp = containerLogsListWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, containerGroupName, containerName, tail);
        return localVarResp.getData();
    }

    /**
     * Get the logs for a specified container instance.
     * Get the logs for a specified container instance in a specified resource group and container group.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @param containerName The name of the container instance. (required)
     * @param tail The number of lines to show from the tail of the container instance log. If not provided, all available logs are shown up to 4mb. (optional)
     * @return ApiResponse&lt;Logs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Logs> containerLogsListWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, String containerName, Integer tail) throws ApiException {
        okhttp3.Call localVarCall = containerLogsListValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, containerGroupName, containerName, tail, null);
        Type localVarReturnType = new TypeToken<Logs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the logs for a specified container instance. (asynchronously)
     * Get the logs for a specified container instance in a specified resource group and container group.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @param containerName The name of the container instance. (required)
     * @param tail The number of lines to show from the tail of the container instance log. If not provided, all available logs are shown up to 4mb. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containerLogsListAsync(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, String containerName, Integer tail, final ApiCallback<Logs> _callback) throws ApiException {

        okhttp3.Call localVarCall = containerLogsListValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, containerGroupName, containerName, tail, _callback);
        Type localVarReturnType = new TypeToken<Logs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startContainerLaunchExec
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @param containerName The name of the container instance. (required)
     * @param containerExecRequest The request for the exec command. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startContainerLaunchExecCall(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, String containerName, ContainerExecRequest containerExecRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = containerExecRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerInstance/containerGroups/{containerGroupName}/containers/{containerName}/exec"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "containerGroupName" + "}", localVarApiClient.escapeString(containerGroupName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startContainerLaunchExecValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, String containerName, ContainerExecRequest containerExecRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling startContainerLaunchExec(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling startContainerLaunchExec(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling startContainerLaunchExec(Async)");
        }

        // verify the required parameter 'containerGroupName' is set
        if (containerGroupName == null) {
            throw new ApiException("Missing the required parameter 'containerGroupName' when calling startContainerLaunchExec(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling startContainerLaunchExec(Async)");
        }

        // verify the required parameter 'containerExecRequest' is set
        if (containerExecRequest == null) {
            throw new ApiException("Missing the required parameter 'containerExecRequest' when calling startContainerLaunchExec(Async)");
        }

        return startContainerLaunchExecCall(subscriptionId, apiVersion, resourceGroupName, containerGroupName, containerName, containerExecRequest, _callback);

    }

    /**
     * Starts the exec command for a specific container instance.
     * Starts the exec command for a specified container instance in a specified resource group and container group.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @param containerName The name of the container instance. (required)
     * @param containerExecRequest The request for the exec command. (required)
     * @return ContainerExecResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ContainerExecResponse startContainerLaunchExec(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, String containerName, ContainerExecRequest containerExecRequest) throws ApiException {
        ApiResponse<ContainerExecResponse> localVarResp = startContainerLaunchExecWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, containerGroupName, containerName, containerExecRequest);
        return localVarResp.getData();
    }

    /**
     * Starts the exec command for a specific container instance.
     * Starts the exec command for a specified container instance in a specified resource group and container group.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @param containerName The name of the container instance. (required)
     * @param containerExecRequest The request for the exec command. (required)
     * @return ApiResponse&lt;ContainerExecResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContainerExecResponse> startContainerLaunchExecWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, String containerName, ContainerExecRequest containerExecRequest) throws ApiException {
        okhttp3.Call localVarCall = startContainerLaunchExecValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, containerGroupName, containerName, containerExecRequest, null);
        Type localVarReturnType = new TypeToken<ContainerExecResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Starts the exec command for a specific container instance. (asynchronously)
     * Starts the exec command for a specified container instance in a specified resource group and container group.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param containerGroupName The name of the container group. (required)
     * @param containerName The name of the container instance. (required)
     * @param containerExecRequest The request for the exec command. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startContainerLaunchExecAsync(String subscriptionId, String apiVersion, String resourceGroupName, String containerGroupName, String containerName, ContainerExecRequest containerExecRequest, final ApiCallback<ContainerExecResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = startContainerLaunchExecValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, containerGroupName, containerName, containerExecRequest, _callback);
        Type localVarReturnType = new TypeToken<ContainerExecResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
