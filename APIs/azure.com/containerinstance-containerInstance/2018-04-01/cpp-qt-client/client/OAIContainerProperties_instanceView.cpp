/**
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerProperties_instanceView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerProperties_instanceView::OAIContainerProperties_instanceView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerProperties_instanceView::OAIContainerProperties_instanceView() {
    this->initializeModel();
}

OAIContainerProperties_instanceView::~OAIContainerProperties_instanceView() {}

void OAIContainerProperties_instanceView::initializeModel() {

    m_current_state_isSet = false;
    m_current_state_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_previous_state_isSet = false;
    m_previous_state_isValid = false;

    m_restart_count_isSet = false;
    m_restart_count_isValid = false;
}

void OAIContainerProperties_instanceView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerProperties_instanceView::fromJsonObject(QJsonObject json) {

    m_current_state_isValid = ::OpenAPI::fromJsonValue(m_current_state, json[QString("currentState")]);
    m_current_state_isSet = !json[QString("currentState")].isNull() && m_current_state_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_previous_state_isValid = ::OpenAPI::fromJsonValue(m_previous_state, json[QString("previousState")]);
    m_previous_state_isSet = !json[QString("previousState")].isNull() && m_previous_state_isValid;

    m_restart_count_isValid = ::OpenAPI::fromJsonValue(m_restart_count, json[QString("restartCount")]);
    m_restart_count_isSet = !json[QString("restartCount")].isNull() && m_restart_count_isValid;
}

QString OAIContainerProperties_instanceView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerProperties_instanceView::asJsonObject() const {
    QJsonObject obj;
    if (m_current_state.isSet()) {
        obj.insert(QString("currentState"), ::OpenAPI::toJsonValue(m_current_state));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_previous_state.isSet()) {
        obj.insert(QString("previousState"), ::OpenAPI::toJsonValue(m_previous_state));
    }
    if (m_restart_count_isSet) {
        obj.insert(QString("restartCount"), ::OpenAPI::toJsonValue(m_restart_count));
    }
    return obj;
}

OAIContainerState OAIContainerProperties_instanceView::getCurrentState() const {
    return m_current_state;
}
void OAIContainerProperties_instanceView::setCurrentState(const OAIContainerState &current_state) {
    m_current_state = current_state;
    m_current_state_isSet = true;
}

bool OAIContainerProperties_instanceView::is_current_state_Set() const{
    return m_current_state_isSet;
}

bool OAIContainerProperties_instanceView::is_current_state_Valid() const{
    return m_current_state_isValid;
}

QList<OAIEvent> OAIContainerProperties_instanceView::getEvents() const {
    return m_events;
}
void OAIContainerProperties_instanceView::setEvents(const QList<OAIEvent> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIContainerProperties_instanceView::is_events_Set() const{
    return m_events_isSet;
}

bool OAIContainerProperties_instanceView::is_events_Valid() const{
    return m_events_isValid;
}

OAIContainerState OAIContainerProperties_instanceView::getPreviousState() const {
    return m_previous_state;
}
void OAIContainerProperties_instanceView::setPreviousState(const OAIContainerState &previous_state) {
    m_previous_state = previous_state;
    m_previous_state_isSet = true;
}

bool OAIContainerProperties_instanceView::is_previous_state_Set() const{
    return m_previous_state_isSet;
}

bool OAIContainerProperties_instanceView::is_previous_state_Valid() const{
    return m_previous_state_isValid;
}

qint32 OAIContainerProperties_instanceView::getRestartCount() const {
    return m_restart_count;
}
void OAIContainerProperties_instanceView::setRestartCount(const qint32 &restart_count) {
    m_restart_count = restart_count;
    m_restart_count_isSet = true;
}

bool OAIContainerProperties_instanceView::is_restart_count_Set() const{
    return m_restart_count_isSet;
}

bool OAIContainerProperties_instanceView::is_restart_count_Valid() const{
    return m_restart_count_isValid;
}

bool OAIContainerProperties_instanceView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restart_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerProperties_instanceView::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
