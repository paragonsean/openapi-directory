/**
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerGroup_allOf_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerGroup_allOf_properties::OAIContainerGroup_allOf_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerGroup_allOf_properties::OAIContainerGroup_allOf_properties() {
    this->initializeModel();
}

OAIContainerGroup_allOf_properties::~OAIContainerGroup_allOf_properties() {}

void OAIContainerGroup_allOf_properties::initializeModel() {

    m_containers_isSet = false;
    m_containers_isValid = false;

    m_image_registry_credentials_isSet = false;
    m_image_registry_credentials_isValid = false;

    m_instance_view_isSet = false;
    m_instance_view_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_restart_policy_isSet = false;
    m_restart_policy_isValid = false;

    m_volumes_isSet = false;
    m_volumes_isValid = false;
}

void OAIContainerGroup_allOf_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerGroup_allOf_properties::fromJsonObject(QJsonObject json) {

    m_containers_isValid = ::OpenAPI::fromJsonValue(m_containers, json[QString("containers")]);
    m_containers_isSet = !json[QString("containers")].isNull() && m_containers_isValid;

    m_image_registry_credentials_isValid = ::OpenAPI::fromJsonValue(m_image_registry_credentials, json[QString("imageRegistryCredentials")]);
    m_image_registry_credentials_isSet = !json[QString("imageRegistryCredentials")].isNull() && m_image_registry_credentials_isValid;

    m_instance_view_isValid = ::OpenAPI::fromJsonValue(m_instance_view, json[QString("instanceView")]);
    m_instance_view_isSet = !json[QString("instanceView")].isNull() && m_instance_view_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_restart_policy_isValid = ::OpenAPI::fromJsonValue(m_restart_policy, json[QString("restartPolicy")]);
    m_restart_policy_isSet = !json[QString("restartPolicy")].isNull() && m_restart_policy_isValid;

    m_volumes_isValid = ::OpenAPI::fromJsonValue(m_volumes, json[QString("volumes")]);
    m_volumes_isSet = !json[QString("volumes")].isNull() && m_volumes_isValid;
}

QString OAIContainerGroup_allOf_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerGroup_allOf_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_containers.size() > 0) {
        obj.insert(QString("containers"), ::OpenAPI::toJsonValue(m_containers));
    }
    if (m_image_registry_credentials.size() > 0) {
        obj.insert(QString("imageRegistryCredentials"), ::OpenAPI::toJsonValue(m_image_registry_credentials));
    }
    if (m_instance_view.isSet()) {
        obj.insert(QString("instanceView"), ::OpenAPI::toJsonValue(m_instance_view));
    }
    if (m_ip_address.isSet()) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_restart_policy_isSet) {
        obj.insert(QString("restartPolicy"), ::OpenAPI::toJsonValue(m_restart_policy));
    }
    if (m_volumes.size() > 0) {
        obj.insert(QString("volumes"), ::OpenAPI::toJsonValue(m_volumes));
    }
    return obj;
}

QList<OAIContainer> OAIContainerGroup_allOf_properties::getContainers() const {
    return m_containers;
}
void OAIContainerGroup_allOf_properties::setContainers(const QList<OAIContainer> &containers) {
    m_containers = containers;
    m_containers_isSet = true;
}

bool OAIContainerGroup_allOf_properties::is_containers_Set() const{
    return m_containers_isSet;
}

bool OAIContainerGroup_allOf_properties::is_containers_Valid() const{
    return m_containers_isValid;
}

QList<OAIImageRegistryCredential> OAIContainerGroup_allOf_properties::getImageRegistryCredentials() const {
    return m_image_registry_credentials;
}
void OAIContainerGroup_allOf_properties::setImageRegistryCredentials(const QList<OAIImageRegistryCredential> &image_registry_credentials) {
    m_image_registry_credentials = image_registry_credentials;
    m_image_registry_credentials_isSet = true;
}

bool OAIContainerGroup_allOf_properties::is_image_registry_credentials_Set() const{
    return m_image_registry_credentials_isSet;
}

bool OAIContainerGroup_allOf_properties::is_image_registry_credentials_Valid() const{
    return m_image_registry_credentials_isValid;
}

OAIContainerGroup_allOf_properties_instanceView OAIContainerGroup_allOf_properties::getInstanceView() const {
    return m_instance_view;
}
void OAIContainerGroup_allOf_properties::setInstanceView(const OAIContainerGroup_allOf_properties_instanceView &instance_view) {
    m_instance_view = instance_view;
    m_instance_view_isSet = true;
}

bool OAIContainerGroup_allOf_properties::is_instance_view_Set() const{
    return m_instance_view_isSet;
}

bool OAIContainerGroup_allOf_properties::is_instance_view_Valid() const{
    return m_instance_view_isValid;
}

OAIIpAddress OAIContainerGroup_allOf_properties::getIpAddress() const {
    return m_ip_address;
}
void OAIContainerGroup_allOf_properties::setIpAddress(const OAIIpAddress &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIContainerGroup_allOf_properties::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIContainerGroup_allOf_properties::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIContainerGroup_allOf_properties::getOsType() const {
    return m_os_type;
}
void OAIContainerGroup_allOf_properties::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIContainerGroup_allOf_properties::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIContainerGroup_allOf_properties::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAIContainerGroup_allOf_properties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIContainerGroup_allOf_properties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIContainerGroup_allOf_properties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIContainerGroup_allOf_properties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIContainerGroup_allOf_properties::getRestartPolicy() const {
    return m_restart_policy;
}
void OAIContainerGroup_allOf_properties::setRestartPolicy(const QString &restart_policy) {
    m_restart_policy = restart_policy;
    m_restart_policy_isSet = true;
}

bool OAIContainerGroup_allOf_properties::is_restart_policy_Set() const{
    return m_restart_policy_isSet;
}

bool OAIContainerGroup_allOf_properties::is_restart_policy_Valid() const{
    return m_restart_policy_isValid;
}

QList<OAIVolume> OAIContainerGroup_allOf_properties::getVolumes() const {
    return m_volumes;
}
void OAIContainerGroup_allOf_properties::setVolumes(const QList<OAIVolume> &volumes) {
    m_volumes = volumes;
    m_volumes_isSet = true;
}

bool OAIContainerGroup_allOf_properties::is_volumes_Set() const{
    return m_volumes_isSet;
}

bool OAIContainerGroup_allOf_properties::is_volumes_Valid() const{
    return m_volumes_isValid;
}

bool OAIContainerGroup_allOf_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_containers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_registry_credentials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_view.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restart_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerGroup_allOf_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_containers_isValid && m_os_type_isValid && true;
}

} // namespace OpenAPI
