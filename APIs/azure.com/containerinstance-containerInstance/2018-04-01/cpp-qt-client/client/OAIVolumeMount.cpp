/**
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolumeMount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolumeMount::OAIVolumeMount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolumeMount::OAIVolumeMount() {
    this->initializeModel();
}

OAIVolumeMount::~OAIVolumeMount() {}

void OAIVolumeMount::initializeModel() {

    m_mount_path_isSet = false;
    m_mount_path_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;
}

void OAIVolumeMount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolumeMount::fromJsonObject(QJsonObject json) {

    m_mount_path_isValid = ::OpenAPI::fromJsonValue(m_mount_path, json[QString("mountPath")]);
    m_mount_path_isSet = !json[QString("mountPath")].isNull() && m_mount_path_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("readOnly")]);
    m_read_only_isSet = !json[QString("readOnly")].isNull() && m_read_only_isValid;
}

QString OAIVolumeMount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolumeMount::asJsonObject() const {
    QJsonObject obj;
    if (m_mount_path_isSet) {
        obj.insert(QString("mountPath"), ::OpenAPI::toJsonValue(m_mount_path));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("readOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    return obj;
}

QString OAIVolumeMount::getMountPath() const {
    return m_mount_path;
}
void OAIVolumeMount::setMountPath(const QString &mount_path) {
    m_mount_path = mount_path;
    m_mount_path_isSet = true;
}

bool OAIVolumeMount::is_mount_path_Set() const{
    return m_mount_path_isSet;
}

bool OAIVolumeMount::is_mount_path_Valid() const{
    return m_mount_path_isValid;
}

QString OAIVolumeMount::getName() const {
    return m_name;
}
void OAIVolumeMount::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVolumeMount::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVolumeMount::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIVolumeMount::isReadOnly() const {
    return m_read_only;
}
void OAIVolumeMount::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAIVolumeMount::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAIVolumeMount::is_read_only_Valid() const{
    return m_read_only_isValid;
}

bool OAIVolumeMount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mount_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolumeMount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mount_path_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
