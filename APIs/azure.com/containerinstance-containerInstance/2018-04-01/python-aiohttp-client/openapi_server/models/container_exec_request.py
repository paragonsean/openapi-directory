# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_exec_request_terminal_size import ContainerExecRequestTerminalSize
from openapi_server import util


class ContainerExecRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command: str=None, terminal_size: ContainerExecRequestTerminalSize=None):
        """ContainerExecRequest - a model defined in OpenAPI

        :param command: The command of this ContainerExecRequest.
        :param terminal_size: The terminal_size of this ContainerExecRequest.
        """
        self.openapi_types = {
            'command': str,
            'terminal_size': ContainerExecRequestTerminalSize
        }

        self.attribute_map = {
            'command': 'command',
            'terminal_size': 'terminalSize'
        }

        self._command = command
        self._terminal_size = terminal_size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerExecRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerExecRequest of this ContainerExecRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command(self):
        """Gets the command of this ContainerExecRequest.

        The command to be executed.

        :return: The command of this ContainerExecRequest.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this ContainerExecRequest.

        The command to be executed.

        :param command: The command of this ContainerExecRequest.
        :type command: str
        """

        self._command = command

    @property
    def terminal_size(self):
        """Gets the terminal_size of this ContainerExecRequest.


        :return: The terminal_size of this ContainerExecRequest.
        :rtype: ContainerExecRequestTerminalSize
        """
        return self._terminal_size

    @terminal_size.setter
    def terminal_size(self, terminal_size):
        """Sets the terminal_size of this ContainerExecRequest.


        :param terminal_size: The terminal_size of this ContainerExecRequest.
        :type terminal_size: ContainerExecRequestTerminalSize
        """

        self._terminal_size = terminal_size
