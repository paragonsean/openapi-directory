# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Port(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, port: int=None, protocol: str=None):
        """Port - a model defined in OpenAPI

        :param port: The port of this Port.
        :param protocol: The protocol of this Port.
        """
        self.openapi_types = {
            'port': int,
            'protocol': str
        }

        self.attribute_map = {
            'port': 'port',
            'protocol': 'protocol'
        }

        self._port = port
        self._protocol = protocol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Port':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Port of this Port.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def port(self):
        """Gets the port of this Port.

        The port number.

        :return: The port of this Port.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Port.

        The port number.

        :param port: The port of this Port.
        :type port: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")

        self._port = port

    @property
    def protocol(self):
        """Gets the protocol of this Port.

        The protocol associated with the port.

        :return: The protocol of this Port.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Port.

        The protocol associated with the port.

        :param protocol: The protocol of this Port.
        :type protocol: str
        """
        allowed_values = ["TCP", "UDP"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol
