/**
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LogAnalytics model module.
 * @module model/LogAnalytics
 * @version 2018-10-01
 */
class LogAnalytics {
    /**
     * Constructs a new <code>LogAnalytics</code>.
     * Container group log analytics information.
     * @alias module:model/LogAnalytics
     * @param workspaceId {String} The workspace id for log analytics
     * @param workspaceKey {String} The workspace key for log analytics
     */
    constructor(workspaceId, workspaceKey) { 
        
        LogAnalytics.initialize(this, workspaceId, workspaceKey);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, workspaceId, workspaceKey) { 
        obj['workspaceId'] = workspaceId;
        obj['workspaceKey'] = workspaceKey;
    }

    /**
     * Constructs a <code>LogAnalytics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogAnalytics} obj Optional instance to populate.
     * @return {module:model/LogAnalytics} The populated <code>LogAnalytics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogAnalytics();

            if (data.hasOwnProperty('logType')) {
                obj['logType'] = ApiClient.convertToType(data['logType'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('workspaceId')) {
                obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');
            }
            if (data.hasOwnProperty('workspaceKey')) {
                obj['workspaceKey'] = ApiClient.convertToType(data['workspaceKey'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogAnalytics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogAnalytics</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LogAnalytics.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['logType'] && !(typeof data['logType'] === 'string' || data['logType'] instanceof String)) {
            throw new Error("Expected the field `logType` to be a primitive type in the JSON string but got " + data['logType']);
        }
        // ensure the json data is a string
        if (data['workspaceId'] && !(typeof data['workspaceId'] === 'string' || data['workspaceId'] instanceof String)) {
            throw new Error("Expected the field `workspaceId` to be a primitive type in the JSON string but got " + data['workspaceId']);
        }
        // ensure the json data is a string
        if (data['workspaceKey'] && !(typeof data['workspaceKey'] === 'string' || data['workspaceKey'] instanceof String)) {
            throw new Error("Expected the field `workspaceKey` to be a primitive type in the JSON string but got " + data['workspaceKey']);
        }

        return true;
    }


}

LogAnalytics.RequiredProperties = ["workspaceId", "workspaceKey"];

/**
 * The log type to be used.
 * @member {module:model/LogAnalytics.LogTypeEnum} logType
 */
LogAnalytics.prototype['logType'] = undefined;

/**
 * Metadata for log analytics.
 * @member {Object.<String, String>} metadata
 */
LogAnalytics.prototype['metadata'] = undefined;

/**
 * The workspace id for log analytics
 * @member {String} workspaceId
 */
LogAnalytics.prototype['workspaceId'] = undefined;

/**
 * The workspace key for log analytics
 * @member {String} workspaceKey
 */
LogAnalytics.prototype['workspaceKey'] = undefined;





/**
 * Allowed values for the <code>logType</code> property.
 * @enum {String}
 * @readonly
 */
LogAnalytics['LogTypeEnum'] = {

    /**
     * value: "ContainerInsights"
     * @const
     */
    "ContainerInsights": "ContainerInsights",

    /**
     * value: "ContainerInstanceLogs"
     * @const
     */
    "ContainerInstanceLogs": "ContainerInstanceLogs"
};



export default LogAnalytics;

