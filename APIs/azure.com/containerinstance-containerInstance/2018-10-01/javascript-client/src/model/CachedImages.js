/**
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CachedImages model module.
 * @module model/CachedImages
 * @version 2018-10-01
 */
class CachedImages {
    /**
     * Constructs a new <code>CachedImages</code>.
     * The cached image and OS type.
     * @alias module:model/CachedImages
     * @param image {String} The cached image name.
     * @param osType {String} The OS type of the cached image.
     */
    constructor(image, osType) { 
        
        CachedImages.initialize(this, image, osType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, image, osType) { 
        obj['image'] = image;
        obj['osType'] = osType;
    }

    /**
     * Constructs a <code>CachedImages</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CachedImages} obj Optional instance to populate.
     * @return {module:model/CachedImages} The populated <code>CachedImages</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CachedImages();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('osType')) {
                obj['osType'] = ApiClient.convertToType(data['osType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CachedImages</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CachedImages</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CachedImages.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['osType'] && !(typeof data['osType'] === 'string' || data['osType'] instanceof String)) {
            throw new Error("Expected the field `osType` to be a primitive type in the JSON string but got " + data['osType']);
        }

        return true;
    }


}

CachedImages.RequiredProperties = ["image", "osType"];

/**
 * The resource Id of the cached image.
 * @member {String} id
 */
CachedImages.prototype['id'] = undefined;

/**
 * The cached image name.
 * @member {String} image
 */
CachedImages.prototype['image'] = undefined;

/**
 * The OS type of the cached image.
 * @member {String} osType
 */
CachedImages.prototype['osType'] = undefined;






export default CachedImages;

