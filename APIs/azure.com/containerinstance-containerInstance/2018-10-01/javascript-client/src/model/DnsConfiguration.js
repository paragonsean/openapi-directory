/**
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DnsConfiguration model module.
 * @module model/DnsConfiguration
 * @version 2018-10-01
 */
class DnsConfiguration {
    /**
     * Constructs a new <code>DnsConfiguration</code>.
     * DNS configuration for the container group.
     * @alias module:model/DnsConfiguration
     * @param nameServers {Array.<String>} The DNS servers for the container group.
     */
    constructor(nameServers) { 
        
        DnsConfiguration.initialize(this, nameServers);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, nameServers) { 
        obj['nameServers'] = nameServers;
    }

    /**
     * Constructs a <code>DnsConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DnsConfiguration} obj Optional instance to populate.
     * @return {module:model/DnsConfiguration} The populated <code>DnsConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DnsConfiguration();

            if (data.hasOwnProperty('nameServers')) {
                obj['nameServers'] = ApiClient.convertToType(data['nameServers'], ['String']);
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], 'String');
            }
            if (data.hasOwnProperty('searchDomains')) {
                obj['searchDomains'] = ApiClient.convertToType(data['searchDomains'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DnsConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DnsConfiguration</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DnsConfiguration.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['nameServers'])) {
            throw new Error("Expected the field `nameServers` to be an array in the JSON data but got " + data['nameServers']);
        }
        // ensure the json data is a string
        if (data['options'] && !(typeof data['options'] === 'string' || data['options'] instanceof String)) {
            throw new Error("Expected the field `options` to be a primitive type in the JSON string but got " + data['options']);
        }
        // ensure the json data is a string
        if (data['searchDomains'] && !(typeof data['searchDomains'] === 'string' || data['searchDomains'] instanceof String)) {
            throw new Error("Expected the field `searchDomains` to be a primitive type in the JSON string but got " + data['searchDomains']);
        }

        return true;
    }


}

DnsConfiguration.RequiredProperties = ["nameServers"];

/**
 * The DNS servers for the container group.
 * @member {Array.<String>} nameServers
 */
DnsConfiguration.prototype['nameServers'] = undefined;

/**
 * The DNS options for the container group.
 * @member {String} options
 */
DnsConfiguration.prototype['options'] = undefined;

/**
 * The DNS search domains for hostname lookup in the container group.
 * @member {String} searchDomains
 */
DnsConfiguration.prototype['searchDomains'] = undefined;






export default DnsConfiguration;

