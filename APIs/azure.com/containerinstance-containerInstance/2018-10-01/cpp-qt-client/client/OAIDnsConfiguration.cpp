/**
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDnsConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDnsConfiguration::OAIDnsConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDnsConfiguration::OAIDnsConfiguration() {
    this->initializeModel();
}

OAIDnsConfiguration::~OAIDnsConfiguration() {}

void OAIDnsConfiguration::initializeModel() {

    m_name_servers_isSet = false;
    m_name_servers_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_search_domains_isSet = false;
    m_search_domains_isValid = false;
}

void OAIDnsConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDnsConfiguration::fromJsonObject(QJsonObject json) {

    m_name_servers_isValid = ::OpenAPI::fromJsonValue(m_name_servers, json[QString("nameServers")]);
    m_name_servers_isSet = !json[QString("nameServers")].isNull() && m_name_servers_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_search_domains_isValid = ::OpenAPI::fromJsonValue(m_search_domains, json[QString("searchDomains")]);
    m_search_domains_isSet = !json[QString("searchDomains")].isNull() && m_search_domains_isValid;
}

QString OAIDnsConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDnsConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_name_servers.size() > 0) {
        obj.insert(QString("nameServers"), ::OpenAPI::toJsonValue(m_name_servers));
    }
    if (m_options_isSet) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_search_domains_isSet) {
        obj.insert(QString("searchDomains"), ::OpenAPI::toJsonValue(m_search_domains));
    }
    return obj;
}

QList<QString> OAIDnsConfiguration::getNameServers() const {
    return m_name_servers;
}
void OAIDnsConfiguration::setNameServers(const QList<QString> &name_servers) {
    m_name_servers = name_servers;
    m_name_servers_isSet = true;
}

bool OAIDnsConfiguration::is_name_servers_Set() const{
    return m_name_servers_isSet;
}

bool OAIDnsConfiguration::is_name_servers_Valid() const{
    return m_name_servers_isValid;
}

QString OAIDnsConfiguration::getOptions() const {
    return m_options;
}
void OAIDnsConfiguration::setOptions(const QString &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIDnsConfiguration::is_options_Set() const{
    return m_options_isSet;
}

bool OAIDnsConfiguration::is_options_Valid() const{
    return m_options_isValid;
}

QString OAIDnsConfiguration::getSearchDomains() const {
    return m_search_domains;
}
void OAIDnsConfiguration::setSearchDomains(const QString &search_domains) {
    m_search_domains = search_domains;
    m_search_domains_isSet = true;
}

bool OAIDnsConfiguration::is_search_domains_Set() const{
    return m_search_domains_isSet;
}

bool OAIDnsConfiguration::is_search_domains_Valid() const{
    return m_search_domains_isValid;
}

bool OAIDnsConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_domains_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDnsConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_servers_isValid && true;
}

} // namespace OpenAPI
