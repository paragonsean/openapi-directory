/**
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogAnalytics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogAnalytics::OAILogAnalytics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogAnalytics::OAILogAnalytics() {
    this->initializeModel();
}

OAILogAnalytics::~OAILogAnalytics() {}

void OAILogAnalytics::initializeModel() {

    m_log_type_isSet = false;
    m_log_type_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_workspace_id_isSet = false;
    m_workspace_id_isValid = false;

    m_workspace_key_isSet = false;
    m_workspace_key_isValid = false;
}

void OAILogAnalytics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogAnalytics::fromJsonObject(QJsonObject json) {

    m_log_type_isValid = ::OpenAPI::fromJsonValue(m_log_type, json[QString("logType")]);
    m_log_type_isSet = !json[QString("logType")].isNull() && m_log_type_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_workspace_id_isValid = ::OpenAPI::fromJsonValue(m_workspace_id, json[QString("workspaceId")]);
    m_workspace_id_isSet = !json[QString("workspaceId")].isNull() && m_workspace_id_isValid;

    m_workspace_key_isValid = ::OpenAPI::fromJsonValue(m_workspace_key, json[QString("workspaceKey")]);
    m_workspace_key_isSet = !json[QString("workspaceKey")].isNull() && m_workspace_key_isValid;
}

QString OAILogAnalytics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogAnalytics::asJsonObject() const {
    QJsonObject obj;
    if (m_log_type_isSet) {
        obj.insert(QString("logType"), ::OpenAPI::toJsonValue(m_log_type));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_workspace_id_isSet) {
        obj.insert(QString("workspaceId"), ::OpenAPI::toJsonValue(m_workspace_id));
    }
    if (m_workspace_key_isSet) {
        obj.insert(QString("workspaceKey"), ::OpenAPI::toJsonValue(m_workspace_key));
    }
    return obj;
}

QString OAILogAnalytics::getLogType() const {
    return m_log_type;
}
void OAILogAnalytics::setLogType(const QString &log_type) {
    m_log_type = log_type;
    m_log_type_isSet = true;
}

bool OAILogAnalytics::is_log_type_Set() const{
    return m_log_type_isSet;
}

bool OAILogAnalytics::is_log_type_Valid() const{
    return m_log_type_isValid;
}

QMap<QString, QString> OAILogAnalytics::getMetadata() const {
    return m_metadata;
}
void OAILogAnalytics::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAILogAnalytics::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAILogAnalytics::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAILogAnalytics::getWorkspaceId() const {
    return m_workspace_id;
}
void OAILogAnalytics::setWorkspaceId(const QString &workspace_id) {
    m_workspace_id = workspace_id;
    m_workspace_id_isSet = true;
}

bool OAILogAnalytics::is_workspace_id_Set() const{
    return m_workspace_id_isSet;
}

bool OAILogAnalytics::is_workspace_id_Valid() const{
    return m_workspace_id_isValid;
}

QString OAILogAnalytics::getWorkspaceKey() const {
    return m_workspace_key;
}
void OAILogAnalytics::setWorkspaceKey(const QString &workspace_key) {
    m_workspace_key = workspace_key;
    m_workspace_key_isSet = true;
}

bool OAILogAnalytics::is_workspace_key_Set() const{
    return m_workspace_key_isSet;
}

bool OAILogAnalytics::is_workspace_key_Valid() const{
    return m_workspace_key_isValid;
}

bool OAILogAnalytics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_log_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogAnalytics::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_workspace_id_isValid && m_workspace_key_isValid && true;
}

} // namespace OpenAPI
