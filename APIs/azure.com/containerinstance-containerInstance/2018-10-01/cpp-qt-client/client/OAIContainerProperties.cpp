/**
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerProperties::OAIContainerProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerProperties::OAIContainerProperties() {
    this->initializeModel();
}

OAIContainerProperties::~OAIContainerProperties() {}

void OAIContainerProperties::initializeModel() {

    m_command_isSet = false;
    m_command_isValid = false;

    m_environment_variables_isSet = false;
    m_environment_variables_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_instance_view_isSet = false;
    m_instance_view_isValid = false;

    m_liveness_probe_isSet = false;
    m_liveness_probe_isValid = false;

    m_ports_isSet = false;
    m_ports_isValid = false;

    m_readiness_probe_isSet = false;
    m_readiness_probe_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_volume_mounts_isSet = false;
    m_volume_mounts_isValid = false;
}

void OAIContainerProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerProperties::fromJsonObject(QJsonObject json) {

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("command")]);
    m_command_isSet = !json[QString("command")].isNull() && m_command_isValid;

    m_environment_variables_isValid = ::OpenAPI::fromJsonValue(m_environment_variables, json[QString("environmentVariables")]);
    m_environment_variables_isSet = !json[QString("environmentVariables")].isNull() && m_environment_variables_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_instance_view_isValid = ::OpenAPI::fromJsonValue(m_instance_view, json[QString("instanceView")]);
    m_instance_view_isSet = !json[QString("instanceView")].isNull() && m_instance_view_isValid;

    m_liveness_probe_isValid = ::OpenAPI::fromJsonValue(m_liveness_probe, json[QString("livenessProbe")]);
    m_liveness_probe_isSet = !json[QString("livenessProbe")].isNull() && m_liveness_probe_isValid;

    m_ports_isValid = ::OpenAPI::fromJsonValue(m_ports, json[QString("ports")]);
    m_ports_isSet = !json[QString("ports")].isNull() && m_ports_isValid;

    m_readiness_probe_isValid = ::OpenAPI::fromJsonValue(m_readiness_probe, json[QString("readinessProbe")]);
    m_readiness_probe_isSet = !json[QString("readinessProbe")].isNull() && m_readiness_probe_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_volume_mounts_isValid = ::OpenAPI::fromJsonValue(m_volume_mounts, json[QString("volumeMounts")]);
    m_volume_mounts_isSet = !json[QString("volumeMounts")].isNull() && m_volume_mounts_isValid;
}

QString OAIContainerProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_command.size() > 0) {
        obj.insert(QString("command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_environment_variables.size() > 0) {
        obj.insert(QString("environmentVariables"), ::OpenAPI::toJsonValue(m_environment_variables));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_instance_view.isSet()) {
        obj.insert(QString("instanceView"), ::OpenAPI::toJsonValue(m_instance_view));
    }
    if (m_liveness_probe.isSet()) {
        obj.insert(QString("livenessProbe"), ::OpenAPI::toJsonValue(m_liveness_probe));
    }
    if (m_ports.size() > 0) {
        obj.insert(QString("ports"), ::OpenAPI::toJsonValue(m_ports));
    }
    if (m_readiness_probe.isSet()) {
        obj.insert(QString("readinessProbe"), ::OpenAPI::toJsonValue(m_readiness_probe));
    }
    if (m_resources.isSet()) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_volume_mounts.size() > 0) {
        obj.insert(QString("volumeMounts"), ::OpenAPI::toJsonValue(m_volume_mounts));
    }
    return obj;
}

QList<QString> OAIContainerProperties::getCommand() const {
    return m_command;
}
void OAIContainerProperties::setCommand(const QList<QString> &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAIContainerProperties::is_command_Set() const{
    return m_command_isSet;
}

bool OAIContainerProperties::is_command_Valid() const{
    return m_command_isValid;
}

QList<OAIEnvironmentVariable> OAIContainerProperties::getEnvironmentVariables() const {
    return m_environment_variables;
}
void OAIContainerProperties::setEnvironmentVariables(const QList<OAIEnvironmentVariable> &environment_variables) {
    m_environment_variables = environment_variables;
    m_environment_variables_isSet = true;
}

bool OAIContainerProperties::is_environment_variables_Set() const{
    return m_environment_variables_isSet;
}

bool OAIContainerProperties::is_environment_variables_Valid() const{
    return m_environment_variables_isValid;
}

QString OAIContainerProperties::getImage() const {
    return m_image;
}
void OAIContainerProperties::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIContainerProperties::is_image_Set() const{
    return m_image_isSet;
}

bool OAIContainerProperties::is_image_Valid() const{
    return m_image_isValid;
}

OAIContainerProperties_instanceView OAIContainerProperties::getInstanceView() const {
    return m_instance_view;
}
void OAIContainerProperties::setInstanceView(const OAIContainerProperties_instanceView &instance_view) {
    m_instance_view = instance_view;
    m_instance_view_isSet = true;
}

bool OAIContainerProperties::is_instance_view_Set() const{
    return m_instance_view_isSet;
}

bool OAIContainerProperties::is_instance_view_Valid() const{
    return m_instance_view_isValid;
}

OAIContainerProbe OAIContainerProperties::getLivenessProbe() const {
    return m_liveness_probe;
}
void OAIContainerProperties::setLivenessProbe(const OAIContainerProbe &liveness_probe) {
    m_liveness_probe = liveness_probe;
    m_liveness_probe_isSet = true;
}

bool OAIContainerProperties::is_liveness_probe_Set() const{
    return m_liveness_probe_isSet;
}

bool OAIContainerProperties::is_liveness_probe_Valid() const{
    return m_liveness_probe_isValid;
}

QList<OAIContainerPort> OAIContainerProperties::getPorts() const {
    return m_ports;
}
void OAIContainerProperties::setPorts(const QList<OAIContainerPort> &ports) {
    m_ports = ports;
    m_ports_isSet = true;
}

bool OAIContainerProperties::is_ports_Set() const{
    return m_ports_isSet;
}

bool OAIContainerProperties::is_ports_Valid() const{
    return m_ports_isValid;
}

OAIContainerProbe OAIContainerProperties::getReadinessProbe() const {
    return m_readiness_probe;
}
void OAIContainerProperties::setReadinessProbe(const OAIContainerProbe &readiness_probe) {
    m_readiness_probe = readiness_probe;
    m_readiness_probe_isSet = true;
}

bool OAIContainerProperties::is_readiness_probe_Set() const{
    return m_readiness_probe_isSet;
}

bool OAIContainerProperties::is_readiness_probe_Valid() const{
    return m_readiness_probe_isValid;
}

OAIResourceRequirements OAIContainerProperties::getResources() const {
    return m_resources;
}
void OAIContainerProperties::setResources(const OAIResourceRequirements &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIContainerProperties::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIContainerProperties::is_resources_Valid() const{
    return m_resources_isValid;
}

QList<OAIVolumeMount> OAIContainerProperties::getVolumeMounts() const {
    return m_volume_mounts;
}
void OAIContainerProperties::setVolumeMounts(const QList<OAIVolumeMount> &volume_mounts) {
    m_volume_mounts = volume_mounts;
    m_volume_mounts_isSet = true;
}

bool OAIContainerProperties::is_volume_mounts_Set() const{
    return m_volume_mounts_isSet;
}

bool OAIContainerProperties::is_volume_mounts_Valid() const{
    return m_volume_mounts_isValid;
}

bool OAIContainerProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_command.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_variables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_view.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_liveness_probe.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_readiness_probe.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_mounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_isValid && m_resources_isValid && true;
}

} // namespace OpenAPI
