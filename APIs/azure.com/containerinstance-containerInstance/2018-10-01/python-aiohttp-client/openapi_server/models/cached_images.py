# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CachedImages(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, image: str=None, os_type: str=None):
        """CachedImages - a model defined in OpenAPI

        :param id: The id of this CachedImages.
        :param image: The image of this CachedImages.
        :param os_type: The os_type of this CachedImages.
        """
        self.openapi_types = {
            'id': str,
            'image': str,
            'os_type': str
        }

        self.attribute_map = {
            'id': 'id',
            'image': 'image',
            'os_type': 'osType'
        }

        self._id = id
        self._image = image
        self._os_type = os_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CachedImages':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The cachedImages of this CachedImages.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CachedImages.

        The resource Id of the cached image.

        :return: The id of this CachedImages.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CachedImages.

        The resource Id of the cached image.

        :param id: The id of this CachedImages.
        :type id: str
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this CachedImages.

        The cached image name.

        :return: The image of this CachedImages.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this CachedImages.

        The cached image name.

        :param image: The image of this CachedImages.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")

        self._image = image

    @property
    def os_type(self):
        """Gets the os_type of this CachedImages.

        The OS type of the cached image.

        :return: The os_type of this CachedImages.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this CachedImages.

        The OS type of the cached image.

        :param os_type: The os_type of this CachedImages.
        :type os_type: str
        """
        if os_type is None:
            raise ValueError("Invalid value for `os_type`, must not be `None`")

        self._os_type = os_type
