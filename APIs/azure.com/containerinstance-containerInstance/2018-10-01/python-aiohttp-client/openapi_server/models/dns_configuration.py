# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DnsConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name_servers: List[str]=None, options: str=None, search_domains: str=None):
        """DnsConfiguration - a model defined in OpenAPI

        :param name_servers: The name_servers of this DnsConfiguration.
        :param options: The options of this DnsConfiguration.
        :param search_domains: The search_domains of this DnsConfiguration.
        """
        self.openapi_types = {
            'name_servers': List[str],
            'options': str,
            'search_domains': str
        }

        self.attribute_map = {
            'name_servers': 'nameServers',
            'options': 'options',
            'search_domains': 'searchDomains'
        }

        self._name_servers = name_servers
        self._options = options
        self._search_domains = search_domains

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DnsConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DnsConfiguration of this DnsConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name_servers(self):
        """Gets the name_servers of this DnsConfiguration.

        The DNS servers for the container group.

        :return: The name_servers of this DnsConfiguration.
        :rtype: List[str]
        """
        return self._name_servers

    @name_servers.setter
    def name_servers(self, name_servers):
        """Sets the name_servers of this DnsConfiguration.

        The DNS servers for the container group.

        :param name_servers: The name_servers of this DnsConfiguration.
        :type name_servers: List[str]
        """
        if name_servers is None:
            raise ValueError("Invalid value for `name_servers`, must not be `None`")

        self._name_servers = name_servers

    @property
    def options(self):
        """Gets the options of this DnsConfiguration.

        The DNS options for the container group.

        :return: The options of this DnsConfiguration.
        :rtype: str
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this DnsConfiguration.

        The DNS options for the container group.

        :param options: The options of this DnsConfiguration.
        :type options: str
        """

        self._options = options

    @property
    def search_domains(self):
        """Gets the search_domains of this DnsConfiguration.

        The DNS search domains for hostname lookup in the container group.

        :return: The search_domains of this DnsConfiguration.
        :rtype: str
        """
        return self._search_domains

    @search_domains.setter
    def search_domains(self, search_domains):
        """Sets the search_domains of this DnsConfiguration.

        The DNS search domains for hostname lookup in the container group.

        :param search_domains: The search_domains of this DnsConfiguration.
        :type search_domains: str
        """

        self._search_domains = search_domains
