# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.capabilities_capabilities import CapabilitiesCapabilities
from openapi_server import util


class Capabilities(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capabilities: CapabilitiesCapabilities=None, gpu: str=None, ip_address_type: str=None, location: str=None, os_type: str=None, resource_type: str=None):
        """Capabilities - a model defined in OpenAPI

        :param capabilities: The capabilities of this Capabilities.
        :param gpu: The gpu of this Capabilities.
        :param ip_address_type: The ip_address_type of this Capabilities.
        :param location: The location of this Capabilities.
        :param os_type: The os_type of this Capabilities.
        :param resource_type: The resource_type of this Capabilities.
        """
        self.openapi_types = {
            'capabilities': CapabilitiesCapabilities,
            'gpu': str,
            'ip_address_type': str,
            'location': str,
            'os_type': str,
            'resource_type': str
        }

        self.attribute_map = {
            'capabilities': 'capabilities',
            'gpu': 'gpu',
            'ip_address_type': 'ipAddressType',
            'location': 'location',
            'os_type': 'osType',
            'resource_type': 'resourceType'
        }

        self._capabilities = capabilities
        self._gpu = gpu
        self._ip_address_type = ip_address_type
        self._location = location
        self._os_type = os_type
        self._resource_type = resource_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Capabilities':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Capabilities of this Capabilities.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capabilities(self):
        """Gets the capabilities of this Capabilities.


        :return: The capabilities of this Capabilities.
        :rtype: CapabilitiesCapabilities
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this Capabilities.


        :param capabilities: The capabilities of this Capabilities.
        :type capabilities: CapabilitiesCapabilities
        """

        self._capabilities = capabilities

    @property
    def gpu(self):
        """Gets the gpu of this Capabilities.

        The GPU sku that this capability describes.

        :return: The gpu of this Capabilities.
        :rtype: str
        """
        return self._gpu

    @gpu.setter
    def gpu(self, gpu):
        """Sets the gpu of this Capabilities.

        The GPU sku that this capability describes.

        :param gpu: The gpu of this Capabilities.
        :type gpu: str
        """

        self._gpu = gpu

    @property
    def ip_address_type(self):
        """Gets the ip_address_type of this Capabilities.

        The ip address type that this capability describes.

        :return: The ip_address_type of this Capabilities.
        :rtype: str
        """
        return self._ip_address_type

    @ip_address_type.setter
    def ip_address_type(self, ip_address_type):
        """Sets the ip_address_type of this Capabilities.

        The ip address type that this capability describes.

        :param ip_address_type: The ip_address_type of this Capabilities.
        :type ip_address_type: str
        """

        self._ip_address_type = ip_address_type

    @property
    def location(self):
        """Gets the location of this Capabilities.

        The resource location.

        :return: The location of this Capabilities.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Capabilities.

        The resource location.

        :param location: The location of this Capabilities.
        :type location: str
        """

        self._location = location

    @property
    def os_type(self):
        """Gets the os_type of this Capabilities.

        The OS type that this capability describes.

        :return: The os_type of this Capabilities.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this Capabilities.

        The OS type that this capability describes.

        :param os_type: The os_type of this Capabilities.
        :type os_type: str
        """

        self._os_type = os_type

    @property
    def resource_type(self):
        """Gets the resource_type of this Capabilities.

        The resource type that this capability describes.

        :return: The resource_type of this Capabilities.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this Capabilities.

        The resource type that this capability describes.

        :param resource_type: The resource_type of this Capabilities.
        :type resource_type: str
        """

        self._resource_type = resource_type
