# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GpuResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, sku: str=None):
        """GpuResource - a model defined in OpenAPI

        :param count: The count of this GpuResource.
        :param sku: The sku of this GpuResource.
        """
        self.openapi_types = {
            'count': int,
            'sku': str
        }

        self.attribute_map = {
            'count': 'count',
            'sku': 'sku'
        }

        self._count = count
        self._sku = sku

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GpuResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GpuResource of this GpuResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this GpuResource.

        The count of the GPU resource.

        :return: The count of this GpuResource.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this GpuResource.

        The count of the GPU resource.

        :param count: The count of this GpuResource.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def sku(self):
        """Gets the sku of this GpuResource.

        The SKU of the GPU resource.

        :return: The sku of this GpuResource.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this GpuResource.

        The SKU of the GPU resource.

        :param sku: The sku of this GpuResource.
        :type sku: str
        """
        allowed_values = ["K80", "P100", "V100"]  # noqa: E501
        if sku not in allowed_values:
            raise ValueError(
                "Invalid value for `sku` ({0}), must be one of {1}"
                .format(sku, allowed_values)
            )

        self._sku = sku
