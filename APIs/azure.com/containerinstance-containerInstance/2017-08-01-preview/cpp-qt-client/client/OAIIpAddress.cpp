/**
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIpAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIpAddress::OAIIpAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIpAddress::OAIIpAddress() {
    this->initializeModel();
}

OAIIpAddress::~OAIIpAddress() {}

void OAIIpAddress::initializeModel() {

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_ports_isSet = false;
    m_ports_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIIpAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIpAddress::fromJsonObject(QJsonObject json) {

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_ports_isValid = ::OpenAPI::fromJsonValue(m_ports, json[QString("ports")]);
    m_ports_isSet = !json[QString("ports")].isNull() && m_ports_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIIpAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIpAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_ports.size() > 0) {
        obj.insert(QString("ports"), ::OpenAPI::toJsonValue(m_ports));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIIpAddress::getIp() const {
    return m_ip;
}
void OAIIpAddress::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIIpAddress::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIIpAddress::is_ip_Valid() const{
    return m_ip_isValid;
}

QList<OAIPort> OAIIpAddress::getPorts() const {
    return m_ports;
}
void OAIIpAddress::setPorts(const QList<OAIPort> &ports) {
    m_ports = ports;
    m_ports_isSet = true;
}

bool OAIIpAddress::is_ports_Set() const{
    return m_ports_isSet;
}

bool OAIIpAddress::is_ports_Valid() const{
    return m_ports_isValid;
}

QString OAIIpAddress::getType() const {
    return m_type;
}
void OAIIpAddress::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIpAddress::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIpAddress::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIIpAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIpAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ports_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
