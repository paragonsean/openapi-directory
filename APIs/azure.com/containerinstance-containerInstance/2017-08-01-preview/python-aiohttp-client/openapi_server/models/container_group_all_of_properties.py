# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container import Container
from openapi_server.models.image_registry_credential import ImageRegistryCredential
from openapi_server.models.ip_address import IpAddress
from openapi_server.models.volume import Volume
from openapi_server import util


class ContainerGroupAllOfProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, containers: List[Container]=None, image_registry_credentials: List[ImageRegistryCredential]=None, ip_address: IpAddress=None, os_type: str=None, provisioning_state: str=None, restart_policy: str=None, state: str=None, volumes: List[Volume]=None):
        """ContainerGroupAllOfProperties - a model defined in OpenAPI

        :param containers: The containers of this ContainerGroupAllOfProperties.
        :param image_registry_credentials: The image_registry_credentials of this ContainerGroupAllOfProperties.
        :param ip_address: The ip_address of this ContainerGroupAllOfProperties.
        :param os_type: The os_type of this ContainerGroupAllOfProperties.
        :param provisioning_state: The provisioning_state of this ContainerGroupAllOfProperties.
        :param restart_policy: The restart_policy of this ContainerGroupAllOfProperties.
        :param state: The state of this ContainerGroupAllOfProperties.
        :param volumes: The volumes of this ContainerGroupAllOfProperties.
        """
        self.openapi_types = {
            'containers': List[Container],
            'image_registry_credentials': List[ImageRegistryCredential],
            'ip_address': IpAddress,
            'os_type': str,
            'provisioning_state': str,
            'restart_policy': str,
            'state': str,
            'volumes': List[Volume]
        }

        self.attribute_map = {
            'containers': 'containers',
            'image_registry_credentials': 'imageRegistryCredentials',
            'ip_address': 'ipAddress',
            'os_type': 'osType',
            'provisioning_state': 'provisioningState',
            'restart_policy': 'restartPolicy',
            'state': 'state',
            'volumes': 'volumes'
        }

        self._containers = containers
        self._image_registry_credentials = image_registry_credentials
        self._ip_address = ip_address
        self._os_type = os_type
        self._provisioning_state = provisioning_state
        self._restart_policy = restart_policy
        self._state = state
        self._volumes = volumes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerGroupAllOfProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerGroup_allOf_properties of this ContainerGroupAllOfProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def containers(self):
        """Gets the containers of this ContainerGroupAllOfProperties.

        The containers within the container group.

        :return: The containers of this ContainerGroupAllOfProperties.
        :rtype: List[Container]
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this ContainerGroupAllOfProperties.

        The containers within the container group.

        :param containers: The containers of this ContainerGroupAllOfProperties.
        :type containers: List[Container]
        """
        if containers is None:
            raise ValueError("Invalid value for `containers`, must not be `None`")

        self._containers = containers

    @property
    def image_registry_credentials(self):
        """Gets the image_registry_credentials of this ContainerGroupAllOfProperties.

        The image registry credentials by which the container group is created from.

        :return: The image_registry_credentials of this ContainerGroupAllOfProperties.
        :rtype: List[ImageRegistryCredential]
        """
        return self._image_registry_credentials

    @image_registry_credentials.setter
    def image_registry_credentials(self, image_registry_credentials):
        """Sets the image_registry_credentials of this ContainerGroupAllOfProperties.

        The image registry credentials by which the container group is created from.

        :param image_registry_credentials: The image_registry_credentials of this ContainerGroupAllOfProperties.
        :type image_registry_credentials: List[ImageRegistryCredential]
        """

        self._image_registry_credentials = image_registry_credentials

    @property
    def ip_address(self):
        """Gets the ip_address of this ContainerGroupAllOfProperties.


        :return: The ip_address of this ContainerGroupAllOfProperties.
        :rtype: IpAddress
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this ContainerGroupAllOfProperties.


        :param ip_address: The ip_address of this ContainerGroupAllOfProperties.
        :type ip_address: IpAddress
        """

        self._ip_address = ip_address

    @property
    def os_type(self):
        """Gets the os_type of this ContainerGroupAllOfProperties.

        The operating system type required by the containers in the container group.

        :return: The os_type of this ContainerGroupAllOfProperties.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this ContainerGroupAllOfProperties.

        The operating system type required by the containers in the container group.

        :param os_type: The os_type of this ContainerGroupAllOfProperties.
        :type os_type: str
        """
        allowed_values = ["Windows", "Linux"]  # noqa: E501
        if os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `os_type` ({0}), must be one of {1}"
                .format(os_type, allowed_values)
            )

        self._os_type = os_type

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ContainerGroupAllOfProperties.

        The provisioning state of the container group. This only appears in the response.

        :return: The provisioning_state of this ContainerGroupAllOfProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ContainerGroupAllOfProperties.

        The provisioning state of the container group. This only appears in the response.

        :param provisioning_state: The provisioning_state of this ContainerGroupAllOfProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def restart_policy(self):
        """Gets the restart_policy of this ContainerGroupAllOfProperties.

        Restart policy for all containers within the container group. Currently the only available option is `always`.

        :return: The restart_policy of this ContainerGroupAllOfProperties.
        :rtype: str
        """
        return self._restart_policy

    @restart_policy.setter
    def restart_policy(self, restart_policy):
        """Sets the restart_policy of this ContainerGroupAllOfProperties.

        Restart policy for all containers within the container group. Currently the only available option is `always`.

        :param restart_policy: The restart_policy of this ContainerGroupAllOfProperties.
        :type restart_policy: str
        """
        allowed_values = ["always"]  # noqa: E501
        if restart_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `restart_policy` ({0}), must be one of {1}"
                .format(restart_policy, allowed_values)
            )

        self._restart_policy = restart_policy

    @property
    def state(self):
        """Gets the state of this ContainerGroupAllOfProperties.

        The current state of the container group. This is only valid for the response.

        :return: The state of this ContainerGroupAllOfProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ContainerGroupAllOfProperties.

        The current state of the container group. This is only valid for the response.

        :param state: The state of this ContainerGroupAllOfProperties.
        :type state: str
        """

        self._state = state

    @property
    def volumes(self):
        """Gets the volumes of this ContainerGroupAllOfProperties.

        The list of volumes that can be mounted by containers in this container group.

        :return: The volumes of this ContainerGroupAllOfProperties.
        :rtype: List[Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this ContainerGroupAllOfProperties.

        The list of volumes that can be mounted by containers in this container group.

        :param volumes: The volumes of this ContainerGroupAllOfProperties.
        :type volumes: List[Volume]
        """

        self._volumes = volumes
