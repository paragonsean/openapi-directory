/**
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContainerPort from './ContainerPort';
import ContainerPropertiesInstanceView from './ContainerPropertiesInstanceView';
import EnvironmentVariable from './EnvironmentVariable';
import ResourceRequirements from './ResourceRequirements';
import VolumeMount from './VolumeMount';

/**
 * The ContainerProperties model module.
 * @module model/ContainerProperties
 * @version 2018-02-01-preview
 */
class ContainerProperties {
    /**
     * Constructs a new <code>ContainerProperties</code>.
     * The container instance properties.
     * @alias module:model/ContainerProperties
     * @param image {String} The name of the image used to create the container instance.
     * @param resources {module:model/ResourceRequirements} 
     */
    constructor(image, resources) { 
        
        ContainerProperties.initialize(this, image, resources);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, image, resources) { 
        obj['image'] = image;
        obj['resources'] = resources;
    }

    /**
     * Constructs a <code>ContainerProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContainerProperties} obj Optional instance to populate.
     * @return {module:model/ContainerProperties} The populated <code>ContainerProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContainerProperties();

            if (data.hasOwnProperty('command')) {
                obj['command'] = ApiClient.convertToType(data['command'], ['String']);
            }
            if (data.hasOwnProperty('environmentVariables')) {
                obj['environmentVariables'] = ApiClient.convertToType(data['environmentVariables'], [EnvironmentVariable]);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('instanceView')) {
                obj['instanceView'] = ContainerPropertiesInstanceView.constructFromObject(data['instanceView']);
            }
            if (data.hasOwnProperty('ports')) {
                obj['ports'] = ApiClient.convertToType(data['ports'], [ContainerPort]);
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = ResourceRequirements.constructFromObject(data['resources']);
            }
            if (data.hasOwnProperty('volumeMounts')) {
                obj['volumeMounts'] = ApiClient.convertToType(data['volumeMounts'], [VolumeMount]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContainerProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContainerProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContainerProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['command'])) {
            throw new Error("Expected the field `command` to be an array in the JSON data but got " + data['command']);
        }
        if (data['environmentVariables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['environmentVariables'])) {
                throw new Error("Expected the field `environmentVariables` to be an array in the JSON data but got " + data['environmentVariables']);
            }
            // validate the optional field `environmentVariables` (array)
            for (const item of data['environmentVariables']) {
                EnvironmentVariable.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // validate the optional field `instanceView`
        if (data['instanceView']) { // data not null
          ContainerPropertiesInstanceView.validateJSON(data['instanceView']);
        }
        if (data['ports']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ports'])) {
                throw new Error("Expected the field `ports` to be an array in the JSON data but got " + data['ports']);
            }
            // validate the optional field `ports` (array)
            for (const item of data['ports']) {
                ContainerPort.validateJSON(item);
            };
        }
        // validate the optional field `resources`
        if (data['resources']) { // data not null
          ResourceRequirements.validateJSON(data['resources']);
        }
        if (data['volumeMounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['volumeMounts'])) {
                throw new Error("Expected the field `volumeMounts` to be an array in the JSON data but got " + data['volumeMounts']);
            }
            // validate the optional field `volumeMounts` (array)
            for (const item of data['volumeMounts']) {
                VolumeMount.validateJSON(item);
            };
        }

        return true;
    }


}

ContainerProperties.RequiredProperties = ["image", "resources"];

/**
 * The commands to execute within the container instance in exec form.
 * @member {Array.<String>} command
 */
ContainerProperties.prototype['command'] = undefined;

/**
 * The environment variables to set in the container instance.
 * @member {Array.<module:model/EnvironmentVariable>} environmentVariables
 */
ContainerProperties.prototype['environmentVariables'] = undefined;

/**
 * The name of the image used to create the container instance.
 * @member {String} image
 */
ContainerProperties.prototype['image'] = undefined;

/**
 * @member {module:model/ContainerPropertiesInstanceView} instanceView
 */
ContainerProperties.prototype['instanceView'] = undefined;

/**
 * The exposed ports on the container instance.
 * @member {Array.<module:model/ContainerPort>} ports
 */
ContainerProperties.prototype['ports'] = undefined;

/**
 * @member {module:model/ResourceRequirements} resources
 */
ContainerProperties.prototype['resources'] = undefined;

/**
 * The volume mounts available to the container instance.
 * @member {Array.<module:model/VolumeMount>} volumeMounts
 */
ContainerProperties.prototype['volumeMounts'] = undefined;






export default ContainerProperties;

