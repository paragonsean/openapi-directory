/**
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GitRepoVolume model module.
 * @module model/GitRepoVolume
 * @version 2018-02-01-preview
 */
class GitRepoVolume {
    /**
     * Constructs a new <code>GitRepoVolume</code>.
     * Represents a volume that is populated with the contents of a git repository
     * @alias module:model/GitRepoVolume
     * @param repository {String} Repository URL
     */
    constructor(repository) { 
        
        GitRepoVolume.initialize(this, repository);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, repository) { 
        obj['repository'] = repository;
    }

    /**
     * Constructs a <code>GitRepoVolume</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GitRepoVolume} obj Optional instance to populate.
     * @return {module:model/GitRepoVolume} The populated <code>GitRepoVolume</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GitRepoVolume();

            if (data.hasOwnProperty('directory')) {
                obj['directory'] = ApiClient.convertToType(data['directory'], 'String');
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = ApiClient.convertToType(data['repository'], 'String');
            }
            if (data.hasOwnProperty('revision')) {
                obj['revision'] = ApiClient.convertToType(data['revision'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GitRepoVolume</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GitRepoVolume</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GitRepoVolume.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['directory'] && !(typeof data['directory'] === 'string' || data['directory'] instanceof String)) {
            throw new Error("Expected the field `directory` to be a primitive type in the JSON string but got " + data['directory']);
        }
        // ensure the json data is a string
        if (data['repository'] && !(typeof data['repository'] === 'string' || data['repository'] instanceof String)) {
            throw new Error("Expected the field `repository` to be a primitive type in the JSON string but got " + data['repository']);
        }
        // ensure the json data is a string
        if (data['revision'] && !(typeof data['revision'] === 'string' || data['revision'] instanceof String)) {
            throw new Error("Expected the field `revision` to be a primitive type in the JSON string but got " + data['revision']);
        }

        return true;
    }


}

GitRepoVolume.RequiredProperties = ["repository"];

/**
 * Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
 * @member {String} directory
 */
GitRepoVolume.prototype['directory'] = undefined;

/**
 * Repository URL
 * @member {String} repository
 */
GitRepoVolume.prototype['repository'] = undefined;

/**
 * Commit hash for the specified revision.
 * @member {String} revision
 */
GitRepoVolume.prototype['revision'] = undefined;






export default GitRepoVolume;

