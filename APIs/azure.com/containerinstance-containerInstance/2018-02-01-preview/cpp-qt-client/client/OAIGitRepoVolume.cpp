/**
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGitRepoVolume.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGitRepoVolume::OAIGitRepoVolume(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGitRepoVolume::OAIGitRepoVolume() {
    this->initializeModel();
}

OAIGitRepoVolume::~OAIGitRepoVolume() {}

void OAIGitRepoVolume::initializeModel() {

    m_directory_isSet = false;
    m_directory_isValid = false;

    m_repository_isSet = false;
    m_repository_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;
}

void OAIGitRepoVolume::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGitRepoVolume::fromJsonObject(QJsonObject json) {

    m_directory_isValid = ::OpenAPI::fromJsonValue(m_directory, json[QString("directory")]);
    m_directory_isSet = !json[QString("directory")].isNull() && m_directory_isValid;

    m_repository_isValid = ::OpenAPI::fromJsonValue(m_repository, json[QString("repository")]);
    m_repository_isSet = !json[QString("repository")].isNull() && m_repository_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;
}

QString OAIGitRepoVolume::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGitRepoVolume::asJsonObject() const {
    QJsonObject obj;
    if (m_directory_isSet) {
        obj.insert(QString("directory"), ::OpenAPI::toJsonValue(m_directory));
    }
    if (m_repository_isSet) {
        obj.insert(QString("repository"), ::OpenAPI::toJsonValue(m_repository));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    return obj;
}

QString OAIGitRepoVolume::getDirectory() const {
    return m_directory;
}
void OAIGitRepoVolume::setDirectory(const QString &directory) {
    m_directory = directory;
    m_directory_isSet = true;
}

bool OAIGitRepoVolume::is_directory_Set() const{
    return m_directory_isSet;
}

bool OAIGitRepoVolume::is_directory_Valid() const{
    return m_directory_isValid;
}

QString OAIGitRepoVolume::getRepository() const {
    return m_repository;
}
void OAIGitRepoVolume::setRepository(const QString &repository) {
    m_repository = repository;
    m_repository_isSet = true;
}

bool OAIGitRepoVolume::is_repository_Set() const{
    return m_repository_isSet;
}

bool OAIGitRepoVolume::is_repository_Valid() const{
    return m_repository_isValid;
}

QString OAIGitRepoVolume::getRevision() const {
    return m_revision;
}
void OAIGitRepoVolume::setRevision(const QString &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIGitRepoVolume::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIGitRepoVolume::is_revision_Valid() const{
    return m_revision_isValid;
}

bool OAIGitRepoVolume::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_directory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGitRepoVolume::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_repository_isValid && true;
}

} // namespace OpenAPI
