# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.container_state import ContainerState
from openapi_server.models.event import Event
from openapi_server import util


class ContainerPropertiesInstanceView(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_state: ContainerState=None, events: List[Event]=None, previous_state: ContainerState=None, restart_count: int=None):
        """ContainerPropertiesInstanceView - a model defined in OpenAPI

        :param current_state: The current_state of this ContainerPropertiesInstanceView.
        :param events: The events of this ContainerPropertiesInstanceView.
        :param previous_state: The previous_state of this ContainerPropertiesInstanceView.
        :param restart_count: The restart_count of this ContainerPropertiesInstanceView.
        """
        self.openapi_types = {
            'current_state': ContainerState,
            'events': List[Event],
            'previous_state': ContainerState,
            'restart_count': int
        }

        self.attribute_map = {
            'current_state': 'currentState',
            'events': 'events',
            'previous_state': 'previousState',
            'restart_count': 'restartCount'
        }

        self._current_state = current_state
        self._events = events
        self._previous_state = previous_state
        self._restart_count = restart_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerPropertiesInstanceView':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerProperties_instanceView of this ContainerPropertiesInstanceView.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_state(self):
        """Gets the current_state of this ContainerPropertiesInstanceView.


        :return: The current_state of this ContainerPropertiesInstanceView.
        :rtype: ContainerState
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state):
        """Sets the current_state of this ContainerPropertiesInstanceView.


        :param current_state: The current_state of this ContainerPropertiesInstanceView.
        :type current_state: ContainerState
        """

        self._current_state = current_state

    @property
    def events(self):
        """Gets the events of this ContainerPropertiesInstanceView.

        The events of the container instance.

        :return: The events of this ContainerPropertiesInstanceView.
        :rtype: List[Event]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this ContainerPropertiesInstanceView.

        The events of the container instance.

        :param events: The events of this ContainerPropertiesInstanceView.
        :type events: List[Event]
        """

        self._events = events

    @property
    def previous_state(self):
        """Gets the previous_state of this ContainerPropertiesInstanceView.


        :return: The previous_state of this ContainerPropertiesInstanceView.
        :rtype: ContainerState
        """
        return self._previous_state

    @previous_state.setter
    def previous_state(self, previous_state):
        """Sets the previous_state of this ContainerPropertiesInstanceView.


        :param previous_state: The previous_state of this ContainerPropertiesInstanceView.
        :type previous_state: ContainerState
        """

        self._previous_state = previous_state

    @property
    def restart_count(self):
        """Gets the restart_count of this ContainerPropertiesInstanceView.

        The number of times that the container instance has been restarted.

        :return: The restart_count of this ContainerPropertiesInstanceView.
        :rtype: int
        """
        return self._restart_count

    @restart_count.setter
    def restart_count(self, restart_count):
        """Sets the restart_count of this ContainerPropertiesInstanceView.

        The number of times that the container instance has been restarted.

        :param restart_count: The restart_count of this ContainerPropertiesInstanceView.
        :type restart_count: int
        """

        self._restart_count = restart_count
