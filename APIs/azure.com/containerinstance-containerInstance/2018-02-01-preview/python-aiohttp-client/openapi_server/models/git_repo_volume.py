# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GitRepoVolume(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, directory: str=None, repository: str=None, revision: str=None):
        """GitRepoVolume - a model defined in OpenAPI

        :param directory: The directory of this GitRepoVolume.
        :param repository: The repository of this GitRepoVolume.
        :param revision: The revision of this GitRepoVolume.
        """
        self.openapi_types = {
            'directory': str,
            'repository': str,
            'revision': str
        }

        self.attribute_map = {
            'directory': 'directory',
            'repository': 'repository',
            'revision': 'revision'
        }

        self._directory = directory
        self._repository = repository
        self._revision = revision

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GitRepoVolume':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GitRepoVolume of this GitRepoVolume.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def directory(self):
        """Gets the directory of this GitRepoVolume.

        Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.

        :return: The directory of this GitRepoVolume.
        :rtype: str
        """
        return self._directory

    @directory.setter
    def directory(self, directory):
        """Sets the directory of this GitRepoVolume.

        Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.

        :param directory: The directory of this GitRepoVolume.
        :type directory: str
        """

        self._directory = directory

    @property
    def repository(self):
        """Gets the repository of this GitRepoVolume.

        Repository URL

        :return: The repository of this GitRepoVolume.
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this GitRepoVolume.

        Repository URL

        :param repository: The repository of this GitRepoVolume.
        :type repository: str
        """
        if repository is None:
            raise ValueError("Invalid value for `repository`, must not be `None`")

        self._repository = repository

    @property
    def revision(self):
        """Gets the revision of this GitRepoVolume.

        Commit hash for the specified revision.

        :return: The revision of this GitRepoVolume.
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this GitRepoVolume.

        Commit hash for the specified revision.

        :param revision: The revision of this GitRepoVolume.
        :type revision: str
        """

        self._revision = revision
