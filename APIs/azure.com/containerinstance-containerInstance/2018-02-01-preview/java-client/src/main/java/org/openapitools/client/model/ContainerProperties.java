/*
 * ContainerInstanceManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2018-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContainerPort;
import org.openapitools.client.model.ContainerPropertiesInstanceView;
import org.openapitools.client.model.EnvironmentVariable;
import org.openapitools.client.model.ResourceRequirements;
import org.openapitools.client.model.VolumeMount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The container instance properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:25:37.809253-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContainerProperties {
  public static final String SERIALIZED_NAME_COMMAND = "command";
  @SerializedName(SERIALIZED_NAME_COMMAND)
  private List<String> command = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENVIRONMENT_VARIABLES = "environmentVariables";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_VARIABLES)
  private List<EnvironmentVariable> environmentVariables = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_INSTANCE_VIEW = "instanceView";
  @SerializedName(SERIALIZED_NAME_INSTANCE_VIEW)
  private ContainerPropertiesInstanceView instanceView;

  public static final String SERIALIZED_NAME_PORTS = "ports";
  @SerializedName(SERIALIZED_NAME_PORTS)
  private List<ContainerPort> ports = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private ResourceRequirements resources;

  public static final String SERIALIZED_NAME_VOLUME_MOUNTS = "volumeMounts";
  @SerializedName(SERIALIZED_NAME_VOLUME_MOUNTS)
  private List<VolumeMount> volumeMounts = new ArrayList<>();

  public ContainerProperties() {
  }

  public ContainerProperties command(List<String> command) {
    this.command = command;
    return this;
  }

  public ContainerProperties addCommandItem(String commandItem) {
    if (this.command == null) {
      this.command = new ArrayList<>();
    }
    this.command.add(commandItem);
    return this;
  }

  /**
   * The commands to execute within the container instance in exec form.
   * @return command
   */
  @javax.annotation.Nullable
  public List<String> getCommand() {
    return command;
  }

  public void setCommand(List<String> command) {
    this.command = command;
  }


  public ContainerProperties environmentVariables(List<EnvironmentVariable> environmentVariables) {
    this.environmentVariables = environmentVariables;
    return this;
  }

  public ContainerProperties addEnvironmentVariablesItem(EnvironmentVariable environmentVariablesItem) {
    if (this.environmentVariables == null) {
      this.environmentVariables = new ArrayList<>();
    }
    this.environmentVariables.add(environmentVariablesItem);
    return this;
  }

  /**
   * The environment variables to set in the container instance.
   * @return environmentVariables
   */
  @javax.annotation.Nullable
  public List<EnvironmentVariable> getEnvironmentVariables() {
    return environmentVariables;
  }

  public void setEnvironmentVariables(List<EnvironmentVariable> environmentVariables) {
    this.environmentVariables = environmentVariables;
  }


  public ContainerProperties image(String image) {
    this.image = image;
    return this;
  }

  /**
   * The name of the image used to create the container instance.
   * @return image
   */
  @javax.annotation.Nonnull
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public ContainerProperties instanceView(ContainerPropertiesInstanceView instanceView) {
    this.instanceView = instanceView;
    return this;
  }

  /**
   * Get instanceView
   * @return instanceView
   */
  @javax.annotation.Nullable
  public ContainerPropertiesInstanceView getInstanceView() {
    return instanceView;
  }

  public void setInstanceView(ContainerPropertiesInstanceView instanceView) {
    this.instanceView = instanceView;
  }


  public ContainerProperties ports(List<ContainerPort> ports) {
    this.ports = ports;
    return this;
  }

  public ContainerProperties addPortsItem(ContainerPort portsItem) {
    if (this.ports == null) {
      this.ports = new ArrayList<>();
    }
    this.ports.add(portsItem);
    return this;
  }

  /**
   * The exposed ports on the container instance.
   * @return ports
   */
  @javax.annotation.Nullable
  public List<ContainerPort> getPorts() {
    return ports;
  }

  public void setPorts(List<ContainerPort> ports) {
    this.ports = ports;
  }


  public ContainerProperties resources(ResourceRequirements resources) {
    this.resources = resources;
    return this;
  }

  /**
   * Get resources
   * @return resources
   */
  @javax.annotation.Nonnull
  public ResourceRequirements getResources() {
    return resources;
  }

  public void setResources(ResourceRequirements resources) {
    this.resources = resources;
  }


  public ContainerProperties volumeMounts(List<VolumeMount> volumeMounts) {
    this.volumeMounts = volumeMounts;
    return this;
  }

  public ContainerProperties addVolumeMountsItem(VolumeMount volumeMountsItem) {
    if (this.volumeMounts == null) {
      this.volumeMounts = new ArrayList<>();
    }
    this.volumeMounts.add(volumeMountsItem);
    return this;
  }

  /**
   * The volume mounts available to the container instance.
   * @return volumeMounts
   */
  @javax.annotation.Nullable
  public List<VolumeMount> getVolumeMounts() {
    return volumeMounts;
  }

  public void setVolumeMounts(List<VolumeMount> volumeMounts) {
    this.volumeMounts = volumeMounts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContainerProperties containerProperties = (ContainerProperties) o;
    return Objects.equals(this.command, containerProperties.command) &&
        Objects.equals(this.environmentVariables, containerProperties.environmentVariables) &&
        Objects.equals(this.image, containerProperties.image) &&
        Objects.equals(this.instanceView, containerProperties.instanceView) &&
        Objects.equals(this.ports, containerProperties.ports) &&
        Objects.equals(this.resources, containerProperties.resources) &&
        Objects.equals(this.volumeMounts, containerProperties.volumeMounts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(command, environmentVariables, image, instanceView, ports, resources, volumeMounts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContainerProperties {\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    environmentVariables: ").append(toIndentedString(environmentVariables)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    instanceView: ").append(toIndentedString(instanceView)).append("\n");
    sb.append("    ports: ").append(toIndentedString(ports)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    volumeMounts: ").append(toIndentedString(volumeMounts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("command");
    openapiFields.add("environmentVariables");
    openapiFields.add("image");
    openapiFields.add("instanceView");
    openapiFields.add("ports");
    openapiFields.add("resources");
    openapiFields.add("volumeMounts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("image");
    openapiRequiredFields.add("resources");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContainerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContainerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContainerProperties is not found in the empty JSON string", ContainerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContainerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContainerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContainerProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("command") != null && !jsonObj.get("command").isJsonNull() && !jsonObj.get("command").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `command` to be an array in the JSON string but got `%s`", jsonObj.get("command").toString()));
      }
      if (jsonObj.get("environmentVariables") != null && !jsonObj.get("environmentVariables").isJsonNull()) {
        JsonArray jsonArrayenvironmentVariables = jsonObj.getAsJsonArray("environmentVariables");
        if (jsonArrayenvironmentVariables != null) {
          // ensure the json data is an array
          if (!jsonObj.get("environmentVariables").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `environmentVariables` to be an array in the JSON string but got `%s`", jsonObj.get("environmentVariables").toString()));
          }

          // validate the optional field `environmentVariables` (array)
          for (int i = 0; i < jsonArrayenvironmentVariables.size(); i++) {
            EnvironmentVariable.validateJsonElement(jsonArrayenvironmentVariables.get(i));
          };
        }
      }
      if (!jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      // validate the optional field `instanceView`
      if (jsonObj.get("instanceView") != null && !jsonObj.get("instanceView").isJsonNull()) {
        ContainerPropertiesInstanceView.validateJsonElement(jsonObj.get("instanceView"));
      }
      if (jsonObj.get("ports") != null && !jsonObj.get("ports").isJsonNull()) {
        JsonArray jsonArrayports = jsonObj.getAsJsonArray("ports");
        if (jsonArrayports != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ports").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ports` to be an array in the JSON string but got `%s`", jsonObj.get("ports").toString()));
          }

          // validate the optional field `ports` (array)
          for (int i = 0; i < jsonArrayports.size(); i++) {
            ContainerPort.validateJsonElement(jsonArrayports.get(i));
          };
        }
      }
      // validate the required field `resources`
      ResourceRequirements.validateJsonElement(jsonObj.get("resources"));
      if (jsonObj.get("volumeMounts") != null && !jsonObj.get("volumeMounts").isJsonNull()) {
        JsonArray jsonArrayvolumeMounts = jsonObj.getAsJsonArray("volumeMounts");
        if (jsonArrayvolumeMounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumeMounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumeMounts` to be an array in the JSON string but got `%s`", jsonObj.get("volumeMounts").toString()));
          }

          // validate the optional field `volumeMounts` (array)
          for (int i = 0; i < jsonArrayvolumeMounts.size(); i++) {
            VolumeMount.validateJsonElement(jsonArrayvolumeMounts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContainerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContainerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContainerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContainerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ContainerProperties>() {
           @Override
           public void write(JsonWriter out, ContainerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContainerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContainerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContainerProperties
   * @throws IOException if the JSON string is invalid with respect to ContainerProperties
   */
  public static ContainerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContainerProperties.class);
  }

  /**
   * Convert an instance of ContainerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

