/*
 * DnsManagementClient
 * The DNS Management Client.
 *
 * The version of the OpenAPI document: 2018-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SubResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the properties of the zone.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:27:50.614763-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ZoneProperties {
  public static final String SERIALIZED_NAME_MAX_NUMBER_OF_RECORD_SETS = "maxNumberOfRecordSets";
  @SerializedName(SERIALIZED_NAME_MAX_NUMBER_OF_RECORD_SETS)
  private Long maxNumberOfRecordSets;

  public static final String SERIALIZED_NAME_NAME_SERVERS = "nameServers";
  @SerializedName(SERIALIZED_NAME_NAME_SERVERS)
  private List<String> nameServers = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUMBER_OF_RECORD_SETS = "numberOfRecordSets";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_RECORD_SETS)
  private Long numberOfRecordSets;

  public static final String SERIALIZED_NAME_REGISTRATION_VIRTUAL_NETWORKS = "registrationVirtualNetworks";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_VIRTUAL_NETWORKS)
  private List<SubResource> registrationVirtualNetworks = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOLUTION_VIRTUAL_NETWORKS = "resolutionVirtualNetworks";
  @SerializedName(SERIALIZED_NAME_RESOLUTION_VIRTUAL_NETWORKS)
  private List<SubResource> resolutionVirtualNetworks = new ArrayList<>();

  /**
   * The type of this DNS zone (Public or Private).
   */
  @JsonAdapter(ZoneTypeEnum.Adapter.class)
  public enum ZoneTypeEnum {
    PUBLIC("Public"),
    
    PRIVATE("Private");

    private String value;

    ZoneTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ZoneTypeEnum fromValue(String value) {
      for (ZoneTypeEnum b : ZoneTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ZoneTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ZoneTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ZoneTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ZoneTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ZoneTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ZONE_TYPE = "zoneType";
  @SerializedName(SERIALIZED_NAME_ZONE_TYPE)
  private ZoneTypeEnum zoneType = ZoneTypeEnum.PUBLIC;

  public ZoneProperties() {
  }

  public ZoneProperties(
     Long maxNumberOfRecordSets, 
     List<String> nameServers, 
     Long numberOfRecordSets
  ) {
    this();
    this.maxNumberOfRecordSets = maxNumberOfRecordSets;
    this.nameServers = nameServers;
    this.numberOfRecordSets = numberOfRecordSets;
  }

  /**
   * The maximum number of record sets that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
   * @return maxNumberOfRecordSets
   */
  @javax.annotation.Nullable
  public Long getMaxNumberOfRecordSets() {
    return maxNumberOfRecordSets;
  }



  /**
   * The name servers for this DNS zone. This is a read-only property and any attempt to set this value will be ignored.
   * @return nameServers
   */
  @javax.annotation.Nullable
  public List<String> getNameServers() {
    return nameServers;
  }



  /**
   * The current number of record sets in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
   * @return numberOfRecordSets
   */
  @javax.annotation.Nullable
  public Long getNumberOfRecordSets() {
    return numberOfRecordSets;
  }



  public ZoneProperties registrationVirtualNetworks(List<SubResource> registrationVirtualNetworks) {
    this.registrationVirtualNetworks = registrationVirtualNetworks;
    return this;
  }

  public ZoneProperties addRegistrationVirtualNetworksItem(SubResource registrationVirtualNetworksItem) {
    if (this.registrationVirtualNetworks == null) {
      this.registrationVirtualNetworks = new ArrayList<>();
    }
    this.registrationVirtualNetworks.add(registrationVirtualNetworksItem);
    return this;
  }

  /**
   * A list of references to virtual networks that register hostnames in this DNS zone. This is a only when ZoneType is Private.
   * @return registrationVirtualNetworks
   */
  @javax.annotation.Nullable
  public List<SubResource> getRegistrationVirtualNetworks() {
    return registrationVirtualNetworks;
  }

  public void setRegistrationVirtualNetworks(List<SubResource> registrationVirtualNetworks) {
    this.registrationVirtualNetworks = registrationVirtualNetworks;
  }


  public ZoneProperties resolutionVirtualNetworks(List<SubResource> resolutionVirtualNetworks) {
    this.resolutionVirtualNetworks = resolutionVirtualNetworks;
    return this;
  }

  public ZoneProperties addResolutionVirtualNetworksItem(SubResource resolutionVirtualNetworksItem) {
    if (this.resolutionVirtualNetworks == null) {
      this.resolutionVirtualNetworks = new ArrayList<>();
    }
    this.resolutionVirtualNetworks.add(resolutionVirtualNetworksItem);
    return this;
  }

  /**
   * A list of references to virtual networks that resolve records in this DNS zone. This is a only when ZoneType is Private.
   * @return resolutionVirtualNetworks
   */
  @javax.annotation.Nullable
  public List<SubResource> getResolutionVirtualNetworks() {
    return resolutionVirtualNetworks;
  }

  public void setResolutionVirtualNetworks(List<SubResource> resolutionVirtualNetworks) {
    this.resolutionVirtualNetworks = resolutionVirtualNetworks;
  }


  public ZoneProperties zoneType(ZoneTypeEnum zoneType) {
    this.zoneType = zoneType;
    return this;
  }

  /**
   * The type of this DNS zone (Public or Private).
   * @return zoneType
   */
  @javax.annotation.Nullable
  public ZoneTypeEnum getZoneType() {
    return zoneType;
  }

  public void setZoneType(ZoneTypeEnum zoneType) {
    this.zoneType = zoneType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ZoneProperties zoneProperties = (ZoneProperties) o;
    return Objects.equals(this.maxNumberOfRecordSets, zoneProperties.maxNumberOfRecordSets) &&
        Objects.equals(this.nameServers, zoneProperties.nameServers) &&
        Objects.equals(this.numberOfRecordSets, zoneProperties.numberOfRecordSets) &&
        Objects.equals(this.registrationVirtualNetworks, zoneProperties.registrationVirtualNetworks) &&
        Objects.equals(this.resolutionVirtualNetworks, zoneProperties.resolutionVirtualNetworks) &&
        Objects.equals(this.zoneType, zoneProperties.zoneType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxNumberOfRecordSets, nameServers, numberOfRecordSets, registrationVirtualNetworks, resolutionVirtualNetworks, zoneType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ZoneProperties {\n");
    sb.append("    maxNumberOfRecordSets: ").append(toIndentedString(maxNumberOfRecordSets)).append("\n");
    sb.append("    nameServers: ").append(toIndentedString(nameServers)).append("\n");
    sb.append("    numberOfRecordSets: ").append(toIndentedString(numberOfRecordSets)).append("\n");
    sb.append("    registrationVirtualNetworks: ").append(toIndentedString(registrationVirtualNetworks)).append("\n");
    sb.append("    resolutionVirtualNetworks: ").append(toIndentedString(resolutionVirtualNetworks)).append("\n");
    sb.append("    zoneType: ").append(toIndentedString(zoneType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maxNumberOfRecordSets");
    openapiFields.add("nameServers");
    openapiFields.add("numberOfRecordSets");
    openapiFields.add("registrationVirtualNetworks");
    openapiFields.add("resolutionVirtualNetworks");
    openapiFields.add("zoneType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ZoneProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ZoneProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ZoneProperties is not found in the empty JSON string", ZoneProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ZoneProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ZoneProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("nameServers") != null && !jsonObj.get("nameServers").isJsonNull() && !jsonObj.get("nameServers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameServers` to be an array in the JSON string but got `%s`", jsonObj.get("nameServers").toString()));
      }
      if (jsonObj.get("registrationVirtualNetworks") != null && !jsonObj.get("registrationVirtualNetworks").isJsonNull()) {
        JsonArray jsonArrayregistrationVirtualNetworks = jsonObj.getAsJsonArray("registrationVirtualNetworks");
        if (jsonArrayregistrationVirtualNetworks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("registrationVirtualNetworks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `registrationVirtualNetworks` to be an array in the JSON string but got `%s`", jsonObj.get("registrationVirtualNetworks").toString()));
          }

          // validate the optional field `registrationVirtualNetworks` (array)
          for (int i = 0; i < jsonArrayregistrationVirtualNetworks.size(); i++) {
            SubResource.validateJsonElement(jsonArrayregistrationVirtualNetworks.get(i));
          };
        }
      }
      if (jsonObj.get("resolutionVirtualNetworks") != null && !jsonObj.get("resolutionVirtualNetworks").isJsonNull()) {
        JsonArray jsonArrayresolutionVirtualNetworks = jsonObj.getAsJsonArray("resolutionVirtualNetworks");
        if (jsonArrayresolutionVirtualNetworks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resolutionVirtualNetworks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resolutionVirtualNetworks` to be an array in the JSON string but got `%s`", jsonObj.get("resolutionVirtualNetworks").toString()));
          }

          // validate the optional field `resolutionVirtualNetworks` (array)
          for (int i = 0; i < jsonArrayresolutionVirtualNetworks.size(); i++) {
            SubResource.validateJsonElement(jsonArrayresolutionVirtualNetworks.get(i));
          };
        }
      }
      if ((jsonObj.get("zoneType") != null && !jsonObj.get("zoneType").isJsonNull()) && !jsonObj.get("zoneType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zoneType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zoneType").toString()));
      }
      // validate the optional field `zoneType`
      if (jsonObj.get("zoneType") != null && !jsonObj.get("zoneType").isJsonNull()) {
        ZoneTypeEnum.validateJsonElement(jsonObj.get("zoneType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ZoneProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ZoneProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ZoneProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ZoneProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ZoneProperties>() {
           @Override
           public void write(JsonWriter out, ZoneProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ZoneProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ZoneProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ZoneProperties
   * @throws IOException if the JSON string is invalid with respect to ZoneProperties
   */
  public static ZoneProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ZoneProperties.class);
  }

  /**
   * Convert an instance of ZoneProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

