/*
 * DnsManagementClient
 * The DNS Management Client.
 *
 * The version of the OpenAPI document: 2017-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.Zone;
import org.openapitools.client.model.ZoneListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ZonesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ZonesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ZonesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for zonesCreateOrUpdate
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param zoneName The name of the DNS zone (without a terminating dot). (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate operation. (required)
     * @param ifMatch The etag of the DNS zone. Omit this value to always overwrite the current zone. Specify the last-seen etag value to prevent accidentally overwriting any concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new DNS zone to be created, but to prevent updating an existing zone. Other values will be ignored. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The DNS zone has been updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The DNS zone has been created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zonesCreateOrUpdateCall(String resourceGroupName, String zoneName, String apiVersion, String subscriptionId, Zone parameters, String ifMatch, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "zoneName" + "}", localVarApiClient.escapeString(zoneName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zonesCreateOrUpdateValidateBeforeCall(String resourceGroupName, String zoneName, String apiVersion, String subscriptionId, Zone parameters, String ifMatch, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling zonesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'zoneName' is set
        if (zoneName == null) {
            throw new ApiException("Missing the required parameter 'zoneName' when calling zonesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling zonesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling zonesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling zonesCreateOrUpdate(Async)");
        }

        return zonesCreateOrUpdateCall(resourceGroupName, zoneName, apiVersion, subscriptionId, parameters, ifMatch, ifNoneMatch, _callback);

    }

    /**
     * 
     * Creates or updates a DNS zone. Does not modify DNS records within the zone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param zoneName The name of the DNS zone (without a terminating dot). (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate operation. (required)
     * @param ifMatch The etag of the DNS zone. Omit this value to always overwrite the current zone. Specify the last-seen etag value to prevent accidentally overwriting any concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new DNS zone to be created, but to prevent updating an existing zone. Other values will be ignored. (optional)
     * @return Zone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The DNS zone has been updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The DNS zone has been created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public Zone zonesCreateOrUpdate(String resourceGroupName, String zoneName, String apiVersion, String subscriptionId, Zone parameters, String ifMatch, String ifNoneMatch) throws ApiException {
        ApiResponse<Zone> localVarResp = zonesCreateOrUpdateWithHttpInfo(resourceGroupName, zoneName, apiVersion, subscriptionId, parameters, ifMatch, ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a DNS zone. Does not modify DNS records within the zone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param zoneName The name of the DNS zone (without a terminating dot). (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate operation. (required)
     * @param ifMatch The etag of the DNS zone. Omit this value to always overwrite the current zone. Specify the last-seen etag value to prevent accidentally overwriting any concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new DNS zone to be created, but to prevent updating an existing zone. Other values will be ignored. (optional)
     * @return ApiResponse&lt;Zone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The DNS zone has been updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The DNS zone has been created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Zone> zonesCreateOrUpdateWithHttpInfo(String resourceGroupName, String zoneName, String apiVersion, String subscriptionId, Zone parameters, String ifMatch, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = zonesCreateOrUpdateValidateBeforeCall(resourceGroupName, zoneName, apiVersion, subscriptionId, parameters, ifMatch, ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<Zone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a DNS zone. Does not modify DNS records within the zone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param zoneName The name of the DNS zone (without a terminating dot). (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters supplied to the CreateOrUpdate operation. (required)
     * @param ifMatch The etag of the DNS zone. Omit this value to always overwrite the current zone. Specify the last-seen etag value to prevent accidentally overwriting any concurrent changes. (optional)
     * @param ifNoneMatch Set to &#39;*&#39; to allow a new DNS zone to be created, but to prevent updating an existing zone. Other values will be ignored. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The DNS zone has been updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The DNS zone has been created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zonesCreateOrUpdateAsync(String resourceGroupName, String zoneName, String apiVersion, String subscriptionId, Zone parameters, String ifMatch, String ifNoneMatch, final ApiCallback<Zone> _callback) throws ApiException {

        okhttp3.Call localVarCall = zonesCreateOrUpdateValidateBeforeCall(resourceGroupName, zoneName, apiVersion, subscriptionId, parameters, ifMatch, ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<Zone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zonesDelete
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param zoneName The name of the DNS zone (without a terminating dot). (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The etag of the DNS zone. Omit this value to always delete the current zone. Specify the last-seen etag value to prevent accidentally deleting any concurrent changes. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The DNS zone has been deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The DNS zone delete operation has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The DNS zone was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zonesDeleteCall(String resourceGroupName, String zoneName, String apiVersion, String subscriptionId, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "zoneName" + "}", localVarApiClient.escapeString(zoneName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zonesDeleteValidateBeforeCall(String resourceGroupName, String zoneName, String apiVersion, String subscriptionId, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling zonesDelete(Async)");
        }

        // verify the required parameter 'zoneName' is set
        if (zoneName == null) {
            throw new ApiException("Missing the required parameter 'zoneName' when calling zonesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling zonesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling zonesDelete(Async)");
        }

        return zonesDeleteCall(resourceGroupName, zoneName, apiVersion, subscriptionId, ifMatch, _callback);

    }

    /**
     * 
     * Deletes a DNS zone. WARNING: All DNS records in the zone will also be deleted. This operation cannot be undone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param zoneName The name of the DNS zone (without a terminating dot). (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The etag of the DNS zone. Omit this value to always delete the current zone. Specify the last-seen etag value to prevent accidentally deleting any concurrent changes. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The DNS zone has been deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The DNS zone delete operation has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The DNS zone was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public void zonesDelete(String resourceGroupName, String zoneName, String apiVersion, String subscriptionId, String ifMatch) throws ApiException {
        zonesDeleteWithHttpInfo(resourceGroupName, zoneName, apiVersion, subscriptionId, ifMatch);
    }

    /**
     * 
     * Deletes a DNS zone. WARNING: All DNS records in the zone will also be deleted. This operation cannot be undone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param zoneName The name of the DNS zone (without a terminating dot). (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The etag of the DNS zone. Omit this value to always delete the current zone. Specify the last-seen etag value to prevent accidentally deleting any concurrent changes. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The DNS zone has been deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The DNS zone delete operation has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The DNS zone was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> zonesDeleteWithHttpInfo(String resourceGroupName, String zoneName, String apiVersion, String subscriptionId, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = zonesDeleteValidateBeforeCall(resourceGroupName, zoneName, apiVersion, subscriptionId, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a DNS zone. WARNING: All DNS records in the zone will also be deleted. This operation cannot be undone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param zoneName The name of the DNS zone (without a terminating dot). (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param ifMatch The etag of the DNS zone. Omit this value to always delete the current zone. Specify the last-seen etag value to prevent accidentally deleting any concurrent changes. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The DNS zone has been deleted. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The DNS zone delete operation has been accepted and will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The DNS zone was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zonesDeleteAsync(String resourceGroupName, String zoneName, String apiVersion, String subscriptionId, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = zonesDeleteValidateBeforeCall(resourceGroupName, zoneName, apiVersion, subscriptionId, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for zonesGet
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param zoneName The name of the DNS zone (without a terminating dot). (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zonesGetCall(String resourceGroupName, String zoneName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "zoneName" + "}", localVarApiClient.escapeString(zoneName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zonesGetValidateBeforeCall(String resourceGroupName, String zoneName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling zonesGet(Async)");
        }

        // verify the required parameter 'zoneName' is set
        if (zoneName == null) {
            throw new ApiException("Missing the required parameter 'zoneName' when calling zonesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling zonesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling zonesGet(Async)");
        }

        return zonesGetCall(resourceGroupName, zoneName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets a DNS zone. Retrieves the zone properties, but not the record sets within the zone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param zoneName The name of the DNS zone (without a terminating dot). (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return Zone
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public Zone zonesGet(String resourceGroupName, String zoneName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<Zone> localVarResp = zonesGetWithHttpInfo(resourceGroupName, zoneName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a DNS zone. Retrieves the zone properties, but not the record sets within the zone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param zoneName The name of the DNS zone (without a terminating dot). (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ApiResponse&lt;Zone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Zone> zonesGetWithHttpInfo(String resourceGroupName, String zoneName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = zonesGetValidateBeforeCall(resourceGroupName, zoneName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<Zone>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a DNS zone. Retrieves the zone properties, but not the record sets within the zone.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param zoneName The name of the DNS zone (without a terminating dot). (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zonesGetAsync(String resourceGroupName, String zoneName, String apiVersion, String subscriptionId, final ApiCallback<Zone> _callback) throws ApiException {

        okhttp3.Call localVarCall = zonesGetValidateBeforeCall(resourceGroupName, zoneName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<Zone>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zonesList
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $top The maximum number of DNS zones to return. If not specified, returns up to 100 zones. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zonesListCall(String apiVersion, String subscriptionId, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/dnszones"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zonesListValidateBeforeCall(String apiVersion, String subscriptionId, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling zonesList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling zonesList(Async)");
        }

        return zonesListCall(apiVersion, subscriptionId, $top, _callback);

    }

    /**
     * 
     * Lists the DNS zones in all resource groups in a subscription.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $top The maximum number of DNS zones to return. If not specified, returns up to 100 zones. (optional)
     * @return ZoneListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public ZoneListResult zonesList(String apiVersion, String subscriptionId, Integer $top) throws ApiException {
        ApiResponse<ZoneListResult> localVarResp = zonesListWithHttpInfo(apiVersion, subscriptionId, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the DNS zones in all resource groups in a subscription.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $top The maximum number of DNS zones to return. If not specified, returns up to 100 zones. (optional)
     * @return ApiResponse&lt;ZoneListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneListResult> zonesListWithHttpInfo(String apiVersion, String subscriptionId, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = zonesListValidateBeforeCall(apiVersion, subscriptionId, $top, null);
        Type localVarReturnType = new TypeToken<ZoneListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the DNS zones in all resource groups in a subscription.
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $top The maximum number of DNS zones to return. If not specified, returns up to 100 zones. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zonesListAsync(String apiVersion, String subscriptionId, Integer $top, final ApiCallback<ZoneListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = zonesListValidateBeforeCall(apiVersion, subscriptionId, $top, _callback);
        Type localVarReturnType = new TypeToken<ZoneListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for zonesListByResourceGroup
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $top The maximum number of record sets to return. If not specified, returns up to 100 record sets. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zonesListByResourceGroupCall(String resourceGroupName, String apiVersion, String subscriptionId, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call zonesListByResourceGroupValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling zonesListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling zonesListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling zonesListByResourceGroup(Async)");
        }

        return zonesListByResourceGroupCall(resourceGroupName, apiVersion, subscriptionId, $top, _callback);

    }

    /**
     * 
     * Lists the DNS zones within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $top The maximum number of record sets to return. If not specified, returns up to 100 record sets. (optional)
     * @return ZoneListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public ZoneListResult zonesListByResourceGroup(String resourceGroupName, String apiVersion, String subscriptionId, Integer $top) throws ApiException {
        ApiResponse<ZoneListResult> localVarResp = zonesListByResourceGroupWithHttpInfo(resourceGroupName, apiVersion, subscriptionId, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the DNS zones within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $top The maximum number of record sets to return. If not specified, returns up to 100 record sets. (optional)
     * @return ApiResponse&lt;ZoneListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ZoneListResult> zonesListByResourceGroupWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = zonesListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, $top, null);
        Type localVarReturnType = new TypeToken<ZoneListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the DNS zones within a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param $top The maximum number of record sets to return. If not specified, returns up to 100 record sets. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response. It will be deserialized as per the Error definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call zonesListByResourceGroupAsync(String resourceGroupName, String apiVersion, String subscriptionId, Integer $top, final ApiCallback<ZoneListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = zonesListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, $top, _callback);
        Type localVarReturnType = new TypeToken<ZoneListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
