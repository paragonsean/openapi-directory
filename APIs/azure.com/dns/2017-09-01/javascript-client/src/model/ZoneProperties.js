/**
 * DnsManagementClient
 * The DNS Management Client.
 *
 * The version of the OpenAPI document: 2017-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ZoneProperties model module.
 * @module model/ZoneProperties
 * @version 2017-09-01
 */
class ZoneProperties {
    /**
     * Constructs a new <code>ZoneProperties</code>.
     * Represents the properties of the zone.
     * @alias module:model/ZoneProperties
     */
    constructor() { 
        
        ZoneProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ZoneProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ZoneProperties} obj Optional instance to populate.
     * @return {module:model/ZoneProperties} The populated <code>ZoneProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ZoneProperties();

            if (data.hasOwnProperty('maxNumberOfRecordSets')) {
                obj['maxNumberOfRecordSets'] = ApiClient.convertToType(data['maxNumberOfRecordSets'], 'Number');
            }
            if (data.hasOwnProperty('nameServers')) {
                obj['nameServers'] = ApiClient.convertToType(data['nameServers'], ['String']);
            }
            if (data.hasOwnProperty('numberOfRecordSets')) {
                obj['numberOfRecordSets'] = ApiClient.convertToType(data['numberOfRecordSets'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ZoneProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ZoneProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['nameServers'])) {
            throw new Error("Expected the field `nameServers` to be an array in the JSON data but got " + data['nameServers']);
        }

        return true;
    }


}



/**
 * The maximum number of record sets that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
 * @member {Number} maxNumberOfRecordSets
 */
ZoneProperties.prototype['maxNumberOfRecordSets'] = undefined;

/**
 * The name servers for this DNS zone. This is a read-only property and any attempt to set this value will be ignored.
 * @member {Array.<String>} nameServers
 */
ZoneProperties.prototype['nameServers'] = undefined;

/**
 * The current number of record sets in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.
 * @member {Number} numberOfRecordSets
 */
ZoneProperties.prototype['numberOfRecordSets'] = undefined;






export default ZoneProperties;

