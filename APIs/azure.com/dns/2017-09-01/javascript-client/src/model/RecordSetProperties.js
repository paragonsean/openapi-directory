/**
 * DnsManagementClient
 * The DNS Management Client.
 *
 * The version of the OpenAPI document: 2017-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ARecord from './ARecord';
import AaaaRecord from './AaaaRecord';
import CaaRecord from './CaaRecord';
import CnameRecord from './CnameRecord';
import MxRecord from './MxRecord';
import NsRecord from './NsRecord';
import PtrRecord from './PtrRecord';
import SoaRecord from './SoaRecord';
import SrvRecord from './SrvRecord';
import TxtRecord from './TxtRecord';

/**
 * The RecordSetProperties model module.
 * @module model/RecordSetProperties
 * @version 2017-09-01
 */
class RecordSetProperties {
    /**
     * Constructs a new <code>RecordSetProperties</code>.
     * Represents the properties of the records in the record set.
     * @alias module:model/RecordSetProperties
     */
    constructor() { 
        
        RecordSetProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RecordSetProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecordSetProperties} obj Optional instance to populate.
     * @return {module:model/RecordSetProperties} The populated <code>RecordSetProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecordSetProperties();

            if (data.hasOwnProperty('AAAARecords')) {
                obj['AAAARecords'] = ApiClient.convertToType(data['AAAARecords'], [AaaaRecord]);
            }
            if (data.hasOwnProperty('ARecords')) {
                obj['ARecords'] = ApiClient.convertToType(data['ARecords'], [ARecord]);
            }
            if (data.hasOwnProperty('CNAMERecord')) {
                obj['CNAMERecord'] = CnameRecord.constructFromObject(data['CNAMERecord']);
            }
            if (data.hasOwnProperty('MXRecords')) {
                obj['MXRecords'] = ApiClient.convertToType(data['MXRecords'], [MxRecord]);
            }
            if (data.hasOwnProperty('NSRecords')) {
                obj['NSRecords'] = ApiClient.convertToType(data['NSRecords'], [NsRecord]);
            }
            if (data.hasOwnProperty('PTRRecords')) {
                obj['PTRRecords'] = ApiClient.convertToType(data['PTRRecords'], [PtrRecord]);
            }
            if (data.hasOwnProperty('SOARecord')) {
                obj['SOARecord'] = SoaRecord.constructFromObject(data['SOARecord']);
            }
            if (data.hasOwnProperty('SRVRecords')) {
                obj['SRVRecords'] = ApiClient.convertToType(data['SRVRecords'], [SrvRecord]);
            }
            if (data.hasOwnProperty('TTL')) {
                obj['TTL'] = ApiClient.convertToType(data['TTL'], 'Number');
            }
            if (data.hasOwnProperty('TXTRecords')) {
                obj['TXTRecords'] = ApiClient.convertToType(data['TXTRecords'], [TxtRecord]);
            }
            if (data.hasOwnProperty('caaRecords')) {
                obj['caaRecords'] = ApiClient.convertToType(data['caaRecords'], [CaaRecord]);
            }
            if (data.hasOwnProperty('fqdn')) {
                obj['fqdn'] = ApiClient.convertToType(data['fqdn'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecordSetProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecordSetProperties</code>.
     */
    static validateJSON(data) {
        if (data['AAAARecords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['AAAARecords'])) {
                throw new Error("Expected the field `AAAARecords` to be an array in the JSON data but got " + data['AAAARecords']);
            }
            // validate the optional field `AAAARecords` (array)
            for (const item of data['AAAARecords']) {
                AaaaRecord.validateJSON(item);
            };
        }
        if (data['ARecords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ARecords'])) {
                throw new Error("Expected the field `ARecords` to be an array in the JSON data but got " + data['ARecords']);
            }
            // validate the optional field `ARecords` (array)
            for (const item of data['ARecords']) {
                ARecord.validateJSON(item);
            };
        }
        // validate the optional field `CNAMERecord`
        if (data['CNAMERecord']) { // data not null
          CnameRecord.validateJSON(data['CNAMERecord']);
        }
        if (data['MXRecords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['MXRecords'])) {
                throw new Error("Expected the field `MXRecords` to be an array in the JSON data but got " + data['MXRecords']);
            }
            // validate the optional field `MXRecords` (array)
            for (const item of data['MXRecords']) {
                MxRecord.validateJSON(item);
            };
        }
        if (data['NSRecords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['NSRecords'])) {
                throw new Error("Expected the field `NSRecords` to be an array in the JSON data but got " + data['NSRecords']);
            }
            // validate the optional field `NSRecords` (array)
            for (const item of data['NSRecords']) {
                NsRecord.validateJSON(item);
            };
        }
        if (data['PTRRecords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['PTRRecords'])) {
                throw new Error("Expected the field `PTRRecords` to be an array in the JSON data but got " + data['PTRRecords']);
            }
            // validate the optional field `PTRRecords` (array)
            for (const item of data['PTRRecords']) {
                PtrRecord.validateJSON(item);
            };
        }
        // validate the optional field `SOARecord`
        if (data['SOARecord']) { // data not null
          SoaRecord.validateJSON(data['SOARecord']);
        }
        if (data['SRVRecords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['SRVRecords'])) {
                throw new Error("Expected the field `SRVRecords` to be an array in the JSON data but got " + data['SRVRecords']);
            }
            // validate the optional field `SRVRecords` (array)
            for (const item of data['SRVRecords']) {
                SrvRecord.validateJSON(item);
            };
        }
        if (data['TXTRecords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['TXTRecords'])) {
                throw new Error("Expected the field `TXTRecords` to be an array in the JSON data but got " + data['TXTRecords']);
            }
            // validate the optional field `TXTRecords` (array)
            for (const item of data['TXTRecords']) {
                TxtRecord.validateJSON(item);
            };
        }
        if (data['caaRecords']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['caaRecords'])) {
                throw new Error("Expected the field `caaRecords` to be an array in the JSON data but got " + data['caaRecords']);
            }
            // validate the optional field `caaRecords` (array)
            for (const item of data['caaRecords']) {
                CaaRecord.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['fqdn'] && !(typeof data['fqdn'] === 'string' || data['fqdn'] instanceof String)) {
            throw new Error("Expected the field `fqdn` to be a primitive type in the JSON string but got " + data['fqdn']);
        }

        return true;
    }


}



/**
 * The list of AAAA records in the record set.
 * @member {Array.<module:model/AaaaRecord>} AAAARecords
 */
RecordSetProperties.prototype['AAAARecords'] = undefined;

/**
 * The list of A records in the record set.
 * @member {Array.<module:model/ARecord>} ARecords
 */
RecordSetProperties.prototype['ARecords'] = undefined;

/**
 * @member {module:model/CnameRecord} CNAMERecord
 */
RecordSetProperties.prototype['CNAMERecord'] = undefined;

/**
 * The list of MX records in the record set.
 * @member {Array.<module:model/MxRecord>} MXRecords
 */
RecordSetProperties.prototype['MXRecords'] = undefined;

/**
 * The list of NS records in the record set.
 * @member {Array.<module:model/NsRecord>} NSRecords
 */
RecordSetProperties.prototype['NSRecords'] = undefined;

/**
 * The list of PTR records in the record set.
 * @member {Array.<module:model/PtrRecord>} PTRRecords
 */
RecordSetProperties.prototype['PTRRecords'] = undefined;

/**
 * @member {module:model/SoaRecord} SOARecord
 */
RecordSetProperties.prototype['SOARecord'] = undefined;

/**
 * The list of SRV records in the record set.
 * @member {Array.<module:model/SrvRecord>} SRVRecords
 */
RecordSetProperties.prototype['SRVRecords'] = undefined;

/**
 * The TTL (time-to-live) of the records in the record set.
 * @member {Number} TTL
 */
RecordSetProperties.prototype['TTL'] = undefined;

/**
 * The list of TXT records in the record set.
 * @member {Array.<module:model/TxtRecord>} TXTRecords
 */
RecordSetProperties.prototype['TXTRecords'] = undefined;

/**
 * The list of CAA records in the record set.
 * @member {Array.<module:model/CaaRecord>} caaRecords
 */
RecordSetProperties.prototype['caaRecords'] = undefined;

/**
 * Fully qualified domain name of the record set.
 * @member {String} fqdn
 */
RecordSetProperties.prototype['fqdn'] = undefined;

/**
 * The metadata attached to the record set.
 * @member {Object.<String, String>} metadata
 */
RecordSetProperties.prototype['metadata'] = undefined;






export default RecordSetProperties;

