/**
 * DnsManagementClient
 * The DNS Management Client.
 *
 * The version of the OpenAPI document: 2017-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import ARecord from './model/ARecord';
import AaaaRecord from './model/AaaaRecord';
import CaaRecord from './model/CaaRecord';
import CloudError from './model/CloudError';
import CloudErrorBody from './model/CloudErrorBody';
import CnameRecord from './model/CnameRecord';
import MxRecord from './model/MxRecord';
import NsRecord from './model/NsRecord';
import PtrRecord from './model/PtrRecord';
import RecordSet from './model/RecordSet';
import RecordSetListResult from './model/RecordSetListResult';
import RecordSetProperties from './model/RecordSetProperties';
import RecordSetUpdateParameters from './model/RecordSetUpdateParameters';
import SoaRecord from './model/SoaRecord';
import SrvRecord from './model/SrvRecord';
import SubResource from './model/SubResource';
import TxtRecord from './model/TxtRecord';
import Zone from './model/Zone';
import ZoneListResult from './model/ZoneListResult';
import ZoneProperties from './model/ZoneProperties';
import RecordSetsApi from './api/RecordSetsApi';
import ZonesApi from './api/ZonesApi';


/**
* The DNS Management Client..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var DnsManagementClient = require('index'); // See note below*.
* var xxxSvc = new DnsManagementClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new DnsManagementClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new DnsManagementClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new DnsManagementClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2017-09-01
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ARecord model constructor.
     * @property {module:model/ARecord}
     */
    ARecord,

    /**
     * The AaaaRecord model constructor.
     * @property {module:model/AaaaRecord}
     */
    AaaaRecord,

    /**
     * The CaaRecord model constructor.
     * @property {module:model/CaaRecord}
     */
    CaaRecord,

    /**
     * The CloudError model constructor.
     * @property {module:model/CloudError}
     */
    CloudError,

    /**
     * The CloudErrorBody model constructor.
     * @property {module:model/CloudErrorBody}
     */
    CloudErrorBody,

    /**
     * The CnameRecord model constructor.
     * @property {module:model/CnameRecord}
     */
    CnameRecord,

    /**
     * The MxRecord model constructor.
     * @property {module:model/MxRecord}
     */
    MxRecord,

    /**
     * The NsRecord model constructor.
     * @property {module:model/NsRecord}
     */
    NsRecord,

    /**
     * The PtrRecord model constructor.
     * @property {module:model/PtrRecord}
     */
    PtrRecord,

    /**
     * The RecordSet model constructor.
     * @property {module:model/RecordSet}
     */
    RecordSet,

    /**
     * The RecordSetListResult model constructor.
     * @property {module:model/RecordSetListResult}
     */
    RecordSetListResult,

    /**
     * The RecordSetProperties model constructor.
     * @property {module:model/RecordSetProperties}
     */
    RecordSetProperties,

    /**
     * The RecordSetUpdateParameters model constructor.
     * @property {module:model/RecordSetUpdateParameters}
     */
    RecordSetUpdateParameters,

    /**
     * The SoaRecord model constructor.
     * @property {module:model/SoaRecord}
     */
    SoaRecord,

    /**
     * The SrvRecord model constructor.
     * @property {module:model/SrvRecord}
     */
    SrvRecord,

    /**
     * The SubResource model constructor.
     * @property {module:model/SubResource}
     */
    SubResource,

    /**
     * The TxtRecord model constructor.
     * @property {module:model/TxtRecord}
     */
    TxtRecord,

    /**
     * The Zone model constructor.
     * @property {module:model/Zone}
     */
    Zone,

    /**
     * The ZoneListResult model constructor.
     * @property {module:model/ZoneListResult}
     */
    ZoneListResult,

    /**
     * The ZoneProperties model constructor.
     * @property {module:model/ZoneProperties}
     */
    ZoneProperties,

    /**
    * The RecordSetsApi service constructor.
    * @property {module:api/RecordSetsApi}
    */
    RecordSetsApi,

    /**
    * The ZonesApi service constructor.
    * @property {module:api/ZonesApi}
    */
    ZonesApi
};
