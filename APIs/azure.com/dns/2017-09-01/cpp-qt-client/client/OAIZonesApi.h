/**
 * DnsManagementClient
 * The DNS Management Client.
 *
 * The version of the OpenAPI document: 2017-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIZonesApi_H
#define OAI_OAIZonesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIZone.h"
#include "OAIZoneListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIZonesApi : public QObject {
    Q_OBJECT

public:
    OAIZonesApi(const int timeOut = 0);
    ~OAIZonesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  zone_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIZone [required]
    * @param[in]  if_match QString [optional]
    * @param[in]  if_none_match QString [optional]
    */
    virtual void zonesCreateOrUpdate(const QString &resource_group_name, const QString &zone_name, const QString &api_version, const QString &subscription_id, const OAIZone &parameters, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &if_none_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  zone_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void zonesDelete(const QString &resource_group_name, const QString &zone_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  zone_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void zonesGet(const QString &resource_group_name, const QString &zone_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void zonesList(const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void zonesListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void zonesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void zonesDeleteCallback(OAIHttpRequestWorker *worker);
    void zonesGetCallback(OAIHttpRequestWorker *worker);
    void zonesListCallback(OAIHttpRequestWorker *worker);
    void zonesListByResourceGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void zonesCreateOrUpdateSignal(OAIZone summary);
    void zonesDeleteSignal();
    void zonesGetSignal(OAIZone summary);
    void zonesListSignal(OAIZoneListResult summary);
    void zonesListByResourceGroupSignal(OAIZoneListResult summary);


    void zonesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIZone summary);
    void zonesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void zonesGetSignalFull(OAIHttpRequestWorker *worker, OAIZone summary);
    void zonesListSignalFull(OAIHttpRequestWorker *worker, OAIZoneListResult summary);
    void zonesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIZoneListResult summary);

    Q_DECL_DEPRECATED_X("Use zonesCreateOrUpdateSignalError() instead")
    void zonesCreateOrUpdateSignalE(OAIZone summary, QNetworkReply::NetworkError error_type, QString error_str);
    void zonesCreateOrUpdateSignalError(OAIZone summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use zonesDeleteSignalError() instead")
    void zonesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void zonesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use zonesGetSignalError() instead")
    void zonesGetSignalE(OAIZone summary, QNetworkReply::NetworkError error_type, QString error_str);
    void zonesGetSignalError(OAIZone summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use zonesListSignalError() instead")
    void zonesListSignalE(OAIZoneListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void zonesListSignalError(OAIZoneListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use zonesListByResourceGroupSignalError() instead")
    void zonesListByResourceGroupSignalE(OAIZoneListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void zonesListByResourceGroupSignalError(OAIZoneListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use zonesCreateOrUpdateSignalErrorFull() instead")
    void zonesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void zonesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use zonesDeleteSignalErrorFull() instead")
    void zonesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void zonesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use zonesGetSignalErrorFull() instead")
    void zonesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void zonesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use zonesListSignalErrorFull() instead")
    void zonesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void zonesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use zonesListByResourceGroupSignalErrorFull() instead")
    void zonesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void zonesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
