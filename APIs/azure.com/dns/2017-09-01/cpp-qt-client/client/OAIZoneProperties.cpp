/**
 * DnsManagementClient
 * The DNS Management Client.
 *
 * The version of the OpenAPI document: 2017-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIZoneProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIZoneProperties::OAIZoneProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIZoneProperties::OAIZoneProperties() {
    this->initializeModel();
}

OAIZoneProperties::~OAIZoneProperties() {}

void OAIZoneProperties::initializeModel() {

    m_max_number_of_record_sets_isSet = false;
    m_max_number_of_record_sets_isValid = false;

    m_name_servers_isSet = false;
    m_name_servers_isValid = false;

    m_number_of_record_sets_isSet = false;
    m_number_of_record_sets_isValid = false;
}

void OAIZoneProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIZoneProperties::fromJsonObject(QJsonObject json) {

    m_max_number_of_record_sets_isValid = ::OpenAPI::fromJsonValue(m_max_number_of_record_sets, json[QString("maxNumberOfRecordSets")]);
    m_max_number_of_record_sets_isSet = !json[QString("maxNumberOfRecordSets")].isNull() && m_max_number_of_record_sets_isValid;

    m_name_servers_isValid = ::OpenAPI::fromJsonValue(m_name_servers, json[QString("nameServers")]);
    m_name_servers_isSet = !json[QString("nameServers")].isNull() && m_name_servers_isValid;

    m_number_of_record_sets_isValid = ::OpenAPI::fromJsonValue(m_number_of_record_sets, json[QString("numberOfRecordSets")]);
    m_number_of_record_sets_isSet = !json[QString("numberOfRecordSets")].isNull() && m_number_of_record_sets_isValid;
}

QString OAIZoneProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIZoneProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_max_number_of_record_sets_isSet) {
        obj.insert(QString("maxNumberOfRecordSets"), ::OpenAPI::toJsonValue(m_max_number_of_record_sets));
    }
    if (m_name_servers.size() > 0) {
        obj.insert(QString("nameServers"), ::OpenAPI::toJsonValue(m_name_servers));
    }
    if (m_number_of_record_sets_isSet) {
        obj.insert(QString("numberOfRecordSets"), ::OpenAPI::toJsonValue(m_number_of_record_sets));
    }
    return obj;
}

qint64 OAIZoneProperties::getMaxNumberOfRecordSets() const {
    return m_max_number_of_record_sets;
}
void OAIZoneProperties::setMaxNumberOfRecordSets(const qint64 &max_number_of_record_sets) {
    m_max_number_of_record_sets = max_number_of_record_sets;
    m_max_number_of_record_sets_isSet = true;
}

bool OAIZoneProperties::is_max_number_of_record_sets_Set() const{
    return m_max_number_of_record_sets_isSet;
}

bool OAIZoneProperties::is_max_number_of_record_sets_Valid() const{
    return m_max_number_of_record_sets_isValid;
}

QList<QString> OAIZoneProperties::getNameServers() const {
    return m_name_servers;
}
void OAIZoneProperties::setNameServers(const QList<QString> &name_servers) {
    m_name_servers = name_servers;
    m_name_servers_isSet = true;
}

bool OAIZoneProperties::is_name_servers_Set() const{
    return m_name_servers_isSet;
}

bool OAIZoneProperties::is_name_servers_Valid() const{
    return m_name_servers_isValid;
}

qint64 OAIZoneProperties::getNumberOfRecordSets() const {
    return m_number_of_record_sets;
}
void OAIZoneProperties::setNumberOfRecordSets(const qint64 &number_of_record_sets) {
    m_number_of_record_sets = number_of_record_sets;
    m_number_of_record_sets_isSet = true;
}

bool OAIZoneProperties::is_number_of_record_sets_Set() const{
    return m_number_of_record_sets_isSet;
}

bool OAIZoneProperties::is_number_of_record_sets_Valid() const{
    return m_number_of_record_sets_isValid;
}

bool OAIZoneProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_number_of_record_sets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_record_sets_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIZoneProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
