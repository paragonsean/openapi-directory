/**
 * DnsManagementClient
 * The DNS Management Client.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DnsManagementClient);
  }
}(this, function(expect, DnsManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DnsManagementClient.RecordSetProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RecordSetProperties', function() {
    it('should create an instance of RecordSetProperties', function() {
      // uncomment below and update the code to test RecordSetProperties
      //var instance = new DnsManagementClient.RecordSetProperties();
      //expect(instance).to.be.a(DnsManagementClient.RecordSetProperties);
    });

    it('should have the property aAAARecords (base name: "AAAARecords")', function() {
      // uncomment below and update the code to test the property aAAARecords
      //var instance = new DnsManagementClient.RecordSetProperties();
      //expect(instance).to.be();
    });

    it('should have the property aRecords (base name: "ARecords")', function() {
      // uncomment below and update the code to test the property aRecords
      //var instance = new DnsManagementClient.RecordSetProperties();
      //expect(instance).to.be();
    });

    it('should have the property cNAMERecord (base name: "CNAMERecord")', function() {
      // uncomment below and update the code to test the property cNAMERecord
      //var instance = new DnsManagementClient.RecordSetProperties();
      //expect(instance).to.be();
    });

    it('should have the property mXRecords (base name: "MXRecords")', function() {
      // uncomment below and update the code to test the property mXRecords
      //var instance = new DnsManagementClient.RecordSetProperties();
      //expect(instance).to.be();
    });

    it('should have the property nSRecords (base name: "NSRecords")', function() {
      // uncomment below and update the code to test the property nSRecords
      //var instance = new DnsManagementClient.RecordSetProperties();
      //expect(instance).to.be();
    });

    it('should have the property pTRRecords (base name: "PTRRecords")', function() {
      // uncomment below and update the code to test the property pTRRecords
      //var instance = new DnsManagementClient.RecordSetProperties();
      //expect(instance).to.be();
    });

    it('should have the property sOARecord (base name: "SOARecord")', function() {
      // uncomment below and update the code to test the property sOARecord
      //var instance = new DnsManagementClient.RecordSetProperties();
      //expect(instance).to.be();
    });

    it('should have the property sRVRecords (base name: "SRVRecords")', function() {
      // uncomment below and update the code to test the property sRVRecords
      //var instance = new DnsManagementClient.RecordSetProperties();
      //expect(instance).to.be();
    });

    it('should have the property TTL (base name: "TTL")', function() {
      // uncomment below and update the code to test the property TTL
      //var instance = new DnsManagementClient.RecordSetProperties();
      //expect(instance).to.be();
    });

    it('should have the property tXTRecords (base name: "TXTRecords")', function() {
      // uncomment below and update the code to test the property tXTRecords
      //var instance = new DnsManagementClient.RecordSetProperties();
      //expect(instance).to.be();
    });

    it('should have the property caaRecords (base name: "caaRecords")', function() {
      // uncomment below and update the code to test the property caaRecords
      //var instance = new DnsManagementClient.RecordSetProperties();
      //expect(instance).to.be();
    });

    it('should have the property fqdn (base name: "fqdn")', function() {
      // uncomment below and update the code to test the property fqdn
      //var instance = new DnsManagementClient.RecordSetProperties();
      //expect(instance).to.be();
    });

    it('should have the property metadata (base name: "metadata")', function() {
      // uncomment below and update the code to test the property metadata
      //var instance = new DnsManagementClient.RecordSetProperties();
      //expect(instance).to.be();
    });

  });

}));
