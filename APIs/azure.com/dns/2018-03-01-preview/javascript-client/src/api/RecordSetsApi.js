/**
 * DnsManagementClient
 * The DNS Management Client.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import RecordSet from '../model/RecordSet';
import RecordSetListResult from '../model/RecordSetListResult';

/**
* RecordSets service.
* @module api/RecordSetsApi
* @version 2018-03-01-preview
*/
export default class RecordSetsApi {

    /**
    * Constructs a new RecordSetsApi. 
    * @alias module:api/RecordSetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the recordSetsCreateOrUpdate operation.
     * @callback module:api/RecordSetsApi~recordSetsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a record set within a DNS zone.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} zoneName The name of the DNS zone (without a terminating dot).
     * @param {String} relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param {module:model/String} recordType The type of DNS record in this record set. Record sets of type SOA can be updated but not created (they are created when the DNS zone is created).
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/RecordSet} parameters Parameters supplied to the CreateOrUpdate operation.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The etag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen etag value to prevent accidentally overwriting any concurrent changes.
     * @param {String} [ifNoneMatch] Set to '*' to allow a new record set to be created, but to prevent updating an existing record set. Other values will be ignored.
     * @param {module:api/RecordSetsApi~recordSetsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordSet}
     */
    recordSetsCreateOrUpdate(resourceGroupName, zoneName, relativeRecordSetName, recordType, apiVersion, subscriptionId, parameters, opts, callback) {
      opts = opts || {};
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recordSetsCreateOrUpdate");
      }
      // verify the required parameter 'zoneName' is set
      if (zoneName === undefined || zoneName === null) {
        throw new Error("Missing the required parameter 'zoneName' when calling recordSetsCreateOrUpdate");
      }
      // verify the required parameter 'relativeRecordSetName' is set
      if (relativeRecordSetName === undefined || relativeRecordSetName === null) {
        throw new Error("Missing the required parameter 'relativeRecordSetName' when calling recordSetsCreateOrUpdate");
      }
      // verify the required parameter 'recordType' is set
      if (recordType === undefined || recordType === null) {
        throw new Error("Missing the required parameter 'recordType' when calling recordSetsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recordSetsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recordSetsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling recordSetsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'zoneName': zoneName,
        'relativeRecordSetName': relativeRecordSetName,
        'recordType': recordType,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch'],
        'If-None-Match': opts['ifNoneMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordSet;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recordSetsDelete operation.
     * @callback module:api/RecordSetsApi~recordSetsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a record set from a DNS zone. This operation cannot be undone.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} zoneName The name of the DNS zone (without a terminating dot).
     * @param {String} relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param {module:model/String} recordType The type of DNS record in this record set. Record sets of type SOA cannot be deleted (they are deleted when the DNS zone is deleted).
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The etag of the record set. Omit this value to always delete the current record set. Specify the last-seen etag value to prevent accidentally deleting any concurrent changes.
     * @param {module:api/RecordSetsApi~recordSetsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    recordSetsDelete(resourceGroupName, zoneName, relativeRecordSetName, recordType, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recordSetsDelete");
      }
      // verify the required parameter 'zoneName' is set
      if (zoneName === undefined || zoneName === null) {
        throw new Error("Missing the required parameter 'zoneName' when calling recordSetsDelete");
      }
      // verify the required parameter 'relativeRecordSetName' is set
      if (relativeRecordSetName === undefined || relativeRecordSetName === null) {
        throw new Error("Missing the required parameter 'relativeRecordSetName' when calling recordSetsDelete");
      }
      // verify the required parameter 'recordType' is set
      if (recordType === undefined || recordType === null) {
        throw new Error("Missing the required parameter 'recordType' when calling recordSetsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recordSetsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recordSetsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'zoneName': zoneName,
        'relativeRecordSetName': relativeRecordSetName,
        'recordType': recordType,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recordSetsGet operation.
     * @callback module:api/RecordSetsApi~recordSetsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a record set.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} zoneName The name of the DNS zone (without a terminating dot).
     * @param {String} relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param {module:model/String} recordType The type of DNS record in this record set.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/RecordSetsApi~recordSetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordSet}
     */
    recordSetsGet(resourceGroupName, zoneName, relativeRecordSetName, recordType, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recordSetsGet");
      }
      // verify the required parameter 'zoneName' is set
      if (zoneName === undefined || zoneName === null) {
        throw new Error("Missing the required parameter 'zoneName' when calling recordSetsGet");
      }
      // verify the required parameter 'relativeRecordSetName' is set
      if (relativeRecordSetName === undefined || relativeRecordSetName === null) {
        throw new Error("Missing the required parameter 'relativeRecordSetName' when calling recordSetsGet");
      }
      // verify the required parameter 'recordType' is set
      if (recordType === undefined || recordType === null) {
        throw new Error("Missing the required parameter 'recordType' when calling recordSetsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recordSetsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recordSetsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'zoneName': zoneName,
        'relativeRecordSetName': relativeRecordSetName,
        'recordType': recordType,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecordSet;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recordSetsListAllByDnsZone operation.
     * @callback module:api/RecordSetsApi~recordSetsListAllByDnsZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordSetListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all record sets in a DNS zone.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} zoneName The name of the DNS zone (without a terminating dot).
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] The maximum number of record sets to return. If not specified, returns up to 100 record sets.
     * @param {String} [recordsetnamesuffix] The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix>
     * @param {module:api/RecordSetsApi~recordSetsListAllByDnsZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordSetListResult}
     */
    recordSetsListAllByDnsZone(resourceGroupName, zoneName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recordSetsListAllByDnsZone");
      }
      // verify the required parameter 'zoneName' is set
      if (zoneName === undefined || zoneName === null) {
        throw new Error("Missing the required parameter 'zoneName' when calling recordSetsListAllByDnsZone");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recordSetsListAllByDnsZone");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recordSetsListAllByDnsZone");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'zoneName': zoneName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$top': opts['top'],
        '$recordsetnamesuffix': opts['recordsetnamesuffix'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecordSetListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recordSetsListByDnsZone operation.
     * @callback module:api/RecordSetsApi~recordSetsListByDnsZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordSetListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all record sets in a DNS zone.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} zoneName The name of the DNS zone (without a terminating dot).
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] The maximum number of record sets to return. If not specified, returns up to 100 record sets.
     * @param {String} [recordsetnamesuffix] The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix>
     * @param {module:api/RecordSetsApi~recordSetsListByDnsZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordSetListResult}
     */
    recordSetsListByDnsZone(resourceGroupName, zoneName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recordSetsListByDnsZone");
      }
      // verify the required parameter 'zoneName' is set
      if (zoneName === undefined || zoneName === null) {
        throw new Error("Missing the required parameter 'zoneName' when calling recordSetsListByDnsZone");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recordSetsListByDnsZone");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recordSetsListByDnsZone");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'zoneName': zoneName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$top': opts['top'],
        '$recordsetnamesuffix': opts['recordsetnamesuffix'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecordSetListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/recordsets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recordSetsListByType operation.
     * @callback module:api/RecordSetsApi~recordSetsListByTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordSetListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the record sets of a specified type in a DNS zone.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} zoneName The name of the DNS zone (without a terminating dot).
     * @param {module:model/String} recordType The type of record sets to enumerate.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] The maximum number of record sets to return. If not specified, returns up to 100 record sets.
     * @param {String} [recordsetnamesuffix] The suffix label of the record set name that has to be used to filter the record set enumerations. If this parameter is specified, Enumeration will return only records that end with .<recordSetNameSuffix>
     * @param {module:api/RecordSetsApi~recordSetsListByTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordSetListResult}
     */
    recordSetsListByType(resourceGroupName, zoneName, recordType, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recordSetsListByType");
      }
      // verify the required parameter 'zoneName' is set
      if (zoneName === undefined || zoneName === null) {
        throw new Error("Missing the required parameter 'zoneName' when calling recordSetsListByType");
      }
      // verify the required parameter 'recordType' is set
      if (recordType === undefined || recordType === null) {
        throw new Error("Missing the required parameter 'recordType' when calling recordSetsListByType");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recordSetsListByType");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recordSetsListByType");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'zoneName': zoneName,
        'recordType': recordType,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$top': opts['top'],
        '$recordsetnamesuffix': opts['recordsetnamesuffix'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecordSetListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recordSetsUpdate operation.
     * @callback module:api/RecordSetsApi~recordSetsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecordSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a record set within a DNS zone.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} zoneName The name of the DNS zone (without a terminating dot).
     * @param {String} relativeRecordSetName The name of the record set, relative to the name of the zone.
     * @param {module:model/String} recordType The type of DNS record in this record set.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/RecordSet} parameters Parameters supplied to the Update operation.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] The etag of the record set. Omit this value to always overwrite the current record set. Specify the last-seen etag value to prevent accidentally overwriting concurrent changes.
     * @param {module:api/RecordSetsApi~recordSetsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecordSet}
     */
    recordSetsUpdate(resourceGroupName, zoneName, relativeRecordSetName, recordType, apiVersion, subscriptionId, parameters, opts, callback) {
      opts = opts || {};
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling recordSetsUpdate");
      }
      // verify the required parameter 'zoneName' is set
      if (zoneName === undefined || zoneName === null) {
        throw new Error("Missing the required parameter 'zoneName' when calling recordSetsUpdate");
      }
      // verify the required parameter 'relativeRecordSetName' is set
      if (relativeRecordSetName === undefined || relativeRecordSetName === null) {
        throw new Error("Missing the required parameter 'relativeRecordSetName' when calling recordSetsUpdate");
      }
      // verify the required parameter 'recordType' is set
      if (recordType === undefined || recordType === null) {
        throw new Error("Missing the required parameter 'recordType' when calling recordSetsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling recordSetsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling recordSetsUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling recordSetsUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'zoneName': zoneName,
        'relativeRecordSetName': relativeRecordSetName,
        'recordType': recordType,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordSet;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsZones/{zoneName}/{recordType}/{relativeRecordSetName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
