/**
 * DnsManagementClient
 * The DNS Management Client.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SoaRecord model module.
 * @module model/SoaRecord
 * @version 2018-03-01-preview
 */
class SoaRecord {
    /**
     * Constructs a new <code>SoaRecord</code>.
     * An SOA record.
     * @alias module:model/SoaRecord
     */
    constructor() { 
        
        SoaRecord.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SoaRecord</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SoaRecord} obj Optional instance to populate.
     * @return {module:model/SoaRecord} The populated <code>SoaRecord</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SoaRecord();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('expireTime')) {
                obj['expireTime'] = ApiClient.convertToType(data['expireTime'], 'Number');
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('minimumTTL')) {
                obj['minimumTTL'] = ApiClient.convertToType(data['minimumTTL'], 'Number');
            }
            if (data.hasOwnProperty('refreshTime')) {
                obj['refreshTime'] = ApiClient.convertToType(data['refreshTime'], 'Number');
            }
            if (data.hasOwnProperty('retryTime')) {
                obj['retryTime'] = ApiClient.convertToType(data['retryTime'], 'Number');
            }
            if (data.hasOwnProperty('serialNumber')) {
                obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SoaRecord</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SoaRecord</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }

        return true;
    }


}



/**
 * The email contact for this SOA record.
 * @member {String} email
 */
SoaRecord.prototype['email'] = undefined;

/**
 * The expire time for this SOA record.
 * @member {Number} expireTime
 */
SoaRecord.prototype['expireTime'] = undefined;

/**
 * The domain name of the authoritative name server for this SOA record.
 * @member {String} host
 */
SoaRecord.prototype['host'] = undefined;

/**
 * The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
 * @member {Number} minimumTTL
 */
SoaRecord.prototype['minimumTTL'] = undefined;

/**
 * The refresh value for this SOA record.
 * @member {Number} refreshTime
 */
SoaRecord.prototype['refreshTime'] = undefined;

/**
 * The retry time for this SOA record.
 * @member {Number} retryTime
 */
SoaRecord.prototype['retryTime'] = undefined;

/**
 * The serial number for this SOA record.
 * @member {Number} serialNumber
 */
SoaRecord.prototype['serialNumber'] = undefined;






export default SoaRecord;

