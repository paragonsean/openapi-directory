# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sub_resource import SubResource
from openapi_server import util


class ZoneProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_number_of_record_sets: int=None, name_servers: List[str]=None, number_of_record_sets: int=None, registration_virtual_networks: List[SubResource]=None, resolution_virtual_networks: List[SubResource]=None, zone_type: str='Public'):
        """ZoneProperties - a model defined in OpenAPI

        :param max_number_of_record_sets: The max_number_of_record_sets of this ZoneProperties.
        :param name_servers: The name_servers of this ZoneProperties.
        :param number_of_record_sets: The number_of_record_sets of this ZoneProperties.
        :param registration_virtual_networks: The registration_virtual_networks of this ZoneProperties.
        :param resolution_virtual_networks: The resolution_virtual_networks of this ZoneProperties.
        :param zone_type: The zone_type of this ZoneProperties.
        """
        self.openapi_types = {
            'max_number_of_record_sets': int,
            'name_servers': List[str],
            'number_of_record_sets': int,
            'registration_virtual_networks': List[SubResource],
            'resolution_virtual_networks': List[SubResource],
            'zone_type': str
        }

        self.attribute_map = {
            'max_number_of_record_sets': 'maxNumberOfRecordSets',
            'name_servers': 'nameServers',
            'number_of_record_sets': 'numberOfRecordSets',
            'registration_virtual_networks': 'registrationVirtualNetworks',
            'resolution_virtual_networks': 'resolutionVirtualNetworks',
            'zone_type': 'zoneType'
        }

        self._max_number_of_record_sets = max_number_of_record_sets
        self._name_servers = name_servers
        self._number_of_record_sets = number_of_record_sets
        self._registration_virtual_networks = registration_virtual_networks
        self._resolution_virtual_networks = resolution_virtual_networks
        self._zone_type = zone_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ZoneProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ZoneProperties of this ZoneProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_number_of_record_sets(self):
        """Gets the max_number_of_record_sets of this ZoneProperties.

        The maximum number of record sets that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.

        :return: The max_number_of_record_sets of this ZoneProperties.
        :rtype: int
        """
        return self._max_number_of_record_sets

    @max_number_of_record_sets.setter
    def max_number_of_record_sets(self, max_number_of_record_sets):
        """Sets the max_number_of_record_sets of this ZoneProperties.

        The maximum number of record sets that can be created in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.

        :param max_number_of_record_sets: The max_number_of_record_sets of this ZoneProperties.
        :type max_number_of_record_sets: int
        """

        self._max_number_of_record_sets = max_number_of_record_sets

    @property
    def name_servers(self):
        """Gets the name_servers of this ZoneProperties.

        The name servers for this DNS zone. This is a read-only property and any attempt to set this value will be ignored.

        :return: The name_servers of this ZoneProperties.
        :rtype: List[str]
        """
        return self._name_servers

    @name_servers.setter
    def name_servers(self, name_servers):
        """Sets the name_servers of this ZoneProperties.

        The name servers for this DNS zone. This is a read-only property and any attempt to set this value will be ignored.

        :param name_servers: The name_servers of this ZoneProperties.
        :type name_servers: List[str]
        """

        self._name_servers = name_servers

    @property
    def number_of_record_sets(self):
        """Gets the number_of_record_sets of this ZoneProperties.

        The current number of record sets in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.

        :return: The number_of_record_sets of this ZoneProperties.
        :rtype: int
        """
        return self._number_of_record_sets

    @number_of_record_sets.setter
    def number_of_record_sets(self, number_of_record_sets):
        """Sets the number_of_record_sets of this ZoneProperties.

        The current number of record sets in this DNS zone.  This is a read-only property and any attempt to set this value will be ignored.

        :param number_of_record_sets: The number_of_record_sets of this ZoneProperties.
        :type number_of_record_sets: int
        """

        self._number_of_record_sets = number_of_record_sets

    @property
    def registration_virtual_networks(self):
        """Gets the registration_virtual_networks of this ZoneProperties.

        A list of references to virtual networks that register hostnames in this DNS zone. This is a only when ZoneType is Private.

        :return: The registration_virtual_networks of this ZoneProperties.
        :rtype: List[SubResource]
        """
        return self._registration_virtual_networks

    @registration_virtual_networks.setter
    def registration_virtual_networks(self, registration_virtual_networks):
        """Sets the registration_virtual_networks of this ZoneProperties.

        A list of references to virtual networks that register hostnames in this DNS zone. This is a only when ZoneType is Private.

        :param registration_virtual_networks: The registration_virtual_networks of this ZoneProperties.
        :type registration_virtual_networks: List[SubResource]
        """

        self._registration_virtual_networks = registration_virtual_networks

    @property
    def resolution_virtual_networks(self):
        """Gets the resolution_virtual_networks of this ZoneProperties.

        A list of references to virtual networks that resolve records in this DNS zone. This is a only when ZoneType is Private.

        :return: The resolution_virtual_networks of this ZoneProperties.
        :rtype: List[SubResource]
        """
        return self._resolution_virtual_networks

    @resolution_virtual_networks.setter
    def resolution_virtual_networks(self, resolution_virtual_networks):
        """Sets the resolution_virtual_networks of this ZoneProperties.

        A list of references to virtual networks that resolve records in this DNS zone. This is a only when ZoneType is Private.

        :param resolution_virtual_networks: The resolution_virtual_networks of this ZoneProperties.
        :type resolution_virtual_networks: List[SubResource]
        """

        self._resolution_virtual_networks = resolution_virtual_networks

    @property
    def zone_type(self):
        """Gets the zone_type of this ZoneProperties.

        The type of this DNS zone (Public or Private).

        :return: The zone_type of this ZoneProperties.
        :rtype: str
        """
        return self._zone_type

    @zone_type.setter
    def zone_type(self, zone_type):
        """Sets the zone_type of this ZoneProperties.

        The type of this DNS zone (Public or Private).

        :param zone_type: The zone_type of this ZoneProperties.
        :type zone_type: str
        """
        allowed_values = ["Public", "Private"]  # noqa: E501
        if zone_type not in allowed_values:
            raise ValueError(
                "Invalid value for `zone_type` ({0}), must be one of {1}"
                .format(zone_type, allowed_values)
            )

        self._zone_type = zone_type
