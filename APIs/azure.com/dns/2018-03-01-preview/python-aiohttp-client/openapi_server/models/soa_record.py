# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SoaRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, expire_time: int=None, host: str=None, minimum_ttl: int=None, refresh_time: int=None, retry_time: int=None, serial_number: int=None):
        """SoaRecord - a model defined in OpenAPI

        :param email: The email of this SoaRecord.
        :param expire_time: The expire_time of this SoaRecord.
        :param host: The host of this SoaRecord.
        :param minimum_ttl: The minimum_ttl of this SoaRecord.
        :param refresh_time: The refresh_time of this SoaRecord.
        :param retry_time: The retry_time of this SoaRecord.
        :param serial_number: The serial_number of this SoaRecord.
        """
        self.openapi_types = {
            'email': str,
            'expire_time': int,
            'host': str,
            'minimum_ttl': int,
            'refresh_time': int,
            'retry_time': int,
            'serial_number': int
        }

        self.attribute_map = {
            'email': 'email',
            'expire_time': 'expireTime',
            'host': 'host',
            'minimum_ttl': 'minimumTTL',
            'refresh_time': 'refreshTime',
            'retry_time': 'retryTime',
            'serial_number': 'serialNumber'
        }

        self._email = email
        self._expire_time = expire_time
        self._host = host
        self._minimum_ttl = minimum_ttl
        self._refresh_time = refresh_time
        self._retry_time = retry_time
        self._serial_number = serial_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SoaRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SoaRecord of this SoaRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this SoaRecord.

        The email contact for this SOA record.

        :return: The email of this SoaRecord.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SoaRecord.

        The email contact for this SOA record.

        :param email: The email of this SoaRecord.
        :type email: str
        """

        self._email = email

    @property
    def expire_time(self):
        """Gets the expire_time of this SoaRecord.

        The expire time for this SOA record.

        :return: The expire_time of this SoaRecord.
        :rtype: int
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this SoaRecord.

        The expire time for this SOA record.

        :param expire_time: The expire_time of this SoaRecord.
        :type expire_time: int
        """

        self._expire_time = expire_time

    @property
    def host(self):
        """Gets the host of this SoaRecord.

        The domain name of the authoritative name server for this SOA record.

        :return: The host of this SoaRecord.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this SoaRecord.

        The domain name of the authoritative name server for this SOA record.

        :param host: The host of this SoaRecord.
        :type host: str
        """

        self._host = host

    @property
    def minimum_ttl(self):
        """Gets the minimum_ttl of this SoaRecord.

        The minimum value for this SOA record. By convention this is used to determine the negative caching duration.

        :return: The minimum_ttl of this SoaRecord.
        :rtype: int
        """
        return self._minimum_ttl

    @minimum_ttl.setter
    def minimum_ttl(self, minimum_ttl):
        """Sets the minimum_ttl of this SoaRecord.

        The minimum value for this SOA record. By convention this is used to determine the negative caching duration.

        :param minimum_ttl: The minimum_ttl of this SoaRecord.
        :type minimum_ttl: int
        """

        self._minimum_ttl = minimum_ttl

    @property
    def refresh_time(self):
        """Gets the refresh_time of this SoaRecord.

        The refresh value for this SOA record.

        :return: The refresh_time of this SoaRecord.
        :rtype: int
        """
        return self._refresh_time

    @refresh_time.setter
    def refresh_time(self, refresh_time):
        """Sets the refresh_time of this SoaRecord.

        The refresh value for this SOA record.

        :param refresh_time: The refresh_time of this SoaRecord.
        :type refresh_time: int
        """

        self._refresh_time = refresh_time

    @property
    def retry_time(self):
        """Gets the retry_time of this SoaRecord.

        The retry time for this SOA record.

        :return: The retry_time of this SoaRecord.
        :rtype: int
        """
        return self._retry_time

    @retry_time.setter
    def retry_time(self, retry_time):
        """Sets the retry_time of this SoaRecord.

        The retry time for this SOA record.

        :param retry_time: The retry_time of this SoaRecord.
        :type retry_time: int
        """

        self._retry_time = retry_time

    @property
    def serial_number(self):
        """Gets the serial_number of this SoaRecord.

        The serial number for this SOA record.

        :return: The serial_number of this SoaRecord.
        :rtype: int
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this SoaRecord.

        The serial number for this SOA record.

        :param serial_number: The serial_number of this SoaRecord.
        :type serial_number: int
        """

        self._serial_number = serial_number
