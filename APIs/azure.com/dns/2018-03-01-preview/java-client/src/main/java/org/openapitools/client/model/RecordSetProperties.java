/*
 * DnsManagementClient
 * The DNS Management Client.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ARecord;
import org.openapitools.client.model.AaaaRecord;
import org.openapitools.client.model.CaaRecord;
import org.openapitools.client.model.CnameRecord;
import org.openapitools.client.model.MxRecord;
import org.openapitools.client.model.NsRecord;
import org.openapitools.client.model.PtrRecord;
import org.openapitools.client.model.SoaRecord;
import org.openapitools.client.model.SrvRecord;
import org.openapitools.client.model.TxtRecord;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the properties of the records in the record set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:27:47.790768-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecordSetProperties {
  public static final String SERIALIZED_NAME_AA_A_A_RECORDS = "AAAARecords";
  @SerializedName(SERIALIZED_NAME_AA_A_A_RECORDS)
  private List<AaaaRecord> aaAARecords = new ArrayList<>();

  public static final String SERIALIZED_NAME_ARECORDS = "ARecords";
  @SerializedName(SERIALIZED_NAME_ARECORDS)
  private List<ARecord> arecords = new ArrayList<>();

  public static final String SERIALIZED_NAME_CN_A_M_E_RECORD = "CNAMERecord";
  @SerializedName(SERIALIZED_NAME_CN_A_M_E_RECORD)
  private CnameRecord cnAMERecord;

  public static final String SERIALIZED_NAME_MX_RECORDS = "MXRecords";
  @SerializedName(SERIALIZED_NAME_MX_RECORDS)
  private List<MxRecord> mxRecords = new ArrayList<>();

  public static final String SERIALIZED_NAME_NS_RECORDS = "NSRecords";
  @SerializedName(SERIALIZED_NAME_NS_RECORDS)
  private List<NsRecord> nsRecords = new ArrayList<>();

  public static final String SERIALIZED_NAME_PT_R_RECORDS = "PTRRecords";
  @SerializedName(SERIALIZED_NAME_PT_R_RECORDS)
  private List<PtrRecord> ptRRecords = new ArrayList<>();

  public static final String SERIALIZED_NAME_SO_A_RECORD = "SOARecord";
  @SerializedName(SERIALIZED_NAME_SO_A_RECORD)
  private SoaRecord soARecord;

  public static final String SERIALIZED_NAME_SR_V_RECORDS = "SRVRecords";
  @SerializedName(SERIALIZED_NAME_SR_V_RECORDS)
  private List<SrvRecord> srVRecords = new ArrayList<>();

  public static final String SERIALIZED_NAME_T_T_L = "TTL";
  @SerializedName(SERIALIZED_NAME_T_T_L)
  private Long TTL;

  public static final String SERIALIZED_NAME_TX_T_RECORDS = "TXTRecords";
  @SerializedName(SERIALIZED_NAME_TX_T_RECORDS)
  private List<TxtRecord> txTRecords = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAA_RECORDS = "caaRecords";
  @SerializedName(SERIALIZED_NAME_CAA_RECORDS)
  private List<CaaRecord> caaRecords = new ArrayList<>();

  public static final String SERIALIZED_NAME_FQDN = "fqdn";
  @SerializedName(SERIALIZED_NAME_FQDN)
  private String fqdn;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public RecordSetProperties() {
  }

  public RecordSetProperties(
     String fqdn
  ) {
    this();
    this.fqdn = fqdn;
  }

  public RecordSetProperties aaAARecords(List<AaaaRecord> aaAARecords) {
    this.aaAARecords = aaAARecords;
    return this;
  }

  public RecordSetProperties addAaAARecordsItem(AaaaRecord aaAARecordsItem) {
    if (this.aaAARecords == null) {
      this.aaAARecords = new ArrayList<>();
    }
    this.aaAARecords.add(aaAARecordsItem);
    return this;
  }

  /**
   * The list of AAAA records in the record set.
   * @return aaAARecords
   */
  @javax.annotation.Nullable
  public List<AaaaRecord> getAaAARecords() {
    return aaAARecords;
  }

  public void setAaAARecords(List<AaaaRecord> aaAARecords) {
    this.aaAARecords = aaAARecords;
  }


  public RecordSetProperties arecords(List<ARecord> arecords) {
    this.arecords = arecords;
    return this;
  }

  public RecordSetProperties addArecordsItem(ARecord arecordsItem) {
    if (this.arecords == null) {
      this.arecords = new ArrayList<>();
    }
    this.arecords.add(arecordsItem);
    return this;
  }

  /**
   * The list of A records in the record set.
   * @return arecords
   */
  @javax.annotation.Nullable
  public List<ARecord> getArecords() {
    return arecords;
  }

  public void setArecords(List<ARecord> arecords) {
    this.arecords = arecords;
  }


  public RecordSetProperties cnAMERecord(CnameRecord cnAMERecord) {
    this.cnAMERecord = cnAMERecord;
    return this;
  }

  /**
   * Get cnAMERecord
   * @return cnAMERecord
   */
  @javax.annotation.Nullable
  public CnameRecord getCnAMERecord() {
    return cnAMERecord;
  }

  public void setCnAMERecord(CnameRecord cnAMERecord) {
    this.cnAMERecord = cnAMERecord;
  }


  public RecordSetProperties mxRecords(List<MxRecord> mxRecords) {
    this.mxRecords = mxRecords;
    return this;
  }

  public RecordSetProperties addMxRecordsItem(MxRecord mxRecordsItem) {
    if (this.mxRecords == null) {
      this.mxRecords = new ArrayList<>();
    }
    this.mxRecords.add(mxRecordsItem);
    return this;
  }

  /**
   * The list of MX records in the record set.
   * @return mxRecords
   */
  @javax.annotation.Nullable
  public List<MxRecord> getMxRecords() {
    return mxRecords;
  }

  public void setMxRecords(List<MxRecord> mxRecords) {
    this.mxRecords = mxRecords;
  }


  public RecordSetProperties nsRecords(List<NsRecord> nsRecords) {
    this.nsRecords = nsRecords;
    return this;
  }

  public RecordSetProperties addNsRecordsItem(NsRecord nsRecordsItem) {
    if (this.nsRecords == null) {
      this.nsRecords = new ArrayList<>();
    }
    this.nsRecords.add(nsRecordsItem);
    return this;
  }

  /**
   * The list of NS records in the record set.
   * @return nsRecords
   */
  @javax.annotation.Nullable
  public List<NsRecord> getNsRecords() {
    return nsRecords;
  }

  public void setNsRecords(List<NsRecord> nsRecords) {
    this.nsRecords = nsRecords;
  }


  public RecordSetProperties ptRRecords(List<PtrRecord> ptRRecords) {
    this.ptRRecords = ptRRecords;
    return this;
  }

  public RecordSetProperties addPtRRecordsItem(PtrRecord ptRRecordsItem) {
    if (this.ptRRecords == null) {
      this.ptRRecords = new ArrayList<>();
    }
    this.ptRRecords.add(ptRRecordsItem);
    return this;
  }

  /**
   * The list of PTR records in the record set.
   * @return ptRRecords
   */
  @javax.annotation.Nullable
  public List<PtrRecord> getPtRRecords() {
    return ptRRecords;
  }

  public void setPtRRecords(List<PtrRecord> ptRRecords) {
    this.ptRRecords = ptRRecords;
  }


  public RecordSetProperties soARecord(SoaRecord soARecord) {
    this.soARecord = soARecord;
    return this;
  }

  /**
   * Get soARecord
   * @return soARecord
   */
  @javax.annotation.Nullable
  public SoaRecord getSoARecord() {
    return soARecord;
  }

  public void setSoARecord(SoaRecord soARecord) {
    this.soARecord = soARecord;
  }


  public RecordSetProperties srVRecords(List<SrvRecord> srVRecords) {
    this.srVRecords = srVRecords;
    return this;
  }

  public RecordSetProperties addSrVRecordsItem(SrvRecord srVRecordsItem) {
    if (this.srVRecords == null) {
      this.srVRecords = new ArrayList<>();
    }
    this.srVRecords.add(srVRecordsItem);
    return this;
  }

  /**
   * The list of SRV records in the record set.
   * @return srVRecords
   */
  @javax.annotation.Nullable
  public List<SrvRecord> getSrVRecords() {
    return srVRecords;
  }

  public void setSrVRecords(List<SrvRecord> srVRecords) {
    this.srVRecords = srVRecords;
  }


  public RecordSetProperties TTL(Long TTL) {
    this.TTL = TTL;
    return this;
  }

  /**
   * The TTL (time-to-live) of the records in the record set.
   * @return TTL
   */
  @javax.annotation.Nullable
  public Long getTTL() {
    return TTL;
  }

  public void setTTL(Long TTL) {
    this.TTL = TTL;
  }


  public RecordSetProperties txTRecords(List<TxtRecord> txTRecords) {
    this.txTRecords = txTRecords;
    return this;
  }

  public RecordSetProperties addTxTRecordsItem(TxtRecord txTRecordsItem) {
    if (this.txTRecords == null) {
      this.txTRecords = new ArrayList<>();
    }
    this.txTRecords.add(txTRecordsItem);
    return this;
  }

  /**
   * The list of TXT records in the record set.
   * @return txTRecords
   */
  @javax.annotation.Nullable
  public List<TxtRecord> getTxTRecords() {
    return txTRecords;
  }

  public void setTxTRecords(List<TxtRecord> txTRecords) {
    this.txTRecords = txTRecords;
  }


  public RecordSetProperties caaRecords(List<CaaRecord> caaRecords) {
    this.caaRecords = caaRecords;
    return this;
  }

  public RecordSetProperties addCaaRecordsItem(CaaRecord caaRecordsItem) {
    if (this.caaRecords == null) {
      this.caaRecords = new ArrayList<>();
    }
    this.caaRecords.add(caaRecordsItem);
    return this;
  }

  /**
   * The list of CAA records in the record set.
   * @return caaRecords
   */
  @javax.annotation.Nullable
  public List<CaaRecord> getCaaRecords() {
    return caaRecords;
  }

  public void setCaaRecords(List<CaaRecord> caaRecords) {
    this.caaRecords = caaRecords;
  }


  /**
   * Fully qualified domain name of the record set.
   * @return fqdn
   */
  @javax.annotation.Nullable
  public String getFqdn() {
    return fqdn;
  }



  public RecordSetProperties metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public RecordSetProperties putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * The metadata attached to the record set.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecordSetProperties recordSetProperties = (RecordSetProperties) o;
    return Objects.equals(this.aaAARecords, recordSetProperties.aaAARecords) &&
        Objects.equals(this.arecords, recordSetProperties.arecords) &&
        Objects.equals(this.cnAMERecord, recordSetProperties.cnAMERecord) &&
        Objects.equals(this.mxRecords, recordSetProperties.mxRecords) &&
        Objects.equals(this.nsRecords, recordSetProperties.nsRecords) &&
        Objects.equals(this.ptRRecords, recordSetProperties.ptRRecords) &&
        Objects.equals(this.soARecord, recordSetProperties.soARecord) &&
        Objects.equals(this.srVRecords, recordSetProperties.srVRecords) &&
        Objects.equals(this.TTL, recordSetProperties.TTL) &&
        Objects.equals(this.txTRecords, recordSetProperties.txTRecords) &&
        Objects.equals(this.caaRecords, recordSetProperties.caaRecords) &&
        Objects.equals(this.fqdn, recordSetProperties.fqdn) &&
        Objects.equals(this.metadata, recordSetProperties.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aaAARecords, arecords, cnAMERecord, mxRecords, nsRecords, ptRRecords, soARecord, srVRecords, TTL, txTRecords, caaRecords, fqdn, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecordSetProperties {\n");
    sb.append("    aaAARecords: ").append(toIndentedString(aaAARecords)).append("\n");
    sb.append("    arecords: ").append(toIndentedString(arecords)).append("\n");
    sb.append("    cnAMERecord: ").append(toIndentedString(cnAMERecord)).append("\n");
    sb.append("    mxRecords: ").append(toIndentedString(mxRecords)).append("\n");
    sb.append("    nsRecords: ").append(toIndentedString(nsRecords)).append("\n");
    sb.append("    ptRRecords: ").append(toIndentedString(ptRRecords)).append("\n");
    sb.append("    soARecord: ").append(toIndentedString(soARecord)).append("\n");
    sb.append("    srVRecords: ").append(toIndentedString(srVRecords)).append("\n");
    sb.append("    TTL: ").append(toIndentedString(TTL)).append("\n");
    sb.append("    txTRecords: ").append(toIndentedString(txTRecords)).append("\n");
    sb.append("    caaRecords: ").append(toIndentedString(caaRecords)).append("\n");
    sb.append("    fqdn: ").append(toIndentedString(fqdn)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AAAARecords");
    openapiFields.add("ARecords");
    openapiFields.add("CNAMERecord");
    openapiFields.add("MXRecords");
    openapiFields.add("NSRecords");
    openapiFields.add("PTRRecords");
    openapiFields.add("SOARecord");
    openapiFields.add("SRVRecords");
    openapiFields.add("TTL");
    openapiFields.add("TXTRecords");
    openapiFields.add("caaRecords");
    openapiFields.add("fqdn");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecordSetProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecordSetProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecordSetProperties is not found in the empty JSON string", RecordSetProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecordSetProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecordSetProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("AAAARecords") != null && !jsonObj.get("AAAARecords").isJsonNull()) {
        JsonArray jsonArrayaaAARecords = jsonObj.getAsJsonArray("AAAARecords");
        if (jsonArrayaaAARecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AAAARecords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AAAARecords` to be an array in the JSON string but got `%s`", jsonObj.get("AAAARecords").toString()));
          }

          // validate the optional field `AAAARecords` (array)
          for (int i = 0; i < jsonArrayaaAARecords.size(); i++) {
            AaaaRecord.validateJsonElement(jsonArrayaaAARecords.get(i));
          };
        }
      }
      if (jsonObj.get("ARecords") != null && !jsonObj.get("ARecords").isJsonNull()) {
        JsonArray jsonArrayarecords = jsonObj.getAsJsonArray("ARecords");
        if (jsonArrayarecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ARecords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ARecords` to be an array in the JSON string but got `%s`", jsonObj.get("ARecords").toString()));
          }

          // validate the optional field `ARecords` (array)
          for (int i = 0; i < jsonArrayarecords.size(); i++) {
            ARecord.validateJsonElement(jsonArrayarecords.get(i));
          };
        }
      }
      // validate the optional field `CNAMERecord`
      if (jsonObj.get("CNAMERecord") != null && !jsonObj.get("CNAMERecord").isJsonNull()) {
        CnameRecord.validateJsonElement(jsonObj.get("CNAMERecord"));
      }
      if (jsonObj.get("MXRecords") != null && !jsonObj.get("MXRecords").isJsonNull()) {
        JsonArray jsonArraymxRecords = jsonObj.getAsJsonArray("MXRecords");
        if (jsonArraymxRecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("MXRecords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `MXRecords` to be an array in the JSON string but got `%s`", jsonObj.get("MXRecords").toString()));
          }

          // validate the optional field `MXRecords` (array)
          for (int i = 0; i < jsonArraymxRecords.size(); i++) {
            MxRecord.validateJsonElement(jsonArraymxRecords.get(i));
          };
        }
      }
      if (jsonObj.get("NSRecords") != null && !jsonObj.get("NSRecords").isJsonNull()) {
        JsonArray jsonArraynsRecords = jsonObj.getAsJsonArray("NSRecords");
        if (jsonArraynsRecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("NSRecords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `NSRecords` to be an array in the JSON string but got `%s`", jsonObj.get("NSRecords").toString()));
          }

          // validate the optional field `NSRecords` (array)
          for (int i = 0; i < jsonArraynsRecords.size(); i++) {
            NsRecord.validateJsonElement(jsonArraynsRecords.get(i));
          };
        }
      }
      if (jsonObj.get("PTRRecords") != null && !jsonObj.get("PTRRecords").isJsonNull()) {
        JsonArray jsonArrayptRRecords = jsonObj.getAsJsonArray("PTRRecords");
        if (jsonArrayptRRecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PTRRecords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PTRRecords` to be an array in the JSON string but got `%s`", jsonObj.get("PTRRecords").toString()));
          }

          // validate the optional field `PTRRecords` (array)
          for (int i = 0; i < jsonArrayptRRecords.size(); i++) {
            PtrRecord.validateJsonElement(jsonArrayptRRecords.get(i));
          };
        }
      }
      // validate the optional field `SOARecord`
      if (jsonObj.get("SOARecord") != null && !jsonObj.get("SOARecord").isJsonNull()) {
        SoaRecord.validateJsonElement(jsonObj.get("SOARecord"));
      }
      if (jsonObj.get("SRVRecords") != null && !jsonObj.get("SRVRecords").isJsonNull()) {
        JsonArray jsonArraysrVRecords = jsonObj.getAsJsonArray("SRVRecords");
        if (jsonArraysrVRecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SRVRecords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SRVRecords` to be an array in the JSON string but got `%s`", jsonObj.get("SRVRecords").toString()));
          }

          // validate the optional field `SRVRecords` (array)
          for (int i = 0; i < jsonArraysrVRecords.size(); i++) {
            SrvRecord.validateJsonElement(jsonArraysrVRecords.get(i));
          };
        }
      }
      if (jsonObj.get("TXTRecords") != null && !jsonObj.get("TXTRecords").isJsonNull()) {
        JsonArray jsonArraytxTRecords = jsonObj.getAsJsonArray("TXTRecords");
        if (jsonArraytxTRecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TXTRecords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TXTRecords` to be an array in the JSON string but got `%s`", jsonObj.get("TXTRecords").toString()));
          }

          // validate the optional field `TXTRecords` (array)
          for (int i = 0; i < jsonArraytxTRecords.size(); i++) {
            TxtRecord.validateJsonElement(jsonArraytxTRecords.get(i));
          };
        }
      }
      if (jsonObj.get("caaRecords") != null && !jsonObj.get("caaRecords").isJsonNull()) {
        JsonArray jsonArraycaaRecords = jsonObj.getAsJsonArray("caaRecords");
        if (jsonArraycaaRecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("caaRecords").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `caaRecords` to be an array in the JSON string but got `%s`", jsonObj.get("caaRecords").toString()));
          }

          // validate the optional field `caaRecords` (array)
          for (int i = 0; i < jsonArraycaaRecords.size(); i++) {
            CaaRecord.validateJsonElement(jsonArraycaaRecords.get(i));
          };
        }
      }
      if ((jsonObj.get("fqdn") != null && !jsonObj.get("fqdn").isJsonNull()) && !jsonObj.get("fqdn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fqdn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fqdn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecordSetProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecordSetProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecordSetProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecordSetProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<RecordSetProperties>() {
           @Override
           public void write(JsonWriter out, RecordSetProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecordSetProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecordSetProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecordSetProperties
   * @throws IOException if the JSON string is invalid with respect to RecordSetProperties
   */
  public static RecordSetProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecordSetProperties.class);
  }

  /**
   * Convert an instance of RecordSetProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

