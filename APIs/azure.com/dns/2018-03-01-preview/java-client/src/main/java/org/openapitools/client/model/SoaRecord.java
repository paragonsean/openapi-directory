/*
 * DnsManagementClient
 * The DNS Management Client.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An SOA record.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:27:47.790768-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SoaRecord {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private Long expireTime;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_MINIMUM_T_T_L = "minimumTTL";
  @SerializedName(SERIALIZED_NAME_MINIMUM_T_T_L)
  private Long minimumTTL;

  public static final String SERIALIZED_NAME_REFRESH_TIME = "refreshTime";
  @SerializedName(SERIALIZED_NAME_REFRESH_TIME)
  private Long refreshTime;

  public static final String SERIALIZED_NAME_RETRY_TIME = "retryTime";
  @SerializedName(SERIALIZED_NAME_RETRY_TIME)
  private Long retryTime;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private Long serialNumber;

  public SoaRecord() {
  }

  public SoaRecord email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email contact for this SOA record.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public SoaRecord expireTime(Long expireTime) {
    this.expireTime = expireTime;
    return this;
  }

  /**
   * The expire time for this SOA record.
   * @return expireTime
   */
  @javax.annotation.Nullable
  public Long getExpireTime() {
    return expireTime;
  }

  public void setExpireTime(Long expireTime) {
    this.expireTime = expireTime;
  }


  public SoaRecord host(String host) {
    this.host = host;
    return this;
  }

  /**
   * The domain name of the authoritative name server for this SOA record.
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public SoaRecord minimumTTL(Long minimumTTL) {
    this.minimumTTL = minimumTTL;
    return this;
  }

  /**
   * The minimum value for this SOA record. By convention this is used to determine the negative caching duration.
   * @return minimumTTL
   */
  @javax.annotation.Nullable
  public Long getMinimumTTL() {
    return minimumTTL;
  }

  public void setMinimumTTL(Long minimumTTL) {
    this.minimumTTL = minimumTTL;
  }


  public SoaRecord refreshTime(Long refreshTime) {
    this.refreshTime = refreshTime;
    return this;
  }

  /**
   * The refresh value for this SOA record.
   * @return refreshTime
   */
  @javax.annotation.Nullable
  public Long getRefreshTime() {
    return refreshTime;
  }

  public void setRefreshTime(Long refreshTime) {
    this.refreshTime = refreshTime;
  }


  public SoaRecord retryTime(Long retryTime) {
    this.retryTime = retryTime;
    return this;
  }

  /**
   * The retry time for this SOA record.
   * @return retryTime
   */
  @javax.annotation.Nullable
  public Long getRetryTime() {
    return retryTime;
  }

  public void setRetryTime(Long retryTime) {
    this.retryTime = retryTime;
  }


  public SoaRecord serialNumber(Long serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * The serial number for this SOA record.
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public Long getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(Long serialNumber) {
    this.serialNumber = serialNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SoaRecord soaRecord = (SoaRecord) o;
    return Objects.equals(this.email, soaRecord.email) &&
        Objects.equals(this.expireTime, soaRecord.expireTime) &&
        Objects.equals(this.host, soaRecord.host) &&
        Objects.equals(this.minimumTTL, soaRecord.minimumTTL) &&
        Objects.equals(this.refreshTime, soaRecord.refreshTime) &&
        Objects.equals(this.retryTime, soaRecord.retryTime) &&
        Objects.equals(this.serialNumber, soaRecord.serialNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, expireTime, host, minimumTTL, refreshTime, retryTime, serialNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SoaRecord {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    minimumTTL: ").append(toIndentedString(minimumTTL)).append("\n");
    sb.append("    refreshTime: ").append(toIndentedString(refreshTime)).append("\n");
    sb.append("    retryTime: ").append(toIndentedString(retryTime)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("expireTime");
    openapiFields.add("host");
    openapiFields.add("minimumTTL");
    openapiFields.add("refreshTime");
    openapiFields.add("retryTime");
    openapiFields.add("serialNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SoaRecord
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SoaRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SoaRecord is not found in the empty JSON string", SoaRecord.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SoaRecord.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SoaRecord` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SoaRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SoaRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SoaRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SoaRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<SoaRecord>() {
           @Override
           public void write(JsonWriter out, SoaRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SoaRecord read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SoaRecord given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SoaRecord
   * @throws IOException if the JSON string is invalid with respect to SoaRecord
   */
  public static SoaRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SoaRecord.class);
  }

  /**
   * Convert an instance of SoaRecord to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

