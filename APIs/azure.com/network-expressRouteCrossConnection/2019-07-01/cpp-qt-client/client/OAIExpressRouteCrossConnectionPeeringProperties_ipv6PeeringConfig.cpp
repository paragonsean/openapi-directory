/**
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig() {
    this->initializeModel();
}

OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::~OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig() {}

void OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::initializeModel() {

    m_microsoft_peering_config_isSet = false;
    m_microsoft_peering_config_isValid = false;

    m_primary_peer_address_prefix_isSet = false;
    m_primary_peer_address_prefix_isValid = false;

    m_route_filter_isSet = false;
    m_route_filter_isValid = false;

    m_secondary_peer_address_prefix_isSet = false;
    m_secondary_peer_address_prefix_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::fromJsonObject(QJsonObject json) {

    m_microsoft_peering_config_isValid = ::OpenAPI::fromJsonValue(m_microsoft_peering_config, json[QString("microsoftPeeringConfig")]);
    m_microsoft_peering_config_isSet = !json[QString("microsoftPeeringConfig")].isNull() && m_microsoft_peering_config_isValid;

    m_primary_peer_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_primary_peer_address_prefix, json[QString("primaryPeerAddressPrefix")]);
    m_primary_peer_address_prefix_isSet = !json[QString("primaryPeerAddressPrefix")].isNull() && m_primary_peer_address_prefix_isValid;

    m_route_filter_isValid = ::OpenAPI::fromJsonValue(m_route_filter, json[QString("routeFilter")]);
    m_route_filter_isSet = !json[QString("routeFilter")].isNull() && m_route_filter_isValid;

    m_secondary_peer_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_secondary_peer_address_prefix, json[QString("secondaryPeerAddressPrefix")]);
    m_secondary_peer_address_prefix_isSet = !json[QString("secondaryPeerAddressPrefix")].isNull() && m_secondary_peer_address_prefix_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_microsoft_peering_config.isSet()) {
        obj.insert(QString("microsoftPeeringConfig"), ::OpenAPI::toJsonValue(m_microsoft_peering_config));
    }
    if (m_primary_peer_address_prefix_isSet) {
        obj.insert(QString("primaryPeerAddressPrefix"), ::OpenAPI::toJsonValue(m_primary_peer_address_prefix));
    }
    if (m_route_filter.isSet()) {
        obj.insert(QString("routeFilter"), ::OpenAPI::toJsonValue(m_route_filter));
    }
    if (m_secondary_peer_address_prefix_isSet) {
        obj.insert(QString("secondaryPeerAddressPrefix"), ::OpenAPI::toJsonValue(m_secondary_peer_address_prefix));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_microsoftPeeringConfig OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::getMicrosoftPeeringConfig() const {
    return m_microsoft_peering_config;
}
void OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::setMicrosoftPeeringConfig(const OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_microsoftPeeringConfig &microsoft_peering_config) {
    m_microsoft_peering_config = microsoft_peering_config;
    m_microsoft_peering_config_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::is_microsoft_peering_config_Set() const{
    return m_microsoft_peering_config_isSet;
}

bool OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::is_microsoft_peering_config_Valid() const{
    return m_microsoft_peering_config_isValid;
}

QString OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::getPrimaryPeerAddressPrefix() const {
    return m_primary_peer_address_prefix;
}
void OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::setPrimaryPeerAddressPrefix(const QString &primary_peer_address_prefix) {
    m_primary_peer_address_prefix = primary_peer_address_prefix;
    m_primary_peer_address_prefix_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::is_primary_peer_address_prefix_Set() const{
    return m_primary_peer_address_prefix_isSet;
}

bool OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::is_primary_peer_address_prefix_Valid() const{
    return m_primary_peer_address_prefix_isValid;
}

OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_routeFilter OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::getRouteFilter() const {
    return m_route_filter;
}
void OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::setRouteFilter(const OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_routeFilter &route_filter) {
    m_route_filter = route_filter;
    m_route_filter_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::is_route_filter_Set() const{
    return m_route_filter_isSet;
}

bool OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::is_route_filter_Valid() const{
    return m_route_filter_isValid;
}

QString OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::getSecondaryPeerAddressPrefix() const {
    return m_secondary_peer_address_prefix;
}
void OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::setSecondaryPeerAddressPrefix(const QString &secondary_peer_address_prefix) {
    m_secondary_peer_address_prefix = secondary_peer_address_prefix;
    m_secondary_peer_address_prefix_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::is_secondary_peer_address_prefix_Set() const{
    return m_secondary_peer_address_prefix_isSet;
}

bool OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::is_secondary_peer_address_prefix_Valid() const{
    return m_secondary_peer_address_prefix_isValid;
}

QString OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::getState() const {
    return m_state;
}
void OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::is_state_Set() const{
    return m_state_isSet;
}

bool OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_microsoft_peering_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_peer_address_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_peer_address_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
