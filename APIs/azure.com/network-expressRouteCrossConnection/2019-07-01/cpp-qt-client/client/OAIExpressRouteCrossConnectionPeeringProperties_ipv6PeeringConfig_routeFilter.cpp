/**
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_routeFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_routeFilter::OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_routeFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_routeFilter::OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_routeFilter() {
    this->initializeModel();
}

OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_routeFilter::~OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_routeFilter() {}

void OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_routeFilter::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_routeFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_routeFilter::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_routeFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_routeFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_routeFilter::getId() const {
    return m_id;
}
void OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_routeFilter::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_routeFilter::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_routeFilter::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_routeFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_routeFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
