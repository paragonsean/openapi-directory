/**
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner() {
    this->initializeModel();
}

OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::~OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner() {}

void OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::initializeModel() {

    m_age_isSet = false;
    m_age_isValid = false;

    m_interface_isSet = false;
    m_interface_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_mac_address_isSet = false;
    m_mac_address_isValid = false;
}

void OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::fromJsonObject(QJsonObject json) {

    m_age_isValid = ::OpenAPI::fromJsonValue(m_age, json[QString("age")]);
    m_age_isSet = !json[QString("age")].isNull() && m_age_isValid;

    m_interface_isValid = ::OpenAPI::fromJsonValue(m_interface, json[QString("interface")]);
    m_interface_isSet = !json[QString("interface")].isNull() && m_interface_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_mac_address_isValid = ::OpenAPI::fromJsonValue(m_mac_address, json[QString("macAddress")]);
    m_mac_address_isSet = !json[QString("macAddress")].isNull() && m_mac_address_isValid;
}

QString OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_age_isSet) {
        obj.insert(QString("age"), ::OpenAPI::toJsonValue(m_age));
    }
    if (m_interface_isSet) {
        obj.insert(QString("interface"), ::OpenAPI::toJsonValue(m_interface));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_mac_address_isSet) {
        obj.insert(QString("macAddress"), ::OpenAPI::toJsonValue(m_mac_address));
    }
    return obj;
}

qint32 OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::getAge() const {
    return m_age;
}
void OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::setAge(const qint32 &age) {
    m_age = age;
    m_age_isSet = true;
}

bool OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::is_age_Set() const{
    return m_age_isSet;
}

bool OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::is_age_Valid() const{
    return m_age_isValid;
}

QString OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::getInterface() const {
    return m_interface;
}
void OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::setInterface(const QString &interface) {
    m_interface = interface;
    m_interface_isSet = true;
}

bool OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::is_interface_Set() const{
    return m_interface_isSet;
}

bool OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::is_interface_Valid() const{
    return m_interface_isValid;
}

QString OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::getIpAddress() const {
    return m_ip_address;
}
void OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::getMacAddress() const {
    return m_mac_address;
}
void OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::setMacAddress(const QString &mac_address) {
    m_mac_address = mac_address;
    m_mac_address_isSet = true;
}

bool OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::is_mac_address_Set() const{
    return m_mac_address_isSet;
}

bool OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::is_mac_address_Valid() const{
    return m_mac_address_isValid;
}

bool OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRouteCrossConnections_ListArpTable_200_response_value_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
