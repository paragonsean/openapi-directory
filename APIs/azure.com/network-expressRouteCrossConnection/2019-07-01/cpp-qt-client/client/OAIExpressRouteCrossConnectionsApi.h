/**
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIExpressRouteCrossConnectionsApi_H
#define OAI_OAIExpressRouteCrossConnectionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExpressRouteCrossConnection.h"
#include "OAIExpressRouteCrossConnectionListResult.h"
#include "OAIExpressRouteCrossConnections_UpdateTags_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIExpressRouteCrossConnectionsApi : public QObject {
    Q_OBJECT

public:
    OAIExpressRouteCrossConnectionsApi(const int timeOut = 0);
    ~OAIExpressRouteCrossConnectionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cross_connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIExpressRouteCrossConnection [required]
    */
    virtual void expressRouteCrossConnectionsCreateOrUpdate(const QString &resource_group_name, const QString &cross_connection_name, const QString &api_version, const QString &subscription_id, const OAIExpressRouteCrossConnection &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cross_connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void expressRouteCrossConnectionsGet(const QString &resource_group_name, const QString &cross_connection_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void expressRouteCrossConnectionsList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void expressRouteCrossConnectionsListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cross_connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  cross_connection_parameters OAIExpressRouteCrossConnections_UpdateTags_request [required]
    */
    virtual void expressRouteCrossConnectionsUpdateTags(const QString &resource_group_name, const QString &cross_connection_name, const QString &api_version, const QString &subscription_id, const OAIExpressRouteCrossConnections_UpdateTags_request &cross_connection_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void expressRouteCrossConnectionsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void expressRouteCrossConnectionsGetCallback(OAIHttpRequestWorker *worker);
    void expressRouteCrossConnectionsListCallback(OAIHttpRequestWorker *worker);
    void expressRouteCrossConnectionsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void expressRouteCrossConnectionsUpdateTagsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void expressRouteCrossConnectionsCreateOrUpdateSignal(OAIExpressRouteCrossConnection summary);
    void expressRouteCrossConnectionsGetSignal(OAIExpressRouteCrossConnection summary);
    void expressRouteCrossConnectionsListSignal(OAIExpressRouteCrossConnectionListResult summary);
    void expressRouteCrossConnectionsListByResourceGroupSignal(OAIExpressRouteCrossConnectionListResult summary);
    void expressRouteCrossConnectionsUpdateTagsSignal(OAIExpressRouteCrossConnection summary);


    void expressRouteCrossConnectionsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIExpressRouteCrossConnection summary);
    void expressRouteCrossConnectionsGetSignalFull(OAIHttpRequestWorker *worker, OAIExpressRouteCrossConnection summary);
    void expressRouteCrossConnectionsListSignalFull(OAIHttpRequestWorker *worker, OAIExpressRouteCrossConnectionListResult summary);
    void expressRouteCrossConnectionsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIExpressRouteCrossConnectionListResult summary);
    void expressRouteCrossConnectionsUpdateTagsSignalFull(OAIHttpRequestWorker *worker, OAIExpressRouteCrossConnection summary);

    Q_DECL_DEPRECATED_X("Use expressRouteCrossConnectionsCreateOrUpdateSignalError() instead")
    void expressRouteCrossConnectionsCreateOrUpdateSignalE(OAIExpressRouteCrossConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCrossConnectionsCreateOrUpdateSignalError(OAIExpressRouteCrossConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCrossConnectionsGetSignalError() instead")
    void expressRouteCrossConnectionsGetSignalE(OAIExpressRouteCrossConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCrossConnectionsGetSignalError(OAIExpressRouteCrossConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCrossConnectionsListSignalError() instead")
    void expressRouteCrossConnectionsListSignalE(OAIExpressRouteCrossConnectionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCrossConnectionsListSignalError(OAIExpressRouteCrossConnectionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCrossConnectionsListByResourceGroupSignalError() instead")
    void expressRouteCrossConnectionsListByResourceGroupSignalE(OAIExpressRouteCrossConnectionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCrossConnectionsListByResourceGroupSignalError(OAIExpressRouteCrossConnectionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCrossConnectionsUpdateTagsSignalError() instead")
    void expressRouteCrossConnectionsUpdateTagsSignalE(OAIExpressRouteCrossConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCrossConnectionsUpdateTagsSignalError(OAIExpressRouteCrossConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use expressRouteCrossConnectionsCreateOrUpdateSignalErrorFull() instead")
    void expressRouteCrossConnectionsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCrossConnectionsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCrossConnectionsGetSignalErrorFull() instead")
    void expressRouteCrossConnectionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCrossConnectionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCrossConnectionsListSignalErrorFull() instead")
    void expressRouteCrossConnectionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCrossConnectionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCrossConnectionsListByResourceGroupSignalErrorFull() instead")
    void expressRouteCrossConnectionsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCrossConnectionsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCrossConnectionsUpdateTagsSignalErrorFull() instead")
    void expressRouteCrossConnectionsUpdateTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCrossConnectionsUpdateTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
