/*
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig;
import org.openapitools.client.model.ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigRouteFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains IPv6 peering config.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:23:34.769281-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig {
  public static final String SERIALIZED_NAME_MICROSOFT_PEERING_CONFIG = "microsoftPeeringConfig";
  @SerializedName(SERIALIZED_NAME_MICROSOFT_PEERING_CONFIG)
  private ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig microsoftPeeringConfig;

  public static final String SERIALIZED_NAME_PRIMARY_PEER_ADDRESS_PREFIX = "primaryPeerAddressPrefix";
  @SerializedName(SERIALIZED_NAME_PRIMARY_PEER_ADDRESS_PREFIX)
  private String primaryPeerAddressPrefix;

  public static final String SERIALIZED_NAME_ROUTE_FILTER = "routeFilter";
  @SerializedName(SERIALIZED_NAME_ROUTE_FILTER)
  private ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigRouteFilter routeFilter;

  public static final String SERIALIZED_NAME_SECONDARY_PEER_ADDRESS_PREFIX = "secondaryPeerAddressPrefix";
  @SerializedName(SERIALIZED_NAME_SECONDARY_PEER_ADDRESS_PREFIX)
  private String secondaryPeerAddressPrefix;

  /**
   * The state of peering.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    DISABLED("Disabled"),
    
    ENABLED("Enabled");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig() {
  }

  public ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig microsoftPeeringConfig(ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig microsoftPeeringConfig) {
    this.microsoftPeeringConfig = microsoftPeeringConfig;
    return this;
  }

  /**
   * Get microsoftPeeringConfig
   * @return microsoftPeeringConfig
   */
  @javax.annotation.Nullable
  public ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig getMicrosoftPeeringConfig() {
    return microsoftPeeringConfig;
  }

  public void setMicrosoftPeeringConfig(ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig microsoftPeeringConfig) {
    this.microsoftPeeringConfig = microsoftPeeringConfig;
  }


  public ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig primaryPeerAddressPrefix(String primaryPeerAddressPrefix) {
    this.primaryPeerAddressPrefix = primaryPeerAddressPrefix;
    return this;
  }

  /**
   * The primary address prefix.
   * @return primaryPeerAddressPrefix
   */
  @javax.annotation.Nullable
  public String getPrimaryPeerAddressPrefix() {
    return primaryPeerAddressPrefix;
  }

  public void setPrimaryPeerAddressPrefix(String primaryPeerAddressPrefix) {
    this.primaryPeerAddressPrefix = primaryPeerAddressPrefix;
  }


  public ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig routeFilter(ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigRouteFilter routeFilter) {
    this.routeFilter = routeFilter;
    return this;
  }

  /**
   * Get routeFilter
   * @return routeFilter
   */
  @javax.annotation.Nullable
  public ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigRouteFilter getRouteFilter() {
    return routeFilter;
  }

  public void setRouteFilter(ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigRouteFilter routeFilter) {
    this.routeFilter = routeFilter;
  }


  public ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig secondaryPeerAddressPrefix(String secondaryPeerAddressPrefix) {
    this.secondaryPeerAddressPrefix = secondaryPeerAddressPrefix;
    return this;
  }

  /**
   * The secondary address prefix.
   * @return secondaryPeerAddressPrefix
   */
  @javax.annotation.Nullable
  public String getSecondaryPeerAddressPrefix() {
    return secondaryPeerAddressPrefix;
  }

  public void setSecondaryPeerAddressPrefix(String secondaryPeerAddressPrefix) {
    this.secondaryPeerAddressPrefix = secondaryPeerAddressPrefix;
  }


  public ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The state of peering.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig expressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig = (ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig) o;
    return Objects.equals(this.microsoftPeeringConfig, expressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig.microsoftPeeringConfig) &&
        Objects.equals(this.primaryPeerAddressPrefix, expressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig.primaryPeerAddressPrefix) &&
        Objects.equals(this.routeFilter, expressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig.routeFilter) &&
        Objects.equals(this.secondaryPeerAddressPrefix, expressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig.secondaryPeerAddressPrefix) &&
        Objects.equals(this.state, expressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(microsoftPeeringConfig, primaryPeerAddressPrefix, routeFilter, secondaryPeerAddressPrefix, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig {\n");
    sb.append("    microsoftPeeringConfig: ").append(toIndentedString(microsoftPeeringConfig)).append("\n");
    sb.append("    primaryPeerAddressPrefix: ").append(toIndentedString(primaryPeerAddressPrefix)).append("\n");
    sb.append("    routeFilter: ").append(toIndentedString(routeFilter)).append("\n");
    sb.append("    secondaryPeerAddressPrefix: ").append(toIndentedString(secondaryPeerAddressPrefix)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("microsoftPeeringConfig");
    openapiFields.add("primaryPeerAddressPrefix");
    openapiFields.add("routeFilter");
    openapiFields.add("secondaryPeerAddressPrefix");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig is not found in the empty JSON string", ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `microsoftPeeringConfig`
      if (jsonObj.get("microsoftPeeringConfig") != null && !jsonObj.get("microsoftPeeringConfig").isJsonNull()) {
        ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig.validateJsonElement(jsonObj.get("microsoftPeeringConfig"));
      }
      if ((jsonObj.get("primaryPeerAddressPrefix") != null && !jsonObj.get("primaryPeerAddressPrefix").isJsonNull()) && !jsonObj.get("primaryPeerAddressPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryPeerAddressPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryPeerAddressPrefix").toString()));
      }
      // validate the optional field `routeFilter`
      if (jsonObj.get("routeFilter") != null && !jsonObj.get("routeFilter").isJsonNull()) {
        ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigRouteFilter.validateJsonElement(jsonObj.get("routeFilter"));
      }
      if ((jsonObj.get("secondaryPeerAddressPrefix") != null && !jsonObj.get("secondaryPeerAddressPrefix").isJsonNull()) && !jsonObj.get("secondaryPeerAddressPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryPeerAddressPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryPeerAddressPrefix").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig>() {
           @Override
           public void write(JsonWriter out, ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig
   * @throws IOException if the JSON string is invalid with respect to ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig
   */
  public static ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig.class);
  }

  /**
   * Convert an instance of ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

