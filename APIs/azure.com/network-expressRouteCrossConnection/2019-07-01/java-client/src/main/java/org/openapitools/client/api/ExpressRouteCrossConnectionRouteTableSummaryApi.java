/*
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ExpressRouteCrossConnectionsRoutesTableSummaryListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExpressRouteCrossConnectionRouteTableSummaryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExpressRouteCrossConnectionRouteTableSummaryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExpressRouteCrossConnectionRouteTableSummaryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for expressRouteCrossConnectionsListRoutesTableSummary
     * @param resourceGroupName The name of the resource group. (required)
     * @param crossConnectionName The name of the ExpressRouteCrossConnection. (required)
     * @param peeringName The name of the peering. (required)
     * @param devicePath The path of the device. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ExpressRouteCrossConnectionsRouteTableSummary resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCrossConnectionsListRoutesTableSummaryCall(String resourceGroupName, String crossConnectionName, String peeringName, String devicePath, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings/{peeringName}/routeTablesSummary/{devicePath}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "crossConnectionName" + "}", localVarApiClient.escapeString(crossConnectionName.toString()))
            .replace("{" + "peeringName" + "}", localVarApiClient.escapeString(peeringName.toString()))
            .replace("{" + "devicePath" + "}", localVarApiClient.escapeString(devicePath.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteCrossConnectionsListRoutesTableSummaryValidateBeforeCall(String resourceGroupName, String crossConnectionName, String peeringName, String devicePath, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteCrossConnectionsListRoutesTableSummary(Async)");
        }

        // verify the required parameter 'crossConnectionName' is set
        if (crossConnectionName == null) {
            throw new ApiException("Missing the required parameter 'crossConnectionName' when calling expressRouteCrossConnectionsListRoutesTableSummary(Async)");
        }

        // verify the required parameter 'peeringName' is set
        if (peeringName == null) {
            throw new ApiException("Missing the required parameter 'peeringName' when calling expressRouteCrossConnectionsListRoutesTableSummary(Async)");
        }

        // verify the required parameter 'devicePath' is set
        if (devicePath == null) {
            throw new ApiException("Missing the required parameter 'devicePath' when calling expressRouteCrossConnectionsListRoutesTableSummary(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteCrossConnectionsListRoutesTableSummary(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteCrossConnectionsListRoutesTableSummary(Async)");
        }

        return expressRouteCrossConnectionsListRoutesTableSummaryCall(resourceGroupName, crossConnectionName, peeringName, devicePath, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the route table summary associated with the express route cross connection in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param crossConnectionName The name of the ExpressRouteCrossConnection. (required)
     * @param peeringName The name of the peering. (required)
     * @param devicePath The path of the device. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ExpressRouteCrossConnectionsRoutesTableSummaryListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ExpressRouteCrossConnectionsRouteTableSummary resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRouteCrossConnectionsRoutesTableSummaryListResult expressRouteCrossConnectionsListRoutesTableSummary(String resourceGroupName, String crossConnectionName, String peeringName, String devicePath, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ExpressRouteCrossConnectionsRoutesTableSummaryListResult> localVarResp = expressRouteCrossConnectionsListRoutesTableSummaryWithHttpInfo(resourceGroupName, crossConnectionName, peeringName, devicePath, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the route table summary associated with the express route cross connection in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param crossConnectionName The name of the ExpressRouteCrossConnection. (required)
     * @param peeringName The name of the peering. (required)
     * @param devicePath The path of the device. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ExpressRouteCrossConnectionsRoutesTableSummaryListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ExpressRouteCrossConnectionsRouteTableSummary resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRouteCrossConnectionsRoutesTableSummaryListResult> expressRouteCrossConnectionsListRoutesTableSummaryWithHttpInfo(String resourceGroupName, String crossConnectionName, String peeringName, String devicePath, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = expressRouteCrossConnectionsListRoutesTableSummaryValidateBeforeCall(resourceGroupName, crossConnectionName, peeringName, devicePath, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ExpressRouteCrossConnectionsRoutesTableSummaryListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the route table summary associated with the express route cross connection in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param crossConnectionName The name of the ExpressRouteCrossConnection. (required)
     * @param peeringName The name of the peering. (required)
     * @param devicePath The path of the device. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ExpressRouteCrossConnectionsRouteTableSummary resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCrossConnectionsListRoutesTableSummaryAsync(String resourceGroupName, String crossConnectionName, String peeringName, String devicePath, String apiVersion, String subscriptionId, final ApiCallback<ExpressRouteCrossConnectionsRoutesTableSummaryListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteCrossConnectionsListRoutesTableSummaryValidateBeforeCall(resourceGroupName, crossConnectionName, peeringName, devicePath, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ExpressRouteCrossConnectionsRoutesTableSummaryListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
