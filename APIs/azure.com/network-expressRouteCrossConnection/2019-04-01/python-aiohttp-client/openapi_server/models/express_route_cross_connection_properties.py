# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.express_route_circuit_reference import ExpressRouteCircuitReference
from openapi_server.models.express_route_cross_connection_peering import ExpressRouteCrossConnectionPeering
from openapi_server import util


class ExpressRouteCrossConnectionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bandwidth_in_mbps: int=None, express_route_circuit: ExpressRouteCircuitReference=None, peering_location: str=None, peerings: List[ExpressRouteCrossConnectionPeering]=None, primary_azure_port: str=None, provisioning_state: str=None, s_tag: int=None, secondary_azure_port: str=None, service_provider_notes: str=None, service_provider_provisioning_state: str=None):
        """ExpressRouteCrossConnectionProperties - a model defined in OpenAPI

        :param bandwidth_in_mbps: The bandwidth_in_mbps of this ExpressRouteCrossConnectionProperties.
        :param express_route_circuit: The express_route_circuit of this ExpressRouteCrossConnectionProperties.
        :param peering_location: The peering_location of this ExpressRouteCrossConnectionProperties.
        :param peerings: The peerings of this ExpressRouteCrossConnectionProperties.
        :param primary_azure_port: The primary_azure_port of this ExpressRouteCrossConnectionProperties.
        :param provisioning_state: The provisioning_state of this ExpressRouteCrossConnectionProperties.
        :param s_tag: The s_tag of this ExpressRouteCrossConnectionProperties.
        :param secondary_azure_port: The secondary_azure_port of this ExpressRouteCrossConnectionProperties.
        :param service_provider_notes: The service_provider_notes of this ExpressRouteCrossConnectionProperties.
        :param service_provider_provisioning_state: The service_provider_provisioning_state of this ExpressRouteCrossConnectionProperties.
        """
        self.openapi_types = {
            'bandwidth_in_mbps': int,
            'express_route_circuit': ExpressRouteCircuitReference,
            'peering_location': str,
            'peerings': List[ExpressRouteCrossConnectionPeering],
            'primary_azure_port': str,
            'provisioning_state': str,
            's_tag': int,
            'secondary_azure_port': str,
            'service_provider_notes': str,
            'service_provider_provisioning_state': str
        }

        self.attribute_map = {
            'bandwidth_in_mbps': 'bandwidthInMbps',
            'express_route_circuit': 'expressRouteCircuit',
            'peering_location': 'peeringLocation',
            'peerings': 'peerings',
            'primary_azure_port': 'primaryAzurePort',
            'provisioning_state': 'provisioningState',
            's_tag': 'sTag',
            'secondary_azure_port': 'secondaryAzurePort',
            'service_provider_notes': 'serviceProviderNotes',
            'service_provider_provisioning_state': 'serviceProviderProvisioningState'
        }

        self._bandwidth_in_mbps = bandwidth_in_mbps
        self._express_route_circuit = express_route_circuit
        self._peering_location = peering_location
        self._peerings = peerings
        self._primary_azure_port = primary_azure_port
        self._provisioning_state = provisioning_state
        self._s_tag = s_tag
        self._secondary_azure_port = secondary_azure_port
        self._service_provider_notes = service_provider_notes
        self._service_provider_provisioning_state = service_provider_provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpressRouteCrossConnectionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpressRouteCrossConnectionProperties of this ExpressRouteCrossConnectionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bandwidth_in_mbps(self):
        """Gets the bandwidth_in_mbps of this ExpressRouteCrossConnectionProperties.

        The circuit bandwidth In Mbps.

        :return: The bandwidth_in_mbps of this ExpressRouteCrossConnectionProperties.
        :rtype: int
        """
        return self._bandwidth_in_mbps

    @bandwidth_in_mbps.setter
    def bandwidth_in_mbps(self, bandwidth_in_mbps):
        """Sets the bandwidth_in_mbps of this ExpressRouteCrossConnectionProperties.

        The circuit bandwidth In Mbps.

        :param bandwidth_in_mbps: The bandwidth_in_mbps of this ExpressRouteCrossConnectionProperties.
        :type bandwidth_in_mbps: int
        """

        self._bandwidth_in_mbps = bandwidth_in_mbps

    @property
    def express_route_circuit(self):
        """Gets the express_route_circuit of this ExpressRouteCrossConnectionProperties.


        :return: The express_route_circuit of this ExpressRouteCrossConnectionProperties.
        :rtype: ExpressRouteCircuitReference
        """
        return self._express_route_circuit

    @express_route_circuit.setter
    def express_route_circuit(self, express_route_circuit):
        """Sets the express_route_circuit of this ExpressRouteCrossConnectionProperties.


        :param express_route_circuit: The express_route_circuit of this ExpressRouteCrossConnectionProperties.
        :type express_route_circuit: ExpressRouteCircuitReference
        """

        self._express_route_circuit = express_route_circuit

    @property
    def peering_location(self):
        """Gets the peering_location of this ExpressRouteCrossConnectionProperties.

        The peering location of the ExpressRoute circuit.

        :return: The peering_location of this ExpressRouteCrossConnectionProperties.
        :rtype: str
        """
        return self._peering_location

    @peering_location.setter
    def peering_location(self, peering_location):
        """Sets the peering_location of this ExpressRouteCrossConnectionProperties.

        The peering location of the ExpressRoute circuit.

        :param peering_location: The peering_location of this ExpressRouteCrossConnectionProperties.
        :type peering_location: str
        """

        self._peering_location = peering_location

    @property
    def peerings(self):
        """Gets the peerings of this ExpressRouteCrossConnectionProperties.

        The list of peerings.

        :return: The peerings of this ExpressRouteCrossConnectionProperties.
        :rtype: List[ExpressRouteCrossConnectionPeering]
        """
        return self._peerings

    @peerings.setter
    def peerings(self, peerings):
        """Sets the peerings of this ExpressRouteCrossConnectionProperties.

        The list of peerings.

        :param peerings: The peerings of this ExpressRouteCrossConnectionProperties.
        :type peerings: List[ExpressRouteCrossConnectionPeering]
        """

        self._peerings = peerings

    @property
    def primary_azure_port(self):
        """Gets the primary_azure_port of this ExpressRouteCrossConnectionProperties.

        The name of the primary port.

        :return: The primary_azure_port of this ExpressRouteCrossConnectionProperties.
        :rtype: str
        """
        return self._primary_azure_port

    @primary_azure_port.setter
    def primary_azure_port(self, primary_azure_port):
        """Sets the primary_azure_port of this ExpressRouteCrossConnectionProperties.

        The name of the primary port.

        :param primary_azure_port: The primary_azure_port of this ExpressRouteCrossConnectionProperties.
        :type primary_azure_port: str
        """

        self._primary_azure_port = primary_azure_port

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ExpressRouteCrossConnectionProperties.

        Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.

        :return: The provisioning_state of this ExpressRouteCrossConnectionProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ExpressRouteCrossConnectionProperties.

        Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.

        :param provisioning_state: The provisioning_state of this ExpressRouteCrossConnectionProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def s_tag(self):
        """Gets the s_tag of this ExpressRouteCrossConnectionProperties.

        The identifier of the circuit traffic.

        :return: The s_tag of this ExpressRouteCrossConnectionProperties.
        :rtype: int
        """
        return self._s_tag

    @s_tag.setter
    def s_tag(self, s_tag):
        """Sets the s_tag of this ExpressRouteCrossConnectionProperties.

        The identifier of the circuit traffic.

        :param s_tag: The s_tag of this ExpressRouteCrossConnectionProperties.
        :type s_tag: int
        """

        self._s_tag = s_tag

    @property
    def secondary_azure_port(self):
        """Gets the secondary_azure_port of this ExpressRouteCrossConnectionProperties.

        The name of the secondary port.

        :return: The secondary_azure_port of this ExpressRouteCrossConnectionProperties.
        :rtype: str
        """
        return self._secondary_azure_port

    @secondary_azure_port.setter
    def secondary_azure_port(self, secondary_azure_port):
        """Sets the secondary_azure_port of this ExpressRouteCrossConnectionProperties.

        The name of the secondary port.

        :param secondary_azure_port: The secondary_azure_port of this ExpressRouteCrossConnectionProperties.
        :type secondary_azure_port: str
        """

        self._secondary_azure_port = secondary_azure_port

    @property
    def service_provider_notes(self):
        """Gets the service_provider_notes of this ExpressRouteCrossConnectionProperties.

        Additional read only notes set by the connectivity provider.

        :return: The service_provider_notes of this ExpressRouteCrossConnectionProperties.
        :rtype: str
        """
        return self._service_provider_notes

    @service_provider_notes.setter
    def service_provider_notes(self, service_provider_notes):
        """Sets the service_provider_notes of this ExpressRouteCrossConnectionProperties.

        Additional read only notes set by the connectivity provider.

        :param service_provider_notes: The service_provider_notes of this ExpressRouteCrossConnectionProperties.
        :type service_provider_notes: str
        """

        self._service_provider_notes = service_provider_notes

    @property
    def service_provider_provisioning_state(self):
        """Gets the service_provider_provisioning_state of this ExpressRouteCrossConnectionProperties.

        The ServiceProviderProvisioningState state of the resource.

        :return: The service_provider_provisioning_state of this ExpressRouteCrossConnectionProperties.
        :rtype: str
        """
        return self._service_provider_provisioning_state

    @service_provider_provisioning_state.setter
    def service_provider_provisioning_state(self, service_provider_provisioning_state):
        """Sets the service_provider_provisioning_state of this ExpressRouteCrossConnectionProperties.

        The ServiceProviderProvisioningState state of the resource.

        :param service_provider_provisioning_state: The service_provider_provisioning_state of this ExpressRouteCrossConnectionProperties.
        :type service_provider_provisioning_state: str
        """
        allowed_values = ["NotProvisioned", "Provisioning", "Provisioned", "Deprovisioning"]  # noqa: E501
        if service_provider_provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `service_provider_provisioning_state` ({0}), must be one of {1}"
                .format(service_provider_provisioning_state, allowed_values)
            )

        self._service_provider_provisioning_state = service_provider_provisioning_state
