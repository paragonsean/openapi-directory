# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.express_route_cross_connection_peering_properties_ipv6_peering_config import ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig
from openapi_server.models.express_route_cross_connection_peering_properties_ipv6_peering_config_microsoft_peering_config import ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig
from openapi_server import util


class ExpressRouteCrossConnectionPeeringProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, azure_asn: int=None, gateway_manager_etag: str=None, ipv6_peering_config: ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig=None, last_modified_by: str=None, microsoft_peering_config: ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig=None, peer_asn: int=None, peering_type: str=None, primary_azure_port: str=None, primary_peer_address_prefix: str=None, provisioning_state: str=None, secondary_azure_port: str=None, secondary_peer_address_prefix: str=None, shared_key: str=None, state: str=None, vlan_id: int=None):
        """ExpressRouteCrossConnectionPeeringProperties - a model defined in OpenAPI

        :param azure_asn: The azure_asn of this ExpressRouteCrossConnectionPeeringProperties.
        :param gateway_manager_etag: The gateway_manager_etag of this ExpressRouteCrossConnectionPeeringProperties.
        :param ipv6_peering_config: The ipv6_peering_config of this ExpressRouteCrossConnectionPeeringProperties.
        :param last_modified_by: The last_modified_by of this ExpressRouteCrossConnectionPeeringProperties.
        :param microsoft_peering_config: The microsoft_peering_config of this ExpressRouteCrossConnectionPeeringProperties.
        :param peer_asn: The peer_asn of this ExpressRouteCrossConnectionPeeringProperties.
        :param peering_type: The peering_type of this ExpressRouteCrossConnectionPeeringProperties.
        :param primary_azure_port: The primary_azure_port of this ExpressRouteCrossConnectionPeeringProperties.
        :param primary_peer_address_prefix: The primary_peer_address_prefix of this ExpressRouteCrossConnectionPeeringProperties.
        :param provisioning_state: The provisioning_state of this ExpressRouteCrossConnectionPeeringProperties.
        :param secondary_azure_port: The secondary_azure_port of this ExpressRouteCrossConnectionPeeringProperties.
        :param secondary_peer_address_prefix: The secondary_peer_address_prefix of this ExpressRouteCrossConnectionPeeringProperties.
        :param shared_key: The shared_key of this ExpressRouteCrossConnectionPeeringProperties.
        :param state: The state of this ExpressRouteCrossConnectionPeeringProperties.
        :param vlan_id: The vlan_id of this ExpressRouteCrossConnectionPeeringProperties.
        """
        self.openapi_types = {
            'azure_asn': int,
            'gateway_manager_etag': str,
            'ipv6_peering_config': ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig,
            'last_modified_by': str,
            'microsoft_peering_config': ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig,
            'peer_asn': int,
            'peering_type': str,
            'primary_azure_port': str,
            'primary_peer_address_prefix': str,
            'provisioning_state': str,
            'secondary_azure_port': str,
            'secondary_peer_address_prefix': str,
            'shared_key': str,
            'state': str,
            'vlan_id': int
        }

        self.attribute_map = {
            'azure_asn': 'azureASN',
            'gateway_manager_etag': 'gatewayManagerEtag',
            'ipv6_peering_config': 'ipv6PeeringConfig',
            'last_modified_by': 'lastModifiedBy',
            'microsoft_peering_config': 'microsoftPeeringConfig',
            'peer_asn': 'peerASN',
            'peering_type': 'peeringType',
            'primary_azure_port': 'primaryAzurePort',
            'primary_peer_address_prefix': 'primaryPeerAddressPrefix',
            'provisioning_state': 'provisioningState',
            'secondary_azure_port': 'secondaryAzurePort',
            'secondary_peer_address_prefix': 'secondaryPeerAddressPrefix',
            'shared_key': 'sharedKey',
            'state': 'state',
            'vlan_id': 'vlanId'
        }

        self._azure_asn = azure_asn
        self._gateway_manager_etag = gateway_manager_etag
        self._ipv6_peering_config = ipv6_peering_config
        self._last_modified_by = last_modified_by
        self._microsoft_peering_config = microsoft_peering_config
        self._peer_asn = peer_asn
        self._peering_type = peering_type
        self._primary_azure_port = primary_azure_port
        self._primary_peer_address_prefix = primary_peer_address_prefix
        self._provisioning_state = provisioning_state
        self._secondary_azure_port = secondary_azure_port
        self._secondary_peer_address_prefix = secondary_peer_address_prefix
        self._shared_key = shared_key
        self._state = state
        self._vlan_id = vlan_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpressRouteCrossConnectionPeeringProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpressRouteCrossConnectionPeeringProperties of this ExpressRouteCrossConnectionPeeringProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def azure_asn(self):
        """Gets the azure_asn of this ExpressRouteCrossConnectionPeeringProperties.

        The Azure ASN.

        :return: The azure_asn of this ExpressRouteCrossConnectionPeeringProperties.
        :rtype: int
        """
        return self._azure_asn

    @azure_asn.setter
    def azure_asn(self, azure_asn):
        """Sets the azure_asn of this ExpressRouteCrossConnectionPeeringProperties.

        The Azure ASN.

        :param azure_asn: The azure_asn of this ExpressRouteCrossConnectionPeeringProperties.
        :type azure_asn: int
        """

        self._azure_asn = azure_asn

    @property
    def gateway_manager_etag(self):
        """Gets the gateway_manager_etag of this ExpressRouteCrossConnectionPeeringProperties.

        The GatewayManager Etag.

        :return: The gateway_manager_etag of this ExpressRouteCrossConnectionPeeringProperties.
        :rtype: str
        """
        return self._gateway_manager_etag

    @gateway_manager_etag.setter
    def gateway_manager_etag(self, gateway_manager_etag):
        """Sets the gateway_manager_etag of this ExpressRouteCrossConnectionPeeringProperties.

        The GatewayManager Etag.

        :param gateway_manager_etag: The gateway_manager_etag of this ExpressRouteCrossConnectionPeeringProperties.
        :type gateway_manager_etag: str
        """

        self._gateway_manager_etag = gateway_manager_etag

    @property
    def ipv6_peering_config(self):
        """Gets the ipv6_peering_config of this ExpressRouteCrossConnectionPeeringProperties.


        :return: The ipv6_peering_config of this ExpressRouteCrossConnectionPeeringProperties.
        :rtype: ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig
        """
        return self._ipv6_peering_config

    @ipv6_peering_config.setter
    def ipv6_peering_config(self, ipv6_peering_config):
        """Sets the ipv6_peering_config of this ExpressRouteCrossConnectionPeeringProperties.


        :param ipv6_peering_config: The ipv6_peering_config of this ExpressRouteCrossConnectionPeeringProperties.
        :type ipv6_peering_config: ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig
        """

        self._ipv6_peering_config = ipv6_peering_config

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this ExpressRouteCrossConnectionPeeringProperties.

        Gets whether the provider or the customer last modified the peering.

        :return: The last_modified_by of this ExpressRouteCrossConnectionPeeringProperties.
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this ExpressRouteCrossConnectionPeeringProperties.

        Gets whether the provider or the customer last modified the peering.

        :param last_modified_by: The last_modified_by of this ExpressRouteCrossConnectionPeeringProperties.
        :type last_modified_by: str
        """

        self._last_modified_by = last_modified_by

    @property
    def microsoft_peering_config(self):
        """Gets the microsoft_peering_config of this ExpressRouteCrossConnectionPeeringProperties.


        :return: The microsoft_peering_config of this ExpressRouteCrossConnectionPeeringProperties.
        :rtype: ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig
        """
        return self._microsoft_peering_config

    @microsoft_peering_config.setter
    def microsoft_peering_config(self, microsoft_peering_config):
        """Sets the microsoft_peering_config of this ExpressRouteCrossConnectionPeeringProperties.


        :param microsoft_peering_config: The microsoft_peering_config of this ExpressRouteCrossConnectionPeeringProperties.
        :type microsoft_peering_config: ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig
        """

        self._microsoft_peering_config = microsoft_peering_config

    @property
    def peer_asn(self):
        """Gets the peer_asn of this ExpressRouteCrossConnectionPeeringProperties.

        The peer ASN.

        :return: The peer_asn of this ExpressRouteCrossConnectionPeeringProperties.
        :rtype: int
        """
        return self._peer_asn

    @peer_asn.setter
    def peer_asn(self, peer_asn):
        """Sets the peer_asn of this ExpressRouteCrossConnectionPeeringProperties.

        The peer ASN.

        :param peer_asn: The peer_asn of this ExpressRouteCrossConnectionPeeringProperties.
        :type peer_asn: int
        """
        if peer_asn is not None and peer_asn > 4294967295:
            raise ValueError("Invalid value for `peer_asn`, must be a value less than or equal to `4294967295`")
        if peer_asn is not None and peer_asn < 1:
            raise ValueError("Invalid value for `peer_asn`, must be a value greater than or equal to `1`")

        self._peer_asn = peer_asn

    @property
    def peering_type(self):
        """Gets the peering_type of this ExpressRouteCrossConnectionPeeringProperties.

        The peering type.

        :return: The peering_type of this ExpressRouteCrossConnectionPeeringProperties.
        :rtype: str
        """
        return self._peering_type

    @peering_type.setter
    def peering_type(self, peering_type):
        """Sets the peering_type of this ExpressRouteCrossConnectionPeeringProperties.

        The peering type.

        :param peering_type: The peering_type of this ExpressRouteCrossConnectionPeeringProperties.
        :type peering_type: str
        """
        allowed_values = ["AzurePublicPeering", "AzurePrivatePeering", "MicrosoftPeering"]  # noqa: E501
        if peering_type not in allowed_values:
            raise ValueError(
                "Invalid value for `peering_type` ({0}), must be one of {1}"
                .format(peering_type, allowed_values)
            )

        self._peering_type = peering_type

    @property
    def primary_azure_port(self):
        """Gets the primary_azure_port of this ExpressRouteCrossConnectionPeeringProperties.

        The primary port.

        :return: The primary_azure_port of this ExpressRouteCrossConnectionPeeringProperties.
        :rtype: str
        """
        return self._primary_azure_port

    @primary_azure_port.setter
    def primary_azure_port(self, primary_azure_port):
        """Sets the primary_azure_port of this ExpressRouteCrossConnectionPeeringProperties.

        The primary port.

        :param primary_azure_port: The primary_azure_port of this ExpressRouteCrossConnectionPeeringProperties.
        :type primary_azure_port: str
        """

        self._primary_azure_port = primary_azure_port

    @property
    def primary_peer_address_prefix(self):
        """Gets the primary_peer_address_prefix of this ExpressRouteCrossConnectionPeeringProperties.

        The primary address prefix.

        :return: The primary_peer_address_prefix of this ExpressRouteCrossConnectionPeeringProperties.
        :rtype: str
        """
        return self._primary_peer_address_prefix

    @primary_peer_address_prefix.setter
    def primary_peer_address_prefix(self, primary_peer_address_prefix):
        """Sets the primary_peer_address_prefix of this ExpressRouteCrossConnectionPeeringProperties.

        The primary address prefix.

        :param primary_peer_address_prefix: The primary_peer_address_prefix of this ExpressRouteCrossConnectionPeeringProperties.
        :type primary_peer_address_prefix: str
        """

        self._primary_peer_address_prefix = primary_peer_address_prefix

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ExpressRouteCrossConnectionPeeringProperties.

        Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.

        :return: The provisioning_state of this ExpressRouteCrossConnectionPeeringProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ExpressRouteCrossConnectionPeeringProperties.

        Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.

        :param provisioning_state: The provisioning_state of this ExpressRouteCrossConnectionPeeringProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def secondary_azure_port(self):
        """Gets the secondary_azure_port of this ExpressRouteCrossConnectionPeeringProperties.

        The secondary port.

        :return: The secondary_azure_port of this ExpressRouteCrossConnectionPeeringProperties.
        :rtype: str
        """
        return self._secondary_azure_port

    @secondary_azure_port.setter
    def secondary_azure_port(self, secondary_azure_port):
        """Sets the secondary_azure_port of this ExpressRouteCrossConnectionPeeringProperties.

        The secondary port.

        :param secondary_azure_port: The secondary_azure_port of this ExpressRouteCrossConnectionPeeringProperties.
        :type secondary_azure_port: str
        """

        self._secondary_azure_port = secondary_azure_port

    @property
    def secondary_peer_address_prefix(self):
        """Gets the secondary_peer_address_prefix of this ExpressRouteCrossConnectionPeeringProperties.

        The secondary address prefix.

        :return: The secondary_peer_address_prefix of this ExpressRouteCrossConnectionPeeringProperties.
        :rtype: str
        """
        return self._secondary_peer_address_prefix

    @secondary_peer_address_prefix.setter
    def secondary_peer_address_prefix(self, secondary_peer_address_prefix):
        """Sets the secondary_peer_address_prefix of this ExpressRouteCrossConnectionPeeringProperties.

        The secondary address prefix.

        :param secondary_peer_address_prefix: The secondary_peer_address_prefix of this ExpressRouteCrossConnectionPeeringProperties.
        :type secondary_peer_address_prefix: str
        """

        self._secondary_peer_address_prefix = secondary_peer_address_prefix

    @property
    def shared_key(self):
        """Gets the shared_key of this ExpressRouteCrossConnectionPeeringProperties.

        The shared key.

        :return: The shared_key of this ExpressRouteCrossConnectionPeeringProperties.
        :rtype: str
        """
        return self._shared_key

    @shared_key.setter
    def shared_key(self, shared_key):
        """Sets the shared_key of this ExpressRouteCrossConnectionPeeringProperties.

        The shared key.

        :param shared_key: The shared_key of this ExpressRouteCrossConnectionPeeringProperties.
        :type shared_key: str
        """

        self._shared_key = shared_key

    @property
    def state(self):
        """Gets the state of this ExpressRouteCrossConnectionPeeringProperties.

        The state of peering.

        :return: The state of this ExpressRouteCrossConnectionPeeringProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ExpressRouteCrossConnectionPeeringProperties.

        The state of peering.

        :param state: The state of this ExpressRouteCrossConnectionPeeringProperties.
        :type state: str
        """
        allowed_values = ["Disabled", "Enabled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def vlan_id(self):
        """Gets the vlan_id of this ExpressRouteCrossConnectionPeeringProperties.

        The VLAN ID.

        :return: The vlan_id of this ExpressRouteCrossConnectionPeeringProperties.
        :rtype: int
        """
        return self._vlan_id

    @vlan_id.setter
    def vlan_id(self, vlan_id):
        """Sets the vlan_id of this ExpressRouteCrossConnectionPeeringProperties.

        The VLAN ID.

        :param vlan_id: The vlan_id of this ExpressRouteCrossConnectionPeeringProperties.
        :type vlan_id: int
        """

        self._vlan_id = vlan_id
