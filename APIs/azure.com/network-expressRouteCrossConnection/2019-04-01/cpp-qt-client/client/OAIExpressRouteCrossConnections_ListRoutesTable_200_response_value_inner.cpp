/**
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner() {
    this->initializeModel();
}

OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::~OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner() {}

void OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::initializeModel() {

    m_loc_prf_isSet = false;
    m_loc_prf_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_next_hop_isSet = false;
    m_next_hop_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::fromJsonObject(QJsonObject json) {

    m_loc_prf_isValid = ::OpenAPI::fromJsonValue(m_loc_prf, json[QString("locPrf")]);
    m_loc_prf_isSet = !json[QString("locPrf")].isNull() && m_loc_prf_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_next_hop_isValid = ::OpenAPI::fromJsonValue(m_next_hop, json[QString("nextHop")]);
    m_next_hop_isSet = !json[QString("nextHop")].isNull() && m_next_hop_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_loc_prf_isSet) {
        obj.insert(QString("locPrf"), ::OpenAPI::toJsonValue(m_loc_prf));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_next_hop_isSet) {
        obj.insert(QString("nextHop"), ::OpenAPI::toJsonValue(m_next_hop));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QString OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::getLocPrf() const {
    return m_loc_prf;
}
void OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::setLocPrf(const QString &loc_prf) {
    m_loc_prf = loc_prf;
    m_loc_prf_isSet = true;
}

bool OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::is_loc_prf_Set() const{
    return m_loc_prf_isSet;
}

bool OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::is_loc_prf_Valid() const{
    return m_loc_prf_isValid;
}

QString OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::getNetwork() const {
    return m_network;
}
void OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::is_network_Set() const{
    return m_network_isSet;
}

bool OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::getNextHop() const {
    return m_next_hop;
}
void OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::setNextHop(const QString &next_hop) {
    m_next_hop = next_hop;
    m_next_hop_isSet = true;
}

bool OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::is_next_hop_Set() const{
    return m_next_hop_isSet;
}

bool OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::is_next_hop_Valid() const{
    return m_next_hop_isValid;
}

QString OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::getPath() const {
    return m_path;
}
void OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::is_path_Set() const{
    return m_path_isSet;
}

bool OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::is_path_Valid() const{
    return m_path_isValid;
}

qint32 OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::getWeight() const {
    return m_weight;
}
void OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_loc_prf_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_hop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRouteCrossConnections_ListRoutesTable_200_response_value_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
