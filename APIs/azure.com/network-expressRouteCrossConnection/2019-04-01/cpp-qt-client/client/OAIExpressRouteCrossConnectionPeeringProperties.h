/**
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExpressRouteCrossConnectionPeeringProperties.h
 *
 * Properties of express route cross connection peering.
 */

#ifndef OAIExpressRouteCrossConnectionPeeringProperties_H
#define OAIExpressRouteCrossConnectionPeeringProperties_H

#include <QJsonObject>

#include "OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig.h"
#include "OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_microsoftPeeringConfig.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig;
class OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_microsoftPeeringConfig;

class OAIExpressRouteCrossConnectionPeeringProperties : public OAIObject {
public:
    OAIExpressRouteCrossConnectionPeeringProperties();
    OAIExpressRouteCrossConnectionPeeringProperties(QString json);
    ~OAIExpressRouteCrossConnectionPeeringProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAzureAsn() const;
    void setAzureAsn(const qint32 &azure_asn);
    bool is_azure_asn_Set() const;
    bool is_azure_asn_Valid() const;

    QString getGatewayManagerEtag() const;
    void setGatewayManagerEtag(const QString &gateway_manager_etag);
    bool is_gateway_manager_etag_Set() const;
    bool is_gateway_manager_etag_Valid() const;

    OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig getIpv6PeeringConfig() const;
    void setIpv6PeeringConfig(const OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig &ipv6_peering_config);
    bool is_ipv6_peering_config_Set() const;
    bool is_ipv6_peering_config_Valid() const;

    QString getLastModifiedBy() const;
    void setLastModifiedBy(const QString &last_modified_by);
    bool is_last_modified_by_Set() const;
    bool is_last_modified_by_Valid() const;

    OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_microsoftPeeringConfig getMicrosoftPeeringConfig() const;
    void setMicrosoftPeeringConfig(const OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_microsoftPeeringConfig &microsoft_peering_config);
    bool is_microsoft_peering_config_Set() const;
    bool is_microsoft_peering_config_Valid() const;

    qint64 getPeerAsn() const;
    void setPeerAsn(const qint64 &peer_asn);
    bool is_peer_asn_Set() const;
    bool is_peer_asn_Valid() const;

    QString getPeeringType() const;
    void setPeeringType(const QString &peering_type);
    bool is_peering_type_Set() const;
    bool is_peering_type_Valid() const;

    QString getPrimaryAzurePort() const;
    void setPrimaryAzurePort(const QString &primary_azure_port);
    bool is_primary_azure_port_Set() const;
    bool is_primary_azure_port_Valid() const;

    QString getPrimaryPeerAddressPrefix() const;
    void setPrimaryPeerAddressPrefix(const QString &primary_peer_address_prefix);
    bool is_primary_peer_address_prefix_Set() const;
    bool is_primary_peer_address_prefix_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    QString getSecondaryAzurePort() const;
    void setSecondaryAzurePort(const QString &secondary_azure_port);
    bool is_secondary_azure_port_Set() const;
    bool is_secondary_azure_port_Valid() const;

    QString getSecondaryPeerAddressPrefix() const;
    void setSecondaryPeerAddressPrefix(const QString &secondary_peer_address_prefix);
    bool is_secondary_peer_address_prefix_Set() const;
    bool is_secondary_peer_address_prefix_Valid() const;

    QString getSharedKey() const;
    void setSharedKey(const QString &shared_key);
    bool is_shared_key_Set() const;
    bool is_shared_key_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    qint32 getVlanId() const;
    void setVlanId(const qint32 &vlan_id);
    bool is_vlan_id_Set() const;
    bool is_vlan_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_azure_asn;
    bool m_azure_asn_isSet;
    bool m_azure_asn_isValid;

    QString m_gateway_manager_etag;
    bool m_gateway_manager_etag_isSet;
    bool m_gateway_manager_etag_isValid;

    OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig m_ipv6_peering_config;
    bool m_ipv6_peering_config_isSet;
    bool m_ipv6_peering_config_isValid;

    QString m_last_modified_by;
    bool m_last_modified_by_isSet;
    bool m_last_modified_by_isValid;

    OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_microsoftPeeringConfig m_microsoft_peering_config;
    bool m_microsoft_peering_config_isSet;
    bool m_microsoft_peering_config_isValid;

    qint64 m_peer_asn;
    bool m_peer_asn_isSet;
    bool m_peer_asn_isValid;

    QString m_peering_type;
    bool m_peering_type_isSet;
    bool m_peering_type_isValid;

    QString m_primary_azure_port;
    bool m_primary_azure_port_isSet;
    bool m_primary_azure_port_isValid;

    QString m_primary_peer_address_prefix;
    bool m_primary_peer_address_prefix_isSet;
    bool m_primary_peer_address_prefix_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    QString m_secondary_azure_port;
    bool m_secondary_azure_port_isSet;
    bool m_secondary_azure_port_isValid;

    QString m_secondary_peer_address_prefix;
    bool m_secondary_peer_address_prefix_isSet;
    bool m_secondary_peer_address_prefix_isValid;

    QString m_shared_key;
    bool m_shared_key_isSet;
    bool m_shared_key_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    qint32 m_vlan_id;
    bool m_vlan_id_isSet;
    bool m_vlan_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExpressRouteCrossConnectionPeeringProperties)

#endif // OAIExpressRouteCrossConnectionPeeringProperties_H
