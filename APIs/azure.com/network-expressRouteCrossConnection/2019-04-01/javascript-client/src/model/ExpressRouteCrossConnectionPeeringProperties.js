/**
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig from './ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig';
import ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig from './ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig';

/**
 * The ExpressRouteCrossConnectionPeeringProperties model module.
 * @module model/ExpressRouteCrossConnectionPeeringProperties
 * @version 2019-04-01
 */
class ExpressRouteCrossConnectionPeeringProperties {
    /**
     * Constructs a new <code>ExpressRouteCrossConnectionPeeringProperties</code>.
     * Properties of express route cross connection peering.
     * @alias module:model/ExpressRouteCrossConnectionPeeringProperties
     */
    constructor() { 
        
        ExpressRouteCrossConnectionPeeringProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExpressRouteCrossConnectionPeeringProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExpressRouteCrossConnectionPeeringProperties} obj Optional instance to populate.
     * @return {module:model/ExpressRouteCrossConnectionPeeringProperties} The populated <code>ExpressRouteCrossConnectionPeeringProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExpressRouteCrossConnectionPeeringProperties();

            if (data.hasOwnProperty('azureASN')) {
                obj['azureASN'] = ApiClient.convertToType(data['azureASN'], 'Number');
            }
            if (data.hasOwnProperty('gatewayManagerEtag')) {
                obj['gatewayManagerEtag'] = ApiClient.convertToType(data['gatewayManagerEtag'], 'String');
            }
            if (data.hasOwnProperty('ipv6PeeringConfig')) {
                obj['ipv6PeeringConfig'] = ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig.constructFromObject(data['ipv6PeeringConfig']);
            }
            if (data.hasOwnProperty('lastModifiedBy')) {
                obj['lastModifiedBy'] = ApiClient.convertToType(data['lastModifiedBy'], 'String');
            }
            if (data.hasOwnProperty('microsoftPeeringConfig')) {
                obj['microsoftPeeringConfig'] = ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig.constructFromObject(data['microsoftPeeringConfig']);
            }
            if (data.hasOwnProperty('peerASN')) {
                obj['peerASN'] = ApiClient.convertToType(data['peerASN'], 'Number');
            }
            if (data.hasOwnProperty('peeringType')) {
                obj['peeringType'] = ApiClient.convertToType(data['peeringType'], 'String');
            }
            if (data.hasOwnProperty('primaryAzurePort')) {
                obj['primaryAzurePort'] = ApiClient.convertToType(data['primaryAzurePort'], 'String');
            }
            if (data.hasOwnProperty('primaryPeerAddressPrefix')) {
                obj['primaryPeerAddressPrefix'] = ApiClient.convertToType(data['primaryPeerAddressPrefix'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('secondaryAzurePort')) {
                obj['secondaryAzurePort'] = ApiClient.convertToType(data['secondaryAzurePort'], 'String');
            }
            if (data.hasOwnProperty('secondaryPeerAddressPrefix')) {
                obj['secondaryPeerAddressPrefix'] = ApiClient.convertToType(data['secondaryPeerAddressPrefix'], 'String');
            }
            if (data.hasOwnProperty('sharedKey')) {
                obj['sharedKey'] = ApiClient.convertToType(data['sharedKey'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('vlanId')) {
                obj['vlanId'] = ApiClient.convertToType(data['vlanId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExpressRouteCrossConnectionPeeringProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExpressRouteCrossConnectionPeeringProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['gatewayManagerEtag'] && !(typeof data['gatewayManagerEtag'] === 'string' || data['gatewayManagerEtag'] instanceof String)) {
            throw new Error("Expected the field `gatewayManagerEtag` to be a primitive type in the JSON string but got " + data['gatewayManagerEtag']);
        }
        // validate the optional field `ipv6PeeringConfig`
        if (data['ipv6PeeringConfig']) { // data not null
          ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig.validateJSON(data['ipv6PeeringConfig']);
        }
        // ensure the json data is a string
        if (data['lastModifiedBy'] && !(typeof data['lastModifiedBy'] === 'string' || data['lastModifiedBy'] instanceof String)) {
            throw new Error("Expected the field `lastModifiedBy` to be a primitive type in the JSON string but got " + data['lastModifiedBy']);
        }
        // validate the optional field `microsoftPeeringConfig`
        if (data['microsoftPeeringConfig']) { // data not null
          ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig.validateJSON(data['microsoftPeeringConfig']);
        }
        // ensure the json data is a string
        if (data['peeringType'] && !(typeof data['peeringType'] === 'string' || data['peeringType'] instanceof String)) {
            throw new Error("Expected the field `peeringType` to be a primitive type in the JSON string but got " + data['peeringType']);
        }
        // ensure the json data is a string
        if (data['primaryAzurePort'] && !(typeof data['primaryAzurePort'] === 'string' || data['primaryAzurePort'] instanceof String)) {
            throw new Error("Expected the field `primaryAzurePort` to be a primitive type in the JSON string but got " + data['primaryAzurePort']);
        }
        // ensure the json data is a string
        if (data['primaryPeerAddressPrefix'] && !(typeof data['primaryPeerAddressPrefix'] === 'string' || data['primaryPeerAddressPrefix'] instanceof String)) {
            throw new Error("Expected the field `primaryPeerAddressPrefix` to be a primitive type in the JSON string but got " + data['primaryPeerAddressPrefix']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['secondaryAzurePort'] && !(typeof data['secondaryAzurePort'] === 'string' || data['secondaryAzurePort'] instanceof String)) {
            throw new Error("Expected the field `secondaryAzurePort` to be a primitive type in the JSON string but got " + data['secondaryAzurePort']);
        }
        // ensure the json data is a string
        if (data['secondaryPeerAddressPrefix'] && !(typeof data['secondaryPeerAddressPrefix'] === 'string' || data['secondaryPeerAddressPrefix'] instanceof String)) {
            throw new Error("Expected the field `secondaryPeerAddressPrefix` to be a primitive type in the JSON string but got " + data['secondaryPeerAddressPrefix']);
        }
        // ensure the json data is a string
        if (data['sharedKey'] && !(typeof data['sharedKey'] === 'string' || data['sharedKey'] instanceof String)) {
            throw new Error("Expected the field `sharedKey` to be a primitive type in the JSON string but got " + data['sharedKey']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * The Azure ASN.
 * @member {Number} azureASN
 */
ExpressRouteCrossConnectionPeeringProperties.prototype['azureASN'] = undefined;

/**
 * The GatewayManager Etag.
 * @member {String} gatewayManagerEtag
 */
ExpressRouteCrossConnectionPeeringProperties.prototype['gatewayManagerEtag'] = undefined;

/**
 * @member {module:model/ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfig} ipv6PeeringConfig
 */
ExpressRouteCrossConnectionPeeringProperties.prototype['ipv6PeeringConfig'] = undefined;

/**
 * Gets whether the provider or the customer last modified the peering.
 * @member {String} lastModifiedBy
 */
ExpressRouteCrossConnectionPeeringProperties.prototype['lastModifiedBy'] = undefined;

/**
 * @member {module:model/ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig} microsoftPeeringConfig
 */
ExpressRouteCrossConnectionPeeringProperties.prototype['microsoftPeeringConfig'] = undefined;

/**
 * The peer ASN.
 * @member {Number} peerASN
 */
ExpressRouteCrossConnectionPeeringProperties.prototype['peerASN'] = undefined;

/**
 * The peering type.
 * @member {module:model/ExpressRouteCrossConnectionPeeringProperties.PeeringTypeEnum} peeringType
 */
ExpressRouteCrossConnectionPeeringProperties.prototype['peeringType'] = undefined;

/**
 * The primary port.
 * @member {String} primaryAzurePort
 */
ExpressRouteCrossConnectionPeeringProperties.prototype['primaryAzurePort'] = undefined;

/**
 * The primary address prefix.
 * @member {String} primaryPeerAddressPrefix
 */
ExpressRouteCrossConnectionPeeringProperties.prototype['primaryPeerAddressPrefix'] = undefined;

/**
 * Gets the provisioning state of the public IP resource. Possible values are: 'Updating', 'Deleting', and 'Failed'.
 * @member {String} provisioningState
 */
ExpressRouteCrossConnectionPeeringProperties.prototype['provisioningState'] = undefined;

/**
 * The secondary port.
 * @member {String} secondaryAzurePort
 */
ExpressRouteCrossConnectionPeeringProperties.prototype['secondaryAzurePort'] = undefined;

/**
 * The secondary address prefix.
 * @member {String} secondaryPeerAddressPrefix
 */
ExpressRouteCrossConnectionPeeringProperties.prototype['secondaryPeerAddressPrefix'] = undefined;

/**
 * The shared key.
 * @member {String} sharedKey
 */
ExpressRouteCrossConnectionPeeringProperties.prototype['sharedKey'] = undefined;

/**
 * The state of peering.
 * @member {module:model/ExpressRouteCrossConnectionPeeringProperties.StateEnum} state
 */
ExpressRouteCrossConnectionPeeringProperties.prototype['state'] = undefined;

/**
 * The VLAN ID.
 * @member {Number} vlanId
 */
ExpressRouteCrossConnectionPeeringProperties.prototype['vlanId'] = undefined;





/**
 * Allowed values for the <code>peeringType</code> property.
 * @enum {String}
 * @readonly
 */
ExpressRouteCrossConnectionPeeringProperties['PeeringTypeEnum'] = {

    /**
     * value: "AzurePublicPeering"
     * @const
     */
    "AzurePublicPeering": "AzurePublicPeering",

    /**
     * value: "AzurePrivatePeering"
     * @const
     */
    "AzurePrivatePeering": "AzurePrivatePeering",

    /**
     * value: "MicrosoftPeering"
     * @const
     */
    "MicrosoftPeering": "MicrosoftPeering"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ExpressRouteCrossConnectionPeeringProperties['StateEnum'] = {

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled"
};



export default ExpressRouteCrossConnectionPeeringProperties;

