/**
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig model module.
 * @module model/ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig
 * @version 2019-04-01
 */
class ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig {
    /**
     * Constructs a new <code>ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig</code>.
     * Specifies the peering configuration.
     * @alias module:model/ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig
     */
    constructor() { 
        
        ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig} obj Optional instance to populate.
     * @return {module:model/ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig} The populated <code>ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig();

            if (data.hasOwnProperty('advertisedCommunities')) {
                obj['advertisedCommunities'] = ApiClient.convertToType(data['advertisedCommunities'], ['String']);
            }
            if (data.hasOwnProperty('advertisedPublicPrefixes')) {
                obj['advertisedPublicPrefixes'] = ApiClient.convertToType(data['advertisedPublicPrefixes'], ['String']);
            }
            if (data.hasOwnProperty('advertisedPublicPrefixesState')) {
                obj['advertisedPublicPrefixesState'] = ApiClient.convertToType(data['advertisedPublicPrefixesState'], 'String');
            }
            if (data.hasOwnProperty('customerASN')) {
                obj['customerASN'] = ApiClient.convertToType(data['customerASN'], 'Number');
            }
            if (data.hasOwnProperty('legacyMode')) {
                obj['legacyMode'] = ApiClient.convertToType(data['legacyMode'], 'Number');
            }
            if (data.hasOwnProperty('routingRegistryName')) {
                obj['routingRegistryName'] = ApiClient.convertToType(data['routingRegistryName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['advertisedCommunities'])) {
            throw new Error("Expected the field `advertisedCommunities` to be an array in the JSON data but got " + data['advertisedCommunities']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['advertisedPublicPrefixes'])) {
            throw new Error("Expected the field `advertisedPublicPrefixes` to be an array in the JSON data but got " + data['advertisedPublicPrefixes']);
        }
        // ensure the json data is a string
        if (data['advertisedPublicPrefixesState'] && !(typeof data['advertisedPublicPrefixesState'] === 'string' || data['advertisedPublicPrefixesState'] instanceof String)) {
            throw new Error("Expected the field `advertisedPublicPrefixesState` to be a primitive type in the JSON string but got " + data['advertisedPublicPrefixesState']);
        }
        // ensure the json data is a string
        if (data['routingRegistryName'] && !(typeof data['routingRegistryName'] === 'string' || data['routingRegistryName'] instanceof String)) {
            throw new Error("Expected the field `routingRegistryName` to be a primitive type in the JSON string but got " + data['routingRegistryName']);
        }

        return true;
    }


}



/**
 * The communities of bgp peering. Specified for microsoft peering.
 * @member {Array.<String>} advertisedCommunities
 */
ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig.prototype['advertisedCommunities'] = undefined;

/**
 * The reference of AdvertisedPublicPrefixes.
 * @member {Array.<String>} advertisedPublicPrefixes
 */
ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig.prototype['advertisedPublicPrefixes'] = undefined;

/**
 * The advertised public prefix state of the Peering resource.
 * @member {module:model/ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig.AdvertisedPublicPrefixesStateEnum} advertisedPublicPrefixesState
 */
ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig.prototype['advertisedPublicPrefixesState'] = undefined;

/**
 * The CustomerASN of the peering.
 * @member {Number} customerASN
 */
ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig.prototype['customerASN'] = undefined;

/**
 * The legacy mode of the peering.
 * @member {Number} legacyMode
 */
ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig.prototype['legacyMode'] = undefined;

/**
 * The RoutingRegistryName of the configuration.
 * @member {String} routingRegistryName
 */
ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig.prototype['routingRegistryName'] = undefined;





/**
 * Allowed values for the <code>advertisedPublicPrefixesState</code> property.
 * @enum {String}
 * @readonly
 */
ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig['AdvertisedPublicPrefixesStateEnum'] = {

    /**
     * value: "NotConfigured"
     * @const
     */
    "NotConfigured": "NotConfigured",

    /**
     * value: "Configuring"
     * @const
     */
    "Configuring": "Configuring",

    /**
     * value: "Configured"
     * @const
     */
    "Configured": "Configured",

    /**
     * value: "ValidationNeeded"
     * @const
     */
    "ValidationNeeded": "ValidationNeeded"
};



export default ExpressRouteCrossConnectionPeeringPropertiesIpv6PeeringConfigMicrosoftPeeringConfig;

