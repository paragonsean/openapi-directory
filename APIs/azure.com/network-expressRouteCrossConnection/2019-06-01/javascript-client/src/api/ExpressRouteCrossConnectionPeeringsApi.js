/**
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExpressRouteCrossConnectionPeering from '../model/ExpressRouteCrossConnectionPeering';
import ExpressRouteCrossConnectionPeeringList from '../model/ExpressRouteCrossConnectionPeeringList';

/**
* ExpressRouteCrossConnectionPeerings service.
* @module api/ExpressRouteCrossConnectionPeeringsApi
* @version 2019-06-01
*/
export default class ExpressRouteCrossConnectionPeeringsApi {

    /**
    * Constructs a new ExpressRouteCrossConnectionPeeringsApi. 
    * @alias module:api/ExpressRouteCrossConnectionPeeringsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the expressRouteCrossConnectionPeeringsCreateOrUpdate operation.
     * @callback module:api/ExpressRouteCrossConnectionPeeringsApi~expressRouteCrossConnectionPeeringsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpressRouteCrossConnectionPeering} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a peering in the specified ExpressRouteCrossConnection.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} crossConnectionName The name of the ExpressRouteCrossConnection.
     * @param {String} peeringName The name of the peering.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/ExpressRouteCrossConnectionPeering} peeringParameters Parameters supplied to the create or update ExpressRouteCrossConnection peering operation.
     * @param {module:api/ExpressRouteCrossConnectionPeeringsApi~expressRouteCrossConnectionPeeringsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpressRouteCrossConnectionPeering}
     */
    expressRouteCrossConnectionPeeringsCreateOrUpdate(resourceGroupName, crossConnectionName, peeringName, apiVersion, subscriptionId, peeringParameters, callback) {
      let postBody = peeringParameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling expressRouteCrossConnectionPeeringsCreateOrUpdate");
      }
      // verify the required parameter 'crossConnectionName' is set
      if (crossConnectionName === undefined || crossConnectionName === null) {
        throw new Error("Missing the required parameter 'crossConnectionName' when calling expressRouteCrossConnectionPeeringsCreateOrUpdate");
      }
      // verify the required parameter 'peeringName' is set
      if (peeringName === undefined || peeringName === null) {
        throw new Error("Missing the required parameter 'peeringName' when calling expressRouteCrossConnectionPeeringsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling expressRouteCrossConnectionPeeringsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling expressRouteCrossConnectionPeeringsCreateOrUpdate");
      }
      // verify the required parameter 'peeringParameters' is set
      if (peeringParameters === undefined || peeringParameters === null) {
        throw new Error("Missing the required parameter 'peeringParameters' when calling expressRouteCrossConnectionPeeringsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'crossConnectionName': crossConnectionName,
        'peeringName': peeringName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExpressRouteCrossConnectionPeering;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings/{peeringName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expressRouteCrossConnectionPeeringsDelete operation.
     * @callback module:api/ExpressRouteCrossConnectionPeeringsApi~expressRouteCrossConnectionPeeringsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified peering from the ExpressRouteCrossConnection.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} crossConnectionName The name of the ExpressRouteCrossConnection.
     * @param {String} peeringName The name of the peering.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ExpressRouteCrossConnectionPeeringsApi~expressRouteCrossConnectionPeeringsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    expressRouteCrossConnectionPeeringsDelete(resourceGroupName, crossConnectionName, peeringName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling expressRouteCrossConnectionPeeringsDelete");
      }
      // verify the required parameter 'crossConnectionName' is set
      if (crossConnectionName === undefined || crossConnectionName === null) {
        throw new Error("Missing the required parameter 'crossConnectionName' when calling expressRouteCrossConnectionPeeringsDelete");
      }
      // verify the required parameter 'peeringName' is set
      if (peeringName === undefined || peeringName === null) {
        throw new Error("Missing the required parameter 'peeringName' when calling expressRouteCrossConnectionPeeringsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling expressRouteCrossConnectionPeeringsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling expressRouteCrossConnectionPeeringsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'crossConnectionName': crossConnectionName,
        'peeringName': peeringName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings/{peeringName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expressRouteCrossConnectionPeeringsGet operation.
     * @callback module:api/ExpressRouteCrossConnectionPeeringsApi~expressRouteCrossConnectionPeeringsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpressRouteCrossConnectionPeering} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the specified peering for the ExpressRouteCrossConnection.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} crossConnectionName The name of the ExpressRouteCrossConnection.
     * @param {String} peeringName The name of the peering.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ExpressRouteCrossConnectionPeeringsApi~expressRouteCrossConnectionPeeringsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpressRouteCrossConnectionPeering}
     */
    expressRouteCrossConnectionPeeringsGet(resourceGroupName, crossConnectionName, peeringName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling expressRouteCrossConnectionPeeringsGet");
      }
      // verify the required parameter 'crossConnectionName' is set
      if (crossConnectionName === undefined || crossConnectionName === null) {
        throw new Error("Missing the required parameter 'crossConnectionName' when calling expressRouteCrossConnectionPeeringsGet");
      }
      // verify the required parameter 'peeringName' is set
      if (peeringName === undefined || peeringName === null) {
        throw new Error("Missing the required parameter 'peeringName' when calling expressRouteCrossConnectionPeeringsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling expressRouteCrossConnectionPeeringsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling expressRouteCrossConnectionPeeringsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'crossConnectionName': crossConnectionName,
        'peeringName': peeringName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExpressRouteCrossConnectionPeering;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings/{peeringName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expressRouteCrossConnectionPeeringsList operation.
     * @callback module:api/ExpressRouteCrossConnectionPeeringsApi~expressRouteCrossConnectionPeeringsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpressRouteCrossConnectionPeeringList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all peerings in a specified ExpressRouteCrossConnection.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} crossConnectionName The name of the ExpressRouteCrossConnection.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ExpressRouteCrossConnectionPeeringsApi~expressRouteCrossConnectionPeeringsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpressRouteCrossConnectionPeeringList}
     */
    expressRouteCrossConnectionPeeringsList(resourceGroupName, crossConnectionName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling expressRouteCrossConnectionPeeringsList");
      }
      // verify the required parameter 'crossConnectionName' is set
      if (crossConnectionName === undefined || crossConnectionName === null) {
        throw new Error("Missing the required parameter 'crossConnectionName' when calling expressRouteCrossConnectionPeeringsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling expressRouteCrossConnectionPeeringsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling expressRouteCrossConnectionPeeringsList");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'crossConnectionName': crossConnectionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExpressRouteCrossConnectionPeeringList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
