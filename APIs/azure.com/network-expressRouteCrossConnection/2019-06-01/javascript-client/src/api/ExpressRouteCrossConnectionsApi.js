/**
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExpressRouteCrossConnection from '../model/ExpressRouteCrossConnection';
import ExpressRouteCrossConnectionListResult from '../model/ExpressRouteCrossConnectionListResult';
import ExpressRouteCrossConnectionsUpdateTagsRequest from '../model/ExpressRouteCrossConnectionsUpdateTagsRequest';

/**
* ExpressRouteCrossConnections service.
* @module api/ExpressRouteCrossConnectionsApi
* @version 2019-06-01
*/
export default class ExpressRouteCrossConnectionsApi {

    /**
    * Constructs a new ExpressRouteCrossConnectionsApi. 
    * @alias module:api/ExpressRouteCrossConnectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the expressRouteCrossConnectionsCreateOrUpdate operation.
     * @callback module:api/ExpressRouteCrossConnectionsApi~expressRouteCrossConnectionsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpressRouteCrossConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the specified ExpressRouteCrossConnection.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} crossConnectionName The name of the ExpressRouteCrossConnection.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/ExpressRouteCrossConnection} parameters Parameters supplied to the update express route crossConnection operation.
     * @param {module:api/ExpressRouteCrossConnectionsApi~expressRouteCrossConnectionsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpressRouteCrossConnection}
     */
    expressRouteCrossConnectionsCreateOrUpdate(resourceGroupName, crossConnectionName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling expressRouteCrossConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'crossConnectionName' is set
      if (crossConnectionName === undefined || crossConnectionName === null) {
        throw new Error("Missing the required parameter 'crossConnectionName' when calling expressRouteCrossConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling expressRouteCrossConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling expressRouteCrossConnectionsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling expressRouteCrossConnectionsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'crossConnectionName': crossConnectionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExpressRouteCrossConnection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expressRouteCrossConnectionsGet operation.
     * @callback module:api/ExpressRouteCrossConnectionsApi~expressRouteCrossConnectionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpressRouteCrossConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details about the specified ExpressRouteCrossConnection.
     * @param {String} resourceGroupName The name of the resource group (peering location of the circuit).
     * @param {String} crossConnectionName The name of the ExpressRouteCrossConnection (service key of the circuit).
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ExpressRouteCrossConnectionsApi~expressRouteCrossConnectionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpressRouteCrossConnection}
     */
    expressRouteCrossConnectionsGet(resourceGroupName, crossConnectionName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling expressRouteCrossConnectionsGet");
      }
      // verify the required parameter 'crossConnectionName' is set
      if (crossConnectionName === undefined || crossConnectionName === null) {
        throw new Error("Missing the required parameter 'crossConnectionName' when calling expressRouteCrossConnectionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling expressRouteCrossConnectionsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling expressRouteCrossConnectionsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'crossConnectionName': crossConnectionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExpressRouteCrossConnection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expressRouteCrossConnectionsList operation.
     * @callback module:api/ExpressRouteCrossConnectionsApi~expressRouteCrossConnectionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpressRouteCrossConnectionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all the ExpressRouteCrossConnections in a subscription.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ExpressRouteCrossConnectionsApi~expressRouteCrossConnectionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpressRouteCrossConnectionListResult}
     */
    expressRouteCrossConnectionsList(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling expressRouteCrossConnectionsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling expressRouteCrossConnectionsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExpressRouteCrossConnectionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Network/expressRouteCrossConnections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expressRouteCrossConnectionsListByResourceGroup operation.
     * @callback module:api/ExpressRouteCrossConnectionsApi~expressRouteCrossConnectionsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpressRouteCrossConnectionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all the ExpressRouteCrossConnections in a resource group.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ExpressRouteCrossConnectionsApi~expressRouteCrossConnectionsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpressRouteCrossConnectionListResult}
     */
    expressRouteCrossConnectionsListByResourceGroup(resourceGroupName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling expressRouteCrossConnectionsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling expressRouteCrossConnectionsListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling expressRouteCrossConnectionsListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExpressRouteCrossConnectionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expressRouteCrossConnectionsUpdateTags operation.
     * @callback module:api/ExpressRouteCrossConnectionsApi~expressRouteCrossConnectionsUpdateTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpressRouteCrossConnection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an express route cross connection tags.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} crossConnectionName The name of the cross connection.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/ExpressRouteCrossConnectionsUpdateTagsRequest} crossConnectionParameters Parameters supplied to update express route cross connection tags.
     * @param {module:api/ExpressRouteCrossConnectionsApi~expressRouteCrossConnectionsUpdateTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpressRouteCrossConnection}
     */
    expressRouteCrossConnectionsUpdateTags(resourceGroupName, crossConnectionName, apiVersion, subscriptionId, crossConnectionParameters, callback) {
      let postBody = crossConnectionParameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling expressRouteCrossConnectionsUpdateTags");
      }
      // verify the required parameter 'crossConnectionName' is set
      if (crossConnectionName === undefined || crossConnectionName === null) {
        throw new Error("Missing the required parameter 'crossConnectionName' when calling expressRouteCrossConnectionsUpdateTags");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling expressRouteCrossConnectionsUpdateTags");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling expressRouteCrossConnectionsUpdateTags");
      }
      // verify the required parameter 'crossConnectionParameters' is set
      if (crossConnectionParameters === undefined || crossConnectionParameters === null) {
        throw new Error("Missing the required parameter 'crossConnectionParameters' when calling expressRouteCrossConnectionsUpdateTags");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'crossConnectionName': crossConnectionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExpressRouteCrossConnection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
