/**
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRouteCrossConnectionsRoutesTableSummaryListResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRouteCrossConnectionsRoutesTableSummaryListResult::OAIExpressRouteCrossConnectionsRoutesTableSummaryListResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRouteCrossConnectionsRoutesTableSummaryListResult::OAIExpressRouteCrossConnectionsRoutesTableSummaryListResult() {
    this->initializeModel();
}

OAIExpressRouteCrossConnectionsRoutesTableSummaryListResult::~OAIExpressRouteCrossConnectionsRoutesTableSummaryListResult() {}

void OAIExpressRouteCrossConnectionsRoutesTableSummaryListResult::initializeModel() {

    m_next_link_isSet = false;
    m_next_link_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIExpressRouteCrossConnectionsRoutesTableSummaryListResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRouteCrossConnectionsRoutesTableSummaryListResult::fromJsonObject(QJsonObject json) {

    m_next_link_isValid = ::OpenAPI::fromJsonValue(m_next_link, json[QString("nextLink")]);
    m_next_link_isSet = !json[QString("nextLink")].isNull() && m_next_link_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIExpressRouteCrossConnectionsRoutesTableSummaryListResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRouteCrossConnectionsRoutesTableSummaryListResult::asJsonObject() const {
    QJsonObject obj;
    if (m_next_link_isSet) {
        obj.insert(QString("nextLink"), ::OpenAPI::toJsonValue(m_next_link));
    }
    if (m_value.size() > 0) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIExpressRouteCrossConnectionsRoutesTableSummaryListResult::getNextLink() const {
    return m_next_link;
}
void OAIExpressRouteCrossConnectionsRoutesTableSummaryListResult::setNextLink(const QString &next_link) {
    m_next_link = next_link;
    m_next_link_isSet = true;
}

bool OAIExpressRouteCrossConnectionsRoutesTableSummaryListResult::is_next_link_Set() const{
    return m_next_link_isSet;
}

bool OAIExpressRouteCrossConnectionsRoutesTableSummaryListResult::is_next_link_Valid() const{
    return m_next_link_isValid;
}

QList<OAIExpressRouteCrossConnectionRoutesTableSummary> OAIExpressRouteCrossConnectionsRoutesTableSummaryListResult::getValue() const {
    return m_value;
}
void OAIExpressRouteCrossConnectionsRoutesTableSummaryListResult::setValue(const QList<OAIExpressRouteCrossConnectionRoutesTableSummary> &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIExpressRouteCrossConnectionsRoutesTableSummaryListResult::is_value_Set() const{
    return m_value_isSet;
}

bool OAIExpressRouteCrossConnectionsRoutesTableSummaryListResult::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIExpressRouteCrossConnectionsRoutesTableSummaryListResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRouteCrossConnectionsRoutesTableSummaryListResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
