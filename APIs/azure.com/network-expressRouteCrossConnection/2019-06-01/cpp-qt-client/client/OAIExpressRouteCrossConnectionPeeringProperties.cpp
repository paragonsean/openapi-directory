/**
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRouteCrossConnectionPeeringProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRouteCrossConnectionPeeringProperties::OAIExpressRouteCrossConnectionPeeringProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRouteCrossConnectionPeeringProperties::OAIExpressRouteCrossConnectionPeeringProperties() {
    this->initializeModel();
}

OAIExpressRouteCrossConnectionPeeringProperties::~OAIExpressRouteCrossConnectionPeeringProperties() {}

void OAIExpressRouteCrossConnectionPeeringProperties::initializeModel() {

    m_azure_asn_isSet = false;
    m_azure_asn_isValid = false;

    m_gateway_manager_etag_isSet = false;
    m_gateway_manager_etag_isValid = false;

    m_ipv6_peering_config_isSet = false;
    m_ipv6_peering_config_isValid = false;

    m_last_modified_by_isSet = false;
    m_last_modified_by_isValid = false;

    m_microsoft_peering_config_isSet = false;
    m_microsoft_peering_config_isValid = false;

    m_peer_asn_isSet = false;
    m_peer_asn_isValid = false;

    m_peering_type_isSet = false;
    m_peering_type_isValid = false;

    m_primary_azure_port_isSet = false;
    m_primary_azure_port_isValid = false;

    m_primary_peer_address_prefix_isSet = false;
    m_primary_peer_address_prefix_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_secondary_azure_port_isSet = false;
    m_secondary_azure_port_isValid = false;

    m_secondary_peer_address_prefix_isSet = false;
    m_secondary_peer_address_prefix_isValid = false;

    m_shared_key_isSet = false;
    m_shared_key_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_vlan_id_isSet = false;
    m_vlan_id_isValid = false;
}

void OAIExpressRouteCrossConnectionPeeringProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRouteCrossConnectionPeeringProperties::fromJsonObject(QJsonObject json) {

    m_azure_asn_isValid = ::OpenAPI::fromJsonValue(m_azure_asn, json[QString("azureASN")]);
    m_azure_asn_isSet = !json[QString("azureASN")].isNull() && m_azure_asn_isValid;

    m_gateway_manager_etag_isValid = ::OpenAPI::fromJsonValue(m_gateway_manager_etag, json[QString("gatewayManagerEtag")]);
    m_gateway_manager_etag_isSet = !json[QString("gatewayManagerEtag")].isNull() && m_gateway_manager_etag_isValid;

    m_ipv6_peering_config_isValid = ::OpenAPI::fromJsonValue(m_ipv6_peering_config, json[QString("ipv6PeeringConfig")]);
    m_ipv6_peering_config_isSet = !json[QString("ipv6PeeringConfig")].isNull() && m_ipv6_peering_config_isValid;

    m_last_modified_by_isValid = ::OpenAPI::fromJsonValue(m_last_modified_by, json[QString("lastModifiedBy")]);
    m_last_modified_by_isSet = !json[QString("lastModifiedBy")].isNull() && m_last_modified_by_isValid;

    m_microsoft_peering_config_isValid = ::OpenAPI::fromJsonValue(m_microsoft_peering_config, json[QString("microsoftPeeringConfig")]);
    m_microsoft_peering_config_isSet = !json[QString("microsoftPeeringConfig")].isNull() && m_microsoft_peering_config_isValid;

    m_peer_asn_isValid = ::OpenAPI::fromJsonValue(m_peer_asn, json[QString("peerASN")]);
    m_peer_asn_isSet = !json[QString("peerASN")].isNull() && m_peer_asn_isValid;

    m_peering_type_isValid = ::OpenAPI::fromJsonValue(m_peering_type, json[QString("peeringType")]);
    m_peering_type_isSet = !json[QString("peeringType")].isNull() && m_peering_type_isValid;

    m_primary_azure_port_isValid = ::OpenAPI::fromJsonValue(m_primary_azure_port, json[QString("primaryAzurePort")]);
    m_primary_azure_port_isSet = !json[QString("primaryAzurePort")].isNull() && m_primary_azure_port_isValid;

    m_primary_peer_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_primary_peer_address_prefix, json[QString("primaryPeerAddressPrefix")]);
    m_primary_peer_address_prefix_isSet = !json[QString("primaryPeerAddressPrefix")].isNull() && m_primary_peer_address_prefix_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_secondary_azure_port_isValid = ::OpenAPI::fromJsonValue(m_secondary_azure_port, json[QString("secondaryAzurePort")]);
    m_secondary_azure_port_isSet = !json[QString("secondaryAzurePort")].isNull() && m_secondary_azure_port_isValid;

    m_secondary_peer_address_prefix_isValid = ::OpenAPI::fromJsonValue(m_secondary_peer_address_prefix, json[QString("secondaryPeerAddressPrefix")]);
    m_secondary_peer_address_prefix_isSet = !json[QString("secondaryPeerAddressPrefix")].isNull() && m_secondary_peer_address_prefix_isValid;

    m_shared_key_isValid = ::OpenAPI::fromJsonValue(m_shared_key, json[QString("sharedKey")]);
    m_shared_key_isSet = !json[QString("sharedKey")].isNull() && m_shared_key_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_vlan_id_isValid = ::OpenAPI::fromJsonValue(m_vlan_id, json[QString("vlanId")]);
    m_vlan_id_isSet = !json[QString("vlanId")].isNull() && m_vlan_id_isValid;
}

QString OAIExpressRouteCrossConnectionPeeringProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRouteCrossConnectionPeeringProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_azure_asn_isSet) {
        obj.insert(QString("azureASN"), ::OpenAPI::toJsonValue(m_azure_asn));
    }
    if (m_gateway_manager_etag_isSet) {
        obj.insert(QString("gatewayManagerEtag"), ::OpenAPI::toJsonValue(m_gateway_manager_etag));
    }
    if (m_ipv6_peering_config.isSet()) {
        obj.insert(QString("ipv6PeeringConfig"), ::OpenAPI::toJsonValue(m_ipv6_peering_config));
    }
    if (m_last_modified_by_isSet) {
        obj.insert(QString("lastModifiedBy"), ::OpenAPI::toJsonValue(m_last_modified_by));
    }
    if (m_microsoft_peering_config.isSet()) {
        obj.insert(QString("microsoftPeeringConfig"), ::OpenAPI::toJsonValue(m_microsoft_peering_config));
    }
    if (m_peer_asn_isSet) {
        obj.insert(QString("peerASN"), ::OpenAPI::toJsonValue(m_peer_asn));
    }
    if (m_peering_type_isSet) {
        obj.insert(QString("peeringType"), ::OpenAPI::toJsonValue(m_peering_type));
    }
    if (m_primary_azure_port_isSet) {
        obj.insert(QString("primaryAzurePort"), ::OpenAPI::toJsonValue(m_primary_azure_port));
    }
    if (m_primary_peer_address_prefix_isSet) {
        obj.insert(QString("primaryPeerAddressPrefix"), ::OpenAPI::toJsonValue(m_primary_peer_address_prefix));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_secondary_azure_port_isSet) {
        obj.insert(QString("secondaryAzurePort"), ::OpenAPI::toJsonValue(m_secondary_azure_port));
    }
    if (m_secondary_peer_address_prefix_isSet) {
        obj.insert(QString("secondaryPeerAddressPrefix"), ::OpenAPI::toJsonValue(m_secondary_peer_address_prefix));
    }
    if (m_shared_key_isSet) {
        obj.insert(QString("sharedKey"), ::OpenAPI::toJsonValue(m_shared_key));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_vlan_id_isSet) {
        obj.insert(QString("vlanId"), ::OpenAPI::toJsonValue(m_vlan_id));
    }
    return obj;
}

qint32 OAIExpressRouteCrossConnectionPeeringProperties::getAzureAsn() const {
    return m_azure_asn;
}
void OAIExpressRouteCrossConnectionPeeringProperties::setAzureAsn(const qint32 &azure_asn) {
    m_azure_asn = azure_asn;
    m_azure_asn_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_azure_asn_Set() const{
    return m_azure_asn_isSet;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_azure_asn_Valid() const{
    return m_azure_asn_isValid;
}

QString OAIExpressRouteCrossConnectionPeeringProperties::getGatewayManagerEtag() const {
    return m_gateway_manager_etag;
}
void OAIExpressRouteCrossConnectionPeeringProperties::setGatewayManagerEtag(const QString &gateway_manager_etag) {
    m_gateway_manager_etag = gateway_manager_etag;
    m_gateway_manager_etag_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_gateway_manager_etag_Set() const{
    return m_gateway_manager_etag_isSet;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_gateway_manager_etag_Valid() const{
    return m_gateway_manager_etag_isValid;
}

OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig OAIExpressRouteCrossConnectionPeeringProperties::getIpv6PeeringConfig() const {
    return m_ipv6_peering_config;
}
void OAIExpressRouteCrossConnectionPeeringProperties::setIpv6PeeringConfig(const OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig &ipv6_peering_config) {
    m_ipv6_peering_config = ipv6_peering_config;
    m_ipv6_peering_config_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_ipv6_peering_config_Set() const{
    return m_ipv6_peering_config_isSet;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_ipv6_peering_config_Valid() const{
    return m_ipv6_peering_config_isValid;
}

QString OAIExpressRouteCrossConnectionPeeringProperties::getLastModifiedBy() const {
    return m_last_modified_by;
}
void OAIExpressRouteCrossConnectionPeeringProperties::setLastModifiedBy(const QString &last_modified_by) {
    m_last_modified_by = last_modified_by;
    m_last_modified_by_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_last_modified_by_Set() const{
    return m_last_modified_by_isSet;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_last_modified_by_Valid() const{
    return m_last_modified_by_isValid;
}

OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_microsoftPeeringConfig OAIExpressRouteCrossConnectionPeeringProperties::getMicrosoftPeeringConfig() const {
    return m_microsoft_peering_config;
}
void OAIExpressRouteCrossConnectionPeeringProperties::setMicrosoftPeeringConfig(const OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_microsoftPeeringConfig &microsoft_peering_config) {
    m_microsoft_peering_config = microsoft_peering_config;
    m_microsoft_peering_config_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_microsoft_peering_config_Set() const{
    return m_microsoft_peering_config_isSet;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_microsoft_peering_config_Valid() const{
    return m_microsoft_peering_config_isValid;
}

qint64 OAIExpressRouteCrossConnectionPeeringProperties::getPeerAsn() const {
    return m_peer_asn;
}
void OAIExpressRouteCrossConnectionPeeringProperties::setPeerAsn(const qint64 &peer_asn) {
    m_peer_asn = peer_asn;
    m_peer_asn_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_peer_asn_Set() const{
    return m_peer_asn_isSet;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_peer_asn_Valid() const{
    return m_peer_asn_isValid;
}

QString OAIExpressRouteCrossConnectionPeeringProperties::getPeeringType() const {
    return m_peering_type;
}
void OAIExpressRouteCrossConnectionPeeringProperties::setPeeringType(const QString &peering_type) {
    m_peering_type = peering_type;
    m_peering_type_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_peering_type_Set() const{
    return m_peering_type_isSet;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_peering_type_Valid() const{
    return m_peering_type_isValid;
}

QString OAIExpressRouteCrossConnectionPeeringProperties::getPrimaryAzurePort() const {
    return m_primary_azure_port;
}
void OAIExpressRouteCrossConnectionPeeringProperties::setPrimaryAzurePort(const QString &primary_azure_port) {
    m_primary_azure_port = primary_azure_port;
    m_primary_azure_port_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_primary_azure_port_Set() const{
    return m_primary_azure_port_isSet;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_primary_azure_port_Valid() const{
    return m_primary_azure_port_isValid;
}

QString OAIExpressRouteCrossConnectionPeeringProperties::getPrimaryPeerAddressPrefix() const {
    return m_primary_peer_address_prefix;
}
void OAIExpressRouteCrossConnectionPeeringProperties::setPrimaryPeerAddressPrefix(const QString &primary_peer_address_prefix) {
    m_primary_peer_address_prefix = primary_peer_address_prefix;
    m_primary_peer_address_prefix_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_primary_peer_address_prefix_Set() const{
    return m_primary_peer_address_prefix_isSet;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_primary_peer_address_prefix_Valid() const{
    return m_primary_peer_address_prefix_isValid;
}

QString OAIExpressRouteCrossConnectionPeeringProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIExpressRouteCrossConnectionPeeringProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIExpressRouteCrossConnectionPeeringProperties::getSecondaryAzurePort() const {
    return m_secondary_azure_port;
}
void OAIExpressRouteCrossConnectionPeeringProperties::setSecondaryAzurePort(const QString &secondary_azure_port) {
    m_secondary_azure_port = secondary_azure_port;
    m_secondary_azure_port_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_secondary_azure_port_Set() const{
    return m_secondary_azure_port_isSet;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_secondary_azure_port_Valid() const{
    return m_secondary_azure_port_isValid;
}

QString OAIExpressRouteCrossConnectionPeeringProperties::getSecondaryPeerAddressPrefix() const {
    return m_secondary_peer_address_prefix;
}
void OAIExpressRouteCrossConnectionPeeringProperties::setSecondaryPeerAddressPrefix(const QString &secondary_peer_address_prefix) {
    m_secondary_peer_address_prefix = secondary_peer_address_prefix;
    m_secondary_peer_address_prefix_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_secondary_peer_address_prefix_Set() const{
    return m_secondary_peer_address_prefix_isSet;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_secondary_peer_address_prefix_Valid() const{
    return m_secondary_peer_address_prefix_isValid;
}

QString OAIExpressRouteCrossConnectionPeeringProperties::getSharedKey() const {
    return m_shared_key;
}
void OAIExpressRouteCrossConnectionPeeringProperties::setSharedKey(const QString &shared_key) {
    m_shared_key = shared_key;
    m_shared_key_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_shared_key_Set() const{
    return m_shared_key_isSet;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_shared_key_Valid() const{
    return m_shared_key_isValid;
}

QString OAIExpressRouteCrossConnectionPeeringProperties::getState() const {
    return m_state;
}
void OAIExpressRouteCrossConnectionPeeringProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_state_Valid() const{
    return m_state_isValid;
}

qint32 OAIExpressRouteCrossConnectionPeeringProperties::getVlanId() const {
    return m_vlan_id;
}
void OAIExpressRouteCrossConnectionPeeringProperties::setVlanId(const qint32 &vlan_id) {
    m_vlan_id = vlan_id;
    m_vlan_id_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_vlan_id_Set() const{
    return m_vlan_id_isSet;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::is_vlan_id_Valid() const{
    return m_vlan_id_isValid;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azure_asn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_manager_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv6_peering_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_microsoft_peering_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_peer_asn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peering_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_azure_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_peer_address_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_azure_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_peer_address_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRouteCrossConnectionPeeringProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
