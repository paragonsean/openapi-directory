/**
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExpressRouteCrossConnectionProperties.h
 *
 * Properties of ExpressRouteCrossConnection.
 */

#ifndef OAIExpressRouteCrossConnectionProperties_H
#define OAIExpressRouteCrossConnectionProperties_H

#include <QJsonObject>

#include "OAIExpressRouteCircuitReference.h"
#include "OAIExpressRouteCrossConnectionPeering.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExpressRouteCircuitReference;
class OAIExpressRouteCrossConnectionPeering;

class OAIExpressRouteCrossConnectionProperties : public OAIObject {
public:
    OAIExpressRouteCrossConnectionProperties();
    OAIExpressRouteCrossConnectionProperties(QString json);
    ~OAIExpressRouteCrossConnectionProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBandwidthInMbps() const;
    void setBandwidthInMbps(const qint32 &bandwidth_in_mbps);
    bool is_bandwidth_in_mbps_Set() const;
    bool is_bandwidth_in_mbps_Valid() const;

    OAIExpressRouteCircuitReference getExpressRouteCircuit() const;
    void setExpressRouteCircuit(const OAIExpressRouteCircuitReference &express_route_circuit);
    bool is_express_route_circuit_Set() const;
    bool is_express_route_circuit_Valid() const;

    QString getPeeringLocation() const;
    void setPeeringLocation(const QString &peering_location);
    bool is_peering_location_Set() const;
    bool is_peering_location_Valid() const;

    QList<OAIExpressRouteCrossConnectionPeering> getPeerings() const;
    void setPeerings(const QList<OAIExpressRouteCrossConnectionPeering> &peerings);
    bool is_peerings_Set() const;
    bool is_peerings_Valid() const;

    QString getPrimaryAzurePort() const;
    void setPrimaryAzurePort(const QString &primary_azure_port);
    bool is_primary_azure_port_Set() const;
    bool is_primary_azure_port_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    qint32 getSTag() const;
    void setSTag(const qint32 &s_tag);
    bool is_s_tag_Set() const;
    bool is_s_tag_Valid() const;

    QString getSecondaryAzurePort() const;
    void setSecondaryAzurePort(const QString &secondary_azure_port);
    bool is_secondary_azure_port_Set() const;
    bool is_secondary_azure_port_Valid() const;

    QString getServiceProviderNotes() const;
    void setServiceProviderNotes(const QString &service_provider_notes);
    bool is_service_provider_notes_Set() const;
    bool is_service_provider_notes_Valid() const;

    QString getServiceProviderProvisioningState() const;
    void setServiceProviderProvisioningState(const QString &service_provider_provisioning_state);
    bool is_service_provider_provisioning_state_Set() const;
    bool is_service_provider_provisioning_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_bandwidth_in_mbps;
    bool m_bandwidth_in_mbps_isSet;
    bool m_bandwidth_in_mbps_isValid;

    OAIExpressRouteCircuitReference m_express_route_circuit;
    bool m_express_route_circuit_isSet;
    bool m_express_route_circuit_isValid;

    QString m_peering_location;
    bool m_peering_location_isSet;
    bool m_peering_location_isValid;

    QList<OAIExpressRouteCrossConnectionPeering> m_peerings;
    bool m_peerings_isSet;
    bool m_peerings_isValid;

    QString m_primary_azure_port;
    bool m_primary_azure_port_isSet;
    bool m_primary_azure_port_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    qint32 m_s_tag;
    bool m_s_tag_isSet;
    bool m_s_tag_isValid;

    QString m_secondary_azure_port;
    bool m_secondary_azure_port_isSet;
    bool m_secondary_azure_port_isValid;

    QString m_service_provider_notes;
    bool m_service_provider_notes_isSet;
    bool m_service_provider_notes_isValid;

    QString m_service_provider_provisioning_state;
    bool m_service_provider_provisioning_state_isSet;
    bool m_service_provider_provisioning_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExpressRouteCrossConnectionProperties)

#endif // OAIExpressRouteCrossConnectionProperties_H
