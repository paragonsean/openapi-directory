# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExpressRouteCrossConnectionRoutesTableSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asn: int=None, neighbor: str=None, state_or_prefixes_received: str=None, up_down: str=None):
        """ExpressRouteCrossConnectionRoutesTableSummary - a model defined in OpenAPI

        :param asn: The asn of this ExpressRouteCrossConnectionRoutesTableSummary.
        :param neighbor: The neighbor of this ExpressRouteCrossConnectionRoutesTableSummary.
        :param state_or_prefixes_received: The state_or_prefixes_received of this ExpressRouteCrossConnectionRoutesTableSummary.
        :param up_down: The up_down of this ExpressRouteCrossConnectionRoutesTableSummary.
        """
        self.openapi_types = {
            'asn': int,
            'neighbor': str,
            'state_or_prefixes_received': str,
            'up_down': str
        }

        self.attribute_map = {
            'asn': 'asn',
            'neighbor': 'neighbor',
            'state_or_prefixes_received': 'stateOrPrefixesReceived',
            'up_down': 'upDown'
        }

        self._asn = asn
        self._neighbor = neighbor
        self._state_or_prefixes_received = state_or_prefixes_received
        self._up_down = up_down

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpressRouteCrossConnectionRoutesTableSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpressRouteCrossConnectionRoutesTableSummary of this ExpressRouteCrossConnectionRoutesTableSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asn(self):
        """Gets the asn of this ExpressRouteCrossConnectionRoutesTableSummary.

        Autonomous system number.

        :return: The asn of this ExpressRouteCrossConnectionRoutesTableSummary.
        :rtype: int
        """
        return self._asn

    @asn.setter
    def asn(self, asn):
        """Sets the asn of this ExpressRouteCrossConnectionRoutesTableSummary.

        Autonomous system number.

        :param asn: The asn of this ExpressRouteCrossConnectionRoutesTableSummary.
        :type asn: int
        """

        self._asn = asn

    @property
    def neighbor(self):
        """Gets the neighbor of this ExpressRouteCrossConnectionRoutesTableSummary.

        IP address of Neighbor router.

        :return: The neighbor of this ExpressRouteCrossConnectionRoutesTableSummary.
        :rtype: str
        """
        return self._neighbor

    @neighbor.setter
    def neighbor(self, neighbor):
        """Sets the neighbor of this ExpressRouteCrossConnectionRoutesTableSummary.

        IP address of Neighbor router.

        :param neighbor: The neighbor of this ExpressRouteCrossConnectionRoutesTableSummary.
        :type neighbor: str
        """

        self._neighbor = neighbor

    @property
    def state_or_prefixes_received(self):
        """Gets the state_or_prefixes_received of this ExpressRouteCrossConnectionRoutesTableSummary.

        Current state of the BGP session, and the number of prefixes that have been received from a neighbor or peer group.

        :return: The state_or_prefixes_received of this ExpressRouteCrossConnectionRoutesTableSummary.
        :rtype: str
        """
        return self._state_or_prefixes_received

    @state_or_prefixes_received.setter
    def state_or_prefixes_received(self, state_or_prefixes_received):
        """Sets the state_or_prefixes_received of this ExpressRouteCrossConnectionRoutesTableSummary.

        Current state of the BGP session, and the number of prefixes that have been received from a neighbor or peer group.

        :param state_or_prefixes_received: The state_or_prefixes_received of this ExpressRouteCrossConnectionRoutesTableSummary.
        :type state_or_prefixes_received: str
        """

        self._state_or_prefixes_received = state_or_prefixes_received

    @property
    def up_down(self):
        """Gets the up_down of this ExpressRouteCrossConnectionRoutesTableSummary.

        The length of time that the BGP session has been in the Established state, or the current status if not in the Established state.

        :return: The up_down of this ExpressRouteCrossConnectionRoutesTableSummary.
        :rtype: str
        """
        return self._up_down

    @up_down.setter
    def up_down(self, up_down):
        """Sets the up_down of this ExpressRouteCrossConnectionRoutesTableSummary.

        The length of time that the BGP session has been in the Established state, or the current status if not in the Established state.

        :param up_down: The up_down of this ExpressRouteCrossConnectionRoutesTableSummary.
        :type up_down: str
        """

        self._up_down = up_down
