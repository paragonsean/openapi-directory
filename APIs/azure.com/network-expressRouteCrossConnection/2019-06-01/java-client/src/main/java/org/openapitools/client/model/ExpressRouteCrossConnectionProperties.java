/*
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExpressRouteCircuitReference;
import org.openapitools.client.model.ExpressRouteCrossConnectionPeering;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of ExpressRouteCrossConnection.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:23:30.608292-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExpressRouteCrossConnectionProperties {
  public static final String SERIALIZED_NAME_BANDWIDTH_IN_MBPS = "bandwidthInMbps";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_IN_MBPS)
  private Integer bandwidthInMbps;

  public static final String SERIALIZED_NAME_EXPRESS_ROUTE_CIRCUIT = "expressRouteCircuit";
  @SerializedName(SERIALIZED_NAME_EXPRESS_ROUTE_CIRCUIT)
  private ExpressRouteCircuitReference expressRouteCircuit;

  public static final String SERIALIZED_NAME_PEERING_LOCATION = "peeringLocation";
  @SerializedName(SERIALIZED_NAME_PEERING_LOCATION)
  private String peeringLocation;

  public static final String SERIALIZED_NAME_PEERINGS = "peerings";
  @SerializedName(SERIALIZED_NAME_PEERINGS)
  private List<ExpressRouteCrossConnectionPeering> peerings = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIMARY_AZURE_PORT = "primaryAzurePort";
  @SerializedName(SERIALIZED_NAME_PRIMARY_AZURE_PORT)
  private String primaryAzurePort;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_S_TAG = "sTag";
  @SerializedName(SERIALIZED_NAME_S_TAG)
  private Integer sTag;

  public static final String SERIALIZED_NAME_SECONDARY_AZURE_PORT = "secondaryAzurePort";
  @SerializedName(SERIALIZED_NAME_SECONDARY_AZURE_PORT)
  private String secondaryAzurePort;

  public static final String SERIALIZED_NAME_SERVICE_PROVIDER_NOTES = "serviceProviderNotes";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROVIDER_NOTES)
  private String serviceProviderNotes;

  /**
   * The ServiceProviderProvisioningState state of the resource.
   */
  @JsonAdapter(ServiceProviderProvisioningStateEnum.Adapter.class)
  public enum ServiceProviderProvisioningStateEnum {
    NOT_PROVISIONED("NotProvisioned"),
    
    PROVISIONING("Provisioning"),
    
    PROVISIONED("Provisioned"),
    
    DEPROVISIONING("Deprovisioning");

    private String value;

    ServiceProviderProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ServiceProviderProvisioningStateEnum fromValue(String value) {
      for (ServiceProviderProvisioningStateEnum b : ServiceProviderProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ServiceProviderProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ServiceProviderProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ServiceProviderProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ServiceProviderProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ServiceProviderProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SERVICE_PROVIDER_PROVISIONING_STATE = "serviceProviderProvisioningState";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROVIDER_PROVISIONING_STATE)
  private ServiceProviderProvisioningStateEnum serviceProviderProvisioningState;

  public ExpressRouteCrossConnectionProperties() {
  }

  public ExpressRouteCrossConnectionProperties(
     String primaryAzurePort, 
     String provisioningState, 
     Integer sTag, 
     String secondaryAzurePort
  ) {
    this();
    this.primaryAzurePort = primaryAzurePort;
    this.provisioningState = provisioningState;
    this.sTag = sTag;
    this.secondaryAzurePort = secondaryAzurePort;
  }

  public ExpressRouteCrossConnectionProperties bandwidthInMbps(Integer bandwidthInMbps) {
    this.bandwidthInMbps = bandwidthInMbps;
    return this;
  }

  /**
   * The circuit bandwidth In Mbps.
   * @return bandwidthInMbps
   */
  @javax.annotation.Nullable
  public Integer getBandwidthInMbps() {
    return bandwidthInMbps;
  }

  public void setBandwidthInMbps(Integer bandwidthInMbps) {
    this.bandwidthInMbps = bandwidthInMbps;
  }


  public ExpressRouteCrossConnectionProperties expressRouteCircuit(ExpressRouteCircuitReference expressRouteCircuit) {
    this.expressRouteCircuit = expressRouteCircuit;
    return this;
  }

  /**
   * Get expressRouteCircuit
   * @return expressRouteCircuit
   */
  @javax.annotation.Nullable
  public ExpressRouteCircuitReference getExpressRouteCircuit() {
    return expressRouteCircuit;
  }

  public void setExpressRouteCircuit(ExpressRouteCircuitReference expressRouteCircuit) {
    this.expressRouteCircuit = expressRouteCircuit;
  }


  public ExpressRouteCrossConnectionProperties peeringLocation(String peeringLocation) {
    this.peeringLocation = peeringLocation;
    return this;
  }

  /**
   * The peering location of the ExpressRoute circuit.
   * @return peeringLocation
   */
  @javax.annotation.Nullable
  public String getPeeringLocation() {
    return peeringLocation;
  }

  public void setPeeringLocation(String peeringLocation) {
    this.peeringLocation = peeringLocation;
  }


  public ExpressRouteCrossConnectionProperties peerings(List<ExpressRouteCrossConnectionPeering> peerings) {
    this.peerings = peerings;
    return this;
  }

  public ExpressRouteCrossConnectionProperties addPeeringsItem(ExpressRouteCrossConnectionPeering peeringsItem) {
    if (this.peerings == null) {
      this.peerings = new ArrayList<>();
    }
    this.peerings.add(peeringsItem);
    return this;
  }

  /**
   * The list of peerings.
   * @return peerings
   */
  @javax.annotation.Nullable
  public List<ExpressRouteCrossConnectionPeering> getPeerings() {
    return peerings;
  }

  public void setPeerings(List<ExpressRouteCrossConnectionPeering> peerings) {
    this.peerings = peerings;
  }


  /**
   * The name of the primary port.
   * @return primaryAzurePort
   */
  @javax.annotation.Nullable
  public String getPrimaryAzurePort() {
    return primaryAzurePort;
  }



  /**
   * Gets the provisioning state of the public IP resource. Possible values are: &#39;Updating&#39;, &#39;Deleting&#39;, and &#39;Failed&#39;.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  /**
   * The identifier of the circuit traffic.
   * @return sTag
   */
  @javax.annotation.Nullable
  public Integer getsTag() {
    return sTag;
  }



  /**
   * The name of the secondary port.
   * @return secondaryAzurePort
   */
  @javax.annotation.Nullable
  public String getSecondaryAzurePort() {
    return secondaryAzurePort;
  }



  public ExpressRouteCrossConnectionProperties serviceProviderNotes(String serviceProviderNotes) {
    this.serviceProviderNotes = serviceProviderNotes;
    return this;
  }

  /**
   * Additional read only notes set by the connectivity provider.
   * @return serviceProviderNotes
   */
  @javax.annotation.Nullable
  public String getServiceProviderNotes() {
    return serviceProviderNotes;
  }

  public void setServiceProviderNotes(String serviceProviderNotes) {
    this.serviceProviderNotes = serviceProviderNotes;
  }


  public ExpressRouteCrossConnectionProperties serviceProviderProvisioningState(ServiceProviderProvisioningStateEnum serviceProviderProvisioningState) {
    this.serviceProviderProvisioningState = serviceProviderProvisioningState;
    return this;
  }

  /**
   * The ServiceProviderProvisioningState state of the resource.
   * @return serviceProviderProvisioningState
   */
  @javax.annotation.Nullable
  public ServiceProviderProvisioningStateEnum getServiceProviderProvisioningState() {
    return serviceProviderProvisioningState;
  }

  public void setServiceProviderProvisioningState(ServiceProviderProvisioningStateEnum serviceProviderProvisioningState) {
    this.serviceProviderProvisioningState = serviceProviderProvisioningState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpressRouteCrossConnectionProperties expressRouteCrossConnectionProperties = (ExpressRouteCrossConnectionProperties) o;
    return Objects.equals(this.bandwidthInMbps, expressRouteCrossConnectionProperties.bandwidthInMbps) &&
        Objects.equals(this.expressRouteCircuit, expressRouteCrossConnectionProperties.expressRouteCircuit) &&
        Objects.equals(this.peeringLocation, expressRouteCrossConnectionProperties.peeringLocation) &&
        Objects.equals(this.peerings, expressRouteCrossConnectionProperties.peerings) &&
        Objects.equals(this.primaryAzurePort, expressRouteCrossConnectionProperties.primaryAzurePort) &&
        Objects.equals(this.provisioningState, expressRouteCrossConnectionProperties.provisioningState) &&
        Objects.equals(this.sTag, expressRouteCrossConnectionProperties.sTag) &&
        Objects.equals(this.secondaryAzurePort, expressRouteCrossConnectionProperties.secondaryAzurePort) &&
        Objects.equals(this.serviceProviderNotes, expressRouteCrossConnectionProperties.serviceProviderNotes) &&
        Objects.equals(this.serviceProviderProvisioningState, expressRouteCrossConnectionProperties.serviceProviderProvisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bandwidthInMbps, expressRouteCircuit, peeringLocation, peerings, primaryAzurePort, provisioningState, sTag, secondaryAzurePort, serviceProviderNotes, serviceProviderProvisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpressRouteCrossConnectionProperties {\n");
    sb.append("    bandwidthInMbps: ").append(toIndentedString(bandwidthInMbps)).append("\n");
    sb.append("    expressRouteCircuit: ").append(toIndentedString(expressRouteCircuit)).append("\n");
    sb.append("    peeringLocation: ").append(toIndentedString(peeringLocation)).append("\n");
    sb.append("    peerings: ").append(toIndentedString(peerings)).append("\n");
    sb.append("    primaryAzurePort: ").append(toIndentedString(primaryAzurePort)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    sTag: ").append(toIndentedString(sTag)).append("\n");
    sb.append("    secondaryAzurePort: ").append(toIndentedString(secondaryAzurePort)).append("\n");
    sb.append("    serviceProviderNotes: ").append(toIndentedString(serviceProviderNotes)).append("\n");
    sb.append("    serviceProviderProvisioningState: ").append(toIndentedString(serviceProviderProvisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bandwidthInMbps");
    openapiFields.add("expressRouteCircuit");
    openapiFields.add("peeringLocation");
    openapiFields.add("peerings");
    openapiFields.add("primaryAzurePort");
    openapiFields.add("provisioningState");
    openapiFields.add("sTag");
    openapiFields.add("secondaryAzurePort");
    openapiFields.add("serviceProviderNotes");
    openapiFields.add("serviceProviderProvisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExpressRouteCrossConnectionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExpressRouteCrossConnectionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpressRouteCrossConnectionProperties is not found in the empty JSON string", ExpressRouteCrossConnectionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExpressRouteCrossConnectionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExpressRouteCrossConnectionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `expressRouteCircuit`
      if (jsonObj.get("expressRouteCircuit") != null && !jsonObj.get("expressRouteCircuit").isJsonNull()) {
        ExpressRouteCircuitReference.validateJsonElement(jsonObj.get("expressRouteCircuit"));
      }
      if ((jsonObj.get("peeringLocation") != null && !jsonObj.get("peeringLocation").isJsonNull()) && !jsonObj.get("peeringLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `peeringLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("peeringLocation").toString()));
      }
      if (jsonObj.get("peerings") != null && !jsonObj.get("peerings").isJsonNull()) {
        JsonArray jsonArraypeerings = jsonObj.getAsJsonArray("peerings");
        if (jsonArraypeerings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("peerings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `peerings` to be an array in the JSON string but got `%s`", jsonObj.get("peerings").toString()));
          }

          // validate the optional field `peerings` (array)
          for (int i = 0; i < jsonArraypeerings.size(); i++) {
            ExpressRouteCrossConnectionPeering.validateJsonElement(jsonArraypeerings.get(i));
          };
        }
      }
      if ((jsonObj.get("primaryAzurePort") != null && !jsonObj.get("primaryAzurePort").isJsonNull()) && !jsonObj.get("primaryAzurePort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryAzurePort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryAzurePort").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("secondaryAzurePort") != null && !jsonObj.get("secondaryAzurePort").isJsonNull()) && !jsonObj.get("secondaryAzurePort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryAzurePort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryAzurePort").toString()));
      }
      if ((jsonObj.get("serviceProviderNotes") != null && !jsonObj.get("serviceProviderNotes").isJsonNull()) && !jsonObj.get("serviceProviderNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceProviderNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceProviderNotes").toString()));
      }
      if ((jsonObj.get("serviceProviderProvisioningState") != null && !jsonObj.get("serviceProviderProvisioningState").isJsonNull()) && !jsonObj.get("serviceProviderProvisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceProviderProvisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceProviderProvisioningState").toString()));
      }
      // validate the optional field `serviceProviderProvisioningState`
      if (jsonObj.get("serviceProviderProvisioningState") != null && !jsonObj.get("serviceProviderProvisioningState").isJsonNull()) {
        ServiceProviderProvisioningStateEnum.validateJsonElement(jsonObj.get("serviceProviderProvisioningState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpressRouteCrossConnectionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpressRouteCrossConnectionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpressRouteCrossConnectionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpressRouteCrossConnectionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpressRouteCrossConnectionProperties>() {
           @Override
           public void write(JsonWriter out, ExpressRouteCrossConnectionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpressRouteCrossConnectionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExpressRouteCrossConnectionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExpressRouteCrossConnectionProperties
   * @throws IOException if the JSON string is invalid with respect to ExpressRouteCrossConnectionProperties
   */
  public static ExpressRouteCrossConnectionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpressRouteCrossConnectionProperties.class);
  }

  /**
   * Convert an instance of ExpressRouteCrossConnectionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

