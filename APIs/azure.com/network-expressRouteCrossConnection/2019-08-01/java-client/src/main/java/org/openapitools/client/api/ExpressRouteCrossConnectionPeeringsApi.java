/*
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ExpressRouteCrossConnectionPeering;
import org.openapitools.client.model.ExpressRouteCrossConnectionPeeringList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExpressRouteCrossConnectionPeeringsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExpressRouteCrossConnectionPeeringsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExpressRouteCrossConnectionPeeringsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for expressRouteCrossConnectionPeeringsCreateOrUpdate
     * @param resourceGroupName The name of the resource group. (required)
     * @param crossConnectionName The name of the ExpressRouteCrossConnection. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param peeringParameters Parameters supplied to the create or update ExpressRouteCrossConnection peering operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRouteCrossConnectionPeering resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRouteCrossConnectionPeering resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCrossConnectionPeeringsCreateOrUpdateCall(String resourceGroupName, String crossConnectionName, String peeringName, String apiVersion, String subscriptionId, ExpressRouteCrossConnectionPeering peeringParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = peeringParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings/{peeringName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "crossConnectionName" + "}", localVarApiClient.escapeString(crossConnectionName.toString()))
            .replace("{" + "peeringName" + "}", localVarApiClient.escapeString(peeringName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteCrossConnectionPeeringsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String crossConnectionName, String peeringName, String apiVersion, String subscriptionId, ExpressRouteCrossConnectionPeering peeringParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteCrossConnectionPeeringsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'crossConnectionName' is set
        if (crossConnectionName == null) {
            throw new ApiException("Missing the required parameter 'crossConnectionName' when calling expressRouteCrossConnectionPeeringsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'peeringName' is set
        if (peeringName == null) {
            throw new ApiException("Missing the required parameter 'peeringName' when calling expressRouteCrossConnectionPeeringsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteCrossConnectionPeeringsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteCrossConnectionPeeringsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'peeringParameters' is set
        if (peeringParameters == null) {
            throw new ApiException("Missing the required parameter 'peeringParameters' when calling expressRouteCrossConnectionPeeringsCreateOrUpdate(Async)");
        }

        return expressRouteCrossConnectionPeeringsCreateOrUpdateCall(resourceGroupName, crossConnectionName, peeringName, apiVersion, subscriptionId, peeringParameters, _callback);

    }

    /**
     * 
     * Creates or updates a peering in the specified ExpressRouteCrossConnection.
     * @param resourceGroupName The name of the resource group. (required)
     * @param crossConnectionName The name of the ExpressRouteCrossConnection. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param peeringParameters Parameters supplied to the create or update ExpressRouteCrossConnection peering operation. (required)
     * @return ExpressRouteCrossConnectionPeering
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRouteCrossConnectionPeering resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRouteCrossConnectionPeering resource. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRouteCrossConnectionPeering expressRouteCrossConnectionPeeringsCreateOrUpdate(String resourceGroupName, String crossConnectionName, String peeringName, String apiVersion, String subscriptionId, ExpressRouteCrossConnectionPeering peeringParameters) throws ApiException {
        ApiResponse<ExpressRouteCrossConnectionPeering> localVarResp = expressRouteCrossConnectionPeeringsCreateOrUpdateWithHttpInfo(resourceGroupName, crossConnectionName, peeringName, apiVersion, subscriptionId, peeringParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a peering in the specified ExpressRouteCrossConnection.
     * @param resourceGroupName The name of the resource group. (required)
     * @param crossConnectionName The name of the ExpressRouteCrossConnection. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param peeringParameters Parameters supplied to the create or update ExpressRouteCrossConnection peering operation. (required)
     * @return ApiResponse&lt;ExpressRouteCrossConnectionPeering&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRouteCrossConnectionPeering resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRouteCrossConnectionPeering resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRouteCrossConnectionPeering> expressRouteCrossConnectionPeeringsCreateOrUpdateWithHttpInfo(String resourceGroupName, String crossConnectionName, String peeringName, String apiVersion, String subscriptionId, ExpressRouteCrossConnectionPeering peeringParameters) throws ApiException {
        okhttp3.Call localVarCall = expressRouteCrossConnectionPeeringsCreateOrUpdateValidateBeforeCall(resourceGroupName, crossConnectionName, peeringName, apiVersion, subscriptionId, peeringParameters, null);
        Type localVarReturnType = new TypeToken<ExpressRouteCrossConnectionPeering>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a peering in the specified ExpressRouteCrossConnection.
     * @param resourceGroupName The name of the resource group. (required)
     * @param crossConnectionName The name of the ExpressRouteCrossConnection. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param peeringParameters Parameters supplied to the create or update ExpressRouteCrossConnection peering operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRouteCrossConnectionPeering resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRouteCrossConnectionPeering resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCrossConnectionPeeringsCreateOrUpdateAsync(String resourceGroupName, String crossConnectionName, String peeringName, String apiVersion, String subscriptionId, ExpressRouteCrossConnectionPeering peeringParameters, final ApiCallback<ExpressRouteCrossConnectionPeering> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteCrossConnectionPeeringsCreateOrUpdateValidateBeforeCall(resourceGroupName, crossConnectionName, peeringName, apiVersion, subscriptionId, peeringParameters, _callback);
        Type localVarReturnType = new TypeToken<ExpressRouteCrossConnectionPeering>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRouteCrossConnectionPeeringsDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param crossConnectionName The name of the ExpressRouteCrossConnection. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCrossConnectionPeeringsDeleteCall(String resourceGroupName, String crossConnectionName, String peeringName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings/{peeringName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "crossConnectionName" + "}", localVarApiClient.escapeString(crossConnectionName.toString()))
            .replace("{" + "peeringName" + "}", localVarApiClient.escapeString(peeringName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteCrossConnectionPeeringsDeleteValidateBeforeCall(String resourceGroupName, String crossConnectionName, String peeringName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteCrossConnectionPeeringsDelete(Async)");
        }

        // verify the required parameter 'crossConnectionName' is set
        if (crossConnectionName == null) {
            throw new ApiException("Missing the required parameter 'crossConnectionName' when calling expressRouteCrossConnectionPeeringsDelete(Async)");
        }

        // verify the required parameter 'peeringName' is set
        if (peeringName == null) {
            throw new ApiException("Missing the required parameter 'peeringName' when calling expressRouteCrossConnectionPeeringsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteCrossConnectionPeeringsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteCrossConnectionPeeringsDelete(Async)");
        }

        return expressRouteCrossConnectionPeeringsDeleteCall(resourceGroupName, crossConnectionName, peeringName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the specified peering from the ExpressRouteCrossConnection.
     * @param resourceGroupName The name of the resource group. (required)
     * @param crossConnectionName The name of the ExpressRouteCrossConnection. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public void expressRouteCrossConnectionPeeringsDelete(String resourceGroupName, String crossConnectionName, String peeringName, String apiVersion, String subscriptionId) throws ApiException {
        expressRouteCrossConnectionPeeringsDeleteWithHttpInfo(resourceGroupName, crossConnectionName, peeringName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the specified peering from the ExpressRouteCrossConnection.
     * @param resourceGroupName The name of the resource group. (required)
     * @param crossConnectionName The name of the ExpressRouteCrossConnection. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> expressRouteCrossConnectionPeeringsDeleteWithHttpInfo(String resourceGroupName, String crossConnectionName, String peeringName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = expressRouteCrossConnectionPeeringsDeleteValidateBeforeCall(resourceGroupName, crossConnectionName, peeringName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified peering from the ExpressRouteCrossConnection.
     * @param resourceGroupName The name of the resource group. (required)
     * @param crossConnectionName The name of the ExpressRouteCrossConnection. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCrossConnectionPeeringsDeleteAsync(String resourceGroupName, String crossConnectionName, String peeringName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteCrossConnectionPeeringsDeleteValidateBeforeCall(resourceGroupName, crossConnectionName, peeringName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRouteCrossConnectionPeeringsGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param crossConnectionName The name of the ExpressRouteCrossConnection. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ExpressRouteCrossConnectionPeering resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCrossConnectionPeeringsGetCall(String resourceGroupName, String crossConnectionName, String peeringName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings/{peeringName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "crossConnectionName" + "}", localVarApiClient.escapeString(crossConnectionName.toString()))
            .replace("{" + "peeringName" + "}", localVarApiClient.escapeString(peeringName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteCrossConnectionPeeringsGetValidateBeforeCall(String resourceGroupName, String crossConnectionName, String peeringName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteCrossConnectionPeeringsGet(Async)");
        }

        // verify the required parameter 'crossConnectionName' is set
        if (crossConnectionName == null) {
            throw new ApiException("Missing the required parameter 'crossConnectionName' when calling expressRouteCrossConnectionPeeringsGet(Async)");
        }

        // verify the required parameter 'peeringName' is set
        if (peeringName == null) {
            throw new ApiException("Missing the required parameter 'peeringName' when calling expressRouteCrossConnectionPeeringsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteCrossConnectionPeeringsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteCrossConnectionPeeringsGet(Async)");
        }

        return expressRouteCrossConnectionPeeringsGetCall(resourceGroupName, crossConnectionName, peeringName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the specified peering for the ExpressRouteCrossConnection.
     * @param resourceGroupName The name of the resource group. (required)
     * @param crossConnectionName The name of the ExpressRouteCrossConnection. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ExpressRouteCrossConnectionPeering
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ExpressRouteCrossConnectionPeering resource. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRouteCrossConnectionPeering expressRouteCrossConnectionPeeringsGet(String resourceGroupName, String crossConnectionName, String peeringName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ExpressRouteCrossConnectionPeering> localVarResp = expressRouteCrossConnectionPeeringsGetWithHttpInfo(resourceGroupName, crossConnectionName, peeringName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the specified peering for the ExpressRouteCrossConnection.
     * @param resourceGroupName The name of the resource group. (required)
     * @param crossConnectionName The name of the ExpressRouteCrossConnection. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ExpressRouteCrossConnectionPeering&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ExpressRouteCrossConnectionPeering resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRouteCrossConnectionPeering> expressRouteCrossConnectionPeeringsGetWithHttpInfo(String resourceGroupName, String crossConnectionName, String peeringName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = expressRouteCrossConnectionPeeringsGetValidateBeforeCall(resourceGroupName, crossConnectionName, peeringName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ExpressRouteCrossConnectionPeering>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the specified peering for the ExpressRouteCrossConnection.
     * @param resourceGroupName The name of the resource group. (required)
     * @param crossConnectionName The name of the ExpressRouteCrossConnection. (required)
     * @param peeringName The name of the peering. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting ExpressRouteCrossConnectionPeering resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCrossConnectionPeeringsGetAsync(String resourceGroupName, String crossConnectionName, String peeringName, String apiVersion, String subscriptionId, final ApiCallback<ExpressRouteCrossConnectionPeering> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteCrossConnectionPeeringsGetValidateBeforeCall(resourceGroupName, crossConnectionName, peeringName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ExpressRouteCrossConnectionPeering>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRouteCrossConnectionPeeringsList
     * @param resourceGroupName The name of the resource group. (required)
     * @param crossConnectionName The name of the ExpressRouteCrossConnection. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRouteCrossConnectionPeering resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCrossConnectionPeeringsListCall(String resourceGroupName, String crossConnectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "crossConnectionName" + "}", localVarApiClient.escapeString(crossConnectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteCrossConnectionPeeringsListValidateBeforeCall(String resourceGroupName, String crossConnectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteCrossConnectionPeeringsList(Async)");
        }

        // verify the required parameter 'crossConnectionName' is set
        if (crossConnectionName == null) {
            throw new ApiException("Missing the required parameter 'crossConnectionName' when calling expressRouteCrossConnectionPeeringsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteCrossConnectionPeeringsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteCrossConnectionPeeringsList(Async)");
        }

        return expressRouteCrossConnectionPeeringsListCall(resourceGroupName, crossConnectionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all peerings in a specified ExpressRouteCrossConnection.
     * @param resourceGroupName The name of the resource group. (required)
     * @param crossConnectionName The name of the ExpressRouteCrossConnection. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ExpressRouteCrossConnectionPeeringList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRouteCrossConnectionPeering resources. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRouteCrossConnectionPeeringList expressRouteCrossConnectionPeeringsList(String resourceGroupName, String crossConnectionName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ExpressRouteCrossConnectionPeeringList> localVarResp = expressRouteCrossConnectionPeeringsListWithHttpInfo(resourceGroupName, crossConnectionName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all peerings in a specified ExpressRouteCrossConnection.
     * @param resourceGroupName The name of the resource group. (required)
     * @param crossConnectionName The name of the ExpressRouteCrossConnection. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;ExpressRouteCrossConnectionPeeringList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRouteCrossConnectionPeering resources. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRouteCrossConnectionPeeringList> expressRouteCrossConnectionPeeringsListWithHttpInfo(String resourceGroupName, String crossConnectionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = expressRouteCrossConnectionPeeringsListValidateBeforeCall(resourceGroupName, crossConnectionName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ExpressRouteCrossConnectionPeeringList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all peerings in a specified ExpressRouteCrossConnection.
     * @param resourceGroupName The name of the resource group. (required)
     * @param crossConnectionName The name of the ExpressRouteCrossConnection. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRouteCrossConnectionPeering resources. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteCrossConnectionPeeringsListAsync(String resourceGroupName, String crossConnectionName, String apiVersion, String subscriptionId, final ApiCallback<ExpressRouteCrossConnectionPeeringList> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteCrossConnectionPeeringsListValidateBeforeCall(resourceGroupName, crossConnectionName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ExpressRouteCrossConnectionPeeringList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
