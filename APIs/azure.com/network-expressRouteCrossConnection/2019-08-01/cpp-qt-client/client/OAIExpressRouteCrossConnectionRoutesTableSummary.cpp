/**
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRouteCrossConnectionRoutesTableSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRouteCrossConnectionRoutesTableSummary::OAIExpressRouteCrossConnectionRoutesTableSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRouteCrossConnectionRoutesTableSummary::OAIExpressRouteCrossConnectionRoutesTableSummary() {
    this->initializeModel();
}

OAIExpressRouteCrossConnectionRoutesTableSummary::~OAIExpressRouteCrossConnectionRoutesTableSummary() {}

void OAIExpressRouteCrossConnectionRoutesTableSummary::initializeModel() {

    m_asn_isSet = false;
    m_asn_isValid = false;

    m_neighbor_isSet = false;
    m_neighbor_isValid = false;

    m_state_or_prefixes_received_isSet = false;
    m_state_or_prefixes_received_isValid = false;

    m_up_down_isSet = false;
    m_up_down_isValid = false;
}

void OAIExpressRouteCrossConnectionRoutesTableSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRouteCrossConnectionRoutesTableSummary::fromJsonObject(QJsonObject json) {

    m_asn_isValid = ::OpenAPI::fromJsonValue(m_asn, json[QString("asn")]);
    m_asn_isSet = !json[QString("asn")].isNull() && m_asn_isValid;

    m_neighbor_isValid = ::OpenAPI::fromJsonValue(m_neighbor, json[QString("neighbor")]);
    m_neighbor_isSet = !json[QString("neighbor")].isNull() && m_neighbor_isValid;

    m_state_or_prefixes_received_isValid = ::OpenAPI::fromJsonValue(m_state_or_prefixes_received, json[QString("stateOrPrefixesReceived")]);
    m_state_or_prefixes_received_isSet = !json[QString("stateOrPrefixesReceived")].isNull() && m_state_or_prefixes_received_isValid;

    m_up_down_isValid = ::OpenAPI::fromJsonValue(m_up_down, json[QString("upDown")]);
    m_up_down_isSet = !json[QString("upDown")].isNull() && m_up_down_isValid;
}

QString OAIExpressRouteCrossConnectionRoutesTableSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRouteCrossConnectionRoutesTableSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_asn_isSet) {
        obj.insert(QString("asn"), ::OpenAPI::toJsonValue(m_asn));
    }
    if (m_neighbor_isSet) {
        obj.insert(QString("neighbor"), ::OpenAPI::toJsonValue(m_neighbor));
    }
    if (m_state_or_prefixes_received_isSet) {
        obj.insert(QString("stateOrPrefixesReceived"), ::OpenAPI::toJsonValue(m_state_or_prefixes_received));
    }
    if (m_up_down_isSet) {
        obj.insert(QString("upDown"), ::OpenAPI::toJsonValue(m_up_down));
    }
    return obj;
}

qint32 OAIExpressRouteCrossConnectionRoutesTableSummary::getAsn() const {
    return m_asn;
}
void OAIExpressRouteCrossConnectionRoutesTableSummary::setAsn(const qint32 &asn) {
    m_asn = asn;
    m_asn_isSet = true;
}

bool OAIExpressRouteCrossConnectionRoutesTableSummary::is_asn_Set() const{
    return m_asn_isSet;
}

bool OAIExpressRouteCrossConnectionRoutesTableSummary::is_asn_Valid() const{
    return m_asn_isValid;
}

QString OAIExpressRouteCrossConnectionRoutesTableSummary::getNeighbor() const {
    return m_neighbor;
}
void OAIExpressRouteCrossConnectionRoutesTableSummary::setNeighbor(const QString &neighbor) {
    m_neighbor = neighbor;
    m_neighbor_isSet = true;
}

bool OAIExpressRouteCrossConnectionRoutesTableSummary::is_neighbor_Set() const{
    return m_neighbor_isSet;
}

bool OAIExpressRouteCrossConnectionRoutesTableSummary::is_neighbor_Valid() const{
    return m_neighbor_isValid;
}

QString OAIExpressRouteCrossConnectionRoutesTableSummary::getStateOrPrefixesReceived() const {
    return m_state_or_prefixes_received;
}
void OAIExpressRouteCrossConnectionRoutesTableSummary::setStateOrPrefixesReceived(const QString &state_or_prefixes_received) {
    m_state_or_prefixes_received = state_or_prefixes_received;
    m_state_or_prefixes_received_isSet = true;
}

bool OAIExpressRouteCrossConnectionRoutesTableSummary::is_state_or_prefixes_received_Set() const{
    return m_state_or_prefixes_received_isSet;
}

bool OAIExpressRouteCrossConnectionRoutesTableSummary::is_state_or_prefixes_received_Valid() const{
    return m_state_or_prefixes_received_isValid;
}

QString OAIExpressRouteCrossConnectionRoutesTableSummary::getUpDown() const {
    return m_up_down;
}
void OAIExpressRouteCrossConnectionRoutesTableSummary::setUpDown(const QString &up_down) {
    m_up_down = up_down;
    m_up_down_isSet = true;
}

bool OAIExpressRouteCrossConnectionRoutesTableSummary::is_up_down_Set() const{
    return m_up_down_isSet;
}

bool OAIExpressRouteCrossConnectionRoutesTableSummary::is_up_down_Valid() const{
    return m_up_down_isValid;
}

bool OAIExpressRouteCrossConnectionRoutesTableSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_neighbor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_or_prefixes_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_up_down_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRouteCrossConnectionRoutesTableSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
