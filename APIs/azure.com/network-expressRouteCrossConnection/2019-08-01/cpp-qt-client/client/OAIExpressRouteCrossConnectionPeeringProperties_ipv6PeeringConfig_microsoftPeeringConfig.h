/**
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_microsoftPeeringConfig.h
 *
 * Specifies the peering configuration.
 */

#ifndef OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_microsoftPeeringConfig_H
#define OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_microsoftPeeringConfig_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_microsoftPeeringConfig : public OAIObject {
public:
    OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_microsoftPeeringConfig();
    OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_microsoftPeeringConfig(QString json);
    ~OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_microsoftPeeringConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAdvertisedCommunities() const;
    void setAdvertisedCommunities(const QList<QString> &advertised_communities);
    bool is_advertised_communities_Set() const;
    bool is_advertised_communities_Valid() const;

    QList<QString> getAdvertisedPublicPrefixes() const;
    void setAdvertisedPublicPrefixes(const QList<QString> &advertised_public_prefixes);
    bool is_advertised_public_prefixes_Set() const;
    bool is_advertised_public_prefixes_Valid() const;

    QString getAdvertisedPublicPrefixesState() const;
    void setAdvertisedPublicPrefixesState(const QString &advertised_public_prefixes_state);
    bool is_advertised_public_prefixes_state_Set() const;
    bool is_advertised_public_prefixes_state_Valid() const;

    qint32 getCustomerAsn() const;
    void setCustomerAsn(const qint32 &customer_asn);
    bool is_customer_asn_Set() const;
    bool is_customer_asn_Valid() const;

    qint32 getLegacyMode() const;
    void setLegacyMode(const qint32 &legacy_mode);
    bool is_legacy_mode_Set() const;
    bool is_legacy_mode_Valid() const;

    QString getRoutingRegistryName() const;
    void setRoutingRegistryName(const QString &routing_registry_name);
    bool is_routing_registry_name_Set() const;
    bool is_routing_registry_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_advertised_communities;
    bool m_advertised_communities_isSet;
    bool m_advertised_communities_isValid;

    QList<QString> m_advertised_public_prefixes;
    bool m_advertised_public_prefixes_isSet;
    bool m_advertised_public_prefixes_isValid;

    QString m_advertised_public_prefixes_state;
    bool m_advertised_public_prefixes_state_isSet;
    bool m_advertised_public_prefixes_state_isValid;

    qint32 m_customer_asn;
    bool m_customer_asn_isSet;
    bool m_customer_asn_isValid;

    qint32 m_legacy_mode;
    bool m_legacy_mode_isSet;
    bool m_legacy_mode_isValid;

    QString m_routing_registry_name;
    bool m_routing_registry_name_isSet;
    bool m_routing_registry_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_microsoftPeeringConfig)

#endif // OAIExpressRouteCrossConnectionPeeringProperties_ipv6PeeringConfig_microsoftPeeringConfig_H
