/**
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRouteCrossConnectionPeeringList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRouteCrossConnectionPeeringList::OAIExpressRouteCrossConnectionPeeringList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRouteCrossConnectionPeeringList::OAIExpressRouteCrossConnectionPeeringList() {
    this->initializeModel();
}

OAIExpressRouteCrossConnectionPeeringList::~OAIExpressRouteCrossConnectionPeeringList() {}

void OAIExpressRouteCrossConnectionPeeringList::initializeModel() {

    m_next_link_isSet = false;
    m_next_link_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIExpressRouteCrossConnectionPeeringList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRouteCrossConnectionPeeringList::fromJsonObject(QJsonObject json) {

    m_next_link_isValid = ::OpenAPI::fromJsonValue(m_next_link, json[QString("nextLink")]);
    m_next_link_isSet = !json[QString("nextLink")].isNull() && m_next_link_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIExpressRouteCrossConnectionPeeringList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRouteCrossConnectionPeeringList::asJsonObject() const {
    QJsonObject obj;
    if (m_next_link_isSet) {
        obj.insert(QString("nextLink"), ::OpenAPI::toJsonValue(m_next_link));
    }
    if (m_value.size() > 0) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIExpressRouteCrossConnectionPeeringList::getNextLink() const {
    return m_next_link;
}
void OAIExpressRouteCrossConnectionPeeringList::setNextLink(const QString &next_link) {
    m_next_link = next_link;
    m_next_link_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeeringList::is_next_link_Set() const{
    return m_next_link_isSet;
}

bool OAIExpressRouteCrossConnectionPeeringList::is_next_link_Valid() const{
    return m_next_link_isValid;
}

QList<OAIExpressRouteCrossConnectionPeering> OAIExpressRouteCrossConnectionPeeringList::getValue() const {
    return m_value;
}
void OAIExpressRouteCrossConnectionPeeringList::setValue(const QList<OAIExpressRouteCrossConnectionPeering> &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeeringList::is_value_Set() const{
    return m_value_isSet;
}

bool OAIExpressRouteCrossConnectionPeeringList::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIExpressRouteCrossConnectionPeeringList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRouteCrossConnectionPeeringList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
