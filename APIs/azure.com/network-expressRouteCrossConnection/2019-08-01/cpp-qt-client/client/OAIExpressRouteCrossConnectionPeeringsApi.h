/**
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIExpressRouteCrossConnectionPeeringsApi_H
#define OAI_OAIExpressRouteCrossConnectionPeeringsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExpressRouteCrossConnectionPeering.h"
#include "OAIExpressRouteCrossConnectionPeeringList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIExpressRouteCrossConnectionPeeringsApi : public QObject {
    Q_OBJECT

public:
    OAIExpressRouteCrossConnectionPeeringsApi(const int timeOut = 0);
    ~OAIExpressRouteCrossConnectionPeeringsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cross_connection_name QString [required]
    * @param[in]  peering_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  peering_parameters OAIExpressRouteCrossConnectionPeering [required]
    */
    virtual void expressRouteCrossConnectionPeeringsCreateOrUpdate(const QString &resource_group_name, const QString &cross_connection_name, const QString &peering_name, const QString &api_version, const QString &subscription_id, const OAIExpressRouteCrossConnectionPeering &peering_parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cross_connection_name QString [required]
    * @param[in]  peering_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void expressRouteCrossConnectionPeeringsDelete(const QString &resource_group_name, const QString &cross_connection_name, const QString &peering_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cross_connection_name QString [required]
    * @param[in]  peering_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void expressRouteCrossConnectionPeeringsGet(const QString &resource_group_name, const QString &cross_connection_name, const QString &peering_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cross_connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void expressRouteCrossConnectionPeeringsList(const QString &resource_group_name, const QString &cross_connection_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void expressRouteCrossConnectionPeeringsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void expressRouteCrossConnectionPeeringsDeleteCallback(OAIHttpRequestWorker *worker);
    void expressRouteCrossConnectionPeeringsGetCallback(OAIHttpRequestWorker *worker);
    void expressRouteCrossConnectionPeeringsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void expressRouteCrossConnectionPeeringsCreateOrUpdateSignal(OAIExpressRouteCrossConnectionPeering summary);
    void expressRouteCrossConnectionPeeringsDeleteSignal();
    void expressRouteCrossConnectionPeeringsGetSignal(OAIExpressRouteCrossConnectionPeering summary);
    void expressRouteCrossConnectionPeeringsListSignal(OAIExpressRouteCrossConnectionPeeringList summary);


    void expressRouteCrossConnectionPeeringsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIExpressRouteCrossConnectionPeering summary);
    void expressRouteCrossConnectionPeeringsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void expressRouteCrossConnectionPeeringsGetSignalFull(OAIHttpRequestWorker *worker, OAIExpressRouteCrossConnectionPeering summary);
    void expressRouteCrossConnectionPeeringsListSignalFull(OAIHttpRequestWorker *worker, OAIExpressRouteCrossConnectionPeeringList summary);

    Q_DECL_DEPRECATED_X("Use expressRouteCrossConnectionPeeringsCreateOrUpdateSignalError() instead")
    void expressRouteCrossConnectionPeeringsCreateOrUpdateSignalE(OAIExpressRouteCrossConnectionPeering summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCrossConnectionPeeringsCreateOrUpdateSignalError(OAIExpressRouteCrossConnectionPeering summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCrossConnectionPeeringsDeleteSignalError() instead")
    void expressRouteCrossConnectionPeeringsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCrossConnectionPeeringsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCrossConnectionPeeringsGetSignalError() instead")
    void expressRouteCrossConnectionPeeringsGetSignalE(OAIExpressRouteCrossConnectionPeering summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCrossConnectionPeeringsGetSignalError(OAIExpressRouteCrossConnectionPeering summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCrossConnectionPeeringsListSignalError() instead")
    void expressRouteCrossConnectionPeeringsListSignalE(OAIExpressRouteCrossConnectionPeeringList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCrossConnectionPeeringsListSignalError(OAIExpressRouteCrossConnectionPeeringList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use expressRouteCrossConnectionPeeringsCreateOrUpdateSignalErrorFull() instead")
    void expressRouteCrossConnectionPeeringsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCrossConnectionPeeringsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCrossConnectionPeeringsDeleteSignalErrorFull() instead")
    void expressRouteCrossConnectionPeeringsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCrossConnectionPeeringsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCrossConnectionPeeringsGetSignalErrorFull() instead")
    void expressRouteCrossConnectionPeeringsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCrossConnectionPeeringsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRouteCrossConnectionPeeringsListSignalErrorFull() instead")
    void expressRouteCrossConnectionPeeringsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRouteCrossConnectionPeeringsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
