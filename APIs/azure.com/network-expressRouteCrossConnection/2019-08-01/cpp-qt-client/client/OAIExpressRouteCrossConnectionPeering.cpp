/**
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRouteCrossConnectionPeering.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRouteCrossConnectionPeering::OAIExpressRouteCrossConnectionPeering(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRouteCrossConnectionPeering::OAIExpressRouteCrossConnectionPeering() {
    this->initializeModel();
}

OAIExpressRouteCrossConnectionPeering::~OAIExpressRouteCrossConnectionPeering() {}

void OAIExpressRouteCrossConnectionPeering::initializeModel() {

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAIExpressRouteCrossConnectionPeering::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRouteCrossConnectionPeering::fromJsonObject(QJsonObject json) {

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAIExpressRouteCrossConnectionPeering::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRouteCrossConnectionPeering::asJsonObject() const {
    QJsonObject obj;
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

QString OAIExpressRouteCrossConnectionPeering::getEtag() const {
    return m_etag;
}
void OAIExpressRouteCrossConnectionPeering::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeering::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIExpressRouteCrossConnectionPeering::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIExpressRouteCrossConnectionPeering::getName() const {
    return m_name;
}
void OAIExpressRouteCrossConnectionPeering::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeering::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExpressRouteCrossConnectionPeering::is_name_Valid() const{
    return m_name_isValid;
}

OAIExpressRouteCrossConnectionPeeringProperties OAIExpressRouteCrossConnectionPeering::getProperties() const {
    return m_properties;
}
void OAIExpressRouteCrossConnectionPeering::setProperties(const OAIExpressRouteCrossConnectionPeeringProperties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeering::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIExpressRouteCrossConnectionPeering::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIExpressRouteCrossConnectionPeering::getId() const {
    return m_id;
}
void OAIExpressRouteCrossConnectionPeering::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExpressRouteCrossConnectionPeering::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExpressRouteCrossConnectionPeering::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIExpressRouteCrossConnectionPeering::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRouteCrossConnectionPeering::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
