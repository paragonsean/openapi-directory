/**
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ExpressRouteCrossConnectionRestApis);
  }
}(this, function(expect, ExpressRouteCrossConnectionRestApis) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ExpressRouteCrossConnectionRestApis.ExpressRouteCrossConnectionProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ExpressRouteCrossConnectionProperties', function() {
    it('should create an instance of ExpressRouteCrossConnectionProperties', function() {
      // uncomment below and update the code to test ExpressRouteCrossConnectionProperties
      //var instance = new ExpressRouteCrossConnectionRestApis.ExpressRouteCrossConnectionProperties();
      //expect(instance).to.be.a(ExpressRouteCrossConnectionRestApis.ExpressRouteCrossConnectionProperties);
    });

    it('should have the property bandwidthInMbps (base name: "bandwidthInMbps")', function() {
      // uncomment below and update the code to test the property bandwidthInMbps
      //var instance = new ExpressRouteCrossConnectionRestApis.ExpressRouteCrossConnectionProperties();
      //expect(instance).to.be();
    });

    it('should have the property expressRouteCircuit (base name: "expressRouteCircuit")', function() {
      // uncomment below and update the code to test the property expressRouteCircuit
      //var instance = new ExpressRouteCrossConnectionRestApis.ExpressRouteCrossConnectionProperties();
      //expect(instance).to.be();
    });

    it('should have the property peeringLocation (base name: "peeringLocation")', function() {
      // uncomment below and update the code to test the property peeringLocation
      //var instance = new ExpressRouteCrossConnectionRestApis.ExpressRouteCrossConnectionProperties();
      //expect(instance).to.be();
    });

    it('should have the property peerings (base name: "peerings")', function() {
      // uncomment below and update the code to test the property peerings
      //var instance = new ExpressRouteCrossConnectionRestApis.ExpressRouteCrossConnectionProperties();
      //expect(instance).to.be();
    });

    it('should have the property primaryAzurePort (base name: "primaryAzurePort")', function() {
      // uncomment below and update the code to test the property primaryAzurePort
      //var instance = new ExpressRouteCrossConnectionRestApis.ExpressRouteCrossConnectionProperties();
      //expect(instance).to.be();
    });

    it('should have the property provisioningState (base name: "provisioningState")', function() {
      // uncomment below and update the code to test the property provisioningState
      //var instance = new ExpressRouteCrossConnectionRestApis.ExpressRouteCrossConnectionProperties();
      //expect(instance).to.be();
    });

    it('should have the property sTag (base name: "sTag")', function() {
      // uncomment below and update the code to test the property sTag
      //var instance = new ExpressRouteCrossConnectionRestApis.ExpressRouteCrossConnectionProperties();
      //expect(instance).to.be();
    });

    it('should have the property secondaryAzurePort (base name: "secondaryAzurePort")', function() {
      // uncomment below and update the code to test the property secondaryAzurePort
      //var instance = new ExpressRouteCrossConnectionRestApis.ExpressRouteCrossConnectionProperties();
      //expect(instance).to.be();
    });

    it('should have the property serviceProviderNotes (base name: "serviceProviderNotes")', function() {
      // uncomment below and update the code to test the property serviceProviderNotes
      //var instance = new ExpressRouteCrossConnectionRestApis.ExpressRouteCrossConnectionProperties();
      //expect(instance).to.be();
    });

    it('should have the property serviceProviderProvisioningState (base name: "serviceProviderProvisioningState")', function() {
      // uncomment below and update the code to test the property serviceProviderProvisioningState
      //var instance = new ExpressRouteCrossConnectionRestApis.ExpressRouteCrossConnectionProperties();
      //expect(instance).to.be();
    });

  });

}));
