/**
 * ExpressRouteCrossConnection REST APIs
 * The Microsoft Azure ExpressRouteCrossConnection Resource Provider REST APIs describes the operations for the connectivity provider to provision ExpressRoute circuit, create and modify BGP peering entities and troubleshoot connectivity on customer's ExpressRoute circuit.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExpressRouteCircuitReference from './ExpressRouteCircuitReference';
import ExpressRouteCrossConnectionPeering from './ExpressRouteCrossConnectionPeering';

/**
 * The ExpressRouteCrossConnectionProperties model module.
 * @module model/ExpressRouteCrossConnectionProperties
 * @version 2019-08-01
 */
class ExpressRouteCrossConnectionProperties {
    /**
     * Constructs a new <code>ExpressRouteCrossConnectionProperties</code>.
     * Properties of ExpressRouteCrossConnection.
     * @alias module:model/ExpressRouteCrossConnectionProperties
     */
    constructor() { 
        
        ExpressRouteCrossConnectionProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExpressRouteCrossConnectionProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExpressRouteCrossConnectionProperties} obj Optional instance to populate.
     * @return {module:model/ExpressRouteCrossConnectionProperties} The populated <code>ExpressRouteCrossConnectionProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExpressRouteCrossConnectionProperties();

            if (data.hasOwnProperty('bandwidthInMbps')) {
                obj['bandwidthInMbps'] = ApiClient.convertToType(data['bandwidthInMbps'], 'Number');
            }
            if (data.hasOwnProperty('expressRouteCircuit')) {
                obj['expressRouteCircuit'] = ExpressRouteCircuitReference.constructFromObject(data['expressRouteCircuit']);
            }
            if (data.hasOwnProperty('peeringLocation')) {
                obj['peeringLocation'] = ApiClient.convertToType(data['peeringLocation'], 'String');
            }
            if (data.hasOwnProperty('peerings')) {
                obj['peerings'] = ApiClient.convertToType(data['peerings'], [ExpressRouteCrossConnectionPeering]);
            }
            if (data.hasOwnProperty('primaryAzurePort')) {
                obj['primaryAzurePort'] = ApiClient.convertToType(data['primaryAzurePort'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('sTag')) {
                obj['sTag'] = ApiClient.convertToType(data['sTag'], 'Number');
            }
            if (data.hasOwnProperty('secondaryAzurePort')) {
                obj['secondaryAzurePort'] = ApiClient.convertToType(data['secondaryAzurePort'], 'String');
            }
            if (data.hasOwnProperty('serviceProviderNotes')) {
                obj['serviceProviderNotes'] = ApiClient.convertToType(data['serviceProviderNotes'], 'String');
            }
            if (data.hasOwnProperty('serviceProviderProvisioningState')) {
                obj['serviceProviderProvisioningState'] = ApiClient.convertToType(data['serviceProviderProvisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExpressRouteCrossConnectionProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExpressRouteCrossConnectionProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `expressRouteCircuit`
        if (data['expressRouteCircuit']) { // data not null
          ExpressRouteCircuitReference.validateJSON(data['expressRouteCircuit']);
        }
        // ensure the json data is a string
        if (data['peeringLocation'] && !(typeof data['peeringLocation'] === 'string' || data['peeringLocation'] instanceof String)) {
            throw new Error("Expected the field `peeringLocation` to be a primitive type in the JSON string but got " + data['peeringLocation']);
        }
        if (data['peerings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['peerings'])) {
                throw new Error("Expected the field `peerings` to be an array in the JSON data but got " + data['peerings']);
            }
            // validate the optional field `peerings` (array)
            for (const item of data['peerings']) {
                ExpressRouteCrossConnectionPeering.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['primaryAzurePort'] && !(typeof data['primaryAzurePort'] === 'string' || data['primaryAzurePort'] instanceof String)) {
            throw new Error("Expected the field `primaryAzurePort` to be a primitive type in the JSON string but got " + data['primaryAzurePort']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['secondaryAzurePort'] && !(typeof data['secondaryAzurePort'] === 'string' || data['secondaryAzurePort'] instanceof String)) {
            throw new Error("Expected the field `secondaryAzurePort` to be a primitive type in the JSON string but got " + data['secondaryAzurePort']);
        }
        // ensure the json data is a string
        if (data['serviceProviderNotes'] && !(typeof data['serviceProviderNotes'] === 'string' || data['serviceProviderNotes'] instanceof String)) {
            throw new Error("Expected the field `serviceProviderNotes` to be a primitive type in the JSON string but got " + data['serviceProviderNotes']);
        }
        // ensure the json data is a string
        if (data['serviceProviderProvisioningState'] && !(typeof data['serviceProviderProvisioningState'] === 'string' || data['serviceProviderProvisioningState'] instanceof String)) {
            throw new Error("Expected the field `serviceProviderProvisioningState` to be a primitive type in the JSON string but got " + data['serviceProviderProvisioningState']);
        }

        return true;
    }


}



/**
 * The circuit bandwidth In Mbps.
 * @member {Number} bandwidthInMbps
 */
ExpressRouteCrossConnectionProperties.prototype['bandwidthInMbps'] = undefined;

/**
 * @member {module:model/ExpressRouteCircuitReference} expressRouteCircuit
 */
ExpressRouteCrossConnectionProperties.prototype['expressRouteCircuit'] = undefined;

/**
 * The peering location of the ExpressRoute circuit.
 * @member {String} peeringLocation
 */
ExpressRouteCrossConnectionProperties.prototype['peeringLocation'] = undefined;

/**
 * The list of peerings.
 * @member {Array.<module:model/ExpressRouteCrossConnectionPeering>} peerings
 */
ExpressRouteCrossConnectionProperties.prototype['peerings'] = undefined;

/**
 * The name of the primary port.
 * @member {String} primaryAzurePort
 */
ExpressRouteCrossConnectionProperties.prototype['primaryAzurePort'] = undefined;

/**
 * The current provisioning state.
 * @member {module:model/ExpressRouteCrossConnectionProperties.ProvisioningStateEnum} provisioningState
 */
ExpressRouteCrossConnectionProperties.prototype['provisioningState'] = undefined;

/**
 * The identifier of the circuit traffic.
 * @member {Number} sTag
 */
ExpressRouteCrossConnectionProperties.prototype['sTag'] = undefined;

/**
 * The name of the secondary port.
 * @member {String} secondaryAzurePort
 */
ExpressRouteCrossConnectionProperties.prototype['secondaryAzurePort'] = undefined;

/**
 * Additional read only notes set by the connectivity provider.
 * @member {String} serviceProviderNotes
 */
ExpressRouteCrossConnectionProperties.prototype['serviceProviderNotes'] = undefined;

/**
 * The ServiceProviderProvisioningState state of the resource.
 * @member {module:model/ExpressRouteCrossConnectionProperties.ServiceProviderProvisioningStateEnum} serviceProviderProvisioningState
 */
ExpressRouteCrossConnectionProperties.prototype['serviceProviderProvisioningState'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
ExpressRouteCrossConnectionProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};


/**
 * Allowed values for the <code>serviceProviderProvisioningState</code> property.
 * @enum {String}
 * @readonly
 */
ExpressRouteCrossConnectionProperties['ServiceProviderProvisioningStateEnum'] = {

    /**
     * value: "NotProvisioned"
     * @const
     */
    "NotProvisioned": "NotProvisioned",

    /**
     * value: "Provisioning"
     * @const
     */
    "Provisioning": "Provisioning",

    /**
     * value: "Provisioned"
     * @const
     */
    "Provisioned": "Provisioned",

    /**
     * value: "Deprovisioning"
     * @const
     */
    "Deprovisioning": "Deprovisioning"
};



export default ExpressRouteCrossConnectionProperties;

