/**
 * SubscriptionsManagementClient
 * The Admin Subscriptions Management Client.
 *
 * The version of the OpenAPI document: 2015-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OfferDelegation from '../model/OfferDelegation';
import OfferDelegationList from '../model/OfferDelegationList';

/**
* OfferDelegations service.
* @module api/OfferDelegationsApi
* @version 2015-11-01
*/
export default class OfferDelegationsApi {

    /**
    * Constructs a new OfferDelegationsApi. 
    * @alias module:api/OfferDelegationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the offerDelegationsCreateOrUpdate operation.
     * @callback module:api/OfferDelegationsApi~offerDelegationsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OfferDelegation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update the offer delegation.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group the resource is located under.
     * @param {String} offer Name of an offer.
     * @param {String} offerDelegationName Name of a offer delegation.
     * @param {String} apiVersion Client Api Version.
     * @param {module:model/OfferDelegation} newOfferDelegation New offer delegation parameter.
     * @param {module:api/OfferDelegationsApi~offerDelegationsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OfferDelegation}
     */
    offerDelegationsCreateOrUpdate(subscriptionId, resourceGroupName, offer, offerDelegationName, apiVersion, newOfferDelegation, callback) {
      let postBody = newOfferDelegation;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling offerDelegationsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling offerDelegationsCreateOrUpdate");
      }
      // verify the required parameter 'offer' is set
      if (offer === undefined || offer === null) {
        throw new Error("Missing the required parameter 'offer' when calling offerDelegationsCreateOrUpdate");
      }
      // verify the required parameter 'offerDelegationName' is set
      if (offerDelegationName === undefined || offerDelegationName === null) {
        throw new Error("Missing the required parameter 'offerDelegationName' when calling offerDelegationsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling offerDelegationsCreateOrUpdate");
      }
      // verify the required parameter 'newOfferDelegation' is set
      if (newOfferDelegation === undefined || newOfferDelegation === null) {
        throw new Error("Missing the required parameter 'newOfferDelegation' when calling offerDelegationsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'offer': offer,
        'offerDelegationName': offerDelegationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OfferDelegation;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Subscriptions.Admin/offers/{offer}/offerDelegations/{offerDelegationName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offerDelegationsDelete operation.
     * @callback module:api/OfferDelegationsApi~offerDelegationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the specified offer delegation.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group the resource is located under.
     * @param {String} offer Name of an offer.
     * @param {String} offerDelegationName Name of a offer delegation.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/OfferDelegationsApi~offerDelegationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    offerDelegationsDelete(subscriptionId, resourceGroupName, offer, offerDelegationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling offerDelegationsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling offerDelegationsDelete");
      }
      // verify the required parameter 'offer' is set
      if (offer === undefined || offer === null) {
        throw new Error("Missing the required parameter 'offer' when calling offerDelegationsDelete");
      }
      // verify the required parameter 'offerDelegationName' is set
      if (offerDelegationName === undefined || offerDelegationName === null) {
        throw new Error("Missing the required parameter 'offerDelegationName' when calling offerDelegationsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling offerDelegationsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'offer': offer,
        'offerDelegationName': offerDelegationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Subscriptions.Admin/offers/{offer}/offerDelegations/{offerDelegationName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offerDelegationsGet operation.
     * @callback module:api/OfferDelegationsApi~offerDelegationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OfferDelegation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the specified offer delegation.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group the resource is located under.
     * @param {String} offer Name of an offer.
     * @param {String} offerDelegationName Name of a offer delegation.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/OfferDelegationsApi~offerDelegationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OfferDelegation}
     */
    offerDelegationsGet(subscriptionId, resourceGroupName, offer, offerDelegationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling offerDelegationsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling offerDelegationsGet");
      }
      // verify the required parameter 'offer' is set
      if (offer === undefined || offer === null) {
        throw new Error("Missing the required parameter 'offer' when calling offerDelegationsGet");
      }
      // verify the required parameter 'offerDelegationName' is set
      if (offerDelegationName === undefined || offerDelegationName === null) {
        throw new Error("Missing the required parameter 'offerDelegationName' when calling offerDelegationsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling offerDelegationsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'offer': offer,
        'offerDelegationName': offerDelegationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OfferDelegation;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Subscriptions.Admin/offers/{offer}/offerDelegations/{offerDelegationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the offerDelegationsList operation.
     * @callback module:api/OfferDelegationsApi~offerDelegationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OfferDelegationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of offer delegations.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName The resource group the resource is located under.
     * @param {String} offer Name of an offer.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/OfferDelegationsApi~offerDelegationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OfferDelegationList}
     */
    offerDelegationsList(subscriptionId, resourceGroupName, offer, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling offerDelegationsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling offerDelegationsList");
      }
      // verify the required parameter 'offer' is set
      if (offer === undefined || offer === null) {
        throw new Error("Missing the required parameter 'offer' when calling offerDelegationsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling offerDelegationsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'offer': offer
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OfferDelegationList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Subscriptions.Admin/offers/{offer}/offerDelegations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
