/**
 * SubscriptionsManagementClient
 * The Admin Subscriptions Management Client.
 *
 * The version of the OpenAPI document: 2015-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOfferDelegationsApi_H
#define OAI_OAIOfferDelegationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIOfferDelegation.h"
#include "OAIOfferDelegationList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOfferDelegationsApi : public QObject {
    Q_OBJECT

public:
    OAIOfferDelegationsApi(const int timeOut = 0);
    ~OAIOfferDelegationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  offer QString [required]
    * @param[in]  offer_delegation_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  new_offer_delegation OAIOfferDelegation [required]
    */
    virtual void offerDelegationsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &offer, const QString &offer_delegation_name, const QString &api_version, const OAIOfferDelegation &new_offer_delegation);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  offer QString [required]
    * @param[in]  offer_delegation_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void offerDelegationsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &offer, const QString &offer_delegation_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  offer QString [required]
    * @param[in]  offer_delegation_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void offerDelegationsGet(const QString &subscription_id, const QString &resource_group_name, const QString &offer, const QString &offer_delegation_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  offer QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void offerDelegationsList(const QString &subscription_id, const QString &resource_group_name, const QString &offer, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void offerDelegationsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void offerDelegationsDeleteCallback(OAIHttpRequestWorker *worker);
    void offerDelegationsGetCallback(OAIHttpRequestWorker *worker);
    void offerDelegationsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void offerDelegationsCreateOrUpdateSignal(OAIOfferDelegation summary);
    void offerDelegationsDeleteSignal();
    void offerDelegationsGetSignal(OAIOfferDelegation summary);
    void offerDelegationsListSignal(OAIOfferDelegationList summary);


    void offerDelegationsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIOfferDelegation summary);
    void offerDelegationsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void offerDelegationsGetSignalFull(OAIHttpRequestWorker *worker, OAIOfferDelegation summary);
    void offerDelegationsListSignalFull(OAIHttpRequestWorker *worker, OAIOfferDelegationList summary);

    Q_DECL_DEPRECATED_X("Use offerDelegationsCreateOrUpdateSignalError() instead")
    void offerDelegationsCreateOrUpdateSignalE(OAIOfferDelegation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offerDelegationsCreateOrUpdateSignalError(OAIOfferDelegation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offerDelegationsDeleteSignalError() instead")
    void offerDelegationsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void offerDelegationsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offerDelegationsGetSignalError() instead")
    void offerDelegationsGetSignalE(OAIOfferDelegation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offerDelegationsGetSignalError(OAIOfferDelegation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offerDelegationsListSignalError() instead")
    void offerDelegationsListSignalE(OAIOfferDelegationList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void offerDelegationsListSignalError(OAIOfferDelegationList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use offerDelegationsCreateOrUpdateSignalErrorFull() instead")
    void offerDelegationsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offerDelegationsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offerDelegationsDeleteSignalErrorFull() instead")
    void offerDelegationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offerDelegationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offerDelegationsGetSignalErrorFull() instead")
    void offerDelegationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offerDelegationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use offerDelegationsListSignalErrorFull() instead")
    void offerDelegationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void offerDelegationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
