/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NatGatewayPropertiesFormatPublicIpAddressesInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Nat Gateway properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:17.214211-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NatGatewayPropertiesFormat {
  public static final String SERIALIZED_NAME_IDLE_TIMEOUT_IN_MINUTES = "idleTimeoutInMinutes";
  @SerializedName(SERIALIZED_NAME_IDLE_TIMEOUT_IN_MINUTES)
  private Integer idleTimeoutInMinutes;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_PUBLIC_IP_ADDRESSES = "publicIpAddresses";
  @SerializedName(SERIALIZED_NAME_PUBLIC_IP_ADDRESSES)
  private List<NatGatewayPropertiesFormatPublicIpAddressesInner> publicIpAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLIC_IP_PREFIXES = "publicIpPrefixes";
  @SerializedName(SERIALIZED_NAME_PUBLIC_IP_PREFIXES)
  private List<NatGatewayPropertiesFormatPublicIpAddressesInner> publicIpPrefixes = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCE_GUID = "resourceGuid";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GUID)
  private String resourceGuid;

  public static final String SERIALIZED_NAME_SUBNETS = "subnets";
  @SerializedName(SERIALIZED_NAME_SUBNETS)
  private List<NatGatewayPropertiesFormatPublicIpAddressesInner> subnets = new ArrayList<>();

  public NatGatewayPropertiesFormat() {
  }

  public NatGatewayPropertiesFormat(
     List<NatGatewayPropertiesFormatPublicIpAddressesInner> subnets
  ) {
    this();
    this.subnets = subnets;
  }

  public NatGatewayPropertiesFormat idleTimeoutInMinutes(Integer idleTimeoutInMinutes) {
    this.idleTimeoutInMinutes = idleTimeoutInMinutes;
    return this;
  }

  /**
   * The idle timeout of the nat gateway.
   * @return idleTimeoutInMinutes
   */
  @javax.annotation.Nullable
  public Integer getIdleTimeoutInMinutes() {
    return idleTimeoutInMinutes;
  }

  public void setIdleTimeoutInMinutes(Integer idleTimeoutInMinutes) {
    this.idleTimeoutInMinutes = idleTimeoutInMinutes;
  }


  public NatGatewayPropertiesFormat provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The provisioning state of the NatGateway resource. Possible values are: &#39;Updating&#39;, &#39;Deleting&#39;, and &#39;Failed&#39;.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public NatGatewayPropertiesFormat publicIpAddresses(List<NatGatewayPropertiesFormatPublicIpAddressesInner> publicIpAddresses) {
    this.publicIpAddresses = publicIpAddresses;
    return this;
  }

  public NatGatewayPropertiesFormat addPublicIpAddressesItem(NatGatewayPropertiesFormatPublicIpAddressesInner publicIpAddressesItem) {
    if (this.publicIpAddresses == null) {
      this.publicIpAddresses = new ArrayList<>();
    }
    this.publicIpAddresses.add(publicIpAddressesItem);
    return this;
  }

  /**
   * An array of public ip addresses associated with the nat gateway resource.
   * @return publicIpAddresses
   */
  @javax.annotation.Nullable
  public List<NatGatewayPropertiesFormatPublicIpAddressesInner> getPublicIpAddresses() {
    return publicIpAddresses;
  }

  public void setPublicIpAddresses(List<NatGatewayPropertiesFormatPublicIpAddressesInner> publicIpAddresses) {
    this.publicIpAddresses = publicIpAddresses;
  }


  public NatGatewayPropertiesFormat publicIpPrefixes(List<NatGatewayPropertiesFormatPublicIpAddressesInner> publicIpPrefixes) {
    this.publicIpPrefixes = publicIpPrefixes;
    return this;
  }

  public NatGatewayPropertiesFormat addPublicIpPrefixesItem(NatGatewayPropertiesFormatPublicIpAddressesInner publicIpPrefixesItem) {
    if (this.publicIpPrefixes == null) {
      this.publicIpPrefixes = new ArrayList<>();
    }
    this.publicIpPrefixes.add(publicIpPrefixesItem);
    return this;
  }

  /**
   * An array of public ip prefixes associated with the nat gateway resource.
   * @return publicIpPrefixes
   */
  @javax.annotation.Nullable
  public List<NatGatewayPropertiesFormatPublicIpAddressesInner> getPublicIpPrefixes() {
    return publicIpPrefixes;
  }

  public void setPublicIpPrefixes(List<NatGatewayPropertiesFormatPublicIpAddressesInner> publicIpPrefixes) {
    this.publicIpPrefixes = publicIpPrefixes;
  }


  public NatGatewayPropertiesFormat resourceGuid(String resourceGuid) {
    this.resourceGuid = resourceGuid;
    return this;
  }

  /**
   * The resource GUID property of the nat gateway resource.
   * @return resourceGuid
   */
  @javax.annotation.Nullable
  public String getResourceGuid() {
    return resourceGuid;
  }

  public void setResourceGuid(String resourceGuid) {
    this.resourceGuid = resourceGuid;
  }


  /**
   * An array of references to the subnets using this nat gateway resource.
   * @return subnets
   */
  @javax.annotation.Nullable
  public List<NatGatewayPropertiesFormatPublicIpAddressesInner> getSubnets() {
    return subnets;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NatGatewayPropertiesFormat natGatewayPropertiesFormat = (NatGatewayPropertiesFormat) o;
    return Objects.equals(this.idleTimeoutInMinutes, natGatewayPropertiesFormat.idleTimeoutInMinutes) &&
        Objects.equals(this.provisioningState, natGatewayPropertiesFormat.provisioningState) &&
        Objects.equals(this.publicIpAddresses, natGatewayPropertiesFormat.publicIpAddresses) &&
        Objects.equals(this.publicIpPrefixes, natGatewayPropertiesFormat.publicIpPrefixes) &&
        Objects.equals(this.resourceGuid, natGatewayPropertiesFormat.resourceGuid) &&
        Objects.equals(this.subnets, natGatewayPropertiesFormat.subnets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idleTimeoutInMinutes, provisioningState, publicIpAddresses, publicIpPrefixes, resourceGuid, subnets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NatGatewayPropertiesFormat {\n");
    sb.append("    idleTimeoutInMinutes: ").append(toIndentedString(idleTimeoutInMinutes)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    publicIpAddresses: ").append(toIndentedString(publicIpAddresses)).append("\n");
    sb.append("    publicIpPrefixes: ").append(toIndentedString(publicIpPrefixes)).append("\n");
    sb.append("    resourceGuid: ").append(toIndentedString(resourceGuid)).append("\n");
    sb.append("    subnets: ").append(toIndentedString(subnets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("idleTimeoutInMinutes");
    openapiFields.add("provisioningState");
    openapiFields.add("publicIpAddresses");
    openapiFields.add("publicIpPrefixes");
    openapiFields.add("resourceGuid");
    openapiFields.add("subnets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NatGatewayPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NatGatewayPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NatGatewayPropertiesFormat is not found in the empty JSON string", NatGatewayPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NatGatewayPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NatGatewayPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if (jsonObj.get("publicIpAddresses") != null && !jsonObj.get("publicIpAddresses").isJsonNull()) {
        JsonArray jsonArraypublicIpAddresses = jsonObj.getAsJsonArray("publicIpAddresses");
        if (jsonArraypublicIpAddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("publicIpAddresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `publicIpAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("publicIpAddresses").toString()));
          }

          // validate the optional field `publicIpAddresses` (array)
          for (int i = 0; i < jsonArraypublicIpAddresses.size(); i++) {
            NatGatewayPropertiesFormatPublicIpAddressesInner.validateJsonElement(jsonArraypublicIpAddresses.get(i));
          };
        }
      }
      if (jsonObj.get("publicIpPrefixes") != null && !jsonObj.get("publicIpPrefixes").isJsonNull()) {
        JsonArray jsonArraypublicIpPrefixes = jsonObj.getAsJsonArray("publicIpPrefixes");
        if (jsonArraypublicIpPrefixes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("publicIpPrefixes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `publicIpPrefixes` to be an array in the JSON string but got `%s`", jsonObj.get("publicIpPrefixes").toString()));
          }

          // validate the optional field `publicIpPrefixes` (array)
          for (int i = 0; i < jsonArraypublicIpPrefixes.size(); i++) {
            NatGatewayPropertiesFormatPublicIpAddressesInner.validateJsonElement(jsonArraypublicIpPrefixes.get(i));
          };
        }
      }
      if ((jsonObj.get("resourceGuid") != null && !jsonObj.get("resourceGuid").isJsonNull()) && !jsonObj.get("resourceGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGuid").toString()));
      }
      if (jsonObj.get("subnets") != null && !jsonObj.get("subnets").isJsonNull()) {
        JsonArray jsonArraysubnets = jsonObj.getAsJsonArray("subnets");
        if (jsonArraysubnets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subnets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subnets` to be an array in the JSON string but got `%s`", jsonObj.get("subnets").toString()));
          }

          // validate the optional field `subnets` (array)
          for (int i = 0; i < jsonArraysubnets.size(); i++) {
            NatGatewayPropertiesFormatPublicIpAddressesInner.validateJsonElement(jsonArraysubnets.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NatGatewayPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NatGatewayPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NatGatewayPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NatGatewayPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<NatGatewayPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, NatGatewayPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NatGatewayPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NatGatewayPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NatGatewayPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to NatGatewayPropertiesFormat
   */
  public static NatGatewayPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NatGatewayPropertiesFormat.class);
  }

  /**
   * Convert an instance of NatGatewayPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

