/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetworkManagementClient);
  }
}(this, function(expect, NetworkManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NetworkManagementClient.NatGatewaysApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NatGatewaysApi', function() {
    describe('natGatewaysCreateOrUpdate', function() {
      it('should call natGatewaysCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test natGatewaysCreateOrUpdate
        //instance.natGatewaysCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('natGatewaysDelete', function() {
      it('should call natGatewaysDelete successfully', function(done) {
        //uncomment below and update the code to test natGatewaysDelete
        //instance.natGatewaysDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('natGatewaysGet', function() {
      it('should call natGatewaysGet successfully', function(done) {
        //uncomment below and update the code to test natGatewaysGet
        //instance.natGatewaysGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('natGatewaysList', function() {
      it('should call natGatewaysList successfully', function(done) {
        //uncomment below and update the code to test natGatewaysList
        //instance.natGatewaysList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('natGatewaysListAll', function() {
      it('should call natGatewaysListAll successfully', function(done) {
        //uncomment below and update the code to test natGatewaysListAll
        //instance.natGatewaysListAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('natGatewaysUpdateTags', function() {
      it('should call natGatewaysUpdateTags successfully', function(done) {
        //uncomment below and update the code to test natGatewaysUpdateTags
        //instance.natGatewaysUpdateTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
