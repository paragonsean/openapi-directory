/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINatGatewaysApi_H
#define OAI_OAINatGatewaysApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAINatGateway.h"
#include "OAINatGatewayListResult.h"
#include "OAINatGateways_UpdateTags_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINatGatewaysApi : public QObject {
    Q_OBJECT

public:
    OAINatGatewaysApi(const int timeOut = 0);
    ~OAINatGatewaysApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  nat_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAINatGateway [required]
    */
    virtual void natGatewaysCreateOrUpdate(const QString &resource_group_name, const QString &nat_gateway_name, const QString &api_version, const QString &subscription_id, const OAINatGateway &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  nat_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void natGatewaysDelete(const QString &resource_group_name, const QString &nat_gateway_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  nat_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void natGatewaysGet(const QString &resource_group_name, const QString &nat_gateway_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void natGatewaysList(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void natGatewaysListAll(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  nat_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAINatGateways_UpdateTags_request [required]
    */
    virtual void natGatewaysUpdateTags(const QString &resource_group_name, const QString &nat_gateway_name, const QString &api_version, const QString &subscription_id, const OAINatGateways_UpdateTags_request &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void natGatewaysCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void natGatewaysDeleteCallback(OAIHttpRequestWorker *worker);
    void natGatewaysGetCallback(OAIHttpRequestWorker *worker);
    void natGatewaysListCallback(OAIHttpRequestWorker *worker);
    void natGatewaysListAllCallback(OAIHttpRequestWorker *worker);
    void natGatewaysUpdateTagsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void natGatewaysCreateOrUpdateSignal(OAINatGateway summary);
    void natGatewaysDeleteSignal();
    void natGatewaysGetSignal(OAINatGateway summary);
    void natGatewaysListSignal(OAINatGatewayListResult summary);
    void natGatewaysListAllSignal(OAINatGatewayListResult summary);
    void natGatewaysUpdateTagsSignal(OAINatGateway summary);


    void natGatewaysCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAINatGateway summary);
    void natGatewaysDeleteSignalFull(OAIHttpRequestWorker *worker);
    void natGatewaysGetSignalFull(OAIHttpRequestWorker *worker, OAINatGateway summary);
    void natGatewaysListSignalFull(OAIHttpRequestWorker *worker, OAINatGatewayListResult summary);
    void natGatewaysListAllSignalFull(OAIHttpRequestWorker *worker, OAINatGatewayListResult summary);
    void natGatewaysUpdateTagsSignalFull(OAIHttpRequestWorker *worker, OAINatGateway summary);

    Q_DECL_DEPRECATED_X("Use natGatewaysCreateOrUpdateSignalError() instead")
    void natGatewaysCreateOrUpdateSignalE(OAINatGateway summary, QNetworkReply::NetworkError error_type, QString error_str);
    void natGatewaysCreateOrUpdateSignalError(OAINatGateway summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use natGatewaysDeleteSignalError() instead")
    void natGatewaysDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void natGatewaysDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use natGatewaysGetSignalError() instead")
    void natGatewaysGetSignalE(OAINatGateway summary, QNetworkReply::NetworkError error_type, QString error_str);
    void natGatewaysGetSignalError(OAINatGateway summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use natGatewaysListSignalError() instead")
    void natGatewaysListSignalE(OAINatGatewayListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void natGatewaysListSignalError(OAINatGatewayListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use natGatewaysListAllSignalError() instead")
    void natGatewaysListAllSignalE(OAINatGatewayListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void natGatewaysListAllSignalError(OAINatGatewayListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use natGatewaysUpdateTagsSignalError() instead")
    void natGatewaysUpdateTagsSignalE(OAINatGateway summary, QNetworkReply::NetworkError error_type, QString error_str);
    void natGatewaysUpdateTagsSignalError(OAINatGateway summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use natGatewaysCreateOrUpdateSignalErrorFull() instead")
    void natGatewaysCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void natGatewaysCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use natGatewaysDeleteSignalErrorFull() instead")
    void natGatewaysDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void natGatewaysDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use natGatewaysGetSignalErrorFull() instead")
    void natGatewaysGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void natGatewaysGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use natGatewaysListSignalErrorFull() instead")
    void natGatewaysListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void natGatewaysListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use natGatewaysListAllSignalErrorFull() instead")
    void natGatewaysListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void natGatewaysListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use natGatewaysUpdateTagsSignalErrorFull() instead")
    void natGatewaysUpdateTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void natGatewaysUpdateTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
