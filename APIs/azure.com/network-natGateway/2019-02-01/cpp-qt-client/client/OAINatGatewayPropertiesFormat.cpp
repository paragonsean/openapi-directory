/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINatGatewayPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINatGatewayPropertiesFormat::OAINatGatewayPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINatGatewayPropertiesFormat::OAINatGatewayPropertiesFormat() {
    this->initializeModel();
}

OAINatGatewayPropertiesFormat::~OAINatGatewayPropertiesFormat() {}

void OAINatGatewayPropertiesFormat::initializeModel() {

    m_idle_timeout_in_minutes_isSet = false;
    m_idle_timeout_in_minutes_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_public_ip_addresses_isSet = false;
    m_public_ip_addresses_isValid = false;

    m_public_ip_prefixes_isSet = false;
    m_public_ip_prefixes_isValid = false;

    m_resource_guid_isSet = false;
    m_resource_guid_isValid = false;

    m_subnets_isSet = false;
    m_subnets_isValid = false;
}

void OAINatGatewayPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINatGatewayPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_idle_timeout_in_minutes_isValid = ::OpenAPI::fromJsonValue(m_idle_timeout_in_minutes, json[QString("idleTimeoutInMinutes")]);
    m_idle_timeout_in_minutes_isSet = !json[QString("idleTimeoutInMinutes")].isNull() && m_idle_timeout_in_minutes_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_public_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_public_ip_addresses, json[QString("publicIpAddresses")]);
    m_public_ip_addresses_isSet = !json[QString("publicIpAddresses")].isNull() && m_public_ip_addresses_isValid;

    m_public_ip_prefixes_isValid = ::OpenAPI::fromJsonValue(m_public_ip_prefixes, json[QString("publicIpPrefixes")]);
    m_public_ip_prefixes_isSet = !json[QString("publicIpPrefixes")].isNull() && m_public_ip_prefixes_isValid;

    m_resource_guid_isValid = ::OpenAPI::fromJsonValue(m_resource_guid, json[QString("resourceGuid")]);
    m_resource_guid_isSet = !json[QString("resourceGuid")].isNull() && m_resource_guid_isValid;

    m_subnets_isValid = ::OpenAPI::fromJsonValue(m_subnets, json[QString("subnets")]);
    m_subnets_isSet = !json[QString("subnets")].isNull() && m_subnets_isValid;
}

QString OAINatGatewayPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINatGatewayPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_idle_timeout_in_minutes_isSet) {
        obj.insert(QString("idleTimeoutInMinutes"), ::OpenAPI::toJsonValue(m_idle_timeout_in_minutes));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_public_ip_addresses.size() > 0) {
        obj.insert(QString("publicIpAddresses"), ::OpenAPI::toJsonValue(m_public_ip_addresses));
    }
    if (m_public_ip_prefixes.size() > 0) {
        obj.insert(QString("publicIpPrefixes"), ::OpenAPI::toJsonValue(m_public_ip_prefixes));
    }
    if (m_resource_guid_isSet) {
        obj.insert(QString("resourceGuid"), ::OpenAPI::toJsonValue(m_resource_guid));
    }
    if (m_subnets.size() > 0) {
        obj.insert(QString("subnets"), ::OpenAPI::toJsonValue(m_subnets));
    }
    return obj;
}

qint32 OAINatGatewayPropertiesFormat::getIdleTimeoutInMinutes() const {
    return m_idle_timeout_in_minutes;
}
void OAINatGatewayPropertiesFormat::setIdleTimeoutInMinutes(const qint32 &idle_timeout_in_minutes) {
    m_idle_timeout_in_minutes = idle_timeout_in_minutes;
    m_idle_timeout_in_minutes_isSet = true;
}

bool OAINatGatewayPropertiesFormat::is_idle_timeout_in_minutes_Set() const{
    return m_idle_timeout_in_minutes_isSet;
}

bool OAINatGatewayPropertiesFormat::is_idle_timeout_in_minutes_Valid() const{
    return m_idle_timeout_in_minutes_isValid;
}

QString OAINatGatewayPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAINatGatewayPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAINatGatewayPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAINatGatewayPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QList<OAINatGatewayPropertiesFormat_publicIpAddresses_inner> OAINatGatewayPropertiesFormat::getPublicIpAddresses() const {
    return m_public_ip_addresses;
}
void OAINatGatewayPropertiesFormat::setPublicIpAddresses(const QList<OAINatGatewayPropertiesFormat_publicIpAddresses_inner> &public_ip_addresses) {
    m_public_ip_addresses = public_ip_addresses;
    m_public_ip_addresses_isSet = true;
}

bool OAINatGatewayPropertiesFormat::is_public_ip_addresses_Set() const{
    return m_public_ip_addresses_isSet;
}

bool OAINatGatewayPropertiesFormat::is_public_ip_addresses_Valid() const{
    return m_public_ip_addresses_isValid;
}

QList<OAINatGatewayPropertiesFormat_publicIpAddresses_inner> OAINatGatewayPropertiesFormat::getPublicIpPrefixes() const {
    return m_public_ip_prefixes;
}
void OAINatGatewayPropertiesFormat::setPublicIpPrefixes(const QList<OAINatGatewayPropertiesFormat_publicIpAddresses_inner> &public_ip_prefixes) {
    m_public_ip_prefixes = public_ip_prefixes;
    m_public_ip_prefixes_isSet = true;
}

bool OAINatGatewayPropertiesFormat::is_public_ip_prefixes_Set() const{
    return m_public_ip_prefixes_isSet;
}

bool OAINatGatewayPropertiesFormat::is_public_ip_prefixes_Valid() const{
    return m_public_ip_prefixes_isValid;
}

QString OAINatGatewayPropertiesFormat::getResourceGuid() const {
    return m_resource_guid;
}
void OAINatGatewayPropertiesFormat::setResourceGuid(const QString &resource_guid) {
    m_resource_guid = resource_guid;
    m_resource_guid_isSet = true;
}

bool OAINatGatewayPropertiesFormat::is_resource_guid_Set() const{
    return m_resource_guid_isSet;
}

bool OAINatGatewayPropertiesFormat::is_resource_guid_Valid() const{
    return m_resource_guid_isValid;
}

QList<OAINatGatewayPropertiesFormat_publicIpAddresses_inner> OAINatGatewayPropertiesFormat::getSubnets() const {
    return m_subnets;
}
void OAINatGatewayPropertiesFormat::setSubnets(const QList<OAINatGatewayPropertiesFormat_publicIpAddresses_inner> &subnets) {
    m_subnets = subnets;
    m_subnets_isSet = true;
}

bool OAINatGatewayPropertiesFormat::is_subnets_Set() const{
    return m_subnets_isSet;
}

bool OAINatGatewayPropertiesFormat::is_subnets_Valid() const{
    return m_subnets_isValid;
}

bool OAINatGatewayPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_idle_timeout_in_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_prefixes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINatGatewayPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
