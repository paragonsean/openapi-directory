/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AutoApprovedPrivateLinkServicesResult;
import org.openapitools.client.model.CheckPrivateLinkServiceVisibilityRequest;
import org.openapitools.client.model.PrivateEndpointConnection;
import org.openapitools.client.model.PrivateLinkService;
import org.openapitools.client.model.PrivateLinkServiceListResult;
import org.openapitools.client.model.PrivateLinkServiceVisibility;
import org.openapitools.client.model.PrivateLinkServicesListBySubscriptionDefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PrivateLinkServicesApi
 */
@Disabled
public class PrivateLinkServicesApiTest {

    private final PrivateLinkServicesApi api = new PrivateLinkServicesApi();

    /**
     * Checks whether the subscription is visible to private link service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateLinkServicesCheckPrivateLinkServiceVisibilityTest() throws ApiException {
        String location = null;
        String apiVersion = null;
        String subscriptionId = null;
        CheckPrivateLinkServiceVisibilityRequest parameters = null;
        PrivateLinkServiceVisibility response = api.privateLinkServicesCheckPrivateLinkServiceVisibility(location, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Checks whether the subscription is visible to private link service in the specified resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupTest() throws ApiException {
        String location = null;
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        CheckPrivateLinkServiceVisibilityRequest parameters = null;
        PrivateLinkServiceVisibility response = api.privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroup(location, resourceGroupName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes the specified private link service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateLinkServicesDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.privateLinkServicesDelete(resourceGroupName, serviceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Delete private end point connection for a private link service in a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateLinkServicesDeletePrivateEndpointConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String peConnectionName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.privateLinkServicesDeletePrivateEndpointConnection(resourceGroupName, serviceName, peConnectionName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the specified private link service by resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateLinkServicesGetTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $expand = null;
        PrivateLinkService response = api.privateLinkServicesGet(resourceGroupName, serviceName, apiVersion, subscriptionId, $expand);
        // TODO: test validations
    }

    /**
     * Gets all private link services in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateLinkServicesListTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        PrivateLinkServiceListResult response = api.privateLinkServicesList(resourceGroupName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateLinkServicesListAutoApprovedPrivateLinkServicesTest() throws ApiException {
        String location = null;
        String apiVersion = null;
        String subscriptionId = null;
        AutoApprovedPrivateLinkServicesResult response = api.privateLinkServicesListAutoApprovedPrivateLinkServices(location, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupTest() throws ApiException {
        String location = null;
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AutoApprovedPrivateLinkServicesResult response = api.privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroup(location, resourceGroupName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets all private link service in a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateLinkServicesListBySubscriptionTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        PrivateLinkServiceListResult response = api.privateLinkServicesListBySubscription(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Approve or reject private end point connection for a private link service in a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void privateLinkServicesUpdatePrivateEndpointConnectionTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String peConnectionName = null;
        String apiVersion = null;
        String subscriptionId = null;
        PrivateEndpointConnection parameters = null;
        PrivateEndpointConnection response = api.privateLinkServicesUpdatePrivateEndpointConnection(resourceGroupName, serviceName, peConnectionName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
