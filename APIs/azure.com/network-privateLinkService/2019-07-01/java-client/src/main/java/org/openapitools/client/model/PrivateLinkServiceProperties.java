/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PrivateEndpointConnection;
import org.openapitools.client.model.PrivateLinkServiceIpConfiguration;
import org.openapitools.client.model.PrivateLinkServicePropertiesLoadBalancerFrontendIpConfigurationsInner;
import org.openapitools.client.model.PrivateLinkServicePropertiesNetworkInterfacesInner;
import org.openapitools.client.model.ResourceSet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the private link service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:29:59.707799-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PrivateLinkServiceProperties {
  public static final String SERIALIZED_NAME_ALIAS = "alias";
  @SerializedName(SERIALIZED_NAME_ALIAS)
  private String alias;

  public static final String SERIALIZED_NAME_AUTO_APPROVAL = "autoApproval";
  @SerializedName(SERIALIZED_NAME_AUTO_APPROVAL)
  private ResourceSet autoApproval;

  public static final String SERIALIZED_NAME_FQDNS = "fqdns";
  @SerializedName(SERIALIZED_NAME_FQDNS)
  private List<String> fqdns = new ArrayList<>();

  public static final String SERIALIZED_NAME_IP_CONFIGURATIONS = "ipConfigurations";
  @SerializedName(SERIALIZED_NAME_IP_CONFIGURATIONS)
  private List<PrivateLinkServiceIpConfiguration> ipConfigurations = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOAD_BALANCER_FRONTEND_IP_CONFIGURATIONS = "loadBalancerFrontendIpConfigurations";
  @SerializedName(SERIALIZED_NAME_LOAD_BALANCER_FRONTEND_IP_CONFIGURATIONS)
  private List<PrivateLinkServicePropertiesLoadBalancerFrontendIpConfigurationsInner> loadBalancerFrontendIpConfigurations = new ArrayList<>();

  public static final String SERIALIZED_NAME_NETWORK_INTERFACES = "networkInterfaces";
  @SerializedName(SERIALIZED_NAME_NETWORK_INTERFACES)
  private List<PrivateLinkServicePropertiesNetworkInterfacesInner> networkInterfaces = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIVATE_ENDPOINT_CONNECTIONS = "privateEndpointConnections";
  @SerializedName(SERIALIZED_NAME_PRIVATE_ENDPOINT_CONNECTIONS)
  private List<PrivateEndpointConnection> privateEndpointConnections = new ArrayList<>();

  /**
   * The current provisioning state.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    FAILED("Failed");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private ResourceSet visibility;

  public PrivateLinkServiceProperties() {
  }

  public PrivateLinkServiceProperties(
     String alias, 
     List<PrivateLinkServicePropertiesNetworkInterfacesInner> networkInterfaces, 
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.alias = alias;
    this.networkInterfaces = networkInterfaces;
    this.provisioningState = provisioningState;
  }

  /**
   * The alias of the private link service.
   * @return alias
   */
  @javax.annotation.Nullable
  public String getAlias() {
    return alias;
  }



  public PrivateLinkServiceProperties autoApproval(ResourceSet autoApproval) {
    this.autoApproval = autoApproval;
    return this;
  }

  /**
   * The auto-approval list of the private link service.
   * @return autoApproval
   */
  @javax.annotation.Nullable
  public ResourceSet getAutoApproval() {
    return autoApproval;
  }

  public void setAutoApproval(ResourceSet autoApproval) {
    this.autoApproval = autoApproval;
  }


  public PrivateLinkServiceProperties fqdns(List<String> fqdns) {
    this.fqdns = fqdns;
    return this;
  }

  public PrivateLinkServiceProperties addFqdnsItem(String fqdnsItem) {
    if (this.fqdns == null) {
      this.fqdns = new ArrayList<>();
    }
    this.fqdns.add(fqdnsItem);
    return this;
  }

  /**
   * The list of Fqdn.
   * @return fqdns
   */
  @javax.annotation.Nullable
  public List<String> getFqdns() {
    return fqdns;
  }

  public void setFqdns(List<String> fqdns) {
    this.fqdns = fqdns;
  }


  public PrivateLinkServiceProperties ipConfigurations(List<PrivateLinkServiceIpConfiguration> ipConfigurations) {
    this.ipConfigurations = ipConfigurations;
    return this;
  }

  public PrivateLinkServiceProperties addIpConfigurationsItem(PrivateLinkServiceIpConfiguration ipConfigurationsItem) {
    if (this.ipConfigurations == null) {
      this.ipConfigurations = new ArrayList<>();
    }
    this.ipConfigurations.add(ipConfigurationsItem);
    return this;
  }

  /**
   * An array of private link service IP configurations.
   * @return ipConfigurations
   */
  @javax.annotation.Nullable
  public List<PrivateLinkServiceIpConfiguration> getIpConfigurations() {
    return ipConfigurations;
  }

  public void setIpConfigurations(List<PrivateLinkServiceIpConfiguration> ipConfigurations) {
    this.ipConfigurations = ipConfigurations;
  }


  public PrivateLinkServiceProperties loadBalancerFrontendIpConfigurations(List<PrivateLinkServicePropertiesLoadBalancerFrontendIpConfigurationsInner> loadBalancerFrontendIpConfigurations) {
    this.loadBalancerFrontendIpConfigurations = loadBalancerFrontendIpConfigurations;
    return this;
  }

  public PrivateLinkServiceProperties addLoadBalancerFrontendIpConfigurationsItem(PrivateLinkServicePropertiesLoadBalancerFrontendIpConfigurationsInner loadBalancerFrontendIpConfigurationsItem) {
    if (this.loadBalancerFrontendIpConfigurations == null) {
      this.loadBalancerFrontendIpConfigurations = new ArrayList<>();
    }
    this.loadBalancerFrontendIpConfigurations.add(loadBalancerFrontendIpConfigurationsItem);
    return this;
  }

  /**
   * An array of references to the load balancer IP configurations.
   * @return loadBalancerFrontendIpConfigurations
   */
  @javax.annotation.Nullable
  public List<PrivateLinkServicePropertiesLoadBalancerFrontendIpConfigurationsInner> getLoadBalancerFrontendIpConfigurations() {
    return loadBalancerFrontendIpConfigurations;
  }

  public void setLoadBalancerFrontendIpConfigurations(List<PrivateLinkServicePropertiesLoadBalancerFrontendIpConfigurationsInner> loadBalancerFrontendIpConfigurations) {
    this.loadBalancerFrontendIpConfigurations = loadBalancerFrontendIpConfigurations;
  }


  /**
   * An array of references to the network interfaces created for this private link service.
   * @return networkInterfaces
   */
  @javax.annotation.Nullable
  public List<PrivateLinkServicePropertiesNetworkInterfacesInner> getNetworkInterfaces() {
    return networkInterfaces;
  }



  public PrivateLinkServiceProperties privateEndpointConnections(List<PrivateEndpointConnection> privateEndpointConnections) {
    this.privateEndpointConnections = privateEndpointConnections;
    return this;
  }

  public PrivateLinkServiceProperties addPrivateEndpointConnectionsItem(PrivateEndpointConnection privateEndpointConnectionsItem) {
    if (this.privateEndpointConnections == null) {
      this.privateEndpointConnections = new ArrayList<>();
    }
    this.privateEndpointConnections.add(privateEndpointConnectionsItem);
    return this;
  }

  /**
   * An array of list about connections to the private endpoint.
   * @return privateEndpointConnections
   */
  @javax.annotation.Nullable
  public List<PrivateEndpointConnection> getPrivateEndpointConnections() {
    return privateEndpointConnections;
  }

  public void setPrivateEndpointConnections(List<PrivateEndpointConnection> privateEndpointConnections) {
    this.privateEndpointConnections = privateEndpointConnections;
  }


  /**
   * The current provisioning state.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public PrivateLinkServiceProperties visibility(ResourceSet visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * The visibility list of the private link service.
   * @return visibility
   */
  @javax.annotation.Nullable
  public ResourceSet getVisibility() {
    return visibility;
  }

  public void setVisibility(ResourceSet visibility) {
    this.visibility = visibility;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrivateLinkServiceProperties privateLinkServiceProperties = (PrivateLinkServiceProperties) o;
    return Objects.equals(this.alias, privateLinkServiceProperties.alias) &&
        Objects.equals(this.autoApproval, privateLinkServiceProperties.autoApproval) &&
        Objects.equals(this.fqdns, privateLinkServiceProperties.fqdns) &&
        Objects.equals(this.ipConfigurations, privateLinkServiceProperties.ipConfigurations) &&
        Objects.equals(this.loadBalancerFrontendIpConfigurations, privateLinkServiceProperties.loadBalancerFrontendIpConfigurations) &&
        Objects.equals(this.networkInterfaces, privateLinkServiceProperties.networkInterfaces) &&
        Objects.equals(this.privateEndpointConnections, privateLinkServiceProperties.privateEndpointConnections) &&
        Objects.equals(this.provisioningState, privateLinkServiceProperties.provisioningState) &&
        Objects.equals(this.visibility, privateLinkServiceProperties.visibility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alias, autoApproval, fqdns, ipConfigurations, loadBalancerFrontendIpConfigurations, networkInterfaces, privateEndpointConnections, provisioningState, visibility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrivateLinkServiceProperties {\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    autoApproval: ").append(toIndentedString(autoApproval)).append("\n");
    sb.append("    fqdns: ").append(toIndentedString(fqdns)).append("\n");
    sb.append("    ipConfigurations: ").append(toIndentedString(ipConfigurations)).append("\n");
    sb.append("    loadBalancerFrontendIpConfigurations: ").append(toIndentedString(loadBalancerFrontendIpConfigurations)).append("\n");
    sb.append("    networkInterfaces: ").append(toIndentedString(networkInterfaces)).append("\n");
    sb.append("    privateEndpointConnections: ").append(toIndentedString(privateEndpointConnections)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alias");
    openapiFields.add("autoApproval");
    openapiFields.add("fqdns");
    openapiFields.add("ipConfigurations");
    openapiFields.add("loadBalancerFrontendIpConfigurations");
    openapiFields.add("networkInterfaces");
    openapiFields.add("privateEndpointConnections");
    openapiFields.add("provisioningState");
    openapiFields.add("visibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PrivateLinkServiceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PrivateLinkServiceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrivateLinkServiceProperties is not found in the empty JSON string", PrivateLinkServiceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PrivateLinkServiceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrivateLinkServiceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alias") != null && !jsonObj.get("alias").isJsonNull()) && !jsonObj.get("alias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alias").toString()));
      }
      // validate the optional field `autoApproval`
      if (jsonObj.get("autoApproval") != null && !jsonObj.get("autoApproval").isJsonNull()) {
        ResourceSet.validateJsonElement(jsonObj.get("autoApproval"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fqdns") != null && !jsonObj.get("fqdns").isJsonNull() && !jsonObj.get("fqdns").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fqdns` to be an array in the JSON string but got `%s`", jsonObj.get("fqdns").toString()));
      }
      if (jsonObj.get("ipConfigurations") != null && !jsonObj.get("ipConfigurations").isJsonNull()) {
        JsonArray jsonArrayipConfigurations = jsonObj.getAsJsonArray("ipConfigurations");
        if (jsonArrayipConfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ipConfigurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ipConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("ipConfigurations").toString()));
          }

          // validate the optional field `ipConfigurations` (array)
          for (int i = 0; i < jsonArrayipConfigurations.size(); i++) {
            PrivateLinkServiceIpConfiguration.validateJsonElement(jsonArrayipConfigurations.get(i));
          };
        }
      }
      if (jsonObj.get("loadBalancerFrontendIpConfigurations") != null && !jsonObj.get("loadBalancerFrontendIpConfigurations").isJsonNull()) {
        JsonArray jsonArrayloadBalancerFrontendIpConfigurations = jsonObj.getAsJsonArray("loadBalancerFrontendIpConfigurations");
        if (jsonArrayloadBalancerFrontendIpConfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("loadBalancerFrontendIpConfigurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `loadBalancerFrontendIpConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("loadBalancerFrontendIpConfigurations").toString()));
          }

          // validate the optional field `loadBalancerFrontendIpConfigurations` (array)
          for (int i = 0; i < jsonArrayloadBalancerFrontendIpConfigurations.size(); i++) {
            PrivateLinkServicePropertiesLoadBalancerFrontendIpConfigurationsInner.validateJsonElement(jsonArrayloadBalancerFrontendIpConfigurations.get(i));
          };
        }
      }
      if (jsonObj.get("networkInterfaces") != null && !jsonObj.get("networkInterfaces").isJsonNull()) {
        JsonArray jsonArraynetworkInterfaces = jsonObj.getAsJsonArray("networkInterfaces");
        if (jsonArraynetworkInterfaces != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networkInterfaces").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networkInterfaces` to be an array in the JSON string but got `%s`", jsonObj.get("networkInterfaces").toString()));
          }

          // validate the optional field `networkInterfaces` (array)
          for (int i = 0; i < jsonArraynetworkInterfaces.size(); i++) {
            PrivateLinkServicePropertiesNetworkInterfacesInner.validateJsonElement(jsonArraynetworkInterfaces.get(i));
          };
        }
      }
      if (jsonObj.get("privateEndpointConnections") != null && !jsonObj.get("privateEndpointConnections").isJsonNull()) {
        JsonArray jsonArrayprivateEndpointConnections = jsonObj.getAsJsonArray("privateEndpointConnections");
        if (jsonArrayprivateEndpointConnections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("privateEndpointConnections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `privateEndpointConnections` to be an array in the JSON string but got `%s`", jsonObj.get("privateEndpointConnections").toString()));
          }

          // validate the optional field `privateEndpointConnections` (array)
          for (int i = 0; i < jsonArrayprivateEndpointConnections.size(); i++) {
            PrivateEndpointConnection.validateJsonElement(jsonArrayprivateEndpointConnections.get(i));
          };
        }
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // validate the optional field `visibility`
      if (jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) {
        ResourceSet.validateJsonElement(jsonObj.get("visibility"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrivateLinkServiceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrivateLinkServiceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrivateLinkServiceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrivateLinkServiceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<PrivateLinkServiceProperties>() {
           @Override
           public void write(JsonWriter out, PrivateLinkServiceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrivateLinkServiceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PrivateLinkServiceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrivateLinkServiceProperties
   * @throws IOException if the JSON string is invalid with respect to PrivateLinkServiceProperties
   */
  public static PrivateLinkServiceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrivateLinkServiceProperties.class);
  }

  /**
   * Convert an instance of PrivateLinkServiceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

