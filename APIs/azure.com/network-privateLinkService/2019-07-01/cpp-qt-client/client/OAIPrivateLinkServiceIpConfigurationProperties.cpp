/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateLinkServiceIpConfigurationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateLinkServiceIpConfigurationProperties::OAIPrivateLinkServiceIpConfigurationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateLinkServiceIpConfigurationProperties::OAIPrivateLinkServiceIpConfigurationProperties() {
    this->initializeModel();
}

OAIPrivateLinkServiceIpConfigurationProperties::~OAIPrivateLinkServiceIpConfigurationProperties() {}

void OAIPrivateLinkServiceIpConfigurationProperties::initializeModel() {

    m_primary_isSet = false;
    m_primary_isValid = false;

    m_private_ip_address_isSet = false;
    m_private_ip_address_isValid = false;

    m_private_ip_address_version_isSet = false;
    m_private_ip_address_version_isValid = false;

    m_private_ip_allocation_method_isSet = false;
    m_private_ip_allocation_method_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_subnet_isSet = false;
    m_subnet_isValid = false;
}

void OAIPrivateLinkServiceIpConfigurationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateLinkServiceIpConfigurationProperties::fromJsonObject(QJsonObject json) {

    m_primary_isValid = ::OpenAPI::fromJsonValue(m_primary, json[QString("primary")]);
    m_primary_isSet = !json[QString("primary")].isNull() && m_primary_isValid;

    m_private_ip_address_isValid = ::OpenAPI::fromJsonValue(m_private_ip_address, json[QString("privateIPAddress")]);
    m_private_ip_address_isSet = !json[QString("privateIPAddress")].isNull() && m_private_ip_address_isValid;

    m_private_ip_address_version_isValid = ::OpenAPI::fromJsonValue(m_private_ip_address_version, json[QString("privateIPAddressVersion")]);
    m_private_ip_address_version_isSet = !json[QString("privateIPAddressVersion")].isNull() && m_private_ip_address_version_isValid;

    m_private_ip_allocation_method_isValid = ::OpenAPI::fromJsonValue(m_private_ip_allocation_method, json[QString("privateIPAllocationMethod")]);
    m_private_ip_allocation_method_isSet = !json[QString("privateIPAllocationMethod")].isNull() && m_private_ip_allocation_method_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_subnet_isValid = ::OpenAPI::fromJsonValue(m_subnet, json[QString("subnet")]);
    m_subnet_isSet = !json[QString("subnet")].isNull() && m_subnet_isValid;
}

QString OAIPrivateLinkServiceIpConfigurationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateLinkServiceIpConfigurationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_primary_isSet) {
        obj.insert(QString("primary"), ::OpenAPI::toJsonValue(m_primary));
    }
    if (m_private_ip_address_isSet) {
        obj.insert(QString("privateIPAddress"), ::OpenAPI::toJsonValue(m_private_ip_address));
    }
    if (m_private_ip_address_version_isSet) {
        obj.insert(QString("privateIPAddressVersion"), ::OpenAPI::toJsonValue(m_private_ip_address_version));
    }
    if (m_private_ip_allocation_method_isSet) {
        obj.insert(QString("privateIPAllocationMethod"), ::OpenAPI::toJsonValue(m_private_ip_allocation_method));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_subnet.isSet()) {
        obj.insert(QString("subnet"), ::OpenAPI::toJsonValue(m_subnet));
    }
    return obj;
}

bool OAIPrivateLinkServiceIpConfigurationProperties::isPrimary() const {
    return m_primary;
}
void OAIPrivateLinkServiceIpConfigurationProperties::setPrimary(const bool &primary) {
    m_primary = primary;
    m_primary_isSet = true;
}

bool OAIPrivateLinkServiceIpConfigurationProperties::is_primary_Set() const{
    return m_primary_isSet;
}

bool OAIPrivateLinkServiceIpConfigurationProperties::is_primary_Valid() const{
    return m_primary_isValid;
}

QString OAIPrivateLinkServiceIpConfigurationProperties::getPrivateIpAddress() const {
    return m_private_ip_address;
}
void OAIPrivateLinkServiceIpConfigurationProperties::setPrivateIpAddress(const QString &private_ip_address) {
    m_private_ip_address = private_ip_address;
    m_private_ip_address_isSet = true;
}

bool OAIPrivateLinkServiceIpConfigurationProperties::is_private_ip_address_Set() const{
    return m_private_ip_address_isSet;
}

bool OAIPrivateLinkServiceIpConfigurationProperties::is_private_ip_address_Valid() const{
    return m_private_ip_address_isValid;
}

QString OAIPrivateLinkServiceIpConfigurationProperties::getPrivateIpAddressVersion() const {
    return m_private_ip_address_version;
}
void OAIPrivateLinkServiceIpConfigurationProperties::setPrivateIpAddressVersion(const QString &private_ip_address_version) {
    m_private_ip_address_version = private_ip_address_version;
    m_private_ip_address_version_isSet = true;
}

bool OAIPrivateLinkServiceIpConfigurationProperties::is_private_ip_address_version_Set() const{
    return m_private_ip_address_version_isSet;
}

bool OAIPrivateLinkServiceIpConfigurationProperties::is_private_ip_address_version_Valid() const{
    return m_private_ip_address_version_isValid;
}

QString OAIPrivateLinkServiceIpConfigurationProperties::getPrivateIpAllocationMethod() const {
    return m_private_ip_allocation_method;
}
void OAIPrivateLinkServiceIpConfigurationProperties::setPrivateIpAllocationMethod(const QString &private_ip_allocation_method) {
    m_private_ip_allocation_method = private_ip_allocation_method;
    m_private_ip_allocation_method_isSet = true;
}

bool OAIPrivateLinkServiceIpConfigurationProperties::is_private_ip_allocation_method_Set() const{
    return m_private_ip_allocation_method_isSet;
}

bool OAIPrivateLinkServiceIpConfigurationProperties::is_private_ip_allocation_method_Valid() const{
    return m_private_ip_allocation_method_isValid;
}

QString OAIPrivateLinkServiceIpConfigurationProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIPrivateLinkServiceIpConfigurationProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIPrivateLinkServiceIpConfigurationProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIPrivateLinkServiceIpConfigurationProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIPrivateLinkServiceIpConfigurationProperties_subnet OAIPrivateLinkServiceIpConfigurationProperties::getSubnet() const {
    return m_subnet;
}
void OAIPrivateLinkServiceIpConfigurationProperties::setSubnet(const OAIPrivateLinkServiceIpConfigurationProperties_subnet &subnet) {
    m_subnet = subnet;
    m_subnet_isSet = true;
}

bool OAIPrivateLinkServiceIpConfigurationProperties::is_subnet_Set() const{
    return m_subnet_isSet;
}

bool OAIPrivateLinkServiceIpConfigurationProperties::is_subnet_Valid() const{
    return m_subnet_isValid;
}

bool OAIPrivateLinkServiceIpConfigurationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_ip_address_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_ip_allocation_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateLinkServiceIpConfigurationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
