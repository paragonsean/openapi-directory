/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AutoApprovedPrivateLinkServicesResult;
import org.openapitools.client.model.CheckPrivateLinkServiceVisibilityRequest;
import org.openapitools.client.model.PrivateEndpointConnection;
import org.openapitools.client.model.PrivateLinkService;
import org.openapitools.client.model.PrivateLinkServiceListResult;
import org.openapitools.client.model.PrivateLinkServiceVisibility;
import org.openapitools.client.model.PrivateLinkServicesListBySubscriptionDefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PrivateLinkServicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PrivateLinkServicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PrivateLinkServicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for privateLinkServicesCheckPrivateLinkServiceVisibility
     * @param location The location of the domain name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The request body of CheckPrivateLinkService API call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns whether the subscription is visible to private link service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkServicesCheckPrivateLinkServiceVisibilityCall(String location, String apiVersion, String subscriptionId, CheckPrivateLinkServiceVisibilityRequest parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/checkPrivateLinkServiceVisibility"
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateLinkServicesCheckPrivateLinkServiceVisibilityValidateBeforeCall(String location, String apiVersion, String subscriptionId, CheckPrivateLinkServiceVisibilityRequest parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling privateLinkServicesCheckPrivateLinkServiceVisibility(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateLinkServicesCheckPrivateLinkServiceVisibility(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateLinkServicesCheckPrivateLinkServiceVisibility(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling privateLinkServicesCheckPrivateLinkServiceVisibility(Async)");
        }

        return privateLinkServicesCheckPrivateLinkServiceVisibilityCall(location, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Checks whether the subscription is visible to private link service.
     * @param location The location of the domain name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The request body of CheckPrivateLinkService API call. (required)
     * @return PrivateLinkServiceVisibility
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns whether the subscription is visible to private link service. </td><td>  -  </td></tr>
     </table>
     */
    public PrivateLinkServiceVisibility privateLinkServicesCheckPrivateLinkServiceVisibility(String location, String apiVersion, String subscriptionId, CheckPrivateLinkServiceVisibilityRequest parameters) throws ApiException {
        ApiResponse<PrivateLinkServiceVisibility> localVarResp = privateLinkServicesCheckPrivateLinkServiceVisibilityWithHttpInfo(location, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Checks whether the subscription is visible to private link service.
     * @param location The location of the domain name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The request body of CheckPrivateLinkService API call. (required)
     * @return ApiResponse&lt;PrivateLinkServiceVisibility&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns whether the subscription is visible to private link service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateLinkServiceVisibility> privateLinkServicesCheckPrivateLinkServiceVisibilityWithHttpInfo(String location, String apiVersion, String subscriptionId, CheckPrivateLinkServiceVisibilityRequest parameters) throws ApiException {
        okhttp3.Call localVarCall = privateLinkServicesCheckPrivateLinkServiceVisibilityValidateBeforeCall(location, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<PrivateLinkServiceVisibility>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Checks whether the subscription is visible to private link service.
     * @param location The location of the domain name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The request body of CheckPrivateLinkService API call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns whether the subscription is visible to private link service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkServicesCheckPrivateLinkServiceVisibilityAsync(String location, String apiVersion, String subscriptionId, CheckPrivateLinkServiceVisibilityRequest parameters, final ApiCallback<PrivateLinkServiceVisibility> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateLinkServicesCheckPrivateLinkServiceVisibilityValidateBeforeCall(location, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<PrivateLinkServiceVisibility>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroup
     * @param location The location of the domain name. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The request body of CheckPrivateLinkService API call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns whether the subscription is visible to private link service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupCall(String location, String resourceGroupName, String apiVersion, String subscriptionId, CheckPrivateLinkServiceVisibilityRequest parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/checkPrivateLinkServiceVisibility"
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupValidateBeforeCall(String location, String resourceGroupName, String apiVersion, String subscriptionId, CheckPrivateLinkServiceVisibilityRequest parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroup(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroup(Async)");
        }

        return privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupCall(location, resourceGroupName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Checks whether the subscription is visible to private link service in the specified resource group.
     * @param location The location of the domain name. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The request body of CheckPrivateLinkService API call. (required)
     * @return PrivateLinkServiceVisibility
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns whether the subscription is visible to private link service. </td><td>  -  </td></tr>
     </table>
     */
    public PrivateLinkServiceVisibility privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroup(String location, String resourceGroupName, String apiVersion, String subscriptionId, CheckPrivateLinkServiceVisibilityRequest parameters) throws ApiException {
        ApiResponse<PrivateLinkServiceVisibility> localVarResp = privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupWithHttpInfo(location, resourceGroupName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Checks whether the subscription is visible to private link service in the specified resource group.
     * @param location The location of the domain name. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The request body of CheckPrivateLinkService API call. (required)
     * @return ApiResponse&lt;PrivateLinkServiceVisibility&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns whether the subscription is visible to private link service. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateLinkServiceVisibility> privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupWithHttpInfo(String location, String resourceGroupName, String apiVersion, String subscriptionId, CheckPrivateLinkServiceVisibilityRequest parameters) throws ApiException {
        okhttp3.Call localVarCall = privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupValidateBeforeCall(location, resourceGroupName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<PrivateLinkServiceVisibility>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Checks whether the subscription is visible to private link service in the specified resource group.
     * @param location The location of the domain name. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters The request body of CheckPrivateLinkService API call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns whether the subscription is visible to private link service. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupAsync(String location, String resourceGroupName, String apiVersion, String subscriptionId, CheckPrivateLinkServiceVisibilityRequest parameters, final ApiCallback<PrivateLinkServiceVisibility> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupValidateBeforeCall(location, resourceGroupName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<PrivateLinkServiceVisibility>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateLinkServicesDelete
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the private link service. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkServicesDeleteCall(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateLinkServices/{serviceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateLinkServicesDeleteValidateBeforeCall(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateLinkServicesDelete(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling privateLinkServicesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateLinkServicesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateLinkServicesDelete(Async)");
        }

        return privateLinkServicesDeleteCall(resourceGroupName, serviceName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the specified private link service.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the private link service. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public void privateLinkServicesDelete(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId) throws ApiException {
        privateLinkServicesDeleteWithHttpInfo(resourceGroupName, serviceName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the specified private link service.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the private link service. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> privateLinkServicesDeleteWithHttpInfo(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = privateLinkServicesDeleteValidateBeforeCall(resourceGroupName, serviceName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified private link service.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the private link service. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkServicesDeleteAsync(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateLinkServicesDeleteValidateBeforeCall(resourceGroupName, serviceName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateLinkServicesDeletePrivateEndpointConnection
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the private link service. (required)
     * @param peConnectionName The name of the private end point connection. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkServicesDeletePrivateEndpointConnectionCall(String resourceGroupName, String serviceName, String peConnectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateLinkServices/{serviceName}/privateEndpointConnections/{peConnectionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "peConnectionName" + "}", localVarApiClient.escapeString(peConnectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateLinkServicesDeletePrivateEndpointConnectionValidateBeforeCall(String resourceGroupName, String serviceName, String peConnectionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateLinkServicesDeletePrivateEndpointConnection(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling privateLinkServicesDeletePrivateEndpointConnection(Async)");
        }

        // verify the required parameter 'peConnectionName' is set
        if (peConnectionName == null) {
            throw new ApiException("Missing the required parameter 'peConnectionName' when calling privateLinkServicesDeletePrivateEndpointConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateLinkServicesDeletePrivateEndpointConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateLinkServicesDeletePrivateEndpointConnection(Async)");
        }

        return privateLinkServicesDeletePrivateEndpointConnectionCall(resourceGroupName, serviceName, peConnectionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Delete private end point connection for a private link service in a subscription.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the private link service. (required)
     * @param peConnectionName The name of the private end point connection. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public void privateLinkServicesDeletePrivateEndpointConnection(String resourceGroupName, String serviceName, String peConnectionName, String apiVersion, String subscriptionId) throws ApiException {
        privateLinkServicesDeletePrivateEndpointConnectionWithHttpInfo(resourceGroupName, serviceName, peConnectionName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Delete private end point connection for a private link service in a subscription.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the private link service. (required)
     * @param peConnectionName The name of the private end point connection. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> privateLinkServicesDeletePrivateEndpointConnectionWithHttpInfo(String resourceGroupName, String serviceName, String peConnectionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = privateLinkServicesDeletePrivateEndpointConnectionValidateBeforeCall(resourceGroupName, serviceName, peConnectionName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete private end point connection for a private link service in a subscription.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the private link service. (required)
     * @param peConnectionName The name of the private end point connection. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkServicesDeletePrivateEndpointConnectionAsync(String resourceGroupName, String serviceName, String peConnectionName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateLinkServicesDeletePrivateEndpointConnectionValidateBeforeCall(resourceGroupName, serviceName, peConnectionName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateLinkServicesGet
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the private link service. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $expand Expands referenced resources. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting PrivateLinkService resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkServicesGetCall(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateLinkServices/{serviceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateLinkServicesGetValidateBeforeCall(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateLinkServicesGet(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling privateLinkServicesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateLinkServicesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateLinkServicesGet(Async)");
        }

        return privateLinkServicesGetCall(resourceGroupName, serviceName, apiVersion, subscriptionId, $expand, _callback);

    }

    /**
     * 
     * Gets the specified private link service by resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the private link service. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $expand Expands referenced resources. (optional)
     * @return PrivateLinkService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting PrivateLinkService resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public PrivateLinkService privateLinkServicesGet(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String $expand) throws ApiException {
        ApiResponse<PrivateLinkService> localVarResp = privateLinkServicesGetWithHttpInfo(resourceGroupName, serviceName, apiVersion, subscriptionId, $expand);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the specified private link service by resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the private link service. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $expand Expands referenced resources. (optional)
     * @return ApiResponse&lt;PrivateLinkService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting PrivateLinkService resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateLinkService> privateLinkServicesGetWithHttpInfo(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String $expand) throws ApiException {
        okhttp3.Call localVarCall = privateLinkServicesGetValidateBeforeCall(resourceGroupName, serviceName, apiVersion, subscriptionId, $expand, null);
        Type localVarReturnType = new TypeToken<PrivateLinkService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the specified private link service by resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the private link service. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param $expand Expands referenced resources. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the resulting PrivateLinkService resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkServicesGetAsync(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String $expand, final ApiCallback<PrivateLinkService> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateLinkServicesGetValidateBeforeCall(resourceGroupName, serviceName, apiVersion, subscriptionId, $expand, _callback);
        Type localVarReturnType = new TypeToken<PrivateLinkService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateLinkServicesList
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of privateLinkService resources. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkServicesListCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateLinkServices"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateLinkServicesListValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateLinkServicesList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateLinkServicesList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateLinkServicesList(Async)");
        }

        return privateLinkServicesListCall(resourceGroupName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all private link services in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return PrivateLinkServiceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of privateLinkService resources. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public PrivateLinkServiceListResult privateLinkServicesList(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<PrivateLinkServiceListResult> localVarResp = privateLinkServicesListWithHttpInfo(resourceGroupName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all private link services in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;PrivateLinkServiceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of privateLinkService resources. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateLinkServiceListResult> privateLinkServicesListWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = privateLinkServicesListValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<PrivateLinkServiceListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all private link services in a resource group.
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of privateLinkService resources. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkServicesListAsync(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback<PrivateLinkServiceListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateLinkServicesListValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<PrivateLinkServiceListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateLinkServicesListAutoApprovedPrivateLinkServices
     * @param location The location of the domain name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkServicesListAutoApprovedPrivateLinkServicesCall(String location, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/locations/{location}/autoApprovedPrivateLinkServices"
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateLinkServicesListAutoApprovedPrivateLinkServicesValidateBeforeCall(String location, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling privateLinkServicesListAutoApprovedPrivateLinkServices(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateLinkServicesListAutoApprovedPrivateLinkServices(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateLinkServicesListAutoApprovedPrivateLinkServices(Async)");
        }

        return privateLinkServicesListAutoApprovedPrivateLinkServicesCall(location, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region.
     * @param location The location of the domain name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return AutoApprovedPrivateLinkServicesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region. </td><td>  -  </td></tr>
     </table>
     */
    public AutoApprovedPrivateLinkServicesResult privateLinkServicesListAutoApprovedPrivateLinkServices(String location, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AutoApprovedPrivateLinkServicesResult> localVarResp = privateLinkServicesListAutoApprovedPrivateLinkServicesWithHttpInfo(location, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region.
     * @param location The location of the domain name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;AutoApprovedPrivateLinkServicesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutoApprovedPrivateLinkServicesResult> privateLinkServicesListAutoApprovedPrivateLinkServicesWithHttpInfo(String location, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = privateLinkServicesListAutoApprovedPrivateLinkServicesValidateBeforeCall(location, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AutoApprovedPrivateLinkServicesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region.
     * @param location The location of the domain name. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkServicesListAutoApprovedPrivateLinkServicesAsync(String location, String apiVersion, String subscriptionId, final ApiCallback<AutoApprovedPrivateLinkServicesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateLinkServicesListAutoApprovedPrivateLinkServicesValidateBeforeCall(location, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AutoApprovedPrivateLinkServicesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroup
     * @param location The location of the domain name. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupCall(String location, String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/locations/{location}/autoApprovedPrivateLinkServices"
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupValidateBeforeCall(String location, String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroup(Async)");
        }

        return privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupCall(location, resourceGroupName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region.
     * @param location The location of the domain name. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return AutoApprovedPrivateLinkServicesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region. </td><td>  -  </td></tr>
     </table>
     */
    public AutoApprovedPrivateLinkServicesResult privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroup(String location, String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AutoApprovedPrivateLinkServicesResult> localVarResp = privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupWithHttpInfo(location, resourceGroupName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region.
     * @param location The location of the domain name. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;AutoApprovedPrivateLinkServicesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutoApprovedPrivateLinkServicesResult> privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupWithHttpInfo(String location, String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupValidateBeforeCall(location, resourceGroupName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AutoApprovedPrivateLinkServicesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region.
     * @param location The location of the domain name. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. Returns all of the private link service ids that can be linked to a Private Endpoint with auto approved in this subscription in this region. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupAsync(String location, String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback<AutoApprovedPrivateLinkServicesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupValidateBeforeCall(location, resourceGroupName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AutoApprovedPrivateLinkServicesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateLinkServicesListBySubscription
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of PrivateLinkService resources. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkServicesListBySubscriptionCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/privateLinkServices"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateLinkServicesListBySubscriptionValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateLinkServicesListBySubscription(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateLinkServicesListBySubscription(Async)");
        }

        return privateLinkServicesListBySubscriptionCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all private link service in a subscription.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return PrivateLinkServiceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of PrivateLinkService resources. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public PrivateLinkServiceListResult privateLinkServicesListBySubscription(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<PrivateLinkServiceListResult> localVarResp = privateLinkServicesListBySubscriptionWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all private link service in a subscription.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;PrivateLinkServiceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of PrivateLinkService resources. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateLinkServiceListResult> privateLinkServicesListBySubscriptionWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = privateLinkServicesListBySubscriptionValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<PrivateLinkServiceListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all private link service in a subscription.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of PrivateLinkService resources. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkServicesListBySubscriptionAsync(String apiVersion, String subscriptionId, final ApiCallback<PrivateLinkServiceListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateLinkServicesListBySubscriptionValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<PrivateLinkServiceListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateLinkServicesUpdatePrivateEndpointConnection
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the private link service. (required)
     * @param peConnectionName The name of the private end point connection. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to approve or reject the private end point connection. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting PrivateEndpointConnection resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkServicesUpdatePrivateEndpointConnectionCall(String resourceGroupName, String serviceName, String peConnectionName, String apiVersion, String subscriptionId, PrivateEndpointConnection parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/privateLinkServices/{serviceName}/privateEndpointConnections/{peConnectionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "peConnectionName" + "}", localVarApiClient.escapeString(peConnectionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateLinkServicesUpdatePrivateEndpointConnectionValidateBeforeCall(String resourceGroupName, String serviceName, String peConnectionName, String apiVersion, String subscriptionId, PrivateEndpointConnection parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateLinkServicesUpdatePrivateEndpointConnection(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling privateLinkServicesUpdatePrivateEndpointConnection(Async)");
        }

        // verify the required parameter 'peConnectionName' is set
        if (peConnectionName == null) {
            throw new ApiException("Missing the required parameter 'peConnectionName' when calling privateLinkServicesUpdatePrivateEndpointConnection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateLinkServicesUpdatePrivateEndpointConnection(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateLinkServicesUpdatePrivateEndpointConnection(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling privateLinkServicesUpdatePrivateEndpointConnection(Async)");
        }

        return privateLinkServicesUpdatePrivateEndpointConnectionCall(resourceGroupName, serviceName, peConnectionName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Approve or reject private end point connection for a private link service in a subscription.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the private link service. (required)
     * @param peConnectionName The name of the private end point connection. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to approve or reject the private end point connection. (required)
     * @return PrivateEndpointConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting PrivateEndpointConnection resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public PrivateEndpointConnection privateLinkServicesUpdatePrivateEndpointConnection(String resourceGroupName, String serviceName, String peConnectionName, String apiVersion, String subscriptionId, PrivateEndpointConnection parameters) throws ApiException {
        ApiResponse<PrivateEndpointConnection> localVarResp = privateLinkServicesUpdatePrivateEndpointConnectionWithHttpInfo(resourceGroupName, serviceName, peConnectionName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Approve or reject private end point connection for a private link service in a subscription.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the private link service. (required)
     * @param peConnectionName The name of the private end point connection. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to approve or reject the private end point connection. (required)
     * @return ApiResponse&lt;PrivateEndpointConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting PrivateEndpointConnection resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateEndpointConnection> privateLinkServicesUpdatePrivateEndpointConnectionWithHttpInfo(String resourceGroupName, String serviceName, String peConnectionName, String apiVersion, String subscriptionId, PrivateEndpointConnection parameters) throws ApiException {
        okhttp3.Call localVarCall = privateLinkServicesUpdatePrivateEndpointConnectionValidateBeforeCall(resourceGroupName, serviceName, peConnectionName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<PrivateEndpointConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Approve or reject private end point connection for a private link service in a subscription.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the private link service. (required)
     * @param peConnectionName The name of the private end point connection. (required)
     * @param apiVersion Client API version. (required)
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param parameters Parameters supplied to approve or reject the private end point connection. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting PrivateEndpointConnection resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkServicesUpdatePrivateEndpointConnectionAsync(String resourceGroupName, String serviceName, String peConnectionName, String apiVersion, String subscriptionId, PrivateEndpointConnection parameters, final ApiCallback<PrivateEndpointConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateLinkServicesUpdatePrivateEndpointConnectionValidateBeforeCall(resourceGroupName, serviceName, peConnectionName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<PrivateEndpointConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
