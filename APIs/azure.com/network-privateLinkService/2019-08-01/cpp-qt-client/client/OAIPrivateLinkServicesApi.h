/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPrivateLinkServicesApi_H
#define OAI_OAIPrivateLinkServicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAutoApprovedPrivateLinkServicesResult.h"
#include "OAICheckPrivateLinkServiceVisibilityRequest.h"
#include "OAIPrivateEndpointConnection.h"
#include "OAIPrivateLinkService.h"
#include "OAIPrivateLinkServiceListResult.h"
#include "OAIPrivateLinkServiceVisibility.h"
#include "OAIPrivateLinkServices_ListBySubscription_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPrivateLinkServicesApi : public QObject {
    Q_OBJECT

public:
    OAIPrivateLinkServicesApi(const int timeOut = 0);
    ~OAIPrivateLinkServicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  location QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAICheckPrivateLinkServiceVisibilityRequest [required]
    */
    virtual void privateLinkServicesCheckPrivateLinkServiceVisibility(const QString &location, const QString &api_version, const QString &subscription_id, const OAICheckPrivateLinkServiceVisibilityRequest &parameters);

    /**
    * @param[in]  location QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAICheckPrivateLinkServiceVisibilityRequest [required]
    */
    virtual void privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroup(const QString &location, const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const OAICheckPrivateLinkServiceVisibilityRequest &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void privateLinkServicesDelete(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  pe_connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void privateLinkServicesDeletePrivateEndpointConnection(const QString &resource_group_name, const QString &service_name, const QString &pe_connection_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void privateLinkServicesGet(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void privateLinkServicesList(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  location QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void privateLinkServicesListAutoApprovedPrivateLinkServices(const QString &location, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  location QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroup(const QString &location, const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void privateLinkServicesListBySubscription(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  pe_connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIPrivateEndpointConnection [required]
    */
    virtual void privateLinkServicesUpdatePrivateEndpointConnection(const QString &resource_group_name, const QString &service_name, const QString &pe_connection_name, const QString &api_version, const QString &subscription_id, const OAIPrivateEndpointConnection &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void privateLinkServicesCheckPrivateLinkServiceVisibilityCallback(OAIHttpRequestWorker *worker);
    void privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void privateLinkServicesDeleteCallback(OAIHttpRequestWorker *worker);
    void privateLinkServicesDeletePrivateEndpointConnectionCallback(OAIHttpRequestWorker *worker);
    void privateLinkServicesGetCallback(OAIHttpRequestWorker *worker);
    void privateLinkServicesListCallback(OAIHttpRequestWorker *worker);
    void privateLinkServicesListAutoApprovedPrivateLinkServicesCallback(OAIHttpRequestWorker *worker);
    void privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void privateLinkServicesListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void privateLinkServicesUpdatePrivateEndpointConnectionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void privateLinkServicesCheckPrivateLinkServiceVisibilitySignal(OAIPrivateLinkServiceVisibility summary);
    void privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupSignal(OAIPrivateLinkServiceVisibility summary);
    void privateLinkServicesDeleteSignal();
    void privateLinkServicesDeletePrivateEndpointConnectionSignal();
    void privateLinkServicesGetSignal(OAIPrivateLinkService summary);
    void privateLinkServicesListSignal(OAIPrivateLinkServiceListResult summary);
    void privateLinkServicesListAutoApprovedPrivateLinkServicesSignal(OAIAutoApprovedPrivateLinkServicesResult summary);
    void privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupSignal(OAIAutoApprovedPrivateLinkServicesResult summary);
    void privateLinkServicesListBySubscriptionSignal(OAIPrivateLinkServiceListResult summary);
    void privateLinkServicesUpdatePrivateEndpointConnectionSignal(OAIPrivateEndpointConnection summary);


    void privateLinkServicesCheckPrivateLinkServiceVisibilitySignalFull(OAIHttpRequestWorker *worker, OAIPrivateLinkServiceVisibility summary);
    void privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIPrivateLinkServiceVisibility summary);
    void privateLinkServicesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void privateLinkServicesDeletePrivateEndpointConnectionSignalFull(OAIHttpRequestWorker *worker);
    void privateLinkServicesGetSignalFull(OAIHttpRequestWorker *worker, OAIPrivateLinkService summary);
    void privateLinkServicesListSignalFull(OAIHttpRequestWorker *worker, OAIPrivateLinkServiceListResult summary);
    void privateLinkServicesListAutoApprovedPrivateLinkServicesSignalFull(OAIHttpRequestWorker *worker, OAIAutoApprovedPrivateLinkServicesResult summary);
    void privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIAutoApprovedPrivateLinkServicesResult summary);
    void privateLinkServicesListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIPrivateLinkServiceListResult summary);
    void privateLinkServicesUpdatePrivateEndpointConnectionSignalFull(OAIHttpRequestWorker *worker, OAIPrivateEndpointConnection summary);

    Q_DECL_DEPRECATED_X("Use privateLinkServicesCheckPrivateLinkServiceVisibilitySignalError() instead")
    void privateLinkServicesCheckPrivateLinkServiceVisibilitySignalE(OAIPrivateLinkServiceVisibility summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkServicesCheckPrivateLinkServiceVisibilitySignalError(OAIPrivateLinkServiceVisibility summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupSignalError() instead")
    void privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupSignalE(OAIPrivateLinkServiceVisibility summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupSignalError(OAIPrivateLinkServiceVisibility summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkServicesDeleteSignalError() instead")
    void privateLinkServicesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkServicesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkServicesDeletePrivateEndpointConnectionSignalError() instead")
    void privateLinkServicesDeletePrivateEndpointConnectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkServicesDeletePrivateEndpointConnectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkServicesGetSignalError() instead")
    void privateLinkServicesGetSignalE(OAIPrivateLinkService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkServicesGetSignalError(OAIPrivateLinkService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkServicesListSignalError() instead")
    void privateLinkServicesListSignalE(OAIPrivateLinkServiceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkServicesListSignalError(OAIPrivateLinkServiceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkServicesListAutoApprovedPrivateLinkServicesSignalError() instead")
    void privateLinkServicesListAutoApprovedPrivateLinkServicesSignalE(OAIAutoApprovedPrivateLinkServicesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkServicesListAutoApprovedPrivateLinkServicesSignalError(OAIAutoApprovedPrivateLinkServicesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupSignalError() instead")
    void privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupSignalE(OAIAutoApprovedPrivateLinkServicesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupSignalError(OAIAutoApprovedPrivateLinkServicesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkServicesListBySubscriptionSignalError() instead")
    void privateLinkServicesListBySubscriptionSignalE(OAIPrivateLinkServiceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkServicesListBySubscriptionSignalError(OAIPrivateLinkServiceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkServicesUpdatePrivateEndpointConnectionSignalError() instead")
    void privateLinkServicesUpdatePrivateEndpointConnectionSignalE(OAIPrivateEndpointConnection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkServicesUpdatePrivateEndpointConnectionSignalError(OAIPrivateEndpointConnection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use privateLinkServicesCheckPrivateLinkServiceVisibilitySignalErrorFull() instead")
    void privateLinkServicesCheckPrivateLinkServiceVisibilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkServicesCheckPrivateLinkServiceVisibilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupSignalErrorFull() instead")
    void privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkServicesCheckPrivateLinkServiceVisibilityByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkServicesDeleteSignalErrorFull() instead")
    void privateLinkServicesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkServicesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkServicesDeletePrivateEndpointConnectionSignalErrorFull() instead")
    void privateLinkServicesDeletePrivateEndpointConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkServicesDeletePrivateEndpointConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkServicesGetSignalErrorFull() instead")
    void privateLinkServicesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkServicesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkServicesListSignalErrorFull() instead")
    void privateLinkServicesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkServicesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkServicesListAutoApprovedPrivateLinkServicesSignalErrorFull() instead")
    void privateLinkServicesListAutoApprovedPrivateLinkServicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkServicesListAutoApprovedPrivateLinkServicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupSignalErrorFull() instead")
    void privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkServicesListAutoApprovedPrivateLinkServicesByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkServicesListBySubscriptionSignalErrorFull() instead")
    void privateLinkServicesListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkServicesListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkServicesUpdatePrivateEndpointConnectionSignalErrorFull() instead")
    void privateLinkServicesUpdatePrivateEndpointConnectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkServicesUpdatePrivateEndpointConnectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
