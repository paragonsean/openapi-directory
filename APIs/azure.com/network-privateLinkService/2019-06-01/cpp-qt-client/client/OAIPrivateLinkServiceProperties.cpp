/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateLinkServiceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateLinkServiceProperties::OAIPrivateLinkServiceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateLinkServiceProperties::OAIPrivateLinkServiceProperties() {
    this->initializeModel();
}

OAIPrivateLinkServiceProperties::~OAIPrivateLinkServiceProperties() {}

void OAIPrivateLinkServiceProperties::initializeModel() {

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_auto_approval_isSet = false;
    m_auto_approval_isValid = false;

    m_fqdns_isSet = false;
    m_fqdns_isValid = false;

    m_ip_configurations_isSet = false;
    m_ip_configurations_isValid = false;

    m_load_balancer_frontend_ip_configurations_isSet = false;
    m_load_balancer_frontend_ip_configurations_isValid = false;

    m_network_interfaces_isSet = false;
    m_network_interfaces_isValid = false;

    m_private_endpoint_connections_isSet = false;
    m_private_endpoint_connections_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIPrivateLinkServiceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateLinkServiceProperties::fromJsonObject(QJsonObject json) {

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("alias")]);
    m_alias_isSet = !json[QString("alias")].isNull() && m_alias_isValid;

    m_auto_approval_isValid = ::OpenAPI::fromJsonValue(m_auto_approval, json[QString("autoApproval")]);
    m_auto_approval_isSet = !json[QString("autoApproval")].isNull() && m_auto_approval_isValid;

    m_fqdns_isValid = ::OpenAPI::fromJsonValue(m_fqdns, json[QString("fqdns")]);
    m_fqdns_isSet = !json[QString("fqdns")].isNull() && m_fqdns_isValid;

    m_ip_configurations_isValid = ::OpenAPI::fromJsonValue(m_ip_configurations, json[QString("ipConfigurations")]);
    m_ip_configurations_isSet = !json[QString("ipConfigurations")].isNull() && m_ip_configurations_isValid;

    m_load_balancer_frontend_ip_configurations_isValid = ::OpenAPI::fromJsonValue(m_load_balancer_frontend_ip_configurations, json[QString("loadBalancerFrontendIpConfigurations")]);
    m_load_balancer_frontend_ip_configurations_isSet = !json[QString("loadBalancerFrontendIpConfigurations")].isNull() && m_load_balancer_frontend_ip_configurations_isValid;

    m_network_interfaces_isValid = ::OpenAPI::fromJsonValue(m_network_interfaces, json[QString("networkInterfaces")]);
    m_network_interfaces_isSet = !json[QString("networkInterfaces")].isNull() && m_network_interfaces_isValid;

    m_private_endpoint_connections_isValid = ::OpenAPI::fromJsonValue(m_private_endpoint_connections, json[QString("privateEndpointConnections")]);
    m_private_endpoint_connections_isSet = !json[QString("privateEndpointConnections")].isNull() && m_private_endpoint_connections_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIPrivateLinkServiceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateLinkServiceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_isSet) {
        obj.insert(QString("alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_auto_approval.isSet()) {
        obj.insert(QString("autoApproval"), ::OpenAPI::toJsonValue(m_auto_approval));
    }
    if (m_fqdns.size() > 0) {
        obj.insert(QString("fqdns"), ::OpenAPI::toJsonValue(m_fqdns));
    }
    if (m_ip_configurations.size() > 0) {
        obj.insert(QString("ipConfigurations"), ::OpenAPI::toJsonValue(m_ip_configurations));
    }
    if (m_load_balancer_frontend_ip_configurations.size() > 0) {
        obj.insert(QString("loadBalancerFrontendIpConfigurations"), ::OpenAPI::toJsonValue(m_load_balancer_frontend_ip_configurations));
    }
    if (m_network_interfaces.size() > 0) {
        obj.insert(QString("networkInterfaces"), ::OpenAPI::toJsonValue(m_network_interfaces));
    }
    if (m_private_endpoint_connections.size() > 0) {
        obj.insert(QString("privateEndpointConnections"), ::OpenAPI::toJsonValue(m_private_endpoint_connections));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_visibility.isSet()) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QString OAIPrivateLinkServiceProperties::getAlias() const {
    return m_alias;
}
void OAIPrivateLinkServiceProperties::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIPrivateLinkServiceProperties::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIPrivateLinkServiceProperties::is_alias_Valid() const{
    return m_alias_isValid;
}

OAIResourceSet OAIPrivateLinkServiceProperties::getAutoApproval() const {
    return m_auto_approval;
}
void OAIPrivateLinkServiceProperties::setAutoApproval(const OAIResourceSet &auto_approval) {
    m_auto_approval = auto_approval;
    m_auto_approval_isSet = true;
}

bool OAIPrivateLinkServiceProperties::is_auto_approval_Set() const{
    return m_auto_approval_isSet;
}

bool OAIPrivateLinkServiceProperties::is_auto_approval_Valid() const{
    return m_auto_approval_isValid;
}

QList<QString> OAIPrivateLinkServiceProperties::getFqdns() const {
    return m_fqdns;
}
void OAIPrivateLinkServiceProperties::setFqdns(const QList<QString> &fqdns) {
    m_fqdns = fqdns;
    m_fqdns_isSet = true;
}

bool OAIPrivateLinkServiceProperties::is_fqdns_Set() const{
    return m_fqdns_isSet;
}

bool OAIPrivateLinkServiceProperties::is_fqdns_Valid() const{
    return m_fqdns_isValid;
}

QList<OAIPrivateLinkServiceIpConfiguration> OAIPrivateLinkServiceProperties::getIpConfigurations() const {
    return m_ip_configurations;
}
void OAIPrivateLinkServiceProperties::setIpConfigurations(const QList<OAIPrivateLinkServiceIpConfiguration> &ip_configurations) {
    m_ip_configurations = ip_configurations;
    m_ip_configurations_isSet = true;
}

bool OAIPrivateLinkServiceProperties::is_ip_configurations_Set() const{
    return m_ip_configurations_isSet;
}

bool OAIPrivateLinkServiceProperties::is_ip_configurations_Valid() const{
    return m_ip_configurations_isValid;
}

QList<OAIPrivateLinkServiceProperties_loadBalancerFrontendIpConfigurations_inner> OAIPrivateLinkServiceProperties::getLoadBalancerFrontendIpConfigurations() const {
    return m_load_balancer_frontend_ip_configurations;
}
void OAIPrivateLinkServiceProperties::setLoadBalancerFrontendIpConfigurations(const QList<OAIPrivateLinkServiceProperties_loadBalancerFrontendIpConfigurations_inner> &load_balancer_frontend_ip_configurations) {
    m_load_balancer_frontend_ip_configurations = load_balancer_frontend_ip_configurations;
    m_load_balancer_frontend_ip_configurations_isSet = true;
}

bool OAIPrivateLinkServiceProperties::is_load_balancer_frontend_ip_configurations_Set() const{
    return m_load_balancer_frontend_ip_configurations_isSet;
}

bool OAIPrivateLinkServiceProperties::is_load_balancer_frontend_ip_configurations_Valid() const{
    return m_load_balancer_frontend_ip_configurations_isValid;
}

QList<OAIPrivateLinkServiceProperties_networkInterfaces_inner> OAIPrivateLinkServiceProperties::getNetworkInterfaces() const {
    return m_network_interfaces;
}
void OAIPrivateLinkServiceProperties::setNetworkInterfaces(const QList<OAIPrivateLinkServiceProperties_networkInterfaces_inner> &network_interfaces) {
    m_network_interfaces = network_interfaces;
    m_network_interfaces_isSet = true;
}

bool OAIPrivateLinkServiceProperties::is_network_interfaces_Set() const{
    return m_network_interfaces_isSet;
}

bool OAIPrivateLinkServiceProperties::is_network_interfaces_Valid() const{
    return m_network_interfaces_isValid;
}

QList<OAIPrivateEndpointConnection> OAIPrivateLinkServiceProperties::getPrivateEndpointConnections() const {
    return m_private_endpoint_connections;
}
void OAIPrivateLinkServiceProperties::setPrivateEndpointConnections(const QList<OAIPrivateEndpointConnection> &private_endpoint_connections) {
    m_private_endpoint_connections = private_endpoint_connections;
    m_private_endpoint_connections_isSet = true;
}

bool OAIPrivateLinkServiceProperties::is_private_endpoint_connections_Set() const{
    return m_private_endpoint_connections_isSet;
}

bool OAIPrivateLinkServiceProperties::is_private_endpoint_connections_Valid() const{
    return m_private_endpoint_connections_isValid;
}

QString OAIPrivateLinkServiceProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIPrivateLinkServiceProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIPrivateLinkServiceProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIPrivateLinkServiceProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIResourceSet OAIPrivateLinkServiceProperties::getVisibility() const {
    return m_visibility;
}
void OAIPrivateLinkServiceProperties::setVisibility(const OAIResourceSet &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIPrivateLinkServiceProperties::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIPrivateLinkServiceProperties::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIPrivateLinkServiceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_approval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fqdns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_load_balancer_frontend_ip_configurations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interfaces.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_endpoint_connections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateLinkServiceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
