# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.private_link_service_ip_configuration_properties_subnet import PrivateLinkServiceIpConfigurationPropertiesSubnet
from openapi_server import util


class PrivateLinkServiceIpConfigurationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, primary: bool=None, private_ip_address: str=None, private_ip_address_version: str=None, private_ip_allocation_method: str=None, provisioning_state: str=None, subnet: PrivateLinkServiceIpConfigurationPropertiesSubnet=None):
        """PrivateLinkServiceIpConfigurationProperties - a model defined in OpenAPI

        :param primary: The primary of this PrivateLinkServiceIpConfigurationProperties.
        :param private_ip_address: The private_ip_address of this PrivateLinkServiceIpConfigurationProperties.
        :param private_ip_address_version: The private_ip_address_version of this PrivateLinkServiceIpConfigurationProperties.
        :param private_ip_allocation_method: The private_ip_allocation_method of this PrivateLinkServiceIpConfigurationProperties.
        :param provisioning_state: The provisioning_state of this PrivateLinkServiceIpConfigurationProperties.
        :param subnet: The subnet of this PrivateLinkServiceIpConfigurationProperties.
        """
        self.openapi_types = {
            'primary': bool,
            'private_ip_address': str,
            'private_ip_address_version': str,
            'private_ip_allocation_method': str,
            'provisioning_state': str,
            'subnet': PrivateLinkServiceIpConfigurationPropertiesSubnet
        }

        self.attribute_map = {
            'primary': 'primary',
            'private_ip_address': 'privateIPAddress',
            'private_ip_address_version': 'privateIPAddressVersion',
            'private_ip_allocation_method': 'privateIPAllocationMethod',
            'provisioning_state': 'provisioningState',
            'subnet': 'subnet'
        }

        self._primary = primary
        self._private_ip_address = private_ip_address
        self._private_ip_address_version = private_ip_address_version
        self._private_ip_allocation_method = private_ip_allocation_method
        self._provisioning_state = provisioning_state
        self._subnet = subnet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateLinkServiceIpConfigurationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateLinkServiceIpConfigurationProperties of this PrivateLinkServiceIpConfigurationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def primary(self):
        """Gets the primary of this PrivateLinkServiceIpConfigurationProperties.

        Whether the ip configuration is primary or not.

        :return: The primary of this PrivateLinkServiceIpConfigurationProperties.
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this PrivateLinkServiceIpConfigurationProperties.

        Whether the ip configuration is primary or not.

        :param primary: The primary of this PrivateLinkServiceIpConfigurationProperties.
        :type primary: bool
        """

        self._primary = primary

    @property
    def private_ip_address(self):
        """Gets the private_ip_address of this PrivateLinkServiceIpConfigurationProperties.

        The private IP address of the IP configuration.

        :return: The private_ip_address of this PrivateLinkServiceIpConfigurationProperties.
        :rtype: str
        """
        return self._private_ip_address

    @private_ip_address.setter
    def private_ip_address(self, private_ip_address):
        """Sets the private_ip_address of this PrivateLinkServiceIpConfigurationProperties.

        The private IP address of the IP configuration.

        :param private_ip_address: The private_ip_address of this PrivateLinkServiceIpConfigurationProperties.
        :type private_ip_address: str
        """

        self._private_ip_address = private_ip_address

    @property
    def private_ip_address_version(self):
        """Gets the private_ip_address_version of this PrivateLinkServiceIpConfigurationProperties.

        IP address version.

        :return: The private_ip_address_version of this PrivateLinkServiceIpConfigurationProperties.
        :rtype: str
        """
        return self._private_ip_address_version

    @private_ip_address_version.setter
    def private_ip_address_version(self, private_ip_address_version):
        """Sets the private_ip_address_version of this PrivateLinkServiceIpConfigurationProperties.

        IP address version.

        :param private_ip_address_version: The private_ip_address_version of this PrivateLinkServiceIpConfigurationProperties.
        :type private_ip_address_version: str
        """
        allowed_values = ["IPv4", "IPv6"]  # noqa: E501
        if private_ip_address_version not in allowed_values:
            raise ValueError(
                "Invalid value for `private_ip_address_version` ({0}), must be one of {1}"
                .format(private_ip_address_version, allowed_values)
            )

        self._private_ip_address_version = private_ip_address_version

    @property
    def private_ip_allocation_method(self):
        """Gets the private_ip_allocation_method of this PrivateLinkServiceIpConfigurationProperties.

        IP address allocation method.

        :return: The private_ip_allocation_method of this PrivateLinkServiceIpConfigurationProperties.
        :rtype: str
        """
        return self._private_ip_allocation_method

    @private_ip_allocation_method.setter
    def private_ip_allocation_method(self, private_ip_allocation_method):
        """Sets the private_ip_allocation_method of this PrivateLinkServiceIpConfigurationProperties.

        IP address allocation method.

        :param private_ip_allocation_method: The private_ip_allocation_method of this PrivateLinkServiceIpConfigurationProperties.
        :type private_ip_allocation_method: str
        """
        allowed_values = ["Static", "Dynamic"]  # noqa: E501
        if private_ip_allocation_method not in allowed_values:
            raise ValueError(
                "Invalid value for `private_ip_allocation_method` ({0}), must be one of {1}"
                .format(private_ip_allocation_method, allowed_values)
            )

        self._private_ip_allocation_method = private_ip_allocation_method

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this PrivateLinkServiceIpConfigurationProperties.

        The current provisioning state.

        :return: The provisioning_state of this PrivateLinkServiceIpConfigurationProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this PrivateLinkServiceIpConfigurationProperties.

        The current provisioning state.

        :param provisioning_state: The provisioning_state of this PrivateLinkServiceIpConfigurationProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def subnet(self):
        """Gets the subnet of this PrivateLinkServiceIpConfigurationProperties.


        :return: The subnet of this PrivateLinkServiceIpConfigurationProperties.
        :rtype: PrivateLinkServiceIpConfigurationPropertiesSubnet
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this PrivateLinkServiceIpConfigurationProperties.


        :param subnet: The subnet of this PrivateLinkServiceIpConfigurationProperties.
        :type subnet: PrivateLinkServiceIpConfigurationPropertiesSubnet
        """

        self._subnet = subnet
