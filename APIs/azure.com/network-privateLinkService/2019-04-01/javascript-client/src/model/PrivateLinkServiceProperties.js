/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PrivateEndpointConnection from './PrivateEndpointConnection';
import PrivateLinkServiceIpConfiguration from './PrivateLinkServiceIpConfiguration';
import PrivateLinkServicePropertiesLoadBalancerFrontendIpConfigurationsInner from './PrivateLinkServicePropertiesLoadBalancerFrontendIpConfigurationsInner';
import PrivateLinkServicePropertiesNetworkInterfacesInner from './PrivateLinkServicePropertiesNetworkInterfacesInner';
import ResourceSet from './ResourceSet';

/**
 * The PrivateLinkServiceProperties model module.
 * @module model/PrivateLinkServiceProperties
 * @version 2019-04-01
 */
class PrivateLinkServiceProperties {
    /**
     * Constructs a new <code>PrivateLinkServiceProperties</code>.
     * Properties of the private link service.
     * @alias module:model/PrivateLinkServiceProperties
     */
    constructor() { 
        
        PrivateLinkServiceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PrivateLinkServiceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PrivateLinkServiceProperties} obj Optional instance to populate.
     * @return {module:model/PrivateLinkServiceProperties} The populated <code>PrivateLinkServiceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PrivateLinkServiceProperties();

            if (data.hasOwnProperty('alias')) {
                obj['alias'] = ApiClient.convertToType(data['alias'], 'String');
            }
            if (data.hasOwnProperty('autoApproval')) {
                obj['autoApproval'] = ApiClient.convertToType(data['autoApproval'], ResourceSet);
            }
            if (data.hasOwnProperty('fqdns')) {
                obj['fqdns'] = ApiClient.convertToType(data['fqdns'], ['String']);
            }
            if (data.hasOwnProperty('ipConfigurations')) {
                obj['ipConfigurations'] = ApiClient.convertToType(data['ipConfigurations'], [PrivateLinkServiceIpConfiguration]);
            }
            if (data.hasOwnProperty('loadBalancerFrontendIpConfigurations')) {
                obj['loadBalancerFrontendIpConfigurations'] = ApiClient.convertToType(data['loadBalancerFrontendIpConfigurations'], [PrivateLinkServicePropertiesLoadBalancerFrontendIpConfigurationsInner]);
            }
            if (data.hasOwnProperty('networkInterfaces')) {
                obj['networkInterfaces'] = ApiClient.convertToType(data['networkInterfaces'], [PrivateLinkServicePropertiesNetworkInterfacesInner]);
            }
            if (data.hasOwnProperty('privateEndpointConnections')) {
                obj['privateEndpointConnections'] = ApiClient.convertToType(data['privateEndpointConnections'], [PrivateEndpointConnection]);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], ResourceSet);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PrivateLinkServiceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PrivateLinkServiceProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alias'] && !(typeof data['alias'] === 'string' || data['alias'] instanceof String)) {
            throw new Error("Expected the field `alias` to be a primitive type in the JSON string but got " + data['alias']);
        }
        // validate the optional field `autoApproval`
        if (data['autoApproval']) { // data not null
          ResourceSet.validateJSON(data['autoApproval']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fqdns'])) {
            throw new Error("Expected the field `fqdns` to be an array in the JSON data but got " + data['fqdns']);
        }
        if (data['ipConfigurations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ipConfigurations'])) {
                throw new Error("Expected the field `ipConfigurations` to be an array in the JSON data but got " + data['ipConfigurations']);
            }
            // validate the optional field `ipConfigurations` (array)
            for (const item of data['ipConfigurations']) {
                PrivateLinkServiceIpConfiguration.validateJSON(item);
            };
        }
        if (data['loadBalancerFrontendIpConfigurations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['loadBalancerFrontendIpConfigurations'])) {
                throw new Error("Expected the field `loadBalancerFrontendIpConfigurations` to be an array in the JSON data but got " + data['loadBalancerFrontendIpConfigurations']);
            }
            // validate the optional field `loadBalancerFrontendIpConfigurations` (array)
            for (const item of data['loadBalancerFrontendIpConfigurations']) {
                PrivateLinkServicePropertiesLoadBalancerFrontendIpConfigurationsInner.validateJSON(item);
            };
        }
        if (data['networkInterfaces']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['networkInterfaces'])) {
                throw new Error("Expected the field `networkInterfaces` to be an array in the JSON data but got " + data['networkInterfaces']);
            }
            // validate the optional field `networkInterfaces` (array)
            for (const item of data['networkInterfaces']) {
                PrivateLinkServicePropertiesNetworkInterfacesInner.validateJSON(item);
            };
        }
        if (data['privateEndpointConnections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['privateEndpointConnections'])) {
                throw new Error("Expected the field `privateEndpointConnections` to be an array in the JSON data but got " + data['privateEndpointConnections']);
            }
            // validate the optional field `privateEndpointConnections` (array)
            for (const item of data['privateEndpointConnections']) {
                PrivateEndpointConnection.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `visibility`
        if (data['visibility']) { // data not null
          ResourceSet.validateJSON(data['visibility']);
        }

        return true;
    }


}



/**
 * The alias of the private link service.
 * @member {String} alias
 */
PrivateLinkServiceProperties.prototype['alias'] = undefined;

/**
 * The auto-approval list of the private link service.
 * @member {module:model/ResourceSet} autoApproval
 */
PrivateLinkServiceProperties.prototype['autoApproval'] = undefined;

/**
 * The list of Fqdn.
 * @member {Array.<String>} fqdns
 */
PrivateLinkServiceProperties.prototype['fqdns'] = undefined;

/**
 * An array of references to the private link service IP configuration.
 * @member {Array.<module:model/PrivateLinkServiceIpConfiguration>} ipConfigurations
 */
PrivateLinkServiceProperties.prototype['ipConfigurations'] = undefined;

/**
 * An array of references to the load balancer IP configurations.
 * @member {Array.<module:model/PrivateLinkServicePropertiesLoadBalancerFrontendIpConfigurationsInner>} loadBalancerFrontendIpConfigurations
 */
PrivateLinkServiceProperties.prototype['loadBalancerFrontendIpConfigurations'] = undefined;

/**
 * Gets an array of references to the network interfaces created for this private link service.
 * @member {Array.<module:model/PrivateLinkServicePropertiesNetworkInterfacesInner>} networkInterfaces
 */
PrivateLinkServiceProperties.prototype['networkInterfaces'] = undefined;

/**
 * An array of list about connections to the private endpoint.
 * @member {Array.<module:model/PrivateEndpointConnection>} privateEndpointConnections
 */
PrivateLinkServiceProperties.prototype['privateEndpointConnections'] = undefined;

/**
 * The current provisioning state.
 * @member {module:model/PrivateLinkServiceProperties.ProvisioningStateEnum} provisioningState
 */
PrivateLinkServiceProperties.prototype['provisioningState'] = undefined;

/**
 * The visibility list of the private link service.
 * @member {module:model/ResourceSet} visibility
 */
PrivateLinkServiceProperties.prototype['visibility'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
PrivateLinkServiceProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};



export default PrivateLinkServiceProperties;

