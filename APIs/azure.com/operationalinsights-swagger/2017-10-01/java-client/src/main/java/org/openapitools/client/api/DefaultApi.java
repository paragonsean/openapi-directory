/*
 * Azure Log Analytics
 * This API exposes Azure Log Analytics query capabilities
 *
 * The version of the OpenAPI document: 2017-10-01
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.QueryBody;
import org.openapitools.client.model.QueryResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for queryExecute
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName Name of the Log Analytics workspace. (required)
     * @param apiVersion Client API version. (required)
     * @param body The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The API call succeeded and the Analytics query result is in the response payload </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryExecuteCall(String subscriptionId, String resourceGroupName, String workspaceName, String apiVersion, QueryBody body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/query"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiVersion", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryExecuteValidateBeforeCall(String subscriptionId, String resourceGroupName, String workspaceName, String apiVersion, QueryBody body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling queryExecute(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling queryExecute(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling queryExecute(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queryExecute(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling queryExecute(Async)");
        }

        return queryExecuteCall(subscriptionId, resourceGroupName, workspaceName, apiVersion, body, _callback);

    }

    /**
     * Execute an Analytics query
     * Executes an Analytics query for data. [Here](https://dev.loganalytics.io/documentation/Using-the-API) is an example for using POST with an Analytics query.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName Name of the Log Analytics workspace. (required)
     * @param apiVersion Client API version. (required)
     * @param body The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/) (required)
     * @return QueryResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The API call succeeded and the Analytics query result is in the response payload </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public QueryResults queryExecute(String subscriptionId, String resourceGroupName, String workspaceName, String apiVersion, QueryBody body) throws ApiException {
        ApiResponse<QueryResults> localVarResp = queryExecuteWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, apiVersion, body);
        return localVarResp.getData();
    }

    /**
     * Execute an Analytics query
     * Executes an Analytics query for data. [Here](https://dev.loganalytics.io/documentation/Using-the-API) is an example for using POST with an Analytics query.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName Name of the Log Analytics workspace. (required)
     * @param apiVersion Client API version. (required)
     * @param body The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/) (required)
     * @return ApiResponse&lt;QueryResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The API call succeeded and the Analytics query result is in the response payload </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryResults> queryExecuteWithHttpInfo(String subscriptionId, String resourceGroupName, String workspaceName, String apiVersion, QueryBody body) throws ApiException {
        okhttp3.Call localVarCall = queryExecuteValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, apiVersion, body, null);
        Type localVarReturnType = new TypeToken<QueryResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute an Analytics query (asynchronously)
     * Executes an Analytics query for data. [Here](https://dev.loganalytics.io/documentation/Using-the-API) is an example for using POST with an Analytics query.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName Name of the Log Analytics workspace. (required)
     * @param apiVersion Client API version. (required)
     * @param body The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The API call succeeded and the Analytics query result is in the response payload </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryExecuteAsync(String subscriptionId, String resourceGroupName, String workspaceName, String apiVersion, QueryBody body, final ApiCallback<QueryResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryExecuteValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, apiVersion, body, _callback);
        Type localVarReturnType = new TypeToken<QueryResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryGet
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName Name of the Log Analytics workspace. (required)
     * @param query The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/) (required)
     * @param apiVersion Client API version. (required)
     * @param timespan Optional. The timespan over which to query data. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the query expression. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The API call succeeded and the Analytics query result is in the response payload </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryGetCall(String subscriptionId, String resourceGroupName, String workspaceName, String query, String apiVersion, String timespan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/query"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiVersion", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String workspaceName, String query, String apiVersion, String timespan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling queryGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling queryGet(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling queryGet(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling queryGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queryGet(Async)");
        }

        return queryGetCall(subscriptionId, resourceGroupName, workspaceName, query, apiVersion, timespan, _callback);

    }

    /**
     * Execute an Analytics query
     * Executes an Analytics query for data
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName Name of the Log Analytics workspace. (required)
     * @param query The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/) (required)
     * @param apiVersion Client API version. (required)
     * @param timespan Optional. The timespan over which to query data. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the query expression. (optional)
     * @return QueryResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The API call succeeded and the Analytics query result is in the response payload </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public QueryResults queryGet(String subscriptionId, String resourceGroupName, String workspaceName, String query, String apiVersion, String timespan) throws ApiException {
        ApiResponse<QueryResults> localVarResp = queryGetWithHttpInfo(subscriptionId, resourceGroupName, workspaceName, query, apiVersion, timespan);
        return localVarResp.getData();
    }

    /**
     * Execute an Analytics query
     * Executes an Analytics query for data
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName Name of the Log Analytics workspace. (required)
     * @param query The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/) (required)
     * @param apiVersion Client API version. (required)
     * @param timespan Optional. The timespan over which to query data. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the query expression. (optional)
     * @return ApiResponse&lt;QueryResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The API call succeeded and the Analytics query result is in the response payload </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryResults> queryGetWithHttpInfo(String subscriptionId, String resourceGroupName, String workspaceName, String query, String apiVersion, String timespan) throws ApiException {
        okhttp3.Call localVarCall = queryGetValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, query, apiVersion, timespan, null);
        Type localVarReturnType = new TypeToken<QueryResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute an Analytics query (asynchronously)
     * Executes an Analytics query for data
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param workspaceName Name of the Log Analytics workspace. (required)
     * @param query The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/) (required)
     * @param apiVersion Client API version. (required)
     * @param timespan Optional. The timespan over which to query data. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the query expression. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The API call succeeded and the Analytics query result is in the response payload </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryGetAsync(String subscriptionId, String resourceGroupName, String workspaceName, String query, String apiVersion, String timespan, final ApiCallback<QueryResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryGetValidateBeforeCall(subscriptionId, resourceGroupName, workspaceName, query, apiVersion, timespan, _callback);
        Type localVarReturnType = new TypeToken<QueryResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
