# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_detail import ErrorDetail
from openapi_server import util


class ErrorInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_properties: object=None, code: str=None, details: List[ErrorDetail]=None, innererror: ErrorInfo=None, message: str=None):
        """ErrorInfo - a model defined in OpenAPI

        :param additional_properties: The additional_properties of this ErrorInfo.
        :param code: The code of this ErrorInfo.
        :param details: The details of this ErrorInfo.
        :param innererror: The innererror of this ErrorInfo.
        :param message: The message of this ErrorInfo.
        """
        self.openapi_types = {
            'additional_properties': object,
            'code': str,
            'details': List[ErrorDetail],
            'innererror': ErrorInfo,
            'message': str
        }

        self.attribute_map = {
            'additional_properties': 'additionalProperties',
            'code': 'code',
            'details': 'details',
            'innererror': 'innererror',
            'message': 'message'
        }

        self._additional_properties = additional_properties
        self._code = code
        self._details = details
        self._innererror = innererror
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The errorInfo of this ErrorInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_properties(self):
        """Gets the additional_properties of this ErrorInfo.


        :return: The additional_properties of this ErrorInfo.
        :rtype: object
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """Sets the additional_properties of this ErrorInfo.


        :param additional_properties: The additional_properties of this ErrorInfo.
        :type additional_properties: object
        """

        self._additional_properties = additional_properties

    @property
    def code(self):
        """Gets the code of this ErrorInfo.

        A machine readable error code.

        :return: The code of this ErrorInfo.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ErrorInfo.

        A machine readable error code.

        :param code: The code of this ErrorInfo.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def details(self):
        """Gets the details of this ErrorInfo.

        error details.

        :return: The details of this ErrorInfo.
        :rtype: List[ErrorDetail]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ErrorInfo.

        error details.

        :param details: The details of this ErrorInfo.
        :type details: List[ErrorDetail]
        """

        self._details = details

    @property
    def innererror(self):
        """Gets the innererror of this ErrorInfo.


        :return: The innererror of this ErrorInfo.
        :rtype: ErrorInfo
        """
        return self._innererror

    @innererror.setter
    def innererror(self, innererror):
        """Sets the innererror of this ErrorInfo.


        :param innererror: The innererror of this ErrorInfo.
        :type innererror: ErrorInfo
        """

        self._innererror = innererror

    @property
    def message(self):
        """Gets the message of this ErrorInfo.

        A human readable error message.

        :return: The message of this ErrorInfo.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorInfo.

        A human readable error message.

        :param message: The message of this ErrorInfo.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message
