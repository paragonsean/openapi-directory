/**
 * Azure Log Analytics
 * This API exposes Azure Log Analytics query capabilities
 *
 * The version of the OpenAPI document: 2017-10-01
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Table from './Table';

/**
 * The QueryResults model module.
 * @module model/QueryResults
 * @version 2017-10-01
 */
class QueryResults {
    /**
     * Constructs a new <code>QueryResults</code>.
     * Contains the tables, columns &amp; rows resulting from a query.
     * @alias module:model/QueryResults
     * @param tables {Array.<module:model/Table>} The list of tables, columns and rows.
     */
    constructor(tables) { 
        
        QueryResults.initialize(this, tables);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tables) { 
        obj['tables'] = tables;
    }

    /**
     * Constructs a <code>QueryResults</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryResults} obj Optional instance to populate.
     * @return {module:model/QueryResults} The populated <code>QueryResults</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryResults();

            if (data.hasOwnProperty('tables')) {
                obj['tables'] = ApiClient.convertToType(data['tables'], [Table]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryResults</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryResults</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QueryResults.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['tables']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tables'])) {
                throw new Error("Expected the field `tables` to be an array in the JSON data but got " + data['tables']);
            }
            // validate the optional field `tables` (array)
            for (const item of data['tables']) {
                Table.validateJSON(item);
            };
        }

        return true;
    }


}

QueryResults.RequiredProperties = ["tables"];

/**
 * The list of tables, columns and rows.
 * @member {Array.<module:model/Table>} tables
 */
QueryResults.prototype['tables'] = undefined;






export default QueryResults;

