# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BackendReconnectRequestProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, after: str=None):
        """BackendReconnectRequestProperties - a model defined in OpenAPI

        :param after: The after of this BackendReconnectRequestProperties.
        """
        self.openapi_types = {
            'after': str
        }

        self.attribute_map = {
            'after': 'after'
        }

        self._after = after

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackendReconnectRequestProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Backend_Reconnect_request_properties of this BackendReconnectRequestProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after(self):
        """Gets the after of this BackendReconnectRequestProperties.

        Duration in ISO8601 format after which reconnect will be initiated. Minimum duration of the Reconnect is PT2M.

        :return: The after of this BackendReconnectRequestProperties.
        :rtype: str
        """
        return self._after

    @after.setter
    def after(self, after):
        """Sets the after of this BackendReconnectRequestProperties.

        Duration in ISO8601 format after which reconnect will be initiated. Minimum duration of the Reconnect is PT2M.

        :param after: The after of this BackendReconnectRequestProperties.
        :type after: str
        """

        self._after = after
