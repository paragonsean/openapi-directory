/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Backend entity in Azure API Management deployment. The Backend entity in API Management represents a backend service that is configured to skip certification chain validation when using a self-signed certificate to test mutual certificate authentication.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBackendApi_H
#define OAI_OAIBackendApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBackend_Get_200_response.h"
#include "OAIBackend_ListByService_200_response.h"
#include "OAIBackend_ListByService_default_response.h"
#include "OAIBackend_Update_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBackendApi : public QObject {
    Q_OBJECT

public:
    OAIBackendApi(const int timeOut = 0);
    ~OAIBackendApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  backend_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIBackend_Get_200_response [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void backendCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &backend_id, const QString &api_version, const QString &subscription_id, const OAIBackend_Get_200_response &parameters, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  backend_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void backendDelete(const QString &resource_group_name, const QString &service_name, const QString &backend_id, const QString &if_match, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  backend_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void backendGet(const QString &resource_group_name, const QString &service_name, const QString &backend_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  backend_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void backendGetEntityTag(const QString &resource_group_name, const QString &service_name, const QString &backend_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    */
    virtual void backendListByService(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  backend_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIBackend_Update_request [required]
    */
    virtual void backendUpdate(const QString &resource_group_name, const QString &service_name, const QString &backend_id, const QString &if_match, const QString &api_version, const QString &subscription_id, const OAIBackend_Update_request &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void backendCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void backendDeleteCallback(OAIHttpRequestWorker *worker);
    void backendGetCallback(OAIHttpRequestWorker *worker);
    void backendGetEntityTagCallback(OAIHttpRequestWorker *worker);
    void backendListByServiceCallback(OAIHttpRequestWorker *worker);
    void backendUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void backendCreateOrUpdateSignal(OAIBackend_Get_200_response summary);
    void backendDeleteSignal();
    void backendGetSignal(OAIBackend_Get_200_response summary);
    void backendGetEntityTagSignal();
    void backendListByServiceSignal(OAIBackend_ListByService_200_response summary);
    void backendUpdateSignal();


    void backendCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIBackend_Get_200_response summary);
    void backendDeleteSignalFull(OAIHttpRequestWorker *worker);
    void backendGetSignalFull(OAIHttpRequestWorker *worker, OAIBackend_Get_200_response summary);
    void backendGetEntityTagSignalFull(OAIHttpRequestWorker *worker);
    void backendListByServiceSignalFull(OAIHttpRequestWorker *worker, OAIBackend_ListByService_200_response summary);
    void backendUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use backendCreateOrUpdateSignalError() instead")
    void backendCreateOrUpdateSignalE(OAIBackend_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void backendCreateOrUpdateSignalError(OAIBackend_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backendDeleteSignalError() instead")
    void backendDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void backendDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backendGetSignalError() instead")
    void backendGetSignalE(OAIBackend_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void backendGetSignalError(OAIBackend_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backendGetEntityTagSignalError() instead")
    void backendGetEntityTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void backendGetEntityTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backendListByServiceSignalError() instead")
    void backendListByServiceSignalE(OAIBackend_ListByService_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void backendListByServiceSignalError(OAIBackend_ListByService_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backendUpdateSignalError() instead")
    void backendUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void backendUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use backendCreateOrUpdateSignalErrorFull() instead")
    void backendCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backendCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backendDeleteSignalErrorFull() instead")
    void backendDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backendDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backendGetSignalErrorFull() instead")
    void backendGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backendGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backendGetEntityTagSignalErrorFull() instead")
    void backendGetEntityTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backendGetEntityTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backendListByServiceSignalErrorFull() instead")
    void backendListByServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backendListByServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use backendUpdateSignalErrorFull() instead")
    void backendUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void backendUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
