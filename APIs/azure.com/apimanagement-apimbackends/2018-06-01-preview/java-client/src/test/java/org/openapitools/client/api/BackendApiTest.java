/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on Backend entity in Azure API Management deployment. The Backend entity in API Management represents a backend service that is configured to skip certification chain validation when using a self-signed certificate to test mutual certificate authentication.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BackendGet200Response;
import org.openapitools.client.model.BackendListByService200Response;
import org.openapitools.client.model.BackendListByServiceDefaultResponse;
import org.openapitools.client.model.BackendUpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BackendApi
 */
@Disabled
public class BackendApiTest {

    private final BackendApi api = new BackendApi();

    /**
     * Creates or Updates a backend.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void backendCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String backendId = null;
        String apiVersion = null;
        String subscriptionId = null;
        BackendGet200Response parameters = null;
        String ifMatch = null;
        BackendGet200Response response = api.backendCreateOrUpdate(resourceGroupName, serviceName, backendId, apiVersion, subscriptionId, parameters, ifMatch);
        // TODO: test validations
    }

    /**
     * Deletes the specified backend.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void backendDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String backendId = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.backendDelete(resourceGroupName, serviceName, backendId, ifMatch, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the details of the backend specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void backendGetTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String backendId = null;
        String apiVersion = null;
        String subscriptionId = null;
        BackendGet200Response response = api.backendGet(resourceGroupName, serviceName, backendId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the entity state (Etag) version of the backend specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void backendGetEntityTagTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String backendId = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.backendGetEntityTag(resourceGroupName, serviceName, backendId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists a collection of backends in the specified service instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void backendListByServiceTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        BackendListByService200Response response = api.backendListByService(resourceGroupName, serviceName, apiVersion, subscriptionId, $filter, $top, $skip);
        // TODO: test validations
    }

    /**
     * Updates an existing backend.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void backendUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String backendId = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        BackendUpdateRequest parameters = null;
        api.backendUpdate(resourceGroupName, serviceName, backendId, ifMatch, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
