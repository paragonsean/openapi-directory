/**
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AzureMigrateV2);
  }
}(this, function(expect, AzureMigrateV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AzureMigrateV2.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('assessedMachinesGet', function() {
      it('should call assessedMachinesGet successfully', function(done) {
        //uncomment below and update the code to test assessedMachinesGet
        //instance.assessedMachinesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('assessedMachinesListByAssessment', function() {
      it('should call assessedMachinesListByAssessment successfully', function(done) {
        //uncomment below and update the code to test assessedMachinesListByAssessment
        //instance.assessedMachinesListByAssessment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('assessmentsCreate', function() {
      it('should call assessmentsCreate successfully', function(done) {
        //uncomment below and update the code to test assessmentsCreate
        //instance.assessmentsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('assessmentsDelete', function() {
      it('should call assessmentsDelete successfully', function(done) {
        //uncomment below and update the code to test assessmentsDelete
        //instance.assessmentsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('assessmentsGet', function() {
      it('should call assessmentsGet successfully', function(done) {
        //uncomment below and update the code to test assessmentsGet
        //instance.assessmentsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('assessmentsGetReportDownloadUrl', function() {
      it('should call assessmentsGetReportDownloadUrl successfully', function(done) {
        //uncomment below and update the code to test assessmentsGetReportDownloadUrl
        //instance.assessmentsGetReportDownloadUrl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('assessmentsListByGroup', function() {
      it('should call assessmentsListByGroup successfully', function(done) {
        //uncomment below and update the code to test assessmentsListByGroup
        //instance.assessmentsListByGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('assessmentsListByProject', function() {
      it('should call assessmentsListByProject successfully', function(done) {
        //uncomment below and update the code to test assessmentsListByProject
        //instance.assessmentsListByProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsCreate', function() {
      it('should call groupsCreate successfully', function(done) {
        //uncomment below and update the code to test groupsCreate
        //instance.groupsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsDelete', function() {
      it('should call groupsDelete successfully', function(done) {
        //uncomment below and update the code to test groupsDelete
        //instance.groupsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsGet', function() {
      it('should call groupsGet successfully', function(done) {
        //uncomment below and update the code to test groupsGet
        //instance.groupsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsListByProject', function() {
      it('should call groupsListByProject successfully', function(done) {
        //uncomment below and update the code to test groupsListByProject
        //instance.groupsListByProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('groupsUpdateMachines', function() {
      it('should call groupsUpdateMachines successfully', function(done) {
        //uncomment below and update the code to test groupsUpdateMachines
        //instance.groupsUpdateMachines(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hyperVCollectorsCreate', function() {
      it('should call hyperVCollectorsCreate successfully', function(done) {
        //uncomment below and update the code to test hyperVCollectorsCreate
        //instance.hyperVCollectorsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hyperVCollectorsDelete', function() {
      it('should call hyperVCollectorsDelete successfully', function(done) {
        //uncomment below and update the code to test hyperVCollectorsDelete
        //instance.hyperVCollectorsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hyperVCollectorsGet', function() {
      it('should call hyperVCollectorsGet successfully', function(done) {
        //uncomment below and update the code to test hyperVCollectorsGet
        //instance.hyperVCollectorsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hyperVCollectorsListByProject', function() {
      it('should call hyperVCollectorsListByProject successfully', function(done) {
        //uncomment below and update the code to test hyperVCollectorsListByProject
        //instance.hyperVCollectorsListByProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('machinesGet', function() {
      it('should call machinesGet successfully', function(done) {
        //uncomment below and update the code to test machinesGet
        //instance.machinesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('machinesListByProject', function() {
      it('should call machinesListByProject successfully', function(done) {
        //uncomment below and update the code to test machinesListByProject
        //instance.machinesListByProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('operationsList', function() {
      it('should call operationsList successfully', function(done) {
        //uncomment below and update the code to test operationsList
        //instance.operationsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectAssessmentOptions', function() {
      it('should call projectAssessmentOptions successfully', function(done) {
        //uncomment below and update the code to test projectAssessmentOptions
        //instance.projectAssessmentOptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectAssessmentOptionsList', function() {
      it('should call projectAssessmentOptionsList successfully', function(done) {
        //uncomment below and update the code to test projectAssessmentOptionsList
        //instance.projectAssessmentOptionsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsCreate', function() {
      it('should call projectsCreate successfully', function(done) {
        //uncomment below and update the code to test projectsCreate
        //instance.projectsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsDelete', function() {
      it('should call projectsDelete successfully', function(done) {
        //uncomment below and update the code to test projectsDelete
        //instance.projectsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsGet', function() {
      it('should call projectsGet successfully', function(done) {
        //uncomment below and update the code to test projectsGet
        //instance.projectsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsList', function() {
      it('should call projectsList successfully', function(done) {
        //uncomment below and update the code to test projectsList
        //instance.projectsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsListBySubscription', function() {
      it('should call projectsListBySubscription successfully', function(done) {
        //uncomment below and update the code to test projectsListBySubscription
        //instance.projectsListBySubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsUpdate', function() {
      it('should call projectsUpdate successfully', function(done) {
        //uncomment below and update the code to test projectsUpdate
        //instance.projectsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vMwareCollectorsCreate', function() {
      it('should call vMwareCollectorsCreate successfully', function(done) {
        //uncomment below and update the code to test vMwareCollectorsCreate
        //instance.vMwareCollectorsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vMwareCollectorsDelete', function() {
      it('should call vMwareCollectorsDelete successfully', function(done) {
        //uncomment below and update the code to test vMwareCollectorsDelete
        //instance.vMwareCollectorsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vMwareCollectorsGet', function() {
      it('should call vMwareCollectorsGet successfully', function(done) {
        //uncomment below and update the code to test vMwareCollectorsGet
        //instance.vMwareCollectorsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('vMwareCollectorsListByProject', function() {
      it('should call vMwareCollectorsListByProject successfully', function(done) {
        //uncomment below and update the code to test vMwareCollectorsListByProject
        //instance.vMwareCollectorsListByProject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
