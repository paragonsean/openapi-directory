/**
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Disk from './Disk';
import NetworkAdapter from './NetworkAdapter';

/**
 * The MachineProperties model module.
 * @module model/MachineProperties
 * @version 2019-10-01
 */
class MachineProperties {
    /**
     * Constructs a new <code>MachineProperties</code>.
     * Properties of a machine.
     * @alias module:model/MachineProperties
     */
    constructor() { 
        
        MachineProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MachineProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MachineProperties} obj Optional instance to populate.
     * @return {module:model/MachineProperties} The populated <code>MachineProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MachineProperties();

            if (data.hasOwnProperty('bootType')) {
                obj['bootType'] = ApiClient.convertToType(data['bootType'], 'String');
            }
            if (data.hasOwnProperty('createdTimestamp')) {
                obj['createdTimestamp'] = ApiClient.convertToType(data['createdTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('datacenterManagementServerArmId')) {
                obj['datacenterManagementServerArmId'] = ApiClient.convertToType(data['datacenterManagementServerArmId'], 'String');
            }
            if (data.hasOwnProperty('datacenterManagementServerName')) {
                obj['datacenterManagementServerName'] = ApiClient.convertToType(data['datacenterManagementServerName'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('discoveryMachineArmId')) {
                obj['discoveryMachineArmId'] = ApiClient.convertToType(data['discoveryMachineArmId'], 'String');
            }
            if (data.hasOwnProperty('disks')) {
                obj['disks'] = ApiClient.convertToType(data['disks'], {'String': Disk});
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('groups')) {
                obj['groups'] = ApiClient.convertToType(data['groups'], ['String']);
            }
            if (data.hasOwnProperty('megabytesOfMemory')) {
                obj['megabytesOfMemory'] = ApiClient.convertToType(data['megabytesOfMemory'], 'Number');
            }
            if (data.hasOwnProperty('networkAdapters')) {
                obj['networkAdapters'] = ApiClient.convertToType(data['networkAdapters'], {'String': NetworkAdapter});
            }
            if (data.hasOwnProperty('numberOfCores')) {
                obj['numberOfCores'] = ApiClient.convertToType(data['numberOfCores'], 'Number');
            }
            if (data.hasOwnProperty('operatingSystemName')) {
                obj['operatingSystemName'] = ApiClient.convertToType(data['operatingSystemName'], 'String');
            }
            if (data.hasOwnProperty('operatingSystemType')) {
                obj['operatingSystemType'] = ApiClient.convertToType(data['operatingSystemType'], 'String');
            }
            if (data.hasOwnProperty('operatingSystemVersion')) {
                obj['operatingSystemVersion'] = ApiClient.convertToType(data['operatingSystemVersion'], 'String');
            }
            if (data.hasOwnProperty('updatedTimestamp')) {
                obj['updatedTimestamp'] = ApiClient.convertToType(data['updatedTimestamp'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MachineProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MachineProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bootType'] && !(typeof data['bootType'] === 'string' || data['bootType'] instanceof String)) {
            throw new Error("Expected the field `bootType` to be a primitive type in the JSON string but got " + data['bootType']);
        }
        // ensure the json data is a string
        if (data['datacenterManagementServerArmId'] && !(typeof data['datacenterManagementServerArmId'] === 'string' || data['datacenterManagementServerArmId'] instanceof String)) {
            throw new Error("Expected the field `datacenterManagementServerArmId` to be a primitive type in the JSON string but got " + data['datacenterManagementServerArmId']);
        }
        // ensure the json data is a string
        if (data['datacenterManagementServerName'] && !(typeof data['datacenterManagementServerName'] === 'string' || data['datacenterManagementServerName'] instanceof String)) {
            throw new Error("Expected the field `datacenterManagementServerName` to be a primitive type in the JSON string but got " + data['datacenterManagementServerName']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['discoveryMachineArmId'] && !(typeof data['discoveryMachineArmId'] === 'string' || data['discoveryMachineArmId'] instanceof String)) {
            throw new Error("Expected the field `discoveryMachineArmId` to be a primitive type in the JSON string but got " + data['discoveryMachineArmId']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['groups'])) {
            throw new Error("Expected the field `groups` to be an array in the JSON data but got " + data['groups']);
        }
        // ensure the json data is a string
        if (data['operatingSystemName'] && !(typeof data['operatingSystemName'] === 'string' || data['operatingSystemName'] instanceof String)) {
            throw new Error("Expected the field `operatingSystemName` to be a primitive type in the JSON string but got " + data['operatingSystemName']);
        }
        // ensure the json data is a string
        if (data['operatingSystemType'] && !(typeof data['operatingSystemType'] === 'string' || data['operatingSystemType'] instanceof String)) {
            throw new Error("Expected the field `operatingSystemType` to be a primitive type in the JSON string but got " + data['operatingSystemType']);
        }
        // ensure the json data is a string
        if (data['operatingSystemVersion'] && !(typeof data['operatingSystemVersion'] === 'string' || data['operatingSystemVersion'] instanceof String)) {
            throw new Error("Expected the field `operatingSystemVersion` to be a primitive type in the JSON string but got " + data['operatingSystemVersion']);
        }

        return true;
    }


}



/**
 * Boot type of the machine.
 * @member {module:model/MachineProperties.BootTypeEnum} bootType
 */
MachineProperties.prototype['bootType'] = undefined;

/**
 * Time when this machine was created. Date-Time represented in ISO-8601 format.
 * @member {Date} createdTimestamp
 */
MachineProperties.prototype['createdTimestamp'] = undefined;

/**
 * ARM ID of the data center as tracked by the Microsoft.OffAzure.
 * @member {String} datacenterManagementServerArmId
 */
MachineProperties.prototype['datacenterManagementServerArmId'] = undefined;

/**
 * Name of the server hosting the datacenter management solution.
 * @member {String} datacenterManagementServerName
 */
MachineProperties.prototype['datacenterManagementServerName'] = undefined;

/**
 * Description of the machine
 * @member {String} description
 */
MachineProperties.prototype['description'] = undefined;

/**
 * ARM ID of the machine as tracked by the Microsoft.OffAzure.
 * @member {String} discoveryMachineArmId
 */
MachineProperties.prototype['discoveryMachineArmId'] = undefined;

/**
 * Dictionary of disks attached to the machine. Key is ID of disk. Value is a disk object
 * @member {Object.<String, module:model/Disk>} disks
 */
MachineProperties.prototype['disks'] = undefined;

/**
 * User readable name of the machine as defined by the user in their private datacenter.
 * @member {String} displayName
 */
MachineProperties.prototype['displayName'] = undefined;

/**
 * List of references to the groups that the machine is member of.
 * @member {Array.<String>} groups
 */
MachineProperties.prototype['groups'] = undefined;

/**
 * Memory in Megabytes.
 * @member {Number} megabytesOfMemory
 */
MachineProperties.prototype['megabytesOfMemory'] = undefined;

/**
 * Dictionary of network adapters attached to the machine. Key is ID of network adapter. Value is a network adapter object
 * @member {Object.<String, module:model/NetworkAdapter>} networkAdapters
 */
MachineProperties.prototype['networkAdapters'] = undefined;

/**
 * Processor count.
 * @member {Number} numberOfCores
 */
MachineProperties.prototype['numberOfCores'] = undefined;

/**
 * Operating System name of the machine.
 * @member {String} operatingSystemName
 */
MachineProperties.prototype['operatingSystemName'] = undefined;

/**
 * Operating System type of the machine.
 * @member {String} operatingSystemType
 */
MachineProperties.prototype['operatingSystemType'] = undefined;

/**
 * Operating System version of the machine.
 * @member {String} operatingSystemVersion
 */
MachineProperties.prototype['operatingSystemVersion'] = undefined;

/**
 * Time when this machine was last updated. Date-Time represented in ISO-8601 format.
 * @member {Date} updatedTimestamp
 */
MachineProperties.prototype['updatedTimestamp'] = undefined;





/**
 * Allowed values for the <code>bootType</code> property.
 * @enum {String}
 * @readonly
 */
MachineProperties['BootTypeEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "EFI"
     * @const
     */
    "EFI": "EFI",

    /**
     * value: "BIOS"
     * @const
     */
    "BIOS": "BIOS"
};



export default MachineProperties;

