/**
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AssessedNetworkAdapter model module.
 * @module model/AssessedNetworkAdapter
 * @version 2019-10-01
 */
class AssessedNetworkAdapter {
    /**
     * Constructs a new <code>AssessedNetworkAdapter</code>.
     * A network adapter assessed for an assessment.
     * @alias module:model/AssessedNetworkAdapter
     */
    constructor() { 
        
        AssessedNetworkAdapter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AssessedNetworkAdapter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssessedNetworkAdapter} obj Optional instance to populate.
     * @return {module:model/AssessedNetworkAdapter} The populated <code>AssessedNetworkAdapter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssessedNetworkAdapter();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('ipAddresses')) {
                obj['ipAddresses'] = ApiClient.convertToType(data['ipAddresses'], ['String']);
            }
            if (data.hasOwnProperty('macAddress')) {
                obj['macAddress'] = ApiClient.convertToType(data['macAddress'], 'String');
            }
            if (data.hasOwnProperty('megabytesPerSecondReceived')) {
                obj['megabytesPerSecondReceived'] = ApiClient.convertToType(data['megabytesPerSecondReceived'], 'Number');
            }
            if (data.hasOwnProperty('megabytesPerSecondTransmitted')) {
                obj['megabytesPerSecondTransmitted'] = ApiClient.convertToType(data['megabytesPerSecondTransmitted'], 'Number');
            }
            if (data.hasOwnProperty('monthlyBandwidthCosts')) {
                obj['monthlyBandwidthCosts'] = ApiClient.convertToType(data['monthlyBandwidthCosts'], 'Number');
            }
            if (data.hasOwnProperty('netGigabytesTransmittedPerMonth')) {
                obj['netGigabytesTransmittedPerMonth'] = ApiClient.convertToType(data['netGigabytesTransmittedPerMonth'], 'Number');
            }
            if (data.hasOwnProperty('suitability')) {
                obj['suitability'] = ApiClient.convertToType(data['suitability'], 'String');
            }
            if (data.hasOwnProperty('suitabilityDetail')) {
                obj['suitabilityDetail'] = ApiClient.convertToType(data['suitabilityDetail'], 'String');
            }
            if (data.hasOwnProperty('suitabilityExplanation')) {
                obj['suitabilityExplanation'] = ApiClient.convertToType(data['suitabilityExplanation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssessedNetworkAdapter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssessedNetworkAdapter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ipAddresses'])) {
            throw new Error("Expected the field `ipAddresses` to be an array in the JSON data but got " + data['ipAddresses']);
        }
        // ensure the json data is a string
        if (data['macAddress'] && !(typeof data['macAddress'] === 'string' || data['macAddress'] instanceof String)) {
            throw new Error("Expected the field `macAddress` to be a primitive type in the JSON string but got " + data['macAddress']);
        }
        // ensure the json data is a string
        if (data['suitability'] && !(typeof data['suitability'] === 'string' || data['suitability'] instanceof String)) {
            throw new Error("Expected the field `suitability` to be a primitive type in the JSON string but got " + data['suitability']);
        }
        // ensure the json data is a string
        if (data['suitabilityDetail'] && !(typeof data['suitabilityDetail'] === 'string' || data['suitabilityDetail'] instanceof String)) {
            throw new Error("Expected the field `suitabilityDetail` to be a primitive type in the JSON string but got " + data['suitabilityDetail']);
        }
        // ensure the json data is a string
        if (data['suitabilityExplanation'] && !(typeof data['suitabilityExplanation'] === 'string' || data['suitabilityExplanation'] instanceof String)) {
            throw new Error("Expected the field `suitabilityExplanation` to be a primitive type in the JSON string but got " + data['suitabilityExplanation']);
        }

        return true;
    }


}



/**
 * User friendly name of the assessed network adapter.
 * @member {String} displayName
 */
AssessedNetworkAdapter.prototype['displayName'] = undefined;

/**
 * List of IP Addresses on the network adapter.
 * @member {Array.<String>} ipAddresses
 */
AssessedNetworkAdapter.prototype['ipAddresses'] = undefined;

/**
 * MAC Address of the network adapter.
 * @member {String} macAddress
 */
AssessedNetworkAdapter.prototype['macAddress'] = undefined;

/**
 * Adapter throughput for incoming traffic in MegaBytes per second.
 * @member {Number} megabytesPerSecondReceived
 */
AssessedNetworkAdapter.prototype['megabytesPerSecondReceived'] = undefined;

/**
 * Adapter throughput for outgoing traffic in MegaBytes per second.
 * @member {Number} megabytesPerSecondTransmitted
 */
AssessedNetworkAdapter.prototype['megabytesPerSecondTransmitted'] = undefined;

/**
 * Monthly cost estimate for network bandwidth used by this network adapter.
 * @member {Number} monthlyBandwidthCosts
 */
AssessedNetworkAdapter.prototype['monthlyBandwidthCosts'] = undefined;

/**
 * Gigabytes transmitted through this adapter each month.
 * @member {Number} netGigabytesTransmittedPerMonth
 */
AssessedNetworkAdapter.prototype['netGigabytesTransmittedPerMonth'] = undefined;

/**
 * Whether this adapter is suitable for Azure.
 * @member {module:model/AssessedNetworkAdapter.SuitabilityEnum} suitability
 */
AssessedNetworkAdapter.prototype['suitability'] = undefined;

/**
 * If network adapter is not suitable for cloud, this explains the reasons.
 * @member {module:model/AssessedNetworkAdapter.SuitabilityDetailEnum} suitabilityDetail
 */
AssessedNetworkAdapter.prototype['suitabilityDetail'] = undefined;

/**
 * If network adapter is suitable, this explains the reasons and mitigation steps.
 * @member {module:model/AssessedNetworkAdapter.SuitabilityExplanationEnum} suitabilityExplanation
 */
AssessedNetworkAdapter.prototype['suitabilityExplanation'] = undefined;





/**
 * Allowed values for the <code>suitability</code> property.
 * @enum {String}
 * @readonly
 */
AssessedNetworkAdapter['SuitabilityEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "NotSuitable"
     * @const
     */
    "NotSuitable": "NotSuitable",

    /**
     * value: "Suitable"
     * @const
     */
    "Suitable": "Suitable",

    /**
     * value: "ConditionallySuitable"
     * @const
     */
    "ConditionallySuitable": "ConditionallySuitable",

    /**
     * value: "ReadinessUnknown"
     * @const
     */
    "ReadinessUnknown": "ReadinessUnknown"
};


/**
 * Allowed values for the <code>suitabilityDetail</code> property.
 * @enum {String}
 * @readonly
 */
AssessedNetworkAdapter['SuitabilityDetailEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "MegabytesOfDataTransmittedMissing"
     * @const
     */
    "MegabytesOfDataTransmittedMissing": "MegabytesOfDataTransmittedMissing",

    /**
     * value: "MegabytesOfDataTransmittedOutOfRange"
     * @const
     */
    "MegabytesOfDataTransmittedOutOfRange": "MegabytesOfDataTransmittedOutOfRange"
};


/**
 * Allowed values for the <code>suitabilityExplanation</code> property.
 * @enum {String}
 * @readonly
 */
AssessedNetworkAdapter['SuitabilityExplanationEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "NotApplicable"
     * @const
     */
    "NotApplicable": "NotApplicable",

    /**
     * value: "InternalErrorOccurred"
     * @const
     */
    "InternalErrorOccurred": "InternalErrorOccurred"
};



export default AssessedNetworkAdapter;

