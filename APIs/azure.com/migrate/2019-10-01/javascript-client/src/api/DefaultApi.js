/**
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssessedMachine from '../model/AssessedMachine';
import AssessedMachineResultList from '../model/AssessedMachineResultList';
import Assessment from '../model/Assessment';
import AssessmentOptions from '../model/AssessmentOptions';
import AssessmentOptionsResultList from '../model/AssessmentOptionsResultList';
import AssessmentResultList from '../model/AssessmentResultList';
import CloudError from '../model/CloudError';
import DownloadUrl from '../model/DownloadUrl';
import Group from '../model/Group';
import GroupResultList from '../model/GroupResultList';
import HyperVCollector from '../model/HyperVCollector';
import HyperVCollectorList from '../model/HyperVCollectorList';
import Machine from '../model/Machine';
import MachineResultList from '../model/MachineResultList';
import OperationResultList from '../model/OperationResultList';
import Project from '../model/Project';
import ProjectResultList from '../model/ProjectResultList';
import UpdateGroupBody from '../model/UpdateGroupBody';
import VMwareCollector from '../model/VMwareCollector';
import VMwareCollectorList from '../model/VMwareCollectorList';

/**
* Default service.
* @module api/DefaultApi
* @version 2019-10-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the assessedMachinesGet operation.
     * @callback module:api/DefaultApi~assessedMachinesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssessedMachine} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an assessed machine.
     * Get an assessed machine with its size & cost estimate that was evaluated in the specified assessment.
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {String} groupName Unique name of a group within a project.
     * @param {String} assessmentName Unique name of an assessment within a project.
     * @param {String} assessedMachineName Unique name of an assessed machine evaluated as part of an assessment.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~assessedMachinesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssessedMachine}
     */
    assessedMachinesGet(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, assessedMachineName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling assessedMachinesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling assessedMachinesGet");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling assessedMachinesGet");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling assessedMachinesGet");
      }
      // verify the required parameter 'assessmentName' is set
      if (assessmentName === undefined || assessmentName === null) {
        throw new Error("Missing the required parameter 'assessmentName' when calling assessedMachinesGet");
      }
      // verify the required parameter 'assessedMachineName' is set
      if (assessedMachineName === undefined || assessedMachineName === null) {
        throw new Error("Missing the required parameter 'assessedMachineName' when calling assessedMachinesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling assessedMachinesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName,
        'groupName': groupName,
        'assessmentName': assessmentName,
        'assessedMachineName': assessedMachineName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssessedMachine;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/assessedMachines/{assessedMachineName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assessedMachinesListByAssessment operation.
     * @callback module:api/DefaultApi~assessedMachinesListByAssessmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssessedMachineResultList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get assessed machines for assessment.
     * Get list of machines that assessed as part of the specified assessment. Returns a json array of objects of type 'assessedMachine' as specified in the Models section.  Whenever an assessment is created or updated, it goes under computation. During this phase, the 'status' field of Assessment object reports 'Computing'. During the period when the assessment is under computation, the list of assessed machines is empty and no assessed machines are returned by this call. 
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {String} groupName Unique name of a group within a project.
     * @param {String} assessmentName Unique name of an assessment within a project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~assessedMachinesListByAssessmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssessedMachineResultList}
     */
    assessedMachinesListByAssessment(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling assessedMachinesListByAssessment");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling assessedMachinesListByAssessment");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling assessedMachinesListByAssessment");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling assessedMachinesListByAssessment");
      }
      // verify the required parameter 'assessmentName' is set
      if (assessmentName === undefined || assessmentName === null) {
        throw new Error("Missing the required parameter 'assessmentName' when calling assessedMachinesListByAssessment");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling assessedMachinesListByAssessment");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName,
        'groupName': groupName,
        'assessmentName': assessmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssessedMachineResultList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/assessedMachines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assessmentsCreate operation.
     * @callback module:api/DefaultApi~assessmentsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Assessment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or Update assessment.
     * Create a new assessment with the given name and the specified settings. Since name of an assessment in a project is a unique identifier, if an assessment with the name provided already exists, then the existing assessment is updated.  Any PUT operation, resulting in either create or update on an assessment, will cause the assessment to go in a \"InProgress\" state. This will be indicated by the field 'computationState' on the Assessment object. During this time no other PUT operation will be allowed on that assessment object, nor will a Delete operation. Once the computation for the assessment is complete, the field 'computationState' will be updated to 'Ready', and then other PUT or DELETE operations can happen on the assessment.  When assessment is under computation, any PUT will lead to a 400 - Bad Request error. 
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {String} groupName Unique name of a group within a project.
     * @param {String} assessmentName Unique name of an assessment within a project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:model/Assessment} [assessment] New or Updated Assessment object.
     * @param {module:api/DefaultApi~assessmentsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Assessment}
     */
    assessmentsCreate(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = opts['assessment'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling assessmentsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling assessmentsCreate");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling assessmentsCreate");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling assessmentsCreate");
      }
      // verify the required parameter 'assessmentName' is set
      if (assessmentName === undefined || assessmentName === null) {
        throw new Error("Missing the required parameter 'assessmentName' when calling assessmentsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling assessmentsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName,
        'groupName': groupName,
        'assessmentName': assessmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Assessment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assessmentsDelete operation.
     * @callback module:api/DefaultApi~assessmentsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an assessment from the project.
     * Delete an assessment from the project. The machines remain in the assessment. Deleting a non-existent assessment results in a no-operation.  When an assessment is under computation, as indicated by the 'computationState' field, it cannot be deleted. Any such attempt will return a 400 - Bad Request. 
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {String} groupName Unique name of a group within a project.
     * @param {String} assessmentName Unique name of an assessment within a project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~assessmentsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    assessmentsDelete(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling assessmentsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling assessmentsDelete");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling assessmentsDelete");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling assessmentsDelete");
      }
      // verify the required parameter 'assessmentName' is set
      if (assessmentName === undefined || assessmentName === null) {
        throw new Error("Missing the required parameter 'assessmentName' when calling assessmentsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling assessmentsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName,
        'groupName': groupName,
        'assessmentName': assessmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assessmentsGet operation.
     * @callback module:api/DefaultApi~assessmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Assessment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an assessment.
     * Get an existing assessment with the specified name. Returns a json object of type 'assessment' as specified in Models section.
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {String} groupName Unique name of a group within a project.
     * @param {String} assessmentName Unique name of an assessment within a project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~assessmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Assessment}
     */
    assessmentsGet(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling assessmentsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling assessmentsGet");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling assessmentsGet");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling assessmentsGet");
      }
      // verify the required parameter 'assessmentName' is set
      if (assessmentName === undefined || assessmentName === null) {
        throw new Error("Missing the required parameter 'assessmentName' when calling assessmentsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling assessmentsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName,
        'groupName': groupName,
        'assessmentName': assessmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Assessment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assessmentsGetReportDownloadUrl operation.
     * @callback module:api/DefaultApi~assessmentsGetReportDownloadUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DownloadUrl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get download URL for the assessment report.
     * Get the URL for downloading the assessment in a report format.
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {String} groupName Unique name of a group within a project.
     * @param {String} assessmentName Unique name of an assessment within a project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~assessmentsGetReportDownloadUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DownloadUrl}
     */
    assessmentsGetReportDownloadUrl(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling assessmentsGetReportDownloadUrl");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling assessmentsGetReportDownloadUrl");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling assessmentsGetReportDownloadUrl");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling assessmentsGetReportDownloadUrl");
      }
      // verify the required parameter 'assessmentName' is set
      if (assessmentName === undefined || assessmentName === null) {
        throw new Error("Missing the required parameter 'assessmentName' when calling assessmentsGetReportDownloadUrl");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling assessmentsGetReportDownloadUrl");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName,
        'groupName': groupName,
        'assessmentName': assessmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DownloadUrl;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/downloadUrl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assessmentsListByGroup operation.
     * @callback module:api/DefaultApi~assessmentsListByGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssessmentResultList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all assessments created for the specified group.
     * Get all assessments created for the specified group.  Returns a json array of objects of type 'assessment' as specified in Models section. 
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {String} groupName Unique name of a group within a project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~assessmentsListByGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssessmentResultList}
     */
    assessmentsListByGroup(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling assessmentsListByGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling assessmentsListByGroup");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling assessmentsListByGroup");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling assessmentsListByGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling assessmentsListByGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName,
        'groupName': groupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssessmentResultList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assessmentsListByProject operation.
     * @callback module:api/DefaultApi~assessmentsListByProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssessmentResultList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all assessments created in the project.
     * Get all assessments created in the project.  Returns a json array of objects of type 'assessment' as specified in Models section. 
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~assessmentsListByProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssessmentResultList}
     */
    assessmentsListByProject(subscriptionId, resourceGroupName, projectName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling assessmentsListByProject");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling assessmentsListByProject");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling assessmentsListByProject");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling assessmentsListByProject");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssessmentResultList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsCreate operation.
     * @callback module:api/DefaultApi~groupsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new group with specified settings.
     * Create a new group by sending a json object of type 'group' as given in Models section as part of the Request Body. The group name in a project is unique.  This operation is Idempotent. 
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {String} groupName Unique name of a group within a project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:model/Group} [group] New or Updated Group object.
     * @param {module:api/DefaultApi~groupsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    groupsCreate(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = opts['group'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling groupsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling groupsCreate");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling groupsCreate");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling groupsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling groupsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName,
        'groupName': groupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsDelete operation.
     * @callback module:api/DefaultApi~groupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the group
     * Delete the group from the project. The machines remain in the project. Deleting a non-existent group results in a no-operation.  A group is an aggregation mechanism for machines in a project. Therefore, deleting group does not delete machines in it. 
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {String} groupName Unique name of a group within a project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~groupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    groupsDelete(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling groupsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling groupsDelete");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling groupsDelete");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling groupsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling groupsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName,
        'groupName': groupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsGet operation.
     * @callback module:api/DefaultApi~groupsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific group.
     * Get information related to a specific group in the project. Returns a json object of type 'group' as specified in the models section.
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {String} groupName Unique name of a group within a project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~groupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    groupsGet(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling groupsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling groupsGet");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling groupsGet");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling groupsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling groupsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName,
        'groupName': groupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsListByProject operation.
     * @callback module:api/DefaultApi~groupsListByProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupResultList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all groups
     * Get all groups created in the project. Returns a json array of objects of type 'group' as specified in the Models section.
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~groupsListByProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupResultList}
     */
    groupsListByProject(subscriptionId, resourceGroupName, projectName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling groupsListByProject");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling groupsListByProject");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling groupsListByProject");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling groupsListByProject");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupResultList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsUpdateMachines operation.
     * @callback module:api/DefaultApi~groupsUpdateMachinesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update machines in group.
     * Update machines in group by adding or removing machines.
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {String} groupName Unique name of a group within a project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:model/UpdateGroupBody} [groupUpdateProperties] Machines list to be added or removed from group.
     * @param {module:api/DefaultApi~groupsUpdateMachinesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    groupsUpdateMachines(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = opts['groupUpdateProperties'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling groupsUpdateMachines");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling groupsUpdateMachines");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling groupsUpdateMachines");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling groupsUpdateMachines");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling groupsUpdateMachines");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName,
        'groupName': groupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/updateMachines', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hyperVCollectorsCreate operation.
     * @callback module:api/DefaultApi~hyperVCollectorsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HyperVCollector} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or Update Hyper-V collector.
     * Create or Update Hyper-V collector
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {String} hyperVCollectorName Unique name of a Hyper-V collector within a project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:model/HyperVCollector} [collectorBody] New or Updated Hyper-V collector.
     * @param {module:api/DefaultApi~hyperVCollectorsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HyperVCollector}
     */
    hyperVCollectorsCreate(subscriptionId, resourceGroupName, projectName, hyperVCollectorName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = opts['collectorBody'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hyperVCollectorsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hyperVCollectorsCreate");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling hyperVCollectorsCreate");
      }
      // verify the required parameter 'hyperVCollectorName' is set
      if (hyperVCollectorName === undefined || hyperVCollectorName === null) {
        throw new Error("Missing the required parameter 'hyperVCollectorName' when calling hyperVCollectorsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hyperVCollectorsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName,
        'hyperVCollectorName': hyperVCollectorName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HyperVCollector;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors/{hyperVCollectorName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hyperVCollectorsDelete operation.
     * @callback module:api/DefaultApi~hyperVCollectorsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes Hyper-V collector from the project.
     * Delete a Hyper-V collector from the project.
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {String} hyperVCollectorName Unique name of a Hyper-V collector within a project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~hyperVCollectorsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    hyperVCollectorsDelete(subscriptionId, resourceGroupName, projectName, hyperVCollectorName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hyperVCollectorsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hyperVCollectorsDelete");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling hyperVCollectorsDelete");
      }
      // verify the required parameter 'hyperVCollectorName' is set
      if (hyperVCollectorName === undefined || hyperVCollectorName === null) {
        throw new Error("Missing the required parameter 'hyperVCollectorName' when calling hyperVCollectorsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hyperVCollectorsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName,
        'hyperVCollectorName': hyperVCollectorName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors/{hyperVCollectorName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hyperVCollectorsGet operation.
     * @callback module:api/DefaultApi~hyperVCollectorsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HyperVCollector} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Hyper-V collector.
     * Get a Hyper-V collector.
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {String} hyperVCollectorName Unique name of a Hyper-V collector within a project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~hyperVCollectorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HyperVCollector}
     */
    hyperVCollectorsGet(subscriptionId, resourceGroupName, projectName, hyperVCollectorName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hyperVCollectorsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hyperVCollectorsGet");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling hyperVCollectorsGet");
      }
      // verify the required parameter 'hyperVCollectorName' is set
      if (hyperVCollectorName === undefined || hyperVCollectorName === null) {
        throw new Error("Missing the required parameter 'hyperVCollectorName' when calling hyperVCollectorsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hyperVCollectorsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName,
        'hyperVCollectorName': hyperVCollectorName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HyperVCollector;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors/{hyperVCollectorName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hyperVCollectorsListByProject operation.
     * @callback module:api/DefaultApi~hyperVCollectorsListByProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HyperVCollectorList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of Hyper-V collector.
     * Get a list of Hyper-V collector.
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~hyperVCollectorsListByProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HyperVCollectorList}
     */
    hyperVCollectorsListByProject(subscriptionId, resourceGroupName, projectName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hyperVCollectorsListByProject");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hyperVCollectorsListByProject");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling hyperVCollectorsListByProject");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hyperVCollectorsListByProject");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HyperVCollectorList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the machinesGet operation.
     * @callback module:api/DefaultApi~machinesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Machine} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific machine.
     * Get the machine with the specified name. Returns a json object of type 'machine' defined in Models section.
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {String} machineName Unique name of a machine in private datacenter.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~machinesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Machine}
     */
    machinesGet(subscriptionId, resourceGroupName, projectName, machineName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling machinesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling machinesGet");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling machinesGet");
      }
      // verify the required parameter 'machineName' is set
      if (machineName === undefined || machineName === null) {
        throw new Error("Missing the required parameter 'machineName' when calling machinesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling machinesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName,
        'machineName': machineName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Machine;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/machines/{machineName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the machinesListByProject operation.
     * @callback module:api/DefaultApi~machinesListByProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MachineResultList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all machines in the project
     * Get data of all the machines available in the project. Returns a json array of objects of type 'machine' defined in Models section.
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~machinesListByProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MachineResultList}
     */
    machinesListByProject(subscriptionId, resourceGroupName, projectName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling machinesListByProject");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling machinesListByProject");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling machinesListByProject");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling machinesListByProject");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MachineResultList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/machines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the operationsList operation.
     * @callback module:api/DefaultApi~operationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationResultList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of operations supported in the API.
     * Get a list of REST API supported by Microsoft.Migrate provider.
     * @param {module:api/DefaultApi~operationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationResultList}
     */
    operationsList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationResultList;
      return this.apiClient.callApi(
        '/providers/Microsoft.Migrate/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectAssessmentOptions operation.
     * @callback module:api/DefaultApi~projectAssessmentOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssessmentOptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all available options for the properties of an assessment on a project.
     * Get all available options for the properties of an assessment on a project.
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {String} assessmentOptionsName Name of the assessment options. The only name accepted in default.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~projectAssessmentOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssessmentOptions}
     */
    projectAssessmentOptions(subscriptionId, resourceGroupName, projectName, assessmentOptionsName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling projectAssessmentOptions");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling projectAssessmentOptions");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling projectAssessmentOptions");
      }
      // verify the required parameter 'assessmentOptionsName' is set
      if (assessmentOptionsName === undefined || assessmentOptionsName === null) {
        throw new Error("Missing the required parameter 'assessmentOptionsName' when calling projectAssessmentOptions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling projectAssessmentOptions");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName,
        'assessmentOptionsName': assessmentOptionsName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssessmentOptions;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessmentOptions/{assessmentOptionsName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectAssessmentOptionsList operation.
     * @callback module:api/DefaultApi~projectAssessmentOptionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssessmentOptionsResultList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets list of all available options for the properties of an assessment on a project.
     * Gets list of all available options for the properties of an assessment on a project.
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~projectAssessmentOptionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssessmentOptionsResultList}
     */
    projectAssessmentOptionsList(subscriptionId, resourceGroupName, projectName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling projectAssessmentOptionsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling projectAssessmentOptionsList");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling projectAssessmentOptionsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling projectAssessmentOptionsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssessmentOptionsResultList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessmentOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsCreate operation.
     * @callback module:api/DefaultApi~projectsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update project.
     * Create a project with specified name. If a project already exists, update it.
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:model/Project} [project] New or Updated project object.
     * @param {module:api/DefaultApi~projectsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    projectsCreate(subscriptionId, resourceGroupName, projectName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = opts['project'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling projectsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling projectsCreate");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling projectsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling projectsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsDelete operation.
     * @callback module:api/DefaultApi~projectsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the project
     * Delete the project. Deleting non-existent project is a no-operation.
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~projectsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectsDelete(subscriptionId, resourceGroupName, projectName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling projectsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling projectsDelete");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling projectsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling projectsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsGet operation.
     * @callback module:api/DefaultApi~projectsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the specified project.
     * Get the project with the specified name.
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~projectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    projectsGet(subscriptionId, resourceGroupName, projectName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling projectsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling projectsGet");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling projectsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling projectsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsList operation.
     * @callback module:api/DefaultApi~projectsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectResultList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all projects.
     * Get all the projects in the resource group.
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~projectsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectResultList}
     */
    projectsList(subscriptionId, resourceGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling projectsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling projectsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling projectsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectResultList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsListBySubscription operation.
     * @callback module:api/DefaultApi~projectsListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectResultList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all projects.
     * Get all the projects in the subscription.
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~projectsListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectResultList}
     */
    projectsListBySubscription(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling projectsListBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling projectsListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectResultList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Migrate/assessmentProjects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsUpdate operation.
     * @callback module:api/DefaultApi~projectsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project.
     * Update a project with specified name. Supports partial updates, for example only tags can be provided.
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:model/Project} [project] Updated project object.
     * @param {module:api/DefaultApi~projectsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    projectsUpdate(subscriptionId, resourceGroupName, projectName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = opts['project'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling projectsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling projectsUpdate");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling projectsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling projectsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vMwareCollectorsCreate operation.
     * @callback module:api/DefaultApi~vMwareCollectorsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VMwareCollector} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or Update VMware collector.
     * Create or Update VMware collector
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {String} vmWareCollectorName Unique name of a VMware collector within a project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:model/VMwareCollector} [collectorBody] New or Updated VMware collector.
     * @param {module:api/DefaultApi~vMwareCollectorsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VMwareCollector}
     */
    vMwareCollectorsCreate(subscriptionId, resourceGroupName, projectName, vmWareCollectorName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = opts['collectorBody'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vMwareCollectorsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vMwareCollectorsCreate");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling vMwareCollectorsCreate");
      }
      // verify the required parameter 'vmWareCollectorName' is set
      if (vmWareCollectorName === undefined || vmWareCollectorName === null) {
        throw new Error("Missing the required parameter 'vmWareCollectorName' when calling vMwareCollectorsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vMwareCollectorsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName,
        'vmWareCollectorName': vmWareCollectorName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VMwareCollector;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors/{vmWareCollectorName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vMwareCollectorsDelete operation.
     * @callback module:api/DefaultApi~vMwareCollectorsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes VMware collector from the project.
     * Delete a VMware collector from the project.
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {String} vmWareCollectorName Unique name of a VMware collector within a project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~vMwareCollectorsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vMwareCollectorsDelete(subscriptionId, resourceGroupName, projectName, vmWareCollectorName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vMwareCollectorsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vMwareCollectorsDelete");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling vMwareCollectorsDelete");
      }
      // verify the required parameter 'vmWareCollectorName' is set
      if (vmWareCollectorName === undefined || vmWareCollectorName === null) {
        throw new Error("Missing the required parameter 'vmWareCollectorName' when calling vMwareCollectorsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vMwareCollectorsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName,
        'vmWareCollectorName': vmWareCollectorName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors/{vmWareCollectorName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vMwareCollectorsGet operation.
     * @callback module:api/DefaultApi~vMwareCollectorsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VMwareCollector} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a VMware collector.
     * Get a VMware collector.
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {String} vmWareCollectorName Unique name of a VMware collector within a project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~vMwareCollectorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VMwareCollector}
     */
    vMwareCollectorsGet(subscriptionId, resourceGroupName, projectName, vmWareCollectorName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vMwareCollectorsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vMwareCollectorsGet");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling vMwareCollectorsGet");
      }
      // verify the required parameter 'vmWareCollectorName' is set
      if (vmWareCollectorName === undefined || vmWareCollectorName === null) {
        throw new Error("Missing the required parameter 'vmWareCollectorName' when calling vMwareCollectorsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vMwareCollectorsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName,
        'vmWareCollectorName': vmWareCollectorName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VMwareCollector;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors/{vmWareCollectorName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vMwareCollectorsListByProject operation.
     * @callback module:api/DefaultApi~vMwareCollectorsListByProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VMwareCollectorList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of VMware collector.
     * Get a list of VMware collector.
     * @param {String} subscriptionId Azure Subscription Id in which project was created.
     * @param {String} resourceGroupName Name of the Azure Resource Group that project is part of.
     * @param {String} projectName Name of the Azure Migrate project.
     * @param {module:model/String} apiVersion Standard request header. Used by service to identify API version used by client.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Standard request header. Used by service to respond to client in appropriate language.
     * @param {module:api/DefaultApi~vMwareCollectorsListByProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VMwareCollectorList}
     */
    vMwareCollectorsListByProject(subscriptionId, resourceGroupName, projectName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vMwareCollectorsListByProject");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vMwareCollectorsListByProject");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling vMwareCollectorsListByProject");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vMwareCollectorsListByProject");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'projectName': projectName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VMwareCollectorList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
