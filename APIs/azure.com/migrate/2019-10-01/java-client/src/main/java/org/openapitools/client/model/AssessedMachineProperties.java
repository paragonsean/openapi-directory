/*
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.AssessedDisk;
import org.openapitools.client.model.AssessedNetworkAdapter;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of an assessed machine.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:36.892251-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssessedMachineProperties {
  /**
   * Boot type of the machine.
   */
  @JsonAdapter(BootTypeEnum.Adapter.class)
  public enum BootTypeEnum {
    UNKNOWN("Unknown"),
    
    EFI("EFI"),
    
    BIOS("BIOS");

    private String value;

    BootTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BootTypeEnum fromValue(String value) {
      for (BootTypeEnum b : BootTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BootTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BootTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BootTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BootTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BootTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BOOT_TYPE = "bootType";
  @SerializedName(SERIALIZED_NAME_BOOT_TYPE)
  private BootTypeEnum bootType;

  public static final String SERIALIZED_NAME_CONFIDENCE_RATING_IN_PERCENTAGE = "confidenceRatingInPercentage";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE_RATING_IN_PERCENTAGE)
  private Double confidenceRatingInPercentage;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "createdTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private OffsetDateTime createdTimestamp;

  public static final String SERIALIZED_NAME_DATACENTER_MACHINE_ARM_ID = "datacenterMachineArmId";
  @SerializedName(SERIALIZED_NAME_DATACENTER_MACHINE_ARM_ID)
  private String datacenterMachineArmId;

  public static final String SERIALIZED_NAME_DATACENTER_MANAGEMENT_SERVER_ARM_ID = "datacenterManagementServerArmId";
  @SerializedName(SERIALIZED_NAME_DATACENTER_MANAGEMENT_SERVER_ARM_ID)
  private String datacenterManagementServerArmId;

  public static final String SERIALIZED_NAME_DATACENTER_MANAGEMENT_SERVER_NAME = "datacenterManagementServerName";
  @SerializedName(SERIALIZED_NAME_DATACENTER_MANAGEMENT_SERVER_NAME)
  private String datacenterManagementServerName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISKS = "disks";
  @SerializedName(SERIALIZED_NAME_DISKS)
  private Map<String, AssessedDisk> disks = new HashMap<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_MEGABYTES_OF_MEMORY = "megabytesOfMemory";
  @SerializedName(SERIALIZED_NAME_MEGABYTES_OF_MEMORY)
  private Double megabytesOfMemory;

  public static final String SERIALIZED_NAME_MEGABYTES_OF_MEMORY_FOR_RECOMMENDED_SIZE = "megabytesOfMemoryForRecommendedSize";
  @SerializedName(SERIALIZED_NAME_MEGABYTES_OF_MEMORY_FOR_RECOMMENDED_SIZE)
  private Double megabytesOfMemoryForRecommendedSize;

  public static final String SERIALIZED_NAME_MONTHLY_BANDWIDTH_COST = "monthlyBandwidthCost";
  @SerializedName(SERIALIZED_NAME_MONTHLY_BANDWIDTH_COST)
  private Double monthlyBandwidthCost;

  public static final String SERIALIZED_NAME_MONTHLY_COMPUTE_COST_FOR_RECOMMENDED_SIZE = "monthlyComputeCostForRecommendedSize";
  @SerializedName(SERIALIZED_NAME_MONTHLY_COMPUTE_COST_FOR_RECOMMENDED_SIZE)
  private Double monthlyComputeCostForRecommendedSize;

  public static final String SERIALIZED_NAME_MONTHLY_PREMIUM_STORAGE_COST = "monthlyPremiumStorageCost";
  @SerializedName(SERIALIZED_NAME_MONTHLY_PREMIUM_STORAGE_COST)
  private Double monthlyPremiumStorageCost;

  public static final String SERIALIZED_NAME_MONTHLY_STANDARD_S_S_D_STORAGE_COST = "monthlyStandardSSDStorageCost";
  @SerializedName(SERIALIZED_NAME_MONTHLY_STANDARD_S_S_D_STORAGE_COST)
  private Double monthlyStandardSSDStorageCost;

  public static final String SERIALIZED_NAME_MONTHLY_STORAGE_COST = "monthlyStorageCost";
  @SerializedName(SERIALIZED_NAME_MONTHLY_STORAGE_COST)
  private Double monthlyStorageCost;

  public static final String SERIALIZED_NAME_NETWORK_ADAPTERS = "networkAdapters";
  @SerializedName(SERIALIZED_NAME_NETWORK_ADAPTERS)
  private Map<String, AssessedNetworkAdapter> networkAdapters = new HashMap<>();

  public static final String SERIALIZED_NAME_NUMBER_OF_CORES = "numberOfCores";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_CORES)
  private Integer numberOfCores;

  public static final String SERIALIZED_NAME_NUMBER_OF_CORES_FOR_RECOMMENDED_SIZE = "numberOfCoresForRecommendedSize";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_CORES_FOR_RECOMMENDED_SIZE)
  private Integer numberOfCoresForRecommendedSize;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM_NAME = "operatingSystemName";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM_NAME)
  private String operatingSystemName;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM_TYPE = "operatingSystemType";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM_TYPE)
  private String operatingSystemType;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM_VERSION = "operatingSystemVersion";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM_VERSION)
  private String operatingSystemVersion;

  public static final String SERIALIZED_NAME_PERCENTAGE_CORES_UTILIZATION = "percentageCoresUtilization";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_CORES_UTILIZATION)
  private Double percentageCoresUtilization;

  public static final String SERIALIZED_NAME_PERCENTAGE_MEMORY_UTILIZATION = "percentageMemoryUtilization";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_MEMORY_UTILIZATION)
  private Double percentageMemoryUtilization;

  /**
   * Recommended Azure size for this machine.
   */
  @JsonAdapter(RecommendedSizeEnum.Adapter.class)
  public enum RecommendedSizeEnum {
    UNKNOWN("Unknown"),
    
    BASIC_A0("Basic_A0"),
    
    BASIC_A1("Basic_A1"),
    
    BASIC_A2("Basic_A2"),
    
    BASIC_A3("Basic_A3"),
    
    BASIC_A4("Basic_A4"),
    
    STANDARD_A0("Standard_A0"),
    
    STANDARD_A1("Standard_A1"),
    
    STANDARD_A2("Standard_A2"),
    
    STANDARD_A3("Standard_A3"),
    
    STANDARD_A4("Standard_A4"),
    
    STANDARD_A5("Standard_A5"),
    
    STANDARD_A6("Standard_A6"),
    
    STANDARD_A7("Standard_A7"),
    
    STANDARD_A8("Standard_A8"),
    
    STANDARD_A9("Standard_A9"),
    
    STANDARD_A10("Standard_A10"),
    
    STANDARD_A11("Standard_A11"),
    
    STANDARD_A1_V2("Standard_A1_v2"),
    
    STANDARD_A2_V2("Standard_A2_v2"),
    
    STANDARD_A4_V2("Standard_A4_v2"),
    
    STANDARD_A8_V2("Standard_A8_v2"),
    
    STANDARD_A2M_V2("Standard_A2m_v2"),
    
    STANDARD_A4M_V2("Standard_A4m_v2"),
    
    STANDARD_A8M_V2("Standard_A8m_v2"),
    
    STANDARD_D1("Standard_D1"),
    
    STANDARD_D2("Standard_D2"),
    
    STANDARD_D3("Standard_D3"),
    
    STANDARD_D4("Standard_D4"),
    
    STANDARD_D11("Standard_D11"),
    
    STANDARD_D12("Standard_D12"),
    
    STANDARD_D13("Standard_D13"),
    
    STANDARD_D14("Standard_D14"),
    
    STANDARD_D1_V2("Standard_D1_v2"),
    
    STANDARD_D2_V2("Standard_D2_v2"),
    
    STANDARD_D3_V2("Standard_D3_v2"),
    
    STANDARD_D4_V2("Standard_D4_v2"),
    
    STANDARD_D5_V2("Standard_D5_v2"),
    
    STANDARD_D11_V2("Standard_D11_v2"),
    
    STANDARD_D12_V2("Standard_D12_v2"),
    
    STANDARD_D13_V2("Standard_D13_v2"),
    
    STANDARD_D14_V2("Standard_D14_v2"),
    
    STANDARD_D15_V2("Standard_D15_v2"),
    
    STANDARD_DS1("Standard_DS1"),
    
    STANDARD_DS2("Standard_DS2"),
    
    STANDARD_DS3("Standard_DS3"),
    
    STANDARD_DS4("Standard_DS4"),
    
    STANDARD_DS11("Standard_DS11"),
    
    STANDARD_DS12("Standard_DS12"),
    
    STANDARD_DS13("Standard_DS13"),
    
    STANDARD_DS14("Standard_DS14"),
    
    STANDARD_DS1_V2("Standard_DS1_v2"),
    
    STANDARD_DS2_V2("Standard_DS2_v2"),
    
    STANDARD_DS3_V2("Standard_DS3_v2"),
    
    STANDARD_DS4_V2("Standard_DS4_v2"),
    
    STANDARD_DS5_V2("Standard_DS5_v2"),
    
    STANDARD_DS11_V2("Standard_DS11_v2"),
    
    STANDARD_DS12_V2("Standard_DS12_v2"),
    
    STANDARD_DS13_V2("Standard_DS13_v2"),
    
    STANDARD_DS14_V2("Standard_DS14_v2"),
    
    STANDARD_DS15_V2("Standard_DS15_v2"),
    
    STANDARD_F1("Standard_F1"),
    
    STANDARD_F2("Standard_F2"),
    
    STANDARD_F4("Standard_F4"),
    
    STANDARD_F8("Standard_F8"),
    
    STANDARD_F16("Standard_F16"),
    
    STANDARD_F1S("Standard_F1s"),
    
    STANDARD_F2S("Standard_F2s"),
    
    STANDARD_F4S("Standard_F4s"),
    
    STANDARD_F8S("Standard_F8s"),
    
    STANDARD_F16S("Standard_F16s"),
    
    STANDARD_G1("Standard_G1"),
    
    STANDARD_G2("Standard_G2"),
    
    STANDARD_G3("Standard_G3"),
    
    STANDARD_G4("Standard_G4"),
    
    STANDARD_G5("Standard_G5"),
    
    STANDARD_GS1("Standard_GS1"),
    
    STANDARD_GS2("Standard_GS2"),
    
    STANDARD_GS3("Standard_GS3"),
    
    STANDARD_GS4("Standard_GS4"),
    
    STANDARD_GS5("Standard_GS5"),
    
    STANDARD_H8("Standard_H8"),
    
    STANDARD_H16("Standard_H16"),
    
    STANDARD_H8M("Standard_H8m"),
    
    STANDARD_H16M("Standard_H16m"),
    
    STANDARD_H16R("Standard_H16r"),
    
    STANDARD_H16MR("Standard_H16mr"),
    
    STANDARD_L4S("Standard_L4s"),
    
    STANDARD_L8S("Standard_L8s"),
    
    STANDARD_L16S("Standard_L16s"),
    
    STANDARD_L32S("Standard_L32s"),
    
    STANDARD_D2S_V3("Standard_D2s_v3"),
    
    STANDARD_D4S_V3("Standard_D4s_v3"),
    
    STANDARD_D8S_V3("Standard_D8s_v3"),
    
    STANDARD_D16S_V3("Standard_D16s_v3"),
    
    STANDARD_D32S_V3("Standard_D32s_v3"),
    
    STANDARD_D64S_V3("Standard_D64s_v3"),
    
    STANDARD_D2_V3("Standard_D2_v3"),
    
    STANDARD_D4_V3("Standard_D4_v3"),
    
    STANDARD_D8_V3("Standard_D8_v3"),
    
    STANDARD_D16_V3("Standard_D16_v3"),
    
    STANDARD_D32_V3("Standard_D32_v3"),
    
    STANDARD_D64_V3("Standard_D64_v3"),
    
    STANDARD_F2S_V2("Standard_F2s_v2"),
    
    STANDARD_F4S_V2("Standard_F4s_v2"),
    
    STANDARD_F8S_V2("Standard_F8s_v2"),
    
    STANDARD_F16S_V2("Standard_F16s_v2"),
    
    STANDARD_F32S_V2("Standard_F32s_v2"),
    
    STANDARD_F64S_V2("Standard_F64s_v2"),
    
    STANDARD_F72S_V2("Standard_F72s_v2"),
    
    STANDARD_E2_V3("Standard_E2_v3"),
    
    STANDARD_E4_V3("Standard_E4_v3"),
    
    STANDARD_E8_V3("Standard_E8_v3"),
    
    STANDARD_E16_V3("Standard_E16_v3"),
    
    STANDARD_E32_V3("Standard_E32_v3"),
    
    STANDARD_E64_V3("Standard_E64_v3"),
    
    STANDARD_E2S_V3("Standard_E2s_v3"),
    
    STANDARD_E4S_V3("Standard_E4s_v3"),
    
    STANDARD_E8S_V3("Standard_E8s_v3"),
    
    STANDARD_E16S_V3("Standard_E16s_v3"),
    
    STANDARD_E32S_V3("Standard_E32s_v3"),
    
    STANDARD_E64S_V3("Standard_E64s_v3"),
    
    STANDARD_M64S("Standard_M64s"),
    
    STANDARD_M64MS("Standard_M64ms"),
    
    STANDARD_M128S("Standard_M128s"),
    
    STANDARD_M128MS("Standard_M128ms");

    private String value;

    RecommendedSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecommendedSizeEnum fromValue(String value) {
      for (RecommendedSizeEnum b : RecommendedSizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecommendedSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecommendedSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecommendedSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecommendedSizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecommendedSizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECOMMENDED_SIZE = "recommendedSize";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_SIZE)
  private RecommendedSizeEnum recommendedSize;

  /**
   * Whether machine is suitable for migration to Azure.
   */
  @JsonAdapter(SuitabilityEnum.Adapter.class)
  public enum SuitabilityEnum {
    UNKNOWN("Unknown"),
    
    NOT_SUITABLE("NotSuitable"),
    
    SUITABLE("Suitable"),
    
    CONDITIONALLY_SUITABLE("ConditionallySuitable"),
    
    READINESS_UNKNOWN("ReadinessUnknown");

    private String value;

    SuitabilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SuitabilityEnum fromValue(String value) {
      for (SuitabilityEnum b : SuitabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SuitabilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SuitabilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SuitabilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SuitabilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SuitabilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUITABILITY = "suitability";
  @SerializedName(SERIALIZED_NAME_SUITABILITY)
  private SuitabilityEnum suitability;

  /**
   * If machine is not suitable for cloud, this explains the reasons.
   */
  @JsonAdapter(SuitabilityDetailEnum.Adapter.class)
  public enum SuitabilityDetailEnum {
    NONE("None"),
    
    RECOMMENDED_SIZE_HAS_LESS_NETWORK_ADAPTERS("RecommendedSizeHasLessNetworkAdapters"),
    
    CANNOT_REPORT_COMPUTE_COST("CannotReportComputeCost"),
    
    CANNOT_REPORT_STORAGE_COST("CannotReportStorageCost"),
    
    CANNOT_REPORT_BANDWIDTH_COSTS("CannotReportBandwidthCosts"),
    
    PERCENTAGE_OF_CORES_UTILIZED_MISSING("PercentageOfCoresUtilizedMissing"),
    
    PERCENTAGE_OF_MEMORY_UTILIZED_MISSING("PercentageOfMemoryUtilizedMissing"),
    
    PERCENTAGE_OF_CORES_UTILIZED_OUT_OF_RANGE("PercentageOfCoresUtilizedOutOfRange"),
    
    PERCENTAGE_OF_MEMORY_UTILIZED_OUT_OF_RANGE("PercentageOfMemoryUtilizedOutOfRange");

    private String value;

    SuitabilityDetailEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SuitabilityDetailEnum fromValue(String value) {
      for (SuitabilityDetailEnum b : SuitabilityDetailEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SuitabilityDetailEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SuitabilityDetailEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SuitabilityDetailEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SuitabilityDetailEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SuitabilityDetailEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUITABILITY_DETAIL = "suitabilityDetail";
  @SerializedName(SERIALIZED_NAME_SUITABILITY_DETAIL)
  private SuitabilityDetailEnum suitabilityDetail;

  /**
   * If machine is not ready to be migrated, this explains the reasons and mitigation steps.
   */
  @JsonAdapter(SuitabilityExplanationEnum.Adapter.class)
  public enum SuitabilityExplanationEnum {
    UNKNOWN("Unknown"),
    
    NOT_APPLICABLE("NotApplicable"),
    
    GUEST_OPERATING_SYSTEM_ARCHITECTURE_NOT_SUPPORTED("GuestOperatingSystemArchitectureNotSupported"),
    
    GUEST_OPERATING_SYSTEM_NOT_SUPPORTED("GuestOperatingSystemNotSupported"),
    
    BOOT_TYPE_NOT_SUPPORTED("BootTypeNotSupported"),
    
    MORE_DISKS_THAN_SUPPORTED("MoreDisksThanSupported"),
    
    NO_SUITABLE_VM_SIZE_FOUND("NoSuitableVmSizeFound"),
    
    ONE_OR_MORE_DISKS_NOT_SUITABLE("OneOrMoreDisksNotSuitable"),
    
    ONE_OR_MORE_ADAPTERS_NOT_SUITABLE("OneOrMoreAdaptersNotSuitable"),
    
    INTERNAL_ERROR_OCCURRED_DURING_COMPUTE_EVALUATION("InternalErrorOccurredDuringComputeEvaluation"),
    
    INTERNAL_ERROR_OCCURRED_DURING_STORAGE_EVALUATION("InternalErrorOccurredDuringStorageEvaluation"),
    
    INTERNAL_ERROR_OCCURRED_DURING_NETWORK_EVALUATION("InternalErrorOccurredDuringNetworkEvaluation"),
    
    NO_VM_SIZE_SUPPORTS_STORAGE_PERFORMANCE("NoVmSizeSupportsStoragePerformance"),
    
    NO_VM_SIZE_SUPPORTS_NETWORK_PERFORMANCE("NoVmSizeSupportsNetworkPerformance"),
    
    NO_VM_SIZE_FOR_SELECTED_PRICING_TIER("NoVmSizeForSelectedPricingTier"),
    
    NO_VM_SIZE_FOR_SELECTED_AZURE_LOCATION("NoVmSizeForSelectedAzureLocation"),
    
    CHECK_RED_HAT_LINUX_VERSION("CheckRedHatLinuxVersion"),
    
    CHECK_OPEN_SUSE_LINUX_VERSION("CheckOpenSuseLinuxVersion"),
    
    CHECK_WINDOWS_SERVER2008_R2_VERSION("CheckWindowsServer2008R2Version"),
    
    CHECK_CENT_OS_VERSION("CheckCentOsVersion"),
    
    CHECK_DEBIAN_LINUX_VERSION("CheckDebianLinuxVersion"),
    
    CHECK_SUSE_LINUX_VERSION("CheckSuseLinuxVersion"),
    
    CHECK_ORACLE_LINUX_VERSION("CheckOracleLinuxVersion"),
    
    CHECK_UBUNTU_LINUX_VERSION("CheckUbuntuLinuxVersion"),
    
    CHECK_CORE_OS_LINUX_VERSION("CheckCoreOsLinuxVersion"),
    
    WINDOWS_SERVER_VERSION_CONDITIONALLY_SUPPORTED("WindowsServerVersionConditionallySupported"),
    
    NO_GUEST_OPERATING_SYSTEM_CONDITIONALLY_SUPPORTED("NoGuestOperatingSystemConditionallySupported"),
    
    WINDOWS_CLIENT_VERSIONS_CONDITIONALLY_SUPPORTED("WindowsClientVersionsConditionallySupported"),
    
    BOOT_TYPE_UNKNOWN("BootTypeUnknown"),
    
    GUEST_OPERATING_SYSTEM_UNKNOWN("GuestOperatingSystemUnknown"),
    
    WINDOWS_SERVER_VERSIONS_SUPPORTED_WITH_CAVEAT("WindowsServerVersionsSupportedWithCaveat"),
    
    WINDOWS_OSNO_LONGER_UNDER_MS_SUPPORT("WindowsOSNoLongerUnderMSSupport"),
    
    ENDORSED_WITH_CONDITIONS_LINUX_DISTRIBUTIONS("EndorsedWithConditionsLinuxDistributions"),
    
    UNENDORSED_LINUX_DISTRIBUTIONS("UnendorsedLinuxDistributions"),
    
    NO_VM_SIZE_FOR_STANDARD_PRICING_TIER("NoVmSizeForStandardPricingTier"),
    
    NO_VM_SIZE_FOR_BASIC_PRICING_TIER("NoVmSizeForBasicPricingTier");

    private String value;

    SuitabilityExplanationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SuitabilityExplanationEnum fromValue(String value) {
      for (SuitabilityExplanationEnum b : SuitabilityExplanationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SuitabilityExplanationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SuitabilityExplanationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SuitabilityExplanationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SuitabilityExplanationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SuitabilityExplanationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUITABILITY_EXPLANATION = "suitabilityExplanation";
  @SerializedName(SERIALIZED_NAME_SUITABILITY_EXPLANATION)
  private SuitabilityExplanationEnum suitabilityExplanation;

  public static final String SERIALIZED_NAME_UPDATED_TIMESTAMP = "updatedTimestamp";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIMESTAMP)
  private OffsetDateTime updatedTimestamp;

  public AssessedMachineProperties() {
  }

  public AssessedMachineProperties(
     BootTypeEnum bootType, 
     Double confidenceRatingInPercentage, 
     OffsetDateTime createdTimestamp, 
     String datacenterMachineArmId, 
     String datacenterManagementServerArmId, 
     String datacenterManagementServerName, 
     String description, 
     Map<String, AssessedDisk> disks, 
     String displayName, 
     Double megabytesOfMemory, 
     Double megabytesOfMemoryForRecommendedSize, 
     Double monthlyBandwidthCost, 
     Double monthlyComputeCostForRecommendedSize, 
     Double monthlyPremiumStorageCost, 
     Double monthlyStandardSSDStorageCost, 
     Double monthlyStorageCost, 
     Map<String, AssessedNetworkAdapter> networkAdapters, 
     Integer numberOfCores, 
     Integer numberOfCoresForRecommendedSize, 
     String operatingSystemName, 
     String operatingSystemType, 
     String operatingSystemVersion, 
     Double percentageCoresUtilization, 
     Double percentageMemoryUtilization, 
     RecommendedSizeEnum recommendedSize, 
     SuitabilityEnum suitability, 
     SuitabilityDetailEnum suitabilityDetail, 
     SuitabilityExplanationEnum suitabilityExplanation, 
     OffsetDateTime updatedTimestamp
  ) {
    this();
    this.bootType = bootType;
    this.confidenceRatingInPercentage = confidenceRatingInPercentage;
    this.createdTimestamp = createdTimestamp;
    this.datacenterMachineArmId = datacenterMachineArmId;
    this.datacenterManagementServerArmId = datacenterManagementServerArmId;
    this.datacenterManagementServerName = datacenterManagementServerName;
    this.description = description;
    this.disks = disks;
    this.displayName = displayName;
    this.megabytesOfMemory = megabytesOfMemory;
    this.megabytesOfMemoryForRecommendedSize = megabytesOfMemoryForRecommendedSize;
    this.monthlyBandwidthCost = monthlyBandwidthCost;
    this.monthlyComputeCostForRecommendedSize = monthlyComputeCostForRecommendedSize;
    this.monthlyPremiumStorageCost = monthlyPremiumStorageCost;
    this.monthlyStandardSSDStorageCost = monthlyStandardSSDStorageCost;
    this.monthlyStorageCost = monthlyStorageCost;
    this.networkAdapters = networkAdapters;
    this.numberOfCores = numberOfCores;
    this.numberOfCoresForRecommendedSize = numberOfCoresForRecommendedSize;
    this.operatingSystemName = operatingSystemName;
    this.operatingSystemType = operatingSystemType;
    this.operatingSystemVersion = operatingSystemVersion;
    this.percentageCoresUtilization = percentageCoresUtilization;
    this.percentageMemoryUtilization = percentageMemoryUtilization;
    this.recommendedSize = recommendedSize;
    this.suitability = suitability;
    this.suitabilityDetail = suitabilityDetail;
    this.suitabilityExplanation = suitabilityExplanation;
    this.updatedTimestamp = updatedTimestamp;
  }

  /**
   * Boot type of the machine.
   * @return bootType
   */
  @javax.annotation.Nullable
  public BootTypeEnum getBootType() {
    return bootType;
  }



  /**
   * Confidence rating of assessed machine.
   * @return confidenceRatingInPercentage
   */
  @javax.annotation.Nullable
  public Double getConfidenceRatingInPercentage() {
    return confidenceRatingInPercentage;
  }



  /**
   * Time when this machine was created. Date-Time represented in ISO-8601 format.
   * @return createdTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTimestamp() {
    return createdTimestamp;
  }



  /**
   * ARM ID of the discovered machine.
   * @return datacenterMachineArmId
   */
  @javax.annotation.Nullable
  public String getDatacenterMachineArmId() {
    return datacenterMachineArmId;
  }



  /**
   * ARM ID of the discovered datacenter.
   * @return datacenterManagementServerArmId
   */
  @javax.annotation.Nullable
  public String getDatacenterManagementServerArmId() {
    return datacenterManagementServerArmId;
  }



  /**
   * Name of the server hosting the datacenter management solution.
   * @return datacenterManagementServerName
   */
  @javax.annotation.Nullable
  public String getDatacenterManagementServerName() {
    return datacenterManagementServerName;
  }



  /**
   * Description of the machine
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * Dictionary of disks attached to the machine. Key is ID of disk. Value is a disk object.
   * @return disks
   */
  @javax.annotation.Nullable
  public Map<String, AssessedDisk> getDisks() {
    return disks;
  }



  /**
   * User readable name of the machine as defined by the user in their private datacenter.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  /**
   * Memory in Megabytes.
   * @return megabytesOfMemory
   */
  @javax.annotation.Nullable
  public Double getMegabytesOfMemory() {
    return megabytesOfMemory;
  }



  /**
   * Megabytes of memory in the Recommended Azure VM Size.
   * @return megabytesOfMemoryForRecommendedSize
   */
  @javax.annotation.Nullable
  public Double getMegabytesOfMemoryForRecommendedSize() {
    return megabytesOfMemoryForRecommendedSize;
  }



  /**
   * Monthly network cost estimate for the network adapters that are attached to this machine as a group, for a 31-day month.
   * @return monthlyBandwidthCost
   */
  @javax.annotation.Nullable
  public Double getMonthlyBandwidthCost() {
    return monthlyBandwidthCost;
  }



  /**
   * Compute Cost for a 31-day month, if the machine is migrated to Azure with the Recommended Size.
   * @return monthlyComputeCostForRecommendedSize
   */
  @javax.annotation.Nullable
  public Double getMonthlyComputeCostForRecommendedSize() {
    return monthlyComputeCostForRecommendedSize;
  }



  /**
   * Monthly premium storage cost estimate for the disks that are attached to this machine as a group, for a 31-day month.
   * @return monthlyPremiumStorageCost
   */
  @javax.annotation.Nullable
  public Double getMonthlyPremiumStorageCost() {
    return monthlyPremiumStorageCost;
  }



  /**
   * Monthly standard SSD storage cost estimate for the disks that are attached to this machine as a group, for a 31-day month.
   * @return monthlyStandardSSDStorageCost
   */
  @javax.annotation.Nullable
  public Double getMonthlyStandardSSDStorageCost() {
    return monthlyStandardSSDStorageCost;
  }



  /**
   * Monthly storage cost estimate for the disks that are attached to this machine as a group, for a 31-day month.
   * @return monthlyStorageCost
   */
  @javax.annotation.Nullable
  public Double getMonthlyStorageCost() {
    return monthlyStorageCost;
  }



  /**
   * Dictionary of network adapters attached to the machine. Key is name of the adapter. Value is a network adapter object.
   * @return networkAdapters
   */
  @javax.annotation.Nullable
  public Map<String, AssessedNetworkAdapter> getNetworkAdapters() {
    return networkAdapters;
  }



  /**
   * Processor count.
   * @return numberOfCores
   */
  @javax.annotation.Nullable
  public Integer getNumberOfCores() {
    return numberOfCores;
  }



  /**
   * Number of CPU cores in the Recommended Azure VM Size.
   * @return numberOfCoresForRecommendedSize
   */
  @javax.annotation.Nullable
  public Integer getNumberOfCoresForRecommendedSize() {
    return numberOfCoresForRecommendedSize;
  }



  /**
   * Operating System name of the machine.
   * @return operatingSystemName
   */
  @javax.annotation.Nullable
  public String getOperatingSystemName() {
    return operatingSystemName;
  }



  /**
   * Operating System type of the machine.
   * @return operatingSystemType
   */
  @javax.annotation.Nullable
  public String getOperatingSystemType() {
    return operatingSystemType;
  }



  /**
   * Operating System version of the machine.
   * @return operatingSystemVersion
   */
  @javax.annotation.Nullable
  public String getOperatingSystemVersion() {
    return operatingSystemVersion;
  }



  /**
   * Utilization percentage of the processor core as observed in the private data center, in the Time Range selected on Assessment, reported as the Percentile value based on the percentile number selected in assessment.
   * @return percentageCoresUtilization
   */
  @javax.annotation.Nullable
  public Double getPercentageCoresUtilization() {
    return percentageCoresUtilization;
  }



  /**
   * Utilization percentage of the memory as observed in the private data center, in the Time Range selected on Assessment, reported as the Percentile value based on the percentile number selected in assessment.
   * @return percentageMemoryUtilization
   */
  @javax.annotation.Nullable
  public Double getPercentageMemoryUtilization() {
    return percentageMemoryUtilization;
  }



  /**
   * Recommended Azure size for this machine.
   * @return recommendedSize
   */
  @javax.annotation.Nullable
  public RecommendedSizeEnum getRecommendedSize() {
    return recommendedSize;
  }



  /**
   * Whether machine is suitable for migration to Azure.
   * @return suitability
   */
  @javax.annotation.Nullable
  public SuitabilityEnum getSuitability() {
    return suitability;
  }



  /**
   * If machine is not suitable for cloud, this explains the reasons.
   * @return suitabilityDetail
   */
  @javax.annotation.Nullable
  public SuitabilityDetailEnum getSuitabilityDetail() {
    return suitabilityDetail;
  }



  /**
   * If machine is not ready to be migrated, this explains the reasons and mitigation steps.
   * @return suitabilityExplanation
   */
  @javax.annotation.Nullable
  public SuitabilityExplanationEnum getSuitabilityExplanation() {
    return suitabilityExplanation;
  }



  /**
   * Time when this machine was last updated. Date-Time represented in ISO-8601 format.
   * @return updatedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedTimestamp() {
    return updatedTimestamp;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssessedMachineProperties assessedMachineProperties = (AssessedMachineProperties) o;
    return Objects.equals(this.bootType, assessedMachineProperties.bootType) &&
        Objects.equals(this.confidenceRatingInPercentage, assessedMachineProperties.confidenceRatingInPercentage) &&
        Objects.equals(this.createdTimestamp, assessedMachineProperties.createdTimestamp) &&
        Objects.equals(this.datacenterMachineArmId, assessedMachineProperties.datacenterMachineArmId) &&
        Objects.equals(this.datacenterManagementServerArmId, assessedMachineProperties.datacenterManagementServerArmId) &&
        Objects.equals(this.datacenterManagementServerName, assessedMachineProperties.datacenterManagementServerName) &&
        Objects.equals(this.description, assessedMachineProperties.description) &&
        Objects.equals(this.disks, assessedMachineProperties.disks) &&
        Objects.equals(this.displayName, assessedMachineProperties.displayName) &&
        Objects.equals(this.megabytesOfMemory, assessedMachineProperties.megabytesOfMemory) &&
        Objects.equals(this.megabytesOfMemoryForRecommendedSize, assessedMachineProperties.megabytesOfMemoryForRecommendedSize) &&
        Objects.equals(this.monthlyBandwidthCost, assessedMachineProperties.monthlyBandwidthCost) &&
        Objects.equals(this.monthlyComputeCostForRecommendedSize, assessedMachineProperties.monthlyComputeCostForRecommendedSize) &&
        Objects.equals(this.monthlyPremiumStorageCost, assessedMachineProperties.monthlyPremiumStorageCost) &&
        Objects.equals(this.monthlyStandardSSDStorageCost, assessedMachineProperties.monthlyStandardSSDStorageCost) &&
        Objects.equals(this.monthlyStorageCost, assessedMachineProperties.monthlyStorageCost) &&
        Objects.equals(this.networkAdapters, assessedMachineProperties.networkAdapters) &&
        Objects.equals(this.numberOfCores, assessedMachineProperties.numberOfCores) &&
        Objects.equals(this.numberOfCoresForRecommendedSize, assessedMachineProperties.numberOfCoresForRecommendedSize) &&
        Objects.equals(this.operatingSystemName, assessedMachineProperties.operatingSystemName) &&
        Objects.equals(this.operatingSystemType, assessedMachineProperties.operatingSystemType) &&
        Objects.equals(this.operatingSystemVersion, assessedMachineProperties.operatingSystemVersion) &&
        Objects.equals(this.percentageCoresUtilization, assessedMachineProperties.percentageCoresUtilization) &&
        Objects.equals(this.percentageMemoryUtilization, assessedMachineProperties.percentageMemoryUtilization) &&
        Objects.equals(this.recommendedSize, assessedMachineProperties.recommendedSize) &&
        Objects.equals(this.suitability, assessedMachineProperties.suitability) &&
        Objects.equals(this.suitabilityDetail, assessedMachineProperties.suitabilityDetail) &&
        Objects.equals(this.suitabilityExplanation, assessedMachineProperties.suitabilityExplanation) &&
        Objects.equals(this.updatedTimestamp, assessedMachineProperties.updatedTimestamp);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(bootType, confidenceRatingInPercentage, createdTimestamp, datacenterMachineArmId, datacenterManagementServerArmId, datacenterManagementServerName, description, disks, displayName, megabytesOfMemory, megabytesOfMemoryForRecommendedSize, monthlyBandwidthCost, monthlyComputeCostForRecommendedSize, monthlyPremiumStorageCost, monthlyStandardSSDStorageCost, monthlyStorageCost, networkAdapters, numberOfCores, numberOfCoresForRecommendedSize, operatingSystemName, operatingSystemType, operatingSystemVersion, percentageCoresUtilization, percentageMemoryUtilization, recommendedSize, suitability, suitabilityDetail, suitabilityExplanation, updatedTimestamp);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssessedMachineProperties {\n");
    sb.append("    bootType: ").append(toIndentedString(bootType)).append("\n");
    sb.append("    confidenceRatingInPercentage: ").append(toIndentedString(confidenceRatingInPercentage)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    datacenterMachineArmId: ").append(toIndentedString(datacenterMachineArmId)).append("\n");
    sb.append("    datacenterManagementServerArmId: ").append(toIndentedString(datacenterManagementServerArmId)).append("\n");
    sb.append("    datacenterManagementServerName: ").append(toIndentedString(datacenterManagementServerName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    disks: ").append(toIndentedString(disks)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    megabytesOfMemory: ").append(toIndentedString(megabytesOfMemory)).append("\n");
    sb.append("    megabytesOfMemoryForRecommendedSize: ").append(toIndentedString(megabytesOfMemoryForRecommendedSize)).append("\n");
    sb.append("    monthlyBandwidthCost: ").append(toIndentedString(monthlyBandwidthCost)).append("\n");
    sb.append("    monthlyComputeCostForRecommendedSize: ").append(toIndentedString(monthlyComputeCostForRecommendedSize)).append("\n");
    sb.append("    monthlyPremiumStorageCost: ").append(toIndentedString(monthlyPremiumStorageCost)).append("\n");
    sb.append("    monthlyStandardSSDStorageCost: ").append(toIndentedString(monthlyStandardSSDStorageCost)).append("\n");
    sb.append("    monthlyStorageCost: ").append(toIndentedString(monthlyStorageCost)).append("\n");
    sb.append("    networkAdapters: ").append(toIndentedString(networkAdapters)).append("\n");
    sb.append("    numberOfCores: ").append(toIndentedString(numberOfCores)).append("\n");
    sb.append("    numberOfCoresForRecommendedSize: ").append(toIndentedString(numberOfCoresForRecommendedSize)).append("\n");
    sb.append("    operatingSystemName: ").append(toIndentedString(operatingSystemName)).append("\n");
    sb.append("    operatingSystemType: ").append(toIndentedString(operatingSystemType)).append("\n");
    sb.append("    operatingSystemVersion: ").append(toIndentedString(operatingSystemVersion)).append("\n");
    sb.append("    percentageCoresUtilization: ").append(toIndentedString(percentageCoresUtilization)).append("\n");
    sb.append("    percentageMemoryUtilization: ").append(toIndentedString(percentageMemoryUtilization)).append("\n");
    sb.append("    recommendedSize: ").append(toIndentedString(recommendedSize)).append("\n");
    sb.append("    suitability: ").append(toIndentedString(suitability)).append("\n");
    sb.append("    suitabilityDetail: ").append(toIndentedString(suitabilityDetail)).append("\n");
    sb.append("    suitabilityExplanation: ").append(toIndentedString(suitabilityExplanation)).append("\n");
    sb.append("    updatedTimestamp: ").append(toIndentedString(updatedTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bootType");
    openapiFields.add("confidenceRatingInPercentage");
    openapiFields.add("createdTimestamp");
    openapiFields.add("datacenterMachineArmId");
    openapiFields.add("datacenterManagementServerArmId");
    openapiFields.add("datacenterManagementServerName");
    openapiFields.add("description");
    openapiFields.add("disks");
    openapiFields.add("displayName");
    openapiFields.add("megabytesOfMemory");
    openapiFields.add("megabytesOfMemoryForRecommendedSize");
    openapiFields.add("monthlyBandwidthCost");
    openapiFields.add("monthlyComputeCostForRecommendedSize");
    openapiFields.add("monthlyPremiumStorageCost");
    openapiFields.add("monthlyStandardSSDStorageCost");
    openapiFields.add("monthlyStorageCost");
    openapiFields.add("networkAdapters");
    openapiFields.add("numberOfCores");
    openapiFields.add("numberOfCoresForRecommendedSize");
    openapiFields.add("operatingSystemName");
    openapiFields.add("operatingSystemType");
    openapiFields.add("operatingSystemVersion");
    openapiFields.add("percentageCoresUtilization");
    openapiFields.add("percentageMemoryUtilization");
    openapiFields.add("recommendedSize");
    openapiFields.add("suitability");
    openapiFields.add("suitabilityDetail");
    openapiFields.add("suitabilityExplanation");
    openapiFields.add("updatedTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssessedMachineProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssessedMachineProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssessedMachineProperties is not found in the empty JSON string", AssessedMachineProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssessedMachineProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssessedMachineProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bootType") != null && !jsonObj.get("bootType").isJsonNull()) && !jsonObj.get("bootType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bootType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bootType").toString()));
      }
      // validate the optional field `bootType`
      if (jsonObj.get("bootType") != null && !jsonObj.get("bootType").isJsonNull()) {
        BootTypeEnum.validateJsonElement(jsonObj.get("bootType"));
      }
      if ((jsonObj.get("datacenterMachineArmId") != null && !jsonObj.get("datacenterMachineArmId").isJsonNull()) && !jsonObj.get("datacenterMachineArmId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datacenterMachineArmId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datacenterMachineArmId").toString()));
      }
      if ((jsonObj.get("datacenterManagementServerArmId") != null && !jsonObj.get("datacenterManagementServerArmId").isJsonNull()) && !jsonObj.get("datacenterManagementServerArmId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datacenterManagementServerArmId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datacenterManagementServerArmId").toString()));
      }
      if ((jsonObj.get("datacenterManagementServerName") != null && !jsonObj.get("datacenterManagementServerName").isJsonNull()) && !jsonObj.get("datacenterManagementServerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datacenterManagementServerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datacenterManagementServerName").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("operatingSystemName") != null && !jsonObj.get("operatingSystemName").isJsonNull()) && !jsonObj.get("operatingSystemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operatingSystemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operatingSystemName").toString()));
      }
      if ((jsonObj.get("operatingSystemType") != null && !jsonObj.get("operatingSystemType").isJsonNull()) && !jsonObj.get("operatingSystemType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operatingSystemType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operatingSystemType").toString()));
      }
      if ((jsonObj.get("operatingSystemVersion") != null && !jsonObj.get("operatingSystemVersion").isJsonNull()) && !jsonObj.get("operatingSystemVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operatingSystemVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operatingSystemVersion").toString()));
      }
      if ((jsonObj.get("recommendedSize") != null && !jsonObj.get("recommendedSize").isJsonNull()) && !jsonObj.get("recommendedSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendedSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommendedSize").toString()));
      }
      // validate the optional field `recommendedSize`
      if (jsonObj.get("recommendedSize") != null && !jsonObj.get("recommendedSize").isJsonNull()) {
        RecommendedSizeEnum.validateJsonElement(jsonObj.get("recommendedSize"));
      }
      if ((jsonObj.get("suitability") != null && !jsonObj.get("suitability").isJsonNull()) && !jsonObj.get("suitability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suitability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suitability").toString()));
      }
      // validate the optional field `suitability`
      if (jsonObj.get("suitability") != null && !jsonObj.get("suitability").isJsonNull()) {
        SuitabilityEnum.validateJsonElement(jsonObj.get("suitability"));
      }
      if ((jsonObj.get("suitabilityDetail") != null && !jsonObj.get("suitabilityDetail").isJsonNull()) && !jsonObj.get("suitabilityDetail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suitabilityDetail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suitabilityDetail").toString()));
      }
      // validate the optional field `suitabilityDetail`
      if (jsonObj.get("suitabilityDetail") != null && !jsonObj.get("suitabilityDetail").isJsonNull()) {
        SuitabilityDetailEnum.validateJsonElement(jsonObj.get("suitabilityDetail"));
      }
      if ((jsonObj.get("suitabilityExplanation") != null && !jsonObj.get("suitabilityExplanation").isJsonNull()) && !jsonObj.get("suitabilityExplanation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suitabilityExplanation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suitabilityExplanation").toString()));
      }
      // validate the optional field `suitabilityExplanation`
      if (jsonObj.get("suitabilityExplanation") != null && !jsonObj.get("suitabilityExplanation").isJsonNull()) {
        SuitabilityExplanationEnum.validateJsonElement(jsonObj.get("suitabilityExplanation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssessedMachineProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssessedMachineProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssessedMachineProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssessedMachineProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AssessedMachineProperties>() {
           @Override
           public void write(JsonWriter out, AssessedMachineProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssessedMachineProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssessedMachineProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssessedMachineProperties
   * @throws IOException if the JSON string is invalid with respect to AssessedMachineProperties
   */
  public static AssessedMachineProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssessedMachineProperties.class);
  }

  /**
   * Convert an instance of AssessedMachineProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

