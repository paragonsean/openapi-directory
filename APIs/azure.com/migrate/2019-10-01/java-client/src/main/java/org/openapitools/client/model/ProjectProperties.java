/*
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a project.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:36.892251-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectProperties {
  public static final String SERIALIZED_NAME_ASSESSMENT_SOLUTION_ID = "assessmentSolutionId";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_SOLUTION_ID)
  private String assessmentSolutionId;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "createdTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private OffsetDateTime createdTimestamp;

  public static final String SERIALIZED_NAME_CUSTOMER_WORKSPACE_ID = "customerWorkspaceId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_WORKSPACE_ID)
  private String customerWorkspaceId;

  public static final String SERIALIZED_NAME_CUSTOMER_WORKSPACE_LOCATION = "customerWorkspaceLocation";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_WORKSPACE_LOCATION)
  private String customerWorkspaceLocation;

  public static final String SERIALIZED_NAME_LAST_ASSESSMENT_TIMESTAMP = "lastAssessmentTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_ASSESSMENT_TIMESTAMP)
  private OffsetDateTime lastAssessmentTimestamp;

  public static final String SERIALIZED_NAME_NUMBER_OF_ASSESSMENTS = "numberOfAssessments";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_ASSESSMENTS)
  private Integer numberOfAssessments;

  public static final String SERIALIZED_NAME_NUMBER_OF_GROUPS = "numberOfGroups";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_GROUPS)
  private Integer numberOfGroups;

  public static final String SERIALIZED_NAME_NUMBER_OF_MACHINES = "numberOfMachines";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_MACHINES)
  private Integer numberOfMachines;

  /**
   * Assessment project status.
   */
  @JsonAdapter(ProjectStatusEnum.Adapter.class)
  public enum ProjectStatusEnum {
    ACTIVE("Active"),
    
    INACTIVE("Inactive");

    private String value;

    ProjectStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProjectStatusEnum fromValue(String value) {
      for (ProjectStatusEnum b : ProjectStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProjectStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProjectStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProjectStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProjectStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProjectStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROJECT_STATUS = "projectStatus";
  @SerializedName(SERIALIZED_NAME_PROJECT_STATUS)
  private ProjectStatusEnum projectStatus;

  /**
   * Provisioning state of the project.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    ACCEPTED("Accepted"),
    
    CREATING("Creating"),
    
    DELETING("Deleting"),
    
    FAILED("Failed"),
    
    MOVING("Moving"),
    
    SUCCEEDED("Succeeded");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_SERVICE_ENDPOINT = "serviceEndpoint";
  @SerializedName(SERIALIZED_NAME_SERVICE_ENDPOINT)
  private String serviceEndpoint;

  public static final String SERIALIZED_NAME_UPDATED_TIMESTAMP = "updatedTimestamp";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIMESTAMP)
  private OffsetDateTime updatedTimestamp;

  public ProjectProperties() {
  }

  public ProjectProperties(
     OffsetDateTime createdTimestamp, 
     OffsetDateTime lastAssessmentTimestamp, 
     Integer numberOfAssessments, 
     Integer numberOfGroups, 
     Integer numberOfMachines, 
     ProvisioningStateEnum provisioningState, 
     String serviceEndpoint, 
     OffsetDateTime updatedTimestamp
  ) {
    this();
    this.createdTimestamp = createdTimestamp;
    this.lastAssessmentTimestamp = lastAssessmentTimestamp;
    this.numberOfAssessments = numberOfAssessments;
    this.numberOfGroups = numberOfGroups;
    this.numberOfMachines = numberOfMachines;
    this.provisioningState = provisioningState;
    this.serviceEndpoint = serviceEndpoint;
    this.updatedTimestamp = updatedTimestamp;
  }

  public ProjectProperties assessmentSolutionId(String assessmentSolutionId) {
    this.assessmentSolutionId = assessmentSolutionId;
    return this;
  }

  /**
   * Assessment solution ARM id tracked by Microsoft.Migrate/migrateProjects.
   * @return assessmentSolutionId
   */
  @javax.annotation.Nullable
  public String getAssessmentSolutionId() {
    return assessmentSolutionId;
  }

  public void setAssessmentSolutionId(String assessmentSolutionId) {
    this.assessmentSolutionId = assessmentSolutionId;
  }


  /**
   * Time when this project was created. Date-Time represented in ISO-8601 format.
   * @return createdTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTimestamp() {
    return createdTimestamp;
  }



  public ProjectProperties customerWorkspaceId(String customerWorkspaceId) {
    this.customerWorkspaceId = customerWorkspaceId;
    return this;
  }

  /**
   * The ARM id of service map workspace created by customer.
   * @return customerWorkspaceId
   */
  @javax.annotation.Nullable
  public String getCustomerWorkspaceId() {
    return customerWorkspaceId;
  }

  public void setCustomerWorkspaceId(String customerWorkspaceId) {
    this.customerWorkspaceId = customerWorkspaceId;
  }


  public ProjectProperties customerWorkspaceLocation(String customerWorkspaceLocation) {
    this.customerWorkspaceLocation = customerWorkspaceLocation;
    return this;
  }

  /**
   * Location of service map workspace created by customer.
   * @return customerWorkspaceLocation
   */
  @javax.annotation.Nullable
  public String getCustomerWorkspaceLocation() {
    return customerWorkspaceLocation;
  }

  public void setCustomerWorkspaceLocation(String customerWorkspaceLocation) {
    this.customerWorkspaceLocation = customerWorkspaceLocation;
  }


  /**
   * Time when last assessment was created. Date-Time represented in ISO-8601 format. This value will be null until assessment is created.
   * @return lastAssessmentTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastAssessmentTimestamp() {
    return lastAssessmentTimestamp;
  }



  /**
   * Number of assessments created in the project.
   * @return numberOfAssessments
   */
  @javax.annotation.Nullable
  public Integer getNumberOfAssessments() {
    return numberOfAssessments;
  }



  /**
   * Number of groups created in the project.
   * @return numberOfGroups
   */
  @javax.annotation.Nullable
  public Integer getNumberOfGroups() {
    return numberOfGroups;
  }



  /**
   * Number of machines in the project.
   * @return numberOfMachines
   */
  @javax.annotation.Nullable
  public Integer getNumberOfMachines() {
    return numberOfMachines;
  }



  public ProjectProperties projectStatus(ProjectStatusEnum projectStatus) {
    this.projectStatus = projectStatus;
    return this;
  }

  /**
   * Assessment project status.
   * @return projectStatus
   */
  @javax.annotation.Nullable
  public ProjectStatusEnum getProjectStatus() {
    return projectStatus;
  }

  public void setProjectStatus(ProjectStatusEnum projectStatus) {
    this.projectStatus = projectStatus;
  }


  /**
   * Provisioning state of the project.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  /**
   * Endpoint at which the collector agent can call agent REST API.
   * @return serviceEndpoint
   */
  @javax.annotation.Nullable
  public String getServiceEndpoint() {
    return serviceEndpoint;
  }



  /**
   * Time when this project was last updated. Date-Time represented in ISO-8601 format.
   * @return updatedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedTimestamp() {
    return updatedTimestamp;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectProperties projectProperties = (ProjectProperties) o;
    return Objects.equals(this.assessmentSolutionId, projectProperties.assessmentSolutionId) &&
        Objects.equals(this.createdTimestamp, projectProperties.createdTimestamp) &&
        Objects.equals(this.customerWorkspaceId, projectProperties.customerWorkspaceId) &&
        Objects.equals(this.customerWorkspaceLocation, projectProperties.customerWorkspaceLocation) &&
        Objects.equals(this.lastAssessmentTimestamp, projectProperties.lastAssessmentTimestamp) &&
        Objects.equals(this.numberOfAssessments, projectProperties.numberOfAssessments) &&
        Objects.equals(this.numberOfGroups, projectProperties.numberOfGroups) &&
        Objects.equals(this.numberOfMachines, projectProperties.numberOfMachines) &&
        Objects.equals(this.projectStatus, projectProperties.projectStatus) &&
        Objects.equals(this.provisioningState, projectProperties.provisioningState) &&
        Objects.equals(this.serviceEndpoint, projectProperties.serviceEndpoint) &&
        Objects.equals(this.updatedTimestamp, projectProperties.updatedTimestamp);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(assessmentSolutionId, createdTimestamp, customerWorkspaceId, customerWorkspaceLocation, lastAssessmentTimestamp, numberOfAssessments, numberOfGroups, numberOfMachines, projectStatus, provisioningState, serviceEndpoint, updatedTimestamp);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectProperties {\n");
    sb.append("    assessmentSolutionId: ").append(toIndentedString(assessmentSolutionId)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    customerWorkspaceId: ").append(toIndentedString(customerWorkspaceId)).append("\n");
    sb.append("    customerWorkspaceLocation: ").append(toIndentedString(customerWorkspaceLocation)).append("\n");
    sb.append("    lastAssessmentTimestamp: ").append(toIndentedString(lastAssessmentTimestamp)).append("\n");
    sb.append("    numberOfAssessments: ").append(toIndentedString(numberOfAssessments)).append("\n");
    sb.append("    numberOfGroups: ").append(toIndentedString(numberOfGroups)).append("\n");
    sb.append("    numberOfMachines: ").append(toIndentedString(numberOfMachines)).append("\n");
    sb.append("    projectStatus: ").append(toIndentedString(projectStatus)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    serviceEndpoint: ").append(toIndentedString(serviceEndpoint)).append("\n");
    sb.append("    updatedTimestamp: ").append(toIndentedString(updatedTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assessmentSolutionId");
    openapiFields.add("createdTimestamp");
    openapiFields.add("customerWorkspaceId");
    openapiFields.add("customerWorkspaceLocation");
    openapiFields.add("lastAssessmentTimestamp");
    openapiFields.add("numberOfAssessments");
    openapiFields.add("numberOfGroups");
    openapiFields.add("numberOfMachines");
    openapiFields.add("projectStatus");
    openapiFields.add("provisioningState");
    openapiFields.add("serviceEndpoint");
    openapiFields.add("updatedTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectProperties is not found in the empty JSON string", ProjectProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("assessmentSolutionId") != null && !jsonObj.get("assessmentSolutionId").isJsonNull()) && !jsonObj.get("assessmentSolutionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assessmentSolutionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assessmentSolutionId").toString()));
      }
      if ((jsonObj.get("customerWorkspaceId") != null && !jsonObj.get("customerWorkspaceId").isJsonNull()) && !jsonObj.get("customerWorkspaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerWorkspaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerWorkspaceId").toString()));
      }
      if ((jsonObj.get("customerWorkspaceLocation") != null && !jsonObj.get("customerWorkspaceLocation").isJsonNull()) && !jsonObj.get("customerWorkspaceLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerWorkspaceLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerWorkspaceLocation").toString()));
      }
      if ((jsonObj.get("projectStatus") != null && !jsonObj.get("projectStatus").isJsonNull()) && !jsonObj.get("projectStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectStatus").toString()));
      }
      // validate the optional field `projectStatus`
      if (jsonObj.get("projectStatus") != null && !jsonObj.get("projectStatus").isJsonNull()) {
        ProjectStatusEnum.validateJsonElement(jsonObj.get("projectStatus"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("serviceEndpoint") != null && !jsonObj.get("serviceEndpoint").isJsonNull()) && !jsonObj.get("serviceEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceEndpoint").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectProperties>() {
           @Override
           public void write(JsonWriter out, ProjectProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectProperties
   * @throws IOException if the JSON string is invalid with respect to ProjectProperties
   */
  public static ProjectProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectProperties.class);
  }

  /**
   * Convert an instance of ProjectProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

