/*
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CollectorBodyAgentSpnProperties;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CollectorAgentProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:36.892251-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CollectorAgentProperties {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_HEARTBEAT_UTC = "lastHeartbeatUtc";
  @SerializedName(SERIALIZED_NAME_LAST_HEARTBEAT_UTC)
  private OffsetDateTime lastHeartbeatUtc;

  public static final String SERIALIZED_NAME_SPN_DETAILS = "spnDetails";
  @SerializedName(SERIALIZED_NAME_SPN_DETAILS)
  private CollectorBodyAgentSpnProperties spnDetails;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public CollectorAgentProperties() {
  }

  public CollectorAgentProperties(
     String id, 
     OffsetDateTime lastHeartbeatUtc, 
     String version
  ) {
    this();
    this.id = id;
    this.lastHeartbeatUtc = lastHeartbeatUtc;
    this.version = version;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * Get lastHeartbeatUtc
   * @return lastHeartbeatUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastHeartbeatUtc() {
    return lastHeartbeatUtc;
  }



  public CollectorAgentProperties spnDetails(CollectorBodyAgentSpnProperties spnDetails) {
    this.spnDetails = spnDetails;
    return this;
  }

  /**
   * Get spnDetails
   * @return spnDetails
   */
  @javax.annotation.Nullable
  public CollectorBodyAgentSpnProperties getSpnDetails() {
    return spnDetails;
  }

  public void setSpnDetails(CollectorBodyAgentSpnProperties spnDetails) {
    this.spnDetails = spnDetails;
  }


  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CollectorAgentProperties collectorAgentProperties = (CollectorAgentProperties) o;
    return Objects.equals(this.id, collectorAgentProperties.id) &&
        Objects.equals(this.lastHeartbeatUtc, collectorAgentProperties.lastHeartbeatUtc) &&
        Objects.equals(this.spnDetails, collectorAgentProperties.spnDetails) &&
        Objects.equals(this.version, collectorAgentProperties.version);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, lastHeartbeatUtc, spnDetails, version);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CollectorAgentProperties {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastHeartbeatUtc: ").append(toIndentedString(lastHeartbeatUtc)).append("\n");
    sb.append("    spnDetails: ").append(toIndentedString(spnDetails)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("lastHeartbeatUtc");
    openapiFields.add("spnDetails");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CollectorAgentProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CollectorAgentProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CollectorAgentProperties is not found in the empty JSON string", CollectorAgentProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CollectorAgentProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CollectorAgentProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `spnDetails`
      if (jsonObj.get("spnDetails") != null && !jsonObj.get("spnDetails").isJsonNull()) {
        CollectorBodyAgentSpnProperties.validateJsonElement(jsonObj.get("spnDetails"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CollectorAgentProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CollectorAgentProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CollectorAgentProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CollectorAgentProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<CollectorAgentProperties>() {
           @Override
           public void write(JsonWriter out, CollectorAgentProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CollectorAgentProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CollectorAgentProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CollectorAgentProperties
   * @throws IOException if the JSON string is invalid with respect to CollectorAgentProperties
   */
  public static CollectorAgentProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CollectorAgentProperties.class);
  }

  /**
   * Convert an instance of CollectorAgentProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

