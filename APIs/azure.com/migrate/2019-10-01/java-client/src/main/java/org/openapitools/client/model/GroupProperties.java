/*
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of group resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:36.892251-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GroupProperties {
  public static final String SERIALIZED_NAME_ARE_ASSESSMENTS_RUNNING = "areAssessmentsRunning";
  @SerializedName(SERIALIZED_NAME_ARE_ASSESSMENTS_RUNNING)
  private Boolean areAssessmentsRunning;

  public static final String SERIALIZED_NAME_ASSESSMENTS = "assessments";
  @SerializedName(SERIALIZED_NAME_ASSESSMENTS)
  private List<String> assessments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "createdTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private OffsetDateTime createdTimestamp;

  /**
   * Whether the group has been created and is valid.
   */
  @JsonAdapter(GroupStatusEnum.Adapter.class)
  public enum GroupStatusEnum {
    CREATED("Created"),
    
    UPDATED("Updated"),
    
    RUNNING("Running"),
    
    COMPLETED("Completed"),
    
    INVALID("Invalid");

    private String value;

    GroupStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GroupStatusEnum fromValue(String value) {
      for (GroupStatusEnum b : GroupStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GroupStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GroupStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GroupStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GroupStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GROUP_STATUS = "groupStatus";
  @SerializedName(SERIALIZED_NAME_GROUP_STATUS)
  private GroupStatusEnum groupStatus;

  public static final String SERIALIZED_NAME_MACHINE_COUNT = "machineCount";
  @SerializedName(SERIALIZED_NAME_MACHINE_COUNT)
  private Integer machineCount;

  public static final String SERIALIZED_NAME_UPDATED_TIMESTAMP = "updatedTimestamp";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIMESTAMP)
  private OffsetDateTime updatedTimestamp;

  public GroupProperties() {
  }

  public GroupProperties(
     Boolean areAssessmentsRunning, 
     List<String> assessments, 
     OffsetDateTime createdTimestamp, 
     GroupStatusEnum groupStatus, 
     Integer machineCount, 
     OffsetDateTime updatedTimestamp
  ) {
    this();
    this.areAssessmentsRunning = areAssessmentsRunning;
    this.assessments = assessments;
    this.createdTimestamp = createdTimestamp;
    this.groupStatus = groupStatus;
    this.machineCount = machineCount;
    this.updatedTimestamp = updatedTimestamp;
  }

  /**
   * If the assessments are in running state.
   * @return areAssessmentsRunning
   */
  @javax.annotation.Nullable
  public Boolean getAreAssessmentsRunning() {
    return areAssessmentsRunning;
  }



  /**
   * List of References to Assessments created on this group.
   * @return assessments
   */
  @javax.annotation.Nullable
  public List<String> getAssessments() {
    return assessments;
  }



  /**
   * Time when this group was created. Date-Time represented in ISO-8601 format.
   * @return createdTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTimestamp() {
    return createdTimestamp;
  }



  /**
   * Whether the group has been created and is valid.
   * @return groupStatus
   */
  @javax.annotation.Nullable
  public GroupStatusEnum getGroupStatus() {
    return groupStatus;
  }



  /**
   * Number of machines part of this group.
   * @return machineCount
   */
  @javax.annotation.Nullable
  public Integer getMachineCount() {
    return machineCount;
  }



  /**
   * Time when this group was last updated. Date-Time represented in ISO-8601 format.
   * @return updatedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedTimestamp() {
    return updatedTimestamp;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupProperties groupProperties = (GroupProperties) o;
    return Objects.equals(this.areAssessmentsRunning, groupProperties.areAssessmentsRunning) &&
        Objects.equals(this.assessments, groupProperties.assessments) &&
        Objects.equals(this.createdTimestamp, groupProperties.createdTimestamp) &&
        Objects.equals(this.groupStatus, groupProperties.groupStatus) &&
        Objects.equals(this.machineCount, groupProperties.machineCount) &&
        Objects.equals(this.updatedTimestamp, groupProperties.updatedTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(areAssessmentsRunning, assessments, createdTimestamp, groupStatus, machineCount, updatedTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupProperties {\n");
    sb.append("    areAssessmentsRunning: ").append(toIndentedString(areAssessmentsRunning)).append("\n");
    sb.append("    assessments: ").append(toIndentedString(assessments)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    groupStatus: ").append(toIndentedString(groupStatus)).append("\n");
    sb.append("    machineCount: ").append(toIndentedString(machineCount)).append("\n");
    sb.append("    updatedTimestamp: ").append(toIndentedString(updatedTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("areAssessmentsRunning");
    openapiFields.add("assessments");
    openapiFields.add("createdTimestamp");
    openapiFields.add("groupStatus");
    openapiFields.add("machineCount");
    openapiFields.add("updatedTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GroupProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroupProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupProperties is not found in the empty JSON string", GroupProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GroupProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GroupProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("assessments") != null && !jsonObj.get("assessments").isJsonNull() && !jsonObj.get("assessments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `assessments` to be an array in the JSON string but got `%s`", jsonObj.get("assessments").toString()));
      }
      if ((jsonObj.get("groupStatus") != null && !jsonObj.get("groupStatus").isJsonNull()) && !jsonObj.get("groupStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupStatus").toString()));
      }
      // validate the optional field `groupStatus`
      if (jsonObj.get("groupStatus") != null && !jsonObj.get("groupStatus").isJsonNull()) {
        GroupStatusEnum.validateJsonElement(jsonObj.get("groupStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupProperties>() {
           @Override
           public void write(JsonWriter out, GroupProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GroupProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GroupProperties
   * @throws IOException if the JSON string is invalid with respect to GroupProperties
   */
  public static GroupProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupProperties.class);
  }

  /**
   * Convert an instance of GroupProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

