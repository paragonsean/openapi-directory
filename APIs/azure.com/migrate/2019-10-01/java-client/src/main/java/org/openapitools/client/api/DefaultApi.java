/*
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AssessedMachine;
import org.openapitools.client.model.AssessedMachineResultList;
import org.openapitools.client.model.Assessment;
import org.openapitools.client.model.AssessmentOptions;
import org.openapitools.client.model.AssessmentOptionsResultList;
import org.openapitools.client.model.AssessmentResultList;
import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.DownloadUrl;
import org.openapitools.client.model.Group;
import org.openapitools.client.model.GroupResultList;
import org.openapitools.client.model.HyperVCollector;
import org.openapitools.client.model.HyperVCollectorList;
import org.openapitools.client.model.Machine;
import org.openapitools.client.model.MachineResultList;
import org.openapitools.client.model.OperationResultList;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectResultList;
import org.openapitools.client.model.UpdateGroupBody;
import org.openapitools.client.model.VMwareCollector;
import org.openapitools.client.model.VMwareCollectorList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for assessedMachinesGet
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param assessedMachineName Unique name of an assessed machine evaluated as part of an assessment. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns a specific assessed machine. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessedMachinesGetCall(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String assessedMachineName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/assessedMachines/{assessedMachineName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "assessmentName" + "}", localVarApiClient.escapeString(assessmentName.toString()))
            .replace("{" + "assessedMachineName" + "}", localVarApiClient.escapeString(assessedMachineName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assessedMachinesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String assessedMachineName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling assessedMachinesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling assessedMachinesGet(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling assessedMachinesGet(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling assessedMachinesGet(Async)");
        }

        // verify the required parameter 'assessmentName' is set
        if (assessmentName == null) {
            throw new ApiException("Missing the required parameter 'assessmentName' when calling assessedMachinesGet(Async)");
        }

        // verify the required parameter 'assessedMachineName' is set
        if (assessedMachineName == null) {
            throw new ApiException("Missing the required parameter 'assessedMachineName' when calling assessedMachinesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling assessedMachinesGet(Async)");
        }

        return assessedMachinesGetCall(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, assessedMachineName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Get an assessed machine.
     * Get an assessed machine with its size &amp; cost estimate that was evaluated in the specified assessment.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param assessedMachineName Unique name of an assessed machine evaluated as part of an assessment. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return AssessedMachine
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns a specific assessed machine. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AssessedMachine assessedMachinesGet(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String assessedMachineName, String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<AssessedMachine> localVarResp = assessedMachinesGetWithHttpInfo(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, assessedMachineName, apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get an assessed machine.
     * Get an assessed machine with its size &amp; cost estimate that was evaluated in the specified assessment.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param assessedMachineName Unique name of an assessed machine evaluated as part of an assessment. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;AssessedMachine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns a specific assessed machine. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssessedMachine> assessedMachinesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String assessedMachineName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = assessedMachinesGetValidateBeforeCall(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, assessedMachineName, apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<AssessedMachine>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an assessed machine. (asynchronously)
     * Get an assessed machine with its size &amp; cost estimate that was evaluated in the specified assessment.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param assessedMachineName Unique name of an assessed machine evaluated as part of an assessment. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns a specific assessed machine. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessedMachinesGetAsync(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String assessedMachineName, String apiVersion, String acceptLanguage, final ApiCallback<AssessedMachine> _callback) throws ApiException {

        okhttp3.Call localVarCall = assessedMachinesGetValidateBeforeCall(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, assessedMachineName, apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<AssessedMachine>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assessedMachinesListByAssessment
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of machines with their assessment data in the assessment. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessedMachinesListByAssessmentCall(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/assessedMachines"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "assessmentName" + "}", localVarApiClient.escapeString(assessmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assessedMachinesListByAssessmentValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling assessedMachinesListByAssessment(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling assessedMachinesListByAssessment(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling assessedMachinesListByAssessment(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling assessedMachinesListByAssessment(Async)");
        }

        // verify the required parameter 'assessmentName' is set
        if (assessmentName == null) {
            throw new ApiException("Missing the required parameter 'assessmentName' when calling assessedMachinesListByAssessment(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling assessedMachinesListByAssessment(Async)");
        }

        return assessedMachinesListByAssessmentCall(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Get assessed machines for assessment.
     * Get list of machines that assessed as part of the specified assessment. Returns a json array of objects of type &#39;assessedMachine&#39; as specified in the Models section.  Whenever an assessment is created or updated, it goes under computation. During this phase, the &#39;status&#39; field of Assessment object reports &#39;Computing&#39;. During the period when the assessment is under computation, the list of assessed machines is empty and no assessed machines are returned by this call. 
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return AssessedMachineResultList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of machines with their assessment data in the assessment. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AssessedMachineResultList assessedMachinesListByAssessment(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<AssessedMachineResultList> localVarResp = assessedMachinesListByAssessmentWithHttpInfo(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get assessed machines for assessment.
     * Get list of machines that assessed as part of the specified assessment. Returns a json array of objects of type &#39;assessedMachine&#39; as specified in the Models section.  Whenever an assessment is created or updated, it goes under computation. During this phase, the &#39;status&#39; field of Assessment object reports &#39;Computing&#39;. During the period when the assessment is under computation, the list of assessed machines is empty and no assessed machines are returned by this call. 
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;AssessedMachineResultList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of machines with their assessment data in the assessment. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssessedMachineResultList> assessedMachinesListByAssessmentWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = assessedMachinesListByAssessmentValidateBeforeCall(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<AssessedMachineResultList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get assessed machines for assessment. (asynchronously)
     * Get list of machines that assessed as part of the specified assessment. Returns a json array of objects of type &#39;assessedMachine&#39; as specified in the Models section.  Whenever an assessment is created or updated, it goes under computation. During this phase, the &#39;status&#39; field of Assessment object reports &#39;Computing&#39;. During the period when the assessment is under computation, the list of assessed machines is empty and no assessed machines are returned by this call. 
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of machines with their assessment data in the assessment. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessedMachinesListByAssessmentAsync(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage, final ApiCallback<AssessedMachineResultList> _callback) throws ApiException {

        okhttp3.Call localVarCall = assessedMachinesListByAssessmentValidateBeforeCall(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<AssessedMachineResultList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assessmentsCreate
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param assessment New or Updated Assessment object. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing assessment updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 201 </td><td> Created. New assessment was created. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsCreateCall(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage, Assessment assessment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assessment;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "assessmentName" + "}", localVarApiClient.escapeString(assessmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assessmentsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage, Assessment assessment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling assessmentsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling assessmentsCreate(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling assessmentsCreate(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling assessmentsCreate(Async)");
        }

        // verify the required parameter 'assessmentName' is set
        if (assessmentName == null) {
            throw new ApiException("Missing the required parameter 'assessmentName' when calling assessmentsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling assessmentsCreate(Async)");
        }

        return assessmentsCreateCall(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage, assessment, _callback);

    }

    /**
     * Create or Update assessment.
     * Create a new assessment with the given name and the specified settings. Since name of an assessment in a project is a unique identifier, if an assessment with the name provided already exists, then the existing assessment is updated.  Any PUT operation, resulting in either create or update on an assessment, will cause the assessment to go in a \&quot;InProgress\&quot; state. This will be indicated by the field &#39;computationState&#39; on the Assessment object. During this time no other PUT operation will be allowed on that assessment object, nor will a Delete operation. Once the computation for the assessment is complete, the field &#39;computationState&#39; will be updated to &#39;Ready&#39;, and then other PUT or DELETE operations can happen on the assessment.  When assessment is under computation, any PUT will lead to a 400 - Bad Request error. 
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param assessment New or Updated Assessment object. (optional)
     * @return Assessment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing assessment updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 201 </td><td> Created. New assessment was created. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Assessment assessmentsCreate(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage, Assessment assessment) throws ApiException {
        ApiResponse<Assessment> localVarResp = assessmentsCreateWithHttpInfo(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage, assessment);
        return localVarResp.getData();
    }

    /**
     * Create or Update assessment.
     * Create a new assessment with the given name and the specified settings. Since name of an assessment in a project is a unique identifier, if an assessment with the name provided already exists, then the existing assessment is updated.  Any PUT operation, resulting in either create or update on an assessment, will cause the assessment to go in a \&quot;InProgress\&quot; state. This will be indicated by the field &#39;computationState&#39; on the Assessment object. During this time no other PUT operation will be allowed on that assessment object, nor will a Delete operation. Once the computation for the assessment is complete, the field &#39;computationState&#39; will be updated to &#39;Ready&#39;, and then other PUT or DELETE operations can happen on the assessment.  When assessment is under computation, any PUT will lead to a 400 - Bad Request error. 
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param assessment New or Updated Assessment object. (optional)
     * @return ApiResponse&lt;Assessment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing assessment updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 201 </td><td> Created. New assessment was created. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assessment> assessmentsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage, Assessment assessment) throws ApiException {
        okhttp3.Call localVarCall = assessmentsCreateValidateBeforeCall(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage, assessment, null);
        Type localVarReturnType = new TypeToken<Assessment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or Update assessment. (asynchronously)
     * Create a new assessment with the given name and the specified settings. Since name of an assessment in a project is a unique identifier, if an assessment with the name provided already exists, then the existing assessment is updated.  Any PUT operation, resulting in either create or update on an assessment, will cause the assessment to go in a \&quot;InProgress\&quot; state. This will be indicated by the field &#39;computationState&#39; on the Assessment object. During this time no other PUT operation will be allowed on that assessment object, nor will a Delete operation. Once the computation for the assessment is complete, the field &#39;computationState&#39; will be updated to &#39;Ready&#39;, and then other PUT or DELETE operations can happen on the assessment.  When assessment is under computation, any PUT will lead to a 400 - Bad Request error. 
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param assessment New or Updated Assessment object. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing assessment updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 201 </td><td> Created. New assessment was created. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsCreateAsync(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage, Assessment assessment, final ApiCallback<Assessment> _callback) throws ApiException {

        okhttp3.Call localVarCall = assessmentsCreateValidateBeforeCall(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage, assessment, _callback);
        Type localVarReturnType = new TypeToken<Assessment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assessmentsDelete
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Deleted the assessment. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 204 </td><td> No content. No assessment with specified name was found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsDeleteCall(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "assessmentName" + "}", localVarApiClient.escapeString(assessmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assessmentsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling assessmentsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling assessmentsDelete(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling assessmentsDelete(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling assessmentsDelete(Async)");
        }

        // verify the required parameter 'assessmentName' is set
        if (assessmentName == null) {
            throw new ApiException("Missing the required parameter 'assessmentName' when calling assessmentsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling assessmentsDelete(Async)");
        }

        return assessmentsDeleteCall(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Deletes an assessment from the project.
     * Delete an assessment from the project. The machines remain in the assessment. Deleting a non-existent assessment results in a no-operation.  When an assessment is under computation, as indicated by the &#39;computationState&#39; field, it cannot be deleted. Any such attempt will return a 400 - Bad Request. 
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Deleted the assessment. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 204 </td><td> No content. No assessment with specified name was found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void assessmentsDelete(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage) throws ApiException {
        assessmentsDeleteWithHttpInfo(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage);
    }

    /**
     * Deletes an assessment from the project.
     * Delete an assessment from the project. The machines remain in the assessment. Deleting a non-existent assessment results in a no-operation.  When an assessment is under computation, as indicated by the &#39;computationState&#39; field, it cannot be deleted. Any such attempt will return a 400 - Bad Request. 
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Deleted the assessment. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 204 </td><td> No content. No assessment with specified name was found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> assessmentsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = assessmentsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes an assessment from the project. (asynchronously)
     * Delete an assessment from the project. The machines remain in the assessment. Deleting a non-existent assessment results in a no-operation.  When an assessment is under computation, as indicated by the &#39;computationState&#39; field, it cannot be deleted. Any such attempt will return a 400 - Bad Request. 
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Deleted the assessment. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 204 </td><td> No content. No assessment with specified name was found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsDeleteAsync(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = assessmentsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for assessmentsGet
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns Assessment object. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsGetCall(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "assessmentName" + "}", localVarApiClient.escapeString(assessmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assessmentsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling assessmentsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling assessmentsGet(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling assessmentsGet(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling assessmentsGet(Async)");
        }

        // verify the required parameter 'assessmentName' is set
        if (assessmentName == null) {
            throw new ApiException("Missing the required parameter 'assessmentName' when calling assessmentsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling assessmentsGet(Async)");
        }

        return assessmentsGetCall(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Get an assessment.
     * Get an existing assessment with the specified name. Returns a json object of type &#39;assessment&#39; as specified in Models section.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return Assessment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns Assessment object. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Assessment assessmentsGet(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<Assessment> localVarResp = assessmentsGetWithHttpInfo(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get an assessment.
     * Get an existing assessment with the specified name. Returns a json object of type &#39;assessment&#39; as specified in Models section.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;Assessment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns Assessment object. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assessment> assessmentsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = assessmentsGetValidateBeforeCall(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<Assessment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an assessment. (asynchronously)
     * Get an existing assessment with the specified name. Returns a json object of type &#39;assessment&#39; as specified in Models section.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns Assessment object. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsGetAsync(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage, final ApiCallback<Assessment> _callback) throws ApiException {

        okhttp3.Call localVarCall = assessmentsGetValidateBeforeCall(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<Assessment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assessmentsGetReportDownloadUrl
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsGetReportDownloadUrlCall(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments/{assessmentName}/downloadUrl"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "assessmentName" + "}", localVarApiClient.escapeString(assessmentName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assessmentsGetReportDownloadUrlValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling assessmentsGetReportDownloadUrl(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling assessmentsGetReportDownloadUrl(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling assessmentsGetReportDownloadUrl(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling assessmentsGetReportDownloadUrl(Async)");
        }

        // verify the required parameter 'assessmentName' is set
        if (assessmentName == null) {
            throw new ApiException("Missing the required parameter 'assessmentName' when calling assessmentsGetReportDownloadUrl(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling assessmentsGetReportDownloadUrl(Async)");
        }

        return assessmentsGetReportDownloadUrlCall(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Get download URL for the assessment report.
     * Get the URL for downloading the assessment in a report format.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return DownloadUrl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public DownloadUrl assessmentsGetReportDownloadUrl(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<DownloadUrl> localVarResp = assessmentsGetReportDownloadUrlWithHttpInfo(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get download URL for the assessment report.
     * Get the URL for downloading the assessment in a report format.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;DownloadUrl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DownloadUrl> assessmentsGetReportDownloadUrlWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = assessmentsGetReportDownloadUrlValidateBeforeCall(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<DownloadUrl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get download URL for the assessment report. (asynchronously)
     * Get the URL for downloading the assessment in a report format.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param assessmentName Unique name of an assessment within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsGetReportDownloadUrlAsync(String subscriptionId, String resourceGroupName, String projectName, String groupName, String assessmentName, String apiVersion, String acceptLanguage, final ApiCallback<DownloadUrl> _callback) throws ApiException {

        okhttp3.Call localVarCall = assessmentsGetReportDownloadUrlValidateBeforeCall(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<DownloadUrl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assessmentsListByGroup
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of Assessment objects. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsListByGroupCall(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/assessments"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assessmentsListByGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling assessmentsListByGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling assessmentsListByGroup(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling assessmentsListByGroup(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling assessmentsListByGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling assessmentsListByGroup(Async)");
        }

        return assessmentsListByGroupCall(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Get all assessments created for the specified group.
     * Get all assessments created for the specified group.  Returns a json array of objects of type &#39;assessment&#39; as specified in Models section. 
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return AssessmentResultList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of Assessment objects. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AssessmentResultList assessmentsListByGroup(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<AssessmentResultList> localVarResp = assessmentsListByGroupWithHttpInfo(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get all assessments created for the specified group.
     * Get all assessments created for the specified group.  Returns a json array of objects of type &#39;assessment&#39; as specified in Models section. 
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;AssessmentResultList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of Assessment objects. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssessmentResultList> assessmentsListByGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = assessmentsListByGroupValidateBeforeCall(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<AssessmentResultList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all assessments created for the specified group. (asynchronously)
     * Get all assessments created for the specified group.  Returns a json array of objects of type &#39;assessment&#39; as specified in Models section. 
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of Assessment objects. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsListByGroupAsync(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage, final ApiCallback<AssessmentResultList> _callback) throws ApiException {

        okhttp3.Call localVarCall = assessmentsListByGroupValidateBeforeCall(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<AssessmentResultList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assessmentsListByProject
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of Assessment objects. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsListByProjectCall(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessments"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assessmentsListByProjectValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling assessmentsListByProject(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling assessmentsListByProject(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling assessmentsListByProject(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling assessmentsListByProject(Async)");
        }

        return assessmentsListByProjectCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Get all assessments created in the project.
     * Get all assessments created in the project.  Returns a json array of objects of type &#39;assessment&#39; as specified in Models section. 
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return AssessmentResultList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of Assessment objects. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AssessmentResultList assessmentsListByProject(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<AssessmentResultList> localVarResp = assessmentsListByProjectWithHttpInfo(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get all assessments created in the project.
     * Get all assessments created in the project.  Returns a json array of objects of type &#39;assessment&#39; as specified in Models section. 
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;AssessmentResultList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of Assessment objects. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssessmentResultList> assessmentsListByProjectWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = assessmentsListByProjectValidateBeforeCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<AssessmentResultList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all assessments created in the project. (asynchronously)
     * Get all assessments created in the project.  Returns a json array of objects of type &#39;assessment&#39; as specified in Models section. 
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of Assessment objects. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assessmentsListByProjectAsync(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback<AssessmentResultList> _callback) throws ApiException {

        okhttp3.Call localVarCall = assessmentsListByProjectValidateBeforeCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<AssessmentResultList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsCreate
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param group New or Updated Group object. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing group updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 201 </td><td> Created. New group was created. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsCreateCall(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage, Group group, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = group;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage, Group group, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling groupsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling groupsCreate(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling groupsCreate(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling groupsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling groupsCreate(Async)");
        }

        return groupsCreateCall(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage, group, _callback);

    }

    /**
     * Create a new group with specified settings.
     * Create a new group by sending a json object of type &#39;group&#39; as given in Models section as part of the Request Body. The group name in a project is unique.  This operation is Idempotent. 
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param group New or Updated Group object. (optional)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing group updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 201 </td><td> Created. New group was created. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Group groupsCreate(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage, Group group) throws ApiException {
        ApiResponse<Group> localVarResp = groupsCreateWithHttpInfo(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage, group);
        return localVarResp.getData();
    }

    /**
     * Create a new group with specified settings.
     * Create a new group by sending a json object of type &#39;group&#39; as given in Models section as part of the Request Body. The group name in a project is unique.  This operation is Idempotent. 
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param group New or Updated Group object. (optional)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing group updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 201 </td><td> Created. New group was created. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> groupsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage, Group group) throws ApiException {
        okhttp3.Call localVarCall = groupsCreateValidateBeforeCall(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage, group, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new group with specified settings. (asynchronously)
     * Create a new group by sending a json object of type &#39;group&#39; as given in Models section as part of the Request Body. The group name in a project is unique.  This operation is Idempotent. 
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param group New or Updated Group object. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing group updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 201 </td><td> Created. New group was created. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsCreateAsync(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage, Group group, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsCreateValidateBeforeCall(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage, group, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsDelete
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Deleted the group. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 204 </td><td> No content. No group with specified name was found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsDeleteCall(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling groupsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling groupsDelete(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling groupsDelete(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling groupsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling groupsDelete(Async)");
        }

        return groupsDeleteCall(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Delete the group
     * Delete the group from the project. The machines remain in the project. Deleting a non-existent group results in a no-operation.  A group is an aggregation mechanism for machines in a project. Therefore, deleting group does not delete machines in it. 
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Deleted the group. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 204 </td><td> No content. No group with specified name was found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void groupsDelete(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage) throws ApiException {
        groupsDeleteWithHttpInfo(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage);
    }

    /**
     * Delete the group
     * Delete the group from the project. The machines remain in the project. Deleting a non-existent group results in a no-operation.  A group is an aggregation mechanism for machines in a project. Therefore, deleting group does not delete machines in it. 
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Deleted the group. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 204 </td><td> No content. No group with specified name was found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> groupsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = groupsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the group (asynchronously)
     * Delete the group from the project. The machines remain in the project. Deleting a non-existent group results in a no-operation.  A group is an aggregation mechanism for machines in a project. Therefore, deleting group does not delete machines in it. 
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Deleted the group. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 204 </td><td> No content. No group with specified name was found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsDeleteAsync(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGet
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the group with the specified name. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetCall(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling groupsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling groupsGet(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling groupsGet(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling groupsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling groupsGet(Async)");
        }

        return groupsGetCall(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Get a specific group.
     * Get information related to a specific group in the project. Returns a json object of type &#39;group&#39; as specified in the models section.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the group with the specified name. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Group groupsGet(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<Group> localVarResp = groupsGetWithHttpInfo(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get a specific group.
     * Get information related to a specific group in the project. Returns a json object of type &#39;group&#39; as specified in the models section.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the group with the specified name. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> groupsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = groupsGetValidateBeforeCall(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific group. (asynchronously)
     * Get information related to a specific group in the project. Returns a json object of type &#39;group&#39; as specified in the models section.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the group with the specified name. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGetAsync(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGetValidateBeforeCall(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsListByProject
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of groups. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsListByProjectCall(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsListByProjectValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling groupsListByProject(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling groupsListByProject(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling groupsListByProject(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling groupsListByProject(Async)");
        }

        return groupsListByProjectCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Get all groups
     * Get all groups created in the project. Returns a json array of objects of type &#39;group&#39; as specified in the Models section.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return GroupResultList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of groups. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public GroupResultList groupsListByProject(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<GroupResultList> localVarResp = groupsListByProjectWithHttpInfo(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get all groups
     * Get all groups created in the project. Returns a json array of objects of type &#39;group&#39; as specified in the Models section.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;GroupResultList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of groups. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupResultList> groupsListByProjectWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = groupsListByProjectValidateBeforeCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<GroupResultList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all groups (asynchronously)
     * Get all groups created in the project. Returns a json array of objects of type &#39;group&#39; as specified in the Models section.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of groups. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsListByProjectAsync(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback<GroupResultList> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsListByProjectValidateBeforeCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<GroupResultList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsUpdateMachines
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param groupUpdateProperties Machines list to be added or removed from group. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing group updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsUpdateMachinesCall(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage, UpdateGroupBody groupUpdateProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupUpdateProperties;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/groups/{groupName}/updateMachines"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsUpdateMachinesValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage, UpdateGroupBody groupUpdateProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling groupsUpdateMachines(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling groupsUpdateMachines(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling groupsUpdateMachines(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling groupsUpdateMachines(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling groupsUpdateMachines(Async)");
        }

        return groupsUpdateMachinesCall(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage, groupUpdateProperties, _callback);

    }

    /**
     * Update machines in group.
     * Update machines in group by adding or removing machines.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param groupUpdateProperties Machines list to be added or removed from group. (optional)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing group updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Group groupsUpdateMachines(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage, UpdateGroupBody groupUpdateProperties) throws ApiException {
        ApiResponse<Group> localVarResp = groupsUpdateMachinesWithHttpInfo(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage, groupUpdateProperties);
        return localVarResp.getData();
    }

    /**
     * Update machines in group.
     * Update machines in group by adding or removing machines.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param groupUpdateProperties Machines list to be added or removed from group. (optional)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing group updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> groupsUpdateMachinesWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage, UpdateGroupBody groupUpdateProperties) throws ApiException {
        okhttp3.Call localVarCall = groupsUpdateMachinesValidateBeforeCall(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage, groupUpdateProperties, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update machines in group. (asynchronously)
     * Update machines in group by adding or removing machines.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param groupName Unique name of a group within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param groupUpdateProperties Machines list to be added or removed from group. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing group updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsUpdateMachinesAsync(String subscriptionId, String resourceGroupName, String projectName, String groupName, String apiVersion, String acceptLanguage, UpdateGroupBody groupUpdateProperties, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsUpdateMachinesValidateBeforeCall(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage, groupUpdateProperties, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hyperVCollectorsCreate
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param hyperVCollectorName Unique name of a Hyper-V collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param collectorBody New or Updated Hyper-V collector. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing Hyper-V collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 201 </td><td> Created. New Hyper-V collector was created. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hyperVCollectorsCreateCall(String subscriptionId, String resourceGroupName, String projectName, String hyperVCollectorName, String apiVersion, String acceptLanguage, HyperVCollector collectorBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collectorBody;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors/{hyperVCollectorName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "hyperVCollectorName" + "}", localVarApiClient.escapeString(hyperVCollectorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hyperVCollectorsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String hyperVCollectorName, String apiVersion, String acceptLanguage, HyperVCollector collectorBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hyperVCollectorsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hyperVCollectorsCreate(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling hyperVCollectorsCreate(Async)");
        }

        // verify the required parameter 'hyperVCollectorName' is set
        if (hyperVCollectorName == null) {
            throw new ApiException("Missing the required parameter 'hyperVCollectorName' when calling hyperVCollectorsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hyperVCollectorsCreate(Async)");
        }

        return hyperVCollectorsCreateCall(subscriptionId, resourceGroupName, projectName, hyperVCollectorName, apiVersion, acceptLanguage, collectorBody, _callback);

    }

    /**
     * Create or Update Hyper-V collector.
     * Create or Update Hyper-V collector
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param hyperVCollectorName Unique name of a Hyper-V collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param collectorBody New or Updated Hyper-V collector. (optional)
     * @return HyperVCollector
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing Hyper-V collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 201 </td><td> Created. New Hyper-V collector was created. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public HyperVCollector hyperVCollectorsCreate(String subscriptionId, String resourceGroupName, String projectName, String hyperVCollectorName, String apiVersion, String acceptLanguage, HyperVCollector collectorBody) throws ApiException {
        ApiResponse<HyperVCollector> localVarResp = hyperVCollectorsCreateWithHttpInfo(subscriptionId, resourceGroupName, projectName, hyperVCollectorName, apiVersion, acceptLanguage, collectorBody);
        return localVarResp.getData();
    }

    /**
     * Create or Update Hyper-V collector.
     * Create or Update Hyper-V collector
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param hyperVCollectorName Unique name of a Hyper-V collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param collectorBody New or Updated Hyper-V collector. (optional)
     * @return ApiResponse&lt;HyperVCollector&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing Hyper-V collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 201 </td><td> Created. New Hyper-V collector was created. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HyperVCollector> hyperVCollectorsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String hyperVCollectorName, String apiVersion, String acceptLanguage, HyperVCollector collectorBody) throws ApiException {
        okhttp3.Call localVarCall = hyperVCollectorsCreateValidateBeforeCall(subscriptionId, resourceGroupName, projectName, hyperVCollectorName, apiVersion, acceptLanguage, collectorBody, null);
        Type localVarReturnType = new TypeToken<HyperVCollector>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or Update Hyper-V collector. (asynchronously)
     * Create or Update Hyper-V collector
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param hyperVCollectorName Unique name of a Hyper-V collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param collectorBody New or Updated Hyper-V collector. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing Hyper-V collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 201 </td><td> Created. New Hyper-V collector was created. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hyperVCollectorsCreateAsync(String subscriptionId, String resourceGroupName, String projectName, String hyperVCollectorName, String apiVersion, String acceptLanguage, HyperVCollector collectorBody, final ApiCallback<HyperVCollector> _callback) throws ApiException {

        okhttp3.Call localVarCall = hyperVCollectorsCreateValidateBeforeCall(subscriptionId, resourceGroupName, projectName, hyperVCollectorName, apiVersion, acceptLanguage, collectorBody, _callback);
        Type localVarReturnType = new TypeToken<HyperVCollector>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hyperVCollectorsDelete
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param hyperVCollectorName Unique name of a Hyper-V collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Deleted the Hyper-V collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 204 </td><td> No content. No Hyper-V collector with specified name was found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hyperVCollectorsDeleteCall(String subscriptionId, String resourceGroupName, String projectName, String hyperVCollectorName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors/{hyperVCollectorName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "hyperVCollectorName" + "}", localVarApiClient.escapeString(hyperVCollectorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hyperVCollectorsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String hyperVCollectorName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hyperVCollectorsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hyperVCollectorsDelete(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling hyperVCollectorsDelete(Async)");
        }

        // verify the required parameter 'hyperVCollectorName' is set
        if (hyperVCollectorName == null) {
            throw new ApiException("Missing the required parameter 'hyperVCollectorName' when calling hyperVCollectorsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hyperVCollectorsDelete(Async)");
        }

        return hyperVCollectorsDeleteCall(subscriptionId, resourceGroupName, projectName, hyperVCollectorName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Deletes Hyper-V collector from the project.
     * Delete a Hyper-V collector from the project.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param hyperVCollectorName Unique name of a Hyper-V collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Deleted the Hyper-V collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 204 </td><td> No content. No Hyper-V collector with specified name was found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void hyperVCollectorsDelete(String subscriptionId, String resourceGroupName, String projectName, String hyperVCollectorName, String apiVersion, String acceptLanguage) throws ApiException {
        hyperVCollectorsDeleteWithHttpInfo(subscriptionId, resourceGroupName, projectName, hyperVCollectorName, apiVersion, acceptLanguage);
    }

    /**
     * Deletes Hyper-V collector from the project.
     * Delete a Hyper-V collector from the project.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param hyperVCollectorName Unique name of a Hyper-V collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Deleted the Hyper-V collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 204 </td><td> No content. No Hyper-V collector with specified name was found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> hyperVCollectorsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String hyperVCollectorName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = hyperVCollectorsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, projectName, hyperVCollectorName, apiVersion, acceptLanguage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes Hyper-V collector from the project. (asynchronously)
     * Delete a Hyper-V collector from the project.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param hyperVCollectorName Unique name of a Hyper-V collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Deleted the Hyper-V collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 204 </td><td> No content. No Hyper-V collector with specified name was found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hyperVCollectorsDeleteAsync(String subscriptionId, String resourceGroupName, String projectName, String hyperVCollectorName, String apiVersion, String acceptLanguage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = hyperVCollectorsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, projectName, hyperVCollectorName, apiVersion, acceptLanguage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for hyperVCollectorsGet
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param hyperVCollectorName Unique name of a Hyper-V collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the specific Hyper-V collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hyperVCollectorsGetCall(String subscriptionId, String resourceGroupName, String projectName, String hyperVCollectorName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors/{hyperVCollectorName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "hyperVCollectorName" + "}", localVarApiClient.escapeString(hyperVCollectorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hyperVCollectorsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String hyperVCollectorName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hyperVCollectorsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hyperVCollectorsGet(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling hyperVCollectorsGet(Async)");
        }

        // verify the required parameter 'hyperVCollectorName' is set
        if (hyperVCollectorName == null) {
            throw new ApiException("Missing the required parameter 'hyperVCollectorName' when calling hyperVCollectorsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hyperVCollectorsGet(Async)");
        }

        return hyperVCollectorsGetCall(subscriptionId, resourceGroupName, projectName, hyperVCollectorName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Get a Hyper-V collector.
     * Get a Hyper-V collector.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param hyperVCollectorName Unique name of a Hyper-V collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return HyperVCollector
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the specific Hyper-V collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public HyperVCollector hyperVCollectorsGet(String subscriptionId, String resourceGroupName, String projectName, String hyperVCollectorName, String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<HyperVCollector> localVarResp = hyperVCollectorsGetWithHttpInfo(subscriptionId, resourceGroupName, projectName, hyperVCollectorName, apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get a Hyper-V collector.
     * Get a Hyper-V collector.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param hyperVCollectorName Unique name of a Hyper-V collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;HyperVCollector&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the specific Hyper-V collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HyperVCollector> hyperVCollectorsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String hyperVCollectorName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = hyperVCollectorsGetValidateBeforeCall(subscriptionId, resourceGroupName, projectName, hyperVCollectorName, apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<HyperVCollector>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a Hyper-V collector. (asynchronously)
     * Get a Hyper-V collector.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param hyperVCollectorName Unique name of a Hyper-V collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the specific Hyper-V collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hyperVCollectorsGetAsync(String subscriptionId, String resourceGroupName, String projectName, String hyperVCollectorName, String apiVersion, String acceptLanguage, final ApiCallback<HyperVCollector> _callback) throws ApiException {

        okhttp3.Call localVarCall = hyperVCollectorsGetValidateBeforeCall(subscriptionId, resourceGroupName, projectName, hyperVCollectorName, apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<HyperVCollector>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hyperVCollectorsListByProject
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of Hyper-V collectors. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hyperVCollectorsListByProjectCall(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/hypervcollectors"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hyperVCollectorsListByProjectValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hyperVCollectorsListByProject(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hyperVCollectorsListByProject(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling hyperVCollectorsListByProject(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hyperVCollectorsListByProject(Async)");
        }

        return hyperVCollectorsListByProjectCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Get a list of Hyper-V collector.
     * Get a list of Hyper-V collector.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return HyperVCollectorList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of Hyper-V collectors. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public HyperVCollectorList hyperVCollectorsListByProject(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<HyperVCollectorList> localVarResp = hyperVCollectorsListByProjectWithHttpInfo(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get a list of Hyper-V collector.
     * Get a list of Hyper-V collector.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;HyperVCollectorList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of Hyper-V collectors. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HyperVCollectorList> hyperVCollectorsListByProjectWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = hyperVCollectorsListByProjectValidateBeforeCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<HyperVCollectorList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of Hyper-V collector. (asynchronously)
     * Get a list of Hyper-V collector.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of Hyper-V collectors. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hyperVCollectorsListByProjectAsync(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback<HyperVCollectorList> _callback) throws ApiException {

        okhttp3.Call localVarCall = hyperVCollectorsListByProjectValidateBeforeCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<HyperVCollectorList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for machinesGet
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param machineName Unique name of a machine in private datacenter. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the machine with the specified name. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call machinesGetCall(String subscriptionId, String resourceGroupName, String projectName, String machineName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/machines/{machineName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "machineName" + "}", localVarApiClient.escapeString(machineName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call machinesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String machineName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling machinesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling machinesGet(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling machinesGet(Async)");
        }

        // verify the required parameter 'machineName' is set
        if (machineName == null) {
            throw new ApiException("Missing the required parameter 'machineName' when calling machinesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling machinesGet(Async)");
        }

        return machinesGetCall(subscriptionId, resourceGroupName, projectName, machineName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Get a specific machine.
     * Get the machine with the specified name. Returns a json object of type &#39;machine&#39; defined in Models section.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param machineName Unique name of a machine in private datacenter. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return Machine
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the machine with the specified name. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Machine machinesGet(String subscriptionId, String resourceGroupName, String projectName, String machineName, String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<Machine> localVarResp = machinesGetWithHttpInfo(subscriptionId, resourceGroupName, projectName, machineName, apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get a specific machine.
     * Get the machine with the specified name. Returns a json object of type &#39;machine&#39; defined in Models section.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param machineName Unique name of a machine in private datacenter. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;Machine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the machine with the specified name. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Machine> machinesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String machineName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = machinesGetValidateBeforeCall(subscriptionId, resourceGroupName, projectName, machineName, apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<Machine>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific machine. (asynchronously)
     * Get the machine with the specified name. Returns a json object of type &#39;machine&#39; defined in Models section.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param machineName Unique name of a machine in private datacenter. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the machine with the specified name. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call machinesGetAsync(String subscriptionId, String resourceGroupName, String projectName, String machineName, String apiVersion, String acceptLanguage, final ApiCallback<Machine> _callback) throws ApiException {

        okhttp3.Call localVarCall = machinesGetValidateBeforeCall(subscriptionId, resourceGroupName, projectName, machineName, apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<Machine>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for machinesListByProject
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of all machine objects. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call machinesListByProjectCall(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/machines"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call machinesListByProjectValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling machinesListByProject(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling machinesListByProject(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling machinesListByProject(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling machinesListByProject(Async)");
        }

        return machinesListByProjectCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Get all machines in the project
     * Get data of all the machines available in the project. Returns a json array of objects of type &#39;machine&#39; defined in Models section.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return MachineResultList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of all machine objects. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public MachineResultList machinesListByProject(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<MachineResultList> localVarResp = machinesListByProjectWithHttpInfo(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get all machines in the project
     * Get data of all the machines available in the project. Returns a json array of objects of type &#39;machine&#39; defined in Models section.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;MachineResultList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of all machine objects. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MachineResultList> machinesListByProjectWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = machinesListByProjectValidateBeforeCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<MachineResultList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all machines in the project (asynchronously)
     * Get data of all the machines available in the project. Returns a json array of objects of type &#39;machine&#39; defined in Models section.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of all machine objects. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call machinesListByProjectAsync(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback<MachineResultList> _callback) throws ApiException {

        okhttp3.Call localVarCall = machinesListByProjectValidateBeforeCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<MachineResultList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for operationsList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of operations. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Migrate/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operationsListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return operationsListCall(_callback);

    }

    /**
     * Get list of operations supported in the API.
     * Get a list of REST API supported by Microsoft.Migrate provider.
     * @return OperationResultList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of operations. </td><td>  -  </td></tr>
     </table>
     */
    public OperationResultList operationsList() throws ApiException {
        ApiResponse<OperationResultList> localVarResp = operationsListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get list of operations supported in the API.
     * Get a list of REST API supported by Microsoft.Migrate provider.
     * @return ApiResponse&lt;OperationResultList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of operations. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationResultList> operationsListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = operationsListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OperationResultList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of operations supported in the API. (asynchronously)
     * Get a list of REST API supported by Microsoft.Migrate provider.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of operations. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsListAsync(final ApiCallback<OperationResultList> _callback) throws ApiException {

        okhttp3.Call localVarCall = operationsListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OperationResultList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectAssessmentOptions
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param assessmentOptionsName Name of the assessment options. The only name accepted in default. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectAssessmentOptionsCall(String subscriptionId, String resourceGroupName, String projectName, String assessmentOptionsName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessmentOptions/{assessmentOptionsName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "assessmentOptionsName" + "}", localVarApiClient.escapeString(assessmentOptionsName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectAssessmentOptionsValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String assessmentOptionsName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectAssessmentOptions(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling projectAssessmentOptions(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling projectAssessmentOptions(Async)");
        }

        // verify the required parameter 'assessmentOptionsName' is set
        if (assessmentOptionsName == null) {
            throw new ApiException("Missing the required parameter 'assessmentOptionsName' when calling projectAssessmentOptions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectAssessmentOptions(Async)");
        }

        return projectAssessmentOptionsCall(subscriptionId, resourceGroupName, projectName, assessmentOptionsName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Get all available options for the properties of an assessment on a project.
     * Get all available options for the properties of an assessment on a project.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param assessmentOptionsName Name of the assessment options. The only name accepted in default. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return AssessmentOptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AssessmentOptions projectAssessmentOptions(String subscriptionId, String resourceGroupName, String projectName, String assessmentOptionsName, String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<AssessmentOptions> localVarResp = projectAssessmentOptionsWithHttpInfo(subscriptionId, resourceGroupName, projectName, assessmentOptionsName, apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get all available options for the properties of an assessment on a project.
     * Get all available options for the properties of an assessment on a project.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param assessmentOptionsName Name of the assessment options. The only name accepted in default. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;AssessmentOptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssessmentOptions> projectAssessmentOptionsWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String assessmentOptionsName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = projectAssessmentOptionsValidateBeforeCall(subscriptionId, resourceGroupName, projectName, assessmentOptionsName, apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<AssessmentOptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all available options for the properties of an assessment on a project. (asynchronously)
     * Get all available options for the properties of an assessment on a project.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param assessmentOptionsName Name of the assessment options. The only name accepted in default. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectAssessmentOptionsAsync(String subscriptionId, String resourceGroupName, String projectName, String assessmentOptionsName, String apiVersion, String acceptLanguage, final ApiCallback<AssessmentOptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectAssessmentOptionsValidateBeforeCall(subscriptionId, resourceGroupName, projectName, assessmentOptionsName, apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<AssessmentOptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectAssessmentOptionsList
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectAssessmentOptionsListCall(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/assessmentOptions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectAssessmentOptionsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectAssessmentOptionsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling projectAssessmentOptionsList(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling projectAssessmentOptionsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectAssessmentOptionsList(Async)");
        }

        return projectAssessmentOptionsListCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Gets list of all available options for the properties of an assessment on a project.
     * Gets list of all available options for the properties of an assessment on a project.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return AssessmentOptionsResultList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AssessmentOptionsResultList projectAssessmentOptionsList(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<AssessmentOptionsResultList> localVarResp = projectAssessmentOptionsListWithHttpInfo(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Gets list of all available options for the properties of an assessment on a project.
     * Gets list of all available options for the properties of an assessment on a project.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;AssessmentOptionsResultList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AssessmentOptionsResultList> projectAssessmentOptionsListWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = projectAssessmentOptionsListValidateBeforeCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<AssessmentOptionsResultList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets list of all available options for the properties of an assessment on a project. (asynchronously)
     * Gets list of all available options for the properties of an assessment on a project.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectAssessmentOptionsListAsync(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback<AssessmentOptionsResultList> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectAssessmentOptionsListValidateBeforeCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<AssessmentOptionsResultList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsCreate
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param project New or Updated project object. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing project updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 201 </td><td> Created. New project was created. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsCreateCall(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, Project project, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = project;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, Project project, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling projectsCreate(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling projectsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsCreate(Async)");
        }

        return projectsCreateCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, project, _callback);

    }

    /**
     * Create or update project.
     * Create a project with specified name. If a project already exists, update it.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param project New or Updated project object. (optional)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing project updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 201 </td><td> Created. New project was created. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Project projectsCreate(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, Project project) throws ApiException {
        ApiResponse<Project> localVarResp = projectsCreateWithHttpInfo(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, project);
        return localVarResp.getData();
    }

    /**
     * Create or update project.
     * Create a project with specified name. If a project already exists, update it.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param project New or Updated project object. (optional)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing project updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 201 </td><td> Created. New project was created. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> projectsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, Project project) throws ApiException {
        okhttp3.Call localVarCall = projectsCreateValidateBeforeCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, project, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update project. (asynchronously)
     * Create a project with specified name. If a project already exists, update it.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param project New or Updated project object. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing project updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 201 </td><td> Created. New project was created. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsCreateAsync(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, Project project, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsCreateValidateBeforeCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, project, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsDelete
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Deleted the group. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 204 </td><td> No content. No project with specified name was found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsDeleteCall(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling projectsDelete(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling projectsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsDelete(Async)");
        }

        return projectsDeleteCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Delete the project
     * Delete the project. Deleting non-existent project is a no-operation.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Deleted the group. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 204 </td><td> No content. No project with specified name was found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void projectsDelete(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage) throws ApiException {
        projectsDeleteWithHttpInfo(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage);
    }

    /**
     * Delete the project
     * Delete the project. Deleting non-existent project is a no-operation.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Deleted the group. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 204 </td><td> No content. No project with specified name was found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = projectsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the project (asynchronously)
     * Delete the project. Deleting non-existent project is a no-operation.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Deleted the group. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 204 </td><td> No content. No project with specified name was found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsDeleteAsync(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsGet
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsGetCall(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling projectsGet(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling projectsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsGet(Async)");
        }

        return projectsGetCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Get the specified project.
     * Get the project with the specified name.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Project projectsGet(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<Project> localVarResp = projectsGetWithHttpInfo(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get the specified project.
     * Get the project with the specified name.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> projectsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = projectsGetValidateBeforeCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the specified project. (asynchronously)
     * Get the project with the specified name.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsGetAsync(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsGetValidateBeforeCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsList
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsListCall(String subscriptionId, String resourceGroupName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling projectsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsList(Async)");
        }

        return projectsListCall(subscriptionId, resourceGroupName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Get all projects.
     * Get all the projects in the resource group.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ProjectResultList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectResultList projectsList(String subscriptionId, String resourceGroupName, String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<ProjectResultList> localVarResp = projectsListWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get all projects.
     * Get all the projects in the resource group.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;ProjectResultList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectResultList> projectsListWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = projectsListValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<ProjectResultList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all projects. (asynchronously)
     * Get all the projects in the resource group.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsListAsync(String subscriptionId, String resourceGroupName, String apiVersion, String acceptLanguage, final ApiCallback<ProjectResultList> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsListValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<ProjectResultList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsListBySubscription
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsListBySubscriptionCall(String subscriptionId, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Migrate/assessmentProjects"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsListBySubscriptionValidateBeforeCall(String subscriptionId, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsListBySubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsListBySubscription(Async)");
        }

        return projectsListBySubscriptionCall(subscriptionId, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Get all projects.
     * Get all the projects in the subscription.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ProjectResultList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ProjectResultList projectsListBySubscription(String subscriptionId, String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<ProjectResultList> localVarResp = projectsListBySubscriptionWithHttpInfo(subscriptionId, apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get all projects.
     * Get all the projects in the subscription.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;ProjectResultList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectResultList> projectsListBySubscriptionWithHttpInfo(String subscriptionId, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = projectsListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<ProjectResultList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all projects. (asynchronously)
     * Get all the projects in the subscription.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsListBySubscriptionAsync(String subscriptionId, String apiVersion, String acceptLanguage, final ApiCallback<ProjectResultList> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<ProjectResultList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsUpdate
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param project Updated project object. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing project updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsUpdateCall(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, Project project, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = project;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, Project project, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling projectsUpdate(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling projectsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsUpdate(Async)");
        }

        return projectsUpdateCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, project, _callback);

    }

    /**
     * Update project.
     * Update a project with specified name. Supports partial updates, for example only tags can be provided.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param project Updated project object. (optional)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing project updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Project projectsUpdate(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, Project project) throws ApiException {
        ApiResponse<Project> localVarResp = projectsUpdateWithHttpInfo(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, project);
        return localVarResp.getData();
    }

    /**
     * Update project.
     * Update a project with specified name. Supports partial updates, for example only tags can be provided.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param project Updated project object. (optional)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing project updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> projectsUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, Project project) throws ApiException {
        okhttp3.Call localVarCall = projectsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, project, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update project. (asynchronously)
     * Update a project with specified name. Supports partial updates, for example only tags can be provided.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param project Updated project object. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing project updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsUpdateAsync(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, Project project, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, project, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vMwareCollectorsCreate
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param vmWareCollectorName Unique name of a VMware collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param collectorBody New or Updated VMware collector. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing VMware collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 201 </td><td> Created. New VMware collector was created. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vMwareCollectorsCreateCall(String subscriptionId, String resourceGroupName, String projectName, String vmWareCollectorName, String apiVersion, String acceptLanguage, VMwareCollector collectorBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collectorBody;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors/{vmWareCollectorName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "vmWareCollectorName" + "}", localVarApiClient.escapeString(vmWareCollectorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vMwareCollectorsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String vmWareCollectorName, String apiVersion, String acceptLanguage, VMwareCollector collectorBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vMwareCollectorsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vMwareCollectorsCreate(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling vMwareCollectorsCreate(Async)");
        }

        // verify the required parameter 'vmWareCollectorName' is set
        if (vmWareCollectorName == null) {
            throw new ApiException("Missing the required parameter 'vmWareCollectorName' when calling vMwareCollectorsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vMwareCollectorsCreate(Async)");
        }

        return vMwareCollectorsCreateCall(subscriptionId, resourceGroupName, projectName, vmWareCollectorName, apiVersion, acceptLanguage, collectorBody, _callback);

    }

    /**
     * Create or Update VMware collector.
     * Create or Update VMware collector
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param vmWareCollectorName Unique name of a VMware collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param collectorBody New or Updated VMware collector. (optional)
     * @return VMwareCollector
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing VMware collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 201 </td><td> Created. New VMware collector was created. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public VMwareCollector vMwareCollectorsCreate(String subscriptionId, String resourceGroupName, String projectName, String vmWareCollectorName, String apiVersion, String acceptLanguage, VMwareCollector collectorBody) throws ApiException {
        ApiResponse<VMwareCollector> localVarResp = vMwareCollectorsCreateWithHttpInfo(subscriptionId, resourceGroupName, projectName, vmWareCollectorName, apiVersion, acceptLanguage, collectorBody);
        return localVarResp.getData();
    }

    /**
     * Create or Update VMware collector.
     * Create or Update VMware collector
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param vmWareCollectorName Unique name of a VMware collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param collectorBody New or Updated VMware collector. (optional)
     * @return ApiResponse&lt;VMwareCollector&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing VMware collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 201 </td><td> Created. New VMware collector was created. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VMwareCollector> vMwareCollectorsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String vmWareCollectorName, String apiVersion, String acceptLanguage, VMwareCollector collectorBody) throws ApiException {
        okhttp3.Call localVarCall = vMwareCollectorsCreateValidateBeforeCall(subscriptionId, resourceGroupName, projectName, vmWareCollectorName, apiVersion, acceptLanguage, collectorBody, null);
        Type localVarReturnType = new TypeToken<VMwareCollector>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or Update VMware collector. (asynchronously)
     * Create or Update VMware collector
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param vmWareCollectorName Unique name of a VMware collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param collectorBody New or Updated VMware collector. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Existing VMware collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 201 </td><td> Created. New VMware collector was created. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vMwareCollectorsCreateAsync(String subscriptionId, String resourceGroupName, String projectName, String vmWareCollectorName, String apiVersion, String acceptLanguage, VMwareCollector collectorBody, final ApiCallback<VMwareCollector> _callback) throws ApiException {

        okhttp3.Call localVarCall = vMwareCollectorsCreateValidateBeforeCall(subscriptionId, resourceGroupName, projectName, vmWareCollectorName, apiVersion, acceptLanguage, collectorBody, _callback);
        Type localVarReturnType = new TypeToken<VMwareCollector>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vMwareCollectorsDelete
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param vmWareCollectorName Unique name of a VMware collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Deleted the VMware collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 204 </td><td> No content. No VMware collector with specified name was found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vMwareCollectorsDeleteCall(String subscriptionId, String resourceGroupName, String projectName, String vmWareCollectorName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors/{vmWareCollectorName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "vmWareCollectorName" + "}", localVarApiClient.escapeString(vmWareCollectorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vMwareCollectorsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String vmWareCollectorName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vMwareCollectorsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vMwareCollectorsDelete(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling vMwareCollectorsDelete(Async)");
        }

        // verify the required parameter 'vmWareCollectorName' is set
        if (vmWareCollectorName == null) {
            throw new ApiException("Missing the required parameter 'vmWareCollectorName' when calling vMwareCollectorsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vMwareCollectorsDelete(Async)");
        }

        return vMwareCollectorsDeleteCall(subscriptionId, resourceGroupName, projectName, vmWareCollectorName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Deletes VMware collector from the project.
     * Delete a VMware collector from the project.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param vmWareCollectorName Unique name of a VMware collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Deleted the VMware collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 204 </td><td> No content. No VMware collector with specified name was found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void vMwareCollectorsDelete(String subscriptionId, String resourceGroupName, String projectName, String vmWareCollectorName, String apiVersion, String acceptLanguage) throws ApiException {
        vMwareCollectorsDeleteWithHttpInfo(subscriptionId, resourceGroupName, projectName, vmWareCollectorName, apiVersion, acceptLanguage);
    }

    /**
     * Deletes VMware collector from the project.
     * Delete a VMware collector from the project.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param vmWareCollectorName Unique name of a VMware collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Deleted the VMware collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 204 </td><td> No content. No VMware collector with specified name was found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vMwareCollectorsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String vmWareCollectorName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = vMwareCollectorsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, projectName, vmWareCollectorName, apiVersion, acceptLanguage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes VMware collector from the project. (asynchronously)
     * Delete a VMware collector from the project.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param vmWareCollectorName Unique name of a VMware collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Deleted the VMware collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 204 </td><td> No content. No VMware collector with specified name was found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vMwareCollectorsDeleteAsync(String subscriptionId, String resourceGroupName, String projectName, String vmWareCollectorName, String apiVersion, String acceptLanguage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vMwareCollectorsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, projectName, vmWareCollectorName, apiVersion, acceptLanguage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vMwareCollectorsGet
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param vmWareCollectorName Unique name of a VMware collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the specific VMware collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vMwareCollectorsGetCall(String subscriptionId, String resourceGroupName, String projectName, String vmWareCollectorName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors/{vmWareCollectorName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "vmWareCollectorName" + "}", localVarApiClient.escapeString(vmWareCollectorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vMwareCollectorsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String vmWareCollectorName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vMwareCollectorsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vMwareCollectorsGet(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling vMwareCollectorsGet(Async)");
        }

        // verify the required parameter 'vmWareCollectorName' is set
        if (vmWareCollectorName == null) {
            throw new ApiException("Missing the required parameter 'vmWareCollectorName' when calling vMwareCollectorsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vMwareCollectorsGet(Async)");
        }

        return vMwareCollectorsGetCall(subscriptionId, resourceGroupName, projectName, vmWareCollectorName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Get a VMware collector.
     * Get a VMware collector.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param vmWareCollectorName Unique name of a VMware collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return VMwareCollector
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the specific VMware collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public VMwareCollector vMwareCollectorsGet(String subscriptionId, String resourceGroupName, String projectName, String vmWareCollectorName, String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<VMwareCollector> localVarResp = vMwareCollectorsGetWithHttpInfo(subscriptionId, resourceGroupName, projectName, vmWareCollectorName, apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get a VMware collector.
     * Get a VMware collector.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param vmWareCollectorName Unique name of a VMware collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;VMwareCollector&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the specific VMware collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VMwareCollector> vMwareCollectorsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String vmWareCollectorName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = vMwareCollectorsGetValidateBeforeCall(subscriptionId, resourceGroupName, projectName, vmWareCollectorName, apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<VMwareCollector>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a VMware collector. (asynchronously)
     * Get a VMware collector.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param vmWareCollectorName Unique name of a VMware collector within a project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the specific VMware collector. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vMwareCollectorsGetAsync(String subscriptionId, String resourceGroupName, String projectName, String vmWareCollectorName, String apiVersion, String acceptLanguage, final ApiCallback<VMwareCollector> _callback) throws ApiException {

        okhttp3.Call localVarCall = vMwareCollectorsGetValidateBeforeCall(subscriptionId, resourceGroupName, projectName, vmWareCollectorName, apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<VMwareCollector>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vMwareCollectorsListByProject
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of VMware collectors. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vMwareCollectorsListByProjectCall(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/assessmentProjects/{projectName}/vmwarecollectors"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vMwareCollectorsListByProjectValidateBeforeCall(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vMwareCollectorsListByProject(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vMwareCollectorsListByProject(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling vMwareCollectorsListByProject(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vMwareCollectorsListByProject(Async)");
        }

        return vMwareCollectorsListByProjectCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * Get a list of VMware collector.
     * Get a list of VMware collector.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return VMwareCollectorList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of VMware collectors. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public VMwareCollectorList vMwareCollectorsListByProject(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<VMwareCollectorList> localVarResp = vMwareCollectorsListByProjectWithHttpInfo(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * Get a list of VMware collector.
     * Get a list of VMware collector.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @return ApiResponse&lt;VMwareCollectorList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of VMware collectors. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VMwareCollectorList> vMwareCollectorsListByProjectWithHttpInfo(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = vMwareCollectorsListByProjectValidateBeforeCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<VMwareCollectorList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of VMware collector. (asynchronously)
     * Get a list of VMware collector.
     * @param subscriptionId Azure Subscription Id in which project was created. (required)
     * @param resourceGroupName Name of the Azure Resource Group that project is part of. (required)
     * @param projectName Name of the Azure Migrate project. (required)
     * @param apiVersion Standard request header. Used by service to identify API version used by client. (required)
     * @param acceptLanguage Standard request header. Used by service to respond to client in appropriate language. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of VMware collectors. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vMwareCollectorsListByProjectAsync(String subscriptionId, String resourceGroupName, String projectName, String apiVersion, String acceptLanguage, final ApiCallback<VMwareCollectorList> _callback) throws ApiException {

        okhttp3.Call localVarCall = vMwareCollectorsListByProjectValidateBeforeCall(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<VMwareCollectorList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
