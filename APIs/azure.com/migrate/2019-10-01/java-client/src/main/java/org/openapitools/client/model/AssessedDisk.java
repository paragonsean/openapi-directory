/*
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A disk assessed for an assessment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:36.892251-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssessedDisk {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_GIGABYTES_FOR_RECOMMENDED_DISK_SIZE = "gigabytesForRecommendedDiskSize";
  @SerializedName(SERIALIZED_NAME_GIGABYTES_FOR_RECOMMENDED_DISK_SIZE)
  private Integer gigabytesForRecommendedDiskSize;

  public static final String SERIALIZED_NAME_GIGABYTES_PROVISIONED = "gigabytesProvisioned";
  @SerializedName(SERIALIZED_NAME_GIGABYTES_PROVISIONED)
  private Double gigabytesProvisioned;

  public static final String SERIALIZED_NAME_MEGABYTES_PER_SECOND_OF_READ = "megabytesPerSecondOfRead";
  @SerializedName(SERIALIZED_NAME_MEGABYTES_PER_SECOND_OF_READ)
  private Double megabytesPerSecondOfRead;

  public static final String SERIALIZED_NAME_MEGABYTES_PER_SECOND_OF_WRITE = "megabytesPerSecondOfWrite";
  @SerializedName(SERIALIZED_NAME_MEGABYTES_PER_SECOND_OF_WRITE)
  private Double megabytesPerSecondOfWrite;

  public static final String SERIALIZED_NAME_MONTHLY_STORAGE_COST = "monthlyStorageCost";
  @SerializedName(SERIALIZED_NAME_MONTHLY_STORAGE_COST)
  private Double monthlyStorageCost;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER_OF_READ_OPERATIONS_PER_SECOND = "numberOfReadOperationsPerSecond";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_READ_OPERATIONS_PER_SECOND)
  private Double numberOfReadOperationsPerSecond;

  public static final String SERIALIZED_NAME_NUMBER_OF_WRITE_OPERATIONS_PER_SECOND = "numberOfWriteOperationsPerSecond";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_WRITE_OPERATIONS_PER_SECOND)
  private Double numberOfWriteOperationsPerSecond;

  /**
   * Recommended Azure size for the disk, given utilization data and preferences set on Assessment.
   */
  @JsonAdapter(RecommendedDiskSizeEnum.Adapter.class)
  public enum RecommendedDiskSizeEnum {
    UNKNOWN("Unknown"),
    
    STANDARD_S4("Standard_S4"),
    
    STANDARD_S6("Standard_S6"),
    
    STANDARD_S10("Standard_S10"),
    
    STANDARD_S15("Standard_S15"),
    
    STANDARD_S20("Standard_S20"),
    
    STANDARD_S30("Standard_S30"),
    
    STANDARD_S40("Standard_S40"),
    
    STANDARD_S50("Standard_S50"),
    
    PREMIUM_P4("Premium_P4"),
    
    PREMIUM_P6("Premium_P6"),
    
    PREMIUM_P10("Premium_P10"),
    
    PREMIUM_P15("Premium_P15"),
    
    PREMIUM_P20("Premium_P20"),
    
    PREMIUM_P30("Premium_P30"),
    
    PREMIUM_P40("Premium_P40"),
    
    PREMIUM_P50("Premium_P50"),
    
    STANDARD_S60("Standard_S60"),
    
    STANDARD_S70("Standard_S70"),
    
    STANDARD_S80("Standard_S80"),
    
    PREMIUM_P60("Premium_P60"),
    
    PREMIUM_P70("Premium_P70"),
    
    PREMIUM_P80("Premium_P80"),
    
    STANDARD_SSD_E10("StandardSSD_E10"),
    
    STANDARD_SSD_E15("StandardSSD_E15"),
    
    STANDARD_SSD_E20("StandardSSD_E20"),
    
    STANDARD_SSD_E30("StandardSSD_E30"),
    
    STANDARD_SSD_E40("StandardSSD_E40"),
    
    STANDARD_SSD_E50("StandardSSD_E50"),
    
    STANDARD_SSD_E60("StandardSSD_E60"),
    
    STANDARD_SSD_E70("StandardSSD_E70"),
    
    STANDARD_SSD_E80("StandardSSD_E80"),
    
    STANDARD_SSD_E4("StandardSSD_E4"),
    
    STANDARD_SSD_E6("StandardSSD_E6");

    private String value;

    RecommendedDiskSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecommendedDiskSizeEnum fromValue(String value) {
      for (RecommendedDiskSizeEnum b : RecommendedDiskSizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecommendedDiskSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecommendedDiskSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecommendedDiskSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecommendedDiskSizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecommendedDiskSizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECOMMENDED_DISK_SIZE = "recommendedDiskSize";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_DISK_SIZE)
  private RecommendedDiskSizeEnum recommendedDiskSize;

  /**
   * Storage type selected for this disk.
   */
  @JsonAdapter(RecommendedDiskTypeEnum.Adapter.class)
  public enum RecommendedDiskTypeEnum {
    UNKNOWN("Unknown"),
    
    STANDARD("Standard"),
    
    PREMIUM("Premium"),
    
    STANDARD_SSD("StandardSSD"),
    
    STANDARD_OR_PREMIUM("StandardOrPremium");

    private String value;

    RecommendedDiskTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecommendedDiskTypeEnum fromValue(String value) {
      for (RecommendedDiskTypeEnum b : RecommendedDiskTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecommendedDiskTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecommendedDiskTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecommendedDiskTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecommendedDiskTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecommendedDiskTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECOMMENDED_DISK_TYPE = "recommendedDiskType";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_DISK_TYPE)
  private RecommendedDiskTypeEnum recommendedDiskType;

  /**
   * Whether this disk is suitable for Azure.
   */
  @JsonAdapter(SuitabilityEnum.Adapter.class)
  public enum SuitabilityEnum {
    UNKNOWN("Unknown"),
    
    NOT_SUITABLE("NotSuitable"),
    
    SUITABLE("Suitable"),
    
    CONDITIONALLY_SUITABLE("ConditionallySuitable"),
    
    READINESS_UNKNOWN("ReadinessUnknown");

    private String value;

    SuitabilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SuitabilityEnum fromValue(String value) {
      for (SuitabilityEnum b : SuitabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SuitabilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SuitabilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SuitabilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SuitabilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SuitabilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUITABILITY = "suitability";
  @SerializedName(SERIALIZED_NAME_SUITABILITY)
  private SuitabilityEnum suitability;

  /**
   * If disk is suitable to be migrate but some conditions/checks were not considered while calculating suitability, this explains the details.
   */
  @JsonAdapter(SuitabilityDetailEnum.Adapter.class)
  public enum SuitabilityDetailEnum {
    NONE("None"),
    
    NUMBER_OF_READ_OPERATIONS_PER_SECOND_MISSING("NumberOfReadOperationsPerSecondMissing"),
    
    NUMBER_OF_WRITE_OPERATIONS_PER_SECOND_MISSING("NumberOfWriteOperationsPerSecondMissing"),
    
    MEGABYTES_PER_SECOND_OF_READ_MISSING("MegabytesPerSecondOfReadMissing"),
    
    MEGABYTES_PER_SECOND_OF_WRITE_MISSING("MegabytesPerSecondOfWriteMissing"),
    
    DISK_GIGABYTES_CONSUMED_MISSING("DiskGigabytesConsumedMissing"),
    
    DISK_GIGABYTES_PROVISIONED_MISSING("DiskGigabytesProvisionedMissing"),
    
    NUMBER_OF_READ_OPERATIONS_PER_SECOND_OUT_OF_RANGE("NumberOfReadOperationsPerSecondOutOfRange"),
    
    NUMBER_OF_WRITE_OPERATIONS_PER_SECOND_OUT_OF_RANGE("NumberOfWriteOperationsPerSecondOutOfRange"),
    
    MEGABYTES_PER_SECOND_OF_READ_OUT_OF_RANGE("MegabytesPerSecondOfReadOutOfRange"),
    
    MEGABYTES_PER_SECOND_OF_WRITE_OUT_OF_RANGE("MegabytesPerSecondOfWriteOutOfRange"),
    
    DISK_GIGABYTES_CONSUMED_OUT_OF_RANGE("DiskGigabytesConsumedOutOfRange"),
    
    DISK_GIGABYTES_PROVISIONED_OUT_OF_RANGE("DiskGigabytesProvisionedOutOfRange");

    private String value;

    SuitabilityDetailEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SuitabilityDetailEnum fromValue(String value) {
      for (SuitabilityDetailEnum b : SuitabilityDetailEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SuitabilityDetailEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SuitabilityDetailEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SuitabilityDetailEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SuitabilityDetailEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SuitabilityDetailEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUITABILITY_DETAIL = "suitabilityDetail";
  @SerializedName(SERIALIZED_NAME_SUITABILITY_DETAIL)
  private SuitabilityDetailEnum suitabilityDetail;

  /**
   * If disk is not suitable to be migrated, this explains the reasons and mitigation steps.
   */
  @JsonAdapter(SuitabilityExplanationEnum.Adapter.class)
  public enum SuitabilityExplanationEnum {
    UNKNOWN("Unknown"),
    
    NOT_APPLICABLE("NotApplicable"),
    
    DISK_SIZE_GREATER_THAN_SUPPORTED("DiskSizeGreaterThanSupported"),
    
    NO_SUITABLE_DISK_SIZE_FOR_IOPS("NoSuitableDiskSizeForIops"),
    
    NO_SUITABLE_DISK_SIZE_FOR_THROUGHPUT("NoSuitableDiskSizeForThroughput"),
    
    NO_DISK_SIZE_FOUND_IN_SELECTED_LOCATION("NoDiskSizeFoundInSelectedLocation"),
    
    NO_DISK_SIZE_FOUND_FOR_SELECTED_REDUNDANCY("NoDiskSizeFoundForSelectedRedundancy"),
    
    INTERNAL_ERROR_OCCURRED_FOR_DISK_EVALUATION("InternalErrorOccurredForDiskEvaluation"),
    
    NO_EA_PRICE_FOUND_FOR_DISK_SIZE("NoEaPriceFoundForDiskSize");

    private String value;

    SuitabilityExplanationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SuitabilityExplanationEnum fromValue(String value) {
      for (SuitabilityExplanationEnum b : SuitabilityExplanationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SuitabilityExplanationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SuitabilityExplanationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SuitabilityExplanationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SuitabilityExplanationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SuitabilityExplanationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUITABILITY_EXPLANATION = "suitabilityExplanation";
  @SerializedName(SERIALIZED_NAME_SUITABILITY_EXPLANATION)
  private SuitabilityExplanationEnum suitabilityExplanation;

  public AssessedDisk() {
  }

  public AssessedDisk(
     String displayName, 
     Integer gigabytesForRecommendedDiskSize, 
     Double gigabytesProvisioned, 
     Double megabytesPerSecondOfRead, 
     Double megabytesPerSecondOfWrite, 
     Double monthlyStorageCost, 
     String name, 
     Double numberOfReadOperationsPerSecond, 
     Double numberOfWriteOperationsPerSecond, 
     RecommendedDiskSizeEnum recommendedDiskSize, 
     RecommendedDiskTypeEnum recommendedDiskType, 
     SuitabilityEnum suitability, 
     SuitabilityDetailEnum suitabilityDetail, 
     SuitabilityExplanationEnum suitabilityExplanation
  ) {
    this();
    this.displayName = displayName;
    this.gigabytesForRecommendedDiskSize = gigabytesForRecommendedDiskSize;
    this.gigabytesProvisioned = gigabytesProvisioned;
    this.megabytesPerSecondOfRead = megabytesPerSecondOfRead;
    this.megabytesPerSecondOfWrite = megabytesPerSecondOfWrite;
    this.monthlyStorageCost = monthlyStorageCost;
    this.name = name;
    this.numberOfReadOperationsPerSecond = numberOfReadOperationsPerSecond;
    this.numberOfWriteOperationsPerSecond = numberOfWriteOperationsPerSecond;
    this.recommendedDiskSize = recommendedDiskSize;
    this.recommendedDiskType = recommendedDiskType;
    this.suitability = suitability;
    this.suitabilityDetail = suitabilityDetail;
    this.suitabilityExplanation = suitabilityExplanation;
  }

  /**
   * User friendly name of the assessed disk.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  /**
   * Gigabytes of storage provided by the recommended Azure disk size.
   * @return gigabytesForRecommendedDiskSize
   */
  @javax.annotation.Nullable
  public Integer getGigabytesForRecommendedDiskSize() {
    return gigabytesForRecommendedDiskSize;
  }



  /**
   * Gigabytes of storage provisioned for this disk.
   * @return gigabytesProvisioned
   */
  @javax.annotation.Nullable
  public Double getGigabytesProvisioned() {
    return gigabytesProvisioned;
  }



  /**
   * Disk throughput in MegaBytes per second.
   * @return megabytesPerSecondOfRead
   */
  @javax.annotation.Nullable
  public Double getMegabytesPerSecondOfRead() {
    return megabytesPerSecondOfRead;
  }



  /**
   * Disk throughput in MegaBytes per second.
   * @return megabytesPerSecondOfWrite
   */
  @javax.annotation.Nullable
  public Double getMegabytesPerSecondOfWrite() {
    return megabytesPerSecondOfWrite;
  }



  /**
   * Estimated aggregate storage cost for a 31-day month for this disk.
   * @return monthlyStorageCost
   */
  @javax.annotation.Nullable
  public Double getMonthlyStorageCost() {
    return monthlyStorageCost;
  }



  /**
   * Name of the assessed disk.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Number of read operations per second for the disk.
   * @return numberOfReadOperationsPerSecond
   */
  @javax.annotation.Nullable
  public Double getNumberOfReadOperationsPerSecond() {
    return numberOfReadOperationsPerSecond;
  }



  /**
   * Number of read and write operations per second for the disk.
   * @return numberOfWriteOperationsPerSecond
   */
  @javax.annotation.Nullable
  public Double getNumberOfWriteOperationsPerSecond() {
    return numberOfWriteOperationsPerSecond;
  }



  /**
   * Recommended Azure size for the disk, given utilization data and preferences set on Assessment.
   * @return recommendedDiskSize
   */
  @javax.annotation.Nullable
  public RecommendedDiskSizeEnum getRecommendedDiskSize() {
    return recommendedDiskSize;
  }



  /**
   * Storage type selected for this disk.
   * @return recommendedDiskType
   */
  @javax.annotation.Nullable
  public RecommendedDiskTypeEnum getRecommendedDiskType() {
    return recommendedDiskType;
  }



  /**
   * Whether this disk is suitable for Azure.
   * @return suitability
   */
  @javax.annotation.Nullable
  public SuitabilityEnum getSuitability() {
    return suitability;
  }



  /**
   * If disk is suitable to be migrate but some conditions/checks were not considered while calculating suitability, this explains the details.
   * @return suitabilityDetail
   */
  @javax.annotation.Nullable
  public SuitabilityDetailEnum getSuitabilityDetail() {
    return suitabilityDetail;
  }



  /**
   * If disk is not suitable to be migrated, this explains the reasons and mitigation steps.
   * @return suitabilityExplanation
   */
  @javax.annotation.Nullable
  public SuitabilityExplanationEnum getSuitabilityExplanation() {
    return suitabilityExplanation;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssessedDisk assessedDisk = (AssessedDisk) o;
    return Objects.equals(this.displayName, assessedDisk.displayName) &&
        Objects.equals(this.gigabytesForRecommendedDiskSize, assessedDisk.gigabytesForRecommendedDiskSize) &&
        Objects.equals(this.gigabytesProvisioned, assessedDisk.gigabytesProvisioned) &&
        Objects.equals(this.megabytesPerSecondOfRead, assessedDisk.megabytesPerSecondOfRead) &&
        Objects.equals(this.megabytesPerSecondOfWrite, assessedDisk.megabytesPerSecondOfWrite) &&
        Objects.equals(this.monthlyStorageCost, assessedDisk.monthlyStorageCost) &&
        Objects.equals(this.name, assessedDisk.name) &&
        Objects.equals(this.numberOfReadOperationsPerSecond, assessedDisk.numberOfReadOperationsPerSecond) &&
        Objects.equals(this.numberOfWriteOperationsPerSecond, assessedDisk.numberOfWriteOperationsPerSecond) &&
        Objects.equals(this.recommendedDiskSize, assessedDisk.recommendedDiskSize) &&
        Objects.equals(this.recommendedDiskType, assessedDisk.recommendedDiskType) &&
        Objects.equals(this.suitability, assessedDisk.suitability) &&
        Objects.equals(this.suitabilityDetail, assessedDisk.suitabilityDetail) &&
        Objects.equals(this.suitabilityExplanation, assessedDisk.suitabilityExplanation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, gigabytesForRecommendedDiskSize, gigabytesProvisioned, megabytesPerSecondOfRead, megabytesPerSecondOfWrite, monthlyStorageCost, name, numberOfReadOperationsPerSecond, numberOfWriteOperationsPerSecond, recommendedDiskSize, recommendedDiskType, suitability, suitabilityDetail, suitabilityExplanation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssessedDisk {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    gigabytesForRecommendedDiskSize: ").append(toIndentedString(gigabytesForRecommendedDiskSize)).append("\n");
    sb.append("    gigabytesProvisioned: ").append(toIndentedString(gigabytesProvisioned)).append("\n");
    sb.append("    megabytesPerSecondOfRead: ").append(toIndentedString(megabytesPerSecondOfRead)).append("\n");
    sb.append("    megabytesPerSecondOfWrite: ").append(toIndentedString(megabytesPerSecondOfWrite)).append("\n");
    sb.append("    monthlyStorageCost: ").append(toIndentedString(monthlyStorageCost)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numberOfReadOperationsPerSecond: ").append(toIndentedString(numberOfReadOperationsPerSecond)).append("\n");
    sb.append("    numberOfWriteOperationsPerSecond: ").append(toIndentedString(numberOfWriteOperationsPerSecond)).append("\n");
    sb.append("    recommendedDiskSize: ").append(toIndentedString(recommendedDiskSize)).append("\n");
    sb.append("    recommendedDiskType: ").append(toIndentedString(recommendedDiskType)).append("\n");
    sb.append("    suitability: ").append(toIndentedString(suitability)).append("\n");
    sb.append("    suitabilityDetail: ").append(toIndentedString(suitabilityDetail)).append("\n");
    sb.append("    suitabilityExplanation: ").append(toIndentedString(suitabilityExplanation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("gigabytesForRecommendedDiskSize");
    openapiFields.add("gigabytesProvisioned");
    openapiFields.add("megabytesPerSecondOfRead");
    openapiFields.add("megabytesPerSecondOfWrite");
    openapiFields.add("monthlyStorageCost");
    openapiFields.add("name");
    openapiFields.add("numberOfReadOperationsPerSecond");
    openapiFields.add("numberOfWriteOperationsPerSecond");
    openapiFields.add("recommendedDiskSize");
    openapiFields.add("recommendedDiskType");
    openapiFields.add("suitability");
    openapiFields.add("suitabilityDetail");
    openapiFields.add("suitabilityExplanation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssessedDisk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssessedDisk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssessedDisk is not found in the empty JSON string", AssessedDisk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssessedDisk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssessedDisk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("recommendedDiskSize") != null && !jsonObj.get("recommendedDiskSize").isJsonNull()) && !jsonObj.get("recommendedDiskSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendedDiskSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommendedDiskSize").toString()));
      }
      // validate the optional field `recommendedDiskSize`
      if (jsonObj.get("recommendedDiskSize") != null && !jsonObj.get("recommendedDiskSize").isJsonNull()) {
        RecommendedDiskSizeEnum.validateJsonElement(jsonObj.get("recommendedDiskSize"));
      }
      if ((jsonObj.get("recommendedDiskType") != null && !jsonObj.get("recommendedDiskType").isJsonNull()) && !jsonObj.get("recommendedDiskType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendedDiskType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommendedDiskType").toString()));
      }
      // validate the optional field `recommendedDiskType`
      if (jsonObj.get("recommendedDiskType") != null && !jsonObj.get("recommendedDiskType").isJsonNull()) {
        RecommendedDiskTypeEnum.validateJsonElement(jsonObj.get("recommendedDiskType"));
      }
      if ((jsonObj.get("suitability") != null && !jsonObj.get("suitability").isJsonNull()) && !jsonObj.get("suitability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suitability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suitability").toString()));
      }
      // validate the optional field `suitability`
      if (jsonObj.get("suitability") != null && !jsonObj.get("suitability").isJsonNull()) {
        SuitabilityEnum.validateJsonElement(jsonObj.get("suitability"));
      }
      if ((jsonObj.get("suitabilityDetail") != null && !jsonObj.get("suitabilityDetail").isJsonNull()) && !jsonObj.get("suitabilityDetail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suitabilityDetail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suitabilityDetail").toString()));
      }
      // validate the optional field `suitabilityDetail`
      if (jsonObj.get("suitabilityDetail") != null && !jsonObj.get("suitabilityDetail").isJsonNull()) {
        SuitabilityDetailEnum.validateJsonElement(jsonObj.get("suitabilityDetail"));
      }
      if ((jsonObj.get("suitabilityExplanation") != null && !jsonObj.get("suitabilityExplanation").isJsonNull()) && !jsonObj.get("suitabilityExplanation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suitabilityExplanation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suitabilityExplanation").toString()));
      }
      // validate the optional field `suitabilityExplanation`
      if (jsonObj.get("suitabilityExplanation") != null && !jsonObj.get("suitabilityExplanation").isJsonNull()) {
        SuitabilityExplanationEnum.validateJsonElement(jsonObj.get("suitabilityExplanation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssessedDisk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssessedDisk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssessedDisk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssessedDisk.class));

       return (TypeAdapter<T>) new TypeAdapter<AssessedDisk>() {
           @Override
           public void write(JsonWriter out, AssessedDisk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssessedDisk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssessedDisk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssessedDisk
   * @throws IOException if the JSON string is invalid with respect to AssessedDisk
   */
  public static AssessedDisk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssessedDisk.class);
  }

  /**
   * Convert an instance of AssessedDisk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

