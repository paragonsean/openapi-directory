/*
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VmFamily;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Assessment options properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:36.892251-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssessmentOptionsProperties {
  public static final String SERIALIZED_NAME_RESERVED_INSTANCE_SUPPORTED_CURRENCIES = "reservedInstanceSupportedCurrencies";
  @SerializedName(SERIALIZED_NAME_RESERVED_INSTANCE_SUPPORTED_CURRENCIES)
  private List<String> reservedInstanceSupportedCurrencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESERVED_INSTANCE_SUPPORTED_LOCATIONS = "reservedInstanceSupportedLocations";
  @SerializedName(SERIALIZED_NAME_RESERVED_INSTANCE_SUPPORTED_LOCATIONS)
  private List<String> reservedInstanceSupportedLocations = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESERVED_INSTANCE_SUPPORTED_OFFERS = "reservedInstanceSupportedOffers";
  @SerializedName(SERIALIZED_NAME_RESERVED_INSTANCE_SUPPORTED_OFFERS)
  private List<String> reservedInstanceSupportedOffers = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESERVED_INSTANCE_VM_FAMILIES = "reservedInstanceVmFamilies";
  @SerializedName(SERIALIZED_NAME_RESERVED_INSTANCE_VM_FAMILIES)
  private List<String> reservedInstanceVmFamilies = new ArrayList<>();

  public static final String SERIALIZED_NAME_VM_FAMILIES = "vmFamilies";
  @SerializedName(SERIALIZED_NAME_VM_FAMILIES)
  private List<VmFamily> vmFamilies = new ArrayList<>();

  public AssessmentOptionsProperties() {
  }

  public AssessmentOptionsProperties(
     List<String> reservedInstanceSupportedCurrencies, 
     List<String> reservedInstanceSupportedLocations, 
     List<String> reservedInstanceSupportedOffers, 
     List<String> reservedInstanceVmFamilies, 
     List<VmFamily> vmFamilies
  ) {
    this();
    this.reservedInstanceSupportedCurrencies = reservedInstanceSupportedCurrencies;
    this.reservedInstanceSupportedLocations = reservedInstanceSupportedLocations;
    this.reservedInstanceSupportedOffers = reservedInstanceSupportedOffers;
    this.reservedInstanceVmFamilies = reservedInstanceVmFamilies;
    this.vmFamilies = vmFamilies;
  }

  /**
   * List of supported currencies for reserved instances.
   * @return reservedInstanceSupportedCurrencies
   */
  @javax.annotation.Nullable
  public List<String> getReservedInstanceSupportedCurrencies() {
    return reservedInstanceSupportedCurrencies;
  }



  /**
   * List of supported Azure regions for reserved instances.
   * @return reservedInstanceSupportedLocations
   */
  @javax.annotation.Nullable
  public List<String> getReservedInstanceSupportedLocations() {
    return reservedInstanceSupportedLocations;
  }



  /**
   * List of supported Azure offer codes for reserved instances.
   * @return reservedInstanceSupportedOffers
   */
  @javax.annotation.Nullable
  public List<String> getReservedInstanceSupportedOffers() {
    return reservedInstanceSupportedOffers;
  }



  /**
   * List of supported VM Families.
   * @return reservedInstanceVmFamilies
   */
  @javax.annotation.Nullable
  public List<String> getReservedInstanceVmFamilies() {
    return reservedInstanceVmFamilies;
  }



  /**
   * Dictionary of VM families grouped by vm family name describing the targeted azure locations of VM family and the category of the family.
   * @return vmFamilies
   */
  @javax.annotation.Nullable
  public List<VmFamily> getVmFamilies() {
    return vmFamilies;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssessmentOptionsProperties assessmentOptionsProperties = (AssessmentOptionsProperties) o;
    return Objects.equals(this.reservedInstanceSupportedCurrencies, assessmentOptionsProperties.reservedInstanceSupportedCurrencies) &&
        Objects.equals(this.reservedInstanceSupportedLocations, assessmentOptionsProperties.reservedInstanceSupportedLocations) &&
        Objects.equals(this.reservedInstanceSupportedOffers, assessmentOptionsProperties.reservedInstanceSupportedOffers) &&
        Objects.equals(this.reservedInstanceVmFamilies, assessmentOptionsProperties.reservedInstanceVmFamilies) &&
        Objects.equals(this.vmFamilies, assessmentOptionsProperties.vmFamilies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reservedInstanceSupportedCurrencies, reservedInstanceSupportedLocations, reservedInstanceSupportedOffers, reservedInstanceVmFamilies, vmFamilies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssessmentOptionsProperties {\n");
    sb.append("    reservedInstanceSupportedCurrencies: ").append(toIndentedString(reservedInstanceSupportedCurrencies)).append("\n");
    sb.append("    reservedInstanceSupportedLocations: ").append(toIndentedString(reservedInstanceSupportedLocations)).append("\n");
    sb.append("    reservedInstanceSupportedOffers: ").append(toIndentedString(reservedInstanceSupportedOffers)).append("\n");
    sb.append("    reservedInstanceVmFamilies: ").append(toIndentedString(reservedInstanceVmFamilies)).append("\n");
    sb.append("    vmFamilies: ").append(toIndentedString(vmFamilies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("reservedInstanceSupportedCurrencies");
    openapiFields.add("reservedInstanceSupportedLocations");
    openapiFields.add("reservedInstanceSupportedOffers");
    openapiFields.add("reservedInstanceVmFamilies");
    openapiFields.add("vmFamilies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssessmentOptionsProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssessmentOptionsProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssessmentOptionsProperties is not found in the empty JSON string", AssessmentOptionsProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssessmentOptionsProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssessmentOptionsProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("reservedInstanceSupportedCurrencies") != null && !jsonObj.get("reservedInstanceSupportedCurrencies").isJsonNull() && !jsonObj.get("reservedInstanceSupportedCurrencies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservedInstanceSupportedCurrencies` to be an array in the JSON string but got `%s`", jsonObj.get("reservedInstanceSupportedCurrencies").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reservedInstanceSupportedLocations") != null && !jsonObj.get("reservedInstanceSupportedLocations").isJsonNull() && !jsonObj.get("reservedInstanceSupportedLocations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservedInstanceSupportedLocations` to be an array in the JSON string but got `%s`", jsonObj.get("reservedInstanceSupportedLocations").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reservedInstanceSupportedOffers") != null && !jsonObj.get("reservedInstanceSupportedOffers").isJsonNull() && !jsonObj.get("reservedInstanceSupportedOffers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservedInstanceSupportedOffers` to be an array in the JSON string but got `%s`", jsonObj.get("reservedInstanceSupportedOffers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reservedInstanceVmFamilies") != null && !jsonObj.get("reservedInstanceVmFamilies").isJsonNull() && !jsonObj.get("reservedInstanceVmFamilies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservedInstanceVmFamilies` to be an array in the JSON string but got `%s`", jsonObj.get("reservedInstanceVmFamilies").toString()));
      }
      if (jsonObj.get("vmFamilies") != null && !jsonObj.get("vmFamilies").isJsonNull()) {
        JsonArray jsonArrayvmFamilies = jsonObj.getAsJsonArray("vmFamilies");
        if (jsonArrayvmFamilies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vmFamilies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vmFamilies` to be an array in the JSON string but got `%s`", jsonObj.get("vmFamilies").toString()));
          }

          // validate the optional field `vmFamilies` (array)
          for (int i = 0; i < jsonArrayvmFamilies.size(); i++) {
            VmFamily.validateJsonElement(jsonArrayvmFamilies.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssessmentOptionsProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssessmentOptionsProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssessmentOptionsProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssessmentOptionsProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AssessmentOptionsProperties>() {
           @Override
           public void write(JsonWriter out, AssessmentOptionsProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssessmentOptionsProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssessmentOptionsProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssessmentOptionsProperties
   * @throws IOException if the JSON string is invalid with respect to AssessmentOptionsProperties
   */
  public static AssessmentOptionsProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssessmentOptionsProperties.class);
  }

  /**
   * Convert an instance of AssessmentOptionsProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

