# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assessed_disk import AssessedDisk
from openapi_server.models.assessed_network_adapter import AssessedNetworkAdapter
from openapi_server import util


class AssessedMachineProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boot_type: str=None, confidence_rating_in_percentage: float=None, created_timestamp: datetime=None, datacenter_machine_arm_id: str=None, datacenter_management_server_arm_id: str=None, datacenter_management_server_name: str=None, description: str=None, disks: Dict[str, AssessedDisk]=None, display_name: str=None, megabytes_of_memory: float=None, megabytes_of_memory_for_recommended_size: float=None, monthly_bandwidth_cost: float=None, monthly_compute_cost_for_recommended_size: float=None, monthly_premium_storage_cost: float=None, monthly_standard_ssd_storage_cost: float=None, monthly_storage_cost: float=None, network_adapters: Dict[str, AssessedNetworkAdapter]=None, number_of_cores: int=None, number_of_cores_for_recommended_size: int=None, operating_system_name: str=None, operating_system_type: str=None, operating_system_version: str=None, percentage_cores_utilization: float=None, percentage_memory_utilization: float=None, recommended_size: str=None, suitability: str=None, suitability_detail: str=None, suitability_explanation: str=None, updated_timestamp: datetime=None):
        """AssessedMachineProperties - a model defined in OpenAPI

        :param boot_type: The boot_type of this AssessedMachineProperties.
        :param confidence_rating_in_percentage: The confidence_rating_in_percentage of this AssessedMachineProperties.
        :param created_timestamp: The created_timestamp of this AssessedMachineProperties.
        :param datacenter_machine_arm_id: The datacenter_machine_arm_id of this AssessedMachineProperties.
        :param datacenter_management_server_arm_id: The datacenter_management_server_arm_id of this AssessedMachineProperties.
        :param datacenter_management_server_name: The datacenter_management_server_name of this AssessedMachineProperties.
        :param description: The description of this AssessedMachineProperties.
        :param disks: The disks of this AssessedMachineProperties.
        :param display_name: The display_name of this AssessedMachineProperties.
        :param megabytes_of_memory: The megabytes_of_memory of this AssessedMachineProperties.
        :param megabytes_of_memory_for_recommended_size: The megabytes_of_memory_for_recommended_size of this AssessedMachineProperties.
        :param monthly_bandwidth_cost: The monthly_bandwidth_cost of this AssessedMachineProperties.
        :param monthly_compute_cost_for_recommended_size: The monthly_compute_cost_for_recommended_size of this AssessedMachineProperties.
        :param monthly_premium_storage_cost: The monthly_premium_storage_cost of this AssessedMachineProperties.
        :param monthly_standard_ssd_storage_cost: The monthly_standard_ssd_storage_cost of this AssessedMachineProperties.
        :param monthly_storage_cost: The monthly_storage_cost of this AssessedMachineProperties.
        :param network_adapters: The network_adapters of this AssessedMachineProperties.
        :param number_of_cores: The number_of_cores of this AssessedMachineProperties.
        :param number_of_cores_for_recommended_size: The number_of_cores_for_recommended_size of this AssessedMachineProperties.
        :param operating_system_name: The operating_system_name of this AssessedMachineProperties.
        :param operating_system_type: The operating_system_type of this AssessedMachineProperties.
        :param operating_system_version: The operating_system_version of this AssessedMachineProperties.
        :param percentage_cores_utilization: The percentage_cores_utilization of this AssessedMachineProperties.
        :param percentage_memory_utilization: The percentage_memory_utilization of this AssessedMachineProperties.
        :param recommended_size: The recommended_size of this AssessedMachineProperties.
        :param suitability: The suitability of this AssessedMachineProperties.
        :param suitability_detail: The suitability_detail of this AssessedMachineProperties.
        :param suitability_explanation: The suitability_explanation of this AssessedMachineProperties.
        :param updated_timestamp: The updated_timestamp of this AssessedMachineProperties.
        """
        self.openapi_types = {
            'boot_type': str,
            'confidence_rating_in_percentage': float,
            'created_timestamp': datetime,
            'datacenter_machine_arm_id': str,
            'datacenter_management_server_arm_id': str,
            'datacenter_management_server_name': str,
            'description': str,
            'disks': Dict[str, AssessedDisk],
            'display_name': str,
            'megabytes_of_memory': float,
            'megabytes_of_memory_for_recommended_size': float,
            'monthly_bandwidth_cost': float,
            'monthly_compute_cost_for_recommended_size': float,
            'monthly_premium_storage_cost': float,
            'monthly_standard_ssd_storage_cost': float,
            'monthly_storage_cost': float,
            'network_adapters': Dict[str, AssessedNetworkAdapter],
            'number_of_cores': int,
            'number_of_cores_for_recommended_size': int,
            'operating_system_name': str,
            'operating_system_type': str,
            'operating_system_version': str,
            'percentage_cores_utilization': float,
            'percentage_memory_utilization': float,
            'recommended_size': str,
            'suitability': str,
            'suitability_detail': str,
            'suitability_explanation': str,
            'updated_timestamp': datetime
        }

        self.attribute_map = {
            'boot_type': 'bootType',
            'confidence_rating_in_percentage': 'confidenceRatingInPercentage',
            'created_timestamp': 'createdTimestamp',
            'datacenter_machine_arm_id': 'datacenterMachineArmId',
            'datacenter_management_server_arm_id': 'datacenterManagementServerArmId',
            'datacenter_management_server_name': 'datacenterManagementServerName',
            'description': 'description',
            'disks': 'disks',
            'display_name': 'displayName',
            'megabytes_of_memory': 'megabytesOfMemory',
            'megabytes_of_memory_for_recommended_size': 'megabytesOfMemoryForRecommendedSize',
            'monthly_bandwidth_cost': 'monthlyBandwidthCost',
            'monthly_compute_cost_for_recommended_size': 'monthlyComputeCostForRecommendedSize',
            'monthly_premium_storage_cost': 'monthlyPremiumStorageCost',
            'monthly_standard_ssd_storage_cost': 'monthlyStandardSSDStorageCost',
            'monthly_storage_cost': 'monthlyStorageCost',
            'network_adapters': 'networkAdapters',
            'number_of_cores': 'numberOfCores',
            'number_of_cores_for_recommended_size': 'numberOfCoresForRecommendedSize',
            'operating_system_name': 'operatingSystemName',
            'operating_system_type': 'operatingSystemType',
            'operating_system_version': 'operatingSystemVersion',
            'percentage_cores_utilization': 'percentageCoresUtilization',
            'percentage_memory_utilization': 'percentageMemoryUtilization',
            'recommended_size': 'recommendedSize',
            'suitability': 'suitability',
            'suitability_detail': 'suitabilityDetail',
            'suitability_explanation': 'suitabilityExplanation',
            'updated_timestamp': 'updatedTimestamp'
        }

        self._boot_type = boot_type
        self._confidence_rating_in_percentage = confidence_rating_in_percentage
        self._created_timestamp = created_timestamp
        self._datacenter_machine_arm_id = datacenter_machine_arm_id
        self._datacenter_management_server_arm_id = datacenter_management_server_arm_id
        self._datacenter_management_server_name = datacenter_management_server_name
        self._description = description
        self._disks = disks
        self._display_name = display_name
        self._megabytes_of_memory = megabytes_of_memory
        self._megabytes_of_memory_for_recommended_size = megabytes_of_memory_for_recommended_size
        self._monthly_bandwidth_cost = monthly_bandwidth_cost
        self._monthly_compute_cost_for_recommended_size = monthly_compute_cost_for_recommended_size
        self._monthly_premium_storage_cost = monthly_premium_storage_cost
        self._monthly_standard_ssd_storage_cost = monthly_standard_ssd_storage_cost
        self._monthly_storage_cost = monthly_storage_cost
        self._network_adapters = network_adapters
        self._number_of_cores = number_of_cores
        self._number_of_cores_for_recommended_size = number_of_cores_for_recommended_size
        self._operating_system_name = operating_system_name
        self._operating_system_type = operating_system_type
        self._operating_system_version = operating_system_version
        self._percentage_cores_utilization = percentage_cores_utilization
        self._percentage_memory_utilization = percentage_memory_utilization
        self._recommended_size = recommended_size
        self._suitability = suitability
        self._suitability_detail = suitability_detail
        self._suitability_explanation = suitability_explanation
        self._updated_timestamp = updated_timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssessedMachineProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssessedMachineProperties of this AssessedMachineProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boot_type(self):
        """Gets the boot_type of this AssessedMachineProperties.

        Boot type of the machine.

        :return: The boot_type of this AssessedMachineProperties.
        :rtype: str
        """
        return self._boot_type

    @boot_type.setter
    def boot_type(self, boot_type):
        """Sets the boot_type of this AssessedMachineProperties.

        Boot type of the machine.

        :param boot_type: The boot_type of this AssessedMachineProperties.
        :type boot_type: str
        """
        allowed_values = ["Unknown", "EFI", "BIOS"]  # noqa: E501
        if boot_type not in allowed_values:
            raise ValueError(
                "Invalid value for `boot_type` ({0}), must be one of {1}"
                .format(boot_type, allowed_values)
            )

        self._boot_type = boot_type

    @property
    def confidence_rating_in_percentage(self):
        """Gets the confidence_rating_in_percentage of this AssessedMachineProperties.

        Confidence rating of assessed machine.

        :return: The confidence_rating_in_percentage of this AssessedMachineProperties.
        :rtype: float
        """
        return self._confidence_rating_in_percentage

    @confidence_rating_in_percentage.setter
    def confidence_rating_in_percentage(self, confidence_rating_in_percentage):
        """Sets the confidence_rating_in_percentage of this AssessedMachineProperties.

        Confidence rating of assessed machine.

        :param confidence_rating_in_percentage: The confidence_rating_in_percentage of this AssessedMachineProperties.
        :type confidence_rating_in_percentage: float
        """

        self._confidence_rating_in_percentage = confidence_rating_in_percentage

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this AssessedMachineProperties.

        Time when this machine was created. Date-Time represented in ISO-8601 format.

        :return: The created_timestamp of this AssessedMachineProperties.
        :rtype: datetime
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this AssessedMachineProperties.

        Time when this machine was created. Date-Time represented in ISO-8601 format.

        :param created_timestamp: The created_timestamp of this AssessedMachineProperties.
        :type created_timestamp: datetime
        """

        self._created_timestamp = created_timestamp

    @property
    def datacenter_machine_arm_id(self):
        """Gets the datacenter_machine_arm_id of this AssessedMachineProperties.

        ARM ID of the discovered machine.

        :return: The datacenter_machine_arm_id of this AssessedMachineProperties.
        :rtype: str
        """
        return self._datacenter_machine_arm_id

    @datacenter_machine_arm_id.setter
    def datacenter_machine_arm_id(self, datacenter_machine_arm_id):
        """Sets the datacenter_machine_arm_id of this AssessedMachineProperties.

        ARM ID of the discovered machine.

        :param datacenter_machine_arm_id: The datacenter_machine_arm_id of this AssessedMachineProperties.
        :type datacenter_machine_arm_id: str
        """

        self._datacenter_machine_arm_id = datacenter_machine_arm_id

    @property
    def datacenter_management_server_arm_id(self):
        """Gets the datacenter_management_server_arm_id of this AssessedMachineProperties.

        ARM ID of the discovered datacenter.

        :return: The datacenter_management_server_arm_id of this AssessedMachineProperties.
        :rtype: str
        """
        return self._datacenter_management_server_arm_id

    @datacenter_management_server_arm_id.setter
    def datacenter_management_server_arm_id(self, datacenter_management_server_arm_id):
        """Sets the datacenter_management_server_arm_id of this AssessedMachineProperties.

        ARM ID of the discovered datacenter.

        :param datacenter_management_server_arm_id: The datacenter_management_server_arm_id of this AssessedMachineProperties.
        :type datacenter_management_server_arm_id: str
        """

        self._datacenter_management_server_arm_id = datacenter_management_server_arm_id

    @property
    def datacenter_management_server_name(self):
        """Gets the datacenter_management_server_name of this AssessedMachineProperties.

        Name of the server hosting the datacenter management solution.

        :return: The datacenter_management_server_name of this AssessedMachineProperties.
        :rtype: str
        """
        return self._datacenter_management_server_name

    @datacenter_management_server_name.setter
    def datacenter_management_server_name(self, datacenter_management_server_name):
        """Sets the datacenter_management_server_name of this AssessedMachineProperties.

        Name of the server hosting the datacenter management solution.

        :param datacenter_management_server_name: The datacenter_management_server_name of this AssessedMachineProperties.
        :type datacenter_management_server_name: str
        """

        self._datacenter_management_server_name = datacenter_management_server_name

    @property
    def description(self):
        """Gets the description of this AssessedMachineProperties.

        Description of the machine

        :return: The description of this AssessedMachineProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AssessedMachineProperties.

        Description of the machine

        :param description: The description of this AssessedMachineProperties.
        :type description: str
        """

        self._description = description

    @property
    def disks(self):
        """Gets the disks of this AssessedMachineProperties.

        Dictionary of disks attached to the machine. Key is ID of disk. Value is a disk object.

        :return: The disks of this AssessedMachineProperties.
        :rtype: Dict[str, AssessedDisk]
        """
        return self._disks

    @disks.setter
    def disks(self, disks):
        """Sets the disks of this AssessedMachineProperties.

        Dictionary of disks attached to the machine. Key is ID of disk. Value is a disk object.

        :param disks: The disks of this AssessedMachineProperties.
        :type disks: Dict[str, AssessedDisk]
        """

        self._disks = disks

    @property
    def display_name(self):
        """Gets the display_name of this AssessedMachineProperties.

        User readable name of the machine as defined by the user in their private datacenter.

        :return: The display_name of this AssessedMachineProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AssessedMachineProperties.

        User readable name of the machine as defined by the user in their private datacenter.

        :param display_name: The display_name of this AssessedMachineProperties.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def megabytes_of_memory(self):
        """Gets the megabytes_of_memory of this AssessedMachineProperties.

        Memory in Megabytes.

        :return: The megabytes_of_memory of this AssessedMachineProperties.
        :rtype: float
        """
        return self._megabytes_of_memory

    @megabytes_of_memory.setter
    def megabytes_of_memory(self, megabytes_of_memory):
        """Sets the megabytes_of_memory of this AssessedMachineProperties.

        Memory in Megabytes.

        :param megabytes_of_memory: The megabytes_of_memory of this AssessedMachineProperties.
        :type megabytes_of_memory: float
        """

        self._megabytes_of_memory = megabytes_of_memory

    @property
    def megabytes_of_memory_for_recommended_size(self):
        """Gets the megabytes_of_memory_for_recommended_size of this AssessedMachineProperties.

        Megabytes of memory in the Recommended Azure VM Size.

        :return: The megabytes_of_memory_for_recommended_size of this AssessedMachineProperties.
        :rtype: float
        """
        return self._megabytes_of_memory_for_recommended_size

    @megabytes_of_memory_for_recommended_size.setter
    def megabytes_of_memory_for_recommended_size(self, megabytes_of_memory_for_recommended_size):
        """Sets the megabytes_of_memory_for_recommended_size of this AssessedMachineProperties.

        Megabytes of memory in the Recommended Azure VM Size.

        :param megabytes_of_memory_for_recommended_size: The megabytes_of_memory_for_recommended_size of this AssessedMachineProperties.
        :type megabytes_of_memory_for_recommended_size: float
        """

        self._megabytes_of_memory_for_recommended_size = megabytes_of_memory_for_recommended_size

    @property
    def monthly_bandwidth_cost(self):
        """Gets the monthly_bandwidth_cost of this AssessedMachineProperties.

        Monthly network cost estimate for the network adapters that are attached to this machine as a group, for a 31-day month.

        :return: The monthly_bandwidth_cost of this AssessedMachineProperties.
        :rtype: float
        """
        return self._monthly_bandwidth_cost

    @monthly_bandwidth_cost.setter
    def monthly_bandwidth_cost(self, monthly_bandwidth_cost):
        """Sets the monthly_bandwidth_cost of this AssessedMachineProperties.

        Monthly network cost estimate for the network adapters that are attached to this machine as a group, for a 31-day month.

        :param monthly_bandwidth_cost: The monthly_bandwidth_cost of this AssessedMachineProperties.
        :type monthly_bandwidth_cost: float
        """

        self._monthly_bandwidth_cost = monthly_bandwidth_cost

    @property
    def monthly_compute_cost_for_recommended_size(self):
        """Gets the monthly_compute_cost_for_recommended_size of this AssessedMachineProperties.

        Compute Cost for a 31-day month, if the machine is migrated to Azure with the Recommended Size.

        :return: The monthly_compute_cost_for_recommended_size of this AssessedMachineProperties.
        :rtype: float
        """
        return self._monthly_compute_cost_for_recommended_size

    @monthly_compute_cost_for_recommended_size.setter
    def monthly_compute_cost_for_recommended_size(self, monthly_compute_cost_for_recommended_size):
        """Sets the monthly_compute_cost_for_recommended_size of this AssessedMachineProperties.

        Compute Cost for a 31-day month, if the machine is migrated to Azure with the Recommended Size.

        :param monthly_compute_cost_for_recommended_size: The monthly_compute_cost_for_recommended_size of this AssessedMachineProperties.
        :type monthly_compute_cost_for_recommended_size: float
        """

        self._monthly_compute_cost_for_recommended_size = monthly_compute_cost_for_recommended_size

    @property
    def monthly_premium_storage_cost(self):
        """Gets the monthly_premium_storage_cost of this AssessedMachineProperties.

        Monthly premium storage cost estimate for the disks that are attached to this machine as a group, for a 31-day month.

        :return: The monthly_premium_storage_cost of this AssessedMachineProperties.
        :rtype: float
        """
        return self._monthly_premium_storage_cost

    @monthly_premium_storage_cost.setter
    def monthly_premium_storage_cost(self, monthly_premium_storage_cost):
        """Sets the monthly_premium_storage_cost of this AssessedMachineProperties.

        Monthly premium storage cost estimate for the disks that are attached to this machine as a group, for a 31-day month.

        :param monthly_premium_storage_cost: The monthly_premium_storage_cost of this AssessedMachineProperties.
        :type monthly_premium_storage_cost: float
        """

        self._monthly_premium_storage_cost = monthly_premium_storage_cost

    @property
    def monthly_standard_ssd_storage_cost(self):
        """Gets the monthly_standard_ssd_storage_cost of this AssessedMachineProperties.

        Monthly standard SSD storage cost estimate for the disks that are attached to this machine as a group, for a 31-day month.

        :return: The monthly_standard_ssd_storage_cost of this AssessedMachineProperties.
        :rtype: float
        """
        return self._monthly_standard_ssd_storage_cost

    @monthly_standard_ssd_storage_cost.setter
    def monthly_standard_ssd_storage_cost(self, monthly_standard_ssd_storage_cost):
        """Sets the monthly_standard_ssd_storage_cost of this AssessedMachineProperties.

        Monthly standard SSD storage cost estimate for the disks that are attached to this machine as a group, for a 31-day month.

        :param monthly_standard_ssd_storage_cost: The monthly_standard_ssd_storage_cost of this AssessedMachineProperties.
        :type monthly_standard_ssd_storage_cost: float
        """

        self._monthly_standard_ssd_storage_cost = monthly_standard_ssd_storage_cost

    @property
    def monthly_storage_cost(self):
        """Gets the monthly_storage_cost of this AssessedMachineProperties.

        Monthly storage cost estimate for the disks that are attached to this machine as a group, for a 31-day month.

        :return: The monthly_storage_cost of this AssessedMachineProperties.
        :rtype: float
        """
        return self._monthly_storage_cost

    @monthly_storage_cost.setter
    def monthly_storage_cost(self, monthly_storage_cost):
        """Sets the monthly_storage_cost of this AssessedMachineProperties.

        Monthly storage cost estimate for the disks that are attached to this machine as a group, for a 31-day month.

        :param monthly_storage_cost: The monthly_storage_cost of this AssessedMachineProperties.
        :type monthly_storage_cost: float
        """

        self._monthly_storage_cost = monthly_storage_cost

    @property
    def network_adapters(self):
        """Gets the network_adapters of this AssessedMachineProperties.

        Dictionary of network adapters attached to the machine. Key is name of the adapter. Value is a network adapter object.

        :return: The network_adapters of this AssessedMachineProperties.
        :rtype: Dict[str, AssessedNetworkAdapter]
        """
        return self._network_adapters

    @network_adapters.setter
    def network_adapters(self, network_adapters):
        """Sets the network_adapters of this AssessedMachineProperties.

        Dictionary of network adapters attached to the machine. Key is name of the adapter. Value is a network adapter object.

        :param network_adapters: The network_adapters of this AssessedMachineProperties.
        :type network_adapters: Dict[str, AssessedNetworkAdapter]
        """

        self._network_adapters = network_adapters

    @property
    def number_of_cores(self):
        """Gets the number_of_cores of this AssessedMachineProperties.

        Processor count.

        :return: The number_of_cores of this AssessedMachineProperties.
        :rtype: int
        """
        return self._number_of_cores

    @number_of_cores.setter
    def number_of_cores(self, number_of_cores):
        """Sets the number_of_cores of this AssessedMachineProperties.

        Processor count.

        :param number_of_cores: The number_of_cores of this AssessedMachineProperties.
        :type number_of_cores: int
        """

        self._number_of_cores = number_of_cores

    @property
    def number_of_cores_for_recommended_size(self):
        """Gets the number_of_cores_for_recommended_size of this AssessedMachineProperties.

        Number of CPU cores in the Recommended Azure VM Size.

        :return: The number_of_cores_for_recommended_size of this AssessedMachineProperties.
        :rtype: int
        """
        return self._number_of_cores_for_recommended_size

    @number_of_cores_for_recommended_size.setter
    def number_of_cores_for_recommended_size(self, number_of_cores_for_recommended_size):
        """Sets the number_of_cores_for_recommended_size of this AssessedMachineProperties.

        Number of CPU cores in the Recommended Azure VM Size.

        :param number_of_cores_for_recommended_size: The number_of_cores_for_recommended_size of this AssessedMachineProperties.
        :type number_of_cores_for_recommended_size: int
        """

        self._number_of_cores_for_recommended_size = number_of_cores_for_recommended_size

    @property
    def operating_system_name(self):
        """Gets the operating_system_name of this AssessedMachineProperties.

        Operating System name of the machine.

        :return: The operating_system_name of this AssessedMachineProperties.
        :rtype: str
        """
        return self._operating_system_name

    @operating_system_name.setter
    def operating_system_name(self, operating_system_name):
        """Sets the operating_system_name of this AssessedMachineProperties.

        Operating System name of the machine.

        :param operating_system_name: The operating_system_name of this AssessedMachineProperties.
        :type operating_system_name: str
        """

        self._operating_system_name = operating_system_name

    @property
    def operating_system_type(self):
        """Gets the operating_system_type of this AssessedMachineProperties.

        Operating System type of the machine.

        :return: The operating_system_type of this AssessedMachineProperties.
        :rtype: str
        """
        return self._operating_system_type

    @operating_system_type.setter
    def operating_system_type(self, operating_system_type):
        """Sets the operating_system_type of this AssessedMachineProperties.

        Operating System type of the machine.

        :param operating_system_type: The operating_system_type of this AssessedMachineProperties.
        :type operating_system_type: str
        """

        self._operating_system_type = operating_system_type

    @property
    def operating_system_version(self):
        """Gets the operating_system_version of this AssessedMachineProperties.

        Operating System version of the machine.

        :return: The operating_system_version of this AssessedMachineProperties.
        :rtype: str
        """
        return self._operating_system_version

    @operating_system_version.setter
    def operating_system_version(self, operating_system_version):
        """Sets the operating_system_version of this AssessedMachineProperties.

        Operating System version of the machine.

        :param operating_system_version: The operating_system_version of this AssessedMachineProperties.
        :type operating_system_version: str
        """

        self._operating_system_version = operating_system_version

    @property
    def percentage_cores_utilization(self):
        """Gets the percentage_cores_utilization of this AssessedMachineProperties.

        Utilization percentage of the processor core as observed in the private data center, in the Time Range selected on Assessment, reported as the Percentile value based on the percentile number selected in assessment.

        :return: The percentage_cores_utilization of this AssessedMachineProperties.
        :rtype: float
        """
        return self._percentage_cores_utilization

    @percentage_cores_utilization.setter
    def percentage_cores_utilization(self, percentage_cores_utilization):
        """Sets the percentage_cores_utilization of this AssessedMachineProperties.

        Utilization percentage of the processor core as observed in the private data center, in the Time Range selected on Assessment, reported as the Percentile value based on the percentile number selected in assessment.

        :param percentage_cores_utilization: The percentage_cores_utilization of this AssessedMachineProperties.
        :type percentage_cores_utilization: float
        """

        self._percentage_cores_utilization = percentage_cores_utilization

    @property
    def percentage_memory_utilization(self):
        """Gets the percentage_memory_utilization of this AssessedMachineProperties.

        Utilization percentage of the memory as observed in the private data center, in the Time Range selected on Assessment, reported as the Percentile value based on the percentile number selected in assessment.

        :return: The percentage_memory_utilization of this AssessedMachineProperties.
        :rtype: float
        """
        return self._percentage_memory_utilization

    @percentage_memory_utilization.setter
    def percentage_memory_utilization(self, percentage_memory_utilization):
        """Sets the percentage_memory_utilization of this AssessedMachineProperties.

        Utilization percentage of the memory as observed in the private data center, in the Time Range selected on Assessment, reported as the Percentile value based on the percentile number selected in assessment.

        :param percentage_memory_utilization: The percentage_memory_utilization of this AssessedMachineProperties.
        :type percentage_memory_utilization: float
        """

        self._percentage_memory_utilization = percentage_memory_utilization

    @property
    def recommended_size(self):
        """Gets the recommended_size of this AssessedMachineProperties.

        Recommended Azure size for this machine.

        :return: The recommended_size of this AssessedMachineProperties.
        :rtype: str
        """
        return self._recommended_size

    @recommended_size.setter
    def recommended_size(self, recommended_size):
        """Sets the recommended_size of this AssessedMachineProperties.

        Recommended Azure size for this machine.

        :param recommended_size: The recommended_size of this AssessedMachineProperties.
        :type recommended_size: str
        """
        allowed_values = ["Unknown", "Basic_A0", "Basic_A1", "Basic_A2", "Basic_A3", "Basic_A4", "Standard_A0", "Standard_A1", "Standard_A2", "Standard_A3", "Standard_A4", "Standard_A5", "Standard_A6", "Standard_A7", "Standard_A8", "Standard_A9", "Standard_A10", "Standard_A11", "Standard_A1_v2", "Standard_A2_v2", "Standard_A4_v2", "Standard_A8_v2", "Standard_A2m_v2", "Standard_A4m_v2", "Standard_A8m_v2", "Standard_D1", "Standard_D2", "Standard_D3", "Standard_D4", "Standard_D11", "Standard_D12", "Standard_D13", "Standard_D14", "Standard_D1_v2", "Standard_D2_v2", "Standard_D3_v2", "Standard_D4_v2", "Standard_D5_v2", "Standard_D11_v2", "Standard_D12_v2", "Standard_D13_v2", "Standard_D14_v2", "Standard_D15_v2", "Standard_DS1", "Standard_DS2", "Standard_DS3", "Standard_DS4", "Standard_DS11", "Standard_DS12", "Standard_DS13", "Standard_DS14", "Standard_DS1_v2", "Standard_DS2_v2", "Standard_DS3_v2", "Standard_DS4_v2", "Standard_DS5_v2", "Standard_DS11_v2", "Standard_DS12_v2", "Standard_DS13_v2", "Standard_DS14_v2", "Standard_DS15_v2", "Standard_F1", "Standard_F2", "Standard_F4", "Standard_F8", "Standard_F16", "Standard_F1s", "Standard_F2s", "Standard_F4s", "Standard_F8s", "Standard_F16s", "Standard_G1", "Standard_G2", "Standard_G3", "Standard_G4", "Standard_G5", "Standard_GS1", "Standard_GS2", "Standard_GS3", "Standard_GS4", "Standard_GS5", "Standard_H8", "Standard_H16", "Standard_H8m", "Standard_H16m", "Standard_H16r", "Standard_H16mr", "Standard_L4s", "Standard_L8s", "Standard_L16s", "Standard_L32s", "Standard_D2s_v3", "Standard_D4s_v3", "Standard_D8s_v3", "Standard_D16s_v3", "Standard_D32s_v3", "Standard_D64s_v3", "Standard_D2_v3", "Standard_D4_v3", "Standard_D8_v3", "Standard_D16_v3", "Standard_D32_v3", "Standard_D64_v3", "Standard_F2s_v2", "Standard_F4s_v2", "Standard_F8s_v2", "Standard_F16s_v2", "Standard_F32s_v2", "Standard_F64s_v2", "Standard_F72s_v2", "Standard_E2_v3", "Standard_E4_v3", "Standard_E8_v3", "Standard_E16_v3", "Standard_E32_v3", "Standard_E64_v3", "Standard_E2s_v3", "Standard_E4s_v3", "Standard_E8s_v3", "Standard_E16s_v3", "Standard_E32s_v3", "Standard_E64s_v3", "Standard_M64s", "Standard_M64ms", "Standard_M128s", "Standard_M128ms"]  # noqa: E501
        if recommended_size not in allowed_values:
            raise ValueError(
                "Invalid value for `recommended_size` ({0}), must be one of {1}"
                .format(recommended_size, allowed_values)
            )

        self._recommended_size = recommended_size

    @property
    def suitability(self):
        """Gets the suitability of this AssessedMachineProperties.

        Whether machine is suitable for migration to Azure.

        :return: The suitability of this AssessedMachineProperties.
        :rtype: str
        """
        return self._suitability

    @suitability.setter
    def suitability(self, suitability):
        """Sets the suitability of this AssessedMachineProperties.

        Whether machine is suitable for migration to Azure.

        :param suitability: The suitability of this AssessedMachineProperties.
        :type suitability: str
        """
        allowed_values = ["Unknown", "NotSuitable", "Suitable", "ConditionallySuitable", "ReadinessUnknown"]  # noqa: E501
        if suitability not in allowed_values:
            raise ValueError(
                "Invalid value for `suitability` ({0}), must be one of {1}"
                .format(suitability, allowed_values)
            )

        self._suitability = suitability

    @property
    def suitability_detail(self):
        """Gets the suitability_detail of this AssessedMachineProperties.

        If machine is not suitable for cloud, this explains the reasons.

        :return: The suitability_detail of this AssessedMachineProperties.
        :rtype: str
        """
        return self._suitability_detail

    @suitability_detail.setter
    def suitability_detail(self, suitability_detail):
        """Sets the suitability_detail of this AssessedMachineProperties.

        If machine is not suitable for cloud, this explains the reasons.

        :param suitability_detail: The suitability_detail of this AssessedMachineProperties.
        :type suitability_detail: str
        """
        allowed_values = ["None", "RecommendedSizeHasLessNetworkAdapters", "CannotReportComputeCost", "CannotReportStorageCost", "CannotReportBandwidthCosts", "PercentageOfCoresUtilizedMissing", "PercentageOfMemoryUtilizedMissing", "PercentageOfCoresUtilizedOutOfRange", "PercentageOfMemoryUtilizedOutOfRange"]  # noqa: E501
        if suitability_detail not in allowed_values:
            raise ValueError(
                "Invalid value for `suitability_detail` ({0}), must be one of {1}"
                .format(suitability_detail, allowed_values)
            )

        self._suitability_detail = suitability_detail

    @property
    def suitability_explanation(self):
        """Gets the suitability_explanation of this AssessedMachineProperties.

        If machine is not ready to be migrated, this explains the reasons and mitigation steps.

        :return: The suitability_explanation of this AssessedMachineProperties.
        :rtype: str
        """
        return self._suitability_explanation

    @suitability_explanation.setter
    def suitability_explanation(self, suitability_explanation):
        """Sets the suitability_explanation of this AssessedMachineProperties.

        If machine is not ready to be migrated, this explains the reasons and mitigation steps.

        :param suitability_explanation: The suitability_explanation of this AssessedMachineProperties.
        :type suitability_explanation: str
        """
        allowed_values = ["Unknown", "NotApplicable", "GuestOperatingSystemArchitectureNotSupported", "GuestOperatingSystemNotSupported", "BootTypeNotSupported", "MoreDisksThanSupported", "NoSuitableVmSizeFound", "OneOrMoreDisksNotSuitable", "OneOrMoreAdaptersNotSuitable", "InternalErrorOccurredDuringComputeEvaluation", "InternalErrorOccurredDuringStorageEvaluation", "InternalErrorOccurredDuringNetworkEvaluation", "NoVmSizeSupportsStoragePerformance", "NoVmSizeSupportsNetworkPerformance", "NoVmSizeForSelectedPricingTier", "NoVmSizeForSelectedAzureLocation", "CheckRedHatLinuxVersion", "CheckOpenSuseLinuxVersion", "CheckWindowsServer2008R2Version", "CheckCentOsVersion", "CheckDebianLinuxVersion", "CheckSuseLinuxVersion", "CheckOracleLinuxVersion", "CheckUbuntuLinuxVersion", "CheckCoreOsLinuxVersion", "WindowsServerVersionConditionallySupported", "NoGuestOperatingSystemConditionallySupported", "WindowsClientVersionsConditionallySupported", "BootTypeUnknown", "GuestOperatingSystemUnknown", "WindowsServerVersionsSupportedWithCaveat", "WindowsOSNoLongerUnderMSSupport", "EndorsedWithConditionsLinuxDistributions", "UnendorsedLinuxDistributions", "NoVmSizeForStandardPricingTier", "NoVmSizeForBasicPricingTier"]  # noqa: E501
        if suitability_explanation not in allowed_values:
            raise ValueError(
                "Invalid value for `suitability_explanation` ({0}), must be one of {1}"
                .format(suitability_explanation, allowed_values)
            )

        self._suitability_explanation = suitability_explanation

    @property
    def updated_timestamp(self):
        """Gets the updated_timestamp of this AssessedMachineProperties.

        Time when this machine was last updated. Date-Time represented in ISO-8601 format.

        :return: The updated_timestamp of this AssessedMachineProperties.
        :rtype: datetime
        """
        return self._updated_timestamp

    @updated_timestamp.setter
    def updated_timestamp(self, updated_timestamp):
        """Sets the updated_timestamp of this AssessedMachineProperties.

        Time when this machine was last updated. Date-Time represented in ISO-8601 format.

        :param updated_timestamp: The updated_timestamp of this AssessedMachineProperties.
        :type updated_timestamp: datetime
        """

        self._updated_timestamp = updated_timestamp
