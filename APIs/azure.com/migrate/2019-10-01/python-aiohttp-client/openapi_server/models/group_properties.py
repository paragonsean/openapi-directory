# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, are_assessments_running: bool=None, assessments: List[str]=None, created_timestamp: datetime=None, group_status: str=None, machine_count: int=None, updated_timestamp: datetime=None):
        """GroupProperties - a model defined in OpenAPI

        :param are_assessments_running: The are_assessments_running of this GroupProperties.
        :param assessments: The assessments of this GroupProperties.
        :param created_timestamp: The created_timestamp of this GroupProperties.
        :param group_status: The group_status of this GroupProperties.
        :param machine_count: The machine_count of this GroupProperties.
        :param updated_timestamp: The updated_timestamp of this GroupProperties.
        """
        self.openapi_types = {
            'are_assessments_running': bool,
            'assessments': List[str],
            'created_timestamp': datetime,
            'group_status': str,
            'machine_count': int,
            'updated_timestamp': datetime
        }

        self.attribute_map = {
            'are_assessments_running': 'areAssessmentsRunning',
            'assessments': 'assessments',
            'created_timestamp': 'createdTimestamp',
            'group_status': 'groupStatus',
            'machine_count': 'machineCount',
            'updated_timestamp': 'updatedTimestamp'
        }

        self._are_assessments_running = are_assessments_running
        self._assessments = assessments
        self._created_timestamp = created_timestamp
        self._group_status = group_status
        self._machine_count = machine_count
        self._updated_timestamp = updated_timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupProperties of this GroupProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def are_assessments_running(self):
        """Gets the are_assessments_running of this GroupProperties.

        If the assessments are in running state.

        :return: The are_assessments_running of this GroupProperties.
        :rtype: bool
        """
        return self._are_assessments_running

    @are_assessments_running.setter
    def are_assessments_running(self, are_assessments_running):
        """Sets the are_assessments_running of this GroupProperties.

        If the assessments are in running state.

        :param are_assessments_running: The are_assessments_running of this GroupProperties.
        :type are_assessments_running: bool
        """

        self._are_assessments_running = are_assessments_running

    @property
    def assessments(self):
        """Gets the assessments of this GroupProperties.

        List of References to Assessments created on this group.

        :return: The assessments of this GroupProperties.
        :rtype: List[str]
        """
        return self._assessments

    @assessments.setter
    def assessments(self, assessments):
        """Sets the assessments of this GroupProperties.

        List of References to Assessments created on this group.

        :param assessments: The assessments of this GroupProperties.
        :type assessments: List[str]
        """

        self._assessments = assessments

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this GroupProperties.

        Time when this group was created. Date-Time represented in ISO-8601 format.

        :return: The created_timestamp of this GroupProperties.
        :rtype: datetime
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this GroupProperties.

        Time when this group was created. Date-Time represented in ISO-8601 format.

        :param created_timestamp: The created_timestamp of this GroupProperties.
        :type created_timestamp: datetime
        """

        self._created_timestamp = created_timestamp

    @property
    def group_status(self):
        """Gets the group_status of this GroupProperties.

        Whether the group has been created and is valid.

        :return: The group_status of this GroupProperties.
        :rtype: str
        """
        return self._group_status

    @group_status.setter
    def group_status(self, group_status):
        """Sets the group_status of this GroupProperties.

        Whether the group has been created and is valid.

        :param group_status: The group_status of this GroupProperties.
        :type group_status: str
        """
        allowed_values = ["Created", "Updated", "Running", "Completed", "Invalid"]  # noqa: E501
        if group_status not in allowed_values:
            raise ValueError(
                "Invalid value for `group_status` ({0}), must be one of {1}"
                .format(group_status, allowed_values)
            )

        self._group_status = group_status

    @property
    def machine_count(self):
        """Gets the machine_count of this GroupProperties.

        Number of machines part of this group.

        :return: The machine_count of this GroupProperties.
        :rtype: int
        """
        return self._machine_count

    @machine_count.setter
    def machine_count(self, machine_count):
        """Sets the machine_count of this GroupProperties.

        Number of machines part of this group.

        :param machine_count: The machine_count of this GroupProperties.
        :type machine_count: int
        """

        self._machine_count = machine_count

    @property
    def updated_timestamp(self):
        """Gets the updated_timestamp of this GroupProperties.

        Time when this group was last updated. Date-Time represented in ISO-8601 format.

        :return: The updated_timestamp of this GroupProperties.
        :rtype: datetime
        """
        return self._updated_timestamp

    @updated_timestamp.setter
    def updated_timestamp(self, updated_timestamp):
        """Sets the updated_timestamp of this GroupProperties.

        Time when this group was last updated. Date-Time represented in ISO-8601 format.

        :param updated_timestamp: The updated_timestamp of this GroupProperties.
        :type updated_timestamp: datetime
        """

        self._updated_timestamp = updated_timestamp
