# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GroupBodyProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, machines: List[str]=None, operation_type: str=None):
        """GroupBodyProperties - a model defined in OpenAPI

        :param machines: The machines of this GroupBodyProperties.
        :param operation_type: The operation_type of this GroupBodyProperties.
        """
        self.openapi_types = {
            'machines': List[str],
            'operation_type': str
        }

        self.attribute_map = {
            'machines': 'machines',
            'operation_type': 'operationType'
        }

        self._machines = machines
        self._operation_type = operation_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupBodyProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupBodyProperties of this GroupBodyProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def machines(self):
        """Gets the machines of this GroupBodyProperties.

        List of machine names that are part of this group.

        :return: The machines of this GroupBodyProperties.
        :rtype: List[str]
        """
        return self._machines

    @machines.setter
    def machines(self, machines):
        """Sets the machines of this GroupBodyProperties.

        List of machine names that are part of this group.

        :param machines: The machines of this GroupBodyProperties.
        :type machines: List[str]
        """

        self._machines = machines

    @property
    def operation_type(self):
        """Gets the operation_type of this GroupBodyProperties.

        Whether to add or remove the machines.

        :return: The operation_type of this GroupBodyProperties.
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this GroupBodyProperties.

        Whether to add or remove the machines.

        :param operation_type: The operation_type of this GroupBodyProperties.
        :type operation_type: str
        """
        allowed_values = ["Add", "Remove"]  # noqa: E501
        if operation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `operation_type` ({0}), must be one of {1}"
                .format(operation_type, allowed_values)
            )

        self._operation_type = operation_type
