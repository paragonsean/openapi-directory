# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.disk import Disk
from openapi_server.models.network_adapter import NetworkAdapter
from openapi_server import util


class MachineProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, boot_type: str=None, created_timestamp: datetime=None, datacenter_management_server_arm_id: str=None, datacenter_management_server_name: str=None, description: str=None, discovery_machine_arm_id: str=None, disks: Dict[str, Disk]=None, display_name: str=None, groups: List[str]=None, megabytes_of_memory: float=None, network_adapters: Dict[str, NetworkAdapter]=None, number_of_cores: int=None, operating_system_name: str=None, operating_system_type: str=None, operating_system_version: str=None, updated_timestamp: datetime=None):
        """MachineProperties - a model defined in OpenAPI

        :param boot_type: The boot_type of this MachineProperties.
        :param created_timestamp: The created_timestamp of this MachineProperties.
        :param datacenter_management_server_arm_id: The datacenter_management_server_arm_id of this MachineProperties.
        :param datacenter_management_server_name: The datacenter_management_server_name of this MachineProperties.
        :param description: The description of this MachineProperties.
        :param discovery_machine_arm_id: The discovery_machine_arm_id of this MachineProperties.
        :param disks: The disks of this MachineProperties.
        :param display_name: The display_name of this MachineProperties.
        :param groups: The groups of this MachineProperties.
        :param megabytes_of_memory: The megabytes_of_memory of this MachineProperties.
        :param network_adapters: The network_adapters of this MachineProperties.
        :param number_of_cores: The number_of_cores of this MachineProperties.
        :param operating_system_name: The operating_system_name of this MachineProperties.
        :param operating_system_type: The operating_system_type of this MachineProperties.
        :param operating_system_version: The operating_system_version of this MachineProperties.
        :param updated_timestamp: The updated_timestamp of this MachineProperties.
        """
        self.openapi_types = {
            'boot_type': str,
            'created_timestamp': datetime,
            'datacenter_management_server_arm_id': str,
            'datacenter_management_server_name': str,
            'description': str,
            'discovery_machine_arm_id': str,
            'disks': Dict[str, Disk],
            'display_name': str,
            'groups': List[str],
            'megabytes_of_memory': float,
            'network_adapters': Dict[str, NetworkAdapter],
            'number_of_cores': int,
            'operating_system_name': str,
            'operating_system_type': str,
            'operating_system_version': str,
            'updated_timestamp': datetime
        }

        self.attribute_map = {
            'boot_type': 'bootType',
            'created_timestamp': 'createdTimestamp',
            'datacenter_management_server_arm_id': 'datacenterManagementServerArmId',
            'datacenter_management_server_name': 'datacenterManagementServerName',
            'description': 'description',
            'discovery_machine_arm_id': 'discoveryMachineArmId',
            'disks': 'disks',
            'display_name': 'displayName',
            'groups': 'groups',
            'megabytes_of_memory': 'megabytesOfMemory',
            'network_adapters': 'networkAdapters',
            'number_of_cores': 'numberOfCores',
            'operating_system_name': 'operatingSystemName',
            'operating_system_type': 'operatingSystemType',
            'operating_system_version': 'operatingSystemVersion',
            'updated_timestamp': 'updatedTimestamp'
        }

        self._boot_type = boot_type
        self._created_timestamp = created_timestamp
        self._datacenter_management_server_arm_id = datacenter_management_server_arm_id
        self._datacenter_management_server_name = datacenter_management_server_name
        self._description = description
        self._discovery_machine_arm_id = discovery_machine_arm_id
        self._disks = disks
        self._display_name = display_name
        self._groups = groups
        self._megabytes_of_memory = megabytes_of_memory
        self._network_adapters = network_adapters
        self._number_of_cores = number_of_cores
        self._operating_system_name = operating_system_name
        self._operating_system_type = operating_system_type
        self._operating_system_version = operating_system_version
        self._updated_timestamp = updated_timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MachineProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MachineProperties of this MachineProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def boot_type(self):
        """Gets the boot_type of this MachineProperties.

        Boot type of the machine.

        :return: The boot_type of this MachineProperties.
        :rtype: str
        """
        return self._boot_type

    @boot_type.setter
    def boot_type(self, boot_type):
        """Sets the boot_type of this MachineProperties.

        Boot type of the machine.

        :param boot_type: The boot_type of this MachineProperties.
        :type boot_type: str
        """
        allowed_values = ["Unknown", "EFI", "BIOS"]  # noqa: E501
        if boot_type not in allowed_values:
            raise ValueError(
                "Invalid value for `boot_type` ({0}), must be one of {1}"
                .format(boot_type, allowed_values)
            )

        self._boot_type = boot_type

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this MachineProperties.

        Time when this machine was created. Date-Time represented in ISO-8601 format.

        :return: The created_timestamp of this MachineProperties.
        :rtype: datetime
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this MachineProperties.

        Time when this machine was created. Date-Time represented in ISO-8601 format.

        :param created_timestamp: The created_timestamp of this MachineProperties.
        :type created_timestamp: datetime
        """

        self._created_timestamp = created_timestamp

    @property
    def datacenter_management_server_arm_id(self):
        """Gets the datacenter_management_server_arm_id of this MachineProperties.

        ARM ID of the data center as tracked by the Microsoft.OffAzure.

        :return: The datacenter_management_server_arm_id of this MachineProperties.
        :rtype: str
        """
        return self._datacenter_management_server_arm_id

    @datacenter_management_server_arm_id.setter
    def datacenter_management_server_arm_id(self, datacenter_management_server_arm_id):
        """Sets the datacenter_management_server_arm_id of this MachineProperties.

        ARM ID of the data center as tracked by the Microsoft.OffAzure.

        :param datacenter_management_server_arm_id: The datacenter_management_server_arm_id of this MachineProperties.
        :type datacenter_management_server_arm_id: str
        """

        self._datacenter_management_server_arm_id = datacenter_management_server_arm_id

    @property
    def datacenter_management_server_name(self):
        """Gets the datacenter_management_server_name of this MachineProperties.

        Name of the server hosting the datacenter management solution.

        :return: The datacenter_management_server_name of this MachineProperties.
        :rtype: str
        """
        return self._datacenter_management_server_name

    @datacenter_management_server_name.setter
    def datacenter_management_server_name(self, datacenter_management_server_name):
        """Sets the datacenter_management_server_name of this MachineProperties.

        Name of the server hosting the datacenter management solution.

        :param datacenter_management_server_name: The datacenter_management_server_name of this MachineProperties.
        :type datacenter_management_server_name: str
        """

        self._datacenter_management_server_name = datacenter_management_server_name

    @property
    def description(self):
        """Gets the description of this MachineProperties.

        Description of the machine

        :return: The description of this MachineProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MachineProperties.

        Description of the machine

        :param description: The description of this MachineProperties.
        :type description: str
        """

        self._description = description

    @property
    def discovery_machine_arm_id(self):
        """Gets the discovery_machine_arm_id of this MachineProperties.

        ARM ID of the machine as tracked by the Microsoft.OffAzure.

        :return: The discovery_machine_arm_id of this MachineProperties.
        :rtype: str
        """
        return self._discovery_machine_arm_id

    @discovery_machine_arm_id.setter
    def discovery_machine_arm_id(self, discovery_machine_arm_id):
        """Sets the discovery_machine_arm_id of this MachineProperties.

        ARM ID of the machine as tracked by the Microsoft.OffAzure.

        :param discovery_machine_arm_id: The discovery_machine_arm_id of this MachineProperties.
        :type discovery_machine_arm_id: str
        """

        self._discovery_machine_arm_id = discovery_machine_arm_id

    @property
    def disks(self):
        """Gets the disks of this MachineProperties.

        Dictionary of disks attached to the machine. Key is ID of disk. Value is a disk object

        :return: The disks of this MachineProperties.
        :rtype: Dict[str, Disk]
        """
        return self._disks

    @disks.setter
    def disks(self, disks):
        """Sets the disks of this MachineProperties.

        Dictionary of disks attached to the machine. Key is ID of disk. Value is a disk object

        :param disks: The disks of this MachineProperties.
        :type disks: Dict[str, Disk]
        """

        self._disks = disks

    @property
    def display_name(self):
        """Gets the display_name of this MachineProperties.

        User readable name of the machine as defined by the user in their private datacenter.

        :return: The display_name of this MachineProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MachineProperties.

        User readable name of the machine as defined by the user in their private datacenter.

        :param display_name: The display_name of this MachineProperties.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def groups(self):
        """Gets the groups of this MachineProperties.

        List of references to the groups that the machine is member of.

        :return: The groups of this MachineProperties.
        :rtype: List[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this MachineProperties.

        List of references to the groups that the machine is member of.

        :param groups: The groups of this MachineProperties.
        :type groups: List[str]
        """

        self._groups = groups

    @property
    def megabytes_of_memory(self):
        """Gets the megabytes_of_memory of this MachineProperties.

        Memory in Megabytes.

        :return: The megabytes_of_memory of this MachineProperties.
        :rtype: float
        """
        return self._megabytes_of_memory

    @megabytes_of_memory.setter
    def megabytes_of_memory(self, megabytes_of_memory):
        """Sets the megabytes_of_memory of this MachineProperties.

        Memory in Megabytes.

        :param megabytes_of_memory: The megabytes_of_memory of this MachineProperties.
        :type megabytes_of_memory: float
        """

        self._megabytes_of_memory = megabytes_of_memory

    @property
    def network_adapters(self):
        """Gets the network_adapters of this MachineProperties.

        Dictionary of network adapters attached to the machine. Key is ID of network adapter. Value is a network adapter object

        :return: The network_adapters of this MachineProperties.
        :rtype: Dict[str, NetworkAdapter]
        """
        return self._network_adapters

    @network_adapters.setter
    def network_adapters(self, network_adapters):
        """Sets the network_adapters of this MachineProperties.

        Dictionary of network adapters attached to the machine. Key is ID of network adapter. Value is a network adapter object

        :param network_adapters: The network_adapters of this MachineProperties.
        :type network_adapters: Dict[str, NetworkAdapter]
        """

        self._network_adapters = network_adapters

    @property
    def number_of_cores(self):
        """Gets the number_of_cores of this MachineProperties.

        Processor count.

        :return: The number_of_cores of this MachineProperties.
        :rtype: int
        """
        return self._number_of_cores

    @number_of_cores.setter
    def number_of_cores(self, number_of_cores):
        """Sets the number_of_cores of this MachineProperties.

        Processor count.

        :param number_of_cores: The number_of_cores of this MachineProperties.
        :type number_of_cores: int
        """

        self._number_of_cores = number_of_cores

    @property
    def operating_system_name(self):
        """Gets the operating_system_name of this MachineProperties.

        Operating System name of the machine.

        :return: The operating_system_name of this MachineProperties.
        :rtype: str
        """
        return self._operating_system_name

    @operating_system_name.setter
    def operating_system_name(self, operating_system_name):
        """Sets the operating_system_name of this MachineProperties.

        Operating System name of the machine.

        :param operating_system_name: The operating_system_name of this MachineProperties.
        :type operating_system_name: str
        """

        self._operating_system_name = operating_system_name

    @property
    def operating_system_type(self):
        """Gets the operating_system_type of this MachineProperties.

        Operating System type of the machine.

        :return: The operating_system_type of this MachineProperties.
        :rtype: str
        """
        return self._operating_system_type

    @operating_system_type.setter
    def operating_system_type(self, operating_system_type):
        """Sets the operating_system_type of this MachineProperties.

        Operating System type of the machine.

        :param operating_system_type: The operating_system_type of this MachineProperties.
        :type operating_system_type: str
        """

        self._operating_system_type = operating_system_type

    @property
    def operating_system_version(self):
        """Gets the operating_system_version of this MachineProperties.

        Operating System version of the machine.

        :return: The operating_system_version of this MachineProperties.
        :rtype: str
        """
        return self._operating_system_version

    @operating_system_version.setter
    def operating_system_version(self, operating_system_version):
        """Sets the operating_system_version of this MachineProperties.

        Operating System version of the machine.

        :param operating_system_version: The operating_system_version of this MachineProperties.
        :type operating_system_version: str
        """

        self._operating_system_version = operating_system_version

    @property
    def updated_timestamp(self):
        """Gets the updated_timestamp of this MachineProperties.

        Time when this machine was last updated. Date-Time represented in ISO-8601 format.

        :return: The updated_timestamp of this MachineProperties.
        :rtype: datetime
        """
        return self._updated_timestamp

    @updated_timestamp.setter
    def updated_timestamp(self, updated_timestamp):
        """Sets the updated_timestamp of this MachineProperties.

        Time when this machine was last updated. Date-Time represented in ISO-8601 format.

        :param updated_timestamp: The updated_timestamp of this MachineProperties.
        :type updated_timestamp: datetime
        """

        self._updated_timestamp = updated_timestamp
