# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assessment_solution_id: str=None, created_timestamp: datetime=None, customer_workspace_id: str=None, customer_workspace_location: str=None, last_assessment_timestamp: datetime=None, number_of_assessments: int=None, number_of_groups: int=None, number_of_machines: int=None, project_status: str=None, provisioning_state: str=None, service_endpoint: str=None, updated_timestamp: datetime=None):
        """ProjectProperties - a model defined in OpenAPI

        :param assessment_solution_id: The assessment_solution_id of this ProjectProperties.
        :param created_timestamp: The created_timestamp of this ProjectProperties.
        :param customer_workspace_id: The customer_workspace_id of this ProjectProperties.
        :param customer_workspace_location: The customer_workspace_location of this ProjectProperties.
        :param last_assessment_timestamp: The last_assessment_timestamp of this ProjectProperties.
        :param number_of_assessments: The number_of_assessments of this ProjectProperties.
        :param number_of_groups: The number_of_groups of this ProjectProperties.
        :param number_of_machines: The number_of_machines of this ProjectProperties.
        :param project_status: The project_status of this ProjectProperties.
        :param provisioning_state: The provisioning_state of this ProjectProperties.
        :param service_endpoint: The service_endpoint of this ProjectProperties.
        :param updated_timestamp: The updated_timestamp of this ProjectProperties.
        """
        self.openapi_types = {
            'assessment_solution_id': str,
            'created_timestamp': datetime,
            'customer_workspace_id': str,
            'customer_workspace_location': str,
            'last_assessment_timestamp': datetime,
            'number_of_assessments': int,
            'number_of_groups': int,
            'number_of_machines': int,
            'project_status': str,
            'provisioning_state': str,
            'service_endpoint': str,
            'updated_timestamp': datetime
        }

        self.attribute_map = {
            'assessment_solution_id': 'assessmentSolutionId',
            'created_timestamp': 'createdTimestamp',
            'customer_workspace_id': 'customerWorkspaceId',
            'customer_workspace_location': 'customerWorkspaceLocation',
            'last_assessment_timestamp': 'lastAssessmentTimestamp',
            'number_of_assessments': 'numberOfAssessments',
            'number_of_groups': 'numberOfGroups',
            'number_of_machines': 'numberOfMachines',
            'project_status': 'projectStatus',
            'provisioning_state': 'provisioningState',
            'service_endpoint': 'serviceEndpoint',
            'updated_timestamp': 'updatedTimestamp'
        }

        self._assessment_solution_id = assessment_solution_id
        self._created_timestamp = created_timestamp
        self._customer_workspace_id = customer_workspace_id
        self._customer_workspace_location = customer_workspace_location
        self._last_assessment_timestamp = last_assessment_timestamp
        self._number_of_assessments = number_of_assessments
        self._number_of_groups = number_of_groups
        self._number_of_machines = number_of_machines
        self._project_status = project_status
        self._provisioning_state = provisioning_state
        self._service_endpoint = service_endpoint
        self._updated_timestamp = updated_timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectProperties of this ProjectProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assessment_solution_id(self):
        """Gets the assessment_solution_id of this ProjectProperties.

        Assessment solution ARM id tracked by Microsoft.Migrate/migrateProjects.

        :return: The assessment_solution_id of this ProjectProperties.
        :rtype: str
        """
        return self._assessment_solution_id

    @assessment_solution_id.setter
    def assessment_solution_id(self, assessment_solution_id):
        """Sets the assessment_solution_id of this ProjectProperties.

        Assessment solution ARM id tracked by Microsoft.Migrate/migrateProjects.

        :param assessment_solution_id: The assessment_solution_id of this ProjectProperties.
        :type assessment_solution_id: str
        """

        self._assessment_solution_id = assessment_solution_id

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this ProjectProperties.

        Time when this project was created. Date-Time represented in ISO-8601 format.

        :return: The created_timestamp of this ProjectProperties.
        :rtype: datetime
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this ProjectProperties.

        Time when this project was created. Date-Time represented in ISO-8601 format.

        :param created_timestamp: The created_timestamp of this ProjectProperties.
        :type created_timestamp: datetime
        """

        self._created_timestamp = created_timestamp

    @property
    def customer_workspace_id(self):
        """Gets the customer_workspace_id of this ProjectProperties.

        The ARM id of service map workspace created by customer.

        :return: The customer_workspace_id of this ProjectProperties.
        :rtype: str
        """
        return self._customer_workspace_id

    @customer_workspace_id.setter
    def customer_workspace_id(self, customer_workspace_id):
        """Sets the customer_workspace_id of this ProjectProperties.

        The ARM id of service map workspace created by customer.

        :param customer_workspace_id: The customer_workspace_id of this ProjectProperties.
        :type customer_workspace_id: str
        """

        self._customer_workspace_id = customer_workspace_id

    @property
    def customer_workspace_location(self):
        """Gets the customer_workspace_location of this ProjectProperties.

        Location of service map workspace created by customer.

        :return: The customer_workspace_location of this ProjectProperties.
        :rtype: str
        """
        return self._customer_workspace_location

    @customer_workspace_location.setter
    def customer_workspace_location(self, customer_workspace_location):
        """Sets the customer_workspace_location of this ProjectProperties.

        Location of service map workspace created by customer.

        :param customer_workspace_location: The customer_workspace_location of this ProjectProperties.
        :type customer_workspace_location: str
        """

        self._customer_workspace_location = customer_workspace_location

    @property
    def last_assessment_timestamp(self):
        """Gets the last_assessment_timestamp of this ProjectProperties.

        Time when last assessment was created. Date-Time represented in ISO-8601 format. This value will be null until assessment is created.

        :return: The last_assessment_timestamp of this ProjectProperties.
        :rtype: datetime
        """
        return self._last_assessment_timestamp

    @last_assessment_timestamp.setter
    def last_assessment_timestamp(self, last_assessment_timestamp):
        """Sets the last_assessment_timestamp of this ProjectProperties.

        Time when last assessment was created. Date-Time represented in ISO-8601 format. This value will be null until assessment is created.

        :param last_assessment_timestamp: The last_assessment_timestamp of this ProjectProperties.
        :type last_assessment_timestamp: datetime
        """

        self._last_assessment_timestamp = last_assessment_timestamp

    @property
    def number_of_assessments(self):
        """Gets the number_of_assessments of this ProjectProperties.

        Number of assessments created in the project.

        :return: The number_of_assessments of this ProjectProperties.
        :rtype: int
        """
        return self._number_of_assessments

    @number_of_assessments.setter
    def number_of_assessments(self, number_of_assessments):
        """Sets the number_of_assessments of this ProjectProperties.

        Number of assessments created in the project.

        :param number_of_assessments: The number_of_assessments of this ProjectProperties.
        :type number_of_assessments: int
        """

        self._number_of_assessments = number_of_assessments

    @property
    def number_of_groups(self):
        """Gets the number_of_groups of this ProjectProperties.

        Number of groups created in the project.

        :return: The number_of_groups of this ProjectProperties.
        :rtype: int
        """
        return self._number_of_groups

    @number_of_groups.setter
    def number_of_groups(self, number_of_groups):
        """Sets the number_of_groups of this ProjectProperties.

        Number of groups created in the project.

        :param number_of_groups: The number_of_groups of this ProjectProperties.
        :type number_of_groups: int
        """

        self._number_of_groups = number_of_groups

    @property
    def number_of_machines(self):
        """Gets the number_of_machines of this ProjectProperties.

        Number of machines in the project.

        :return: The number_of_machines of this ProjectProperties.
        :rtype: int
        """
        return self._number_of_machines

    @number_of_machines.setter
    def number_of_machines(self, number_of_machines):
        """Sets the number_of_machines of this ProjectProperties.

        Number of machines in the project.

        :param number_of_machines: The number_of_machines of this ProjectProperties.
        :type number_of_machines: int
        """

        self._number_of_machines = number_of_machines

    @property
    def project_status(self):
        """Gets the project_status of this ProjectProperties.

        Assessment project status.

        :return: The project_status of this ProjectProperties.
        :rtype: str
        """
        return self._project_status

    @project_status.setter
    def project_status(self, project_status):
        """Sets the project_status of this ProjectProperties.

        Assessment project status.

        :param project_status: The project_status of this ProjectProperties.
        :type project_status: str
        """
        allowed_values = ["Active", "Inactive"]  # noqa: E501
        if project_status not in allowed_values:
            raise ValueError(
                "Invalid value for `project_status` ({0}), must be one of {1}"
                .format(project_status, allowed_values)
            )

        self._project_status = project_status

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ProjectProperties.

        Provisioning state of the project.

        :return: The provisioning_state of this ProjectProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ProjectProperties.

        Provisioning state of the project.

        :param provisioning_state: The provisioning_state of this ProjectProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Accepted", "Creating", "Deleting", "Failed", "Moving", "Succeeded"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def service_endpoint(self):
        """Gets the service_endpoint of this ProjectProperties.

        Endpoint at which the collector agent can call agent REST API.

        :return: The service_endpoint of this ProjectProperties.
        :rtype: str
        """
        return self._service_endpoint

    @service_endpoint.setter
    def service_endpoint(self, service_endpoint):
        """Sets the service_endpoint of this ProjectProperties.

        Endpoint at which the collector agent can call agent REST API.

        :param service_endpoint: The service_endpoint of this ProjectProperties.
        :type service_endpoint: str
        """

        self._service_endpoint = service_endpoint

    @property
    def updated_timestamp(self):
        """Gets the updated_timestamp of this ProjectProperties.

        Time when this project was last updated. Date-Time represented in ISO-8601 format.

        :return: The updated_timestamp of this ProjectProperties.
        :rtype: datetime
        """
        return self._updated_timestamp

    @updated_timestamp.setter
    def updated_timestamp(self, updated_timestamp):
        """Sets the updated_timestamp of this ProjectProperties.

        Time when this project was last updated. Date-Time represented in ISO-8601 format.

        :param updated_timestamp: The updated_timestamp of this ProjectProperties.
        :type updated_timestamp: datetime
        """

        self._updated_timestamp = updated_timestamp
