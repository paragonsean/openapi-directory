/**
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDownloadUrl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDownloadUrl::OAIDownloadUrl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDownloadUrl::OAIDownloadUrl() {
    this->initializeModel();
}

OAIDownloadUrl::~OAIDownloadUrl() {}

void OAIDownloadUrl::initializeModel() {

    m_assessment_report_url_isSet = false;
    m_assessment_report_url_isValid = false;

    m_expiration_time_isSet = false;
    m_expiration_time_isValid = false;
}

void OAIDownloadUrl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDownloadUrl::fromJsonObject(QJsonObject json) {

    m_assessment_report_url_isValid = ::OpenAPI::fromJsonValue(m_assessment_report_url, json[QString("assessmentReportUrl")]);
    m_assessment_report_url_isSet = !json[QString("assessmentReportUrl")].isNull() && m_assessment_report_url_isValid;

    m_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_expiration_time, json[QString("expirationTime")]);
    m_expiration_time_isSet = !json[QString("expirationTime")].isNull() && m_expiration_time_isValid;
}

QString OAIDownloadUrl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDownloadUrl::asJsonObject() const {
    QJsonObject obj;
    if (m_assessment_report_url_isSet) {
        obj.insert(QString("assessmentReportUrl"), ::OpenAPI::toJsonValue(m_assessment_report_url));
    }
    if (m_expiration_time_isSet) {
        obj.insert(QString("expirationTime"), ::OpenAPI::toJsonValue(m_expiration_time));
    }
    return obj;
}

QString OAIDownloadUrl::getAssessmentReportUrl() const {
    return m_assessment_report_url;
}
void OAIDownloadUrl::setAssessmentReportUrl(const QString &assessment_report_url) {
    m_assessment_report_url = assessment_report_url;
    m_assessment_report_url_isSet = true;
}

bool OAIDownloadUrl::is_assessment_report_url_Set() const{
    return m_assessment_report_url_isSet;
}

bool OAIDownloadUrl::is_assessment_report_url_Valid() const{
    return m_assessment_report_url_isValid;
}

QDateTime OAIDownloadUrl::getExpirationTime() const {
    return m_expiration_time;
}
void OAIDownloadUrl::setExpirationTime(const QDateTime &expiration_time) {
    m_expiration_time = expiration_time;
    m_expiration_time_isSet = true;
}

bool OAIDownloadUrl::is_expiration_time_Set() const{
    return m_expiration_time_isSet;
}

bool OAIDownloadUrl::is_expiration_time_Valid() const{
    return m_expiration_time_isValid;
}

bool OAIDownloadUrl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assessment_report_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDownloadUrl::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
