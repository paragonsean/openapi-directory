/**
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssessedNetworkAdapter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssessedNetworkAdapter::OAIAssessedNetworkAdapter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssessedNetworkAdapter::OAIAssessedNetworkAdapter() {
    this->initializeModel();
}

OAIAssessedNetworkAdapter::~OAIAssessedNetworkAdapter() {}

void OAIAssessedNetworkAdapter::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_ip_addresses_isSet = false;
    m_ip_addresses_isValid = false;

    m_mac_address_isSet = false;
    m_mac_address_isValid = false;

    m_megabytes_per_second_received_isSet = false;
    m_megabytes_per_second_received_isValid = false;

    m_megabytes_per_second_transmitted_isSet = false;
    m_megabytes_per_second_transmitted_isValid = false;

    m_monthly_bandwidth_costs_isSet = false;
    m_monthly_bandwidth_costs_isValid = false;

    m_net_gigabytes_transmitted_per_month_isSet = false;
    m_net_gigabytes_transmitted_per_month_isValid = false;

    m_suitability_isSet = false;
    m_suitability_isValid = false;

    m_suitability_detail_isSet = false;
    m_suitability_detail_isValid = false;

    m_suitability_explanation_isSet = false;
    m_suitability_explanation_isValid = false;
}

void OAIAssessedNetworkAdapter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssessedNetworkAdapter::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_ip_addresses, json[QString("ipAddresses")]);
    m_ip_addresses_isSet = !json[QString("ipAddresses")].isNull() && m_ip_addresses_isValid;

    m_mac_address_isValid = ::OpenAPI::fromJsonValue(m_mac_address, json[QString("macAddress")]);
    m_mac_address_isSet = !json[QString("macAddress")].isNull() && m_mac_address_isValid;

    m_megabytes_per_second_received_isValid = ::OpenAPI::fromJsonValue(m_megabytes_per_second_received, json[QString("megabytesPerSecondReceived")]);
    m_megabytes_per_second_received_isSet = !json[QString("megabytesPerSecondReceived")].isNull() && m_megabytes_per_second_received_isValid;

    m_megabytes_per_second_transmitted_isValid = ::OpenAPI::fromJsonValue(m_megabytes_per_second_transmitted, json[QString("megabytesPerSecondTransmitted")]);
    m_megabytes_per_second_transmitted_isSet = !json[QString("megabytesPerSecondTransmitted")].isNull() && m_megabytes_per_second_transmitted_isValid;

    m_monthly_bandwidth_costs_isValid = ::OpenAPI::fromJsonValue(m_monthly_bandwidth_costs, json[QString("monthlyBandwidthCosts")]);
    m_monthly_bandwidth_costs_isSet = !json[QString("monthlyBandwidthCosts")].isNull() && m_monthly_bandwidth_costs_isValid;

    m_net_gigabytes_transmitted_per_month_isValid = ::OpenAPI::fromJsonValue(m_net_gigabytes_transmitted_per_month, json[QString("netGigabytesTransmittedPerMonth")]);
    m_net_gigabytes_transmitted_per_month_isSet = !json[QString("netGigabytesTransmittedPerMonth")].isNull() && m_net_gigabytes_transmitted_per_month_isValid;

    m_suitability_isValid = ::OpenAPI::fromJsonValue(m_suitability, json[QString("suitability")]);
    m_suitability_isSet = !json[QString("suitability")].isNull() && m_suitability_isValid;

    m_suitability_detail_isValid = ::OpenAPI::fromJsonValue(m_suitability_detail, json[QString("suitabilityDetail")]);
    m_suitability_detail_isSet = !json[QString("suitabilityDetail")].isNull() && m_suitability_detail_isValid;

    m_suitability_explanation_isValid = ::OpenAPI::fromJsonValue(m_suitability_explanation, json[QString("suitabilityExplanation")]);
    m_suitability_explanation_isSet = !json[QString("suitabilityExplanation")].isNull() && m_suitability_explanation_isValid;
}

QString OAIAssessedNetworkAdapter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssessedNetworkAdapter::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_ip_addresses.size() > 0) {
        obj.insert(QString("ipAddresses"), ::OpenAPI::toJsonValue(m_ip_addresses));
    }
    if (m_mac_address_isSet) {
        obj.insert(QString("macAddress"), ::OpenAPI::toJsonValue(m_mac_address));
    }
    if (m_megabytes_per_second_received_isSet) {
        obj.insert(QString("megabytesPerSecondReceived"), ::OpenAPI::toJsonValue(m_megabytes_per_second_received));
    }
    if (m_megabytes_per_second_transmitted_isSet) {
        obj.insert(QString("megabytesPerSecondTransmitted"), ::OpenAPI::toJsonValue(m_megabytes_per_second_transmitted));
    }
    if (m_monthly_bandwidth_costs_isSet) {
        obj.insert(QString("monthlyBandwidthCosts"), ::OpenAPI::toJsonValue(m_monthly_bandwidth_costs));
    }
    if (m_net_gigabytes_transmitted_per_month_isSet) {
        obj.insert(QString("netGigabytesTransmittedPerMonth"), ::OpenAPI::toJsonValue(m_net_gigabytes_transmitted_per_month));
    }
    if (m_suitability_isSet) {
        obj.insert(QString("suitability"), ::OpenAPI::toJsonValue(m_suitability));
    }
    if (m_suitability_detail_isSet) {
        obj.insert(QString("suitabilityDetail"), ::OpenAPI::toJsonValue(m_suitability_detail));
    }
    if (m_suitability_explanation_isSet) {
        obj.insert(QString("suitabilityExplanation"), ::OpenAPI::toJsonValue(m_suitability_explanation));
    }
    return obj;
}

QString OAIAssessedNetworkAdapter::getDisplayName() const {
    return m_display_name;
}
void OAIAssessedNetworkAdapter::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAssessedNetworkAdapter::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAssessedNetworkAdapter::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<QString> OAIAssessedNetworkAdapter::getIpAddresses() const {
    return m_ip_addresses;
}
void OAIAssessedNetworkAdapter::setIpAddresses(const QList<QString> &ip_addresses) {
    m_ip_addresses = ip_addresses;
    m_ip_addresses_isSet = true;
}

bool OAIAssessedNetworkAdapter::is_ip_addresses_Set() const{
    return m_ip_addresses_isSet;
}

bool OAIAssessedNetworkAdapter::is_ip_addresses_Valid() const{
    return m_ip_addresses_isValid;
}

QString OAIAssessedNetworkAdapter::getMacAddress() const {
    return m_mac_address;
}
void OAIAssessedNetworkAdapter::setMacAddress(const QString &mac_address) {
    m_mac_address = mac_address;
    m_mac_address_isSet = true;
}

bool OAIAssessedNetworkAdapter::is_mac_address_Set() const{
    return m_mac_address_isSet;
}

bool OAIAssessedNetworkAdapter::is_mac_address_Valid() const{
    return m_mac_address_isValid;
}

double OAIAssessedNetworkAdapter::getMegabytesPerSecondReceived() const {
    return m_megabytes_per_second_received;
}
void OAIAssessedNetworkAdapter::setMegabytesPerSecondReceived(const double &megabytes_per_second_received) {
    m_megabytes_per_second_received = megabytes_per_second_received;
    m_megabytes_per_second_received_isSet = true;
}

bool OAIAssessedNetworkAdapter::is_megabytes_per_second_received_Set() const{
    return m_megabytes_per_second_received_isSet;
}

bool OAIAssessedNetworkAdapter::is_megabytes_per_second_received_Valid() const{
    return m_megabytes_per_second_received_isValid;
}

double OAIAssessedNetworkAdapter::getMegabytesPerSecondTransmitted() const {
    return m_megabytes_per_second_transmitted;
}
void OAIAssessedNetworkAdapter::setMegabytesPerSecondTransmitted(const double &megabytes_per_second_transmitted) {
    m_megabytes_per_second_transmitted = megabytes_per_second_transmitted;
    m_megabytes_per_second_transmitted_isSet = true;
}

bool OAIAssessedNetworkAdapter::is_megabytes_per_second_transmitted_Set() const{
    return m_megabytes_per_second_transmitted_isSet;
}

bool OAIAssessedNetworkAdapter::is_megabytes_per_second_transmitted_Valid() const{
    return m_megabytes_per_second_transmitted_isValid;
}

double OAIAssessedNetworkAdapter::getMonthlyBandwidthCosts() const {
    return m_monthly_bandwidth_costs;
}
void OAIAssessedNetworkAdapter::setMonthlyBandwidthCosts(const double &monthly_bandwidth_costs) {
    m_monthly_bandwidth_costs = monthly_bandwidth_costs;
    m_monthly_bandwidth_costs_isSet = true;
}

bool OAIAssessedNetworkAdapter::is_monthly_bandwidth_costs_Set() const{
    return m_monthly_bandwidth_costs_isSet;
}

bool OAIAssessedNetworkAdapter::is_monthly_bandwidth_costs_Valid() const{
    return m_monthly_bandwidth_costs_isValid;
}

double OAIAssessedNetworkAdapter::getNetGigabytesTransmittedPerMonth() const {
    return m_net_gigabytes_transmitted_per_month;
}
void OAIAssessedNetworkAdapter::setNetGigabytesTransmittedPerMonth(const double &net_gigabytes_transmitted_per_month) {
    m_net_gigabytes_transmitted_per_month = net_gigabytes_transmitted_per_month;
    m_net_gigabytes_transmitted_per_month_isSet = true;
}

bool OAIAssessedNetworkAdapter::is_net_gigabytes_transmitted_per_month_Set() const{
    return m_net_gigabytes_transmitted_per_month_isSet;
}

bool OAIAssessedNetworkAdapter::is_net_gigabytes_transmitted_per_month_Valid() const{
    return m_net_gigabytes_transmitted_per_month_isValid;
}

QString OAIAssessedNetworkAdapter::getSuitability() const {
    return m_suitability;
}
void OAIAssessedNetworkAdapter::setSuitability(const QString &suitability) {
    m_suitability = suitability;
    m_suitability_isSet = true;
}

bool OAIAssessedNetworkAdapter::is_suitability_Set() const{
    return m_suitability_isSet;
}

bool OAIAssessedNetworkAdapter::is_suitability_Valid() const{
    return m_suitability_isValid;
}

QString OAIAssessedNetworkAdapter::getSuitabilityDetail() const {
    return m_suitability_detail;
}
void OAIAssessedNetworkAdapter::setSuitabilityDetail(const QString &suitability_detail) {
    m_suitability_detail = suitability_detail;
    m_suitability_detail_isSet = true;
}

bool OAIAssessedNetworkAdapter::is_suitability_detail_Set() const{
    return m_suitability_detail_isSet;
}

bool OAIAssessedNetworkAdapter::is_suitability_detail_Valid() const{
    return m_suitability_detail_isValid;
}

QString OAIAssessedNetworkAdapter::getSuitabilityExplanation() const {
    return m_suitability_explanation;
}
void OAIAssessedNetworkAdapter::setSuitabilityExplanation(const QString &suitability_explanation) {
    m_suitability_explanation = suitability_explanation;
    m_suitability_explanation_isSet = true;
}

bool OAIAssessedNetworkAdapter::is_suitability_explanation_Set() const{
    return m_suitability_explanation_isSet;
}

bool OAIAssessedNetworkAdapter::is_suitability_explanation_Valid() const{
    return m_suitability_explanation_isValid;
}

bool OAIAssessedNetworkAdapter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_megabytes_per_second_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_megabytes_per_second_transmitted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_bandwidth_costs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_gigabytes_transmitted_per_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suitability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suitability_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suitability_explanation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssessedNetworkAdapter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
