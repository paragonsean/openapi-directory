/**
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollectorBodyAgentSpnProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollectorBodyAgentSpnProperties::OAICollectorBodyAgentSpnProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollectorBodyAgentSpnProperties::OAICollectorBodyAgentSpnProperties() {
    this->initializeModel();
}

OAICollectorBodyAgentSpnProperties::~OAICollectorBodyAgentSpnProperties() {}

void OAICollectorBodyAgentSpnProperties::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_audience_isSet = false;
    m_audience_isValid = false;

    m_authority_isSet = false;
    m_authority_isValid = false;

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAICollectorBodyAgentSpnProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollectorBodyAgentSpnProperties::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("applicationId")]);
    m_application_id_isSet = !json[QString("applicationId")].isNull() && m_application_id_isValid;

    m_audience_isValid = ::OpenAPI::fromJsonValue(m_audience, json[QString("audience")]);
    m_audience_isSet = !json[QString("audience")].isNull() && m_audience_isValid;

    m_authority_isValid = ::OpenAPI::fromJsonValue(m_authority, json[QString("authority")]);
    m_authority_isSet = !json[QString("authority")].isNull() && m_authority_isValid;

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAICollectorBodyAgentSpnProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollectorBodyAgentSpnProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("applicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_audience_isSet) {
        obj.insert(QString("audience"), ::OpenAPI::toJsonValue(m_audience));
    }
    if (m_authority_isSet) {
        obj.insert(QString("authority"), ::OpenAPI::toJsonValue(m_authority));
    }
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

QString OAICollectorBodyAgentSpnProperties::getApplicationId() const {
    return m_application_id;
}
void OAICollectorBodyAgentSpnProperties::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAICollectorBodyAgentSpnProperties::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAICollectorBodyAgentSpnProperties::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAICollectorBodyAgentSpnProperties::getAudience() const {
    return m_audience;
}
void OAICollectorBodyAgentSpnProperties::setAudience(const QString &audience) {
    m_audience = audience;
    m_audience_isSet = true;
}

bool OAICollectorBodyAgentSpnProperties::is_audience_Set() const{
    return m_audience_isSet;
}

bool OAICollectorBodyAgentSpnProperties::is_audience_Valid() const{
    return m_audience_isValid;
}

QString OAICollectorBodyAgentSpnProperties::getAuthority() const {
    return m_authority;
}
void OAICollectorBodyAgentSpnProperties::setAuthority(const QString &authority) {
    m_authority = authority;
    m_authority_isSet = true;
}

bool OAICollectorBodyAgentSpnProperties::is_authority_Set() const{
    return m_authority_isSet;
}

bool OAICollectorBodyAgentSpnProperties::is_authority_Valid() const{
    return m_authority_isValid;
}

QString OAICollectorBodyAgentSpnProperties::getObjectId() const {
    return m_object_id;
}
void OAICollectorBodyAgentSpnProperties::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAICollectorBodyAgentSpnProperties::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAICollectorBodyAgentSpnProperties::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QString OAICollectorBodyAgentSpnProperties::getTenantId() const {
    return m_tenant_id;
}
void OAICollectorBodyAgentSpnProperties::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAICollectorBodyAgentSpnProperties::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAICollectorBodyAgentSpnProperties::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAICollectorBodyAgentSpnProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollectorBodyAgentSpnProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
