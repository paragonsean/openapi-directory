/**
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssessedMachineProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssessedMachineProperties::OAIAssessedMachineProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssessedMachineProperties::OAIAssessedMachineProperties() {
    this->initializeModel();
}

OAIAssessedMachineProperties::~OAIAssessedMachineProperties() {}

void OAIAssessedMachineProperties::initializeModel() {

    m_boot_type_isSet = false;
    m_boot_type_isValid = false;

    m_confidence_rating_in_percentage_isSet = false;
    m_confidence_rating_in_percentage_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_datacenter_machine_arm_id_isSet = false;
    m_datacenter_machine_arm_id_isValid = false;

    m_datacenter_management_server_arm_id_isSet = false;
    m_datacenter_management_server_arm_id_isValid = false;

    m_datacenter_management_server_name_isSet = false;
    m_datacenter_management_server_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disks_isSet = false;
    m_disks_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_megabytes_of_memory_isSet = false;
    m_megabytes_of_memory_isValid = false;

    m_megabytes_of_memory_for_recommended_size_isSet = false;
    m_megabytes_of_memory_for_recommended_size_isValid = false;

    m_monthly_bandwidth_cost_isSet = false;
    m_monthly_bandwidth_cost_isValid = false;

    m_monthly_compute_cost_for_recommended_size_isSet = false;
    m_monthly_compute_cost_for_recommended_size_isValid = false;

    m_monthly_premium_storage_cost_isSet = false;
    m_monthly_premium_storage_cost_isValid = false;

    m_monthly_standard_ssd_storage_cost_isSet = false;
    m_monthly_standard_ssd_storage_cost_isValid = false;

    m_monthly_storage_cost_isSet = false;
    m_monthly_storage_cost_isValid = false;

    m_network_adapters_isSet = false;
    m_network_adapters_isValid = false;

    m_number_of_cores_isSet = false;
    m_number_of_cores_isValid = false;

    m_number_of_cores_for_recommended_size_isSet = false;
    m_number_of_cores_for_recommended_size_isValid = false;

    m_operating_system_name_isSet = false;
    m_operating_system_name_isValid = false;

    m_operating_system_type_isSet = false;
    m_operating_system_type_isValid = false;

    m_operating_system_version_isSet = false;
    m_operating_system_version_isValid = false;

    m_percentage_cores_utilization_isSet = false;
    m_percentage_cores_utilization_isValid = false;

    m_percentage_memory_utilization_isSet = false;
    m_percentage_memory_utilization_isValid = false;

    m_recommended_size_isSet = false;
    m_recommended_size_isValid = false;

    m_suitability_isSet = false;
    m_suitability_isValid = false;

    m_suitability_detail_isSet = false;
    m_suitability_detail_isValid = false;

    m_suitability_explanation_isSet = false;
    m_suitability_explanation_isValid = false;

    m_updated_timestamp_isSet = false;
    m_updated_timestamp_isValid = false;
}

void OAIAssessedMachineProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssessedMachineProperties::fromJsonObject(QJsonObject json) {

    m_boot_type_isValid = ::OpenAPI::fromJsonValue(m_boot_type, json[QString("bootType")]);
    m_boot_type_isSet = !json[QString("bootType")].isNull() && m_boot_type_isValid;

    m_confidence_rating_in_percentage_isValid = ::OpenAPI::fromJsonValue(m_confidence_rating_in_percentage, json[QString("confidenceRatingInPercentage")]);
    m_confidence_rating_in_percentage_isSet = !json[QString("confidenceRatingInPercentage")].isNull() && m_confidence_rating_in_percentage_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("createdTimestamp")]);
    m_created_timestamp_isSet = !json[QString("createdTimestamp")].isNull() && m_created_timestamp_isValid;

    m_datacenter_machine_arm_id_isValid = ::OpenAPI::fromJsonValue(m_datacenter_machine_arm_id, json[QString("datacenterMachineArmId")]);
    m_datacenter_machine_arm_id_isSet = !json[QString("datacenterMachineArmId")].isNull() && m_datacenter_machine_arm_id_isValid;

    m_datacenter_management_server_arm_id_isValid = ::OpenAPI::fromJsonValue(m_datacenter_management_server_arm_id, json[QString("datacenterManagementServerArmId")]);
    m_datacenter_management_server_arm_id_isSet = !json[QString("datacenterManagementServerArmId")].isNull() && m_datacenter_management_server_arm_id_isValid;

    m_datacenter_management_server_name_isValid = ::OpenAPI::fromJsonValue(m_datacenter_management_server_name, json[QString("datacenterManagementServerName")]);
    m_datacenter_management_server_name_isSet = !json[QString("datacenterManagementServerName")].isNull() && m_datacenter_management_server_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disks_isValid = ::OpenAPI::fromJsonValue(m_disks, json[QString("disks")]);
    m_disks_isSet = !json[QString("disks")].isNull() && m_disks_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_megabytes_of_memory_isValid = ::OpenAPI::fromJsonValue(m_megabytes_of_memory, json[QString("megabytesOfMemory")]);
    m_megabytes_of_memory_isSet = !json[QString("megabytesOfMemory")].isNull() && m_megabytes_of_memory_isValid;

    m_megabytes_of_memory_for_recommended_size_isValid = ::OpenAPI::fromJsonValue(m_megabytes_of_memory_for_recommended_size, json[QString("megabytesOfMemoryForRecommendedSize")]);
    m_megabytes_of_memory_for_recommended_size_isSet = !json[QString("megabytesOfMemoryForRecommendedSize")].isNull() && m_megabytes_of_memory_for_recommended_size_isValid;

    m_monthly_bandwidth_cost_isValid = ::OpenAPI::fromJsonValue(m_monthly_bandwidth_cost, json[QString("monthlyBandwidthCost")]);
    m_monthly_bandwidth_cost_isSet = !json[QString("monthlyBandwidthCost")].isNull() && m_monthly_bandwidth_cost_isValid;

    m_monthly_compute_cost_for_recommended_size_isValid = ::OpenAPI::fromJsonValue(m_monthly_compute_cost_for_recommended_size, json[QString("monthlyComputeCostForRecommendedSize")]);
    m_monthly_compute_cost_for_recommended_size_isSet = !json[QString("monthlyComputeCostForRecommendedSize")].isNull() && m_monthly_compute_cost_for_recommended_size_isValid;

    m_monthly_premium_storage_cost_isValid = ::OpenAPI::fromJsonValue(m_monthly_premium_storage_cost, json[QString("monthlyPremiumStorageCost")]);
    m_monthly_premium_storage_cost_isSet = !json[QString("monthlyPremiumStorageCost")].isNull() && m_monthly_premium_storage_cost_isValid;

    m_monthly_standard_ssd_storage_cost_isValid = ::OpenAPI::fromJsonValue(m_monthly_standard_ssd_storage_cost, json[QString("monthlyStandardSSDStorageCost")]);
    m_monthly_standard_ssd_storage_cost_isSet = !json[QString("monthlyStandardSSDStorageCost")].isNull() && m_monthly_standard_ssd_storage_cost_isValid;

    m_monthly_storage_cost_isValid = ::OpenAPI::fromJsonValue(m_monthly_storage_cost, json[QString("monthlyStorageCost")]);
    m_monthly_storage_cost_isSet = !json[QString("monthlyStorageCost")].isNull() && m_monthly_storage_cost_isValid;

    m_network_adapters_isValid = ::OpenAPI::fromJsonValue(m_network_adapters, json[QString("networkAdapters")]);
    m_network_adapters_isSet = !json[QString("networkAdapters")].isNull() && m_network_adapters_isValid;

    m_number_of_cores_isValid = ::OpenAPI::fromJsonValue(m_number_of_cores, json[QString("numberOfCores")]);
    m_number_of_cores_isSet = !json[QString("numberOfCores")].isNull() && m_number_of_cores_isValid;

    m_number_of_cores_for_recommended_size_isValid = ::OpenAPI::fromJsonValue(m_number_of_cores_for_recommended_size, json[QString("numberOfCoresForRecommendedSize")]);
    m_number_of_cores_for_recommended_size_isSet = !json[QString("numberOfCoresForRecommendedSize")].isNull() && m_number_of_cores_for_recommended_size_isValid;

    m_operating_system_name_isValid = ::OpenAPI::fromJsonValue(m_operating_system_name, json[QString("operatingSystemName")]);
    m_operating_system_name_isSet = !json[QString("operatingSystemName")].isNull() && m_operating_system_name_isValid;

    m_operating_system_type_isValid = ::OpenAPI::fromJsonValue(m_operating_system_type, json[QString("operatingSystemType")]);
    m_operating_system_type_isSet = !json[QString("operatingSystemType")].isNull() && m_operating_system_type_isValid;

    m_operating_system_version_isValid = ::OpenAPI::fromJsonValue(m_operating_system_version, json[QString("operatingSystemVersion")]);
    m_operating_system_version_isSet = !json[QString("operatingSystemVersion")].isNull() && m_operating_system_version_isValid;

    m_percentage_cores_utilization_isValid = ::OpenAPI::fromJsonValue(m_percentage_cores_utilization, json[QString("percentageCoresUtilization")]);
    m_percentage_cores_utilization_isSet = !json[QString("percentageCoresUtilization")].isNull() && m_percentage_cores_utilization_isValid;

    m_percentage_memory_utilization_isValid = ::OpenAPI::fromJsonValue(m_percentage_memory_utilization, json[QString("percentageMemoryUtilization")]);
    m_percentage_memory_utilization_isSet = !json[QString("percentageMemoryUtilization")].isNull() && m_percentage_memory_utilization_isValid;

    m_recommended_size_isValid = ::OpenAPI::fromJsonValue(m_recommended_size, json[QString("recommendedSize")]);
    m_recommended_size_isSet = !json[QString("recommendedSize")].isNull() && m_recommended_size_isValid;

    m_suitability_isValid = ::OpenAPI::fromJsonValue(m_suitability, json[QString("suitability")]);
    m_suitability_isSet = !json[QString("suitability")].isNull() && m_suitability_isValid;

    m_suitability_detail_isValid = ::OpenAPI::fromJsonValue(m_suitability_detail, json[QString("suitabilityDetail")]);
    m_suitability_detail_isSet = !json[QString("suitabilityDetail")].isNull() && m_suitability_detail_isValid;

    m_suitability_explanation_isValid = ::OpenAPI::fromJsonValue(m_suitability_explanation, json[QString("suitabilityExplanation")]);
    m_suitability_explanation_isSet = !json[QString("suitabilityExplanation")].isNull() && m_suitability_explanation_isValid;

    m_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_updated_timestamp, json[QString("updatedTimestamp")]);
    m_updated_timestamp_isSet = !json[QString("updatedTimestamp")].isNull() && m_updated_timestamp_isValid;
}

QString OAIAssessedMachineProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssessedMachineProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_boot_type_isSet) {
        obj.insert(QString("bootType"), ::OpenAPI::toJsonValue(m_boot_type));
    }
    if (m_confidence_rating_in_percentage_isSet) {
        obj.insert(QString("confidenceRatingInPercentage"), ::OpenAPI::toJsonValue(m_confidence_rating_in_percentage));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("createdTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_datacenter_machine_arm_id_isSet) {
        obj.insert(QString("datacenterMachineArmId"), ::OpenAPI::toJsonValue(m_datacenter_machine_arm_id));
    }
    if (m_datacenter_management_server_arm_id_isSet) {
        obj.insert(QString("datacenterManagementServerArmId"), ::OpenAPI::toJsonValue(m_datacenter_management_server_arm_id));
    }
    if (m_datacenter_management_server_name_isSet) {
        obj.insert(QString("datacenterManagementServerName"), ::OpenAPI::toJsonValue(m_datacenter_management_server_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disks.size() > 0) {
        obj.insert(QString("disks"), ::OpenAPI::toJsonValue(m_disks));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_megabytes_of_memory_isSet) {
        obj.insert(QString("megabytesOfMemory"), ::OpenAPI::toJsonValue(m_megabytes_of_memory));
    }
    if (m_megabytes_of_memory_for_recommended_size_isSet) {
        obj.insert(QString("megabytesOfMemoryForRecommendedSize"), ::OpenAPI::toJsonValue(m_megabytes_of_memory_for_recommended_size));
    }
    if (m_monthly_bandwidth_cost_isSet) {
        obj.insert(QString("monthlyBandwidthCost"), ::OpenAPI::toJsonValue(m_monthly_bandwidth_cost));
    }
    if (m_monthly_compute_cost_for_recommended_size_isSet) {
        obj.insert(QString("monthlyComputeCostForRecommendedSize"), ::OpenAPI::toJsonValue(m_monthly_compute_cost_for_recommended_size));
    }
    if (m_monthly_premium_storage_cost_isSet) {
        obj.insert(QString("monthlyPremiumStorageCost"), ::OpenAPI::toJsonValue(m_monthly_premium_storage_cost));
    }
    if (m_monthly_standard_ssd_storage_cost_isSet) {
        obj.insert(QString("monthlyStandardSSDStorageCost"), ::OpenAPI::toJsonValue(m_monthly_standard_ssd_storage_cost));
    }
    if (m_monthly_storage_cost_isSet) {
        obj.insert(QString("monthlyStorageCost"), ::OpenAPI::toJsonValue(m_monthly_storage_cost));
    }
    if (m_network_adapters.size() > 0) {
        obj.insert(QString("networkAdapters"), ::OpenAPI::toJsonValue(m_network_adapters));
    }
    if (m_number_of_cores_isSet) {
        obj.insert(QString("numberOfCores"), ::OpenAPI::toJsonValue(m_number_of_cores));
    }
    if (m_number_of_cores_for_recommended_size_isSet) {
        obj.insert(QString("numberOfCoresForRecommendedSize"), ::OpenAPI::toJsonValue(m_number_of_cores_for_recommended_size));
    }
    if (m_operating_system_name_isSet) {
        obj.insert(QString("operatingSystemName"), ::OpenAPI::toJsonValue(m_operating_system_name));
    }
    if (m_operating_system_type_isSet) {
        obj.insert(QString("operatingSystemType"), ::OpenAPI::toJsonValue(m_operating_system_type));
    }
    if (m_operating_system_version_isSet) {
        obj.insert(QString("operatingSystemVersion"), ::OpenAPI::toJsonValue(m_operating_system_version));
    }
    if (m_percentage_cores_utilization_isSet) {
        obj.insert(QString("percentageCoresUtilization"), ::OpenAPI::toJsonValue(m_percentage_cores_utilization));
    }
    if (m_percentage_memory_utilization_isSet) {
        obj.insert(QString("percentageMemoryUtilization"), ::OpenAPI::toJsonValue(m_percentage_memory_utilization));
    }
    if (m_recommended_size_isSet) {
        obj.insert(QString("recommendedSize"), ::OpenAPI::toJsonValue(m_recommended_size));
    }
    if (m_suitability_isSet) {
        obj.insert(QString("suitability"), ::OpenAPI::toJsonValue(m_suitability));
    }
    if (m_suitability_detail_isSet) {
        obj.insert(QString("suitabilityDetail"), ::OpenAPI::toJsonValue(m_suitability_detail));
    }
    if (m_suitability_explanation_isSet) {
        obj.insert(QString("suitabilityExplanation"), ::OpenAPI::toJsonValue(m_suitability_explanation));
    }
    if (m_updated_timestamp_isSet) {
        obj.insert(QString("updatedTimestamp"), ::OpenAPI::toJsonValue(m_updated_timestamp));
    }
    return obj;
}

QString OAIAssessedMachineProperties::getBootType() const {
    return m_boot_type;
}
void OAIAssessedMachineProperties::setBootType(const QString &boot_type) {
    m_boot_type = boot_type;
    m_boot_type_isSet = true;
}

bool OAIAssessedMachineProperties::is_boot_type_Set() const{
    return m_boot_type_isSet;
}

bool OAIAssessedMachineProperties::is_boot_type_Valid() const{
    return m_boot_type_isValid;
}

double OAIAssessedMachineProperties::getConfidenceRatingInPercentage() const {
    return m_confidence_rating_in_percentage;
}
void OAIAssessedMachineProperties::setConfidenceRatingInPercentage(const double &confidence_rating_in_percentage) {
    m_confidence_rating_in_percentage = confidence_rating_in_percentage;
    m_confidence_rating_in_percentage_isSet = true;
}

bool OAIAssessedMachineProperties::is_confidence_rating_in_percentage_Set() const{
    return m_confidence_rating_in_percentage_isSet;
}

bool OAIAssessedMachineProperties::is_confidence_rating_in_percentage_Valid() const{
    return m_confidence_rating_in_percentage_isValid;
}

QDateTime OAIAssessedMachineProperties::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIAssessedMachineProperties::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIAssessedMachineProperties::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIAssessedMachineProperties::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

QString OAIAssessedMachineProperties::getDatacenterMachineArmId() const {
    return m_datacenter_machine_arm_id;
}
void OAIAssessedMachineProperties::setDatacenterMachineArmId(const QString &datacenter_machine_arm_id) {
    m_datacenter_machine_arm_id = datacenter_machine_arm_id;
    m_datacenter_machine_arm_id_isSet = true;
}

bool OAIAssessedMachineProperties::is_datacenter_machine_arm_id_Set() const{
    return m_datacenter_machine_arm_id_isSet;
}

bool OAIAssessedMachineProperties::is_datacenter_machine_arm_id_Valid() const{
    return m_datacenter_machine_arm_id_isValid;
}

QString OAIAssessedMachineProperties::getDatacenterManagementServerArmId() const {
    return m_datacenter_management_server_arm_id;
}
void OAIAssessedMachineProperties::setDatacenterManagementServerArmId(const QString &datacenter_management_server_arm_id) {
    m_datacenter_management_server_arm_id = datacenter_management_server_arm_id;
    m_datacenter_management_server_arm_id_isSet = true;
}

bool OAIAssessedMachineProperties::is_datacenter_management_server_arm_id_Set() const{
    return m_datacenter_management_server_arm_id_isSet;
}

bool OAIAssessedMachineProperties::is_datacenter_management_server_arm_id_Valid() const{
    return m_datacenter_management_server_arm_id_isValid;
}

QString OAIAssessedMachineProperties::getDatacenterManagementServerName() const {
    return m_datacenter_management_server_name;
}
void OAIAssessedMachineProperties::setDatacenterManagementServerName(const QString &datacenter_management_server_name) {
    m_datacenter_management_server_name = datacenter_management_server_name;
    m_datacenter_management_server_name_isSet = true;
}

bool OAIAssessedMachineProperties::is_datacenter_management_server_name_Set() const{
    return m_datacenter_management_server_name_isSet;
}

bool OAIAssessedMachineProperties::is_datacenter_management_server_name_Valid() const{
    return m_datacenter_management_server_name_isValid;
}

QString OAIAssessedMachineProperties::getDescription() const {
    return m_description;
}
void OAIAssessedMachineProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAssessedMachineProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAssessedMachineProperties::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, OAIAssessedDisk> OAIAssessedMachineProperties::getDisks() const {
    return m_disks;
}
void OAIAssessedMachineProperties::setDisks(const QMap<QString, OAIAssessedDisk> &disks) {
    m_disks = disks;
    m_disks_isSet = true;
}

bool OAIAssessedMachineProperties::is_disks_Set() const{
    return m_disks_isSet;
}

bool OAIAssessedMachineProperties::is_disks_Valid() const{
    return m_disks_isValid;
}

QString OAIAssessedMachineProperties::getDisplayName() const {
    return m_display_name;
}
void OAIAssessedMachineProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAssessedMachineProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAssessedMachineProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

double OAIAssessedMachineProperties::getMegabytesOfMemory() const {
    return m_megabytes_of_memory;
}
void OAIAssessedMachineProperties::setMegabytesOfMemory(const double &megabytes_of_memory) {
    m_megabytes_of_memory = megabytes_of_memory;
    m_megabytes_of_memory_isSet = true;
}

bool OAIAssessedMachineProperties::is_megabytes_of_memory_Set() const{
    return m_megabytes_of_memory_isSet;
}

bool OAIAssessedMachineProperties::is_megabytes_of_memory_Valid() const{
    return m_megabytes_of_memory_isValid;
}

double OAIAssessedMachineProperties::getMegabytesOfMemoryForRecommendedSize() const {
    return m_megabytes_of_memory_for_recommended_size;
}
void OAIAssessedMachineProperties::setMegabytesOfMemoryForRecommendedSize(const double &megabytes_of_memory_for_recommended_size) {
    m_megabytes_of_memory_for_recommended_size = megabytes_of_memory_for_recommended_size;
    m_megabytes_of_memory_for_recommended_size_isSet = true;
}

bool OAIAssessedMachineProperties::is_megabytes_of_memory_for_recommended_size_Set() const{
    return m_megabytes_of_memory_for_recommended_size_isSet;
}

bool OAIAssessedMachineProperties::is_megabytes_of_memory_for_recommended_size_Valid() const{
    return m_megabytes_of_memory_for_recommended_size_isValid;
}

double OAIAssessedMachineProperties::getMonthlyBandwidthCost() const {
    return m_monthly_bandwidth_cost;
}
void OAIAssessedMachineProperties::setMonthlyBandwidthCost(const double &monthly_bandwidth_cost) {
    m_monthly_bandwidth_cost = monthly_bandwidth_cost;
    m_monthly_bandwidth_cost_isSet = true;
}

bool OAIAssessedMachineProperties::is_monthly_bandwidth_cost_Set() const{
    return m_monthly_bandwidth_cost_isSet;
}

bool OAIAssessedMachineProperties::is_monthly_bandwidth_cost_Valid() const{
    return m_monthly_bandwidth_cost_isValid;
}

double OAIAssessedMachineProperties::getMonthlyComputeCostForRecommendedSize() const {
    return m_monthly_compute_cost_for_recommended_size;
}
void OAIAssessedMachineProperties::setMonthlyComputeCostForRecommendedSize(const double &monthly_compute_cost_for_recommended_size) {
    m_monthly_compute_cost_for_recommended_size = monthly_compute_cost_for_recommended_size;
    m_monthly_compute_cost_for_recommended_size_isSet = true;
}

bool OAIAssessedMachineProperties::is_monthly_compute_cost_for_recommended_size_Set() const{
    return m_monthly_compute_cost_for_recommended_size_isSet;
}

bool OAIAssessedMachineProperties::is_monthly_compute_cost_for_recommended_size_Valid() const{
    return m_monthly_compute_cost_for_recommended_size_isValid;
}

double OAIAssessedMachineProperties::getMonthlyPremiumStorageCost() const {
    return m_monthly_premium_storage_cost;
}
void OAIAssessedMachineProperties::setMonthlyPremiumStorageCost(const double &monthly_premium_storage_cost) {
    m_monthly_premium_storage_cost = monthly_premium_storage_cost;
    m_monthly_premium_storage_cost_isSet = true;
}

bool OAIAssessedMachineProperties::is_monthly_premium_storage_cost_Set() const{
    return m_monthly_premium_storage_cost_isSet;
}

bool OAIAssessedMachineProperties::is_monthly_premium_storage_cost_Valid() const{
    return m_monthly_premium_storage_cost_isValid;
}

double OAIAssessedMachineProperties::getMonthlyStandardSsdStorageCost() const {
    return m_monthly_standard_ssd_storage_cost;
}
void OAIAssessedMachineProperties::setMonthlyStandardSsdStorageCost(const double &monthly_standard_ssd_storage_cost) {
    m_monthly_standard_ssd_storage_cost = monthly_standard_ssd_storage_cost;
    m_monthly_standard_ssd_storage_cost_isSet = true;
}

bool OAIAssessedMachineProperties::is_monthly_standard_ssd_storage_cost_Set() const{
    return m_monthly_standard_ssd_storage_cost_isSet;
}

bool OAIAssessedMachineProperties::is_monthly_standard_ssd_storage_cost_Valid() const{
    return m_monthly_standard_ssd_storage_cost_isValid;
}

double OAIAssessedMachineProperties::getMonthlyStorageCost() const {
    return m_monthly_storage_cost;
}
void OAIAssessedMachineProperties::setMonthlyStorageCost(const double &monthly_storage_cost) {
    m_monthly_storage_cost = monthly_storage_cost;
    m_monthly_storage_cost_isSet = true;
}

bool OAIAssessedMachineProperties::is_monthly_storage_cost_Set() const{
    return m_monthly_storage_cost_isSet;
}

bool OAIAssessedMachineProperties::is_monthly_storage_cost_Valid() const{
    return m_monthly_storage_cost_isValid;
}

QMap<QString, OAIAssessedNetworkAdapter> OAIAssessedMachineProperties::getNetworkAdapters() const {
    return m_network_adapters;
}
void OAIAssessedMachineProperties::setNetworkAdapters(const QMap<QString, OAIAssessedNetworkAdapter> &network_adapters) {
    m_network_adapters = network_adapters;
    m_network_adapters_isSet = true;
}

bool OAIAssessedMachineProperties::is_network_adapters_Set() const{
    return m_network_adapters_isSet;
}

bool OAIAssessedMachineProperties::is_network_adapters_Valid() const{
    return m_network_adapters_isValid;
}

qint32 OAIAssessedMachineProperties::getNumberOfCores() const {
    return m_number_of_cores;
}
void OAIAssessedMachineProperties::setNumberOfCores(const qint32 &number_of_cores) {
    m_number_of_cores = number_of_cores;
    m_number_of_cores_isSet = true;
}

bool OAIAssessedMachineProperties::is_number_of_cores_Set() const{
    return m_number_of_cores_isSet;
}

bool OAIAssessedMachineProperties::is_number_of_cores_Valid() const{
    return m_number_of_cores_isValid;
}

qint32 OAIAssessedMachineProperties::getNumberOfCoresForRecommendedSize() const {
    return m_number_of_cores_for_recommended_size;
}
void OAIAssessedMachineProperties::setNumberOfCoresForRecommendedSize(const qint32 &number_of_cores_for_recommended_size) {
    m_number_of_cores_for_recommended_size = number_of_cores_for_recommended_size;
    m_number_of_cores_for_recommended_size_isSet = true;
}

bool OAIAssessedMachineProperties::is_number_of_cores_for_recommended_size_Set() const{
    return m_number_of_cores_for_recommended_size_isSet;
}

bool OAIAssessedMachineProperties::is_number_of_cores_for_recommended_size_Valid() const{
    return m_number_of_cores_for_recommended_size_isValid;
}

QString OAIAssessedMachineProperties::getOperatingSystemName() const {
    return m_operating_system_name;
}
void OAIAssessedMachineProperties::setOperatingSystemName(const QString &operating_system_name) {
    m_operating_system_name = operating_system_name;
    m_operating_system_name_isSet = true;
}

bool OAIAssessedMachineProperties::is_operating_system_name_Set() const{
    return m_operating_system_name_isSet;
}

bool OAIAssessedMachineProperties::is_operating_system_name_Valid() const{
    return m_operating_system_name_isValid;
}

QString OAIAssessedMachineProperties::getOperatingSystemType() const {
    return m_operating_system_type;
}
void OAIAssessedMachineProperties::setOperatingSystemType(const QString &operating_system_type) {
    m_operating_system_type = operating_system_type;
    m_operating_system_type_isSet = true;
}

bool OAIAssessedMachineProperties::is_operating_system_type_Set() const{
    return m_operating_system_type_isSet;
}

bool OAIAssessedMachineProperties::is_operating_system_type_Valid() const{
    return m_operating_system_type_isValid;
}

QString OAIAssessedMachineProperties::getOperatingSystemVersion() const {
    return m_operating_system_version;
}
void OAIAssessedMachineProperties::setOperatingSystemVersion(const QString &operating_system_version) {
    m_operating_system_version = operating_system_version;
    m_operating_system_version_isSet = true;
}

bool OAIAssessedMachineProperties::is_operating_system_version_Set() const{
    return m_operating_system_version_isSet;
}

bool OAIAssessedMachineProperties::is_operating_system_version_Valid() const{
    return m_operating_system_version_isValid;
}

double OAIAssessedMachineProperties::getPercentageCoresUtilization() const {
    return m_percentage_cores_utilization;
}
void OAIAssessedMachineProperties::setPercentageCoresUtilization(const double &percentage_cores_utilization) {
    m_percentage_cores_utilization = percentage_cores_utilization;
    m_percentage_cores_utilization_isSet = true;
}

bool OAIAssessedMachineProperties::is_percentage_cores_utilization_Set() const{
    return m_percentage_cores_utilization_isSet;
}

bool OAIAssessedMachineProperties::is_percentage_cores_utilization_Valid() const{
    return m_percentage_cores_utilization_isValid;
}

double OAIAssessedMachineProperties::getPercentageMemoryUtilization() const {
    return m_percentage_memory_utilization;
}
void OAIAssessedMachineProperties::setPercentageMemoryUtilization(const double &percentage_memory_utilization) {
    m_percentage_memory_utilization = percentage_memory_utilization;
    m_percentage_memory_utilization_isSet = true;
}

bool OAIAssessedMachineProperties::is_percentage_memory_utilization_Set() const{
    return m_percentage_memory_utilization_isSet;
}

bool OAIAssessedMachineProperties::is_percentage_memory_utilization_Valid() const{
    return m_percentage_memory_utilization_isValid;
}

QString OAIAssessedMachineProperties::getRecommendedSize() const {
    return m_recommended_size;
}
void OAIAssessedMachineProperties::setRecommendedSize(const QString &recommended_size) {
    m_recommended_size = recommended_size;
    m_recommended_size_isSet = true;
}

bool OAIAssessedMachineProperties::is_recommended_size_Set() const{
    return m_recommended_size_isSet;
}

bool OAIAssessedMachineProperties::is_recommended_size_Valid() const{
    return m_recommended_size_isValid;
}

QString OAIAssessedMachineProperties::getSuitability() const {
    return m_suitability;
}
void OAIAssessedMachineProperties::setSuitability(const QString &suitability) {
    m_suitability = suitability;
    m_suitability_isSet = true;
}

bool OAIAssessedMachineProperties::is_suitability_Set() const{
    return m_suitability_isSet;
}

bool OAIAssessedMachineProperties::is_suitability_Valid() const{
    return m_suitability_isValid;
}

QString OAIAssessedMachineProperties::getSuitabilityDetail() const {
    return m_suitability_detail;
}
void OAIAssessedMachineProperties::setSuitabilityDetail(const QString &suitability_detail) {
    m_suitability_detail = suitability_detail;
    m_suitability_detail_isSet = true;
}

bool OAIAssessedMachineProperties::is_suitability_detail_Set() const{
    return m_suitability_detail_isSet;
}

bool OAIAssessedMachineProperties::is_suitability_detail_Valid() const{
    return m_suitability_detail_isValid;
}

QString OAIAssessedMachineProperties::getSuitabilityExplanation() const {
    return m_suitability_explanation;
}
void OAIAssessedMachineProperties::setSuitabilityExplanation(const QString &suitability_explanation) {
    m_suitability_explanation = suitability_explanation;
    m_suitability_explanation_isSet = true;
}

bool OAIAssessedMachineProperties::is_suitability_explanation_Set() const{
    return m_suitability_explanation_isSet;
}

bool OAIAssessedMachineProperties::is_suitability_explanation_Valid() const{
    return m_suitability_explanation_isValid;
}

QDateTime OAIAssessedMachineProperties::getUpdatedTimestamp() const {
    return m_updated_timestamp;
}
void OAIAssessedMachineProperties::setUpdatedTimestamp(const QDateTime &updated_timestamp) {
    m_updated_timestamp = updated_timestamp;
    m_updated_timestamp_isSet = true;
}

bool OAIAssessedMachineProperties::is_updated_timestamp_Set() const{
    return m_updated_timestamp_isSet;
}

bool OAIAssessedMachineProperties::is_updated_timestamp_Valid() const{
    return m_updated_timestamp_isValid;
}

bool OAIAssessedMachineProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boot_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_rating_in_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datacenter_machine_arm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datacenter_management_server_arm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datacenter_management_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_megabytes_of_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_megabytes_of_memory_for_recommended_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_bandwidth_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_compute_cost_for_recommended_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_premium_storage_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_standard_ssd_storage_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_storage_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_adapters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_cores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_cores_for_recommended_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_cores_utilization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_memory_utilization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suitability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suitability_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suitability_explanation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssessedMachineProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
