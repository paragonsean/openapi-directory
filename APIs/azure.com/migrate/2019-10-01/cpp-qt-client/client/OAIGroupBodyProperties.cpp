/**
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupBodyProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupBodyProperties::OAIGroupBodyProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupBodyProperties::OAIGroupBodyProperties() {
    this->initializeModel();
}

OAIGroupBodyProperties::~OAIGroupBodyProperties() {}

void OAIGroupBodyProperties::initializeModel() {

    m_machines_isSet = false;
    m_machines_isValid = false;

    m_operation_type_isSet = false;
    m_operation_type_isValid = false;
}

void OAIGroupBodyProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupBodyProperties::fromJsonObject(QJsonObject json) {

    m_machines_isValid = ::OpenAPI::fromJsonValue(m_machines, json[QString("machines")]);
    m_machines_isSet = !json[QString("machines")].isNull() && m_machines_isValid;

    m_operation_type_isValid = ::OpenAPI::fromJsonValue(m_operation_type, json[QString("operationType")]);
    m_operation_type_isSet = !json[QString("operationType")].isNull() && m_operation_type_isValid;
}

QString OAIGroupBodyProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupBodyProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_machines.size() > 0) {
        obj.insert(QString("machines"), ::OpenAPI::toJsonValue(m_machines));
    }
    if (m_operation_type_isSet) {
        obj.insert(QString("operationType"), ::OpenAPI::toJsonValue(m_operation_type));
    }
    return obj;
}

QList<QString> OAIGroupBodyProperties::getMachines() const {
    return m_machines;
}
void OAIGroupBodyProperties::setMachines(const QList<QString> &machines) {
    m_machines = machines;
    m_machines_isSet = true;
}

bool OAIGroupBodyProperties::is_machines_Set() const{
    return m_machines_isSet;
}

bool OAIGroupBodyProperties::is_machines_Valid() const{
    return m_machines_isValid;
}

QString OAIGroupBodyProperties::getOperationType() const {
    return m_operation_type;
}
void OAIGroupBodyProperties::setOperationType(const QString &operation_type) {
    m_operation_type = operation_type;
    m_operation_type_isSet = true;
}

bool OAIGroupBodyProperties::is_operation_type_Set() const{
    return m_operation_type_isSet;
}

bool OAIGroupBodyProperties::is_operation_type_Valid() const{
    return m_operation_type_isValid;
}

bool OAIGroupBodyProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_machines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupBodyProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
