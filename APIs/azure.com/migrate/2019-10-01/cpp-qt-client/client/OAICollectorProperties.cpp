/**
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollectorProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollectorProperties::OAICollectorProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollectorProperties::OAICollectorProperties() {
    this->initializeModel();
}

OAICollectorProperties::~OAICollectorProperties() {}

void OAICollectorProperties::initializeModel() {

    m_agent_properties_isSet = false;
    m_agent_properties_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_discovery_site_id_isSet = false;
    m_discovery_site_id_isValid = false;

    m_updated_timestamp_isSet = false;
    m_updated_timestamp_isValid = false;
}

void OAICollectorProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollectorProperties::fromJsonObject(QJsonObject json) {

    m_agent_properties_isValid = ::OpenAPI::fromJsonValue(m_agent_properties, json[QString("agentProperties")]);
    m_agent_properties_isSet = !json[QString("agentProperties")].isNull() && m_agent_properties_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("createdTimestamp")]);
    m_created_timestamp_isSet = !json[QString("createdTimestamp")].isNull() && m_created_timestamp_isValid;

    m_discovery_site_id_isValid = ::OpenAPI::fromJsonValue(m_discovery_site_id, json[QString("discoverySiteId")]);
    m_discovery_site_id_isSet = !json[QString("discoverySiteId")].isNull() && m_discovery_site_id_isValid;

    m_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_updated_timestamp, json[QString("updatedTimestamp")]);
    m_updated_timestamp_isSet = !json[QString("updatedTimestamp")].isNull() && m_updated_timestamp_isValid;
}

QString OAICollectorProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollectorProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_properties.isSet()) {
        obj.insert(QString("agentProperties"), ::OpenAPI::toJsonValue(m_agent_properties));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("createdTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_discovery_site_id_isSet) {
        obj.insert(QString("discoverySiteId"), ::OpenAPI::toJsonValue(m_discovery_site_id));
    }
    if (m_updated_timestamp_isSet) {
        obj.insert(QString("updatedTimestamp"), ::OpenAPI::toJsonValue(m_updated_timestamp));
    }
    return obj;
}

OAICollectorAgentProperties OAICollectorProperties::getAgentProperties() const {
    return m_agent_properties;
}
void OAICollectorProperties::setAgentProperties(const OAICollectorAgentProperties &agent_properties) {
    m_agent_properties = agent_properties;
    m_agent_properties_isSet = true;
}

bool OAICollectorProperties::is_agent_properties_Set() const{
    return m_agent_properties_isSet;
}

bool OAICollectorProperties::is_agent_properties_Valid() const{
    return m_agent_properties_isValid;
}

QString OAICollectorProperties::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAICollectorProperties::setCreatedTimestamp(const QString &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAICollectorProperties::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAICollectorProperties::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

QString OAICollectorProperties::getDiscoverySiteId() const {
    return m_discovery_site_id;
}
void OAICollectorProperties::setDiscoverySiteId(const QString &discovery_site_id) {
    m_discovery_site_id = discovery_site_id;
    m_discovery_site_id_isSet = true;
}

bool OAICollectorProperties::is_discovery_site_id_Set() const{
    return m_discovery_site_id_isSet;
}

bool OAICollectorProperties::is_discovery_site_id_Valid() const{
    return m_discovery_site_id_isValid;
}

QString OAICollectorProperties::getUpdatedTimestamp() const {
    return m_updated_timestamp;
}
void OAICollectorProperties::setUpdatedTimestamp(const QString &updated_timestamp) {
    m_updated_timestamp = updated_timestamp;
    m_updated_timestamp_isSet = true;
}

bool OAICollectorProperties::is_updated_timestamp_Set() const{
    return m_updated_timestamp_isSet;
}

bool OAICollectorProperties::is_updated_timestamp_Valid() const{
    return m_updated_timestamp_isValid;
}

bool OAICollectorProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovery_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollectorProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
