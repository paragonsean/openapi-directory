/**
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAssessedMachineProperties.h
 *
 * Properties of an assessed machine.
 */

#ifndef OAIAssessedMachineProperties_H
#define OAIAssessedMachineProperties_H

#include <QJsonObject>

#include "OAIAssessedDisk.h"
#include "OAIAssessedNetworkAdapter.h"
#include <QDateTime>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAssessedDisk;
class OAIAssessedNetworkAdapter;

class OAIAssessedMachineProperties : public OAIObject {
public:
    OAIAssessedMachineProperties();
    OAIAssessedMachineProperties(QString json);
    ~OAIAssessedMachineProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBootType() const;
    void setBootType(const QString &boot_type);
    bool is_boot_type_Set() const;
    bool is_boot_type_Valid() const;

    double getConfidenceRatingInPercentage() const;
    void setConfidenceRatingInPercentage(const double &confidence_rating_in_percentage);
    bool is_confidence_rating_in_percentage_Set() const;
    bool is_confidence_rating_in_percentage_Valid() const;

    QDateTime getCreatedTimestamp() const;
    void setCreatedTimestamp(const QDateTime &created_timestamp);
    bool is_created_timestamp_Set() const;
    bool is_created_timestamp_Valid() const;

    QString getDatacenterMachineArmId() const;
    void setDatacenterMachineArmId(const QString &datacenter_machine_arm_id);
    bool is_datacenter_machine_arm_id_Set() const;
    bool is_datacenter_machine_arm_id_Valid() const;

    QString getDatacenterManagementServerArmId() const;
    void setDatacenterManagementServerArmId(const QString &datacenter_management_server_arm_id);
    bool is_datacenter_management_server_arm_id_Set() const;
    bool is_datacenter_management_server_arm_id_Valid() const;

    QString getDatacenterManagementServerName() const;
    void setDatacenterManagementServerName(const QString &datacenter_management_server_name);
    bool is_datacenter_management_server_name_Set() const;
    bool is_datacenter_management_server_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QMap<QString, OAIAssessedDisk> getDisks() const;
    void setDisks(const QMap<QString, OAIAssessedDisk> &disks);
    bool is_disks_Set() const;
    bool is_disks_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    double getMegabytesOfMemory() const;
    void setMegabytesOfMemory(const double &megabytes_of_memory);
    bool is_megabytes_of_memory_Set() const;
    bool is_megabytes_of_memory_Valid() const;

    double getMegabytesOfMemoryForRecommendedSize() const;
    void setMegabytesOfMemoryForRecommendedSize(const double &megabytes_of_memory_for_recommended_size);
    bool is_megabytes_of_memory_for_recommended_size_Set() const;
    bool is_megabytes_of_memory_for_recommended_size_Valid() const;

    double getMonthlyBandwidthCost() const;
    void setMonthlyBandwidthCost(const double &monthly_bandwidth_cost);
    bool is_monthly_bandwidth_cost_Set() const;
    bool is_monthly_bandwidth_cost_Valid() const;

    double getMonthlyComputeCostForRecommendedSize() const;
    void setMonthlyComputeCostForRecommendedSize(const double &monthly_compute_cost_for_recommended_size);
    bool is_monthly_compute_cost_for_recommended_size_Set() const;
    bool is_monthly_compute_cost_for_recommended_size_Valid() const;

    double getMonthlyPremiumStorageCost() const;
    void setMonthlyPremiumStorageCost(const double &monthly_premium_storage_cost);
    bool is_monthly_premium_storage_cost_Set() const;
    bool is_monthly_premium_storage_cost_Valid() const;

    double getMonthlyStandardSsdStorageCost() const;
    void setMonthlyStandardSsdStorageCost(const double &monthly_standard_ssd_storage_cost);
    bool is_monthly_standard_ssd_storage_cost_Set() const;
    bool is_monthly_standard_ssd_storage_cost_Valid() const;

    double getMonthlyStorageCost() const;
    void setMonthlyStorageCost(const double &monthly_storage_cost);
    bool is_monthly_storage_cost_Set() const;
    bool is_monthly_storage_cost_Valid() const;

    QMap<QString, OAIAssessedNetworkAdapter> getNetworkAdapters() const;
    void setNetworkAdapters(const QMap<QString, OAIAssessedNetworkAdapter> &network_adapters);
    bool is_network_adapters_Set() const;
    bool is_network_adapters_Valid() const;

    qint32 getNumberOfCores() const;
    void setNumberOfCores(const qint32 &number_of_cores);
    bool is_number_of_cores_Set() const;
    bool is_number_of_cores_Valid() const;

    qint32 getNumberOfCoresForRecommendedSize() const;
    void setNumberOfCoresForRecommendedSize(const qint32 &number_of_cores_for_recommended_size);
    bool is_number_of_cores_for_recommended_size_Set() const;
    bool is_number_of_cores_for_recommended_size_Valid() const;

    QString getOperatingSystemName() const;
    void setOperatingSystemName(const QString &operating_system_name);
    bool is_operating_system_name_Set() const;
    bool is_operating_system_name_Valid() const;

    QString getOperatingSystemType() const;
    void setOperatingSystemType(const QString &operating_system_type);
    bool is_operating_system_type_Set() const;
    bool is_operating_system_type_Valid() const;

    QString getOperatingSystemVersion() const;
    void setOperatingSystemVersion(const QString &operating_system_version);
    bool is_operating_system_version_Set() const;
    bool is_operating_system_version_Valid() const;

    double getPercentageCoresUtilization() const;
    void setPercentageCoresUtilization(const double &percentage_cores_utilization);
    bool is_percentage_cores_utilization_Set() const;
    bool is_percentage_cores_utilization_Valid() const;

    double getPercentageMemoryUtilization() const;
    void setPercentageMemoryUtilization(const double &percentage_memory_utilization);
    bool is_percentage_memory_utilization_Set() const;
    bool is_percentage_memory_utilization_Valid() const;

    QString getRecommendedSize() const;
    void setRecommendedSize(const QString &recommended_size);
    bool is_recommended_size_Set() const;
    bool is_recommended_size_Valid() const;

    QString getSuitability() const;
    void setSuitability(const QString &suitability);
    bool is_suitability_Set() const;
    bool is_suitability_Valid() const;

    QString getSuitabilityDetail() const;
    void setSuitabilityDetail(const QString &suitability_detail);
    bool is_suitability_detail_Set() const;
    bool is_suitability_detail_Valid() const;

    QString getSuitabilityExplanation() const;
    void setSuitabilityExplanation(const QString &suitability_explanation);
    bool is_suitability_explanation_Set() const;
    bool is_suitability_explanation_Valid() const;

    QDateTime getUpdatedTimestamp() const;
    void setUpdatedTimestamp(const QDateTime &updated_timestamp);
    bool is_updated_timestamp_Set() const;
    bool is_updated_timestamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_boot_type;
    bool m_boot_type_isSet;
    bool m_boot_type_isValid;

    double m_confidence_rating_in_percentage;
    bool m_confidence_rating_in_percentage_isSet;
    bool m_confidence_rating_in_percentage_isValid;

    QDateTime m_created_timestamp;
    bool m_created_timestamp_isSet;
    bool m_created_timestamp_isValid;

    QString m_datacenter_machine_arm_id;
    bool m_datacenter_machine_arm_id_isSet;
    bool m_datacenter_machine_arm_id_isValid;

    QString m_datacenter_management_server_arm_id;
    bool m_datacenter_management_server_arm_id_isSet;
    bool m_datacenter_management_server_arm_id_isValid;

    QString m_datacenter_management_server_name;
    bool m_datacenter_management_server_name_isSet;
    bool m_datacenter_management_server_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QMap<QString, OAIAssessedDisk> m_disks;
    bool m_disks_isSet;
    bool m_disks_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    double m_megabytes_of_memory;
    bool m_megabytes_of_memory_isSet;
    bool m_megabytes_of_memory_isValid;

    double m_megabytes_of_memory_for_recommended_size;
    bool m_megabytes_of_memory_for_recommended_size_isSet;
    bool m_megabytes_of_memory_for_recommended_size_isValid;

    double m_monthly_bandwidth_cost;
    bool m_monthly_bandwidth_cost_isSet;
    bool m_monthly_bandwidth_cost_isValid;

    double m_monthly_compute_cost_for_recommended_size;
    bool m_monthly_compute_cost_for_recommended_size_isSet;
    bool m_monthly_compute_cost_for_recommended_size_isValid;

    double m_monthly_premium_storage_cost;
    bool m_monthly_premium_storage_cost_isSet;
    bool m_monthly_premium_storage_cost_isValid;

    double m_monthly_standard_ssd_storage_cost;
    bool m_monthly_standard_ssd_storage_cost_isSet;
    bool m_monthly_standard_ssd_storage_cost_isValid;

    double m_monthly_storage_cost;
    bool m_monthly_storage_cost_isSet;
    bool m_monthly_storage_cost_isValid;

    QMap<QString, OAIAssessedNetworkAdapter> m_network_adapters;
    bool m_network_adapters_isSet;
    bool m_network_adapters_isValid;

    qint32 m_number_of_cores;
    bool m_number_of_cores_isSet;
    bool m_number_of_cores_isValid;

    qint32 m_number_of_cores_for_recommended_size;
    bool m_number_of_cores_for_recommended_size_isSet;
    bool m_number_of_cores_for_recommended_size_isValid;

    QString m_operating_system_name;
    bool m_operating_system_name_isSet;
    bool m_operating_system_name_isValid;

    QString m_operating_system_type;
    bool m_operating_system_type_isSet;
    bool m_operating_system_type_isValid;

    QString m_operating_system_version;
    bool m_operating_system_version_isSet;
    bool m_operating_system_version_isValid;

    double m_percentage_cores_utilization;
    bool m_percentage_cores_utilization_isSet;
    bool m_percentage_cores_utilization_isValid;

    double m_percentage_memory_utilization;
    bool m_percentage_memory_utilization_isSet;
    bool m_percentage_memory_utilization_isValid;

    QString m_recommended_size;
    bool m_recommended_size_isSet;
    bool m_recommended_size_isValid;

    QString m_suitability;
    bool m_suitability_isSet;
    bool m_suitability_isValid;

    QString m_suitability_detail;
    bool m_suitability_detail_isSet;
    bool m_suitability_detail_isValid;

    QString m_suitability_explanation;
    bool m_suitability_explanation_isSet;
    bool m_suitability_explanation_isValid;

    QDateTime m_updated_timestamp;
    bool m_updated_timestamp_isSet;
    bool m_updated_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAssessedMachineProperties)

#endif // OAIAssessedMachineProperties_H
