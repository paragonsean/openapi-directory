/**
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVmFamily.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVmFamily::OAIVmFamily(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVmFamily::OAIVmFamily() {
    this->initializeModel();
}

OAIVmFamily::~OAIVmFamily() {}

void OAIVmFamily::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_family_name_isSet = false;
    m_family_name_isValid = false;

    m_target_locations_isSet = false;
    m_target_locations_isValid = false;
}

void OAIVmFamily::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVmFamily::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_family_name_isValid = ::OpenAPI::fromJsonValue(m_family_name, json[QString("familyName")]);
    m_family_name_isSet = !json[QString("familyName")].isNull() && m_family_name_isValid;

    m_target_locations_isValid = ::OpenAPI::fromJsonValue(m_target_locations, json[QString("targetLocations")]);
    m_target_locations_isSet = !json[QString("targetLocations")].isNull() && m_target_locations_isValid;
}

QString OAIVmFamily::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVmFamily::asJsonObject() const {
    QJsonObject obj;
    if (m_category.size() > 0) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_family_name_isSet) {
        obj.insert(QString("familyName"), ::OpenAPI::toJsonValue(m_family_name));
    }
    if (m_target_locations.size() > 0) {
        obj.insert(QString("targetLocations"), ::OpenAPI::toJsonValue(m_target_locations));
    }
    return obj;
}

QList<QString> OAIVmFamily::getCategory() const {
    return m_category;
}
void OAIVmFamily::setCategory(const QList<QString> &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIVmFamily::is_category_Set() const{
    return m_category_isSet;
}

bool OAIVmFamily::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIVmFamily::getFamilyName() const {
    return m_family_name;
}
void OAIVmFamily::setFamilyName(const QString &family_name) {
    m_family_name = family_name;
    m_family_name_isSet = true;
}

bool OAIVmFamily::is_family_name_Set() const{
    return m_family_name_isSet;
}

bool OAIVmFamily::is_family_name_Valid() const{
    return m_family_name_isValid;
}

QList<QString> OAIVmFamily::getTargetLocations() const {
    return m_target_locations;
}
void OAIVmFamily::setTargetLocations(const QList<QString> &target_locations) {
    m_target_locations = target_locations;
    m_target_locations_isSet = true;
}

bool OAIVmFamily::is_target_locations_Set() const{
    return m_target_locations_isSet;
}

bool OAIVmFamily::is_target_locations_Valid() const{
    return m_target_locations_isValid;
}

bool OAIVmFamily::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVmFamily::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
