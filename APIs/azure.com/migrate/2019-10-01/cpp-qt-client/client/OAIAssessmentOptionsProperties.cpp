/**
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssessmentOptionsProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssessmentOptionsProperties::OAIAssessmentOptionsProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssessmentOptionsProperties::OAIAssessmentOptionsProperties() {
    this->initializeModel();
}

OAIAssessmentOptionsProperties::~OAIAssessmentOptionsProperties() {}

void OAIAssessmentOptionsProperties::initializeModel() {

    m_reserved_instance_supported_currencies_isSet = false;
    m_reserved_instance_supported_currencies_isValid = false;

    m_reserved_instance_supported_locations_isSet = false;
    m_reserved_instance_supported_locations_isValid = false;

    m_reserved_instance_supported_offers_isSet = false;
    m_reserved_instance_supported_offers_isValid = false;

    m_reserved_instance_vm_families_isSet = false;
    m_reserved_instance_vm_families_isValid = false;

    m_vm_families_isSet = false;
    m_vm_families_isValid = false;
}

void OAIAssessmentOptionsProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssessmentOptionsProperties::fromJsonObject(QJsonObject json) {

    m_reserved_instance_supported_currencies_isValid = ::OpenAPI::fromJsonValue(m_reserved_instance_supported_currencies, json[QString("reservedInstanceSupportedCurrencies")]);
    m_reserved_instance_supported_currencies_isSet = !json[QString("reservedInstanceSupportedCurrencies")].isNull() && m_reserved_instance_supported_currencies_isValid;

    m_reserved_instance_supported_locations_isValid = ::OpenAPI::fromJsonValue(m_reserved_instance_supported_locations, json[QString("reservedInstanceSupportedLocations")]);
    m_reserved_instance_supported_locations_isSet = !json[QString("reservedInstanceSupportedLocations")].isNull() && m_reserved_instance_supported_locations_isValid;

    m_reserved_instance_supported_offers_isValid = ::OpenAPI::fromJsonValue(m_reserved_instance_supported_offers, json[QString("reservedInstanceSupportedOffers")]);
    m_reserved_instance_supported_offers_isSet = !json[QString("reservedInstanceSupportedOffers")].isNull() && m_reserved_instance_supported_offers_isValid;

    m_reserved_instance_vm_families_isValid = ::OpenAPI::fromJsonValue(m_reserved_instance_vm_families, json[QString("reservedInstanceVmFamilies")]);
    m_reserved_instance_vm_families_isSet = !json[QString("reservedInstanceVmFamilies")].isNull() && m_reserved_instance_vm_families_isValid;

    m_vm_families_isValid = ::OpenAPI::fromJsonValue(m_vm_families, json[QString("vmFamilies")]);
    m_vm_families_isSet = !json[QString("vmFamilies")].isNull() && m_vm_families_isValid;
}

QString OAIAssessmentOptionsProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssessmentOptionsProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_reserved_instance_supported_currencies.size() > 0) {
        obj.insert(QString("reservedInstanceSupportedCurrencies"), ::OpenAPI::toJsonValue(m_reserved_instance_supported_currencies));
    }
    if (m_reserved_instance_supported_locations.size() > 0) {
        obj.insert(QString("reservedInstanceSupportedLocations"), ::OpenAPI::toJsonValue(m_reserved_instance_supported_locations));
    }
    if (m_reserved_instance_supported_offers.size() > 0) {
        obj.insert(QString("reservedInstanceSupportedOffers"), ::OpenAPI::toJsonValue(m_reserved_instance_supported_offers));
    }
    if (m_reserved_instance_vm_families.size() > 0) {
        obj.insert(QString("reservedInstanceVmFamilies"), ::OpenAPI::toJsonValue(m_reserved_instance_vm_families));
    }
    if (m_vm_families.size() > 0) {
        obj.insert(QString("vmFamilies"), ::OpenAPI::toJsonValue(m_vm_families));
    }
    return obj;
}

QList<QString> OAIAssessmentOptionsProperties::getReservedInstanceSupportedCurrencies() const {
    return m_reserved_instance_supported_currencies;
}
void OAIAssessmentOptionsProperties::setReservedInstanceSupportedCurrencies(const QList<QString> &reserved_instance_supported_currencies) {
    m_reserved_instance_supported_currencies = reserved_instance_supported_currencies;
    m_reserved_instance_supported_currencies_isSet = true;
}

bool OAIAssessmentOptionsProperties::is_reserved_instance_supported_currencies_Set() const{
    return m_reserved_instance_supported_currencies_isSet;
}

bool OAIAssessmentOptionsProperties::is_reserved_instance_supported_currencies_Valid() const{
    return m_reserved_instance_supported_currencies_isValid;
}

QList<QString> OAIAssessmentOptionsProperties::getReservedInstanceSupportedLocations() const {
    return m_reserved_instance_supported_locations;
}
void OAIAssessmentOptionsProperties::setReservedInstanceSupportedLocations(const QList<QString> &reserved_instance_supported_locations) {
    m_reserved_instance_supported_locations = reserved_instance_supported_locations;
    m_reserved_instance_supported_locations_isSet = true;
}

bool OAIAssessmentOptionsProperties::is_reserved_instance_supported_locations_Set() const{
    return m_reserved_instance_supported_locations_isSet;
}

bool OAIAssessmentOptionsProperties::is_reserved_instance_supported_locations_Valid() const{
    return m_reserved_instance_supported_locations_isValid;
}

QList<QString> OAIAssessmentOptionsProperties::getReservedInstanceSupportedOffers() const {
    return m_reserved_instance_supported_offers;
}
void OAIAssessmentOptionsProperties::setReservedInstanceSupportedOffers(const QList<QString> &reserved_instance_supported_offers) {
    m_reserved_instance_supported_offers = reserved_instance_supported_offers;
    m_reserved_instance_supported_offers_isSet = true;
}

bool OAIAssessmentOptionsProperties::is_reserved_instance_supported_offers_Set() const{
    return m_reserved_instance_supported_offers_isSet;
}

bool OAIAssessmentOptionsProperties::is_reserved_instance_supported_offers_Valid() const{
    return m_reserved_instance_supported_offers_isValid;
}

QList<QString> OAIAssessmentOptionsProperties::getReservedInstanceVmFamilies() const {
    return m_reserved_instance_vm_families;
}
void OAIAssessmentOptionsProperties::setReservedInstanceVmFamilies(const QList<QString> &reserved_instance_vm_families) {
    m_reserved_instance_vm_families = reserved_instance_vm_families;
    m_reserved_instance_vm_families_isSet = true;
}

bool OAIAssessmentOptionsProperties::is_reserved_instance_vm_families_Set() const{
    return m_reserved_instance_vm_families_isSet;
}

bool OAIAssessmentOptionsProperties::is_reserved_instance_vm_families_Valid() const{
    return m_reserved_instance_vm_families_isValid;
}

QList<OAIVmFamily> OAIAssessmentOptionsProperties::getVmFamilies() const {
    return m_vm_families;
}
void OAIAssessmentOptionsProperties::setVmFamilies(const QList<OAIVmFamily> &vm_families) {
    m_vm_families = vm_families;
    m_vm_families_isSet = true;
}

bool OAIAssessmentOptionsProperties::is_vm_families_Set() const{
    return m_vm_families_isSet;
}

bool OAIAssessmentOptionsProperties::is_vm_families_Valid() const{
    return m_vm_families_isValid;
}

bool OAIAssessmentOptionsProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reserved_instance_supported_currencies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_instance_supported_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_instance_supported_offers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_instance_vm_families.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_families.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssessmentOptionsProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
