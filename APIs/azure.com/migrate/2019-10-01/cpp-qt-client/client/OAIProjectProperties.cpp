/**
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectProperties::OAIProjectProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectProperties::OAIProjectProperties() {
    this->initializeModel();
}

OAIProjectProperties::~OAIProjectProperties() {}

void OAIProjectProperties::initializeModel() {

    m_assessment_solution_id_isSet = false;
    m_assessment_solution_id_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_customer_workspace_id_isSet = false;
    m_customer_workspace_id_isValid = false;

    m_customer_workspace_location_isSet = false;
    m_customer_workspace_location_isValid = false;

    m_last_assessment_timestamp_isSet = false;
    m_last_assessment_timestamp_isValid = false;

    m_number_of_assessments_isSet = false;
    m_number_of_assessments_isValid = false;

    m_number_of_groups_isSet = false;
    m_number_of_groups_isValid = false;

    m_number_of_machines_isSet = false;
    m_number_of_machines_isValid = false;

    m_project_status_isSet = false;
    m_project_status_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_service_endpoint_isSet = false;
    m_service_endpoint_isValid = false;

    m_updated_timestamp_isSet = false;
    m_updated_timestamp_isValid = false;
}

void OAIProjectProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectProperties::fromJsonObject(QJsonObject json) {

    m_assessment_solution_id_isValid = ::OpenAPI::fromJsonValue(m_assessment_solution_id, json[QString("assessmentSolutionId")]);
    m_assessment_solution_id_isSet = !json[QString("assessmentSolutionId")].isNull() && m_assessment_solution_id_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("createdTimestamp")]);
    m_created_timestamp_isSet = !json[QString("createdTimestamp")].isNull() && m_created_timestamp_isValid;

    m_customer_workspace_id_isValid = ::OpenAPI::fromJsonValue(m_customer_workspace_id, json[QString("customerWorkspaceId")]);
    m_customer_workspace_id_isSet = !json[QString("customerWorkspaceId")].isNull() && m_customer_workspace_id_isValid;

    m_customer_workspace_location_isValid = ::OpenAPI::fromJsonValue(m_customer_workspace_location, json[QString("customerWorkspaceLocation")]);
    m_customer_workspace_location_isSet = !json[QString("customerWorkspaceLocation")].isNull() && m_customer_workspace_location_isValid;

    m_last_assessment_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_assessment_timestamp, json[QString("lastAssessmentTimestamp")]);
    m_last_assessment_timestamp_isSet = !json[QString("lastAssessmentTimestamp")].isNull() && m_last_assessment_timestamp_isValid;

    m_number_of_assessments_isValid = ::OpenAPI::fromJsonValue(m_number_of_assessments, json[QString("numberOfAssessments")]);
    m_number_of_assessments_isSet = !json[QString("numberOfAssessments")].isNull() && m_number_of_assessments_isValid;

    m_number_of_groups_isValid = ::OpenAPI::fromJsonValue(m_number_of_groups, json[QString("numberOfGroups")]);
    m_number_of_groups_isSet = !json[QString("numberOfGroups")].isNull() && m_number_of_groups_isValid;

    m_number_of_machines_isValid = ::OpenAPI::fromJsonValue(m_number_of_machines, json[QString("numberOfMachines")]);
    m_number_of_machines_isSet = !json[QString("numberOfMachines")].isNull() && m_number_of_machines_isValid;

    m_project_status_isValid = ::OpenAPI::fromJsonValue(m_project_status, json[QString("projectStatus")]);
    m_project_status_isSet = !json[QString("projectStatus")].isNull() && m_project_status_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_service_endpoint_isValid = ::OpenAPI::fromJsonValue(m_service_endpoint, json[QString("serviceEndpoint")]);
    m_service_endpoint_isSet = !json[QString("serviceEndpoint")].isNull() && m_service_endpoint_isValid;

    m_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_updated_timestamp, json[QString("updatedTimestamp")]);
    m_updated_timestamp_isSet = !json[QString("updatedTimestamp")].isNull() && m_updated_timestamp_isValid;
}

QString OAIProjectProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_assessment_solution_id_isSet) {
        obj.insert(QString("assessmentSolutionId"), ::OpenAPI::toJsonValue(m_assessment_solution_id));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("createdTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_customer_workspace_id_isSet) {
        obj.insert(QString("customerWorkspaceId"), ::OpenAPI::toJsonValue(m_customer_workspace_id));
    }
    if (m_customer_workspace_location_isSet) {
        obj.insert(QString("customerWorkspaceLocation"), ::OpenAPI::toJsonValue(m_customer_workspace_location));
    }
    if (m_last_assessment_timestamp_isSet) {
        obj.insert(QString("lastAssessmentTimestamp"), ::OpenAPI::toJsonValue(m_last_assessment_timestamp));
    }
    if (m_number_of_assessments_isSet) {
        obj.insert(QString("numberOfAssessments"), ::OpenAPI::toJsonValue(m_number_of_assessments));
    }
    if (m_number_of_groups_isSet) {
        obj.insert(QString("numberOfGroups"), ::OpenAPI::toJsonValue(m_number_of_groups));
    }
    if (m_number_of_machines_isSet) {
        obj.insert(QString("numberOfMachines"), ::OpenAPI::toJsonValue(m_number_of_machines));
    }
    if (m_project_status_isSet) {
        obj.insert(QString("projectStatus"), ::OpenAPI::toJsonValue(m_project_status));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_service_endpoint_isSet) {
        obj.insert(QString("serviceEndpoint"), ::OpenAPI::toJsonValue(m_service_endpoint));
    }
    if (m_updated_timestamp_isSet) {
        obj.insert(QString("updatedTimestamp"), ::OpenAPI::toJsonValue(m_updated_timestamp));
    }
    return obj;
}

QString OAIProjectProperties::getAssessmentSolutionId() const {
    return m_assessment_solution_id;
}
void OAIProjectProperties::setAssessmentSolutionId(const QString &assessment_solution_id) {
    m_assessment_solution_id = assessment_solution_id;
    m_assessment_solution_id_isSet = true;
}

bool OAIProjectProperties::is_assessment_solution_id_Set() const{
    return m_assessment_solution_id_isSet;
}

bool OAIProjectProperties::is_assessment_solution_id_Valid() const{
    return m_assessment_solution_id_isValid;
}

QDateTime OAIProjectProperties::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIProjectProperties::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIProjectProperties::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIProjectProperties::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

QString OAIProjectProperties::getCustomerWorkspaceId() const {
    return m_customer_workspace_id;
}
void OAIProjectProperties::setCustomerWorkspaceId(const QString &customer_workspace_id) {
    m_customer_workspace_id = customer_workspace_id;
    m_customer_workspace_id_isSet = true;
}

bool OAIProjectProperties::is_customer_workspace_id_Set() const{
    return m_customer_workspace_id_isSet;
}

bool OAIProjectProperties::is_customer_workspace_id_Valid() const{
    return m_customer_workspace_id_isValid;
}

QString OAIProjectProperties::getCustomerWorkspaceLocation() const {
    return m_customer_workspace_location;
}
void OAIProjectProperties::setCustomerWorkspaceLocation(const QString &customer_workspace_location) {
    m_customer_workspace_location = customer_workspace_location;
    m_customer_workspace_location_isSet = true;
}

bool OAIProjectProperties::is_customer_workspace_location_Set() const{
    return m_customer_workspace_location_isSet;
}

bool OAIProjectProperties::is_customer_workspace_location_Valid() const{
    return m_customer_workspace_location_isValid;
}

QDateTime OAIProjectProperties::getLastAssessmentTimestamp() const {
    return m_last_assessment_timestamp;
}
void OAIProjectProperties::setLastAssessmentTimestamp(const QDateTime &last_assessment_timestamp) {
    m_last_assessment_timestamp = last_assessment_timestamp;
    m_last_assessment_timestamp_isSet = true;
}

bool OAIProjectProperties::is_last_assessment_timestamp_Set() const{
    return m_last_assessment_timestamp_isSet;
}

bool OAIProjectProperties::is_last_assessment_timestamp_Valid() const{
    return m_last_assessment_timestamp_isValid;
}

qint32 OAIProjectProperties::getNumberOfAssessments() const {
    return m_number_of_assessments;
}
void OAIProjectProperties::setNumberOfAssessments(const qint32 &number_of_assessments) {
    m_number_of_assessments = number_of_assessments;
    m_number_of_assessments_isSet = true;
}

bool OAIProjectProperties::is_number_of_assessments_Set() const{
    return m_number_of_assessments_isSet;
}

bool OAIProjectProperties::is_number_of_assessments_Valid() const{
    return m_number_of_assessments_isValid;
}

qint32 OAIProjectProperties::getNumberOfGroups() const {
    return m_number_of_groups;
}
void OAIProjectProperties::setNumberOfGroups(const qint32 &number_of_groups) {
    m_number_of_groups = number_of_groups;
    m_number_of_groups_isSet = true;
}

bool OAIProjectProperties::is_number_of_groups_Set() const{
    return m_number_of_groups_isSet;
}

bool OAIProjectProperties::is_number_of_groups_Valid() const{
    return m_number_of_groups_isValid;
}

qint32 OAIProjectProperties::getNumberOfMachines() const {
    return m_number_of_machines;
}
void OAIProjectProperties::setNumberOfMachines(const qint32 &number_of_machines) {
    m_number_of_machines = number_of_machines;
    m_number_of_machines_isSet = true;
}

bool OAIProjectProperties::is_number_of_machines_Set() const{
    return m_number_of_machines_isSet;
}

bool OAIProjectProperties::is_number_of_machines_Valid() const{
    return m_number_of_machines_isValid;
}

QString OAIProjectProperties::getProjectStatus() const {
    return m_project_status;
}
void OAIProjectProperties::setProjectStatus(const QString &project_status) {
    m_project_status = project_status;
    m_project_status_isSet = true;
}

bool OAIProjectProperties::is_project_status_Set() const{
    return m_project_status_isSet;
}

bool OAIProjectProperties::is_project_status_Valid() const{
    return m_project_status_isValid;
}

QString OAIProjectProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIProjectProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIProjectProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIProjectProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIProjectProperties::getServiceEndpoint() const {
    return m_service_endpoint;
}
void OAIProjectProperties::setServiceEndpoint(const QString &service_endpoint) {
    m_service_endpoint = service_endpoint;
    m_service_endpoint_isSet = true;
}

bool OAIProjectProperties::is_service_endpoint_Set() const{
    return m_service_endpoint_isSet;
}

bool OAIProjectProperties::is_service_endpoint_Valid() const{
    return m_service_endpoint_isValid;
}

QDateTime OAIProjectProperties::getUpdatedTimestamp() const {
    return m_updated_timestamp;
}
void OAIProjectProperties::setUpdatedTimestamp(const QDateTime &updated_timestamp) {
    m_updated_timestamp = updated_timestamp;
    m_updated_timestamp_isSet = true;
}

bool OAIProjectProperties::is_updated_timestamp_Set() const{
    return m_updated_timestamp_isSet;
}

bool OAIProjectProperties::is_updated_timestamp_Valid() const{
    return m_updated_timestamp_isValid;
}

bool OAIProjectProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assessment_solution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_workspace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_workspace_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_assessment_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_assessments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_groups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_machines_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
