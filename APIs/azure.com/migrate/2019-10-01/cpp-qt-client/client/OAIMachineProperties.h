/**
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMachineProperties.h
 *
 * Properties of a machine.
 */

#ifndef OAIMachineProperties_H
#define OAIMachineProperties_H

#include <QJsonObject>

#include "OAIDisk.h"
#include "OAINetworkAdapter.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDisk;
class OAINetworkAdapter;

class OAIMachineProperties : public OAIObject {
public:
    OAIMachineProperties();
    OAIMachineProperties(QString json);
    ~OAIMachineProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBootType() const;
    void setBootType(const QString &boot_type);
    bool is_boot_type_Set() const;
    bool is_boot_type_Valid() const;

    QDateTime getCreatedTimestamp() const;
    void setCreatedTimestamp(const QDateTime &created_timestamp);
    bool is_created_timestamp_Set() const;
    bool is_created_timestamp_Valid() const;

    QString getDatacenterManagementServerArmId() const;
    void setDatacenterManagementServerArmId(const QString &datacenter_management_server_arm_id);
    bool is_datacenter_management_server_arm_id_Set() const;
    bool is_datacenter_management_server_arm_id_Valid() const;

    QString getDatacenterManagementServerName() const;
    void setDatacenterManagementServerName(const QString &datacenter_management_server_name);
    bool is_datacenter_management_server_name_Set() const;
    bool is_datacenter_management_server_name_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDiscoveryMachineArmId() const;
    void setDiscoveryMachineArmId(const QString &discovery_machine_arm_id);
    bool is_discovery_machine_arm_id_Set() const;
    bool is_discovery_machine_arm_id_Valid() const;

    QMap<QString, OAIDisk> getDisks() const;
    void setDisks(const QMap<QString, OAIDisk> &disks);
    bool is_disks_Set() const;
    bool is_disks_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QList<QString> getGroups() const;
    void setGroups(const QList<QString> &groups);
    bool is_groups_Set() const;
    bool is_groups_Valid() const;

    double getMegabytesOfMemory() const;
    void setMegabytesOfMemory(const double &megabytes_of_memory);
    bool is_megabytes_of_memory_Set() const;
    bool is_megabytes_of_memory_Valid() const;

    QMap<QString, OAINetworkAdapter> getNetworkAdapters() const;
    void setNetworkAdapters(const QMap<QString, OAINetworkAdapter> &network_adapters);
    bool is_network_adapters_Set() const;
    bool is_network_adapters_Valid() const;

    qint32 getNumberOfCores() const;
    void setNumberOfCores(const qint32 &number_of_cores);
    bool is_number_of_cores_Set() const;
    bool is_number_of_cores_Valid() const;

    QString getOperatingSystemName() const;
    void setOperatingSystemName(const QString &operating_system_name);
    bool is_operating_system_name_Set() const;
    bool is_operating_system_name_Valid() const;

    QString getOperatingSystemType() const;
    void setOperatingSystemType(const QString &operating_system_type);
    bool is_operating_system_type_Set() const;
    bool is_operating_system_type_Valid() const;

    QString getOperatingSystemVersion() const;
    void setOperatingSystemVersion(const QString &operating_system_version);
    bool is_operating_system_version_Set() const;
    bool is_operating_system_version_Valid() const;

    QDateTime getUpdatedTimestamp() const;
    void setUpdatedTimestamp(const QDateTime &updated_timestamp);
    bool is_updated_timestamp_Set() const;
    bool is_updated_timestamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_boot_type;
    bool m_boot_type_isSet;
    bool m_boot_type_isValid;

    QDateTime m_created_timestamp;
    bool m_created_timestamp_isSet;
    bool m_created_timestamp_isValid;

    QString m_datacenter_management_server_arm_id;
    bool m_datacenter_management_server_arm_id_isSet;
    bool m_datacenter_management_server_arm_id_isValid;

    QString m_datacenter_management_server_name;
    bool m_datacenter_management_server_name_isSet;
    bool m_datacenter_management_server_name_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_discovery_machine_arm_id;
    bool m_discovery_machine_arm_id_isSet;
    bool m_discovery_machine_arm_id_isValid;

    QMap<QString, OAIDisk> m_disks;
    bool m_disks_isSet;
    bool m_disks_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QList<QString> m_groups;
    bool m_groups_isSet;
    bool m_groups_isValid;

    double m_megabytes_of_memory;
    bool m_megabytes_of_memory_isSet;
    bool m_megabytes_of_memory_isValid;

    QMap<QString, OAINetworkAdapter> m_network_adapters;
    bool m_network_adapters_isSet;
    bool m_network_adapters_isValid;

    qint32 m_number_of_cores;
    bool m_number_of_cores_isSet;
    bool m_number_of_cores_isValid;

    QString m_operating_system_name;
    bool m_operating_system_name_isSet;
    bool m_operating_system_name_isValid;

    QString m_operating_system_type;
    bool m_operating_system_type_isSet;
    bool m_operating_system_type_isValid;

    QString m_operating_system_version;
    bool m_operating_system_version_isSet;
    bool m_operating_system_version_isValid;

    QDateTime m_updated_timestamp;
    bool m_updated_timestamp_isSet;
    bool m_updated_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMachineProperties)

#endif // OAIMachineProperties_H
