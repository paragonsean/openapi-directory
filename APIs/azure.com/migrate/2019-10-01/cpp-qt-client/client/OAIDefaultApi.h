/**
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssessedMachine.h"
#include "OAIAssessedMachineResultList.h"
#include "OAIAssessment.h"
#include "OAIAssessmentOptions.h"
#include "OAIAssessmentOptionsResultList.h"
#include "OAIAssessmentResultList.h"
#include "OAICloudError.h"
#include "OAIDownloadUrl.h"
#include "OAIGroup.h"
#include "OAIGroupResultList.h"
#include "OAIHyperVCollector.h"
#include "OAIHyperVCollectorList.h"
#include "OAIMachine.h"
#include "OAIMachineResultList.h"
#include "OAIOperationResultList.h"
#include "OAIProject.h"
#include "OAIProjectResultList.h"
#include "OAIUpdateGroupBody.h"
#include "OAIVMwareCollector.h"
#include "OAIVMwareCollectorList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  assessment_name QString [required]
    * @param[in]  assessed_machine_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void assessedMachinesGet(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &group_name, const QString &assessment_name, const QString &assessed_machine_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  assessment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void assessedMachinesListByAssessment(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &group_name, const QString &assessment_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  assessment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  assessment OAIAssessment [optional]
    */
    virtual void assessmentsCreate(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &group_name, const QString &assessment_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAssessment> &assessment = ::OpenAPI::OptionalParam<OAIAssessment>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  assessment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void assessmentsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &group_name, const QString &assessment_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  assessment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void assessmentsGet(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &group_name, const QString &assessment_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  assessment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void assessmentsGetReportDownloadUrl(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &group_name, const QString &assessment_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void assessmentsListByGroup(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void assessmentsListByProject(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  group OAIGroup [optional]
    */
    virtual void groupsCreate(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGroup> &group = ::OpenAPI::OptionalParam<OAIGroup>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void groupsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void groupsGet(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void groupsListByProject(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  group_update_properties OAIUpdateGroupBody [optional]
    */
    virtual void groupsUpdateMachines(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateGroupBody> &group_update_properties = ::OpenAPI::OptionalParam<OAIUpdateGroupBody>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  hyper_v_collector_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  collector_body OAIHyperVCollector [optional]
    */
    virtual void hyperVCollectorsCreate(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &hyper_v_collector_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIHyperVCollector> &collector_body = ::OpenAPI::OptionalParam<OAIHyperVCollector>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  hyper_v_collector_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void hyperVCollectorsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &hyper_v_collector_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  hyper_v_collector_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void hyperVCollectorsGet(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &hyper_v_collector_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void hyperVCollectorsListByProject(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  machine_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void machinesGet(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &machine_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void machinesListByProject(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());


    virtual void operationsList();

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  assessment_options_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void projectAssessmentOptions(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &assessment_options_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void projectAssessmentOptionsList(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  project OAIProject [optional]
    */
    virtual void projectsCreate(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIProject> &project = ::OpenAPI::OptionalParam<OAIProject>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void projectsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void projectsGet(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void projectsList(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void projectsListBySubscription(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  project OAIProject [optional]
    */
    virtual void projectsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIProject> &project = ::OpenAPI::OptionalParam<OAIProject>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  vm_ware_collector_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    * @param[in]  collector_body OAIVMwareCollector [optional]
    */
    virtual void vMwareCollectorsCreate(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &vm_ware_collector_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIVMwareCollector> &collector_body = ::OpenAPI::OptionalParam<OAIVMwareCollector>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  vm_ware_collector_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void vMwareCollectorsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &vm_ware_collector_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  vm_ware_collector_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void vMwareCollectorsGet(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &vm_ware_collector_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  accept_language QString [optional]
    */
    virtual void vMwareCollectorsListByProject(const QString &subscription_id, const QString &resource_group_name, const QString &project_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &accept_language = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void assessedMachinesGetCallback(OAIHttpRequestWorker *worker);
    void assessedMachinesListByAssessmentCallback(OAIHttpRequestWorker *worker);
    void assessmentsCreateCallback(OAIHttpRequestWorker *worker);
    void assessmentsDeleteCallback(OAIHttpRequestWorker *worker);
    void assessmentsGetCallback(OAIHttpRequestWorker *worker);
    void assessmentsGetReportDownloadUrlCallback(OAIHttpRequestWorker *worker);
    void assessmentsListByGroupCallback(OAIHttpRequestWorker *worker);
    void assessmentsListByProjectCallback(OAIHttpRequestWorker *worker);
    void groupsCreateCallback(OAIHttpRequestWorker *worker);
    void groupsDeleteCallback(OAIHttpRequestWorker *worker);
    void groupsGetCallback(OAIHttpRequestWorker *worker);
    void groupsListByProjectCallback(OAIHttpRequestWorker *worker);
    void groupsUpdateMachinesCallback(OAIHttpRequestWorker *worker);
    void hyperVCollectorsCreateCallback(OAIHttpRequestWorker *worker);
    void hyperVCollectorsDeleteCallback(OAIHttpRequestWorker *worker);
    void hyperVCollectorsGetCallback(OAIHttpRequestWorker *worker);
    void hyperVCollectorsListByProjectCallback(OAIHttpRequestWorker *worker);
    void machinesGetCallback(OAIHttpRequestWorker *worker);
    void machinesListByProjectCallback(OAIHttpRequestWorker *worker);
    void operationsListCallback(OAIHttpRequestWorker *worker);
    void projectAssessmentOptionsCallback(OAIHttpRequestWorker *worker);
    void projectAssessmentOptionsListCallback(OAIHttpRequestWorker *worker);
    void projectsCreateCallback(OAIHttpRequestWorker *worker);
    void projectsDeleteCallback(OAIHttpRequestWorker *worker);
    void projectsGetCallback(OAIHttpRequestWorker *worker);
    void projectsListCallback(OAIHttpRequestWorker *worker);
    void projectsListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void projectsUpdateCallback(OAIHttpRequestWorker *worker);
    void vMwareCollectorsCreateCallback(OAIHttpRequestWorker *worker);
    void vMwareCollectorsDeleteCallback(OAIHttpRequestWorker *worker);
    void vMwareCollectorsGetCallback(OAIHttpRequestWorker *worker);
    void vMwareCollectorsListByProjectCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void assessedMachinesGetSignal(OAIAssessedMachine summary);
    void assessedMachinesListByAssessmentSignal(OAIAssessedMachineResultList summary);
    void assessmentsCreateSignal(OAIAssessment summary);
    void assessmentsDeleteSignal();
    void assessmentsGetSignal(OAIAssessment summary);
    void assessmentsGetReportDownloadUrlSignal(OAIDownloadUrl summary);
    void assessmentsListByGroupSignal(OAIAssessmentResultList summary);
    void assessmentsListByProjectSignal(OAIAssessmentResultList summary);
    void groupsCreateSignal(OAIGroup summary);
    void groupsDeleteSignal();
    void groupsGetSignal(OAIGroup summary);
    void groupsListByProjectSignal(OAIGroupResultList summary);
    void groupsUpdateMachinesSignal(OAIGroup summary);
    void hyperVCollectorsCreateSignal(OAIHyperVCollector summary);
    void hyperVCollectorsDeleteSignal();
    void hyperVCollectorsGetSignal(OAIHyperVCollector summary);
    void hyperVCollectorsListByProjectSignal(OAIHyperVCollectorList summary);
    void machinesGetSignal(OAIMachine summary);
    void machinesListByProjectSignal(OAIMachineResultList summary);
    void operationsListSignal(OAIOperationResultList summary);
    void projectAssessmentOptionsSignal(OAIAssessmentOptions summary);
    void projectAssessmentOptionsListSignal(OAIAssessmentOptionsResultList summary);
    void projectsCreateSignal(OAIProject summary);
    void projectsDeleteSignal();
    void projectsGetSignal(OAIProject summary);
    void projectsListSignal(OAIProjectResultList summary);
    void projectsListBySubscriptionSignal(OAIProjectResultList summary);
    void projectsUpdateSignal(OAIProject summary);
    void vMwareCollectorsCreateSignal(OAIVMwareCollector summary);
    void vMwareCollectorsDeleteSignal();
    void vMwareCollectorsGetSignal(OAIVMwareCollector summary);
    void vMwareCollectorsListByProjectSignal(OAIVMwareCollectorList summary);


    void assessedMachinesGetSignalFull(OAIHttpRequestWorker *worker, OAIAssessedMachine summary);
    void assessedMachinesListByAssessmentSignalFull(OAIHttpRequestWorker *worker, OAIAssessedMachineResultList summary);
    void assessmentsCreateSignalFull(OAIHttpRequestWorker *worker, OAIAssessment summary);
    void assessmentsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void assessmentsGetSignalFull(OAIHttpRequestWorker *worker, OAIAssessment summary);
    void assessmentsGetReportDownloadUrlSignalFull(OAIHttpRequestWorker *worker, OAIDownloadUrl summary);
    void assessmentsListByGroupSignalFull(OAIHttpRequestWorker *worker, OAIAssessmentResultList summary);
    void assessmentsListByProjectSignalFull(OAIHttpRequestWorker *worker, OAIAssessmentResultList summary);
    void groupsCreateSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void groupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void groupsGetSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void groupsListByProjectSignalFull(OAIHttpRequestWorker *worker, OAIGroupResultList summary);
    void groupsUpdateMachinesSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void hyperVCollectorsCreateSignalFull(OAIHttpRequestWorker *worker, OAIHyperVCollector summary);
    void hyperVCollectorsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void hyperVCollectorsGetSignalFull(OAIHttpRequestWorker *worker, OAIHyperVCollector summary);
    void hyperVCollectorsListByProjectSignalFull(OAIHttpRequestWorker *worker, OAIHyperVCollectorList summary);
    void machinesGetSignalFull(OAIHttpRequestWorker *worker, OAIMachine summary);
    void machinesListByProjectSignalFull(OAIHttpRequestWorker *worker, OAIMachineResultList summary);
    void operationsListSignalFull(OAIHttpRequestWorker *worker, OAIOperationResultList summary);
    void projectAssessmentOptionsSignalFull(OAIHttpRequestWorker *worker, OAIAssessmentOptions summary);
    void projectAssessmentOptionsListSignalFull(OAIHttpRequestWorker *worker, OAIAssessmentOptionsResultList summary);
    void projectsCreateSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void projectsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void projectsGetSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void projectsListSignalFull(OAIHttpRequestWorker *worker, OAIProjectResultList summary);
    void projectsListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIProjectResultList summary);
    void projectsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void vMwareCollectorsCreateSignalFull(OAIHttpRequestWorker *worker, OAIVMwareCollector summary);
    void vMwareCollectorsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void vMwareCollectorsGetSignalFull(OAIHttpRequestWorker *worker, OAIVMwareCollector summary);
    void vMwareCollectorsListByProjectSignalFull(OAIHttpRequestWorker *worker, OAIVMwareCollectorList summary);

    Q_DECL_DEPRECATED_X("Use assessedMachinesGetSignalError() instead")
    void assessedMachinesGetSignalE(OAIAssessedMachine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assessedMachinesGetSignalError(OAIAssessedMachine summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessedMachinesListByAssessmentSignalError() instead")
    void assessedMachinesListByAssessmentSignalE(OAIAssessedMachineResultList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assessedMachinesListByAssessmentSignalError(OAIAssessedMachineResultList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessmentsCreateSignalError() instead")
    void assessmentsCreateSignalE(OAIAssessment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsCreateSignalError(OAIAssessment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessmentsDeleteSignalError() instead")
    void assessmentsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessmentsGetSignalError() instead")
    void assessmentsGetSignalE(OAIAssessment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsGetSignalError(OAIAssessment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessmentsGetReportDownloadUrlSignalError() instead")
    void assessmentsGetReportDownloadUrlSignalE(OAIDownloadUrl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsGetReportDownloadUrlSignalError(OAIDownloadUrl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessmentsListByGroupSignalError() instead")
    void assessmentsListByGroupSignalE(OAIAssessmentResultList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsListByGroupSignalError(OAIAssessmentResultList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessmentsListByProjectSignalError() instead")
    void assessmentsListByProjectSignalE(OAIAssessmentResultList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsListByProjectSignalError(OAIAssessmentResultList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsCreateSignalError() instead")
    void groupsCreateSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsCreateSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsDeleteSignalError() instead")
    void groupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void groupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetSignalError() instead")
    void groupsGetSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsListByProjectSignalError() instead")
    void groupsListByProjectSignalE(OAIGroupResultList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsListByProjectSignalError(OAIGroupResultList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsUpdateMachinesSignalError() instead")
    void groupsUpdateMachinesSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsUpdateMachinesSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hyperVCollectorsCreateSignalError() instead")
    void hyperVCollectorsCreateSignalE(OAIHyperVCollector summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hyperVCollectorsCreateSignalError(OAIHyperVCollector summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hyperVCollectorsDeleteSignalError() instead")
    void hyperVCollectorsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void hyperVCollectorsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hyperVCollectorsGetSignalError() instead")
    void hyperVCollectorsGetSignalE(OAIHyperVCollector summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hyperVCollectorsGetSignalError(OAIHyperVCollector summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hyperVCollectorsListByProjectSignalError() instead")
    void hyperVCollectorsListByProjectSignalE(OAIHyperVCollectorList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hyperVCollectorsListByProjectSignalError(OAIHyperVCollectorList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machinesGetSignalError() instead")
    void machinesGetSignalE(OAIMachine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void machinesGetSignalError(OAIMachine summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machinesListByProjectSignalError() instead")
    void machinesListByProjectSignalE(OAIMachineResultList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void machinesListByProjectSignalError(OAIMachineResultList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsListSignalError() instead")
    void operationsListSignalE(OAIOperationResultList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsListSignalError(OAIOperationResultList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectAssessmentOptionsSignalError() instead")
    void projectAssessmentOptionsSignalE(OAIAssessmentOptions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectAssessmentOptionsSignalError(OAIAssessmentOptions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectAssessmentOptionsListSignalError() instead")
    void projectAssessmentOptionsListSignalE(OAIAssessmentOptionsResultList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectAssessmentOptionsListSignalError(OAIAssessmentOptionsResultList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsCreateSignalError() instead")
    void projectsCreateSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsCreateSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsDeleteSignalError() instead")
    void projectsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsGetSignalError() instead")
    void projectsGetSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsGetSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsListSignalError() instead")
    void projectsListSignalE(OAIProjectResultList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsListSignalError(OAIProjectResultList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsListBySubscriptionSignalError() instead")
    void projectsListBySubscriptionSignalE(OAIProjectResultList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsListBySubscriptionSignalError(OAIProjectResultList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsUpdateSignalError() instead")
    void projectsUpdateSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsUpdateSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vMwareCollectorsCreateSignalError() instead")
    void vMwareCollectorsCreateSignalE(OAIVMwareCollector summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vMwareCollectorsCreateSignalError(OAIVMwareCollector summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vMwareCollectorsDeleteSignalError() instead")
    void vMwareCollectorsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void vMwareCollectorsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vMwareCollectorsGetSignalError() instead")
    void vMwareCollectorsGetSignalE(OAIVMwareCollector summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vMwareCollectorsGetSignalError(OAIVMwareCollector summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vMwareCollectorsListByProjectSignalError() instead")
    void vMwareCollectorsListByProjectSignalE(OAIVMwareCollectorList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void vMwareCollectorsListByProjectSignalError(OAIVMwareCollectorList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use assessedMachinesGetSignalErrorFull() instead")
    void assessedMachinesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assessedMachinesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessedMachinesListByAssessmentSignalErrorFull() instead")
    void assessedMachinesListByAssessmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assessedMachinesListByAssessmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessmentsCreateSignalErrorFull() instead")
    void assessmentsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessmentsDeleteSignalErrorFull() instead")
    void assessmentsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessmentsGetSignalErrorFull() instead")
    void assessmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessmentsGetReportDownloadUrlSignalErrorFull() instead")
    void assessmentsGetReportDownloadUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsGetReportDownloadUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessmentsListByGroupSignalErrorFull() instead")
    void assessmentsListByGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsListByGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assessmentsListByProjectSignalErrorFull() instead")
    void assessmentsListByProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assessmentsListByProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsCreateSignalErrorFull() instead")
    void groupsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsDeleteSignalErrorFull() instead")
    void groupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsGetSignalErrorFull() instead")
    void groupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsListByProjectSignalErrorFull() instead")
    void groupsListByProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsListByProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use groupsUpdateMachinesSignalErrorFull() instead")
    void groupsUpdateMachinesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void groupsUpdateMachinesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hyperVCollectorsCreateSignalErrorFull() instead")
    void hyperVCollectorsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hyperVCollectorsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hyperVCollectorsDeleteSignalErrorFull() instead")
    void hyperVCollectorsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hyperVCollectorsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hyperVCollectorsGetSignalErrorFull() instead")
    void hyperVCollectorsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hyperVCollectorsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hyperVCollectorsListByProjectSignalErrorFull() instead")
    void hyperVCollectorsListByProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hyperVCollectorsListByProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machinesGetSignalErrorFull() instead")
    void machinesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void machinesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use machinesListByProjectSignalErrorFull() instead")
    void machinesListByProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void machinesListByProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsListSignalErrorFull() instead")
    void operationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectAssessmentOptionsSignalErrorFull() instead")
    void projectAssessmentOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectAssessmentOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectAssessmentOptionsListSignalErrorFull() instead")
    void projectAssessmentOptionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectAssessmentOptionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsCreateSignalErrorFull() instead")
    void projectsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsDeleteSignalErrorFull() instead")
    void projectsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsGetSignalErrorFull() instead")
    void projectsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsListSignalErrorFull() instead")
    void projectsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsListBySubscriptionSignalErrorFull() instead")
    void projectsListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsUpdateSignalErrorFull() instead")
    void projectsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vMwareCollectorsCreateSignalErrorFull() instead")
    void vMwareCollectorsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vMwareCollectorsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vMwareCollectorsDeleteSignalErrorFull() instead")
    void vMwareCollectorsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vMwareCollectorsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vMwareCollectorsGetSignalErrorFull() instead")
    void vMwareCollectorsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vMwareCollectorsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use vMwareCollectorsListByProjectSignalErrorFull() instead")
    void vMwareCollectorsListByProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void vMwareCollectorsListByProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
