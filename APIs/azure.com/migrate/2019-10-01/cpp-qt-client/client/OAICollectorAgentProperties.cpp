/**
 * Azure Migrate V2
 * Assess your workloads for Azure.
 *
 * The version of the OpenAPI document: 2019-10-01
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollectorAgentProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollectorAgentProperties::OAICollectorAgentProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollectorAgentProperties::OAICollectorAgentProperties() {
    this->initializeModel();
}

OAICollectorAgentProperties::~OAICollectorAgentProperties() {}

void OAICollectorAgentProperties::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_heartbeat_utc_isSet = false;
    m_last_heartbeat_utc_isValid = false;

    m_spn_details_isSet = false;
    m_spn_details_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAICollectorAgentProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollectorAgentProperties::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_heartbeat_utc_isValid = ::OpenAPI::fromJsonValue(m_last_heartbeat_utc, json[QString("lastHeartbeatUtc")]);
    m_last_heartbeat_utc_isSet = !json[QString("lastHeartbeatUtc")].isNull() && m_last_heartbeat_utc_isValid;

    m_spn_details_isValid = ::OpenAPI::fromJsonValue(m_spn_details, json[QString("spnDetails")]);
    m_spn_details_isSet = !json[QString("spnDetails")].isNull() && m_spn_details_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAICollectorAgentProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollectorAgentProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_heartbeat_utc_isSet) {
        obj.insert(QString("lastHeartbeatUtc"), ::OpenAPI::toJsonValue(m_last_heartbeat_utc));
    }
    if (m_spn_details.isSet()) {
        obj.insert(QString("spnDetails"), ::OpenAPI::toJsonValue(m_spn_details));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAICollectorAgentProperties::getId() const {
    return m_id;
}
void OAICollectorAgentProperties::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICollectorAgentProperties::is_id_Set() const{
    return m_id_isSet;
}

bool OAICollectorAgentProperties::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAICollectorAgentProperties::getLastHeartbeatUtc() const {
    return m_last_heartbeat_utc;
}
void OAICollectorAgentProperties::setLastHeartbeatUtc(const QDateTime &last_heartbeat_utc) {
    m_last_heartbeat_utc = last_heartbeat_utc;
    m_last_heartbeat_utc_isSet = true;
}

bool OAICollectorAgentProperties::is_last_heartbeat_utc_Set() const{
    return m_last_heartbeat_utc_isSet;
}

bool OAICollectorAgentProperties::is_last_heartbeat_utc_Valid() const{
    return m_last_heartbeat_utc_isValid;
}

OAICollectorBodyAgentSpnProperties OAICollectorAgentProperties::getSpnDetails() const {
    return m_spn_details;
}
void OAICollectorAgentProperties::setSpnDetails(const OAICollectorBodyAgentSpnProperties &spn_details) {
    m_spn_details = spn_details;
    m_spn_details_isSet = true;
}

bool OAICollectorAgentProperties::is_spn_details_Set() const{
    return m_spn_details_isSet;
}

bool OAICollectorAgentProperties::is_spn_details_Valid() const{
    return m_spn_details_isValid;
}

QString OAICollectorAgentProperties::getVersion() const {
    return m_version;
}
void OAICollectorAgentProperties::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICollectorAgentProperties::is_version_Set() const{
    return m_version_isSet;
}

bool OAICollectorAgentProperties::is_version_Valid() const{
    return m_version_isValid;
}

bool OAICollectorAgentProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_heartbeat_utc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spn_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollectorAgentProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
