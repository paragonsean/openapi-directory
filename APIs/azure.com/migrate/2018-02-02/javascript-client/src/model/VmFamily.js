/**
 * Azure Migrate
 * Move your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-02-02
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VmFamily model module.
 * @module model/VmFamily
 * @version 2018-02-02
 */
class VmFamily {
    /**
     * Constructs a new <code>VmFamily</code>.
     * VM family name, the list of targeted azure locations and the category of the family.
     * @alias module:model/VmFamily
     */
    constructor() { 
        
        VmFamily.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VmFamily</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VmFamily} obj Optional instance to populate.
     * @return {module:model/VmFamily} The populated <code>VmFamily</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VmFamily();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], ['String']);
            }
            if (data.hasOwnProperty('familyName')) {
                obj['familyName'] = ApiClient.convertToType(data['familyName'], 'String');
            }
            if (data.hasOwnProperty('targetLocations')) {
                obj['targetLocations'] = ApiClient.convertToType(data['targetLocations'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VmFamily</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VmFamily</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['category'])) {
            throw new Error("Expected the field `category` to be an array in the JSON data but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['familyName'] && !(typeof data['familyName'] === 'string' || data['familyName'] instanceof String)) {
            throw new Error("Expected the field `familyName` to be a primitive type in the JSON string but got " + data['familyName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['targetLocations'])) {
            throw new Error("Expected the field `targetLocations` to be an array in the JSON data but got " + data['targetLocations']);
        }

        return true;
    }


}



/**
 * Category of the VM family.
 * @member {Array.<String>} category
 */
VmFamily.prototype['category'] = undefined;

/**
 * Name of the VM family.
 * @member {String} familyName
 */
VmFamily.prototype['familyName'] = undefined;

/**
 * List of Azure regions.
 * @member {Array.<String>} targetLocations
 */
VmFamily.prototype['targetLocations'] = undefined;






export default VmFamily;

