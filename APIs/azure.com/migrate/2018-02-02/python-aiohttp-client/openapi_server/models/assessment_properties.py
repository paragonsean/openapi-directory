# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssessmentProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, azure_hybrid_use_benefit: str=None, azure_location: str=None, azure_offer_code: str=None, azure_pricing_tier: str=None, azure_storage_redundancy: str=None, confidence_rating_in_percentage: float=None, created_timestamp: datetime=None, currency: str=None, discount_percentage: float=None, monthly_bandwidth_cost: float=None, monthly_compute_cost: float=None, monthly_storage_cost: float=None, number_of_machines: int=None, percentile: str=None, prices_timestamp: datetime=None, scaling_factor: float=None, sizing_criterion: str=None, stage: str=None, status: str=None, time_range: str=None, updated_timestamp: datetime=None):
        """AssessmentProperties - a model defined in OpenAPI

        :param azure_hybrid_use_benefit: The azure_hybrid_use_benefit of this AssessmentProperties.
        :param azure_location: The azure_location of this AssessmentProperties.
        :param azure_offer_code: The azure_offer_code of this AssessmentProperties.
        :param azure_pricing_tier: The azure_pricing_tier of this AssessmentProperties.
        :param azure_storage_redundancy: The azure_storage_redundancy of this AssessmentProperties.
        :param confidence_rating_in_percentage: The confidence_rating_in_percentage of this AssessmentProperties.
        :param created_timestamp: The created_timestamp of this AssessmentProperties.
        :param currency: The currency of this AssessmentProperties.
        :param discount_percentage: The discount_percentage of this AssessmentProperties.
        :param monthly_bandwidth_cost: The monthly_bandwidth_cost of this AssessmentProperties.
        :param monthly_compute_cost: The monthly_compute_cost of this AssessmentProperties.
        :param monthly_storage_cost: The monthly_storage_cost of this AssessmentProperties.
        :param number_of_machines: The number_of_machines of this AssessmentProperties.
        :param percentile: The percentile of this AssessmentProperties.
        :param prices_timestamp: The prices_timestamp of this AssessmentProperties.
        :param scaling_factor: The scaling_factor of this AssessmentProperties.
        :param sizing_criterion: The sizing_criterion of this AssessmentProperties.
        :param stage: The stage of this AssessmentProperties.
        :param status: The status of this AssessmentProperties.
        :param time_range: The time_range of this AssessmentProperties.
        :param updated_timestamp: The updated_timestamp of this AssessmentProperties.
        """
        self.openapi_types = {
            'azure_hybrid_use_benefit': str,
            'azure_location': str,
            'azure_offer_code': str,
            'azure_pricing_tier': str,
            'azure_storage_redundancy': str,
            'confidence_rating_in_percentage': float,
            'created_timestamp': datetime,
            'currency': str,
            'discount_percentage': float,
            'monthly_bandwidth_cost': float,
            'monthly_compute_cost': float,
            'monthly_storage_cost': float,
            'number_of_machines': int,
            'percentile': str,
            'prices_timestamp': datetime,
            'scaling_factor': float,
            'sizing_criterion': str,
            'stage': str,
            'status': str,
            'time_range': str,
            'updated_timestamp': datetime
        }

        self.attribute_map = {
            'azure_hybrid_use_benefit': 'azureHybridUseBenefit',
            'azure_location': 'azureLocation',
            'azure_offer_code': 'azureOfferCode',
            'azure_pricing_tier': 'azurePricingTier',
            'azure_storage_redundancy': 'azureStorageRedundancy',
            'confidence_rating_in_percentage': 'confidenceRatingInPercentage',
            'created_timestamp': 'createdTimestamp',
            'currency': 'currency',
            'discount_percentage': 'discountPercentage',
            'monthly_bandwidth_cost': 'monthlyBandwidthCost',
            'monthly_compute_cost': 'monthlyComputeCost',
            'monthly_storage_cost': 'monthlyStorageCost',
            'number_of_machines': 'numberOfMachines',
            'percentile': 'percentile',
            'prices_timestamp': 'pricesTimestamp',
            'scaling_factor': 'scalingFactor',
            'sizing_criterion': 'sizingCriterion',
            'stage': 'stage',
            'status': 'status',
            'time_range': 'timeRange',
            'updated_timestamp': 'updatedTimestamp'
        }

        self._azure_hybrid_use_benefit = azure_hybrid_use_benefit
        self._azure_location = azure_location
        self._azure_offer_code = azure_offer_code
        self._azure_pricing_tier = azure_pricing_tier
        self._azure_storage_redundancy = azure_storage_redundancy
        self._confidence_rating_in_percentage = confidence_rating_in_percentage
        self._created_timestamp = created_timestamp
        self._currency = currency
        self._discount_percentage = discount_percentage
        self._monthly_bandwidth_cost = monthly_bandwidth_cost
        self._monthly_compute_cost = monthly_compute_cost
        self._monthly_storage_cost = monthly_storage_cost
        self._number_of_machines = number_of_machines
        self._percentile = percentile
        self._prices_timestamp = prices_timestamp
        self._scaling_factor = scaling_factor
        self._sizing_criterion = sizing_criterion
        self._stage = stage
        self._status = status
        self._time_range = time_range
        self._updated_timestamp = updated_timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssessmentProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssessmentProperties of this AssessmentProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def azure_hybrid_use_benefit(self):
        """Gets the azure_hybrid_use_benefit of this AssessmentProperties.

        AHUB discount on windows virtual machines.

        :return: The azure_hybrid_use_benefit of this AssessmentProperties.
        :rtype: str
        """
        return self._azure_hybrid_use_benefit

    @azure_hybrid_use_benefit.setter
    def azure_hybrid_use_benefit(self, azure_hybrid_use_benefit):
        """Sets the azure_hybrid_use_benefit of this AssessmentProperties.

        AHUB discount on windows virtual machines.

        :param azure_hybrid_use_benefit: The azure_hybrid_use_benefit of this AssessmentProperties.
        :type azure_hybrid_use_benefit: str
        """
        allowed_values = ["Unknown", "Yes", "No"]  # noqa: E501
        if azure_hybrid_use_benefit not in allowed_values:
            raise ValueError(
                "Invalid value for `azure_hybrid_use_benefit` ({0}), must be one of {1}"
                .format(azure_hybrid_use_benefit, allowed_values)
            )

        self._azure_hybrid_use_benefit = azure_hybrid_use_benefit

    @property
    def azure_location(self):
        """Gets the azure_location of this AssessmentProperties.

        Target Azure location for which the machines should be assessed. These enums are the same as used by Compute API.

        :return: The azure_location of this AssessmentProperties.
        :rtype: str
        """
        return self._azure_location

    @azure_location.setter
    def azure_location(self, azure_location):
        """Sets the azure_location of this AssessmentProperties.

        Target Azure location for which the machines should be assessed. These enums are the same as used by Compute API.

        :param azure_location: The azure_location of this AssessmentProperties.
        :type azure_location: str
        """
        allowed_values = ["Unknown", "EastAsia", "SoutheastAsia", "AustraliaEast", "AustraliaSoutheast", "BrazilSouth", "CanadaCentral", "CanadaEast", "WestEurope", "NorthEurope", "CentralIndia", "SouthIndia", "WestIndia", "JapanEast", "JapanWest", "KoreaCentral", "KoreaSouth", "UkWest", "UkSouth", "NorthCentralUs", "EastUs", "WestUs2", "SouthCentralUs", "CentralUs", "EastUs2", "WestUs", "WestCentralUs", "GermanyCentral", "GermanyNortheast", "ChinaNorth", "ChinaEast"]  # noqa: E501
        if azure_location not in allowed_values:
            raise ValueError(
                "Invalid value for `azure_location` ({0}), must be one of {1}"
                .format(azure_location, allowed_values)
            )

        self._azure_location = azure_location

    @property
    def azure_offer_code(self):
        """Gets the azure_offer_code of this AssessmentProperties.

        Offer code according to which cost estimation is done.

        :return: The azure_offer_code of this AssessmentProperties.
        :rtype: str
        """
        return self._azure_offer_code

    @azure_offer_code.setter
    def azure_offer_code(self, azure_offer_code):
        """Sets the azure_offer_code of this AssessmentProperties.

        Offer code according to which cost estimation is done.

        :param azure_offer_code: The azure_offer_code of this AssessmentProperties.
        :type azure_offer_code: str
        """
        allowed_values = ["Unknown", "MSAZR0003P", "MSAZR0044P", "MSAZR0059P", "MSAZR0060P", "MSAZR0062P", "MSAZR0063P", "MSAZR0064P", "MSAZR0029P", "MSAZR0022P", "MSAZR0023P", "MSAZR0148P", "MSAZR0025P", "MSAZR0036P", "MSAZR0120P", "MSAZR0121P", "MSAZR0122P", "MSAZR0123P", "MSAZR0124P", "MSAZR0125P", "MSAZR0126P", "MSAZR0127P", "MSAZR0128P", "MSAZR0129P", "MSAZR0130P", "MSAZR0111P", "MSAZR0144P", "MSAZR0149P", "MSMCAZR0044P", "MSMCAZR0059P", "MSMCAZR0060P", "MSMCAZR0063P", "MSMCAZR0120P", "MSMCAZR0121P", "MSMCAZR0125P", "MSMCAZR0128P", "MSAZRDE0003P", "MSAZRDE0044P"]  # noqa: E501
        if azure_offer_code not in allowed_values:
            raise ValueError(
                "Invalid value for `azure_offer_code` ({0}), must be one of {1}"
                .format(azure_offer_code, allowed_values)
            )

        self._azure_offer_code = azure_offer_code

    @property
    def azure_pricing_tier(self):
        """Gets the azure_pricing_tier of this AssessmentProperties.

        Pricing tier for Size evaluation.

        :return: The azure_pricing_tier of this AssessmentProperties.
        :rtype: str
        """
        return self._azure_pricing_tier

    @azure_pricing_tier.setter
    def azure_pricing_tier(self, azure_pricing_tier):
        """Sets the azure_pricing_tier of this AssessmentProperties.

        Pricing tier for Size evaluation.

        :param azure_pricing_tier: The azure_pricing_tier of this AssessmentProperties.
        :type azure_pricing_tier: str
        """
        allowed_values = ["Standard", "Basic"]  # noqa: E501
        if azure_pricing_tier not in allowed_values:
            raise ValueError(
                "Invalid value for `azure_pricing_tier` ({0}), must be one of {1}"
                .format(azure_pricing_tier, allowed_values)
            )

        self._azure_pricing_tier = azure_pricing_tier

    @property
    def azure_storage_redundancy(self):
        """Gets the azure_storage_redundancy of this AssessmentProperties.

        Storage Redundancy type offered by Azure.

        :return: The azure_storage_redundancy of this AssessmentProperties.
        :rtype: str
        """
        return self._azure_storage_redundancy

    @azure_storage_redundancy.setter
    def azure_storage_redundancy(self, azure_storage_redundancy):
        """Sets the azure_storage_redundancy of this AssessmentProperties.

        Storage Redundancy type offered by Azure.

        :param azure_storage_redundancy: The azure_storage_redundancy of this AssessmentProperties.
        :type azure_storage_redundancy: str
        """
        allowed_values = ["Unknown", "LocallyRedundant", "ZoneRedundant", "GeoRedundant", "ReadAccessGeoRedundant"]  # noqa: E501
        if azure_storage_redundancy not in allowed_values:
            raise ValueError(
                "Invalid value for `azure_storage_redundancy` ({0}), must be one of {1}"
                .format(azure_storage_redundancy, allowed_values)
            )

        self._azure_storage_redundancy = azure_storage_redundancy

    @property
    def confidence_rating_in_percentage(self):
        """Gets the confidence_rating_in_percentage of this AssessmentProperties.

        Confidence rating percentage for assessment. Can be in the range [0, 100].

        :return: The confidence_rating_in_percentage of this AssessmentProperties.
        :rtype: float
        """
        return self._confidence_rating_in_percentage

    @confidence_rating_in_percentage.setter
    def confidence_rating_in_percentage(self, confidence_rating_in_percentage):
        """Sets the confidence_rating_in_percentage of this AssessmentProperties.

        Confidence rating percentage for assessment. Can be in the range [0, 100].

        :param confidence_rating_in_percentage: The confidence_rating_in_percentage of this AssessmentProperties.
        :type confidence_rating_in_percentage: float
        """

        self._confidence_rating_in_percentage = confidence_rating_in_percentage

    @property
    def created_timestamp(self):
        """Gets the created_timestamp of this AssessmentProperties.

        Time when this project was created. Date-Time represented in ISO-8601 format.

        :return: The created_timestamp of this AssessmentProperties.
        :rtype: datetime
        """
        return self._created_timestamp

    @created_timestamp.setter
    def created_timestamp(self, created_timestamp):
        """Sets the created_timestamp of this AssessmentProperties.

        Time when this project was created. Date-Time represented in ISO-8601 format.

        :param created_timestamp: The created_timestamp of this AssessmentProperties.
        :type created_timestamp: datetime
        """

        self._created_timestamp = created_timestamp

    @property
    def currency(self):
        """Gets the currency of this AssessmentProperties.

        Currency to report prices in.

        :return: The currency of this AssessmentProperties.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AssessmentProperties.

        Currency to report prices in.

        :param currency: The currency of this AssessmentProperties.
        :type currency: str
        """
        allowed_values = ["Unknown", "USD", "DKK", "CAD", "IDR", "JPY", "KRW", "NZD", "NOK", "RUB", "SAR", "ZAR", "SEK", "TRY", "GBP", "MXN", "MYR", "INR", "HKD", "BRL", "TWD", "EUR", "CHF", "ARS", "AUD", "CNY"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def discount_percentage(self):
        """Gets the discount_percentage of this AssessmentProperties.

        Custom discount percentage to be applied on final costs. Can be in the range [0, 100].

        :return: The discount_percentage of this AssessmentProperties.
        :rtype: float
        """
        return self._discount_percentage

    @discount_percentage.setter
    def discount_percentage(self, discount_percentage):
        """Sets the discount_percentage of this AssessmentProperties.

        Custom discount percentage to be applied on final costs. Can be in the range [0, 100].

        :param discount_percentage: The discount_percentage of this AssessmentProperties.
        :type discount_percentage: float
        """
        if discount_percentage is None:
            raise ValueError("Invalid value for `discount_percentage`, must not be `None`")

        self._discount_percentage = discount_percentage

    @property
    def monthly_bandwidth_cost(self):
        """Gets the monthly_bandwidth_cost of this AssessmentProperties.

        Monthly network cost estimate for the machines that are part of this assessment as a group, for a 31-day month.

        :return: The monthly_bandwidth_cost of this AssessmentProperties.
        :rtype: float
        """
        return self._monthly_bandwidth_cost

    @monthly_bandwidth_cost.setter
    def monthly_bandwidth_cost(self, monthly_bandwidth_cost):
        """Sets the monthly_bandwidth_cost of this AssessmentProperties.

        Monthly network cost estimate for the machines that are part of this assessment as a group, for a 31-day month.

        :param monthly_bandwidth_cost: The monthly_bandwidth_cost of this AssessmentProperties.
        :type monthly_bandwidth_cost: float
        """

        self._monthly_bandwidth_cost = monthly_bandwidth_cost

    @property
    def monthly_compute_cost(self):
        """Gets the monthly_compute_cost of this AssessmentProperties.

        Monthly compute cost estimate for the machines that are part of this assessment as a group, for a 31-day month.

        :return: The monthly_compute_cost of this AssessmentProperties.
        :rtype: float
        """
        return self._monthly_compute_cost

    @monthly_compute_cost.setter
    def monthly_compute_cost(self, monthly_compute_cost):
        """Sets the monthly_compute_cost of this AssessmentProperties.

        Monthly compute cost estimate for the machines that are part of this assessment as a group, for a 31-day month.

        :param monthly_compute_cost: The monthly_compute_cost of this AssessmentProperties.
        :type monthly_compute_cost: float
        """

        self._monthly_compute_cost = monthly_compute_cost

    @property
    def monthly_storage_cost(self):
        """Gets the monthly_storage_cost of this AssessmentProperties.

        Monthly storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month.

        :return: The monthly_storage_cost of this AssessmentProperties.
        :rtype: float
        """
        return self._monthly_storage_cost

    @monthly_storage_cost.setter
    def monthly_storage_cost(self, monthly_storage_cost):
        """Sets the monthly_storage_cost of this AssessmentProperties.

        Monthly storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month.

        :param monthly_storage_cost: The monthly_storage_cost of this AssessmentProperties.
        :type monthly_storage_cost: float
        """

        self._monthly_storage_cost = monthly_storage_cost

    @property
    def number_of_machines(self):
        """Gets the number_of_machines of this AssessmentProperties.

        Number of assessed machines part of this assessment.

        :return: The number_of_machines of this AssessmentProperties.
        :rtype: int
        """
        return self._number_of_machines

    @number_of_machines.setter
    def number_of_machines(self, number_of_machines):
        """Sets the number_of_machines of this AssessmentProperties.

        Number of assessed machines part of this assessment.

        :param number_of_machines: The number_of_machines of this AssessmentProperties.
        :type number_of_machines: int
        """

        self._number_of_machines = number_of_machines

    @property
    def percentile(self):
        """Gets the percentile of this AssessmentProperties.

        Percentile of performance data used to recommend Azure size.

        :return: The percentile of this AssessmentProperties.
        :rtype: str
        """
        return self._percentile

    @percentile.setter
    def percentile(self, percentile):
        """Sets the percentile of this AssessmentProperties.

        Percentile of performance data used to recommend Azure size.

        :param percentile: The percentile of this AssessmentProperties.
        :type percentile: str
        """
        allowed_values = ["Percentile50", "Percentile90", "Percentile95", "Percentile99"]  # noqa: E501
        if percentile not in allowed_values:
            raise ValueError(
                "Invalid value for `percentile` ({0}), must be one of {1}"
                .format(percentile, allowed_values)
            )

        self._percentile = percentile

    @property
    def prices_timestamp(self):
        """Gets the prices_timestamp of this AssessmentProperties.

        Time when the Azure Prices were queried. Date-Time represented in ISO-8601 format.

        :return: The prices_timestamp of this AssessmentProperties.
        :rtype: datetime
        """
        return self._prices_timestamp

    @prices_timestamp.setter
    def prices_timestamp(self, prices_timestamp):
        """Sets the prices_timestamp of this AssessmentProperties.

        Time when the Azure Prices were queried. Date-Time represented in ISO-8601 format.

        :param prices_timestamp: The prices_timestamp of this AssessmentProperties.
        :type prices_timestamp: datetime
        """

        self._prices_timestamp = prices_timestamp

    @property
    def scaling_factor(self):
        """Gets the scaling_factor of this AssessmentProperties.

        Scaling factor used over utilization data to add a performance buffer for new machines to be created in Azure. Min Value = 1.0, Max value = 1.9, Default = 1.3.

        :return: The scaling_factor of this AssessmentProperties.
        :rtype: float
        """
        return self._scaling_factor

    @scaling_factor.setter
    def scaling_factor(self, scaling_factor):
        """Sets the scaling_factor of this AssessmentProperties.

        Scaling factor used over utilization data to add a performance buffer for new machines to be created in Azure. Min Value = 1.0, Max value = 1.9, Default = 1.3.

        :param scaling_factor: The scaling_factor of this AssessmentProperties.
        :type scaling_factor: float
        """
        if scaling_factor is None:
            raise ValueError("Invalid value for `scaling_factor`, must not be `None`")

        self._scaling_factor = scaling_factor

    @property
    def sizing_criterion(self):
        """Gets the sizing_criterion of this AssessmentProperties.

        Assessment sizing criterion.

        :return: The sizing_criterion of this AssessmentProperties.
        :rtype: str
        """
        return self._sizing_criterion

    @sizing_criterion.setter
    def sizing_criterion(self, sizing_criterion):
        """Sets the sizing_criterion of this AssessmentProperties.

        Assessment sizing criterion.

        :param sizing_criterion: The sizing_criterion of this AssessmentProperties.
        :type sizing_criterion: str
        """
        allowed_values = ["PerformanceBased", "AsOnPremises"]  # noqa: E501
        if sizing_criterion not in allowed_values:
            raise ValueError(
                "Invalid value for `sizing_criterion` ({0}), must be one of {1}"
                .format(sizing_criterion, allowed_values)
            )

        self._sizing_criterion = sizing_criterion

    @property
    def stage(self):
        """Gets the stage of this AssessmentProperties.

        User configurable setting that describes the status of the assessment.

        :return: The stage of this AssessmentProperties.
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this AssessmentProperties.

        User configurable setting that describes the status of the assessment.

        :param stage: The stage of this AssessmentProperties.
        :type stage: str
        """
        allowed_values = ["InProgress", "UnderReview", "Approved"]  # noqa: E501
        if stage not in allowed_values:
            raise ValueError(
                "Invalid value for `stage` ({0}), must be one of {1}"
                .format(stage, allowed_values)
            )

        self._stage = stage

    @property
    def status(self):
        """Gets the status of this AssessmentProperties.

        Whether the assessment has been created and is valid.

        :return: The status of this AssessmentProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AssessmentProperties.

        Whether the assessment has been created and is valid.

        :param status: The status of this AssessmentProperties.
        :type status: str
        """
        allowed_values = ["Created", "Updated", "Running", "Completed", "Invalid"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def time_range(self):
        """Gets the time_range of this AssessmentProperties.

        Time range of performance data used to recommend a size.

        :return: The time_range of this AssessmentProperties.
        :rtype: str
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """Sets the time_range of this AssessmentProperties.

        Time range of performance data used to recommend a size.

        :param time_range: The time_range of this AssessmentProperties.
        :type time_range: str
        """
        allowed_values = ["Day", "Week", "Month"]  # noqa: E501
        if time_range not in allowed_values:
            raise ValueError(
                "Invalid value for `time_range` ({0}), must be one of {1}"
                .format(time_range, allowed_values)
            )

        self._time_range = time_range

    @property
    def updated_timestamp(self):
        """Gets the updated_timestamp of this AssessmentProperties.

        Time when this project was last updated. Date-Time represented in ISO-8601 format.

        :return: The updated_timestamp of this AssessmentProperties.
        :rtype: datetime
        """
        return self._updated_timestamp

    @updated_timestamp.setter
    def updated_timestamp(self, updated_timestamp):
        """Sets the updated_timestamp of this AssessmentProperties.

        Time when this project was last updated. Date-Time represented in ISO-8601 format.

        :param updated_timestamp: The updated_timestamp of this AssessmentProperties.
        :type updated_timestamp: datetime
        """

        self._updated_timestamp = updated_timestamp
