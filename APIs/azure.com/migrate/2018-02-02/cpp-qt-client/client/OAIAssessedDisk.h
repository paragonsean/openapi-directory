/**
 * Azure Migrate
 * Move your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-02-02
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAssessedDisk.h
 *
 * A disk assessed for an assessment.
 */

#ifndef OAIAssessedDisk_H
#define OAIAssessedDisk_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAssessedDisk : public OAIObject {
public:
    OAIAssessedDisk();
    OAIAssessedDisk(QString json);
    ~OAIAssessedDisk() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getGigabytesConsumed() const;
    void setGigabytesConsumed(const double &gigabytes_consumed);
    bool is_gigabytes_consumed_Set() const;
    bool is_gigabytes_consumed_Valid() const;

    qint32 getGigabytesForRecommendedDiskSize() const;
    void setGigabytesForRecommendedDiskSize(const qint32 &gigabytes_for_recommended_disk_size);
    bool is_gigabytes_for_recommended_disk_size_Set() const;
    bool is_gigabytes_for_recommended_disk_size_Valid() const;

    double getGigabytesProvisioned() const;
    void setGigabytesProvisioned(const double &gigabytes_provisioned);
    bool is_gigabytes_provisioned_Set() const;
    bool is_gigabytes_provisioned_Valid() const;

    double getMegabytesPerSecondOfRead() const;
    void setMegabytesPerSecondOfRead(const double &megabytes_per_second_of_read);
    bool is_megabytes_per_second_of_read_Set() const;
    bool is_megabytes_per_second_of_read_Valid() const;

    qint32 getMegabytesPerSecondOfReadDataPointsExpected() const;
    void setMegabytesPerSecondOfReadDataPointsExpected(const qint32 &megabytes_per_second_of_read_data_points_expected);
    bool is_megabytes_per_second_of_read_data_points_expected_Set() const;
    bool is_megabytes_per_second_of_read_data_points_expected_Valid() const;

    qint32 getMegabytesPerSecondOfReadDataPointsReceived() const;
    void setMegabytesPerSecondOfReadDataPointsReceived(const qint32 &megabytes_per_second_of_read_data_points_received);
    bool is_megabytes_per_second_of_read_data_points_received_Set() const;
    bool is_megabytes_per_second_of_read_data_points_received_Valid() const;

    double getMegabytesPerSecondOfWrite() const;
    void setMegabytesPerSecondOfWrite(const double &megabytes_per_second_of_write);
    bool is_megabytes_per_second_of_write_Set() const;
    bool is_megabytes_per_second_of_write_Valid() const;

    qint32 getMegabytesPerSecondOfWriteDataPointsExpected() const;
    void setMegabytesPerSecondOfWriteDataPointsExpected(const qint32 &megabytes_per_second_of_write_data_points_expected);
    bool is_megabytes_per_second_of_write_data_points_expected_Set() const;
    bool is_megabytes_per_second_of_write_data_points_expected_Valid() const;

    qint32 getMegabytesPerSecondOfWriteDataPointsReceived() const;
    void setMegabytesPerSecondOfWriteDataPointsReceived(const qint32 &megabytes_per_second_of_write_data_points_received);
    bool is_megabytes_per_second_of_write_data_points_received_Set() const;
    bool is_megabytes_per_second_of_write_data_points_received_Valid() const;

    double getMonthlyStorageCost() const;
    void setMonthlyStorageCost(const double &monthly_storage_cost);
    bool is_monthly_storage_cost_Set() const;
    bool is_monthly_storage_cost_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    double getNumberOfReadOperationsPerSecond() const;
    void setNumberOfReadOperationsPerSecond(const double &number_of_read_operations_per_second);
    bool is_number_of_read_operations_per_second_Set() const;
    bool is_number_of_read_operations_per_second_Valid() const;

    qint32 getNumberOfReadOperationsPerSecondDataPointsExpected() const;
    void setNumberOfReadOperationsPerSecondDataPointsExpected(const qint32 &number_of_read_operations_per_second_data_points_expected);
    bool is_number_of_read_operations_per_second_data_points_expected_Set() const;
    bool is_number_of_read_operations_per_second_data_points_expected_Valid() const;

    qint32 getNumberOfReadOperationsPerSecondDataPointsReceived() const;
    void setNumberOfReadOperationsPerSecondDataPointsReceived(const qint32 &number_of_read_operations_per_second_data_points_received);
    bool is_number_of_read_operations_per_second_data_points_received_Set() const;
    bool is_number_of_read_operations_per_second_data_points_received_Valid() const;

    double getNumberOfWriteOperationsPerSecond() const;
    void setNumberOfWriteOperationsPerSecond(const double &number_of_write_operations_per_second);
    bool is_number_of_write_operations_per_second_Set() const;
    bool is_number_of_write_operations_per_second_Valid() const;

    qint32 getNumberOfWriteOperationsPerSecondDataPointsExpected() const;
    void setNumberOfWriteOperationsPerSecondDataPointsExpected(const qint32 &number_of_write_operations_per_second_data_points_expected);
    bool is_number_of_write_operations_per_second_data_points_expected_Set() const;
    bool is_number_of_write_operations_per_second_data_points_expected_Valid() const;

    qint32 getNumberOfWriteOperationsPerSecondDataPointsReceived() const;
    void setNumberOfWriteOperationsPerSecondDataPointsReceived(const qint32 &number_of_write_operations_per_second_data_points_received);
    bool is_number_of_write_operations_per_second_data_points_received_Set() const;
    bool is_number_of_write_operations_per_second_data_points_received_Valid() const;

    QString getRecommendedDiskSize() const;
    void setRecommendedDiskSize(const QString &recommended_disk_size);
    bool is_recommended_disk_size_Set() const;
    bool is_recommended_disk_size_Valid() const;

    QString getRecommendedDiskType() const;
    void setRecommendedDiskType(const QString &recommended_disk_type);
    bool is_recommended_disk_type_Set() const;
    bool is_recommended_disk_type_Valid() const;

    QString getSuitability() const;
    void setSuitability(const QString &suitability);
    bool is_suitability_Set() const;
    bool is_suitability_Valid() const;

    QString getSuitabilityExplanation() const;
    void setSuitabilityExplanation(const QString &suitability_explanation);
    bool is_suitability_explanation_Set() const;
    bool is_suitability_explanation_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_gigabytes_consumed;
    bool m_gigabytes_consumed_isSet;
    bool m_gigabytes_consumed_isValid;

    qint32 m_gigabytes_for_recommended_disk_size;
    bool m_gigabytes_for_recommended_disk_size_isSet;
    bool m_gigabytes_for_recommended_disk_size_isValid;

    double m_gigabytes_provisioned;
    bool m_gigabytes_provisioned_isSet;
    bool m_gigabytes_provisioned_isValid;

    double m_megabytes_per_second_of_read;
    bool m_megabytes_per_second_of_read_isSet;
    bool m_megabytes_per_second_of_read_isValid;

    qint32 m_megabytes_per_second_of_read_data_points_expected;
    bool m_megabytes_per_second_of_read_data_points_expected_isSet;
    bool m_megabytes_per_second_of_read_data_points_expected_isValid;

    qint32 m_megabytes_per_second_of_read_data_points_received;
    bool m_megabytes_per_second_of_read_data_points_received_isSet;
    bool m_megabytes_per_second_of_read_data_points_received_isValid;

    double m_megabytes_per_second_of_write;
    bool m_megabytes_per_second_of_write_isSet;
    bool m_megabytes_per_second_of_write_isValid;

    qint32 m_megabytes_per_second_of_write_data_points_expected;
    bool m_megabytes_per_second_of_write_data_points_expected_isSet;
    bool m_megabytes_per_second_of_write_data_points_expected_isValid;

    qint32 m_megabytes_per_second_of_write_data_points_received;
    bool m_megabytes_per_second_of_write_data_points_received_isSet;
    bool m_megabytes_per_second_of_write_data_points_received_isValid;

    double m_monthly_storage_cost;
    bool m_monthly_storage_cost_isSet;
    bool m_monthly_storage_cost_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    double m_number_of_read_operations_per_second;
    bool m_number_of_read_operations_per_second_isSet;
    bool m_number_of_read_operations_per_second_isValid;

    qint32 m_number_of_read_operations_per_second_data_points_expected;
    bool m_number_of_read_operations_per_second_data_points_expected_isSet;
    bool m_number_of_read_operations_per_second_data_points_expected_isValid;

    qint32 m_number_of_read_operations_per_second_data_points_received;
    bool m_number_of_read_operations_per_second_data_points_received_isSet;
    bool m_number_of_read_operations_per_second_data_points_received_isValid;

    double m_number_of_write_operations_per_second;
    bool m_number_of_write_operations_per_second_isSet;
    bool m_number_of_write_operations_per_second_isValid;

    qint32 m_number_of_write_operations_per_second_data_points_expected;
    bool m_number_of_write_operations_per_second_data_points_expected_isSet;
    bool m_number_of_write_operations_per_second_data_points_expected_isValid;

    qint32 m_number_of_write_operations_per_second_data_points_received;
    bool m_number_of_write_operations_per_second_data_points_received_isSet;
    bool m_number_of_write_operations_per_second_data_points_received_isValid;

    QString m_recommended_disk_size;
    bool m_recommended_disk_size_isSet;
    bool m_recommended_disk_size_isValid;

    QString m_recommended_disk_type;
    bool m_recommended_disk_type_isSet;
    bool m_recommended_disk_type_isValid;

    QString m_suitability;
    bool m_suitability_isSet;
    bool m_suitability_isValid;

    QString m_suitability_explanation;
    bool m_suitability_explanation_isSet;
    bool m_suitability_explanation_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAssessedDisk)

#endif // OAIAssessedDisk_H
