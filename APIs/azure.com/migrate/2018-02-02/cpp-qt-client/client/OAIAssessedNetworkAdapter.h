/**
 * Azure Migrate
 * Move your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-02-02
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAssessedNetworkAdapter.h
 *
 * A network adapter assessed for an assessment.
 */

#ifndef OAIAssessedNetworkAdapter_H
#define OAIAssessedNetworkAdapter_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAssessedNetworkAdapter : public OAIObject {
public:
    OAIAssessedNetworkAdapter();
    OAIAssessedNetworkAdapter(QString json);
    ~OAIAssessedNetworkAdapter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getIpAddresses() const;
    void setIpAddresses(const QList<QString> &ip_addresses);
    bool is_ip_addresses_Set() const;
    bool is_ip_addresses_Valid() const;

    QString getMacAddress() const;
    void setMacAddress(const QString &mac_address);
    bool is_mac_address_Set() const;
    bool is_mac_address_Valid() const;

    qint32 getMegabytesPerSecondOfReadDataPointsReceived() const;
    void setMegabytesPerSecondOfReadDataPointsReceived(const qint32 &megabytes_per_second_of_read_data_points_received);
    bool is_megabytes_per_second_of_read_data_points_received_Set() const;
    bool is_megabytes_per_second_of_read_data_points_received_Valid() const;

    double getMegabytesPerSecondReceived() const;
    void setMegabytesPerSecondReceived(const double &megabytes_per_second_received);
    bool is_megabytes_per_second_received_Set() const;
    bool is_megabytes_per_second_received_Valid() const;

    qint32 getMegabytesPerSecondReceivedDataPointsExpected() const;
    void setMegabytesPerSecondReceivedDataPointsExpected(const qint32 &megabytes_per_second_received_data_points_expected);
    bool is_megabytes_per_second_received_data_points_expected_Set() const;
    bool is_megabytes_per_second_received_data_points_expected_Valid() const;

    double getMegabytesPerSecondTransmitted() const;
    void setMegabytesPerSecondTransmitted(const double &megabytes_per_second_transmitted);
    bool is_megabytes_per_second_transmitted_Set() const;
    bool is_megabytes_per_second_transmitted_Valid() const;

    qint32 getMegabytesPerSecondTransmittedDataPointsExpected() const;
    void setMegabytesPerSecondTransmittedDataPointsExpected(const qint32 &megabytes_per_second_transmitted_data_points_expected);
    bool is_megabytes_per_second_transmitted_data_points_expected_Set() const;
    bool is_megabytes_per_second_transmitted_data_points_expected_Valid() const;

    qint32 getMegabytesPerSecondTransmittedDataPointsReceived() const;
    void setMegabytesPerSecondTransmittedDataPointsReceived(const qint32 &megabytes_per_second_transmitted_data_points_received);
    bool is_megabytes_per_second_transmitted_data_points_received_Set() const;
    bool is_megabytes_per_second_transmitted_data_points_received_Valid() const;

    double getMonthlyBandwidthCosts() const;
    void setMonthlyBandwidthCosts(const double &monthly_bandwidth_costs);
    bool is_monthly_bandwidth_costs_Set() const;
    bool is_monthly_bandwidth_costs_Valid() const;

    double getNetGigabytesTransmittedPerMonth() const;
    void setNetGigabytesTransmittedPerMonth(const double &net_gigabytes_transmitted_per_month);
    bool is_net_gigabytes_transmitted_per_month_Set() const;
    bool is_net_gigabytes_transmitted_per_month_Valid() const;

    QString getSuitability() const;
    void setSuitability(const QString &suitability);
    bool is_suitability_Set() const;
    bool is_suitability_Valid() const;

    QString getSuitabilityExplanation() const;
    void setSuitabilityExplanation(const QString &suitability_explanation);
    bool is_suitability_explanation_Set() const;
    bool is_suitability_explanation_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_ip_addresses;
    bool m_ip_addresses_isSet;
    bool m_ip_addresses_isValid;

    QString m_mac_address;
    bool m_mac_address_isSet;
    bool m_mac_address_isValid;

    qint32 m_megabytes_per_second_of_read_data_points_received;
    bool m_megabytes_per_second_of_read_data_points_received_isSet;
    bool m_megabytes_per_second_of_read_data_points_received_isValid;

    double m_megabytes_per_second_received;
    bool m_megabytes_per_second_received_isSet;
    bool m_megabytes_per_second_received_isValid;

    qint32 m_megabytes_per_second_received_data_points_expected;
    bool m_megabytes_per_second_received_data_points_expected_isSet;
    bool m_megabytes_per_second_received_data_points_expected_isValid;

    double m_megabytes_per_second_transmitted;
    bool m_megabytes_per_second_transmitted_isSet;
    bool m_megabytes_per_second_transmitted_isValid;

    qint32 m_megabytes_per_second_transmitted_data_points_expected;
    bool m_megabytes_per_second_transmitted_data_points_expected_isSet;
    bool m_megabytes_per_second_transmitted_data_points_expected_isValid;

    qint32 m_megabytes_per_second_transmitted_data_points_received;
    bool m_megabytes_per_second_transmitted_data_points_received_isSet;
    bool m_megabytes_per_second_transmitted_data_points_received_isValid;

    double m_monthly_bandwidth_costs;
    bool m_monthly_bandwidth_costs_isSet;
    bool m_monthly_bandwidth_costs_isValid;

    double m_net_gigabytes_transmitted_per_month;
    bool m_net_gigabytes_transmitted_per_month_isSet;
    bool m_net_gigabytes_transmitted_per_month_isValid;

    QString m_suitability;
    bool m_suitability_isSet;
    bool m_suitability_isValid;

    QString m_suitability_explanation;
    bool m_suitability_explanation_isSet;
    bool m_suitability_explanation_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAssessedNetworkAdapter)

#endif // OAIAssessedNetworkAdapter_H
