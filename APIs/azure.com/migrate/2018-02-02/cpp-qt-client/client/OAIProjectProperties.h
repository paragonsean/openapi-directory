/**
 * Azure Migrate
 * Move your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-02-02
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProjectProperties.h
 *
 * Properties of a project.
 */

#ifndef OAIProjectProperties_H
#define OAIProjectProperties_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIProjectProperties : public OAIObject {
public:
    OAIProjectProperties();
    OAIProjectProperties(QString json);
    ~OAIProjectProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCreatedTimestamp() const;
    void setCreatedTimestamp(const QDateTime &created_timestamp);
    bool is_created_timestamp_Set() const;
    bool is_created_timestamp_Valid() const;

    QString getCustomerWorkspaceId() const;
    void setCustomerWorkspaceId(const QString &customer_workspace_id);
    bool is_customer_workspace_id_Set() const;
    bool is_customer_workspace_id_Valid() const;

    QString getCustomerWorkspaceLocation() const;
    void setCustomerWorkspaceLocation(const QString &customer_workspace_location);
    bool is_customer_workspace_location_Set() const;
    bool is_customer_workspace_location_Valid() const;

    QString getDiscoveryStatus() const;
    void setDiscoveryStatus(const QString &discovery_status);
    bool is_discovery_status_Set() const;
    bool is_discovery_status_Valid() const;

    QDateTime getLastAssessmentTimestamp() const;
    void setLastAssessmentTimestamp(const QDateTime &last_assessment_timestamp);
    bool is_last_assessment_timestamp_Set() const;
    bool is_last_assessment_timestamp_Valid() const;

    QString getLastDiscoverySessionId() const;
    void setLastDiscoverySessionId(const QString &last_discovery_session_id);
    bool is_last_discovery_session_id_Set() const;
    bool is_last_discovery_session_id_Valid() const;

    QDateTime getLastDiscoveryTimestamp() const;
    void setLastDiscoveryTimestamp(const QDateTime &last_discovery_timestamp);
    bool is_last_discovery_timestamp_Set() const;
    bool is_last_discovery_timestamp_Valid() const;

    qint32 getNumberOfAssessments() const;
    void setNumberOfAssessments(const qint32 &number_of_assessments);
    bool is_number_of_assessments_Set() const;
    bool is_number_of_assessments_Valid() const;

    qint32 getNumberOfGroups() const;
    void setNumberOfGroups(const qint32 &number_of_groups);
    bool is_number_of_groups_Set() const;
    bool is_number_of_groups_Valid() const;

    qint32 getNumberOfMachines() const;
    void setNumberOfMachines(const qint32 &number_of_machines);
    bool is_number_of_machines_Set() const;
    bool is_number_of_machines_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    QDateTime getUpdatedTimestamp() const;
    void setUpdatedTimestamp(const QDateTime &updated_timestamp);
    bool is_updated_timestamp_Set() const;
    bool is_updated_timestamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_created_timestamp;
    bool m_created_timestamp_isSet;
    bool m_created_timestamp_isValid;

    QString m_customer_workspace_id;
    bool m_customer_workspace_id_isSet;
    bool m_customer_workspace_id_isValid;

    QString m_customer_workspace_location;
    bool m_customer_workspace_location_isSet;
    bool m_customer_workspace_location_isValid;

    QString m_discovery_status;
    bool m_discovery_status_isSet;
    bool m_discovery_status_isValid;

    QDateTime m_last_assessment_timestamp;
    bool m_last_assessment_timestamp_isSet;
    bool m_last_assessment_timestamp_isValid;

    QString m_last_discovery_session_id;
    bool m_last_discovery_session_id_isSet;
    bool m_last_discovery_session_id_isValid;

    QDateTime m_last_discovery_timestamp;
    bool m_last_discovery_timestamp_isSet;
    bool m_last_discovery_timestamp_isValid;

    qint32 m_number_of_assessments;
    bool m_number_of_assessments_isSet;
    bool m_number_of_assessments_isValid;

    qint32 m_number_of_groups;
    bool m_number_of_groups_isSet;
    bool m_number_of_groups_isValid;

    qint32 m_number_of_machines;
    bool m_number_of_machines_isSet;
    bool m_number_of_machines_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    QDateTime m_updated_timestamp;
    bool m_updated_timestamp_isSet;
    bool m_updated_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProjectProperties)

#endif // OAIProjectProperties_H
