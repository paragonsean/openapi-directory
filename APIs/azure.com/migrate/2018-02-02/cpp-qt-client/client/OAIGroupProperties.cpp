/**
 * Azure Migrate
 * Move your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-02-02
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupProperties::OAIGroupProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupProperties::OAIGroupProperties() {
    this->initializeModel();
}

OAIGroupProperties::~OAIGroupProperties() {}

void OAIGroupProperties::initializeModel() {

    m_assessments_isSet = false;
    m_assessments_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_machines_isSet = false;
    m_machines_isValid = false;

    m_updated_timestamp_isSet = false;
    m_updated_timestamp_isValid = false;
}

void OAIGroupProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupProperties::fromJsonObject(QJsonObject json) {

    m_assessments_isValid = ::OpenAPI::fromJsonValue(m_assessments, json[QString("assessments")]);
    m_assessments_isSet = !json[QString("assessments")].isNull() && m_assessments_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("createdTimestamp")]);
    m_created_timestamp_isSet = !json[QString("createdTimestamp")].isNull() && m_created_timestamp_isValid;

    m_machines_isValid = ::OpenAPI::fromJsonValue(m_machines, json[QString("machines")]);
    m_machines_isSet = !json[QString("machines")].isNull() && m_machines_isValid;

    m_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_updated_timestamp, json[QString("updatedTimestamp")]);
    m_updated_timestamp_isSet = !json[QString("updatedTimestamp")].isNull() && m_updated_timestamp_isValid;
}

QString OAIGroupProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_assessments.size() > 0) {
        obj.insert(QString("assessments"), ::OpenAPI::toJsonValue(m_assessments));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("createdTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_machines.size() > 0) {
        obj.insert(QString("machines"), ::OpenAPI::toJsonValue(m_machines));
    }
    if (m_updated_timestamp_isSet) {
        obj.insert(QString("updatedTimestamp"), ::OpenAPI::toJsonValue(m_updated_timestamp));
    }
    return obj;
}

QList<QString> OAIGroupProperties::getAssessments() const {
    return m_assessments;
}
void OAIGroupProperties::setAssessments(const QList<QString> &assessments) {
    m_assessments = assessments;
    m_assessments_isSet = true;
}

bool OAIGroupProperties::is_assessments_Set() const{
    return m_assessments_isSet;
}

bool OAIGroupProperties::is_assessments_Valid() const{
    return m_assessments_isValid;
}

QDateTime OAIGroupProperties::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIGroupProperties::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIGroupProperties::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIGroupProperties::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

QList<QString> OAIGroupProperties::getMachines() const {
    return m_machines;
}
void OAIGroupProperties::setMachines(const QList<QString> &machines) {
    m_machines = machines;
    m_machines_isSet = true;
}

bool OAIGroupProperties::is_machines_Set() const{
    return m_machines_isSet;
}

bool OAIGroupProperties::is_machines_Valid() const{
    return m_machines_isValid;
}

QDateTime OAIGroupProperties::getUpdatedTimestamp() const {
    return m_updated_timestamp;
}
void OAIGroupProperties::setUpdatedTimestamp(const QDateTime &updated_timestamp) {
    m_updated_timestamp = updated_timestamp;
    m_updated_timestamp_isSet = true;
}

bool OAIGroupProperties::is_updated_timestamp_Set() const{
    return m_updated_timestamp_isSet;
}

bool OAIGroupProperties::is_updated_timestamp_Valid() const{
    return m_updated_timestamp_isValid;
}

bool OAIGroupProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assessments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_machines_isValid && true;
}

} // namespace OpenAPI
