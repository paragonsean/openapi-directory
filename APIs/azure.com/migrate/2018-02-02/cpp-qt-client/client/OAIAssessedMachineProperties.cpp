/**
 * Azure Migrate
 * Move your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-02-02
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssessedMachineProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssessedMachineProperties::OAIAssessedMachineProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssessedMachineProperties::OAIAssessedMachineProperties() {
    this->initializeModel();
}

OAIAssessedMachineProperties::~OAIAssessedMachineProperties() {}

void OAIAssessedMachineProperties::initializeModel() {

    m_boot_type_isSet = false;
    m_boot_type_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_datacenter_container_isSet = false;
    m_datacenter_container_isValid = false;

    m_datacenter_machine_id_isSet = false;
    m_datacenter_machine_id_isValid = false;

    m_datacenter_management_server_isSet = false;
    m_datacenter_management_server_isValid = false;

    m_datacenter_management_server_id_isSet = false;
    m_datacenter_management_server_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_discovered_timestamp_isSet = false;
    m_discovered_timestamp_isValid = false;

    m_disks_isSet = false;
    m_disks_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_megabytes_of_memory_isSet = false;
    m_megabytes_of_memory_isValid = false;

    m_megabytes_of_memory_for_recommended_size_isSet = false;
    m_megabytes_of_memory_for_recommended_size_isValid = false;

    m_monthly_bandwidth_cost_isSet = false;
    m_monthly_bandwidth_cost_isValid = false;

    m_monthly_compute_cost_for_recommended_size_isSet = false;
    m_monthly_compute_cost_for_recommended_size_isValid = false;

    m_monthly_storage_cost_isSet = false;
    m_monthly_storage_cost_isValid = false;

    m_network_adapters_isSet = false;
    m_network_adapters_isValid = false;

    m_number_of_cores_isSet = false;
    m_number_of_cores_isValid = false;

    m_number_of_cores_for_recommended_size_isSet = false;
    m_number_of_cores_for_recommended_size_isValid = false;

    m_operating_system_isSet = false;
    m_operating_system_isValid = false;

    m_percentage_cores_utilization_isSet = false;
    m_percentage_cores_utilization_isValid = false;

    m_percentage_cores_utilization_data_points_expected_isSet = false;
    m_percentage_cores_utilization_data_points_expected_isValid = false;

    m_percentage_cores_utilization_data_points_received_isSet = false;
    m_percentage_cores_utilization_data_points_received_isValid = false;

    m_percentage_memory_utilization_isSet = false;
    m_percentage_memory_utilization_isValid = false;

    m_percentage_memory_utilization_data_points_expected_isSet = false;
    m_percentage_memory_utilization_data_points_expected_isValid = false;

    m_percentage_memory_utilization_data_points_received_isSet = false;
    m_percentage_memory_utilization_data_points_received_isValid = false;

    m_recommended_size_isSet = false;
    m_recommended_size_isValid = false;

    m_suitability_isSet = false;
    m_suitability_isValid = false;

    m_suitability_explanation_isSet = false;
    m_suitability_explanation_isValid = false;

    m_updated_timestamp_isSet = false;
    m_updated_timestamp_isValid = false;
}

void OAIAssessedMachineProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssessedMachineProperties::fromJsonObject(QJsonObject json) {

    m_boot_type_isValid = ::OpenAPI::fromJsonValue(m_boot_type, json[QString("bootType")]);
    m_boot_type_isSet = !json[QString("bootType")].isNull() && m_boot_type_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("createdTimestamp")]);
    m_created_timestamp_isSet = !json[QString("createdTimestamp")].isNull() && m_created_timestamp_isValid;

    m_datacenter_container_isValid = ::OpenAPI::fromJsonValue(m_datacenter_container, json[QString("datacenterContainer")]);
    m_datacenter_container_isSet = !json[QString("datacenterContainer")].isNull() && m_datacenter_container_isValid;

    m_datacenter_machine_id_isValid = ::OpenAPI::fromJsonValue(m_datacenter_machine_id, json[QString("datacenterMachineId")]);
    m_datacenter_machine_id_isSet = !json[QString("datacenterMachineId")].isNull() && m_datacenter_machine_id_isValid;

    m_datacenter_management_server_isValid = ::OpenAPI::fromJsonValue(m_datacenter_management_server, json[QString("datacenterManagementServer")]);
    m_datacenter_management_server_isSet = !json[QString("datacenterManagementServer")].isNull() && m_datacenter_management_server_isValid;

    m_datacenter_management_server_id_isValid = ::OpenAPI::fromJsonValue(m_datacenter_management_server_id, json[QString("datacenterManagementServerId")]);
    m_datacenter_management_server_id_isSet = !json[QString("datacenterManagementServerId")].isNull() && m_datacenter_management_server_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discovered_timestamp_isValid = ::OpenAPI::fromJsonValue(m_discovered_timestamp, json[QString("discoveredTimestamp")]);
    m_discovered_timestamp_isSet = !json[QString("discoveredTimestamp")].isNull() && m_discovered_timestamp_isValid;

    m_disks_isValid = ::OpenAPI::fromJsonValue(m_disks, json[QString("disks")]);
    m_disks_isSet = !json[QString("disks")].isNull() && m_disks_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_megabytes_of_memory_isValid = ::OpenAPI::fromJsonValue(m_megabytes_of_memory, json[QString("megabytesOfMemory")]);
    m_megabytes_of_memory_isSet = !json[QString("megabytesOfMemory")].isNull() && m_megabytes_of_memory_isValid;

    m_megabytes_of_memory_for_recommended_size_isValid = ::OpenAPI::fromJsonValue(m_megabytes_of_memory_for_recommended_size, json[QString("megabytesOfMemoryForRecommendedSize")]);
    m_megabytes_of_memory_for_recommended_size_isSet = !json[QString("megabytesOfMemoryForRecommendedSize")].isNull() && m_megabytes_of_memory_for_recommended_size_isValid;

    m_monthly_bandwidth_cost_isValid = ::OpenAPI::fromJsonValue(m_monthly_bandwidth_cost, json[QString("monthlyBandwidthCost")]);
    m_monthly_bandwidth_cost_isSet = !json[QString("monthlyBandwidthCost")].isNull() && m_monthly_bandwidth_cost_isValid;

    m_monthly_compute_cost_for_recommended_size_isValid = ::OpenAPI::fromJsonValue(m_monthly_compute_cost_for_recommended_size, json[QString("monthlyComputeCostForRecommendedSize")]);
    m_monthly_compute_cost_for_recommended_size_isSet = !json[QString("monthlyComputeCostForRecommendedSize")].isNull() && m_monthly_compute_cost_for_recommended_size_isValid;

    m_monthly_storage_cost_isValid = ::OpenAPI::fromJsonValue(m_monthly_storage_cost, json[QString("monthlyStorageCost")]);
    m_monthly_storage_cost_isSet = !json[QString("monthlyStorageCost")].isNull() && m_monthly_storage_cost_isValid;

    m_network_adapters_isValid = ::OpenAPI::fromJsonValue(m_network_adapters, json[QString("networkAdapters")]);
    m_network_adapters_isSet = !json[QString("networkAdapters")].isNull() && m_network_adapters_isValid;

    m_number_of_cores_isValid = ::OpenAPI::fromJsonValue(m_number_of_cores, json[QString("numberOfCores")]);
    m_number_of_cores_isSet = !json[QString("numberOfCores")].isNull() && m_number_of_cores_isValid;

    m_number_of_cores_for_recommended_size_isValid = ::OpenAPI::fromJsonValue(m_number_of_cores_for_recommended_size, json[QString("numberOfCoresForRecommendedSize")]);
    m_number_of_cores_for_recommended_size_isSet = !json[QString("numberOfCoresForRecommendedSize")].isNull() && m_number_of_cores_for_recommended_size_isValid;

    m_operating_system_isValid = ::OpenAPI::fromJsonValue(m_operating_system, json[QString("operatingSystem")]);
    m_operating_system_isSet = !json[QString("operatingSystem")].isNull() && m_operating_system_isValid;

    m_percentage_cores_utilization_isValid = ::OpenAPI::fromJsonValue(m_percentage_cores_utilization, json[QString("percentageCoresUtilization")]);
    m_percentage_cores_utilization_isSet = !json[QString("percentageCoresUtilization")].isNull() && m_percentage_cores_utilization_isValid;

    m_percentage_cores_utilization_data_points_expected_isValid = ::OpenAPI::fromJsonValue(m_percentage_cores_utilization_data_points_expected, json[QString("percentageCoresUtilizationDataPointsExpected")]);
    m_percentage_cores_utilization_data_points_expected_isSet = !json[QString("percentageCoresUtilizationDataPointsExpected")].isNull() && m_percentage_cores_utilization_data_points_expected_isValid;

    m_percentage_cores_utilization_data_points_received_isValid = ::OpenAPI::fromJsonValue(m_percentage_cores_utilization_data_points_received, json[QString("percentageCoresUtilizationDataPointsReceived")]);
    m_percentage_cores_utilization_data_points_received_isSet = !json[QString("percentageCoresUtilizationDataPointsReceived")].isNull() && m_percentage_cores_utilization_data_points_received_isValid;

    m_percentage_memory_utilization_isValid = ::OpenAPI::fromJsonValue(m_percentage_memory_utilization, json[QString("percentageMemoryUtilization")]);
    m_percentage_memory_utilization_isSet = !json[QString("percentageMemoryUtilization")].isNull() && m_percentage_memory_utilization_isValid;

    m_percentage_memory_utilization_data_points_expected_isValid = ::OpenAPI::fromJsonValue(m_percentage_memory_utilization_data_points_expected, json[QString("percentageMemoryUtilizationDataPointsExpected")]);
    m_percentage_memory_utilization_data_points_expected_isSet = !json[QString("percentageMemoryUtilizationDataPointsExpected")].isNull() && m_percentage_memory_utilization_data_points_expected_isValid;

    m_percentage_memory_utilization_data_points_received_isValid = ::OpenAPI::fromJsonValue(m_percentage_memory_utilization_data_points_received, json[QString("percentageMemoryUtilizationDataPointsReceived")]);
    m_percentage_memory_utilization_data_points_received_isSet = !json[QString("percentageMemoryUtilizationDataPointsReceived")].isNull() && m_percentage_memory_utilization_data_points_received_isValid;

    m_recommended_size_isValid = ::OpenAPI::fromJsonValue(m_recommended_size, json[QString("recommendedSize")]);
    m_recommended_size_isSet = !json[QString("recommendedSize")].isNull() && m_recommended_size_isValid;

    m_suitability_isValid = ::OpenAPI::fromJsonValue(m_suitability, json[QString("suitability")]);
    m_suitability_isSet = !json[QString("suitability")].isNull() && m_suitability_isValid;

    m_suitability_explanation_isValid = ::OpenAPI::fromJsonValue(m_suitability_explanation, json[QString("suitabilityExplanation")]);
    m_suitability_explanation_isSet = !json[QString("suitabilityExplanation")].isNull() && m_suitability_explanation_isValid;

    m_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_updated_timestamp, json[QString("updatedTimestamp")]);
    m_updated_timestamp_isSet = !json[QString("updatedTimestamp")].isNull() && m_updated_timestamp_isValid;
}

QString OAIAssessedMachineProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssessedMachineProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_boot_type_isSet) {
        obj.insert(QString("bootType"), ::OpenAPI::toJsonValue(m_boot_type));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("createdTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_datacenter_container_isSet) {
        obj.insert(QString("datacenterContainer"), ::OpenAPI::toJsonValue(m_datacenter_container));
    }
    if (m_datacenter_machine_id_isSet) {
        obj.insert(QString("datacenterMachineId"), ::OpenAPI::toJsonValue(m_datacenter_machine_id));
    }
    if (m_datacenter_management_server_isSet) {
        obj.insert(QString("datacenterManagementServer"), ::OpenAPI::toJsonValue(m_datacenter_management_server));
    }
    if (m_datacenter_management_server_id_isSet) {
        obj.insert(QString("datacenterManagementServerId"), ::OpenAPI::toJsonValue(m_datacenter_management_server_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discovered_timestamp_isSet) {
        obj.insert(QString("discoveredTimestamp"), ::OpenAPI::toJsonValue(m_discovered_timestamp));
    }
    if (m_disks.size() > 0) {
        obj.insert(QString("disks"), ::OpenAPI::toJsonValue(m_disks));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_megabytes_of_memory_isSet) {
        obj.insert(QString("megabytesOfMemory"), ::OpenAPI::toJsonValue(m_megabytes_of_memory));
    }
    if (m_megabytes_of_memory_for_recommended_size_isSet) {
        obj.insert(QString("megabytesOfMemoryForRecommendedSize"), ::OpenAPI::toJsonValue(m_megabytes_of_memory_for_recommended_size));
    }
    if (m_monthly_bandwidth_cost_isSet) {
        obj.insert(QString("monthlyBandwidthCost"), ::OpenAPI::toJsonValue(m_monthly_bandwidth_cost));
    }
    if (m_monthly_compute_cost_for_recommended_size_isSet) {
        obj.insert(QString("monthlyComputeCostForRecommendedSize"), ::OpenAPI::toJsonValue(m_monthly_compute_cost_for_recommended_size));
    }
    if (m_monthly_storage_cost_isSet) {
        obj.insert(QString("monthlyStorageCost"), ::OpenAPI::toJsonValue(m_monthly_storage_cost));
    }
    if (m_network_adapters.size() > 0) {
        obj.insert(QString("networkAdapters"), ::OpenAPI::toJsonValue(m_network_adapters));
    }
    if (m_number_of_cores_isSet) {
        obj.insert(QString("numberOfCores"), ::OpenAPI::toJsonValue(m_number_of_cores));
    }
    if (m_number_of_cores_for_recommended_size_isSet) {
        obj.insert(QString("numberOfCoresForRecommendedSize"), ::OpenAPI::toJsonValue(m_number_of_cores_for_recommended_size));
    }
    if (m_operating_system_isSet) {
        obj.insert(QString("operatingSystem"), ::OpenAPI::toJsonValue(m_operating_system));
    }
    if (m_percentage_cores_utilization_isSet) {
        obj.insert(QString("percentageCoresUtilization"), ::OpenAPI::toJsonValue(m_percentage_cores_utilization));
    }
    if (m_percentage_cores_utilization_data_points_expected_isSet) {
        obj.insert(QString("percentageCoresUtilizationDataPointsExpected"), ::OpenAPI::toJsonValue(m_percentage_cores_utilization_data_points_expected));
    }
    if (m_percentage_cores_utilization_data_points_received_isSet) {
        obj.insert(QString("percentageCoresUtilizationDataPointsReceived"), ::OpenAPI::toJsonValue(m_percentage_cores_utilization_data_points_received));
    }
    if (m_percentage_memory_utilization_isSet) {
        obj.insert(QString("percentageMemoryUtilization"), ::OpenAPI::toJsonValue(m_percentage_memory_utilization));
    }
    if (m_percentage_memory_utilization_data_points_expected_isSet) {
        obj.insert(QString("percentageMemoryUtilizationDataPointsExpected"), ::OpenAPI::toJsonValue(m_percentage_memory_utilization_data_points_expected));
    }
    if (m_percentage_memory_utilization_data_points_received_isSet) {
        obj.insert(QString("percentageMemoryUtilizationDataPointsReceived"), ::OpenAPI::toJsonValue(m_percentage_memory_utilization_data_points_received));
    }
    if (m_recommended_size_isSet) {
        obj.insert(QString("recommendedSize"), ::OpenAPI::toJsonValue(m_recommended_size));
    }
    if (m_suitability_isSet) {
        obj.insert(QString("suitability"), ::OpenAPI::toJsonValue(m_suitability));
    }
    if (m_suitability_explanation_isSet) {
        obj.insert(QString("suitabilityExplanation"), ::OpenAPI::toJsonValue(m_suitability_explanation));
    }
    if (m_updated_timestamp_isSet) {
        obj.insert(QString("updatedTimestamp"), ::OpenAPI::toJsonValue(m_updated_timestamp));
    }
    return obj;
}

QString OAIAssessedMachineProperties::getBootType() const {
    return m_boot_type;
}
void OAIAssessedMachineProperties::setBootType(const QString &boot_type) {
    m_boot_type = boot_type;
    m_boot_type_isSet = true;
}

bool OAIAssessedMachineProperties::is_boot_type_Set() const{
    return m_boot_type_isSet;
}

bool OAIAssessedMachineProperties::is_boot_type_Valid() const{
    return m_boot_type_isValid;
}

QDateTime OAIAssessedMachineProperties::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIAssessedMachineProperties::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIAssessedMachineProperties::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIAssessedMachineProperties::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

QString OAIAssessedMachineProperties::getDatacenterContainer() const {
    return m_datacenter_container;
}
void OAIAssessedMachineProperties::setDatacenterContainer(const QString &datacenter_container) {
    m_datacenter_container = datacenter_container;
    m_datacenter_container_isSet = true;
}

bool OAIAssessedMachineProperties::is_datacenter_container_Set() const{
    return m_datacenter_container_isSet;
}

bool OAIAssessedMachineProperties::is_datacenter_container_Valid() const{
    return m_datacenter_container_isValid;
}

QString OAIAssessedMachineProperties::getDatacenterMachineId() const {
    return m_datacenter_machine_id;
}
void OAIAssessedMachineProperties::setDatacenterMachineId(const QString &datacenter_machine_id) {
    m_datacenter_machine_id = datacenter_machine_id;
    m_datacenter_machine_id_isSet = true;
}

bool OAIAssessedMachineProperties::is_datacenter_machine_id_Set() const{
    return m_datacenter_machine_id_isSet;
}

bool OAIAssessedMachineProperties::is_datacenter_machine_id_Valid() const{
    return m_datacenter_machine_id_isValid;
}

QString OAIAssessedMachineProperties::getDatacenterManagementServer() const {
    return m_datacenter_management_server;
}
void OAIAssessedMachineProperties::setDatacenterManagementServer(const QString &datacenter_management_server) {
    m_datacenter_management_server = datacenter_management_server;
    m_datacenter_management_server_isSet = true;
}

bool OAIAssessedMachineProperties::is_datacenter_management_server_Set() const{
    return m_datacenter_management_server_isSet;
}

bool OAIAssessedMachineProperties::is_datacenter_management_server_Valid() const{
    return m_datacenter_management_server_isValid;
}

QString OAIAssessedMachineProperties::getDatacenterManagementServerId() const {
    return m_datacenter_management_server_id;
}
void OAIAssessedMachineProperties::setDatacenterManagementServerId(const QString &datacenter_management_server_id) {
    m_datacenter_management_server_id = datacenter_management_server_id;
    m_datacenter_management_server_id_isSet = true;
}

bool OAIAssessedMachineProperties::is_datacenter_management_server_id_Set() const{
    return m_datacenter_management_server_id_isSet;
}

bool OAIAssessedMachineProperties::is_datacenter_management_server_id_Valid() const{
    return m_datacenter_management_server_id_isValid;
}

QString OAIAssessedMachineProperties::getDescription() const {
    return m_description;
}
void OAIAssessedMachineProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAssessedMachineProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAssessedMachineProperties::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIAssessedMachineProperties::getDiscoveredTimestamp() const {
    return m_discovered_timestamp;
}
void OAIAssessedMachineProperties::setDiscoveredTimestamp(const QDateTime &discovered_timestamp) {
    m_discovered_timestamp = discovered_timestamp;
    m_discovered_timestamp_isSet = true;
}

bool OAIAssessedMachineProperties::is_discovered_timestamp_Set() const{
    return m_discovered_timestamp_isSet;
}

bool OAIAssessedMachineProperties::is_discovered_timestamp_Valid() const{
    return m_discovered_timestamp_isValid;
}

QMap<QString, OAIAssessedDisk> OAIAssessedMachineProperties::getDisks() const {
    return m_disks;
}
void OAIAssessedMachineProperties::setDisks(const QMap<QString, OAIAssessedDisk> &disks) {
    m_disks = disks;
    m_disks_isSet = true;
}

bool OAIAssessedMachineProperties::is_disks_Set() const{
    return m_disks_isSet;
}

bool OAIAssessedMachineProperties::is_disks_Valid() const{
    return m_disks_isValid;
}

QString OAIAssessedMachineProperties::getDisplayName() const {
    return m_display_name;
}
void OAIAssessedMachineProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAssessedMachineProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAssessedMachineProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<QString> OAIAssessedMachineProperties::getGroups() const {
    return m_groups;
}
void OAIAssessedMachineProperties::setGroups(const QList<QString> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIAssessedMachineProperties::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIAssessedMachineProperties::is_groups_Valid() const{
    return m_groups_isValid;
}

double OAIAssessedMachineProperties::getMegabytesOfMemory() const {
    return m_megabytes_of_memory;
}
void OAIAssessedMachineProperties::setMegabytesOfMemory(const double &megabytes_of_memory) {
    m_megabytes_of_memory = megabytes_of_memory;
    m_megabytes_of_memory_isSet = true;
}

bool OAIAssessedMachineProperties::is_megabytes_of_memory_Set() const{
    return m_megabytes_of_memory_isSet;
}

bool OAIAssessedMachineProperties::is_megabytes_of_memory_Valid() const{
    return m_megabytes_of_memory_isValid;
}

double OAIAssessedMachineProperties::getMegabytesOfMemoryForRecommendedSize() const {
    return m_megabytes_of_memory_for_recommended_size;
}
void OAIAssessedMachineProperties::setMegabytesOfMemoryForRecommendedSize(const double &megabytes_of_memory_for_recommended_size) {
    m_megabytes_of_memory_for_recommended_size = megabytes_of_memory_for_recommended_size;
    m_megabytes_of_memory_for_recommended_size_isSet = true;
}

bool OAIAssessedMachineProperties::is_megabytes_of_memory_for_recommended_size_Set() const{
    return m_megabytes_of_memory_for_recommended_size_isSet;
}

bool OAIAssessedMachineProperties::is_megabytes_of_memory_for_recommended_size_Valid() const{
    return m_megabytes_of_memory_for_recommended_size_isValid;
}

double OAIAssessedMachineProperties::getMonthlyBandwidthCost() const {
    return m_monthly_bandwidth_cost;
}
void OAIAssessedMachineProperties::setMonthlyBandwidthCost(const double &monthly_bandwidth_cost) {
    m_monthly_bandwidth_cost = monthly_bandwidth_cost;
    m_monthly_bandwidth_cost_isSet = true;
}

bool OAIAssessedMachineProperties::is_monthly_bandwidth_cost_Set() const{
    return m_monthly_bandwidth_cost_isSet;
}

bool OAIAssessedMachineProperties::is_monthly_bandwidth_cost_Valid() const{
    return m_monthly_bandwidth_cost_isValid;
}

double OAIAssessedMachineProperties::getMonthlyComputeCostForRecommendedSize() const {
    return m_monthly_compute_cost_for_recommended_size;
}
void OAIAssessedMachineProperties::setMonthlyComputeCostForRecommendedSize(const double &monthly_compute_cost_for_recommended_size) {
    m_monthly_compute_cost_for_recommended_size = monthly_compute_cost_for_recommended_size;
    m_monthly_compute_cost_for_recommended_size_isSet = true;
}

bool OAIAssessedMachineProperties::is_monthly_compute_cost_for_recommended_size_Set() const{
    return m_monthly_compute_cost_for_recommended_size_isSet;
}

bool OAIAssessedMachineProperties::is_monthly_compute_cost_for_recommended_size_Valid() const{
    return m_monthly_compute_cost_for_recommended_size_isValid;
}

double OAIAssessedMachineProperties::getMonthlyStorageCost() const {
    return m_monthly_storage_cost;
}
void OAIAssessedMachineProperties::setMonthlyStorageCost(const double &monthly_storage_cost) {
    m_monthly_storage_cost = monthly_storage_cost;
    m_monthly_storage_cost_isSet = true;
}

bool OAIAssessedMachineProperties::is_monthly_storage_cost_Set() const{
    return m_monthly_storage_cost_isSet;
}

bool OAIAssessedMachineProperties::is_monthly_storage_cost_Valid() const{
    return m_monthly_storage_cost_isValid;
}

QMap<QString, OAIAssessedNetworkAdapter> OAIAssessedMachineProperties::getNetworkAdapters() const {
    return m_network_adapters;
}
void OAIAssessedMachineProperties::setNetworkAdapters(const QMap<QString, OAIAssessedNetworkAdapter> &network_adapters) {
    m_network_adapters = network_adapters;
    m_network_adapters_isSet = true;
}

bool OAIAssessedMachineProperties::is_network_adapters_Set() const{
    return m_network_adapters_isSet;
}

bool OAIAssessedMachineProperties::is_network_adapters_Valid() const{
    return m_network_adapters_isValid;
}

qint32 OAIAssessedMachineProperties::getNumberOfCores() const {
    return m_number_of_cores;
}
void OAIAssessedMachineProperties::setNumberOfCores(const qint32 &number_of_cores) {
    m_number_of_cores = number_of_cores;
    m_number_of_cores_isSet = true;
}

bool OAIAssessedMachineProperties::is_number_of_cores_Set() const{
    return m_number_of_cores_isSet;
}

bool OAIAssessedMachineProperties::is_number_of_cores_Valid() const{
    return m_number_of_cores_isValid;
}

qint32 OAIAssessedMachineProperties::getNumberOfCoresForRecommendedSize() const {
    return m_number_of_cores_for_recommended_size;
}
void OAIAssessedMachineProperties::setNumberOfCoresForRecommendedSize(const qint32 &number_of_cores_for_recommended_size) {
    m_number_of_cores_for_recommended_size = number_of_cores_for_recommended_size;
    m_number_of_cores_for_recommended_size_isSet = true;
}

bool OAIAssessedMachineProperties::is_number_of_cores_for_recommended_size_Set() const{
    return m_number_of_cores_for_recommended_size_isSet;
}

bool OAIAssessedMachineProperties::is_number_of_cores_for_recommended_size_Valid() const{
    return m_number_of_cores_for_recommended_size_isValid;
}

QString OAIAssessedMachineProperties::getOperatingSystem() const {
    return m_operating_system;
}
void OAIAssessedMachineProperties::setOperatingSystem(const QString &operating_system) {
    m_operating_system = operating_system;
    m_operating_system_isSet = true;
}

bool OAIAssessedMachineProperties::is_operating_system_Set() const{
    return m_operating_system_isSet;
}

bool OAIAssessedMachineProperties::is_operating_system_Valid() const{
    return m_operating_system_isValid;
}

double OAIAssessedMachineProperties::getPercentageCoresUtilization() const {
    return m_percentage_cores_utilization;
}
void OAIAssessedMachineProperties::setPercentageCoresUtilization(const double &percentage_cores_utilization) {
    m_percentage_cores_utilization = percentage_cores_utilization;
    m_percentage_cores_utilization_isSet = true;
}

bool OAIAssessedMachineProperties::is_percentage_cores_utilization_Set() const{
    return m_percentage_cores_utilization_isSet;
}

bool OAIAssessedMachineProperties::is_percentage_cores_utilization_Valid() const{
    return m_percentage_cores_utilization_isValid;
}

qint32 OAIAssessedMachineProperties::getPercentageCoresUtilizationDataPointsExpected() const {
    return m_percentage_cores_utilization_data_points_expected;
}
void OAIAssessedMachineProperties::setPercentageCoresUtilizationDataPointsExpected(const qint32 &percentage_cores_utilization_data_points_expected) {
    m_percentage_cores_utilization_data_points_expected = percentage_cores_utilization_data_points_expected;
    m_percentage_cores_utilization_data_points_expected_isSet = true;
}

bool OAIAssessedMachineProperties::is_percentage_cores_utilization_data_points_expected_Set() const{
    return m_percentage_cores_utilization_data_points_expected_isSet;
}

bool OAIAssessedMachineProperties::is_percentage_cores_utilization_data_points_expected_Valid() const{
    return m_percentage_cores_utilization_data_points_expected_isValid;
}

qint32 OAIAssessedMachineProperties::getPercentageCoresUtilizationDataPointsReceived() const {
    return m_percentage_cores_utilization_data_points_received;
}
void OAIAssessedMachineProperties::setPercentageCoresUtilizationDataPointsReceived(const qint32 &percentage_cores_utilization_data_points_received) {
    m_percentage_cores_utilization_data_points_received = percentage_cores_utilization_data_points_received;
    m_percentage_cores_utilization_data_points_received_isSet = true;
}

bool OAIAssessedMachineProperties::is_percentage_cores_utilization_data_points_received_Set() const{
    return m_percentage_cores_utilization_data_points_received_isSet;
}

bool OAIAssessedMachineProperties::is_percentage_cores_utilization_data_points_received_Valid() const{
    return m_percentage_cores_utilization_data_points_received_isValid;
}

double OAIAssessedMachineProperties::getPercentageMemoryUtilization() const {
    return m_percentage_memory_utilization;
}
void OAIAssessedMachineProperties::setPercentageMemoryUtilization(const double &percentage_memory_utilization) {
    m_percentage_memory_utilization = percentage_memory_utilization;
    m_percentage_memory_utilization_isSet = true;
}

bool OAIAssessedMachineProperties::is_percentage_memory_utilization_Set() const{
    return m_percentage_memory_utilization_isSet;
}

bool OAIAssessedMachineProperties::is_percentage_memory_utilization_Valid() const{
    return m_percentage_memory_utilization_isValid;
}

qint32 OAIAssessedMachineProperties::getPercentageMemoryUtilizationDataPointsExpected() const {
    return m_percentage_memory_utilization_data_points_expected;
}
void OAIAssessedMachineProperties::setPercentageMemoryUtilizationDataPointsExpected(const qint32 &percentage_memory_utilization_data_points_expected) {
    m_percentage_memory_utilization_data_points_expected = percentage_memory_utilization_data_points_expected;
    m_percentage_memory_utilization_data_points_expected_isSet = true;
}

bool OAIAssessedMachineProperties::is_percentage_memory_utilization_data_points_expected_Set() const{
    return m_percentage_memory_utilization_data_points_expected_isSet;
}

bool OAIAssessedMachineProperties::is_percentage_memory_utilization_data_points_expected_Valid() const{
    return m_percentage_memory_utilization_data_points_expected_isValid;
}

qint32 OAIAssessedMachineProperties::getPercentageMemoryUtilizationDataPointsReceived() const {
    return m_percentage_memory_utilization_data_points_received;
}
void OAIAssessedMachineProperties::setPercentageMemoryUtilizationDataPointsReceived(const qint32 &percentage_memory_utilization_data_points_received) {
    m_percentage_memory_utilization_data_points_received = percentage_memory_utilization_data_points_received;
    m_percentage_memory_utilization_data_points_received_isSet = true;
}

bool OAIAssessedMachineProperties::is_percentage_memory_utilization_data_points_received_Set() const{
    return m_percentage_memory_utilization_data_points_received_isSet;
}

bool OAIAssessedMachineProperties::is_percentage_memory_utilization_data_points_received_Valid() const{
    return m_percentage_memory_utilization_data_points_received_isValid;
}

QString OAIAssessedMachineProperties::getRecommendedSize() const {
    return m_recommended_size;
}
void OAIAssessedMachineProperties::setRecommendedSize(const QString &recommended_size) {
    m_recommended_size = recommended_size;
    m_recommended_size_isSet = true;
}

bool OAIAssessedMachineProperties::is_recommended_size_Set() const{
    return m_recommended_size_isSet;
}

bool OAIAssessedMachineProperties::is_recommended_size_Valid() const{
    return m_recommended_size_isValid;
}

QString OAIAssessedMachineProperties::getSuitability() const {
    return m_suitability;
}
void OAIAssessedMachineProperties::setSuitability(const QString &suitability) {
    m_suitability = suitability;
    m_suitability_isSet = true;
}

bool OAIAssessedMachineProperties::is_suitability_Set() const{
    return m_suitability_isSet;
}

bool OAIAssessedMachineProperties::is_suitability_Valid() const{
    return m_suitability_isValid;
}

QString OAIAssessedMachineProperties::getSuitabilityExplanation() const {
    return m_suitability_explanation;
}
void OAIAssessedMachineProperties::setSuitabilityExplanation(const QString &suitability_explanation) {
    m_suitability_explanation = suitability_explanation;
    m_suitability_explanation_isSet = true;
}

bool OAIAssessedMachineProperties::is_suitability_explanation_Set() const{
    return m_suitability_explanation_isSet;
}

bool OAIAssessedMachineProperties::is_suitability_explanation_Valid() const{
    return m_suitability_explanation_isValid;
}

QDateTime OAIAssessedMachineProperties::getUpdatedTimestamp() const {
    return m_updated_timestamp;
}
void OAIAssessedMachineProperties::setUpdatedTimestamp(const QDateTime &updated_timestamp) {
    m_updated_timestamp = updated_timestamp;
    m_updated_timestamp_isSet = true;
}

bool OAIAssessedMachineProperties::is_updated_timestamp_Set() const{
    return m_updated_timestamp_isSet;
}

bool OAIAssessedMachineProperties::is_updated_timestamp_Valid() const{
    return m_updated_timestamp_isValid;
}

bool OAIAssessedMachineProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_boot_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datacenter_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datacenter_machine_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datacenter_management_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datacenter_management_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovered_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_megabytes_of_memory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_megabytes_of_memory_for_recommended_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_bandwidth_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_compute_cost_for_recommended_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_storage_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_adapters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_cores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_cores_for_recommended_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_cores_utilization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_cores_utilization_data_points_expected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_cores_utilization_data_points_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_memory_utilization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_memory_utilization_data_points_expected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_memory_utilization_data_points_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suitability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suitability_explanation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssessedMachineProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
