/*
 * Azure Migrate
 * Move your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-02-02
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of group resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:36.239493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GroupProperties {
  public static final String SERIALIZED_NAME_ASSESSMENTS = "assessments";
  @SerializedName(SERIALIZED_NAME_ASSESSMENTS)
  private List<String> assessments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "createdTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private OffsetDateTime createdTimestamp;

  public static final String SERIALIZED_NAME_MACHINES = "machines";
  @SerializedName(SERIALIZED_NAME_MACHINES)
  private List<String> machines = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATED_TIMESTAMP = "updatedTimestamp";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIMESTAMP)
  private OffsetDateTime updatedTimestamp;

  public GroupProperties() {
  }

  public GroupProperties(
     List<String> assessments, 
     OffsetDateTime createdTimestamp, 
     OffsetDateTime updatedTimestamp
  ) {
    this();
    this.assessments = assessments;
    this.createdTimestamp = createdTimestamp;
    this.updatedTimestamp = updatedTimestamp;
  }

  /**
   * List of References to Assessments created on this group.
   * @return assessments
   */
  @javax.annotation.Nullable
  public List<String> getAssessments() {
    return assessments;
  }



  /**
   * Time when this project was created. Date-Time represented in ISO-8601 format.
   * @return createdTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTimestamp() {
    return createdTimestamp;
  }



  public GroupProperties machines(List<String> machines) {
    this.machines = machines;
    return this;
  }

  public GroupProperties addMachinesItem(String machinesItem) {
    if (this.machines == null) {
      this.machines = new ArrayList<>();
    }
    this.machines.add(machinesItem);
    return this;
  }

  /**
   * List of machine names that are part of this group.
   * @return machines
   */
  @javax.annotation.Nonnull
  public List<String> getMachines() {
    return machines;
  }

  public void setMachines(List<String> machines) {
    this.machines = machines;
  }


  /**
   * Time when this project was last updated. Date-Time represented in ISO-8601 format.
   * @return updatedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedTimestamp() {
    return updatedTimestamp;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupProperties groupProperties = (GroupProperties) o;
    return Objects.equals(this.assessments, groupProperties.assessments) &&
        Objects.equals(this.createdTimestamp, groupProperties.createdTimestamp) &&
        Objects.equals(this.machines, groupProperties.machines) &&
        Objects.equals(this.updatedTimestamp, groupProperties.updatedTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assessments, createdTimestamp, machines, updatedTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupProperties {\n");
    sb.append("    assessments: ").append(toIndentedString(assessments)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    machines: ").append(toIndentedString(machines)).append("\n");
    sb.append("    updatedTimestamp: ").append(toIndentedString(updatedTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assessments");
    openapiFields.add("createdTimestamp");
    openapiFields.add("machines");
    openapiFields.add("updatedTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("machines");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GroupProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroupProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupProperties is not found in the empty JSON string", GroupProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GroupProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GroupProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GroupProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("assessments") != null && !jsonObj.get("assessments").isJsonNull() && !jsonObj.get("assessments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `assessments` to be an array in the JSON string but got `%s`", jsonObj.get("assessments").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("machines") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("machines").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `machines` to be an array in the JSON string but got `%s`", jsonObj.get("machines").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupProperties>() {
           @Override
           public void write(JsonWriter out, GroupProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GroupProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GroupProperties
   * @throws IOException if the JSON string is invalid with respect to GroupProperties
   */
  public static GroupProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupProperties.class);
  }

  /**
   * Convert an instance of GroupProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

