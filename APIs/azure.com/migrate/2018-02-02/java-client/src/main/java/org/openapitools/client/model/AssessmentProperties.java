/*
 * Azure Migrate
 * Move your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-02-02
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of an assessment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:36.239493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssessmentProperties {
  /**
   * AHUB discount on windows virtual machines.
   */
  @JsonAdapter(AzureHybridUseBenefitEnum.Adapter.class)
  public enum AzureHybridUseBenefitEnum {
    UNKNOWN("Unknown"),
    
    YES("Yes"),
    
    NO("No");

    private String value;

    AzureHybridUseBenefitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AzureHybridUseBenefitEnum fromValue(String value) {
      for (AzureHybridUseBenefitEnum b : AzureHybridUseBenefitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AzureHybridUseBenefitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AzureHybridUseBenefitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AzureHybridUseBenefitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AzureHybridUseBenefitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AzureHybridUseBenefitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AZURE_HYBRID_USE_BENEFIT = "azureHybridUseBenefit";
  @SerializedName(SERIALIZED_NAME_AZURE_HYBRID_USE_BENEFIT)
  private AzureHybridUseBenefitEnum azureHybridUseBenefit;

  /**
   * Target Azure location for which the machines should be assessed. These enums are the same as used by Compute API.
   */
  @JsonAdapter(AzureLocationEnum.Adapter.class)
  public enum AzureLocationEnum {
    UNKNOWN("Unknown"),
    
    EAST_ASIA("EastAsia"),
    
    SOUTHEAST_ASIA("SoutheastAsia"),
    
    AUSTRALIA_EAST("AustraliaEast"),
    
    AUSTRALIA_SOUTHEAST("AustraliaSoutheast"),
    
    BRAZIL_SOUTH("BrazilSouth"),
    
    CANADA_CENTRAL("CanadaCentral"),
    
    CANADA_EAST("CanadaEast"),
    
    WEST_EUROPE("WestEurope"),
    
    NORTH_EUROPE("NorthEurope"),
    
    CENTRAL_INDIA("CentralIndia"),
    
    SOUTH_INDIA("SouthIndia"),
    
    WEST_INDIA("WestIndia"),
    
    JAPAN_EAST("JapanEast"),
    
    JAPAN_WEST("JapanWest"),
    
    KOREA_CENTRAL("KoreaCentral"),
    
    KOREA_SOUTH("KoreaSouth"),
    
    UK_WEST("UkWest"),
    
    UK_SOUTH("UkSouth"),
    
    NORTH_CENTRAL_US("NorthCentralUs"),
    
    EAST_US("EastUs"),
    
    WEST_US2("WestUs2"),
    
    SOUTH_CENTRAL_US("SouthCentralUs"),
    
    CENTRAL_US("CentralUs"),
    
    EAST_US2("EastUs2"),
    
    WEST_US("WestUs"),
    
    WEST_CENTRAL_US("WestCentralUs"),
    
    GERMANY_CENTRAL("GermanyCentral"),
    
    GERMANY_NORTHEAST("GermanyNortheast"),
    
    CHINA_NORTH("ChinaNorth"),
    
    CHINA_EAST("ChinaEast");

    private String value;

    AzureLocationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AzureLocationEnum fromValue(String value) {
      for (AzureLocationEnum b : AzureLocationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AzureLocationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AzureLocationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AzureLocationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AzureLocationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AzureLocationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AZURE_LOCATION = "azureLocation";
  @SerializedName(SERIALIZED_NAME_AZURE_LOCATION)
  private AzureLocationEnum azureLocation;

  /**
   * Offer code according to which cost estimation is done.
   */
  @JsonAdapter(AzureOfferCodeEnum.Adapter.class)
  public enum AzureOfferCodeEnum {
    UNKNOWN("Unknown"),
    
    MSAZR0003_P("MSAZR0003P"),
    
    MSAZR0044_P("MSAZR0044P"),
    
    MSAZR0059_P("MSAZR0059P"),
    
    MSAZR0060_P("MSAZR0060P"),
    
    MSAZR0062_P("MSAZR0062P"),
    
    MSAZR0063_P("MSAZR0063P"),
    
    MSAZR0064_P("MSAZR0064P"),
    
    MSAZR0029_P("MSAZR0029P"),
    
    MSAZR0022_P("MSAZR0022P"),
    
    MSAZR0023_P("MSAZR0023P"),
    
    MSAZR0148_P("MSAZR0148P"),
    
    MSAZR0025_P("MSAZR0025P"),
    
    MSAZR0036_P("MSAZR0036P"),
    
    MSAZR0120_P("MSAZR0120P"),
    
    MSAZR0121_P("MSAZR0121P"),
    
    MSAZR0122_P("MSAZR0122P"),
    
    MSAZR0123_P("MSAZR0123P"),
    
    MSAZR0124_P("MSAZR0124P"),
    
    MSAZR0125_P("MSAZR0125P"),
    
    MSAZR0126_P("MSAZR0126P"),
    
    MSAZR0127_P("MSAZR0127P"),
    
    MSAZR0128_P("MSAZR0128P"),
    
    MSAZR0129_P("MSAZR0129P"),
    
    MSAZR0130_P("MSAZR0130P"),
    
    MSAZR0111_P("MSAZR0111P"),
    
    MSAZR0144_P("MSAZR0144P"),
    
    MSAZR0149_P("MSAZR0149P"),
    
    MSMCAZR0044_P("MSMCAZR0044P"),
    
    MSMCAZR0059_P("MSMCAZR0059P"),
    
    MSMCAZR0060_P("MSMCAZR0060P"),
    
    MSMCAZR0063_P("MSMCAZR0063P"),
    
    MSMCAZR0120_P("MSMCAZR0120P"),
    
    MSMCAZR0121_P("MSMCAZR0121P"),
    
    MSMCAZR0125_P("MSMCAZR0125P"),
    
    MSMCAZR0128_P("MSMCAZR0128P"),
    
    MSAZRDE0003_P("MSAZRDE0003P"),
    
    MSAZRDE0044_P("MSAZRDE0044P");

    private String value;

    AzureOfferCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AzureOfferCodeEnum fromValue(String value) {
      for (AzureOfferCodeEnum b : AzureOfferCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AzureOfferCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AzureOfferCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AzureOfferCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AzureOfferCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AzureOfferCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AZURE_OFFER_CODE = "azureOfferCode";
  @SerializedName(SERIALIZED_NAME_AZURE_OFFER_CODE)
  private AzureOfferCodeEnum azureOfferCode;

  /**
   * Pricing tier for Size evaluation.
   */
  @JsonAdapter(AzurePricingTierEnum.Adapter.class)
  public enum AzurePricingTierEnum {
    STANDARD("Standard"),
    
    BASIC("Basic");

    private String value;

    AzurePricingTierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AzurePricingTierEnum fromValue(String value) {
      for (AzurePricingTierEnum b : AzurePricingTierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AzurePricingTierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AzurePricingTierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AzurePricingTierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AzurePricingTierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AzurePricingTierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AZURE_PRICING_TIER = "azurePricingTier";
  @SerializedName(SERIALIZED_NAME_AZURE_PRICING_TIER)
  private AzurePricingTierEnum azurePricingTier;

  /**
   * Storage Redundancy type offered by Azure.
   */
  @JsonAdapter(AzureStorageRedundancyEnum.Adapter.class)
  public enum AzureStorageRedundancyEnum {
    UNKNOWN("Unknown"),
    
    LOCALLY_REDUNDANT("LocallyRedundant"),
    
    ZONE_REDUNDANT("ZoneRedundant"),
    
    GEO_REDUNDANT("GeoRedundant"),
    
    READ_ACCESS_GEO_REDUNDANT("ReadAccessGeoRedundant");

    private String value;

    AzureStorageRedundancyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AzureStorageRedundancyEnum fromValue(String value) {
      for (AzureStorageRedundancyEnum b : AzureStorageRedundancyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AzureStorageRedundancyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AzureStorageRedundancyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AzureStorageRedundancyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AzureStorageRedundancyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AzureStorageRedundancyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AZURE_STORAGE_REDUNDANCY = "azureStorageRedundancy";
  @SerializedName(SERIALIZED_NAME_AZURE_STORAGE_REDUNDANCY)
  private AzureStorageRedundancyEnum azureStorageRedundancy;

  public static final String SERIALIZED_NAME_CONFIDENCE_RATING_IN_PERCENTAGE = "confidenceRatingInPercentage";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE_RATING_IN_PERCENTAGE)
  private Double confidenceRatingInPercentage;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "createdTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private OffsetDateTime createdTimestamp;

  /**
   * Currency to report prices in.
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
  public enum CurrencyEnum {
    UNKNOWN("Unknown"),
    
    USD("USD"),
    
    DKK("DKK"),
    
    CAD("CAD"),
    
    IDR("IDR"),
    
    JPY("JPY"),
    
    KRW("KRW"),
    
    NZD("NZD"),
    
    NOK("NOK"),
    
    RUB("RUB"),
    
    SAR("SAR"),
    
    ZAR("ZAR"),
    
    SEK("SEK"),
    
    TRY("TRY"),
    
    GBP("GBP"),
    
    MXN("MXN"),
    
    MYR("MYR"),
    
    INR("INR"),
    
    HKD("HKD"),
    
    BRL("BRL"),
    
    TWD("TWD"),
    
    EUR("EUR"),
    
    CHF("CHF"),
    
    ARS("ARS"),
    
    AUD("AUD"),
    
    CNY("CNY");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurrencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency;

  public static final String SERIALIZED_NAME_DISCOUNT_PERCENTAGE = "discountPercentage";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_PERCENTAGE)
  private Double discountPercentage;

  public static final String SERIALIZED_NAME_MONTHLY_BANDWIDTH_COST = "monthlyBandwidthCost";
  @SerializedName(SERIALIZED_NAME_MONTHLY_BANDWIDTH_COST)
  private Double monthlyBandwidthCost;

  public static final String SERIALIZED_NAME_MONTHLY_COMPUTE_COST = "monthlyComputeCost";
  @SerializedName(SERIALIZED_NAME_MONTHLY_COMPUTE_COST)
  private Double monthlyComputeCost;

  public static final String SERIALIZED_NAME_MONTHLY_STORAGE_COST = "monthlyStorageCost";
  @SerializedName(SERIALIZED_NAME_MONTHLY_STORAGE_COST)
  private Double monthlyStorageCost;

  public static final String SERIALIZED_NAME_NUMBER_OF_MACHINES = "numberOfMachines";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_MACHINES)
  private Integer numberOfMachines;

  /**
   * Percentile of performance data used to recommend Azure size.
   */
  @JsonAdapter(PercentileEnum.Adapter.class)
  public enum PercentileEnum {
    PERCENTILE50("Percentile50"),
    
    PERCENTILE90("Percentile90"),
    
    PERCENTILE95("Percentile95"),
    
    PERCENTILE99("Percentile99");

    private String value;

    PercentileEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PercentileEnum fromValue(String value) {
      for (PercentileEnum b : PercentileEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PercentileEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PercentileEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PercentileEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PercentileEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PercentileEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERCENTILE = "percentile";
  @SerializedName(SERIALIZED_NAME_PERCENTILE)
  private PercentileEnum percentile;

  public static final String SERIALIZED_NAME_PRICES_TIMESTAMP = "pricesTimestamp";
  @SerializedName(SERIALIZED_NAME_PRICES_TIMESTAMP)
  private OffsetDateTime pricesTimestamp;

  public static final String SERIALIZED_NAME_SCALING_FACTOR = "scalingFactor";
  @SerializedName(SERIALIZED_NAME_SCALING_FACTOR)
  private Double scalingFactor;

  /**
   * Assessment sizing criterion.
   */
  @JsonAdapter(SizingCriterionEnum.Adapter.class)
  public enum SizingCriterionEnum {
    PERFORMANCE_BASED("PerformanceBased"),
    
    AS_ON_PREMISES("AsOnPremises");

    private String value;

    SizingCriterionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SizingCriterionEnum fromValue(String value) {
      for (SizingCriterionEnum b : SizingCriterionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SizingCriterionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SizingCriterionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SizingCriterionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SizingCriterionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SizingCriterionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIZING_CRITERION = "sizingCriterion";
  @SerializedName(SERIALIZED_NAME_SIZING_CRITERION)
  private SizingCriterionEnum sizingCriterion;

  /**
   * User configurable setting that describes the status of the assessment.
   */
  @JsonAdapter(StageEnum.Adapter.class)
  public enum StageEnum {
    IN_PROGRESS("InProgress"),
    
    UNDER_REVIEW("UnderReview"),
    
    APPROVED("Approved");

    private String value;

    StageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StageEnum fromValue(String value) {
      for (StageEnum b : StageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STAGE = "stage";
  @SerializedName(SERIALIZED_NAME_STAGE)
  private StageEnum stage;

  /**
   * Whether the assessment has been created and is valid.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CREATED("Created"),
    
    UPDATED("Updated"),
    
    RUNNING("Running"),
    
    COMPLETED("Completed"),
    
    INVALID("Invalid");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * Time range of performance data used to recommend a size.
   */
  @JsonAdapter(TimeRangeEnum.Adapter.class)
  public enum TimeRangeEnum {
    DAY("Day"),
    
    WEEK("Week"),
    
    MONTH("Month");

    private String value;

    TimeRangeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TimeRangeEnum fromValue(String value) {
      for (TimeRangeEnum b : TimeRangeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TimeRangeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TimeRangeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TimeRangeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TimeRangeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TimeRangeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIME_RANGE = "timeRange";
  @SerializedName(SERIALIZED_NAME_TIME_RANGE)
  private TimeRangeEnum timeRange;

  public static final String SERIALIZED_NAME_UPDATED_TIMESTAMP = "updatedTimestamp";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIMESTAMP)
  private OffsetDateTime updatedTimestamp;

  public AssessmentProperties() {
  }

  public AssessmentProperties(
     Double confidenceRatingInPercentage, 
     OffsetDateTime createdTimestamp, 
     Double monthlyBandwidthCost, 
     Double monthlyComputeCost, 
     Double monthlyStorageCost, 
     Integer numberOfMachines, 
     OffsetDateTime pricesTimestamp, 
     StatusEnum status, 
     OffsetDateTime updatedTimestamp
  ) {
    this();
    this.confidenceRatingInPercentage = confidenceRatingInPercentage;
    this.createdTimestamp = createdTimestamp;
    this.monthlyBandwidthCost = monthlyBandwidthCost;
    this.monthlyComputeCost = monthlyComputeCost;
    this.monthlyStorageCost = monthlyStorageCost;
    this.numberOfMachines = numberOfMachines;
    this.pricesTimestamp = pricesTimestamp;
    this.status = status;
    this.updatedTimestamp = updatedTimestamp;
  }

  public AssessmentProperties azureHybridUseBenefit(AzureHybridUseBenefitEnum azureHybridUseBenefit) {
    this.azureHybridUseBenefit = azureHybridUseBenefit;
    return this;
  }

  /**
   * AHUB discount on windows virtual machines.
   * @return azureHybridUseBenefit
   */
  @javax.annotation.Nonnull
  public AzureHybridUseBenefitEnum getAzureHybridUseBenefit() {
    return azureHybridUseBenefit;
  }

  public void setAzureHybridUseBenefit(AzureHybridUseBenefitEnum azureHybridUseBenefit) {
    this.azureHybridUseBenefit = azureHybridUseBenefit;
  }


  public AssessmentProperties azureLocation(AzureLocationEnum azureLocation) {
    this.azureLocation = azureLocation;
    return this;
  }

  /**
   * Target Azure location for which the machines should be assessed. These enums are the same as used by Compute API.
   * @return azureLocation
   */
  @javax.annotation.Nonnull
  public AzureLocationEnum getAzureLocation() {
    return azureLocation;
  }

  public void setAzureLocation(AzureLocationEnum azureLocation) {
    this.azureLocation = azureLocation;
  }


  public AssessmentProperties azureOfferCode(AzureOfferCodeEnum azureOfferCode) {
    this.azureOfferCode = azureOfferCode;
    return this;
  }

  /**
   * Offer code according to which cost estimation is done.
   * @return azureOfferCode
   */
  @javax.annotation.Nonnull
  public AzureOfferCodeEnum getAzureOfferCode() {
    return azureOfferCode;
  }

  public void setAzureOfferCode(AzureOfferCodeEnum azureOfferCode) {
    this.azureOfferCode = azureOfferCode;
  }


  public AssessmentProperties azurePricingTier(AzurePricingTierEnum azurePricingTier) {
    this.azurePricingTier = azurePricingTier;
    return this;
  }

  /**
   * Pricing tier for Size evaluation.
   * @return azurePricingTier
   */
  @javax.annotation.Nonnull
  public AzurePricingTierEnum getAzurePricingTier() {
    return azurePricingTier;
  }

  public void setAzurePricingTier(AzurePricingTierEnum azurePricingTier) {
    this.azurePricingTier = azurePricingTier;
  }


  public AssessmentProperties azureStorageRedundancy(AzureStorageRedundancyEnum azureStorageRedundancy) {
    this.azureStorageRedundancy = azureStorageRedundancy;
    return this;
  }

  /**
   * Storage Redundancy type offered by Azure.
   * @return azureStorageRedundancy
   */
  @javax.annotation.Nonnull
  public AzureStorageRedundancyEnum getAzureStorageRedundancy() {
    return azureStorageRedundancy;
  }

  public void setAzureStorageRedundancy(AzureStorageRedundancyEnum azureStorageRedundancy) {
    this.azureStorageRedundancy = azureStorageRedundancy;
  }


  /**
   * Confidence rating percentage for assessment. Can be in the range [0, 100].
   * @return confidenceRatingInPercentage
   */
  @javax.annotation.Nullable
  public Double getConfidenceRatingInPercentage() {
    return confidenceRatingInPercentage;
  }



  /**
   * Time when this project was created. Date-Time represented in ISO-8601 format.
   * @return createdTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTimestamp() {
    return createdTimestamp;
  }



  public AssessmentProperties currency(CurrencyEnum currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Currency to report prices in.
   * @return currency
   */
  @javax.annotation.Nonnull
  public CurrencyEnum getCurrency() {
    return currency;
  }

  public void setCurrency(CurrencyEnum currency) {
    this.currency = currency;
  }


  public AssessmentProperties discountPercentage(Double discountPercentage) {
    this.discountPercentage = discountPercentage;
    return this;
  }

  /**
   * Custom discount percentage to be applied on final costs. Can be in the range [0, 100].
   * @return discountPercentage
   */
  @javax.annotation.Nonnull
  public Double getDiscountPercentage() {
    return discountPercentage;
  }

  public void setDiscountPercentage(Double discountPercentage) {
    this.discountPercentage = discountPercentage;
  }


  /**
   * Monthly network cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
   * @return monthlyBandwidthCost
   */
  @javax.annotation.Nullable
  public Double getMonthlyBandwidthCost() {
    return monthlyBandwidthCost;
  }



  /**
   * Monthly compute cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
   * @return monthlyComputeCost
   */
  @javax.annotation.Nullable
  public Double getMonthlyComputeCost() {
    return monthlyComputeCost;
  }



  /**
   * Monthly storage cost estimate for the machines that are part of this assessment as a group, for a 31-day month.
   * @return monthlyStorageCost
   */
  @javax.annotation.Nullable
  public Double getMonthlyStorageCost() {
    return monthlyStorageCost;
  }



  /**
   * Number of assessed machines part of this assessment.
   * @return numberOfMachines
   */
  @javax.annotation.Nullable
  public Integer getNumberOfMachines() {
    return numberOfMachines;
  }



  public AssessmentProperties percentile(PercentileEnum percentile) {
    this.percentile = percentile;
    return this;
  }

  /**
   * Percentile of performance data used to recommend Azure size.
   * @return percentile
   */
  @javax.annotation.Nonnull
  public PercentileEnum getPercentile() {
    return percentile;
  }

  public void setPercentile(PercentileEnum percentile) {
    this.percentile = percentile;
  }


  /**
   * Time when the Azure Prices were queried. Date-Time represented in ISO-8601 format.
   * @return pricesTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPricesTimestamp() {
    return pricesTimestamp;
  }



  public AssessmentProperties scalingFactor(Double scalingFactor) {
    this.scalingFactor = scalingFactor;
    return this;
  }

  /**
   * Scaling factor used over utilization data to add a performance buffer for new machines to be created in Azure. Min Value &#x3D; 1.0, Max value &#x3D; 1.9, Default &#x3D; 1.3.
   * @return scalingFactor
   */
  @javax.annotation.Nonnull
  public Double getScalingFactor() {
    return scalingFactor;
  }

  public void setScalingFactor(Double scalingFactor) {
    this.scalingFactor = scalingFactor;
  }


  public AssessmentProperties sizingCriterion(SizingCriterionEnum sizingCriterion) {
    this.sizingCriterion = sizingCriterion;
    return this;
  }

  /**
   * Assessment sizing criterion.
   * @return sizingCriterion
   */
  @javax.annotation.Nonnull
  public SizingCriterionEnum getSizingCriterion() {
    return sizingCriterion;
  }

  public void setSizingCriterion(SizingCriterionEnum sizingCriterion) {
    this.sizingCriterion = sizingCriterion;
  }


  public AssessmentProperties stage(StageEnum stage) {
    this.stage = stage;
    return this;
  }

  /**
   * User configurable setting that describes the status of the assessment.
   * @return stage
   */
  @javax.annotation.Nonnull
  public StageEnum getStage() {
    return stage;
  }

  public void setStage(StageEnum stage) {
    this.stage = stage;
  }


  /**
   * Whether the assessment has been created and is valid.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }



  public AssessmentProperties timeRange(TimeRangeEnum timeRange) {
    this.timeRange = timeRange;
    return this;
  }

  /**
   * Time range of performance data used to recommend a size.
   * @return timeRange
   */
  @javax.annotation.Nonnull
  public TimeRangeEnum getTimeRange() {
    return timeRange;
  }

  public void setTimeRange(TimeRangeEnum timeRange) {
    this.timeRange = timeRange;
  }


  /**
   * Time when this project was last updated. Date-Time represented in ISO-8601 format.
   * @return updatedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedTimestamp() {
    return updatedTimestamp;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssessmentProperties assessmentProperties = (AssessmentProperties) o;
    return Objects.equals(this.azureHybridUseBenefit, assessmentProperties.azureHybridUseBenefit) &&
        Objects.equals(this.azureLocation, assessmentProperties.azureLocation) &&
        Objects.equals(this.azureOfferCode, assessmentProperties.azureOfferCode) &&
        Objects.equals(this.azurePricingTier, assessmentProperties.azurePricingTier) &&
        Objects.equals(this.azureStorageRedundancy, assessmentProperties.azureStorageRedundancy) &&
        Objects.equals(this.confidenceRatingInPercentage, assessmentProperties.confidenceRatingInPercentage) &&
        Objects.equals(this.createdTimestamp, assessmentProperties.createdTimestamp) &&
        Objects.equals(this.currency, assessmentProperties.currency) &&
        Objects.equals(this.discountPercentage, assessmentProperties.discountPercentage) &&
        Objects.equals(this.monthlyBandwidthCost, assessmentProperties.monthlyBandwidthCost) &&
        Objects.equals(this.monthlyComputeCost, assessmentProperties.monthlyComputeCost) &&
        Objects.equals(this.monthlyStorageCost, assessmentProperties.monthlyStorageCost) &&
        Objects.equals(this.numberOfMachines, assessmentProperties.numberOfMachines) &&
        Objects.equals(this.percentile, assessmentProperties.percentile) &&
        Objects.equals(this.pricesTimestamp, assessmentProperties.pricesTimestamp) &&
        Objects.equals(this.scalingFactor, assessmentProperties.scalingFactor) &&
        Objects.equals(this.sizingCriterion, assessmentProperties.sizingCriterion) &&
        Objects.equals(this.stage, assessmentProperties.stage) &&
        Objects.equals(this.status, assessmentProperties.status) &&
        Objects.equals(this.timeRange, assessmentProperties.timeRange) &&
        Objects.equals(this.updatedTimestamp, assessmentProperties.updatedTimestamp);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(azureHybridUseBenefit, azureLocation, azureOfferCode, azurePricingTier, azureStorageRedundancy, confidenceRatingInPercentage, createdTimestamp, currency, discountPercentage, monthlyBandwidthCost, monthlyComputeCost, monthlyStorageCost, numberOfMachines, percentile, pricesTimestamp, scalingFactor, sizingCriterion, stage, status, timeRange, updatedTimestamp);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssessmentProperties {\n");
    sb.append("    azureHybridUseBenefit: ").append(toIndentedString(azureHybridUseBenefit)).append("\n");
    sb.append("    azureLocation: ").append(toIndentedString(azureLocation)).append("\n");
    sb.append("    azureOfferCode: ").append(toIndentedString(azureOfferCode)).append("\n");
    sb.append("    azurePricingTier: ").append(toIndentedString(azurePricingTier)).append("\n");
    sb.append("    azureStorageRedundancy: ").append(toIndentedString(azureStorageRedundancy)).append("\n");
    sb.append("    confidenceRatingInPercentage: ").append(toIndentedString(confidenceRatingInPercentage)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    discountPercentage: ").append(toIndentedString(discountPercentage)).append("\n");
    sb.append("    monthlyBandwidthCost: ").append(toIndentedString(monthlyBandwidthCost)).append("\n");
    sb.append("    monthlyComputeCost: ").append(toIndentedString(monthlyComputeCost)).append("\n");
    sb.append("    monthlyStorageCost: ").append(toIndentedString(monthlyStorageCost)).append("\n");
    sb.append("    numberOfMachines: ").append(toIndentedString(numberOfMachines)).append("\n");
    sb.append("    percentile: ").append(toIndentedString(percentile)).append("\n");
    sb.append("    pricesTimestamp: ").append(toIndentedString(pricesTimestamp)).append("\n");
    sb.append("    scalingFactor: ").append(toIndentedString(scalingFactor)).append("\n");
    sb.append("    sizingCriterion: ").append(toIndentedString(sizingCriterion)).append("\n");
    sb.append("    stage: ").append(toIndentedString(stage)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timeRange: ").append(toIndentedString(timeRange)).append("\n");
    sb.append("    updatedTimestamp: ").append(toIndentedString(updatedTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("azureHybridUseBenefit");
    openapiFields.add("azureLocation");
    openapiFields.add("azureOfferCode");
    openapiFields.add("azurePricingTier");
    openapiFields.add("azureStorageRedundancy");
    openapiFields.add("confidenceRatingInPercentage");
    openapiFields.add("createdTimestamp");
    openapiFields.add("currency");
    openapiFields.add("discountPercentage");
    openapiFields.add("monthlyBandwidthCost");
    openapiFields.add("monthlyComputeCost");
    openapiFields.add("monthlyStorageCost");
    openapiFields.add("numberOfMachines");
    openapiFields.add("percentile");
    openapiFields.add("pricesTimestamp");
    openapiFields.add("scalingFactor");
    openapiFields.add("sizingCriterion");
    openapiFields.add("stage");
    openapiFields.add("status");
    openapiFields.add("timeRange");
    openapiFields.add("updatedTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("azureHybridUseBenefit");
    openapiRequiredFields.add("azureLocation");
    openapiRequiredFields.add("azureOfferCode");
    openapiRequiredFields.add("azurePricingTier");
    openapiRequiredFields.add("azureStorageRedundancy");
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("discountPercentage");
    openapiRequiredFields.add("percentile");
    openapiRequiredFields.add("scalingFactor");
    openapiRequiredFields.add("sizingCriterion");
    openapiRequiredFields.add("stage");
    openapiRequiredFields.add("timeRange");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssessmentProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssessmentProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssessmentProperties is not found in the empty JSON string", AssessmentProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssessmentProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssessmentProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssessmentProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("azureHybridUseBenefit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azureHybridUseBenefit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azureHybridUseBenefit").toString()));
      }
      // validate the required field `azureHybridUseBenefit`
      AzureHybridUseBenefitEnum.validateJsonElement(jsonObj.get("azureHybridUseBenefit"));
      if (!jsonObj.get("azureLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azureLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azureLocation").toString()));
      }
      // validate the required field `azureLocation`
      AzureLocationEnum.validateJsonElement(jsonObj.get("azureLocation"));
      if (!jsonObj.get("azureOfferCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azureOfferCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azureOfferCode").toString()));
      }
      // validate the required field `azureOfferCode`
      AzureOfferCodeEnum.validateJsonElement(jsonObj.get("azureOfferCode"));
      if (!jsonObj.get("azurePricingTier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azurePricingTier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azurePricingTier").toString()));
      }
      // validate the required field `azurePricingTier`
      AzurePricingTierEnum.validateJsonElement(jsonObj.get("azurePricingTier"));
      if (!jsonObj.get("azureStorageRedundancy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `azureStorageRedundancy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("azureStorageRedundancy").toString()));
      }
      // validate the required field `azureStorageRedundancy`
      AzureStorageRedundancyEnum.validateJsonElement(jsonObj.get("azureStorageRedundancy"));
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the required field `currency`
      CurrencyEnum.validateJsonElement(jsonObj.get("currency"));
      if (!jsonObj.get("percentile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `percentile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("percentile").toString()));
      }
      // validate the required field `percentile`
      PercentileEnum.validateJsonElement(jsonObj.get("percentile"));
      if (!jsonObj.get("sizingCriterion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sizingCriterion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sizingCriterion").toString()));
      }
      // validate the required field `sizingCriterion`
      SizingCriterionEnum.validateJsonElement(jsonObj.get("sizingCriterion"));
      if (!jsonObj.get("stage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stage").toString()));
      }
      // validate the required field `stage`
      StageEnum.validateJsonElement(jsonObj.get("stage"));
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if (!jsonObj.get("timeRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeRange").toString()));
      }
      // validate the required field `timeRange`
      TimeRangeEnum.validateJsonElement(jsonObj.get("timeRange"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssessmentProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssessmentProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssessmentProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssessmentProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AssessmentProperties>() {
           @Override
           public void write(JsonWriter out, AssessmentProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssessmentProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssessmentProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssessmentProperties
   * @throws IOException if the JSON string is invalid with respect to AssessmentProperties
   */
  public static AssessmentProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssessmentProperties.class);
  }

  /**
   * Convert an instance of AssessmentProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

