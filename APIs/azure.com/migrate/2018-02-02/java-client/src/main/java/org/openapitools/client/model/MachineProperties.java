/*
 * Azure Migrate
 * Move your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-02-02
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Disk;
import org.openapitools.client.model.NetworkAdapter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a machine.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:36.239493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MachineProperties {
  /**
   * Boot type of the machine.
   */
  @JsonAdapter(BootTypeEnum.Adapter.class)
  public enum BootTypeEnum {
    UNKNOWN("Unknown"),
    
    EFI("EFI"),
    
    BIOS("BIOS");

    private String value;

    BootTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BootTypeEnum fromValue(String value) {
      for (BootTypeEnum b : BootTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BootTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BootTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BootTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BootTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BootTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BOOT_TYPE = "bootType";
  @SerializedName(SERIALIZED_NAME_BOOT_TYPE)
  private BootTypeEnum bootType;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "createdTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private OffsetDateTime createdTimestamp;

  public static final String SERIALIZED_NAME_DATACENTER_CONTAINER = "datacenterContainer";
  @SerializedName(SERIALIZED_NAME_DATACENTER_CONTAINER)
  private String datacenterContainer;

  public static final String SERIALIZED_NAME_DATACENTER_MACHINE_ID = "datacenterMachineId";
  @SerializedName(SERIALIZED_NAME_DATACENTER_MACHINE_ID)
  private String datacenterMachineId;

  public static final String SERIALIZED_NAME_DATACENTER_MANAGEMENT_SERVER = "datacenterManagementServer";
  @SerializedName(SERIALIZED_NAME_DATACENTER_MANAGEMENT_SERVER)
  private String datacenterManagementServer;

  public static final String SERIALIZED_NAME_DATACENTER_MANAGEMENT_SERVER_ID = "datacenterManagementServerId";
  @SerializedName(SERIALIZED_NAME_DATACENTER_MANAGEMENT_SERVER_ID)
  private String datacenterManagementServerId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISCOVERED_TIMESTAMP = "discoveredTimestamp";
  @SerializedName(SERIALIZED_NAME_DISCOVERED_TIMESTAMP)
  private OffsetDateTime discoveredTimestamp;

  public static final String SERIALIZED_NAME_DISKS = "disks";
  @SerializedName(SERIALIZED_NAME_DISKS)
  private Map<String, Disk> disks = new HashMap<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<String> groups = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEGABYTES_OF_MEMORY = "megabytesOfMemory";
  @SerializedName(SERIALIZED_NAME_MEGABYTES_OF_MEMORY)
  private BigDecimal megabytesOfMemory;

  public static final String SERIALIZED_NAME_NETWORK_ADAPTERS = "networkAdapters";
  @SerializedName(SERIALIZED_NAME_NETWORK_ADAPTERS)
  private Map<String, NetworkAdapter> networkAdapters = new HashMap<>();

  public static final String SERIALIZED_NAME_NUMBER_OF_CORES = "numberOfCores";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_CORES)
  private Integer numberOfCores;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM = "operatingSystem";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM)
  private String operatingSystem;

  public static final String SERIALIZED_NAME_UPDATED_TIMESTAMP = "updatedTimestamp";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIMESTAMP)
  private OffsetDateTime updatedTimestamp;

  public MachineProperties() {
  }

  public MachineProperties(
     BootTypeEnum bootType, 
     OffsetDateTime createdTimestamp, 
     String datacenterContainer, 
     String datacenterMachineId, 
     String datacenterManagementServer, 
     String datacenterManagementServerId, 
     String description, 
     OffsetDateTime discoveredTimestamp, 
     Map<String, Disk> disks, 
     String displayName, 
     List<String> groups, 
     BigDecimal megabytesOfMemory, 
     Map<String, NetworkAdapter> networkAdapters, 
     Integer numberOfCores, 
     String operatingSystem, 
     OffsetDateTime updatedTimestamp
  ) {
    this();
    this.bootType = bootType;
    this.createdTimestamp = createdTimestamp;
    this.datacenterContainer = datacenterContainer;
    this.datacenterMachineId = datacenterMachineId;
    this.datacenterManagementServer = datacenterManagementServer;
    this.datacenterManagementServerId = datacenterManagementServerId;
    this.description = description;
    this.discoveredTimestamp = discoveredTimestamp;
    this.disks = disks;
    this.displayName = displayName;
    this.groups = groups;
    this.megabytesOfMemory = megabytesOfMemory;
    this.networkAdapters = networkAdapters;
    this.numberOfCores = numberOfCores;
    this.operatingSystem = operatingSystem;
    this.updatedTimestamp = updatedTimestamp;
  }

  /**
   * Boot type of the machine.
   * @return bootType
   */
  @javax.annotation.Nullable
  public BootTypeEnum getBootType() {
    return bootType;
  }



  /**
   * Time when this machine was created. Date-Time represented in ISO-8601 format.
   * @return createdTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTimestamp() {
    return createdTimestamp;
  }



  /**
   * Container defined in the management solution that this machine is part of in the datacenter.
   * @return datacenterContainer
   */
  @javax.annotation.Nullable
  public String getDatacenterContainer() {
    return datacenterContainer;
  }



  /**
   * ID of the machine as tracked by the datacenter management solution.
   * @return datacenterMachineId
   */
  @javax.annotation.Nullable
  public String getDatacenterMachineId() {
    return datacenterMachineId;
  }



  /**
   * Name of the server hosting the datacenter management solution.
   * @return datacenterManagementServer
   */
  @javax.annotation.Nullable
  public String getDatacenterManagementServer() {
    return datacenterManagementServer;
  }



  /**
   * ID of the server hosting the datacenter management solution.
   * @return datacenterManagementServerId
   */
  @javax.annotation.Nullable
  public String getDatacenterManagementServerId() {
    return datacenterManagementServerId;
  }



  /**
   * Description of the machine
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * Time when this machine was discovered by Azure Migrate agent. Date-Time represented in ISO-8601 format.
   * @return discoveredTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDiscoveredTimestamp() {
    return discoveredTimestamp;
  }



  /**
   * Dictionary of disks attached to the machine. Key is ID of disk. Value is a disk object
   * @return disks
   */
  @javax.annotation.Nullable
  public Map<String, Disk> getDisks() {
    return disks;
  }



  /**
   * User readable name of the machine as defined by the user in their private datacenter.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  /**
   * List of references to the groups that the machine is member of.
   * @return groups
   */
  @javax.annotation.Nullable
  public List<String> getGroups() {
    return groups;
  }



  /**
   * Memory in Megabytes.
   * @return megabytesOfMemory
   */
  @javax.annotation.Nullable
  public BigDecimal getMegabytesOfMemory() {
    return megabytesOfMemory;
  }



  /**
   * Dictionary of network adapters attached to the machine. Key is ID of network adapter. Value is a network adapter object
   * @return networkAdapters
   */
  @javax.annotation.Nullable
  public Map<String, NetworkAdapter> getNetworkAdapters() {
    return networkAdapters;
  }



  /**
   * Processor count.
   * @return numberOfCores
   */
  @javax.annotation.Nullable
  public Integer getNumberOfCores() {
    return numberOfCores;
  }



  /**
   * Operating System of the machine.
   * @return operatingSystem
   */
  @javax.annotation.Nullable
  public String getOperatingSystem() {
    return operatingSystem;
  }



  /**
   * Time when this machine was last updated. Date-Time represented in ISO-8601 format.
   * @return updatedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedTimestamp() {
    return updatedTimestamp;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MachineProperties machineProperties = (MachineProperties) o;
    return Objects.equals(this.bootType, machineProperties.bootType) &&
        Objects.equals(this.createdTimestamp, machineProperties.createdTimestamp) &&
        Objects.equals(this.datacenterContainer, machineProperties.datacenterContainer) &&
        Objects.equals(this.datacenterMachineId, machineProperties.datacenterMachineId) &&
        Objects.equals(this.datacenterManagementServer, machineProperties.datacenterManagementServer) &&
        Objects.equals(this.datacenterManagementServerId, machineProperties.datacenterManagementServerId) &&
        Objects.equals(this.description, machineProperties.description) &&
        Objects.equals(this.discoveredTimestamp, machineProperties.discoveredTimestamp) &&
        Objects.equals(this.disks, machineProperties.disks) &&
        Objects.equals(this.displayName, machineProperties.displayName) &&
        Objects.equals(this.groups, machineProperties.groups) &&
        Objects.equals(this.megabytesOfMemory, machineProperties.megabytesOfMemory) &&
        Objects.equals(this.networkAdapters, machineProperties.networkAdapters) &&
        Objects.equals(this.numberOfCores, machineProperties.numberOfCores) &&
        Objects.equals(this.operatingSystem, machineProperties.operatingSystem) &&
        Objects.equals(this.updatedTimestamp, machineProperties.updatedTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bootType, createdTimestamp, datacenterContainer, datacenterMachineId, datacenterManagementServer, datacenterManagementServerId, description, discoveredTimestamp, disks, displayName, groups, megabytesOfMemory, networkAdapters, numberOfCores, operatingSystem, updatedTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MachineProperties {\n");
    sb.append("    bootType: ").append(toIndentedString(bootType)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    datacenterContainer: ").append(toIndentedString(datacenterContainer)).append("\n");
    sb.append("    datacenterMachineId: ").append(toIndentedString(datacenterMachineId)).append("\n");
    sb.append("    datacenterManagementServer: ").append(toIndentedString(datacenterManagementServer)).append("\n");
    sb.append("    datacenterManagementServerId: ").append(toIndentedString(datacenterManagementServerId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    discoveredTimestamp: ").append(toIndentedString(discoveredTimestamp)).append("\n");
    sb.append("    disks: ").append(toIndentedString(disks)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    megabytesOfMemory: ").append(toIndentedString(megabytesOfMemory)).append("\n");
    sb.append("    networkAdapters: ").append(toIndentedString(networkAdapters)).append("\n");
    sb.append("    numberOfCores: ").append(toIndentedString(numberOfCores)).append("\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    updatedTimestamp: ").append(toIndentedString(updatedTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bootType");
    openapiFields.add("createdTimestamp");
    openapiFields.add("datacenterContainer");
    openapiFields.add("datacenterMachineId");
    openapiFields.add("datacenterManagementServer");
    openapiFields.add("datacenterManagementServerId");
    openapiFields.add("description");
    openapiFields.add("discoveredTimestamp");
    openapiFields.add("disks");
    openapiFields.add("displayName");
    openapiFields.add("groups");
    openapiFields.add("megabytesOfMemory");
    openapiFields.add("networkAdapters");
    openapiFields.add("numberOfCores");
    openapiFields.add("operatingSystem");
    openapiFields.add("updatedTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MachineProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MachineProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MachineProperties is not found in the empty JSON string", MachineProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MachineProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MachineProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bootType") != null && !jsonObj.get("bootType").isJsonNull()) && !jsonObj.get("bootType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bootType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bootType").toString()));
      }
      // validate the optional field `bootType`
      if (jsonObj.get("bootType") != null && !jsonObj.get("bootType").isJsonNull()) {
        BootTypeEnum.validateJsonElement(jsonObj.get("bootType"));
      }
      if ((jsonObj.get("datacenterContainer") != null && !jsonObj.get("datacenterContainer").isJsonNull()) && !jsonObj.get("datacenterContainer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datacenterContainer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datacenterContainer").toString()));
      }
      if ((jsonObj.get("datacenterMachineId") != null && !jsonObj.get("datacenterMachineId").isJsonNull()) && !jsonObj.get("datacenterMachineId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datacenterMachineId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datacenterMachineId").toString()));
      }
      if ((jsonObj.get("datacenterManagementServer") != null && !jsonObj.get("datacenterManagementServer").isJsonNull()) && !jsonObj.get("datacenterManagementServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datacenterManagementServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datacenterManagementServer").toString()));
      }
      if ((jsonObj.get("datacenterManagementServerId") != null && !jsonObj.get("datacenterManagementServerId").isJsonNull()) && !jsonObj.get("datacenterManagementServerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datacenterManagementServerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datacenterManagementServerId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("groups") != null && !jsonObj.get("groups").isJsonNull() && !jsonObj.get("groups").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
      }
      if ((jsonObj.get("operatingSystem") != null && !jsonObj.get("operatingSystem").isJsonNull()) && !jsonObj.get("operatingSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operatingSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operatingSystem").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MachineProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MachineProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MachineProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MachineProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<MachineProperties>() {
           @Override
           public void write(JsonWriter out, MachineProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MachineProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MachineProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MachineProperties
   * @throws IOException if the JSON string is invalid with respect to MachineProperties
   */
  public static MachineProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MachineProperties.class);
  }

  /**
   * Convert an instance of MachineProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

