/*
 * Azure Migrate
 * Move your workloads to Azure.
 *
 * The version of the OpenAPI document: 2018-02-02
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A disk assessed for an assessment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:36.239493-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssessedDisk {
  public static final String SERIALIZED_NAME_GIGABYTES_CONSUMED = "gigabytesConsumed";
  @SerializedName(SERIALIZED_NAME_GIGABYTES_CONSUMED)
  private Double gigabytesConsumed;

  public static final String SERIALIZED_NAME_GIGABYTES_FOR_RECOMMENDED_DISK_SIZE = "gigabytesForRecommendedDiskSize";
  @SerializedName(SERIALIZED_NAME_GIGABYTES_FOR_RECOMMENDED_DISK_SIZE)
  private Integer gigabytesForRecommendedDiskSize;

  public static final String SERIALIZED_NAME_GIGABYTES_PROVISIONED = "gigabytesProvisioned";
  @SerializedName(SERIALIZED_NAME_GIGABYTES_PROVISIONED)
  private Double gigabytesProvisioned;

  public static final String SERIALIZED_NAME_MEGABYTES_PER_SECOND_OF_READ = "megabytesPerSecondOfRead";
  @SerializedName(SERIALIZED_NAME_MEGABYTES_PER_SECOND_OF_READ)
  private Double megabytesPerSecondOfRead;

  public static final String SERIALIZED_NAME_MEGABYTES_PER_SECOND_OF_READ_DATA_POINTS_EXPECTED = "megabytesPerSecondOfReadDataPointsExpected";
  @SerializedName(SERIALIZED_NAME_MEGABYTES_PER_SECOND_OF_READ_DATA_POINTS_EXPECTED)
  private Integer megabytesPerSecondOfReadDataPointsExpected;

  public static final String SERIALIZED_NAME_MEGABYTES_PER_SECOND_OF_READ_DATA_POINTS_RECEIVED = "megabytesPerSecondOfReadDataPointsReceived";
  @SerializedName(SERIALIZED_NAME_MEGABYTES_PER_SECOND_OF_READ_DATA_POINTS_RECEIVED)
  private Integer megabytesPerSecondOfReadDataPointsReceived;

  public static final String SERIALIZED_NAME_MEGABYTES_PER_SECOND_OF_WRITE = "megabytesPerSecondOfWrite";
  @SerializedName(SERIALIZED_NAME_MEGABYTES_PER_SECOND_OF_WRITE)
  private Double megabytesPerSecondOfWrite;

  public static final String SERIALIZED_NAME_MEGABYTES_PER_SECOND_OF_WRITE_DATA_POINTS_EXPECTED = "megabytesPerSecondOfWriteDataPointsExpected";
  @SerializedName(SERIALIZED_NAME_MEGABYTES_PER_SECOND_OF_WRITE_DATA_POINTS_EXPECTED)
  private Integer megabytesPerSecondOfWriteDataPointsExpected;

  public static final String SERIALIZED_NAME_MEGABYTES_PER_SECOND_OF_WRITE_DATA_POINTS_RECEIVED = "megabytesPerSecondOfWriteDataPointsReceived";
  @SerializedName(SERIALIZED_NAME_MEGABYTES_PER_SECOND_OF_WRITE_DATA_POINTS_RECEIVED)
  private Integer megabytesPerSecondOfWriteDataPointsReceived;

  public static final String SERIALIZED_NAME_MONTHLY_STORAGE_COST = "monthlyStorageCost";
  @SerializedName(SERIALIZED_NAME_MONTHLY_STORAGE_COST)
  private Double monthlyStorageCost;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER_OF_READ_OPERATIONS_PER_SECOND = "numberOfReadOperationsPerSecond";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_READ_OPERATIONS_PER_SECOND)
  private Double numberOfReadOperationsPerSecond;

  public static final String SERIALIZED_NAME_NUMBER_OF_READ_OPERATIONS_PER_SECOND_DATA_POINTS_EXPECTED = "numberOfReadOperationsPerSecondDataPointsExpected";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_READ_OPERATIONS_PER_SECOND_DATA_POINTS_EXPECTED)
  private Integer numberOfReadOperationsPerSecondDataPointsExpected;

  public static final String SERIALIZED_NAME_NUMBER_OF_READ_OPERATIONS_PER_SECOND_DATA_POINTS_RECEIVED = "numberOfReadOperationsPerSecondDataPointsReceived";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_READ_OPERATIONS_PER_SECOND_DATA_POINTS_RECEIVED)
  private Integer numberOfReadOperationsPerSecondDataPointsReceived;

  public static final String SERIALIZED_NAME_NUMBER_OF_WRITE_OPERATIONS_PER_SECOND = "numberOfWriteOperationsPerSecond";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_WRITE_OPERATIONS_PER_SECOND)
  private Double numberOfWriteOperationsPerSecond;

  public static final String SERIALIZED_NAME_NUMBER_OF_WRITE_OPERATIONS_PER_SECOND_DATA_POINTS_EXPECTED = "numberOfWriteOperationsPerSecondDataPointsExpected";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_WRITE_OPERATIONS_PER_SECOND_DATA_POINTS_EXPECTED)
  private Integer numberOfWriteOperationsPerSecondDataPointsExpected;

  public static final String SERIALIZED_NAME_NUMBER_OF_WRITE_OPERATIONS_PER_SECOND_DATA_POINTS_RECEIVED = "numberOfWriteOperationsPerSecondDataPointsReceived";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_WRITE_OPERATIONS_PER_SECOND_DATA_POINTS_RECEIVED)
  private Integer numberOfWriteOperationsPerSecondDataPointsReceived;

  /**
   * Recommended Azure size for the disk, given utilization data and preferences set on Assessment.
   */
  @JsonAdapter(RecommendedDiskSizeEnum.Adapter.class)
  public enum RecommendedDiskSizeEnum {
    UNKNOWN("Unknown"),
    
    STANDARD_S4("Standard_S4"),
    
    STANDARD_S6("Standard_S6"),
    
    STANDARD_S10("Standard_S10"),
    
    STANDARD_S20("Standard_S20"),
    
    STANDARD_S30("Standard_S30"),
    
    STANDARD_S40("Standard_S40"),
    
    STANDARD_S50("Standard_S50"),
    
    PREMIUM_P4("Premium_P4"),
    
    PREMIUM_P6("Premium_P6"),
    
    PREMIUM_P10("Premium_P10"),
    
    PREMIUM_P20("Premium_P20"),
    
    PREMIUM_P30("Premium_P30"),
    
    PREMIUM_P40("Premium_P40"),
    
    PREMIUM_P50("Premium_P50");

    private String value;

    RecommendedDiskSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecommendedDiskSizeEnum fromValue(String value) {
      for (RecommendedDiskSizeEnum b : RecommendedDiskSizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecommendedDiskSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecommendedDiskSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecommendedDiskSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecommendedDiskSizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecommendedDiskSizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECOMMENDED_DISK_SIZE = "recommendedDiskSize";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_DISK_SIZE)
  private RecommendedDiskSizeEnum recommendedDiskSize;

  /**
   * Storage type selected for this disk.
   */
  @JsonAdapter(RecommendedDiskTypeEnum.Adapter.class)
  public enum RecommendedDiskTypeEnum {
    UNKNOWN("Unknown"),
    
    STANDARD("Standard"),
    
    PREMIUM("Premium");

    private String value;

    RecommendedDiskTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecommendedDiskTypeEnum fromValue(String value) {
      for (RecommendedDiskTypeEnum b : RecommendedDiskTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecommendedDiskTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecommendedDiskTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecommendedDiskTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecommendedDiskTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecommendedDiskTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECOMMENDED_DISK_TYPE = "recommendedDiskType";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_DISK_TYPE)
  private RecommendedDiskTypeEnum recommendedDiskType;

  /**
   * Whether this disk is suitable for Azure.
   */
  @JsonAdapter(SuitabilityEnum.Adapter.class)
  public enum SuitabilityEnum {
    UNKNOWN("Unknown"),
    
    NOT_SUITABLE("NotSuitable"),
    
    SUITABLE("Suitable"),
    
    CONDITIONALLY_SUITABLE("ConditionallySuitable"),
    
    READINESS_UNKNOWN("ReadinessUnknown");

    private String value;

    SuitabilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SuitabilityEnum fromValue(String value) {
      for (SuitabilityEnum b : SuitabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SuitabilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SuitabilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SuitabilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SuitabilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SuitabilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUITABILITY = "suitability";
  @SerializedName(SERIALIZED_NAME_SUITABILITY)
  private SuitabilityEnum suitability;

  /**
   * If disk is suitable, this explains the reasons and mitigation steps.
   */
  @JsonAdapter(SuitabilityExplanationEnum.Adapter.class)
  public enum SuitabilityExplanationEnum {
    UNKNOWN("Unknown"),
    
    NOT_APPLICABLE("NotApplicable"),
    
    DISK_SIZE_GREATER_THAN_SUPPORTED("DiskSizeGreaterThanSupported"),
    
    NO_SUITABLE_DISK_SIZE_FOR_IOPS("NoSuitableDiskSizeForIops"),
    
    NO_SUITABLE_DISK_SIZE_FOR_THROUGHPUT("NoSuitableDiskSizeForThroughput"),
    
    NO_DISK_SIZE_FOUND_IN_SELECTED_LOCATION("NoDiskSizeFoundInSelectedLocation"),
    
    NO_DISK_SIZE_FOUND_FOR_SELECTED_REDUNDANCY("NoDiskSizeFoundForSelectedRedundancy"),
    
    INTERNAL_ERROR_OCCURRED_FOR_DISK_EVALUATION("InternalErrorOccurredForDiskEvaluation");

    private String value;

    SuitabilityExplanationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SuitabilityExplanationEnum fromValue(String value) {
      for (SuitabilityExplanationEnum b : SuitabilityExplanationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SuitabilityExplanationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SuitabilityExplanationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SuitabilityExplanationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SuitabilityExplanationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SuitabilityExplanationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUITABILITY_EXPLANATION = "suitabilityExplanation";
  @SerializedName(SERIALIZED_NAME_SUITABILITY_EXPLANATION)
  private SuitabilityExplanationEnum suitabilityExplanation;

  public AssessedDisk() {
  }

  public AssessedDisk(
     Double gigabytesConsumed, 
     Integer gigabytesForRecommendedDiskSize, 
     Double gigabytesProvisioned, 
     Double megabytesPerSecondOfRead, 
     Integer megabytesPerSecondOfReadDataPointsExpected, 
     Integer megabytesPerSecondOfReadDataPointsReceived, 
     Double megabytesPerSecondOfWrite, 
     Integer megabytesPerSecondOfWriteDataPointsExpected, 
     Integer megabytesPerSecondOfWriteDataPointsReceived, 
     Double monthlyStorageCost, 
     String name, 
     Double numberOfReadOperationsPerSecond, 
     Integer numberOfReadOperationsPerSecondDataPointsExpected, 
     Integer numberOfReadOperationsPerSecondDataPointsReceived, 
     Double numberOfWriteOperationsPerSecond, 
     Integer numberOfWriteOperationsPerSecondDataPointsExpected, 
     Integer numberOfWriteOperationsPerSecondDataPointsReceived, 
     RecommendedDiskSizeEnum recommendedDiskSize, 
     RecommendedDiskTypeEnum recommendedDiskType, 
     SuitabilityEnum suitability, 
     SuitabilityExplanationEnum suitabilityExplanation
  ) {
    this();
    this.gigabytesConsumed = gigabytesConsumed;
    this.gigabytesForRecommendedDiskSize = gigabytesForRecommendedDiskSize;
    this.gigabytesProvisioned = gigabytesProvisioned;
    this.megabytesPerSecondOfRead = megabytesPerSecondOfRead;
    this.megabytesPerSecondOfReadDataPointsExpected = megabytesPerSecondOfReadDataPointsExpected;
    this.megabytesPerSecondOfReadDataPointsReceived = megabytesPerSecondOfReadDataPointsReceived;
    this.megabytesPerSecondOfWrite = megabytesPerSecondOfWrite;
    this.megabytesPerSecondOfWriteDataPointsExpected = megabytesPerSecondOfWriteDataPointsExpected;
    this.megabytesPerSecondOfWriteDataPointsReceived = megabytesPerSecondOfWriteDataPointsReceived;
    this.monthlyStorageCost = monthlyStorageCost;
    this.name = name;
    this.numberOfReadOperationsPerSecond = numberOfReadOperationsPerSecond;
    this.numberOfReadOperationsPerSecondDataPointsExpected = numberOfReadOperationsPerSecondDataPointsExpected;
    this.numberOfReadOperationsPerSecondDataPointsReceived = numberOfReadOperationsPerSecondDataPointsReceived;
    this.numberOfWriteOperationsPerSecond = numberOfWriteOperationsPerSecond;
    this.numberOfWriteOperationsPerSecondDataPointsExpected = numberOfWriteOperationsPerSecondDataPointsExpected;
    this.numberOfWriteOperationsPerSecondDataPointsReceived = numberOfWriteOperationsPerSecondDataPointsReceived;
    this.recommendedDiskSize = recommendedDiskSize;
    this.recommendedDiskType = recommendedDiskType;
    this.suitability = suitability;
    this.suitabilityExplanation = suitabilityExplanation;
  }

  /**
   * Gigabytes of storage consumed by this disk.
   * @return gigabytesConsumed
   */
  @javax.annotation.Nullable
  public Double getGigabytesConsumed() {
    return gigabytesConsumed;
  }



  /**
   * Gigabytes of storage provided by the recommended Azure disk size.
   * @return gigabytesForRecommendedDiskSize
   */
  @javax.annotation.Nullable
  public Integer getGigabytesForRecommendedDiskSize() {
    return gigabytesForRecommendedDiskSize;
  }



  /**
   * Gigabytes of storage provisioned for this disk.
   * @return gigabytesProvisioned
   */
  @javax.annotation.Nullable
  public Double getGigabytesProvisioned() {
    return gigabytesProvisioned;
  }



  /**
   * Disk throughput in MegaBytes per second.
   * @return megabytesPerSecondOfRead
   */
  @javax.annotation.Nullable
  public Double getMegabytesPerSecondOfRead() {
    return megabytesPerSecondOfRead;
  }



  /**
   * Expected data points for MegaBytes per second of read.
   * @return megabytesPerSecondOfReadDataPointsExpected
   */
  @javax.annotation.Nullable
  public Integer getMegabytesPerSecondOfReadDataPointsExpected() {
    return megabytesPerSecondOfReadDataPointsExpected;
  }



  /**
   * Received data points for MegaBytes per second of read.
   * @return megabytesPerSecondOfReadDataPointsReceived
   */
  @javax.annotation.Nullable
  public Integer getMegabytesPerSecondOfReadDataPointsReceived() {
    return megabytesPerSecondOfReadDataPointsReceived;
  }



  /**
   * Disk throughput in MegaBytes per second.
   * @return megabytesPerSecondOfWrite
   */
  @javax.annotation.Nullable
  public Double getMegabytesPerSecondOfWrite() {
    return megabytesPerSecondOfWrite;
  }



  /**
   * Expected data points for MegaBytes per second of write.
   * @return megabytesPerSecondOfWriteDataPointsExpected
   */
  @javax.annotation.Nullable
  public Integer getMegabytesPerSecondOfWriteDataPointsExpected() {
    return megabytesPerSecondOfWriteDataPointsExpected;
  }



  /**
   * Received data points for MegaBytes per second of write.
   * @return megabytesPerSecondOfWriteDataPointsReceived
   */
  @javax.annotation.Nullable
  public Integer getMegabytesPerSecondOfWriteDataPointsReceived() {
    return megabytesPerSecondOfWriteDataPointsReceived;
  }



  /**
   * Estimated aggregate storage cost for a 31-day month for this disk.
   * @return monthlyStorageCost
   */
  @javax.annotation.Nullable
  public Double getMonthlyStorageCost() {
    return monthlyStorageCost;
  }



  /**
   * Name of the assessed disk.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Number of read operations per second for the disk.
   * @return numberOfReadOperationsPerSecond
   */
  @javax.annotation.Nullable
  public Double getNumberOfReadOperationsPerSecond() {
    return numberOfReadOperationsPerSecond;
  }



  /**
   * Expected number of data points for read operations per second.
   * @return numberOfReadOperationsPerSecondDataPointsExpected
   */
  @javax.annotation.Nullable
  public Integer getNumberOfReadOperationsPerSecondDataPointsExpected() {
    return numberOfReadOperationsPerSecondDataPointsExpected;
  }



  /**
   * Received number of data points for read operations per second.
   * @return numberOfReadOperationsPerSecondDataPointsReceived
   */
  @javax.annotation.Nullable
  public Integer getNumberOfReadOperationsPerSecondDataPointsReceived() {
    return numberOfReadOperationsPerSecondDataPointsReceived;
  }



  /**
   * Number of read and write operations per second for the disk.
   * @return numberOfWriteOperationsPerSecond
   */
  @javax.annotation.Nullable
  public Double getNumberOfWriteOperationsPerSecond() {
    return numberOfWriteOperationsPerSecond;
  }



  /**
   * Expected number of data points for write operations per second.
   * @return numberOfWriteOperationsPerSecondDataPointsExpected
   */
  @javax.annotation.Nullable
  public Integer getNumberOfWriteOperationsPerSecondDataPointsExpected() {
    return numberOfWriteOperationsPerSecondDataPointsExpected;
  }



  /**
   * Received number of data points for write operations per second.
   * @return numberOfWriteOperationsPerSecondDataPointsReceived
   */
  @javax.annotation.Nullable
  public Integer getNumberOfWriteOperationsPerSecondDataPointsReceived() {
    return numberOfWriteOperationsPerSecondDataPointsReceived;
  }



  /**
   * Recommended Azure size for the disk, given utilization data and preferences set on Assessment.
   * @return recommendedDiskSize
   */
  @javax.annotation.Nullable
  public RecommendedDiskSizeEnum getRecommendedDiskSize() {
    return recommendedDiskSize;
  }



  /**
   * Storage type selected for this disk.
   * @return recommendedDiskType
   */
  @javax.annotation.Nullable
  public RecommendedDiskTypeEnum getRecommendedDiskType() {
    return recommendedDiskType;
  }



  /**
   * Whether this disk is suitable for Azure.
   * @return suitability
   */
  @javax.annotation.Nullable
  public SuitabilityEnum getSuitability() {
    return suitability;
  }



  /**
   * If disk is suitable, this explains the reasons and mitigation steps.
   * @return suitabilityExplanation
   */
  @javax.annotation.Nullable
  public SuitabilityExplanationEnum getSuitabilityExplanation() {
    return suitabilityExplanation;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssessedDisk assessedDisk = (AssessedDisk) o;
    return Objects.equals(this.gigabytesConsumed, assessedDisk.gigabytesConsumed) &&
        Objects.equals(this.gigabytesForRecommendedDiskSize, assessedDisk.gigabytesForRecommendedDiskSize) &&
        Objects.equals(this.gigabytesProvisioned, assessedDisk.gigabytesProvisioned) &&
        Objects.equals(this.megabytesPerSecondOfRead, assessedDisk.megabytesPerSecondOfRead) &&
        Objects.equals(this.megabytesPerSecondOfReadDataPointsExpected, assessedDisk.megabytesPerSecondOfReadDataPointsExpected) &&
        Objects.equals(this.megabytesPerSecondOfReadDataPointsReceived, assessedDisk.megabytesPerSecondOfReadDataPointsReceived) &&
        Objects.equals(this.megabytesPerSecondOfWrite, assessedDisk.megabytesPerSecondOfWrite) &&
        Objects.equals(this.megabytesPerSecondOfWriteDataPointsExpected, assessedDisk.megabytesPerSecondOfWriteDataPointsExpected) &&
        Objects.equals(this.megabytesPerSecondOfWriteDataPointsReceived, assessedDisk.megabytesPerSecondOfWriteDataPointsReceived) &&
        Objects.equals(this.monthlyStorageCost, assessedDisk.monthlyStorageCost) &&
        Objects.equals(this.name, assessedDisk.name) &&
        Objects.equals(this.numberOfReadOperationsPerSecond, assessedDisk.numberOfReadOperationsPerSecond) &&
        Objects.equals(this.numberOfReadOperationsPerSecondDataPointsExpected, assessedDisk.numberOfReadOperationsPerSecondDataPointsExpected) &&
        Objects.equals(this.numberOfReadOperationsPerSecondDataPointsReceived, assessedDisk.numberOfReadOperationsPerSecondDataPointsReceived) &&
        Objects.equals(this.numberOfWriteOperationsPerSecond, assessedDisk.numberOfWriteOperationsPerSecond) &&
        Objects.equals(this.numberOfWriteOperationsPerSecondDataPointsExpected, assessedDisk.numberOfWriteOperationsPerSecondDataPointsExpected) &&
        Objects.equals(this.numberOfWriteOperationsPerSecondDataPointsReceived, assessedDisk.numberOfWriteOperationsPerSecondDataPointsReceived) &&
        Objects.equals(this.recommendedDiskSize, assessedDisk.recommendedDiskSize) &&
        Objects.equals(this.recommendedDiskType, assessedDisk.recommendedDiskType) &&
        Objects.equals(this.suitability, assessedDisk.suitability) &&
        Objects.equals(this.suitabilityExplanation, assessedDisk.suitabilityExplanation);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(gigabytesConsumed, gigabytesForRecommendedDiskSize, gigabytesProvisioned, megabytesPerSecondOfRead, megabytesPerSecondOfReadDataPointsExpected, megabytesPerSecondOfReadDataPointsReceived, megabytesPerSecondOfWrite, megabytesPerSecondOfWriteDataPointsExpected, megabytesPerSecondOfWriteDataPointsReceived, monthlyStorageCost, name, numberOfReadOperationsPerSecond, numberOfReadOperationsPerSecondDataPointsExpected, numberOfReadOperationsPerSecondDataPointsReceived, numberOfWriteOperationsPerSecond, numberOfWriteOperationsPerSecondDataPointsExpected, numberOfWriteOperationsPerSecondDataPointsReceived, recommendedDiskSize, recommendedDiskType, suitability, suitabilityExplanation);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssessedDisk {\n");
    sb.append("    gigabytesConsumed: ").append(toIndentedString(gigabytesConsumed)).append("\n");
    sb.append("    gigabytesForRecommendedDiskSize: ").append(toIndentedString(gigabytesForRecommendedDiskSize)).append("\n");
    sb.append("    gigabytesProvisioned: ").append(toIndentedString(gigabytesProvisioned)).append("\n");
    sb.append("    megabytesPerSecondOfRead: ").append(toIndentedString(megabytesPerSecondOfRead)).append("\n");
    sb.append("    megabytesPerSecondOfReadDataPointsExpected: ").append(toIndentedString(megabytesPerSecondOfReadDataPointsExpected)).append("\n");
    sb.append("    megabytesPerSecondOfReadDataPointsReceived: ").append(toIndentedString(megabytesPerSecondOfReadDataPointsReceived)).append("\n");
    sb.append("    megabytesPerSecondOfWrite: ").append(toIndentedString(megabytesPerSecondOfWrite)).append("\n");
    sb.append("    megabytesPerSecondOfWriteDataPointsExpected: ").append(toIndentedString(megabytesPerSecondOfWriteDataPointsExpected)).append("\n");
    sb.append("    megabytesPerSecondOfWriteDataPointsReceived: ").append(toIndentedString(megabytesPerSecondOfWriteDataPointsReceived)).append("\n");
    sb.append("    monthlyStorageCost: ").append(toIndentedString(monthlyStorageCost)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numberOfReadOperationsPerSecond: ").append(toIndentedString(numberOfReadOperationsPerSecond)).append("\n");
    sb.append("    numberOfReadOperationsPerSecondDataPointsExpected: ").append(toIndentedString(numberOfReadOperationsPerSecondDataPointsExpected)).append("\n");
    sb.append("    numberOfReadOperationsPerSecondDataPointsReceived: ").append(toIndentedString(numberOfReadOperationsPerSecondDataPointsReceived)).append("\n");
    sb.append("    numberOfWriteOperationsPerSecond: ").append(toIndentedString(numberOfWriteOperationsPerSecond)).append("\n");
    sb.append("    numberOfWriteOperationsPerSecondDataPointsExpected: ").append(toIndentedString(numberOfWriteOperationsPerSecondDataPointsExpected)).append("\n");
    sb.append("    numberOfWriteOperationsPerSecondDataPointsReceived: ").append(toIndentedString(numberOfWriteOperationsPerSecondDataPointsReceived)).append("\n");
    sb.append("    recommendedDiskSize: ").append(toIndentedString(recommendedDiskSize)).append("\n");
    sb.append("    recommendedDiskType: ").append(toIndentedString(recommendedDiskType)).append("\n");
    sb.append("    suitability: ").append(toIndentedString(suitability)).append("\n");
    sb.append("    suitabilityExplanation: ").append(toIndentedString(suitabilityExplanation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gigabytesConsumed");
    openapiFields.add("gigabytesForRecommendedDiskSize");
    openapiFields.add("gigabytesProvisioned");
    openapiFields.add("megabytesPerSecondOfRead");
    openapiFields.add("megabytesPerSecondOfReadDataPointsExpected");
    openapiFields.add("megabytesPerSecondOfReadDataPointsReceived");
    openapiFields.add("megabytesPerSecondOfWrite");
    openapiFields.add("megabytesPerSecondOfWriteDataPointsExpected");
    openapiFields.add("megabytesPerSecondOfWriteDataPointsReceived");
    openapiFields.add("monthlyStorageCost");
    openapiFields.add("name");
    openapiFields.add("numberOfReadOperationsPerSecond");
    openapiFields.add("numberOfReadOperationsPerSecondDataPointsExpected");
    openapiFields.add("numberOfReadOperationsPerSecondDataPointsReceived");
    openapiFields.add("numberOfWriteOperationsPerSecond");
    openapiFields.add("numberOfWriteOperationsPerSecondDataPointsExpected");
    openapiFields.add("numberOfWriteOperationsPerSecondDataPointsReceived");
    openapiFields.add("recommendedDiskSize");
    openapiFields.add("recommendedDiskType");
    openapiFields.add("suitability");
    openapiFields.add("suitabilityExplanation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssessedDisk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssessedDisk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssessedDisk is not found in the empty JSON string", AssessedDisk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssessedDisk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssessedDisk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("recommendedDiskSize") != null && !jsonObj.get("recommendedDiskSize").isJsonNull()) && !jsonObj.get("recommendedDiskSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendedDiskSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommendedDiskSize").toString()));
      }
      // validate the optional field `recommendedDiskSize`
      if (jsonObj.get("recommendedDiskSize") != null && !jsonObj.get("recommendedDiskSize").isJsonNull()) {
        RecommendedDiskSizeEnum.validateJsonElement(jsonObj.get("recommendedDiskSize"));
      }
      if ((jsonObj.get("recommendedDiskType") != null && !jsonObj.get("recommendedDiskType").isJsonNull()) && !jsonObj.get("recommendedDiskType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendedDiskType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommendedDiskType").toString()));
      }
      // validate the optional field `recommendedDiskType`
      if (jsonObj.get("recommendedDiskType") != null && !jsonObj.get("recommendedDiskType").isJsonNull()) {
        RecommendedDiskTypeEnum.validateJsonElement(jsonObj.get("recommendedDiskType"));
      }
      if ((jsonObj.get("suitability") != null && !jsonObj.get("suitability").isJsonNull()) && !jsonObj.get("suitability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suitability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suitability").toString()));
      }
      // validate the optional field `suitability`
      if (jsonObj.get("suitability") != null && !jsonObj.get("suitability").isJsonNull()) {
        SuitabilityEnum.validateJsonElement(jsonObj.get("suitability"));
      }
      if ((jsonObj.get("suitabilityExplanation") != null && !jsonObj.get("suitabilityExplanation").isJsonNull()) && !jsonObj.get("suitabilityExplanation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suitabilityExplanation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suitabilityExplanation").toString()));
      }
      // validate the optional field `suitabilityExplanation`
      if (jsonObj.get("suitabilityExplanation") != null && !jsonObj.get("suitabilityExplanation").isJsonNull()) {
        SuitabilityExplanationEnum.validateJsonElement(jsonObj.get("suitabilityExplanation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssessedDisk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssessedDisk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssessedDisk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssessedDisk.class));

       return (TypeAdapter<T>) new TypeAdapter<AssessedDisk>() {
           @Override
           public void write(JsonWriter out, AssessedDisk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssessedDisk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssessedDisk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssessedDisk
   * @throws IOException if the JSON string is invalid with respect to AssessedDisk
   */
  public static AssessedDisk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssessedDisk.class);
  }

  /**
   * Convert an instance of AssessedDisk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

