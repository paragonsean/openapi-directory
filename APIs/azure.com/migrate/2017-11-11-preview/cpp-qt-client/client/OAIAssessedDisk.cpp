/**
 * Azure Migrate
 * Move your workloads to Azure.
 *
 * The version of the OpenAPI document: 2017-11-11-preview
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssessedDisk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssessedDisk::OAIAssessedDisk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssessedDisk::OAIAssessedDisk() {
    this->initializeModel();
}

OAIAssessedDisk::~OAIAssessedDisk() {}

void OAIAssessedDisk::initializeModel() {

    m_gigabytes_consumed_isSet = false;
    m_gigabytes_consumed_isValid = false;

    m_gigabytes_for_recommended_disk_size_isSet = false;
    m_gigabytes_for_recommended_disk_size_isValid = false;

    m_gigabytes_provisioned_isSet = false;
    m_gigabytes_provisioned_isValid = false;

    m_megabytes_per_second_of_read_isSet = false;
    m_megabytes_per_second_of_read_isValid = false;

    m_megabytes_per_second_of_write_isSet = false;
    m_megabytes_per_second_of_write_isValid = false;

    m_monthly_storage_cost_isSet = false;
    m_monthly_storage_cost_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_of_read_operations_per_second_isSet = false;
    m_number_of_read_operations_per_second_isValid = false;

    m_number_of_write_operations_per_second_isSet = false;
    m_number_of_write_operations_per_second_isValid = false;

    m_recommended_disk_size_isSet = false;
    m_recommended_disk_size_isValid = false;

    m_recommended_disk_type_isSet = false;
    m_recommended_disk_type_isValid = false;

    m_suitability_isSet = false;
    m_suitability_isValid = false;

    m_suitability_explanation_isSet = false;
    m_suitability_explanation_isValid = false;
}

void OAIAssessedDisk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssessedDisk::fromJsonObject(QJsonObject json) {

    m_gigabytes_consumed_isValid = ::OpenAPI::fromJsonValue(m_gigabytes_consumed, json[QString("gigabytesConsumed")]);
    m_gigabytes_consumed_isSet = !json[QString("gigabytesConsumed")].isNull() && m_gigabytes_consumed_isValid;

    m_gigabytes_for_recommended_disk_size_isValid = ::OpenAPI::fromJsonValue(m_gigabytes_for_recommended_disk_size, json[QString("gigabytesForRecommendedDiskSize")]);
    m_gigabytes_for_recommended_disk_size_isSet = !json[QString("gigabytesForRecommendedDiskSize")].isNull() && m_gigabytes_for_recommended_disk_size_isValid;

    m_gigabytes_provisioned_isValid = ::OpenAPI::fromJsonValue(m_gigabytes_provisioned, json[QString("gigabytesProvisioned")]);
    m_gigabytes_provisioned_isSet = !json[QString("gigabytesProvisioned")].isNull() && m_gigabytes_provisioned_isValid;

    m_megabytes_per_second_of_read_isValid = ::OpenAPI::fromJsonValue(m_megabytes_per_second_of_read, json[QString("megabytesPerSecondOfRead")]);
    m_megabytes_per_second_of_read_isSet = !json[QString("megabytesPerSecondOfRead")].isNull() && m_megabytes_per_second_of_read_isValid;

    m_megabytes_per_second_of_write_isValid = ::OpenAPI::fromJsonValue(m_megabytes_per_second_of_write, json[QString("megabytesPerSecondOfWrite")]);
    m_megabytes_per_second_of_write_isSet = !json[QString("megabytesPerSecondOfWrite")].isNull() && m_megabytes_per_second_of_write_isValid;

    m_monthly_storage_cost_isValid = ::OpenAPI::fromJsonValue(m_monthly_storage_cost, json[QString("monthlyStorageCost")]);
    m_monthly_storage_cost_isSet = !json[QString("monthlyStorageCost")].isNull() && m_monthly_storage_cost_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_of_read_operations_per_second_isValid = ::OpenAPI::fromJsonValue(m_number_of_read_operations_per_second, json[QString("numberOfReadOperationsPerSecond")]);
    m_number_of_read_operations_per_second_isSet = !json[QString("numberOfReadOperationsPerSecond")].isNull() && m_number_of_read_operations_per_second_isValid;

    m_number_of_write_operations_per_second_isValid = ::OpenAPI::fromJsonValue(m_number_of_write_operations_per_second, json[QString("numberOfWriteOperationsPerSecond")]);
    m_number_of_write_operations_per_second_isSet = !json[QString("numberOfWriteOperationsPerSecond")].isNull() && m_number_of_write_operations_per_second_isValid;

    m_recommended_disk_size_isValid = ::OpenAPI::fromJsonValue(m_recommended_disk_size, json[QString("recommendedDiskSize")]);
    m_recommended_disk_size_isSet = !json[QString("recommendedDiskSize")].isNull() && m_recommended_disk_size_isValid;

    m_recommended_disk_type_isValid = ::OpenAPI::fromJsonValue(m_recommended_disk_type, json[QString("recommendedDiskType")]);
    m_recommended_disk_type_isSet = !json[QString("recommendedDiskType")].isNull() && m_recommended_disk_type_isValid;

    m_suitability_isValid = ::OpenAPI::fromJsonValue(m_suitability, json[QString("suitability")]);
    m_suitability_isSet = !json[QString("suitability")].isNull() && m_suitability_isValid;

    m_suitability_explanation_isValid = ::OpenAPI::fromJsonValue(m_suitability_explanation, json[QString("suitabilityExplanation")]);
    m_suitability_explanation_isSet = !json[QString("suitabilityExplanation")].isNull() && m_suitability_explanation_isValid;
}

QString OAIAssessedDisk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssessedDisk::asJsonObject() const {
    QJsonObject obj;
    if (m_gigabytes_consumed_isSet) {
        obj.insert(QString("gigabytesConsumed"), ::OpenAPI::toJsonValue(m_gigabytes_consumed));
    }
    if (m_gigabytes_for_recommended_disk_size_isSet) {
        obj.insert(QString("gigabytesForRecommendedDiskSize"), ::OpenAPI::toJsonValue(m_gigabytes_for_recommended_disk_size));
    }
    if (m_gigabytes_provisioned_isSet) {
        obj.insert(QString("gigabytesProvisioned"), ::OpenAPI::toJsonValue(m_gigabytes_provisioned));
    }
    if (m_megabytes_per_second_of_read_isSet) {
        obj.insert(QString("megabytesPerSecondOfRead"), ::OpenAPI::toJsonValue(m_megabytes_per_second_of_read));
    }
    if (m_megabytes_per_second_of_write_isSet) {
        obj.insert(QString("megabytesPerSecondOfWrite"), ::OpenAPI::toJsonValue(m_megabytes_per_second_of_write));
    }
    if (m_monthly_storage_cost_isSet) {
        obj.insert(QString("monthlyStorageCost"), ::OpenAPI::toJsonValue(m_monthly_storage_cost));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_of_read_operations_per_second_isSet) {
        obj.insert(QString("numberOfReadOperationsPerSecond"), ::OpenAPI::toJsonValue(m_number_of_read_operations_per_second));
    }
    if (m_number_of_write_operations_per_second_isSet) {
        obj.insert(QString("numberOfWriteOperationsPerSecond"), ::OpenAPI::toJsonValue(m_number_of_write_operations_per_second));
    }
    if (m_recommended_disk_size_isSet) {
        obj.insert(QString("recommendedDiskSize"), ::OpenAPI::toJsonValue(m_recommended_disk_size));
    }
    if (m_recommended_disk_type_isSet) {
        obj.insert(QString("recommendedDiskType"), ::OpenAPI::toJsonValue(m_recommended_disk_type));
    }
    if (m_suitability_isSet) {
        obj.insert(QString("suitability"), ::OpenAPI::toJsonValue(m_suitability));
    }
    if (m_suitability_explanation_isSet) {
        obj.insert(QString("suitabilityExplanation"), ::OpenAPI::toJsonValue(m_suitability_explanation));
    }
    return obj;
}

double OAIAssessedDisk::getGigabytesConsumed() const {
    return m_gigabytes_consumed;
}
void OAIAssessedDisk::setGigabytesConsumed(const double &gigabytes_consumed) {
    m_gigabytes_consumed = gigabytes_consumed;
    m_gigabytes_consumed_isSet = true;
}

bool OAIAssessedDisk::is_gigabytes_consumed_Set() const{
    return m_gigabytes_consumed_isSet;
}

bool OAIAssessedDisk::is_gigabytes_consumed_Valid() const{
    return m_gigabytes_consumed_isValid;
}

qint32 OAIAssessedDisk::getGigabytesForRecommendedDiskSize() const {
    return m_gigabytes_for_recommended_disk_size;
}
void OAIAssessedDisk::setGigabytesForRecommendedDiskSize(const qint32 &gigabytes_for_recommended_disk_size) {
    m_gigabytes_for_recommended_disk_size = gigabytes_for_recommended_disk_size;
    m_gigabytes_for_recommended_disk_size_isSet = true;
}

bool OAIAssessedDisk::is_gigabytes_for_recommended_disk_size_Set() const{
    return m_gigabytes_for_recommended_disk_size_isSet;
}

bool OAIAssessedDisk::is_gigabytes_for_recommended_disk_size_Valid() const{
    return m_gigabytes_for_recommended_disk_size_isValid;
}

double OAIAssessedDisk::getGigabytesProvisioned() const {
    return m_gigabytes_provisioned;
}
void OAIAssessedDisk::setGigabytesProvisioned(const double &gigabytes_provisioned) {
    m_gigabytes_provisioned = gigabytes_provisioned;
    m_gigabytes_provisioned_isSet = true;
}

bool OAIAssessedDisk::is_gigabytes_provisioned_Set() const{
    return m_gigabytes_provisioned_isSet;
}

bool OAIAssessedDisk::is_gigabytes_provisioned_Valid() const{
    return m_gigabytes_provisioned_isValid;
}

double OAIAssessedDisk::getMegabytesPerSecondOfRead() const {
    return m_megabytes_per_second_of_read;
}
void OAIAssessedDisk::setMegabytesPerSecondOfRead(const double &megabytes_per_second_of_read) {
    m_megabytes_per_second_of_read = megabytes_per_second_of_read;
    m_megabytes_per_second_of_read_isSet = true;
}

bool OAIAssessedDisk::is_megabytes_per_second_of_read_Set() const{
    return m_megabytes_per_second_of_read_isSet;
}

bool OAIAssessedDisk::is_megabytes_per_second_of_read_Valid() const{
    return m_megabytes_per_second_of_read_isValid;
}

double OAIAssessedDisk::getMegabytesPerSecondOfWrite() const {
    return m_megabytes_per_second_of_write;
}
void OAIAssessedDisk::setMegabytesPerSecondOfWrite(const double &megabytes_per_second_of_write) {
    m_megabytes_per_second_of_write = megabytes_per_second_of_write;
    m_megabytes_per_second_of_write_isSet = true;
}

bool OAIAssessedDisk::is_megabytes_per_second_of_write_Set() const{
    return m_megabytes_per_second_of_write_isSet;
}

bool OAIAssessedDisk::is_megabytes_per_second_of_write_Valid() const{
    return m_megabytes_per_second_of_write_isValid;
}

double OAIAssessedDisk::getMonthlyStorageCost() const {
    return m_monthly_storage_cost;
}
void OAIAssessedDisk::setMonthlyStorageCost(const double &monthly_storage_cost) {
    m_monthly_storage_cost = monthly_storage_cost;
    m_monthly_storage_cost_isSet = true;
}

bool OAIAssessedDisk::is_monthly_storage_cost_Set() const{
    return m_monthly_storage_cost_isSet;
}

bool OAIAssessedDisk::is_monthly_storage_cost_Valid() const{
    return m_monthly_storage_cost_isValid;
}

QString OAIAssessedDisk::getName() const {
    return m_name;
}
void OAIAssessedDisk::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAssessedDisk::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAssessedDisk::is_name_Valid() const{
    return m_name_isValid;
}

double OAIAssessedDisk::getNumberOfReadOperationsPerSecond() const {
    return m_number_of_read_operations_per_second;
}
void OAIAssessedDisk::setNumberOfReadOperationsPerSecond(const double &number_of_read_operations_per_second) {
    m_number_of_read_operations_per_second = number_of_read_operations_per_second;
    m_number_of_read_operations_per_second_isSet = true;
}

bool OAIAssessedDisk::is_number_of_read_operations_per_second_Set() const{
    return m_number_of_read_operations_per_second_isSet;
}

bool OAIAssessedDisk::is_number_of_read_operations_per_second_Valid() const{
    return m_number_of_read_operations_per_second_isValid;
}

double OAIAssessedDisk::getNumberOfWriteOperationsPerSecond() const {
    return m_number_of_write_operations_per_second;
}
void OAIAssessedDisk::setNumberOfWriteOperationsPerSecond(const double &number_of_write_operations_per_second) {
    m_number_of_write_operations_per_second = number_of_write_operations_per_second;
    m_number_of_write_operations_per_second_isSet = true;
}

bool OAIAssessedDisk::is_number_of_write_operations_per_second_Set() const{
    return m_number_of_write_operations_per_second_isSet;
}

bool OAIAssessedDisk::is_number_of_write_operations_per_second_Valid() const{
    return m_number_of_write_operations_per_second_isValid;
}

QString OAIAssessedDisk::getRecommendedDiskSize() const {
    return m_recommended_disk_size;
}
void OAIAssessedDisk::setRecommendedDiskSize(const QString &recommended_disk_size) {
    m_recommended_disk_size = recommended_disk_size;
    m_recommended_disk_size_isSet = true;
}

bool OAIAssessedDisk::is_recommended_disk_size_Set() const{
    return m_recommended_disk_size_isSet;
}

bool OAIAssessedDisk::is_recommended_disk_size_Valid() const{
    return m_recommended_disk_size_isValid;
}

QString OAIAssessedDisk::getRecommendedDiskType() const {
    return m_recommended_disk_type;
}
void OAIAssessedDisk::setRecommendedDiskType(const QString &recommended_disk_type) {
    m_recommended_disk_type = recommended_disk_type;
    m_recommended_disk_type_isSet = true;
}

bool OAIAssessedDisk::is_recommended_disk_type_Set() const{
    return m_recommended_disk_type_isSet;
}

bool OAIAssessedDisk::is_recommended_disk_type_Valid() const{
    return m_recommended_disk_type_isValid;
}

QString OAIAssessedDisk::getSuitability() const {
    return m_suitability;
}
void OAIAssessedDisk::setSuitability(const QString &suitability) {
    m_suitability = suitability;
    m_suitability_isSet = true;
}

bool OAIAssessedDisk::is_suitability_Set() const{
    return m_suitability_isSet;
}

bool OAIAssessedDisk::is_suitability_Valid() const{
    return m_suitability_isValid;
}

QString OAIAssessedDisk::getSuitabilityExplanation() const {
    return m_suitability_explanation;
}
void OAIAssessedDisk::setSuitabilityExplanation(const QString &suitability_explanation) {
    m_suitability_explanation = suitability_explanation;
    m_suitability_explanation_isSet = true;
}

bool OAIAssessedDisk::is_suitability_explanation_Set() const{
    return m_suitability_explanation_isSet;
}

bool OAIAssessedDisk::is_suitability_explanation_Valid() const{
    return m_suitability_explanation_isValid;
}

bool OAIAssessedDisk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gigabytes_consumed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gigabytes_for_recommended_disk_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gigabytes_provisioned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_megabytes_per_second_of_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_megabytes_per_second_of_write_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_storage_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_read_operations_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_write_operations_per_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_disk_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_disk_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suitability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suitability_explanation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssessedDisk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
