/**
 * Azure Migrate
 * Move your workloads to Azure.
 *
 * The version of the OpenAPI document: 2017-11-11-preview
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisk::OAIDisk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisk::OAIDisk() {
    this->initializeModel();
}

OAIDisk::~OAIDisk() {}

void OAIDisk::initializeModel() {

    m_gigabytes_allocated_isSet = false;
    m_gigabytes_allocated_isValid = false;

    m_gigabytes_consumed_isSet = false;
    m_gigabytes_consumed_isValid = false;
}

void OAIDisk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisk::fromJsonObject(QJsonObject json) {

    m_gigabytes_allocated_isValid = ::OpenAPI::fromJsonValue(m_gigabytes_allocated, json[QString("gigabytesAllocated")]);
    m_gigabytes_allocated_isSet = !json[QString("gigabytesAllocated")].isNull() && m_gigabytes_allocated_isValid;

    m_gigabytes_consumed_isValid = ::OpenAPI::fromJsonValue(m_gigabytes_consumed, json[QString("gigabytesConsumed")]);
    m_gigabytes_consumed_isSet = !json[QString("gigabytesConsumed")].isNull() && m_gigabytes_consumed_isValid;
}

QString OAIDisk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisk::asJsonObject() const {
    QJsonObject obj;
    if (m_gigabytes_allocated_isSet) {
        obj.insert(QString("gigabytesAllocated"), ::OpenAPI::toJsonValue(m_gigabytes_allocated));
    }
    if (m_gigabytes_consumed_isSet) {
        obj.insert(QString("gigabytesConsumed"), ::OpenAPI::toJsonValue(m_gigabytes_consumed));
    }
    return obj;
}

double OAIDisk::getGigabytesAllocated() const {
    return m_gigabytes_allocated;
}
void OAIDisk::setGigabytesAllocated(const double &gigabytes_allocated) {
    m_gigabytes_allocated = gigabytes_allocated;
    m_gigabytes_allocated_isSet = true;
}

bool OAIDisk::is_gigabytes_allocated_Set() const{
    return m_gigabytes_allocated_isSet;
}

bool OAIDisk::is_gigabytes_allocated_Valid() const{
    return m_gigabytes_allocated_isValid;
}

double OAIDisk::getGigabytesConsumed() const {
    return m_gigabytes_consumed;
}
void OAIDisk::setGigabytesConsumed(const double &gigabytes_consumed) {
    m_gigabytes_consumed = gigabytes_consumed;
    m_gigabytes_consumed_isSet = true;
}

bool OAIDisk::is_gigabytes_consumed_Set() const{
    return m_gigabytes_consumed_isSet;
}

bool OAIDisk::is_gigabytes_consumed_Valid() const{
    return m_gigabytes_consumed_isValid;
}

bool OAIDisk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gigabytes_allocated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gigabytes_consumed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
