/**
 * Azure Migrate
 * Move your workloads to Azure.
 *
 * The version of the OpenAPI document: 2017-11-11-preview
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssessmentProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssessmentProperties::OAIAssessmentProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssessmentProperties::OAIAssessmentProperties() {
    this->initializeModel();
}

OAIAssessmentProperties::~OAIAssessmentProperties() {}

void OAIAssessmentProperties::initializeModel() {

    m_azure_hybrid_use_benefit_isSet = false;
    m_azure_hybrid_use_benefit_isValid = false;

    m_azure_location_isSet = false;
    m_azure_location_isValid = false;

    m_azure_offer_code_isSet = false;
    m_azure_offer_code_isValid = false;

    m_azure_pricing_tier_isSet = false;
    m_azure_pricing_tier_isValid = false;

    m_azure_storage_redundancy_isSet = false;
    m_azure_storage_redundancy_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_discount_percentage_isSet = false;
    m_discount_percentage_isValid = false;

    m_monthly_bandwidth_cost_isSet = false;
    m_monthly_bandwidth_cost_isValid = false;

    m_monthly_compute_cost_isSet = false;
    m_monthly_compute_cost_isValid = false;

    m_monthly_storage_cost_isSet = false;
    m_monthly_storage_cost_isValid = false;

    m_number_of_machines_isSet = false;
    m_number_of_machines_isValid = false;

    m_percentile_isSet = false;
    m_percentile_isValid = false;

    m_prices_timestamp_isSet = false;
    m_prices_timestamp_isValid = false;

    m_scaling_factor_isSet = false;
    m_scaling_factor_isValid = false;

    m_stage_isSet = false;
    m_stage_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_time_range_isSet = false;
    m_time_range_isValid = false;

    m_updated_timestamp_isSet = false;
    m_updated_timestamp_isValid = false;
}

void OAIAssessmentProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssessmentProperties::fromJsonObject(QJsonObject json) {

    m_azure_hybrid_use_benefit_isValid = ::OpenAPI::fromJsonValue(m_azure_hybrid_use_benefit, json[QString("azureHybridUseBenefit")]);
    m_azure_hybrid_use_benefit_isSet = !json[QString("azureHybridUseBenefit")].isNull() && m_azure_hybrid_use_benefit_isValid;

    m_azure_location_isValid = ::OpenAPI::fromJsonValue(m_azure_location, json[QString("azureLocation")]);
    m_azure_location_isSet = !json[QString("azureLocation")].isNull() && m_azure_location_isValid;

    m_azure_offer_code_isValid = ::OpenAPI::fromJsonValue(m_azure_offer_code, json[QString("azureOfferCode")]);
    m_azure_offer_code_isSet = !json[QString("azureOfferCode")].isNull() && m_azure_offer_code_isValid;

    m_azure_pricing_tier_isValid = ::OpenAPI::fromJsonValue(m_azure_pricing_tier, json[QString("azurePricingTier")]);
    m_azure_pricing_tier_isSet = !json[QString("azurePricingTier")].isNull() && m_azure_pricing_tier_isValid;

    m_azure_storage_redundancy_isValid = ::OpenAPI::fromJsonValue(m_azure_storage_redundancy, json[QString("azureStorageRedundancy")]);
    m_azure_storage_redundancy_isSet = !json[QString("azureStorageRedundancy")].isNull() && m_azure_storage_redundancy_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("createdTimestamp")]);
    m_created_timestamp_isSet = !json[QString("createdTimestamp")].isNull() && m_created_timestamp_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_discount_percentage_isValid = ::OpenAPI::fromJsonValue(m_discount_percentage, json[QString("discountPercentage")]);
    m_discount_percentage_isSet = !json[QString("discountPercentage")].isNull() && m_discount_percentage_isValid;

    m_monthly_bandwidth_cost_isValid = ::OpenAPI::fromJsonValue(m_monthly_bandwidth_cost, json[QString("monthlyBandwidthCost")]);
    m_monthly_bandwidth_cost_isSet = !json[QString("monthlyBandwidthCost")].isNull() && m_monthly_bandwidth_cost_isValid;

    m_monthly_compute_cost_isValid = ::OpenAPI::fromJsonValue(m_monthly_compute_cost, json[QString("monthlyComputeCost")]);
    m_monthly_compute_cost_isSet = !json[QString("monthlyComputeCost")].isNull() && m_monthly_compute_cost_isValid;

    m_monthly_storage_cost_isValid = ::OpenAPI::fromJsonValue(m_monthly_storage_cost, json[QString("monthlyStorageCost")]);
    m_monthly_storage_cost_isSet = !json[QString("monthlyStorageCost")].isNull() && m_monthly_storage_cost_isValid;

    m_number_of_machines_isValid = ::OpenAPI::fromJsonValue(m_number_of_machines, json[QString("numberOfMachines")]);
    m_number_of_machines_isSet = !json[QString("numberOfMachines")].isNull() && m_number_of_machines_isValid;

    m_percentile_isValid = ::OpenAPI::fromJsonValue(m_percentile, json[QString("percentile")]);
    m_percentile_isSet = !json[QString("percentile")].isNull() && m_percentile_isValid;

    m_prices_timestamp_isValid = ::OpenAPI::fromJsonValue(m_prices_timestamp, json[QString("pricesTimestamp")]);
    m_prices_timestamp_isSet = !json[QString("pricesTimestamp")].isNull() && m_prices_timestamp_isValid;

    m_scaling_factor_isValid = ::OpenAPI::fromJsonValue(m_scaling_factor, json[QString("scalingFactor")]);
    m_scaling_factor_isSet = !json[QString("scalingFactor")].isNull() && m_scaling_factor_isValid;

    m_stage_isValid = ::OpenAPI::fromJsonValue(m_stage, json[QString("stage")]);
    m_stage_isSet = !json[QString("stage")].isNull() && m_stage_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_time_range_isValid = ::OpenAPI::fromJsonValue(m_time_range, json[QString("timeRange")]);
    m_time_range_isSet = !json[QString("timeRange")].isNull() && m_time_range_isValid;

    m_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_updated_timestamp, json[QString("updatedTimestamp")]);
    m_updated_timestamp_isSet = !json[QString("updatedTimestamp")].isNull() && m_updated_timestamp_isValid;
}

QString OAIAssessmentProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssessmentProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_azure_hybrid_use_benefit_isSet) {
        obj.insert(QString("azureHybridUseBenefit"), ::OpenAPI::toJsonValue(m_azure_hybrid_use_benefit));
    }
    if (m_azure_location_isSet) {
        obj.insert(QString("azureLocation"), ::OpenAPI::toJsonValue(m_azure_location));
    }
    if (m_azure_offer_code_isSet) {
        obj.insert(QString("azureOfferCode"), ::OpenAPI::toJsonValue(m_azure_offer_code));
    }
    if (m_azure_pricing_tier_isSet) {
        obj.insert(QString("azurePricingTier"), ::OpenAPI::toJsonValue(m_azure_pricing_tier));
    }
    if (m_azure_storage_redundancy_isSet) {
        obj.insert(QString("azureStorageRedundancy"), ::OpenAPI::toJsonValue(m_azure_storage_redundancy));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("createdTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_discount_percentage_isSet) {
        obj.insert(QString("discountPercentage"), ::OpenAPI::toJsonValue(m_discount_percentage));
    }
    if (m_monthly_bandwidth_cost_isSet) {
        obj.insert(QString("monthlyBandwidthCost"), ::OpenAPI::toJsonValue(m_monthly_bandwidth_cost));
    }
    if (m_monthly_compute_cost_isSet) {
        obj.insert(QString("monthlyComputeCost"), ::OpenAPI::toJsonValue(m_monthly_compute_cost));
    }
    if (m_monthly_storage_cost_isSet) {
        obj.insert(QString("monthlyStorageCost"), ::OpenAPI::toJsonValue(m_monthly_storage_cost));
    }
    if (m_number_of_machines_isSet) {
        obj.insert(QString("numberOfMachines"), ::OpenAPI::toJsonValue(m_number_of_machines));
    }
    if (m_percentile_isSet) {
        obj.insert(QString("percentile"), ::OpenAPI::toJsonValue(m_percentile));
    }
    if (m_prices_timestamp_isSet) {
        obj.insert(QString("pricesTimestamp"), ::OpenAPI::toJsonValue(m_prices_timestamp));
    }
    if (m_scaling_factor_isSet) {
        obj.insert(QString("scalingFactor"), ::OpenAPI::toJsonValue(m_scaling_factor));
    }
    if (m_stage_isSet) {
        obj.insert(QString("stage"), ::OpenAPI::toJsonValue(m_stage));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_time_range_isSet) {
        obj.insert(QString("timeRange"), ::OpenAPI::toJsonValue(m_time_range));
    }
    if (m_updated_timestamp_isSet) {
        obj.insert(QString("updatedTimestamp"), ::OpenAPI::toJsonValue(m_updated_timestamp));
    }
    return obj;
}

QString OAIAssessmentProperties::getAzureHybridUseBenefit() const {
    return m_azure_hybrid_use_benefit;
}
void OAIAssessmentProperties::setAzureHybridUseBenefit(const QString &azure_hybrid_use_benefit) {
    m_azure_hybrid_use_benefit = azure_hybrid_use_benefit;
    m_azure_hybrid_use_benefit_isSet = true;
}

bool OAIAssessmentProperties::is_azure_hybrid_use_benefit_Set() const{
    return m_azure_hybrid_use_benefit_isSet;
}

bool OAIAssessmentProperties::is_azure_hybrid_use_benefit_Valid() const{
    return m_azure_hybrid_use_benefit_isValid;
}

QString OAIAssessmentProperties::getAzureLocation() const {
    return m_azure_location;
}
void OAIAssessmentProperties::setAzureLocation(const QString &azure_location) {
    m_azure_location = azure_location;
    m_azure_location_isSet = true;
}

bool OAIAssessmentProperties::is_azure_location_Set() const{
    return m_azure_location_isSet;
}

bool OAIAssessmentProperties::is_azure_location_Valid() const{
    return m_azure_location_isValid;
}

QString OAIAssessmentProperties::getAzureOfferCode() const {
    return m_azure_offer_code;
}
void OAIAssessmentProperties::setAzureOfferCode(const QString &azure_offer_code) {
    m_azure_offer_code = azure_offer_code;
    m_azure_offer_code_isSet = true;
}

bool OAIAssessmentProperties::is_azure_offer_code_Set() const{
    return m_azure_offer_code_isSet;
}

bool OAIAssessmentProperties::is_azure_offer_code_Valid() const{
    return m_azure_offer_code_isValid;
}

QString OAIAssessmentProperties::getAzurePricingTier() const {
    return m_azure_pricing_tier;
}
void OAIAssessmentProperties::setAzurePricingTier(const QString &azure_pricing_tier) {
    m_azure_pricing_tier = azure_pricing_tier;
    m_azure_pricing_tier_isSet = true;
}

bool OAIAssessmentProperties::is_azure_pricing_tier_Set() const{
    return m_azure_pricing_tier_isSet;
}

bool OAIAssessmentProperties::is_azure_pricing_tier_Valid() const{
    return m_azure_pricing_tier_isValid;
}

QString OAIAssessmentProperties::getAzureStorageRedundancy() const {
    return m_azure_storage_redundancy;
}
void OAIAssessmentProperties::setAzureStorageRedundancy(const QString &azure_storage_redundancy) {
    m_azure_storage_redundancy = azure_storage_redundancy;
    m_azure_storage_redundancy_isSet = true;
}

bool OAIAssessmentProperties::is_azure_storage_redundancy_Set() const{
    return m_azure_storage_redundancy_isSet;
}

bool OAIAssessmentProperties::is_azure_storage_redundancy_Valid() const{
    return m_azure_storage_redundancy_isValid;
}

QDateTime OAIAssessmentProperties::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIAssessmentProperties::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIAssessmentProperties::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIAssessmentProperties::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

QString OAIAssessmentProperties::getCurrency() const {
    return m_currency;
}
void OAIAssessmentProperties::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIAssessmentProperties::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIAssessmentProperties::is_currency_Valid() const{
    return m_currency_isValid;
}

double OAIAssessmentProperties::getDiscountPercentage() const {
    return m_discount_percentage;
}
void OAIAssessmentProperties::setDiscountPercentage(const double &discount_percentage) {
    m_discount_percentage = discount_percentage;
    m_discount_percentage_isSet = true;
}

bool OAIAssessmentProperties::is_discount_percentage_Set() const{
    return m_discount_percentage_isSet;
}

bool OAIAssessmentProperties::is_discount_percentage_Valid() const{
    return m_discount_percentage_isValid;
}

double OAIAssessmentProperties::getMonthlyBandwidthCost() const {
    return m_monthly_bandwidth_cost;
}
void OAIAssessmentProperties::setMonthlyBandwidthCost(const double &monthly_bandwidth_cost) {
    m_monthly_bandwidth_cost = monthly_bandwidth_cost;
    m_monthly_bandwidth_cost_isSet = true;
}

bool OAIAssessmentProperties::is_monthly_bandwidth_cost_Set() const{
    return m_monthly_bandwidth_cost_isSet;
}

bool OAIAssessmentProperties::is_monthly_bandwidth_cost_Valid() const{
    return m_monthly_bandwidth_cost_isValid;
}

double OAIAssessmentProperties::getMonthlyComputeCost() const {
    return m_monthly_compute_cost;
}
void OAIAssessmentProperties::setMonthlyComputeCost(const double &monthly_compute_cost) {
    m_monthly_compute_cost = monthly_compute_cost;
    m_monthly_compute_cost_isSet = true;
}

bool OAIAssessmentProperties::is_monthly_compute_cost_Set() const{
    return m_monthly_compute_cost_isSet;
}

bool OAIAssessmentProperties::is_monthly_compute_cost_Valid() const{
    return m_monthly_compute_cost_isValid;
}

double OAIAssessmentProperties::getMonthlyStorageCost() const {
    return m_monthly_storage_cost;
}
void OAIAssessmentProperties::setMonthlyStorageCost(const double &monthly_storage_cost) {
    m_monthly_storage_cost = monthly_storage_cost;
    m_monthly_storage_cost_isSet = true;
}

bool OAIAssessmentProperties::is_monthly_storage_cost_Set() const{
    return m_monthly_storage_cost_isSet;
}

bool OAIAssessmentProperties::is_monthly_storage_cost_Valid() const{
    return m_monthly_storage_cost_isValid;
}

qint32 OAIAssessmentProperties::getNumberOfMachines() const {
    return m_number_of_machines;
}
void OAIAssessmentProperties::setNumberOfMachines(const qint32 &number_of_machines) {
    m_number_of_machines = number_of_machines;
    m_number_of_machines_isSet = true;
}

bool OAIAssessmentProperties::is_number_of_machines_Set() const{
    return m_number_of_machines_isSet;
}

bool OAIAssessmentProperties::is_number_of_machines_Valid() const{
    return m_number_of_machines_isValid;
}

QString OAIAssessmentProperties::getPercentile() const {
    return m_percentile;
}
void OAIAssessmentProperties::setPercentile(const QString &percentile) {
    m_percentile = percentile;
    m_percentile_isSet = true;
}

bool OAIAssessmentProperties::is_percentile_Set() const{
    return m_percentile_isSet;
}

bool OAIAssessmentProperties::is_percentile_Valid() const{
    return m_percentile_isValid;
}

QDateTime OAIAssessmentProperties::getPricesTimestamp() const {
    return m_prices_timestamp;
}
void OAIAssessmentProperties::setPricesTimestamp(const QDateTime &prices_timestamp) {
    m_prices_timestamp = prices_timestamp;
    m_prices_timestamp_isSet = true;
}

bool OAIAssessmentProperties::is_prices_timestamp_Set() const{
    return m_prices_timestamp_isSet;
}

bool OAIAssessmentProperties::is_prices_timestamp_Valid() const{
    return m_prices_timestamp_isValid;
}

double OAIAssessmentProperties::getScalingFactor() const {
    return m_scaling_factor;
}
void OAIAssessmentProperties::setScalingFactor(const double &scaling_factor) {
    m_scaling_factor = scaling_factor;
    m_scaling_factor_isSet = true;
}

bool OAIAssessmentProperties::is_scaling_factor_Set() const{
    return m_scaling_factor_isSet;
}

bool OAIAssessmentProperties::is_scaling_factor_Valid() const{
    return m_scaling_factor_isValid;
}

QString OAIAssessmentProperties::getStage() const {
    return m_stage;
}
void OAIAssessmentProperties::setStage(const QString &stage) {
    m_stage = stage;
    m_stage_isSet = true;
}

bool OAIAssessmentProperties::is_stage_Set() const{
    return m_stage_isSet;
}

bool OAIAssessmentProperties::is_stage_Valid() const{
    return m_stage_isValid;
}

QString OAIAssessmentProperties::getStatus() const {
    return m_status;
}
void OAIAssessmentProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAssessmentProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAssessmentProperties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAssessmentProperties::getTimeRange() const {
    return m_time_range;
}
void OAIAssessmentProperties::setTimeRange(const QString &time_range) {
    m_time_range = time_range;
    m_time_range_isSet = true;
}

bool OAIAssessmentProperties::is_time_range_Set() const{
    return m_time_range_isSet;
}

bool OAIAssessmentProperties::is_time_range_Valid() const{
    return m_time_range_isValid;
}

QDateTime OAIAssessmentProperties::getUpdatedTimestamp() const {
    return m_updated_timestamp;
}
void OAIAssessmentProperties::setUpdatedTimestamp(const QDateTime &updated_timestamp) {
    m_updated_timestamp = updated_timestamp;
    m_updated_timestamp_isSet = true;
}

bool OAIAssessmentProperties::is_updated_timestamp_Set() const{
    return m_updated_timestamp_isSet;
}

bool OAIAssessmentProperties::is_updated_timestamp_Valid() const{
    return m_updated_timestamp_isValid;
}

bool OAIAssessmentProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azure_hybrid_use_benefit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_offer_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_pricing_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_storage_redundancy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discount_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_bandwidth_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_compute_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_storage_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_machines_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prices_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scaling_factor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssessmentProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_azure_hybrid_use_benefit_isValid && m_azure_location_isValid && m_azure_offer_code_isValid && m_azure_pricing_tier_isValid && m_azure_storage_redundancy_isValid && m_currency_isValid && m_discount_percentage_isValid && m_percentile_isValid && m_scaling_factor_isValid && m_stage_isValid && m_time_range_isValid && true;
}

} // namespace OpenAPI
