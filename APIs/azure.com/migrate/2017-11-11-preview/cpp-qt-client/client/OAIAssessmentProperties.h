/**
 * Azure Migrate
 * Move your workloads to Azure.
 *
 * The version of the OpenAPI document: 2017-11-11-preview
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAssessmentProperties.h
 *
 * Properties of an assessment.
 */

#ifndef OAIAssessmentProperties_H
#define OAIAssessmentProperties_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAssessmentProperties : public OAIObject {
public:
    OAIAssessmentProperties();
    OAIAssessmentProperties(QString json);
    ~OAIAssessmentProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAzureHybridUseBenefit() const;
    void setAzureHybridUseBenefit(const QString &azure_hybrid_use_benefit);
    bool is_azure_hybrid_use_benefit_Set() const;
    bool is_azure_hybrid_use_benefit_Valid() const;

    QString getAzureLocation() const;
    void setAzureLocation(const QString &azure_location);
    bool is_azure_location_Set() const;
    bool is_azure_location_Valid() const;

    QString getAzureOfferCode() const;
    void setAzureOfferCode(const QString &azure_offer_code);
    bool is_azure_offer_code_Set() const;
    bool is_azure_offer_code_Valid() const;

    QString getAzurePricingTier() const;
    void setAzurePricingTier(const QString &azure_pricing_tier);
    bool is_azure_pricing_tier_Set() const;
    bool is_azure_pricing_tier_Valid() const;

    QString getAzureStorageRedundancy() const;
    void setAzureStorageRedundancy(const QString &azure_storage_redundancy);
    bool is_azure_storage_redundancy_Set() const;
    bool is_azure_storage_redundancy_Valid() const;

    QDateTime getCreatedTimestamp() const;
    void setCreatedTimestamp(const QDateTime &created_timestamp);
    bool is_created_timestamp_Set() const;
    bool is_created_timestamp_Valid() const;

    QString getCurrency() const;
    void setCurrency(const QString &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    double getDiscountPercentage() const;
    void setDiscountPercentage(const double &discount_percentage);
    bool is_discount_percentage_Set() const;
    bool is_discount_percentage_Valid() const;

    double getMonthlyBandwidthCost() const;
    void setMonthlyBandwidthCost(const double &monthly_bandwidth_cost);
    bool is_monthly_bandwidth_cost_Set() const;
    bool is_monthly_bandwidth_cost_Valid() const;

    double getMonthlyComputeCost() const;
    void setMonthlyComputeCost(const double &monthly_compute_cost);
    bool is_monthly_compute_cost_Set() const;
    bool is_monthly_compute_cost_Valid() const;

    double getMonthlyStorageCost() const;
    void setMonthlyStorageCost(const double &monthly_storage_cost);
    bool is_monthly_storage_cost_Set() const;
    bool is_monthly_storage_cost_Valid() const;

    qint32 getNumberOfMachines() const;
    void setNumberOfMachines(const qint32 &number_of_machines);
    bool is_number_of_machines_Set() const;
    bool is_number_of_machines_Valid() const;

    QString getPercentile() const;
    void setPercentile(const QString &percentile);
    bool is_percentile_Set() const;
    bool is_percentile_Valid() const;

    QDateTime getPricesTimestamp() const;
    void setPricesTimestamp(const QDateTime &prices_timestamp);
    bool is_prices_timestamp_Set() const;
    bool is_prices_timestamp_Valid() const;

    double getScalingFactor() const;
    void setScalingFactor(const double &scaling_factor);
    bool is_scaling_factor_Set() const;
    bool is_scaling_factor_Valid() const;

    QString getStage() const;
    void setStage(const QString &stage);
    bool is_stage_Set() const;
    bool is_stage_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTimeRange() const;
    void setTimeRange(const QString &time_range);
    bool is_time_range_Set() const;
    bool is_time_range_Valid() const;

    QDateTime getUpdatedTimestamp() const;
    void setUpdatedTimestamp(const QDateTime &updated_timestamp);
    bool is_updated_timestamp_Set() const;
    bool is_updated_timestamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_azure_hybrid_use_benefit;
    bool m_azure_hybrid_use_benefit_isSet;
    bool m_azure_hybrid_use_benefit_isValid;

    QString m_azure_location;
    bool m_azure_location_isSet;
    bool m_azure_location_isValid;

    QString m_azure_offer_code;
    bool m_azure_offer_code_isSet;
    bool m_azure_offer_code_isValid;

    QString m_azure_pricing_tier;
    bool m_azure_pricing_tier_isSet;
    bool m_azure_pricing_tier_isValid;

    QString m_azure_storage_redundancy;
    bool m_azure_storage_redundancy_isSet;
    bool m_azure_storage_redundancy_isValid;

    QDateTime m_created_timestamp;
    bool m_created_timestamp_isSet;
    bool m_created_timestamp_isValid;

    QString m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    double m_discount_percentage;
    bool m_discount_percentage_isSet;
    bool m_discount_percentage_isValid;

    double m_monthly_bandwidth_cost;
    bool m_monthly_bandwidth_cost_isSet;
    bool m_monthly_bandwidth_cost_isValid;

    double m_monthly_compute_cost;
    bool m_monthly_compute_cost_isSet;
    bool m_monthly_compute_cost_isValid;

    double m_monthly_storage_cost;
    bool m_monthly_storage_cost_isSet;
    bool m_monthly_storage_cost_isValid;

    qint32 m_number_of_machines;
    bool m_number_of_machines_isSet;
    bool m_number_of_machines_isValid;

    QString m_percentile;
    bool m_percentile_isSet;
    bool m_percentile_isValid;

    QDateTime m_prices_timestamp;
    bool m_prices_timestamp_isSet;
    bool m_prices_timestamp_isValid;

    double m_scaling_factor;
    bool m_scaling_factor_isSet;
    bool m_scaling_factor_isValid;

    QString m_stage;
    bool m_stage_isSet;
    bool m_stage_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_time_range;
    bool m_time_range_isSet;
    bool m_time_range_isValid;

    QDateTime m_updated_timestamp;
    bool m_updated_timestamp_isSet;
    bool m_updated_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAssessmentProperties)

#endif // OAIAssessmentProperties_H
