/**
 * Azure Migrate
 * Move your workloads to Azure.
 *
 * The version of the OpenAPI document: 2017-11-11-preview
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAssessedMachineProperties.h
 *
 * Properties of an assessed machine.
 */

#ifndef OAIAssessedMachineProperties_H
#define OAIAssessedMachineProperties_H

#include <QJsonObject>

#include "OAIAssessedDisk.h"
#include "OAIAssessedNetworkAdapter.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAssessedDisk;
class OAIAssessedNetworkAdapter;

class OAIAssessedMachineProperties : public OAIObject {
public:
    OAIAssessedMachineProperties();
    OAIAssessedMachineProperties(QString json);
    ~OAIAssessedMachineProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBootType() const;
    void setBootType(const QString &boot_type);
    bool is_boot_type_Set() const;
    bool is_boot_type_Valid() const;

    QDateTime getCreatedTimestamp() const;
    void setCreatedTimestamp(const QDateTime &created_timestamp);
    bool is_created_timestamp_Set() const;
    bool is_created_timestamp_Valid() const;

    QString getDatacenterContainer() const;
    void setDatacenterContainer(const QString &datacenter_container);
    bool is_datacenter_container_Set() const;
    bool is_datacenter_container_Valid() const;

    QString getDatacenterMachineId() const;
    void setDatacenterMachineId(const QString &datacenter_machine_id);
    bool is_datacenter_machine_id_Set() const;
    bool is_datacenter_machine_id_Valid() const;

    QString getDatacenterManagementServer() const;
    void setDatacenterManagementServer(const QString &datacenter_management_server);
    bool is_datacenter_management_server_Set() const;
    bool is_datacenter_management_server_Valid() const;

    QString getDatacenterManagementServerId() const;
    void setDatacenterManagementServerId(const QString &datacenter_management_server_id);
    bool is_datacenter_management_server_id_Set() const;
    bool is_datacenter_management_server_id_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QDateTime getDiscoveredTimestamp() const;
    void setDiscoveredTimestamp(const QDateTime &discovered_timestamp);
    bool is_discovered_timestamp_Set() const;
    bool is_discovered_timestamp_Valid() const;

    QMap<QString, OAIAssessedDisk> getDisks() const;
    void setDisks(const QMap<QString, OAIAssessedDisk> &disks);
    bool is_disks_Set() const;
    bool is_disks_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QList<QString> getGroups() const;
    void setGroups(const QList<QString> &groups);
    bool is_groups_Set() const;
    bool is_groups_Valid() const;

    double getMegabytesOfMemory() const;
    void setMegabytesOfMemory(const double &megabytes_of_memory);
    bool is_megabytes_of_memory_Set() const;
    bool is_megabytes_of_memory_Valid() const;

    double getMegabytesOfMemoryForRecommendedSize() const;
    void setMegabytesOfMemoryForRecommendedSize(const double &megabytes_of_memory_for_recommended_size);
    bool is_megabytes_of_memory_for_recommended_size_Set() const;
    bool is_megabytes_of_memory_for_recommended_size_Valid() const;

    double getMonthlyBandwidthCost() const;
    void setMonthlyBandwidthCost(const double &monthly_bandwidth_cost);
    bool is_monthly_bandwidth_cost_Set() const;
    bool is_monthly_bandwidth_cost_Valid() const;

    double getMonthlyComputeCostForRecommendedSize() const;
    void setMonthlyComputeCostForRecommendedSize(const double &monthly_compute_cost_for_recommended_size);
    bool is_monthly_compute_cost_for_recommended_size_Set() const;
    bool is_monthly_compute_cost_for_recommended_size_Valid() const;

    double getMonthlyStorageCost() const;
    void setMonthlyStorageCost(const double &monthly_storage_cost);
    bool is_monthly_storage_cost_Set() const;
    bool is_monthly_storage_cost_Valid() const;

    QMap<QString, OAIAssessedNetworkAdapter> getNetworkAdapters() const;
    void setNetworkAdapters(const QMap<QString, OAIAssessedNetworkAdapter> &network_adapters);
    bool is_network_adapters_Set() const;
    bool is_network_adapters_Valid() const;

    qint32 getNumberOfCores() const;
    void setNumberOfCores(const qint32 &number_of_cores);
    bool is_number_of_cores_Set() const;
    bool is_number_of_cores_Valid() const;

    qint32 getNumberOfCoresForRecommendedSize() const;
    void setNumberOfCoresForRecommendedSize(const qint32 &number_of_cores_for_recommended_size);
    bool is_number_of_cores_for_recommended_size_Set() const;
    bool is_number_of_cores_for_recommended_size_Valid() const;

    QString getOperatingSystem() const;
    void setOperatingSystem(const QString &operating_system);
    bool is_operating_system_Set() const;
    bool is_operating_system_Valid() const;

    double getPercentageCoresUtilization() const;
    void setPercentageCoresUtilization(const double &percentage_cores_utilization);
    bool is_percentage_cores_utilization_Set() const;
    bool is_percentage_cores_utilization_Valid() const;

    double getPercentageMemoryUtilization() const;
    void setPercentageMemoryUtilization(const double &percentage_memory_utilization);
    bool is_percentage_memory_utilization_Set() const;
    bool is_percentage_memory_utilization_Valid() const;

    QString getRecommendedSize() const;
    void setRecommendedSize(const QString &recommended_size);
    bool is_recommended_size_Set() const;
    bool is_recommended_size_Valid() const;

    QString getSuitability() const;
    void setSuitability(const QString &suitability);
    bool is_suitability_Set() const;
    bool is_suitability_Valid() const;

    QString getSuitabilityExplanation() const;
    void setSuitabilityExplanation(const QString &suitability_explanation);
    bool is_suitability_explanation_Set() const;
    bool is_suitability_explanation_Valid() const;

    QDateTime getUpdatedTimestamp() const;
    void setUpdatedTimestamp(const QDateTime &updated_timestamp);
    bool is_updated_timestamp_Set() const;
    bool is_updated_timestamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_boot_type;
    bool m_boot_type_isSet;
    bool m_boot_type_isValid;

    QDateTime m_created_timestamp;
    bool m_created_timestamp_isSet;
    bool m_created_timestamp_isValid;

    QString m_datacenter_container;
    bool m_datacenter_container_isSet;
    bool m_datacenter_container_isValid;

    QString m_datacenter_machine_id;
    bool m_datacenter_machine_id_isSet;
    bool m_datacenter_machine_id_isValid;

    QString m_datacenter_management_server;
    bool m_datacenter_management_server_isSet;
    bool m_datacenter_management_server_isValid;

    QString m_datacenter_management_server_id;
    bool m_datacenter_management_server_id_isSet;
    bool m_datacenter_management_server_id_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QDateTime m_discovered_timestamp;
    bool m_discovered_timestamp_isSet;
    bool m_discovered_timestamp_isValid;

    QMap<QString, OAIAssessedDisk> m_disks;
    bool m_disks_isSet;
    bool m_disks_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QList<QString> m_groups;
    bool m_groups_isSet;
    bool m_groups_isValid;

    double m_megabytes_of_memory;
    bool m_megabytes_of_memory_isSet;
    bool m_megabytes_of_memory_isValid;

    double m_megabytes_of_memory_for_recommended_size;
    bool m_megabytes_of_memory_for_recommended_size_isSet;
    bool m_megabytes_of_memory_for_recommended_size_isValid;

    double m_monthly_bandwidth_cost;
    bool m_monthly_bandwidth_cost_isSet;
    bool m_monthly_bandwidth_cost_isValid;

    double m_monthly_compute_cost_for_recommended_size;
    bool m_monthly_compute_cost_for_recommended_size_isSet;
    bool m_monthly_compute_cost_for_recommended_size_isValid;

    double m_monthly_storage_cost;
    bool m_monthly_storage_cost_isSet;
    bool m_monthly_storage_cost_isValid;

    QMap<QString, OAIAssessedNetworkAdapter> m_network_adapters;
    bool m_network_adapters_isSet;
    bool m_network_adapters_isValid;

    qint32 m_number_of_cores;
    bool m_number_of_cores_isSet;
    bool m_number_of_cores_isValid;

    qint32 m_number_of_cores_for_recommended_size;
    bool m_number_of_cores_for_recommended_size_isSet;
    bool m_number_of_cores_for_recommended_size_isValid;

    QString m_operating_system;
    bool m_operating_system_isSet;
    bool m_operating_system_isValid;

    double m_percentage_cores_utilization;
    bool m_percentage_cores_utilization_isSet;
    bool m_percentage_cores_utilization_isValid;

    double m_percentage_memory_utilization;
    bool m_percentage_memory_utilization_isSet;
    bool m_percentage_memory_utilization_isValid;

    QString m_recommended_size;
    bool m_recommended_size_isSet;
    bool m_recommended_size_isValid;

    QString m_suitability;
    bool m_suitability_isSet;
    bool m_suitability_isValid;

    QString m_suitability_explanation;
    bool m_suitability_explanation_isSet;
    bool m_suitability_explanation_isValid;

    QDateTime m_updated_timestamp;
    bool m_updated_timestamp_isSet;
    bool m_updated_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAssessedMachineProperties)

#endif // OAIAssessedMachineProperties_H
