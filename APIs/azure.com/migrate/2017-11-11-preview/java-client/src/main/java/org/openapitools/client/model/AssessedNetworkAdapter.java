/*
 * Azure Migrate
 * Move your workloads to Azure.
 *
 * The version of the OpenAPI document: 2017-11-11-preview
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A network adapter assessed for an assessment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:33.600128-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssessedNetworkAdapter {
  public static final String SERIALIZED_NAME_IP_ADDRESSES = "ipAddresses";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESSES)
  private List<String> ipAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAC_ADDRESS = "macAddress";
  @SerializedName(SERIALIZED_NAME_MAC_ADDRESS)
  private String macAddress;

  public static final String SERIALIZED_NAME_MEGABYTES_PER_SECOND_RECEIVED = "megabytesPerSecondReceived";
  @SerializedName(SERIALIZED_NAME_MEGABYTES_PER_SECOND_RECEIVED)
  private Double megabytesPerSecondReceived;

  public static final String SERIALIZED_NAME_MEGABYTES_PER_SECOND_TRANSMITTED = "megabytesPerSecondTransmitted";
  @SerializedName(SERIALIZED_NAME_MEGABYTES_PER_SECOND_TRANSMITTED)
  private Double megabytesPerSecondTransmitted;

  public static final String SERIALIZED_NAME_MONTHLY_BANDWIDTH_COSTS = "monthlyBandwidthCosts";
  @SerializedName(SERIALIZED_NAME_MONTHLY_BANDWIDTH_COSTS)
  private Double monthlyBandwidthCosts;

  public static final String SERIALIZED_NAME_NET_GIGABYTES_TRANSMITTED_PER_MONTH = "netGigabytesTransmittedPerMonth";
  @SerializedName(SERIALIZED_NAME_NET_GIGABYTES_TRANSMITTED_PER_MONTH)
  private Double netGigabytesTransmittedPerMonth;

  /**
   * Whether this adapter is suitable for Azure.
   */
  @JsonAdapter(SuitabilityEnum.Adapter.class)
  public enum SuitabilityEnum {
    UNKNOWN("Unknown"),
    
    NOT_SUITABLE("NotSuitable"),
    
    SUITABLE("Suitable"),
    
    CONDITIONALLY_SUITABLE("ConditionallySuitable");

    private String value;

    SuitabilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SuitabilityEnum fromValue(String value) {
      for (SuitabilityEnum b : SuitabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SuitabilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SuitabilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SuitabilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SuitabilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SuitabilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUITABILITY = "suitability";
  @SerializedName(SERIALIZED_NAME_SUITABILITY)
  private SuitabilityEnum suitability;

  /**
   * If network adapter is suitable, this explains the reasons and mitigation steps.
   */
  @JsonAdapter(SuitabilityExplanationEnum.Adapter.class)
  public enum SuitabilityExplanationEnum {
    UNKNOWN("Unknown"),
    
    NOT_APPLICABLE("NotApplicable"),
    
    INTERNAL_ERROR_OCCURED("InternalErrorOccured");

    private String value;

    SuitabilityExplanationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SuitabilityExplanationEnum fromValue(String value) {
      for (SuitabilityExplanationEnum b : SuitabilityExplanationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SuitabilityExplanationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SuitabilityExplanationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SuitabilityExplanationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SuitabilityExplanationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SuitabilityExplanationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUITABILITY_EXPLANATION = "suitabilityExplanation";
  @SerializedName(SERIALIZED_NAME_SUITABILITY_EXPLANATION)
  private SuitabilityExplanationEnum suitabilityExplanation;

  public AssessedNetworkAdapter() {
  }

  public AssessedNetworkAdapter(
     List<String> ipAddresses, 
     String macAddress, 
     Double megabytesPerSecondReceived, 
     Double megabytesPerSecondTransmitted, 
     Double monthlyBandwidthCosts, 
     SuitabilityEnum suitability, 
     SuitabilityExplanationEnum suitabilityExplanation
  ) {
    this();
    this.ipAddresses = ipAddresses;
    this.macAddress = macAddress;
    this.megabytesPerSecondReceived = megabytesPerSecondReceived;
    this.megabytesPerSecondTransmitted = megabytesPerSecondTransmitted;
    this.monthlyBandwidthCosts = monthlyBandwidthCosts;
    this.suitability = suitability;
    this.suitabilityExplanation = suitabilityExplanation;
  }

  /**
   * List of IP Addresses on the network adapter.
   * @return ipAddresses
   */
  @javax.annotation.Nullable
  public List<String> getIpAddresses() {
    return ipAddresses;
  }



  /**
   * MAC Address of the network adapter.
   * @return macAddress
   */
  @javax.annotation.Nullable
  public String getMacAddress() {
    return macAddress;
  }



  /**
   * Adapter throughput for incoming traffic in MegaBytes per second.
   * @return megabytesPerSecondReceived
   */
  @javax.annotation.Nullable
  public Double getMegabytesPerSecondReceived() {
    return megabytesPerSecondReceived;
  }



  /**
   * Adapter throughput for outgoing traffic in MegaBytes per second.
   * @return megabytesPerSecondTransmitted
   */
  @javax.annotation.Nullable
  public Double getMegabytesPerSecondTransmitted() {
    return megabytesPerSecondTransmitted;
  }



  /**
   * Monthly cost estimate for network bandwidth used by this network adapter.
   * @return monthlyBandwidthCosts
   */
  @javax.annotation.Nullable
  public Double getMonthlyBandwidthCosts() {
    return monthlyBandwidthCosts;
  }



  public AssessedNetworkAdapter netGigabytesTransmittedPerMonth(Double netGigabytesTransmittedPerMonth) {
    this.netGigabytesTransmittedPerMonth = netGigabytesTransmittedPerMonth;
    return this;
  }

  /**
   * Gigabytes transmitted through this adapter each month.
   * @return netGigabytesTransmittedPerMonth
   */
  @javax.annotation.Nullable
  public Double getNetGigabytesTransmittedPerMonth() {
    return netGigabytesTransmittedPerMonth;
  }

  public void setNetGigabytesTransmittedPerMonth(Double netGigabytesTransmittedPerMonth) {
    this.netGigabytesTransmittedPerMonth = netGigabytesTransmittedPerMonth;
  }


  /**
   * Whether this adapter is suitable for Azure.
   * @return suitability
   */
  @javax.annotation.Nullable
  public SuitabilityEnum getSuitability() {
    return suitability;
  }



  /**
   * If network adapter is suitable, this explains the reasons and mitigation steps.
   * @return suitabilityExplanation
   */
  @javax.annotation.Nullable
  public SuitabilityExplanationEnum getSuitabilityExplanation() {
    return suitabilityExplanation;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssessedNetworkAdapter assessedNetworkAdapter = (AssessedNetworkAdapter) o;
    return Objects.equals(this.ipAddresses, assessedNetworkAdapter.ipAddresses) &&
        Objects.equals(this.macAddress, assessedNetworkAdapter.macAddress) &&
        Objects.equals(this.megabytesPerSecondReceived, assessedNetworkAdapter.megabytesPerSecondReceived) &&
        Objects.equals(this.megabytesPerSecondTransmitted, assessedNetworkAdapter.megabytesPerSecondTransmitted) &&
        Objects.equals(this.monthlyBandwidthCosts, assessedNetworkAdapter.monthlyBandwidthCosts) &&
        Objects.equals(this.netGigabytesTransmittedPerMonth, assessedNetworkAdapter.netGigabytesTransmittedPerMonth) &&
        Objects.equals(this.suitability, assessedNetworkAdapter.suitability) &&
        Objects.equals(this.suitabilityExplanation, assessedNetworkAdapter.suitabilityExplanation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipAddresses, macAddress, megabytesPerSecondReceived, megabytesPerSecondTransmitted, monthlyBandwidthCosts, netGigabytesTransmittedPerMonth, suitability, suitabilityExplanation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssessedNetworkAdapter {\n");
    sb.append("    ipAddresses: ").append(toIndentedString(ipAddresses)).append("\n");
    sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
    sb.append("    megabytesPerSecondReceived: ").append(toIndentedString(megabytesPerSecondReceived)).append("\n");
    sb.append("    megabytesPerSecondTransmitted: ").append(toIndentedString(megabytesPerSecondTransmitted)).append("\n");
    sb.append("    monthlyBandwidthCosts: ").append(toIndentedString(monthlyBandwidthCosts)).append("\n");
    sb.append("    netGigabytesTransmittedPerMonth: ").append(toIndentedString(netGigabytesTransmittedPerMonth)).append("\n");
    sb.append("    suitability: ").append(toIndentedString(suitability)).append("\n");
    sb.append("    suitabilityExplanation: ").append(toIndentedString(suitabilityExplanation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ipAddresses");
    openapiFields.add("macAddress");
    openapiFields.add("megabytesPerSecondReceived");
    openapiFields.add("megabytesPerSecondTransmitted");
    openapiFields.add("monthlyBandwidthCosts");
    openapiFields.add("netGigabytesTransmittedPerMonth");
    openapiFields.add("suitability");
    openapiFields.add("suitabilityExplanation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssessedNetworkAdapter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssessedNetworkAdapter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssessedNetworkAdapter is not found in the empty JSON string", AssessedNetworkAdapter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssessedNetworkAdapter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssessedNetworkAdapter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("ipAddresses") != null && !jsonObj.get("ipAddresses").isJsonNull() && !jsonObj.get("ipAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("ipAddresses").toString()));
      }
      if ((jsonObj.get("macAddress") != null && !jsonObj.get("macAddress").isJsonNull()) && !jsonObj.get("macAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `macAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("macAddress").toString()));
      }
      if ((jsonObj.get("suitability") != null && !jsonObj.get("suitability").isJsonNull()) && !jsonObj.get("suitability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suitability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suitability").toString()));
      }
      // validate the optional field `suitability`
      if (jsonObj.get("suitability") != null && !jsonObj.get("suitability").isJsonNull()) {
        SuitabilityEnum.validateJsonElement(jsonObj.get("suitability"));
      }
      if ((jsonObj.get("suitabilityExplanation") != null && !jsonObj.get("suitabilityExplanation").isJsonNull()) && !jsonObj.get("suitabilityExplanation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suitabilityExplanation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suitabilityExplanation").toString()));
      }
      // validate the optional field `suitabilityExplanation`
      if (jsonObj.get("suitabilityExplanation") != null && !jsonObj.get("suitabilityExplanation").isJsonNull()) {
        SuitabilityExplanationEnum.validateJsonElement(jsonObj.get("suitabilityExplanation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssessedNetworkAdapter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssessedNetworkAdapter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssessedNetworkAdapter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssessedNetworkAdapter.class));

       return (TypeAdapter<T>) new TypeAdapter<AssessedNetworkAdapter>() {
           @Override
           public void write(JsonWriter out, AssessedNetworkAdapter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssessedNetworkAdapter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssessedNetworkAdapter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssessedNetworkAdapter
   * @throws IOException if the JSON string is invalid with respect to AssessedNetworkAdapter
   */
  public static AssessedNetworkAdapter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssessedNetworkAdapter.class);
  }

  /**
   * Convert an instance of AssessedNetworkAdapter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

