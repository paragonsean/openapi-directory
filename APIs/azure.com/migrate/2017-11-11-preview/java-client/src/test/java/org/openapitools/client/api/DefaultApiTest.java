/*
 * Azure Migrate
 * Move your workloads to Azure.
 *
 * The version of the OpenAPI document: 2017-11-11-preview
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssessedMachine;
import org.openapitools.client.model.AssessedMachineResultList;
import org.openapitools.client.model.Assessment;
import org.openapitools.client.model.AssessmentResultList;
import org.openapitools.client.model.DownloadUrl;
import org.openapitools.client.model.Group;
import org.openapitools.client.model.GroupResultList;
import org.openapitools.client.model.Machine;
import org.openapitools.client.model.MachineResultList;
import org.openapitools.client.model.OperationResultList;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectKey;
import org.openapitools.client.model.ProjectResultList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Get an assessed machine.
     *
     * Get an assessed machine with its size &amp; cost estimate that was evaluated in the specified assessment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assessedMachinesGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String projectName = null;
        String groupName = null;
        String assessmentName = null;
        String assessedMachineName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        AssessedMachine response = api.assessedMachinesGet(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, assessedMachineName, apiVersion, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Get assessed machines for assessment.
     *
     * Get list of machines that assessed as part of the specified assessment. Returns a json array of objects of type &#39;assessedMachine&#39; as specified in the Models section.  Whenever an assessment is created or updated, it goes under computation. During this phase, the &#39;status&#39; field of Assessment object reports &#39;Computing&#39;. During the period when the assessment is under computation, the list of assessed machines is empty and no assessed machines are returned by this call. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assessedMachinesListByAssessmentTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String projectName = null;
        String groupName = null;
        String assessmentName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        AssessedMachineResultList response = api.assessedMachinesListByAssessment(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Create or Update assessment.
     *
     * Create a new assessment with the given name and the specified settings. Since name of an assessment in a project is a unique identifier, if an assessment with the name provided already exists, then the existing assessment is updated.  Any PUT operation, resulting in either create or update on an assessment, will cause the assessment to go in a \&quot;InProgress\&quot; state. This will be indicated by the field &#39;computationState&#39; on the Assessment object. During this time no other PUT operation will be allowed on that assessment object, nor will a Delete operation. Once the computation for the assessment is complete, the field &#39;computationState&#39; will be updated to &#39;Ready&#39;, and then other PUT or DELETE operations can happen on the assessment.  When assessment is under computation, any PUT will lead to a 400 - Bad Request error. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assessmentsCreateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String projectName = null;
        String groupName = null;
        String assessmentName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        Assessment assessment = null;
        Assessment response = api.assessmentsCreate(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage, assessment);
        // TODO: test validations
    }

    /**
     * Deletes an assessment from the project.
     *
     * Delete an assessment from the project. The machines remain in the assessment. Deleting a non-existent assessment results in a no-operation.  When an assessment is under computation, as indicated by the &#39;computationState&#39; field, it cannot be deleted. Any such attempt will return a 400 - Bad Request. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assessmentsDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String projectName = null;
        String groupName = null;
        String assessmentName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        api.assessmentsDelete(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Get an assessment.
     *
     * Get an existing assessment with the specified name. Returns a json object of type &#39;assessment&#39; as specified in Models section.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assessmentsGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String projectName = null;
        String groupName = null;
        String assessmentName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        Assessment response = api.assessmentsGet(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Get download URL for the assessment report.
     *
     * Get the URL for downloading the assessment in a report format.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assessmentsGetReportDownloadUrlTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String projectName = null;
        String groupName = null;
        String assessmentName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        DownloadUrl response = api.assessmentsGetReportDownloadUrl(subscriptionId, resourceGroupName, projectName, groupName, assessmentName, apiVersion, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Get all assessments created for the specified group.
     *
     * Get all assessments created for the specified group.  Returns a json array of objects of type &#39;assessment&#39; as specified in Models section. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assessmentsListByGroupTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String projectName = null;
        String groupName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        AssessmentResultList response = api.assessmentsListByGroup(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Get all assessments created in the project.
     *
     * Get all assessments created in the project.  Returns a json array of objects of type &#39;assessment&#39; as specified in Models section. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assessmentsListByProjectTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String projectName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        AssessmentResultList response = api.assessmentsListByProject(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Create a new group with specified settings. If group with the name provided already exists, then the existing group is updated.
     *
     * Create a new group by sending a json object of type &#39;group&#39; as given in Models section as part of the Request Body. The group name in a project is unique. Labels can be applied on a group as part of creation.  If a group with the groupName specified in the URL already exists, then this call acts as an update.  This operation is Idempotent. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsCreateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String projectName = null;
        String groupName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        Group group = null;
        Group response = api.groupsCreate(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage, group);
        // TODO: test validations
    }

    /**
     * Delete the group
     *
     * Delete the group from the project. The machines remain in the project. Deleting a non-existent group results in a no-operation.  A group is an aggregation mechanism for machines in a project. Therefore, deleting group does not delete machines in it. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String projectName = null;
        String groupName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        api.groupsDelete(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Get a specific group.
     *
     * Get information related to a specific group in the project. Returns a json object of type &#39;group&#39; as specified in the models section.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String projectName = null;
        String groupName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        Group response = api.groupsGet(subscriptionId, resourceGroupName, projectName, groupName, apiVersion, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Get all groups
     *
     * Get all groups created in the project. Returns a json array of objects of type &#39;group&#39; as specified in the Models section.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupsListByProjectTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String projectName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        GroupResultList response = api.groupsListByProject(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Get a specific machine.
     *
     * Get the machine with the specified name. Returns a json object of type &#39;machine&#39; defined in Models section.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String projectName = null;
        String machineName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        Machine response = api.machinesGet(subscriptionId, resourceGroupName, projectName, machineName, apiVersion, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Get all machines in the project
     *
     * Get data of all the machines available in the project. Returns a json array of objects of type &#39;machine&#39; defined in Models section.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void machinesListByProjectTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String projectName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        MachineResultList response = api.machinesListByProject(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Get list of operations supported in the API.
     *
     * Get a list of REST API supported by Microsoft.Migrate provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void operationsListTest() throws ApiException {
        OperationResultList response = api.operationsList();
        // TODO: test validations
    }

    /**
     * Create or update project.
     *
     * Create a project with specified name. If a project already exists, update it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsCreateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String projectName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        Project project = null;
        Project response = api.projectsCreate(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, project);
        // TODO: test validations
    }

    /**
     * Delete the project
     *
     * Delete the project. Deleting non-existent project is a no-operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String projectName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        api.projectsDelete(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Get the specified project.
     *
     * Get the project with the specified name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String projectName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        Project response = api.projectsGet(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Get shared keys for the project.
     *
     * Gets the Log Analytics Workspace ID and Primary Key for the specified project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsGetKeysTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String projectName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        ProjectKey response = api.projectsGetKeys(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Get all projects.
     *
     * Get all the projects in the resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsListTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        ProjectResultList response = api.projectsList(subscriptionId, resourceGroupName, apiVersion, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Update project.
     *
     * Update a project with specified name. Supports partial updates, for example only tags can be provided.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String projectName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        Project project = null;
        Project response = api.projectsUpdate(subscriptionId, resourceGroupName, projectName, apiVersion, acceptLanguage, project);
        // TODO: test validations
    }

}
