# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssessedNetworkAdapter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_addresses: List[str]=None, mac_address: str=None, megabytes_per_second_received: float=None, megabytes_per_second_transmitted: float=None, monthly_bandwidth_costs: float=None, net_gigabytes_transmitted_per_month: float=None, suitability: str=None, suitability_explanation: str=None):
        """AssessedNetworkAdapter - a model defined in OpenAPI

        :param ip_addresses: The ip_addresses of this AssessedNetworkAdapter.
        :param mac_address: The mac_address of this AssessedNetworkAdapter.
        :param megabytes_per_second_received: The megabytes_per_second_received of this AssessedNetworkAdapter.
        :param megabytes_per_second_transmitted: The megabytes_per_second_transmitted of this AssessedNetworkAdapter.
        :param monthly_bandwidth_costs: The monthly_bandwidth_costs of this AssessedNetworkAdapter.
        :param net_gigabytes_transmitted_per_month: The net_gigabytes_transmitted_per_month of this AssessedNetworkAdapter.
        :param suitability: The suitability of this AssessedNetworkAdapter.
        :param suitability_explanation: The suitability_explanation of this AssessedNetworkAdapter.
        """
        self.openapi_types = {
            'ip_addresses': List[str],
            'mac_address': str,
            'megabytes_per_second_received': float,
            'megabytes_per_second_transmitted': float,
            'monthly_bandwidth_costs': float,
            'net_gigabytes_transmitted_per_month': float,
            'suitability': str,
            'suitability_explanation': str
        }

        self.attribute_map = {
            'ip_addresses': 'ipAddresses',
            'mac_address': 'macAddress',
            'megabytes_per_second_received': 'megabytesPerSecondReceived',
            'megabytes_per_second_transmitted': 'megabytesPerSecondTransmitted',
            'monthly_bandwidth_costs': 'monthlyBandwidthCosts',
            'net_gigabytes_transmitted_per_month': 'netGigabytesTransmittedPerMonth',
            'suitability': 'suitability',
            'suitability_explanation': 'suitabilityExplanation'
        }

        self._ip_addresses = ip_addresses
        self._mac_address = mac_address
        self._megabytes_per_second_received = megabytes_per_second_received
        self._megabytes_per_second_transmitted = megabytes_per_second_transmitted
        self._monthly_bandwidth_costs = monthly_bandwidth_costs
        self._net_gigabytes_transmitted_per_month = net_gigabytes_transmitted_per_month
        self._suitability = suitability
        self._suitability_explanation = suitability_explanation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssessedNetworkAdapter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssessedNetworkAdapter of this AssessedNetworkAdapter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this AssessedNetworkAdapter.

        List of IP Addresses on the network adapter.

        :return: The ip_addresses of this AssessedNetworkAdapter.
        :rtype: List[str]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this AssessedNetworkAdapter.

        List of IP Addresses on the network adapter.

        :param ip_addresses: The ip_addresses of this AssessedNetworkAdapter.
        :type ip_addresses: List[str]
        """

        self._ip_addresses = ip_addresses

    @property
    def mac_address(self):
        """Gets the mac_address of this AssessedNetworkAdapter.

        MAC Address of the network adapter.

        :return: The mac_address of this AssessedNetworkAdapter.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this AssessedNetworkAdapter.

        MAC Address of the network adapter.

        :param mac_address: The mac_address of this AssessedNetworkAdapter.
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def megabytes_per_second_received(self):
        """Gets the megabytes_per_second_received of this AssessedNetworkAdapter.

        Adapter throughput for incoming traffic in MegaBytes per second.

        :return: The megabytes_per_second_received of this AssessedNetworkAdapter.
        :rtype: float
        """
        return self._megabytes_per_second_received

    @megabytes_per_second_received.setter
    def megabytes_per_second_received(self, megabytes_per_second_received):
        """Sets the megabytes_per_second_received of this AssessedNetworkAdapter.

        Adapter throughput for incoming traffic in MegaBytes per second.

        :param megabytes_per_second_received: The megabytes_per_second_received of this AssessedNetworkAdapter.
        :type megabytes_per_second_received: float
        """

        self._megabytes_per_second_received = megabytes_per_second_received

    @property
    def megabytes_per_second_transmitted(self):
        """Gets the megabytes_per_second_transmitted of this AssessedNetworkAdapter.

        Adapter throughput for outgoing traffic in MegaBytes per second.

        :return: The megabytes_per_second_transmitted of this AssessedNetworkAdapter.
        :rtype: float
        """
        return self._megabytes_per_second_transmitted

    @megabytes_per_second_transmitted.setter
    def megabytes_per_second_transmitted(self, megabytes_per_second_transmitted):
        """Sets the megabytes_per_second_transmitted of this AssessedNetworkAdapter.

        Adapter throughput for outgoing traffic in MegaBytes per second.

        :param megabytes_per_second_transmitted: The megabytes_per_second_transmitted of this AssessedNetworkAdapter.
        :type megabytes_per_second_transmitted: float
        """

        self._megabytes_per_second_transmitted = megabytes_per_second_transmitted

    @property
    def monthly_bandwidth_costs(self):
        """Gets the monthly_bandwidth_costs of this AssessedNetworkAdapter.

        Monthly cost estimate for network bandwidth used by this network adapter.

        :return: The monthly_bandwidth_costs of this AssessedNetworkAdapter.
        :rtype: float
        """
        return self._monthly_bandwidth_costs

    @monthly_bandwidth_costs.setter
    def monthly_bandwidth_costs(self, monthly_bandwidth_costs):
        """Sets the monthly_bandwidth_costs of this AssessedNetworkAdapter.

        Monthly cost estimate for network bandwidth used by this network adapter.

        :param monthly_bandwidth_costs: The monthly_bandwidth_costs of this AssessedNetworkAdapter.
        :type monthly_bandwidth_costs: float
        """

        self._monthly_bandwidth_costs = monthly_bandwidth_costs

    @property
    def net_gigabytes_transmitted_per_month(self):
        """Gets the net_gigabytes_transmitted_per_month of this AssessedNetworkAdapter.

        Gigabytes transmitted through this adapter each month.

        :return: The net_gigabytes_transmitted_per_month of this AssessedNetworkAdapter.
        :rtype: float
        """
        return self._net_gigabytes_transmitted_per_month

    @net_gigabytes_transmitted_per_month.setter
    def net_gigabytes_transmitted_per_month(self, net_gigabytes_transmitted_per_month):
        """Sets the net_gigabytes_transmitted_per_month of this AssessedNetworkAdapter.

        Gigabytes transmitted through this adapter each month.

        :param net_gigabytes_transmitted_per_month: The net_gigabytes_transmitted_per_month of this AssessedNetworkAdapter.
        :type net_gigabytes_transmitted_per_month: float
        """

        self._net_gigabytes_transmitted_per_month = net_gigabytes_transmitted_per_month

    @property
    def suitability(self):
        """Gets the suitability of this AssessedNetworkAdapter.

        Whether this adapter is suitable for Azure.

        :return: The suitability of this AssessedNetworkAdapter.
        :rtype: str
        """
        return self._suitability

    @suitability.setter
    def suitability(self, suitability):
        """Sets the suitability of this AssessedNetworkAdapter.

        Whether this adapter is suitable for Azure.

        :param suitability: The suitability of this AssessedNetworkAdapter.
        :type suitability: str
        """
        allowed_values = ["Unknown", "NotSuitable", "Suitable", "ConditionallySuitable"]  # noqa: E501
        if suitability not in allowed_values:
            raise ValueError(
                "Invalid value for `suitability` ({0}), must be one of {1}"
                .format(suitability, allowed_values)
            )

        self._suitability = suitability

    @property
    def suitability_explanation(self):
        """Gets the suitability_explanation of this AssessedNetworkAdapter.

        If network adapter is suitable, this explains the reasons and mitigation steps.

        :return: The suitability_explanation of this AssessedNetworkAdapter.
        :rtype: str
        """
        return self._suitability_explanation

    @suitability_explanation.setter
    def suitability_explanation(self, suitability_explanation):
        """Sets the suitability_explanation of this AssessedNetworkAdapter.

        If network adapter is suitable, this explains the reasons and mitigation steps.

        :param suitability_explanation: The suitability_explanation of this AssessedNetworkAdapter.
        :type suitability_explanation: str
        """
        allowed_values = ["Unknown", "NotApplicable", "InternalErrorOccured"]  # noqa: E501
        if suitability_explanation not in allowed_values:
            raise ValueError(
                "Invalid value for `suitability_explanation` ({0}), must be one of {1}"
                .format(suitability_explanation, allowed_values)
            )

        self._suitability_explanation = suitability_explanation
