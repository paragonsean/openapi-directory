# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssessedDisk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gigabytes_consumed: float=None, gigabytes_for_recommended_disk_size: int=None, gigabytes_provisioned: float=None, megabytes_per_second_of_read: float=None, megabytes_per_second_of_write: float=None, monthly_storage_cost: float=None, name: str=None, number_of_read_operations_per_second: float=None, number_of_write_operations_per_second: float=None, recommended_disk_size: str=None, recommended_disk_type: str=None, suitability: str=None, suitability_explanation: str=None):
        """AssessedDisk - a model defined in OpenAPI

        :param gigabytes_consumed: The gigabytes_consumed of this AssessedDisk.
        :param gigabytes_for_recommended_disk_size: The gigabytes_for_recommended_disk_size of this AssessedDisk.
        :param gigabytes_provisioned: The gigabytes_provisioned of this AssessedDisk.
        :param megabytes_per_second_of_read: The megabytes_per_second_of_read of this AssessedDisk.
        :param megabytes_per_second_of_write: The megabytes_per_second_of_write of this AssessedDisk.
        :param monthly_storage_cost: The monthly_storage_cost of this AssessedDisk.
        :param name: The name of this AssessedDisk.
        :param number_of_read_operations_per_second: The number_of_read_operations_per_second of this AssessedDisk.
        :param number_of_write_operations_per_second: The number_of_write_operations_per_second of this AssessedDisk.
        :param recommended_disk_size: The recommended_disk_size of this AssessedDisk.
        :param recommended_disk_type: The recommended_disk_type of this AssessedDisk.
        :param suitability: The suitability of this AssessedDisk.
        :param suitability_explanation: The suitability_explanation of this AssessedDisk.
        """
        self.openapi_types = {
            'gigabytes_consumed': float,
            'gigabytes_for_recommended_disk_size': int,
            'gigabytes_provisioned': float,
            'megabytes_per_second_of_read': float,
            'megabytes_per_second_of_write': float,
            'monthly_storage_cost': float,
            'name': str,
            'number_of_read_operations_per_second': float,
            'number_of_write_operations_per_second': float,
            'recommended_disk_size': str,
            'recommended_disk_type': str,
            'suitability': str,
            'suitability_explanation': str
        }

        self.attribute_map = {
            'gigabytes_consumed': 'gigabytesConsumed',
            'gigabytes_for_recommended_disk_size': 'gigabytesForRecommendedDiskSize',
            'gigabytes_provisioned': 'gigabytesProvisioned',
            'megabytes_per_second_of_read': 'megabytesPerSecondOfRead',
            'megabytes_per_second_of_write': 'megabytesPerSecondOfWrite',
            'monthly_storage_cost': 'monthlyStorageCost',
            'name': 'name',
            'number_of_read_operations_per_second': 'numberOfReadOperationsPerSecond',
            'number_of_write_operations_per_second': 'numberOfWriteOperationsPerSecond',
            'recommended_disk_size': 'recommendedDiskSize',
            'recommended_disk_type': 'recommendedDiskType',
            'suitability': 'suitability',
            'suitability_explanation': 'suitabilityExplanation'
        }

        self._gigabytes_consumed = gigabytes_consumed
        self._gigabytes_for_recommended_disk_size = gigabytes_for_recommended_disk_size
        self._gigabytes_provisioned = gigabytes_provisioned
        self._megabytes_per_second_of_read = megabytes_per_second_of_read
        self._megabytes_per_second_of_write = megabytes_per_second_of_write
        self._monthly_storage_cost = monthly_storage_cost
        self._name = name
        self._number_of_read_operations_per_second = number_of_read_operations_per_second
        self._number_of_write_operations_per_second = number_of_write_operations_per_second
        self._recommended_disk_size = recommended_disk_size
        self._recommended_disk_type = recommended_disk_type
        self._suitability = suitability
        self._suitability_explanation = suitability_explanation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssessedDisk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssessedDisk of this AssessedDisk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gigabytes_consumed(self):
        """Gets the gigabytes_consumed of this AssessedDisk.

        Gigabytes of storage consumed by this disk.

        :return: The gigabytes_consumed of this AssessedDisk.
        :rtype: float
        """
        return self._gigabytes_consumed

    @gigabytes_consumed.setter
    def gigabytes_consumed(self, gigabytes_consumed):
        """Sets the gigabytes_consumed of this AssessedDisk.

        Gigabytes of storage consumed by this disk.

        :param gigabytes_consumed: The gigabytes_consumed of this AssessedDisk.
        :type gigabytes_consumed: float
        """

        self._gigabytes_consumed = gigabytes_consumed

    @property
    def gigabytes_for_recommended_disk_size(self):
        """Gets the gigabytes_for_recommended_disk_size of this AssessedDisk.

        Gigabytes of storage provided by the recommended Azure disk size.

        :return: The gigabytes_for_recommended_disk_size of this AssessedDisk.
        :rtype: int
        """
        return self._gigabytes_for_recommended_disk_size

    @gigabytes_for_recommended_disk_size.setter
    def gigabytes_for_recommended_disk_size(self, gigabytes_for_recommended_disk_size):
        """Sets the gigabytes_for_recommended_disk_size of this AssessedDisk.

        Gigabytes of storage provided by the recommended Azure disk size.

        :param gigabytes_for_recommended_disk_size: The gigabytes_for_recommended_disk_size of this AssessedDisk.
        :type gigabytes_for_recommended_disk_size: int
        """

        self._gigabytes_for_recommended_disk_size = gigabytes_for_recommended_disk_size

    @property
    def gigabytes_provisioned(self):
        """Gets the gigabytes_provisioned of this AssessedDisk.

        Gigabytes of storage provisioned for this disk.

        :return: The gigabytes_provisioned of this AssessedDisk.
        :rtype: float
        """
        return self._gigabytes_provisioned

    @gigabytes_provisioned.setter
    def gigabytes_provisioned(self, gigabytes_provisioned):
        """Sets the gigabytes_provisioned of this AssessedDisk.

        Gigabytes of storage provisioned for this disk.

        :param gigabytes_provisioned: The gigabytes_provisioned of this AssessedDisk.
        :type gigabytes_provisioned: float
        """

        self._gigabytes_provisioned = gigabytes_provisioned

    @property
    def megabytes_per_second_of_read(self):
        """Gets the megabytes_per_second_of_read of this AssessedDisk.

        Disk throughput in MegaBytes per second.

        :return: The megabytes_per_second_of_read of this AssessedDisk.
        :rtype: float
        """
        return self._megabytes_per_second_of_read

    @megabytes_per_second_of_read.setter
    def megabytes_per_second_of_read(self, megabytes_per_second_of_read):
        """Sets the megabytes_per_second_of_read of this AssessedDisk.

        Disk throughput in MegaBytes per second.

        :param megabytes_per_second_of_read: The megabytes_per_second_of_read of this AssessedDisk.
        :type megabytes_per_second_of_read: float
        """

        self._megabytes_per_second_of_read = megabytes_per_second_of_read

    @property
    def megabytes_per_second_of_write(self):
        """Gets the megabytes_per_second_of_write of this AssessedDisk.

        Disk throughput in MegaBytes per second.

        :return: The megabytes_per_second_of_write of this AssessedDisk.
        :rtype: float
        """
        return self._megabytes_per_second_of_write

    @megabytes_per_second_of_write.setter
    def megabytes_per_second_of_write(self, megabytes_per_second_of_write):
        """Sets the megabytes_per_second_of_write of this AssessedDisk.

        Disk throughput in MegaBytes per second.

        :param megabytes_per_second_of_write: The megabytes_per_second_of_write of this AssessedDisk.
        :type megabytes_per_second_of_write: float
        """

        self._megabytes_per_second_of_write = megabytes_per_second_of_write

    @property
    def monthly_storage_cost(self):
        """Gets the monthly_storage_cost of this AssessedDisk.

        Estimated aggregate storage cost for a 31-day month for this disk.

        :return: The monthly_storage_cost of this AssessedDisk.
        :rtype: float
        """
        return self._monthly_storage_cost

    @monthly_storage_cost.setter
    def monthly_storage_cost(self, monthly_storage_cost):
        """Sets the monthly_storage_cost of this AssessedDisk.

        Estimated aggregate storage cost for a 31-day month for this disk.

        :param monthly_storage_cost: The monthly_storage_cost of this AssessedDisk.
        :type monthly_storage_cost: float
        """

        self._monthly_storage_cost = monthly_storage_cost

    @property
    def name(self):
        """Gets the name of this AssessedDisk.

        Name of the assessed disk.

        :return: The name of this AssessedDisk.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssessedDisk.

        Name of the assessed disk.

        :param name: The name of this AssessedDisk.
        :type name: str
        """

        self._name = name

    @property
    def number_of_read_operations_per_second(self):
        """Gets the number_of_read_operations_per_second of this AssessedDisk.

        Number of read operations per second for the disk.

        :return: The number_of_read_operations_per_second of this AssessedDisk.
        :rtype: float
        """
        return self._number_of_read_operations_per_second

    @number_of_read_operations_per_second.setter
    def number_of_read_operations_per_second(self, number_of_read_operations_per_second):
        """Sets the number_of_read_operations_per_second of this AssessedDisk.

        Number of read operations per second for the disk.

        :param number_of_read_operations_per_second: The number_of_read_operations_per_second of this AssessedDisk.
        :type number_of_read_operations_per_second: float
        """

        self._number_of_read_operations_per_second = number_of_read_operations_per_second

    @property
    def number_of_write_operations_per_second(self):
        """Gets the number_of_write_operations_per_second of this AssessedDisk.

        Number of read and write operations per second for the disk.

        :return: The number_of_write_operations_per_second of this AssessedDisk.
        :rtype: float
        """
        return self._number_of_write_operations_per_second

    @number_of_write_operations_per_second.setter
    def number_of_write_operations_per_second(self, number_of_write_operations_per_second):
        """Sets the number_of_write_operations_per_second of this AssessedDisk.

        Number of read and write operations per second for the disk.

        :param number_of_write_operations_per_second: The number_of_write_operations_per_second of this AssessedDisk.
        :type number_of_write_operations_per_second: float
        """

        self._number_of_write_operations_per_second = number_of_write_operations_per_second

    @property
    def recommended_disk_size(self):
        """Gets the recommended_disk_size of this AssessedDisk.

        Recommended Azure size for the disk, given utilization data and preferences set on Assessment.

        :return: The recommended_disk_size of this AssessedDisk.
        :rtype: str
        """
        return self._recommended_disk_size

    @recommended_disk_size.setter
    def recommended_disk_size(self, recommended_disk_size):
        """Sets the recommended_disk_size of this AssessedDisk.

        Recommended Azure size for the disk, given utilization data and preferences set on Assessment.

        :param recommended_disk_size: The recommended_disk_size of this AssessedDisk.
        :type recommended_disk_size: str
        """
        allowed_values = ["Unknown", "Standard_S4", "Standard_S6", "Standard_S10", "Standard_S20", "Standard_S30", "Standard_S40", "Standard_S50", "Premium_P4", "Premium_P6", "Premium_P10", "Premium_P20", "Premium_P30", "Premium_P40", "Premium_P50"]  # noqa: E501
        if recommended_disk_size not in allowed_values:
            raise ValueError(
                "Invalid value for `recommended_disk_size` ({0}), must be one of {1}"
                .format(recommended_disk_size, allowed_values)
            )

        self._recommended_disk_size = recommended_disk_size

    @property
    def recommended_disk_type(self):
        """Gets the recommended_disk_type of this AssessedDisk.

        Storage type selected for this disk.

        :return: The recommended_disk_type of this AssessedDisk.
        :rtype: str
        """
        return self._recommended_disk_type

    @recommended_disk_type.setter
    def recommended_disk_type(self, recommended_disk_type):
        """Sets the recommended_disk_type of this AssessedDisk.

        Storage type selected for this disk.

        :param recommended_disk_type: The recommended_disk_type of this AssessedDisk.
        :type recommended_disk_type: str
        """
        allowed_values = ["Unknown", "Standard", "Premium"]  # noqa: E501
        if recommended_disk_type not in allowed_values:
            raise ValueError(
                "Invalid value for `recommended_disk_type` ({0}), must be one of {1}"
                .format(recommended_disk_type, allowed_values)
            )

        self._recommended_disk_type = recommended_disk_type

    @property
    def suitability(self):
        """Gets the suitability of this AssessedDisk.

        Whether this disk is suitable for Azure.

        :return: The suitability of this AssessedDisk.
        :rtype: str
        """
        return self._suitability

    @suitability.setter
    def suitability(self, suitability):
        """Sets the suitability of this AssessedDisk.

        Whether this disk is suitable for Azure.

        :param suitability: The suitability of this AssessedDisk.
        :type suitability: str
        """
        allowed_values = ["Unknown", "NotSuitable", "Suitable", "ConditionallySuitable"]  # noqa: E501
        if suitability not in allowed_values:
            raise ValueError(
                "Invalid value for `suitability` ({0}), must be one of {1}"
                .format(suitability, allowed_values)
            )

        self._suitability = suitability

    @property
    def suitability_explanation(self):
        """Gets the suitability_explanation of this AssessedDisk.

        If disk is suitable, this explains the reasons and mitigation steps.

        :return: The suitability_explanation of this AssessedDisk.
        :rtype: str
        """
        return self._suitability_explanation

    @suitability_explanation.setter
    def suitability_explanation(self, suitability_explanation):
        """Sets the suitability_explanation of this AssessedDisk.

        If disk is suitable, this explains the reasons and mitigation steps.

        :param suitability_explanation: The suitability_explanation of this AssessedDisk.
        :type suitability_explanation: str
        """
        allowed_values = ["Unknown", "NotApplicable", "DiskSizeGreaterThanSupported", "NoSuitableDiskSizeForIops", "NoSuitableDiskSizeForThroughput", "NoDiskSizeFoundInSelectedLocation", "NoDiskSizeFoundForSelectedRedundancy", "InternalErrorOccurredForDiskEvaluation"]  # noqa: E501
        if suitability_explanation not in allowed_values:
            raise ValueError(
                "Invalid value for `suitability_explanation` ({0}), must be one of {1}"
                .format(suitability_explanation, allowed_values)
            )

        self._suitability_explanation = suitability_explanation
