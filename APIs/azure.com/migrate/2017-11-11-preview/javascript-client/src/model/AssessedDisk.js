/**
 * Azure Migrate
 * Move your workloads to Azure.
 *
 * The version of the OpenAPI document: 2017-11-11-preview
 * Contact: azuremigrate@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AssessedDisk model module.
 * @module model/AssessedDisk
 * @version 2017-11-11-preview
 */
class AssessedDisk {
    /**
     * Constructs a new <code>AssessedDisk</code>.
     * A disk assessed for an assessment.
     * @alias module:model/AssessedDisk
     */
    constructor() { 
        
        AssessedDisk.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AssessedDisk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssessedDisk} obj Optional instance to populate.
     * @return {module:model/AssessedDisk} The populated <code>AssessedDisk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssessedDisk();

            if (data.hasOwnProperty('gigabytesConsumed')) {
                obj['gigabytesConsumed'] = ApiClient.convertToType(data['gigabytesConsumed'], 'Number');
            }
            if (data.hasOwnProperty('gigabytesForRecommendedDiskSize')) {
                obj['gigabytesForRecommendedDiskSize'] = ApiClient.convertToType(data['gigabytesForRecommendedDiskSize'], 'Number');
            }
            if (data.hasOwnProperty('gigabytesProvisioned')) {
                obj['gigabytesProvisioned'] = ApiClient.convertToType(data['gigabytesProvisioned'], 'Number');
            }
            if (data.hasOwnProperty('megabytesPerSecondOfRead')) {
                obj['megabytesPerSecondOfRead'] = ApiClient.convertToType(data['megabytesPerSecondOfRead'], 'Number');
            }
            if (data.hasOwnProperty('megabytesPerSecondOfWrite')) {
                obj['megabytesPerSecondOfWrite'] = ApiClient.convertToType(data['megabytesPerSecondOfWrite'], 'Number');
            }
            if (data.hasOwnProperty('monthlyStorageCost')) {
                obj['monthlyStorageCost'] = ApiClient.convertToType(data['monthlyStorageCost'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('numberOfReadOperationsPerSecond')) {
                obj['numberOfReadOperationsPerSecond'] = ApiClient.convertToType(data['numberOfReadOperationsPerSecond'], 'Number');
            }
            if (data.hasOwnProperty('numberOfWriteOperationsPerSecond')) {
                obj['numberOfWriteOperationsPerSecond'] = ApiClient.convertToType(data['numberOfWriteOperationsPerSecond'], 'Number');
            }
            if (data.hasOwnProperty('recommendedDiskSize')) {
                obj['recommendedDiskSize'] = ApiClient.convertToType(data['recommendedDiskSize'], 'String');
            }
            if (data.hasOwnProperty('recommendedDiskType')) {
                obj['recommendedDiskType'] = ApiClient.convertToType(data['recommendedDiskType'], 'String');
            }
            if (data.hasOwnProperty('suitability')) {
                obj['suitability'] = ApiClient.convertToType(data['suitability'], 'String');
            }
            if (data.hasOwnProperty('suitabilityExplanation')) {
                obj['suitabilityExplanation'] = ApiClient.convertToType(data['suitabilityExplanation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssessedDisk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssessedDisk</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['recommendedDiskSize'] && !(typeof data['recommendedDiskSize'] === 'string' || data['recommendedDiskSize'] instanceof String)) {
            throw new Error("Expected the field `recommendedDiskSize` to be a primitive type in the JSON string but got " + data['recommendedDiskSize']);
        }
        // ensure the json data is a string
        if (data['recommendedDiskType'] && !(typeof data['recommendedDiskType'] === 'string' || data['recommendedDiskType'] instanceof String)) {
            throw new Error("Expected the field `recommendedDiskType` to be a primitive type in the JSON string but got " + data['recommendedDiskType']);
        }
        // ensure the json data is a string
        if (data['suitability'] && !(typeof data['suitability'] === 'string' || data['suitability'] instanceof String)) {
            throw new Error("Expected the field `suitability` to be a primitive type in the JSON string but got " + data['suitability']);
        }
        // ensure the json data is a string
        if (data['suitabilityExplanation'] && !(typeof data['suitabilityExplanation'] === 'string' || data['suitabilityExplanation'] instanceof String)) {
            throw new Error("Expected the field `suitabilityExplanation` to be a primitive type in the JSON string but got " + data['suitabilityExplanation']);
        }

        return true;
    }


}



/**
 * Gigabytes of storage consumed by this disk.
 * @member {Number} gigabytesConsumed
 */
AssessedDisk.prototype['gigabytesConsumed'] = undefined;

/**
 * Gigabytes of storage provided by the recommended Azure disk size.
 * @member {Number} gigabytesForRecommendedDiskSize
 */
AssessedDisk.prototype['gigabytesForRecommendedDiskSize'] = undefined;

/**
 * Gigabytes of storage provisioned for this disk.
 * @member {Number} gigabytesProvisioned
 */
AssessedDisk.prototype['gigabytesProvisioned'] = undefined;

/**
 * Disk throughput in MegaBytes per second.
 * @member {Number} megabytesPerSecondOfRead
 */
AssessedDisk.prototype['megabytesPerSecondOfRead'] = undefined;

/**
 * Disk throughput in MegaBytes per second.
 * @member {Number} megabytesPerSecondOfWrite
 */
AssessedDisk.prototype['megabytesPerSecondOfWrite'] = undefined;

/**
 * Estimated aggregate storage cost for a 31-day month for this disk.
 * @member {Number} monthlyStorageCost
 */
AssessedDisk.prototype['monthlyStorageCost'] = undefined;

/**
 * Name of the assessed disk.
 * @member {String} name
 */
AssessedDisk.prototype['name'] = undefined;

/**
 * Number of read operations per second for the disk.
 * @member {Number} numberOfReadOperationsPerSecond
 */
AssessedDisk.prototype['numberOfReadOperationsPerSecond'] = undefined;

/**
 * Number of read and write operations per second for the disk.
 * @member {Number} numberOfWriteOperationsPerSecond
 */
AssessedDisk.prototype['numberOfWriteOperationsPerSecond'] = undefined;

/**
 * Recommended Azure size for the disk, given utilization data and preferences set on Assessment.
 * @member {module:model/AssessedDisk.RecommendedDiskSizeEnum} recommendedDiskSize
 */
AssessedDisk.prototype['recommendedDiskSize'] = undefined;

/**
 * Storage type selected for this disk.
 * @member {module:model/AssessedDisk.RecommendedDiskTypeEnum} recommendedDiskType
 */
AssessedDisk.prototype['recommendedDiskType'] = undefined;

/**
 * Whether this disk is suitable for Azure.
 * @member {module:model/AssessedDisk.SuitabilityEnum} suitability
 */
AssessedDisk.prototype['suitability'] = undefined;

/**
 * If disk is suitable, this explains the reasons and mitigation steps.
 * @member {module:model/AssessedDisk.SuitabilityExplanationEnum} suitabilityExplanation
 */
AssessedDisk.prototype['suitabilityExplanation'] = undefined;





/**
 * Allowed values for the <code>recommendedDiskSize</code> property.
 * @enum {String}
 * @readonly
 */
AssessedDisk['RecommendedDiskSizeEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "Standard_S4"
     * @const
     */
    "Standard_S4": "Standard_S4",

    /**
     * value: "Standard_S6"
     * @const
     */
    "Standard_S6": "Standard_S6",

    /**
     * value: "Standard_S10"
     * @const
     */
    "Standard_S10": "Standard_S10",

    /**
     * value: "Standard_S20"
     * @const
     */
    "Standard_S20": "Standard_S20",

    /**
     * value: "Standard_S30"
     * @const
     */
    "Standard_S30": "Standard_S30",

    /**
     * value: "Standard_S40"
     * @const
     */
    "Standard_S40": "Standard_S40",

    /**
     * value: "Standard_S50"
     * @const
     */
    "Standard_S50": "Standard_S50",

    /**
     * value: "Premium_P4"
     * @const
     */
    "Premium_P4": "Premium_P4",

    /**
     * value: "Premium_P6"
     * @const
     */
    "Premium_P6": "Premium_P6",

    /**
     * value: "Premium_P10"
     * @const
     */
    "Premium_P10": "Premium_P10",

    /**
     * value: "Premium_P20"
     * @const
     */
    "Premium_P20": "Premium_P20",

    /**
     * value: "Premium_P30"
     * @const
     */
    "Premium_P30": "Premium_P30",

    /**
     * value: "Premium_P40"
     * @const
     */
    "Premium_P40": "Premium_P40",

    /**
     * value: "Premium_P50"
     * @const
     */
    "Premium_P50": "Premium_P50"
};


/**
 * Allowed values for the <code>recommendedDiskType</code> property.
 * @enum {String}
 * @readonly
 */
AssessedDisk['RecommendedDiskTypeEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "Standard"
     * @const
     */
    "Standard": "Standard",

    /**
     * value: "Premium"
     * @const
     */
    "Premium": "Premium"
};


/**
 * Allowed values for the <code>suitability</code> property.
 * @enum {String}
 * @readonly
 */
AssessedDisk['SuitabilityEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "NotSuitable"
     * @const
     */
    "NotSuitable": "NotSuitable",

    /**
     * value: "Suitable"
     * @const
     */
    "Suitable": "Suitable",

    /**
     * value: "ConditionallySuitable"
     * @const
     */
    "ConditionallySuitable": "ConditionallySuitable"
};


/**
 * Allowed values for the <code>suitabilityExplanation</code> property.
 * @enum {String}
 * @readonly
 */
AssessedDisk['SuitabilityExplanationEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "NotApplicable"
     * @const
     */
    "NotApplicable": "NotApplicable",

    /**
     * value: "DiskSizeGreaterThanSupported"
     * @const
     */
    "DiskSizeGreaterThanSupported": "DiskSizeGreaterThanSupported",

    /**
     * value: "NoSuitableDiskSizeForIops"
     * @const
     */
    "NoSuitableDiskSizeForIops": "NoSuitableDiskSizeForIops",

    /**
     * value: "NoSuitableDiskSizeForThroughput"
     * @const
     */
    "NoSuitableDiskSizeForThroughput": "NoSuitableDiskSizeForThroughput",

    /**
     * value: "NoDiskSizeFoundInSelectedLocation"
     * @const
     */
    "NoDiskSizeFoundInSelectedLocation": "NoDiskSizeFoundInSelectedLocation",

    /**
     * value: "NoDiskSizeFoundForSelectedRedundancy"
     * @const
     */
    "NoDiskSizeFoundForSelectedRedundancy": "NoDiskSizeFoundForSelectedRedundancy",

    /**
     * value: "InternalErrorOccurredForDiskEvaluation"
     * @const
     */
    "InternalErrorOccurredForDiskEvaluation": "InternalErrorOccurredForDiskEvaluation"
};



export default AssessedDisk;

