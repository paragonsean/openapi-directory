/**
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Farm from '../model/Farm';
import FarmCreationProperties from '../model/FarmCreationProperties';
import FarmList from '../model/FarmList';
import FarmsListMetricDefinitions200Response from '../model/FarmsListMetricDefinitions200Response';
import FarmsListMetrics200Response from '../model/FarmsListMetrics200Response';

/**
* Farms service.
* @module api/FarmsApi
* @version 2015-12-01-preview
*/
export default class FarmsApi {

    /**
    * Constructs a new FarmsApi. 
    * @alias module:api/FarmsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the farmsCreate operation.
     * @callback module:api/FarmsApi~farmsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Farm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new storage farm.
     * @param {String} subscriptionId Subscription Id.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} farmId Farm Id.
     * @param {String} apiVersion REST Api Version.
     * @param {module:model/FarmCreationProperties} farmObject Parameters used to create a farm
     * @param {module:api/FarmsApi~farmsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Farm}
     */
    farmsCreate(subscriptionId, resourceGroupName, farmId, apiVersion, farmObject, callback) {
      let postBody = farmObject;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling farmsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling farmsCreate");
      }
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling farmsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling farmsCreate");
      }
      // verify the required parameter 'farmObject' is set
      if (farmObject === undefined || farmObject === null) {
        throw new Error("Missing the required parameter 'farmObject' when calling farmsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'farmId': farmId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Farm;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the farmsGet operation.
     * @callback module:api/FarmsApi~farmsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Farm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the Storage properties and settings for a specified storage farm.
     * @param {String} subscriptionId Subscription Id.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} farmId Farm Id.
     * @param {String} apiVersion REST Api Version.
     * @param {module:api/FarmsApi~farmsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Farm}
     */
    farmsGet(subscriptionId, resourceGroupName, farmId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling farmsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling farmsGet");
      }
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling farmsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling farmsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'farmId': farmId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Farm;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the farmsList operation.
     * @callback module:api/FarmsApi~farmsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FarmList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all storage farms.
     * @param {String} subscriptionId Subscription Id.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} apiVersion REST Api Version.
     * @param {module:api/FarmsApi~farmsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FarmList}
     */
    farmsList(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling farmsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling farmsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling farmsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FarmList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the farmsListMetricDefinitions operation.
     * @callback module:api/FarmsApi~farmsListMetricDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FarmsListMetricDefinitions200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of metric definitions for a storage farm.
     * @param {String} subscriptionId Subscription Id.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} farmId Farm Id.
     * @param {String} apiVersion REST Api Version.
     * @param {module:api/FarmsApi~farmsListMetricDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FarmsListMetricDefinitions200Response}
     */
    farmsListMetricDefinitions(subscriptionId, resourceGroupName, farmId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling farmsListMetricDefinitions");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling farmsListMetricDefinitions");
      }
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling farmsListMetricDefinitions");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling farmsListMetricDefinitions");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'farmId': farmId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FarmsListMetricDefinitions200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/metricdefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the farmsListMetrics operation.
     * @callback module:api/FarmsApi~farmsListMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FarmsListMetrics200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of storage farm metrics.
     * @param {String} subscriptionId Subscription Id.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} farmId Farm Id.
     * @param {String} apiVersion REST Api Version.
     * @param {module:api/FarmsApi~farmsListMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FarmsListMetrics200Response}
     */
    farmsListMetrics(subscriptionId, resourceGroupName, farmId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling farmsListMetrics");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling farmsListMetrics");
      }
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling farmsListMetrics");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling farmsListMetrics");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'farmId': farmId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FarmsListMetrics200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the farmsStartGarbageCollection operation.
     * @callback module:api/FarmsApi~farmsStartGarbageCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start garbage collection on deleted storage objects.
     * @param {String} subscriptionId Subscription Id.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} farmId Farm Id.
     * @param {String} apiVersion REST Api Version.
     * @param {module:api/FarmsApi~farmsStartGarbageCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    farmsStartGarbageCollection(subscriptionId, resourceGroupName, farmId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling farmsStartGarbageCollection");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling farmsStartGarbageCollection");
      }
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling farmsStartGarbageCollection");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling farmsStartGarbageCollection");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'farmId': farmId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/ondemandgc', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the farmsUpdate operation.
     * @callback module:api/FarmsApi~farmsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Farm} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing storage farm.
     * @param {String} subscriptionId Subscription Id.
     * @param {String} apiVersion REST Api Version.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} farmId Farm Id.
     * @param {module:model/Farm} farmObject Farm to update.
     * @param {module:api/FarmsApi~farmsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Farm}
     */
    farmsUpdate(subscriptionId, apiVersion, resourceGroupName, farmId, farmObject, callback) {
      let postBody = farmObject;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling farmsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling farmsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling farmsUpdate");
      }
      // verify the required parameter 'farmId' is set
      if (farmId === undefined || farmId === null) {
        throw new Error("Missing the required parameter 'farmId' when calling farmsUpdate");
      }
      // verify the required parameter 'farmObject' is set
      if (farmObject === undefined || farmObject === null) {
        throw new Error("Missing the required parameter 'farmObject' when calling farmsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'farmId': farmId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Farm;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
