/**
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StorageManagementClient);
  }
}(this, function(expect, StorageManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StorageManagementClient.FarmSettings();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FarmSettings', function() {
    it('should create an instance of FarmSettings', function() {
      // uncomment below and update the code to test FarmSettings
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be.a(StorageManagementClient.FarmSettings);
    });

    it('should have the property bandwidthThrottleIsEnabled (base name: "bandwidthThrottleIsEnabled")', function() {
      // uncomment below and update the code to test the property bandwidthThrottleIsEnabled
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property corsAllowedOriginsList (base name: "corsAllowedOriginsList")', function() {
      // uncomment below and update the code to test the property corsAllowedOriginsList
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property dataCenterUriHostSuffixes (base name: "dataCenterUriHostSuffixes")', function() {
      // uncomment below and update the code to test the property dataCenterUriHostSuffixes
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property defaultEgressThresholdInGbps (base name: "defaultEgressThresholdInGbps")', function() {
      // uncomment below and update the code to test the property defaultEgressThresholdInGbps
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property defaultIngressThresholdInGbps (base name: "defaultIngressThresholdInGbps")', function() {
      // uncomment below and update the code to test the property defaultIngressThresholdInGbps
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property defaultIntranetEgressThresholdInGbps (base name: "defaultIntranetEgressThresholdInGbps")', function() {
      // uncomment below and update the code to test the property defaultIntranetEgressThresholdInGbps
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property defaultIntranetIngressThresholdInGbps (base name: "defaultIntranetIngressThresholdInGbps")', function() {
      // uncomment below and update the code to test the property defaultIntranetIngressThresholdInGbps
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property defaultRequestThresholdInTps (base name: "defaultRequestThresholdInTps")', function() {
      // uncomment below and update the code to test the property defaultRequestThresholdInTps
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property defaultThrottleProbabilityDecayIntervalInSeconds (base name: "defaultThrottleProbabilityDecayIntervalInSeconds")', function() {
      // uncomment below and update the code to test the property defaultThrottleProbabilityDecayIntervalInSeconds
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property defaultTotalEgressThresholdInGbps (base name: "defaultTotalEgressThresholdInGbps")', function() {
      // uncomment below and update the code to test the property defaultTotalEgressThresholdInGbps
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property defaultTotalIngressThresholdInGbps (base name: "defaultTotalIngressThresholdInGbps")', function() {
      // uncomment below and update the code to test the property defaultTotalIngressThresholdInGbps
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property feedbackRefreshIntervalInSeconds (base name: "feedbackRefreshIntervalInSeconds")', function() {
      // uncomment below and update the code to test the property feedbackRefreshIntervalInSeconds
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property gracePeriodForFullThrottlingInRefreshIntervals (base name: "gracePeriodForFullThrottlingInRefreshIntervals")', function() {
      // uncomment below and update the code to test the property gracePeriodForFullThrottlingInRefreshIntervals
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property gracePeriodMaxThrottleProbability (base name: "gracePeriodMaxThrottleProbability")', function() {
      // uncomment below and update the code to test the property gracePeriodMaxThrottleProbability
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property hostStyleHttpPort (base name: "hostStyleHttpPort")', function() {
      // uncomment below and update the code to test the property hostStyleHttpPort
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property hostStyleHttpsPort (base name: "hostStyleHttpsPort")', function() {
      // uncomment below and update the code to test the property hostStyleHttpsPort
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property minimumEgressThresholdInGbps (base name: "minimumEgressThresholdInGbps")', function() {
      // uncomment below and update the code to test the property minimumEgressThresholdInGbps
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property minimumIngressThresholdInGbps (base name: "minimumIngressThresholdInGbps")', function() {
      // uncomment below and update the code to test the property minimumIngressThresholdInGbps
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property minimumIntranetEgressThresholdInGbps (base name: "minimumIntranetEgressThresholdInGbps")', function() {
      // uncomment below and update the code to test the property minimumIntranetEgressThresholdInGbps
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property minimumIntranetIngressThresholdInGbps (base name: "minimumIntranetIngressThresholdInGbps")', function() {
      // uncomment below and update the code to test the property minimumIntranetIngressThresholdInGbps
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property minimumRequestThresholdInTps (base name: "minimumRequestThresholdInTps")', function() {
      // uncomment below and update the code to test the property minimumRequestThresholdInTps
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property minimumTotalEgressThresholdInGbps (base name: "minimumTotalEgressThresholdInGbps")', function() {
      // uncomment below and update the code to test the property minimumTotalEgressThresholdInGbps
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property minimumTotalIngressThresholdInGbps (base name: "minimumTotalIngressThresholdInGbps")', function() {
      // uncomment below and update the code to test the property minimumTotalIngressThresholdInGbps
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property numberOfAccountsToSync (base name: "numberOfAccountsToSync")', function() {
      // uncomment below and update the code to test the property numberOfAccountsToSync
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property overallEgressThresholdInGbps (base name: "overallEgressThresholdInGbps")', function() {
      // uncomment below and update the code to test the property overallEgressThresholdInGbps
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property overallIngressThresholdInGbps (base name: "overallIngressThresholdInGbps")', function() {
      // uncomment below and update the code to test the property overallIngressThresholdInGbps
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property overallIntranetEgressThresholdInGbps (base name: "overallIntranetEgressThresholdInGbps")', function() {
      // uncomment below and update the code to test the property overallIntranetEgressThresholdInGbps
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property overallIntranetIngressThresholdInGbps (base name: "overallIntranetIngressThresholdInGbps")', function() {
      // uncomment below and update the code to test the property overallIntranetIngressThresholdInGbps
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property overallRequestThresholdInTps (base name: "overallRequestThresholdInTps")', function() {
      // uncomment below and update the code to test the property overallRequestThresholdInTps
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property overallTotalEgressThresholdInGbps (base name: "overallTotalEgressThresholdInGbps")', function() {
      // uncomment below and update the code to test the property overallTotalEgressThresholdInGbps
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property overallTotalIngressThresholdInGbps (base name: "overallTotalIngressThresholdInGbps")', function() {
      // uncomment below and update the code to test the property overallTotalIngressThresholdInGbps
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property retentionPeriodForDeletedStorageAccountsInDays (base name: "retentionPeriodForDeletedStorageAccountsInDays")', function() {
      // uncomment below and update the code to test the property retentionPeriodForDeletedStorageAccountsInDays
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property settingsPollingIntervalInSecond (base name: "settingsPollingIntervalInSecond")', function() {
      // uncomment below and update the code to test the property settingsPollingIntervalInSecond
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property toleranceFactorForEgress (base name: "toleranceFactorForEgress")', function() {
      // uncomment below and update the code to test the property toleranceFactorForEgress
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property toleranceFactorForIngress (base name: "toleranceFactorForIngress")', function() {
      // uncomment below and update the code to test the property toleranceFactorForIngress
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property toleranceFactorForIntranetEgress (base name: "toleranceFactorForIntranetEgress")', function() {
      // uncomment below and update the code to test the property toleranceFactorForIntranetEgress
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property toleranceFactorForIntranetIngress (base name: "toleranceFactorForIntranetIngress")', function() {
      // uncomment below and update the code to test the property toleranceFactorForIntranetIngress
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property toleranceFactorForTotalEgress (base name: "toleranceFactorForTotalEgress")', function() {
      // uncomment below and update the code to test the property toleranceFactorForTotalEgress
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property toleranceFactorForTotalIngress (base name: "toleranceFactorForTotalIngress")', function() {
      // uncomment below and update the code to test the property toleranceFactorForTotalIngress
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property toleranceFactorForTps (base name: "toleranceFactorForTps")', function() {
      // uncomment below and update the code to test the property toleranceFactorForTps
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

    it('should have the property usageCollectionIntervalInSeconds (base name: "usageCollectionIntervalInSeconds")', function() {
      // uncomment below and update the code to test the property usageCollectionIntervalInSeconds
      //var instance = new StorageManagementClient.FarmSettings();
      //expect(instance).to.be();
    });

  });

}));
