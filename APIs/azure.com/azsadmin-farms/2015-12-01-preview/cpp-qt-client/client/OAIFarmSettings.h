/**
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFarmSettings.h
 *
 * Storage farm settings.
 */

#ifndef OAIFarmSettings_H
#define OAIFarmSettings_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFarmSettings : public OAIObject {
public:
    OAIFarmSettings();
    OAIFarmSettings(QString json);
    ~OAIFarmSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isBandwidthThrottleIsEnabled() const;
    void setBandwidthThrottleIsEnabled(const bool &bandwidth_throttle_is_enabled);
    bool is_bandwidth_throttle_is_enabled_Set() const;
    bool is_bandwidth_throttle_is_enabled_Valid() const;

    QString getCorsAllowedOriginsList() const;
    void setCorsAllowedOriginsList(const QString &cors_allowed_origins_list);
    bool is_cors_allowed_origins_list_Set() const;
    bool is_cors_allowed_origins_list_Valid() const;

    QString getDataCenterUriHostSuffixes() const;
    void setDataCenterUriHostSuffixes(const QString &data_center_uri_host_suffixes);
    bool is_data_center_uri_host_suffixes_Set() const;
    bool is_data_center_uri_host_suffixes_Valid() const;

    float getDefaultEgressThresholdInGbps() const;
    void setDefaultEgressThresholdInGbps(const float &default_egress_threshold_in_gbps);
    bool is_default_egress_threshold_in_gbps_Set() const;
    bool is_default_egress_threshold_in_gbps_Valid() const;

    float getDefaultIngressThresholdInGbps() const;
    void setDefaultIngressThresholdInGbps(const float &default_ingress_threshold_in_gbps);
    bool is_default_ingress_threshold_in_gbps_Set() const;
    bool is_default_ingress_threshold_in_gbps_Valid() const;

    float getDefaultIntranetEgressThresholdInGbps() const;
    void setDefaultIntranetEgressThresholdInGbps(const float &default_intranet_egress_threshold_in_gbps);
    bool is_default_intranet_egress_threshold_in_gbps_Set() const;
    bool is_default_intranet_egress_threshold_in_gbps_Valid() const;

    float getDefaultIntranetIngressThresholdInGbps() const;
    void setDefaultIntranetIngressThresholdInGbps(const float &default_intranet_ingress_threshold_in_gbps);
    bool is_default_intranet_ingress_threshold_in_gbps_Set() const;
    bool is_default_intranet_ingress_threshold_in_gbps_Valid() const;

    float getDefaultRequestThresholdInTps() const;
    void setDefaultRequestThresholdInTps(const float &default_request_threshold_in_tps);
    bool is_default_request_threshold_in_tps_Set() const;
    bool is_default_request_threshold_in_tps_Valid() const;

    qint32 getDefaultThrottleProbabilityDecayIntervalInSeconds() const;
    void setDefaultThrottleProbabilityDecayIntervalInSeconds(const qint32 &default_throttle_probability_decay_interval_in_seconds);
    bool is_default_throttle_probability_decay_interval_in_seconds_Set() const;
    bool is_default_throttle_probability_decay_interval_in_seconds_Valid() const;

    float getDefaultTotalEgressThresholdInGbps() const;
    void setDefaultTotalEgressThresholdInGbps(const float &default_total_egress_threshold_in_gbps);
    bool is_default_total_egress_threshold_in_gbps_Set() const;
    bool is_default_total_egress_threshold_in_gbps_Valid() const;

    float getDefaultTotalIngressThresholdInGbps() const;
    void setDefaultTotalIngressThresholdInGbps(const float &default_total_ingress_threshold_in_gbps);
    bool is_default_total_ingress_threshold_in_gbps_Set() const;
    bool is_default_total_ingress_threshold_in_gbps_Valid() const;

    qint32 getFeedbackRefreshIntervalInSeconds() const;
    void setFeedbackRefreshIntervalInSeconds(const qint32 &feedback_refresh_interval_in_seconds);
    bool is_feedback_refresh_interval_in_seconds_Set() const;
    bool is_feedback_refresh_interval_in_seconds_Valid() const;

    qint32 getGracePeriodForFullThrottlingInRefreshIntervals() const;
    void setGracePeriodForFullThrottlingInRefreshIntervals(const qint32 &grace_period_for_full_throttling_in_refresh_intervals);
    bool is_grace_period_for_full_throttling_in_refresh_intervals_Set() const;
    bool is_grace_period_for_full_throttling_in_refresh_intervals_Valid() const;

    float getGracePeriodMaxThrottleProbability() const;
    void setGracePeriodMaxThrottleProbability(const float &grace_period_max_throttle_probability);
    bool is_grace_period_max_throttle_probability_Set() const;
    bool is_grace_period_max_throttle_probability_Valid() const;

    qint32 getHostStyleHttpPort() const;
    void setHostStyleHttpPort(const qint32 &host_style_http_port);
    bool is_host_style_http_port_Set() const;
    bool is_host_style_http_port_Valid() const;

    qint32 getHostStyleHttpsPort() const;
    void setHostStyleHttpsPort(const qint32 &host_style_https_port);
    bool is_host_style_https_port_Set() const;
    bool is_host_style_https_port_Valid() const;

    float getMinimumEgressThresholdInGbps() const;
    void setMinimumEgressThresholdInGbps(const float &minimum_egress_threshold_in_gbps);
    bool is_minimum_egress_threshold_in_gbps_Set() const;
    bool is_minimum_egress_threshold_in_gbps_Valid() const;

    float getMinimumIngressThresholdInGbps() const;
    void setMinimumIngressThresholdInGbps(const float &minimum_ingress_threshold_in_gbps);
    bool is_minimum_ingress_threshold_in_gbps_Set() const;
    bool is_minimum_ingress_threshold_in_gbps_Valid() const;

    float getMinimumIntranetEgressThresholdInGbps() const;
    void setMinimumIntranetEgressThresholdInGbps(const float &minimum_intranet_egress_threshold_in_gbps);
    bool is_minimum_intranet_egress_threshold_in_gbps_Set() const;
    bool is_minimum_intranet_egress_threshold_in_gbps_Valid() const;

    float getMinimumIntranetIngressThresholdInGbps() const;
    void setMinimumIntranetIngressThresholdInGbps(const float &minimum_intranet_ingress_threshold_in_gbps);
    bool is_minimum_intranet_ingress_threshold_in_gbps_Set() const;
    bool is_minimum_intranet_ingress_threshold_in_gbps_Valid() const;

    float getMinimumRequestThresholdInTps() const;
    void setMinimumRequestThresholdInTps(const float &minimum_request_threshold_in_tps);
    bool is_minimum_request_threshold_in_tps_Set() const;
    bool is_minimum_request_threshold_in_tps_Valid() const;

    float getMinimumTotalEgressThresholdInGbps() const;
    void setMinimumTotalEgressThresholdInGbps(const float &minimum_total_egress_threshold_in_gbps);
    bool is_minimum_total_egress_threshold_in_gbps_Set() const;
    bool is_minimum_total_egress_threshold_in_gbps_Valid() const;

    float getMinimumTotalIngressThresholdInGbps() const;
    void setMinimumTotalIngressThresholdInGbps(const float &minimum_total_ingress_threshold_in_gbps);
    bool is_minimum_total_ingress_threshold_in_gbps_Set() const;
    bool is_minimum_total_ingress_threshold_in_gbps_Valid() const;

    qint32 getNumberOfAccountsToSync() const;
    void setNumberOfAccountsToSync(const qint32 &number_of_accounts_to_sync);
    bool is_number_of_accounts_to_sync_Set() const;
    bool is_number_of_accounts_to_sync_Valid() const;

    float getOverallEgressThresholdInGbps() const;
    void setOverallEgressThresholdInGbps(const float &overall_egress_threshold_in_gbps);
    bool is_overall_egress_threshold_in_gbps_Set() const;
    bool is_overall_egress_threshold_in_gbps_Valid() const;

    float getOverallIngressThresholdInGbps() const;
    void setOverallIngressThresholdInGbps(const float &overall_ingress_threshold_in_gbps);
    bool is_overall_ingress_threshold_in_gbps_Set() const;
    bool is_overall_ingress_threshold_in_gbps_Valid() const;

    float getOverallIntranetEgressThresholdInGbps() const;
    void setOverallIntranetEgressThresholdInGbps(const float &overall_intranet_egress_threshold_in_gbps);
    bool is_overall_intranet_egress_threshold_in_gbps_Set() const;
    bool is_overall_intranet_egress_threshold_in_gbps_Valid() const;

    float getOverallIntranetIngressThresholdInGbps() const;
    void setOverallIntranetIngressThresholdInGbps(const float &overall_intranet_ingress_threshold_in_gbps);
    bool is_overall_intranet_ingress_threshold_in_gbps_Set() const;
    bool is_overall_intranet_ingress_threshold_in_gbps_Valid() const;

    float getOverallRequestThresholdInTps() const;
    void setOverallRequestThresholdInTps(const float &overall_request_threshold_in_tps);
    bool is_overall_request_threshold_in_tps_Set() const;
    bool is_overall_request_threshold_in_tps_Valid() const;

    float getOverallTotalEgressThresholdInGbps() const;
    void setOverallTotalEgressThresholdInGbps(const float &overall_total_egress_threshold_in_gbps);
    bool is_overall_total_egress_threshold_in_gbps_Set() const;
    bool is_overall_total_egress_threshold_in_gbps_Valid() const;

    float getOverallTotalIngressThresholdInGbps() const;
    void setOverallTotalIngressThresholdInGbps(const float &overall_total_ingress_threshold_in_gbps);
    bool is_overall_total_ingress_threshold_in_gbps_Set() const;
    bool is_overall_total_ingress_threshold_in_gbps_Valid() const;

    qint32 getRetentionPeriodForDeletedStorageAccountsInDays() const;
    void setRetentionPeriodForDeletedStorageAccountsInDays(const qint32 &retention_period_for_deleted_storage_accounts_in_days);
    bool is_retention_period_for_deleted_storage_accounts_in_days_Set() const;
    bool is_retention_period_for_deleted_storage_accounts_in_days_Valid() const;

    qint32 getSettingsPollingIntervalInSecond() const;
    void setSettingsPollingIntervalInSecond(const qint32 &settings_polling_interval_in_second);
    bool is_settings_polling_interval_in_second_Set() const;
    bool is_settings_polling_interval_in_second_Valid() const;

    float getToleranceFactorForEgress() const;
    void setToleranceFactorForEgress(const float &tolerance_factor_for_egress);
    bool is_tolerance_factor_for_egress_Set() const;
    bool is_tolerance_factor_for_egress_Valid() const;

    float getToleranceFactorForIngress() const;
    void setToleranceFactorForIngress(const float &tolerance_factor_for_ingress);
    bool is_tolerance_factor_for_ingress_Set() const;
    bool is_tolerance_factor_for_ingress_Valid() const;

    float getToleranceFactorForIntranetEgress() const;
    void setToleranceFactorForIntranetEgress(const float &tolerance_factor_for_intranet_egress);
    bool is_tolerance_factor_for_intranet_egress_Set() const;
    bool is_tolerance_factor_for_intranet_egress_Valid() const;

    float getToleranceFactorForIntranetIngress() const;
    void setToleranceFactorForIntranetIngress(const float &tolerance_factor_for_intranet_ingress);
    bool is_tolerance_factor_for_intranet_ingress_Set() const;
    bool is_tolerance_factor_for_intranet_ingress_Valid() const;

    float getToleranceFactorForTotalEgress() const;
    void setToleranceFactorForTotalEgress(const float &tolerance_factor_for_total_egress);
    bool is_tolerance_factor_for_total_egress_Set() const;
    bool is_tolerance_factor_for_total_egress_Valid() const;

    float getToleranceFactorForTotalIngress() const;
    void setToleranceFactorForTotalIngress(const float &tolerance_factor_for_total_ingress);
    bool is_tolerance_factor_for_total_ingress_Set() const;
    bool is_tolerance_factor_for_total_ingress_Valid() const;

    float getToleranceFactorForTps() const;
    void setToleranceFactorForTps(const float &tolerance_factor_for_tps);
    bool is_tolerance_factor_for_tps_Set() const;
    bool is_tolerance_factor_for_tps_Valid() const;

    qint32 getUsageCollectionIntervalInSeconds() const;
    void setUsageCollectionIntervalInSeconds(const qint32 &usage_collection_interval_in_seconds);
    bool is_usage_collection_interval_in_seconds_Set() const;
    bool is_usage_collection_interval_in_seconds_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_bandwidth_throttle_is_enabled;
    bool m_bandwidth_throttle_is_enabled_isSet;
    bool m_bandwidth_throttle_is_enabled_isValid;

    QString m_cors_allowed_origins_list;
    bool m_cors_allowed_origins_list_isSet;
    bool m_cors_allowed_origins_list_isValid;

    QString m_data_center_uri_host_suffixes;
    bool m_data_center_uri_host_suffixes_isSet;
    bool m_data_center_uri_host_suffixes_isValid;

    float m_default_egress_threshold_in_gbps;
    bool m_default_egress_threshold_in_gbps_isSet;
    bool m_default_egress_threshold_in_gbps_isValid;

    float m_default_ingress_threshold_in_gbps;
    bool m_default_ingress_threshold_in_gbps_isSet;
    bool m_default_ingress_threshold_in_gbps_isValid;

    float m_default_intranet_egress_threshold_in_gbps;
    bool m_default_intranet_egress_threshold_in_gbps_isSet;
    bool m_default_intranet_egress_threshold_in_gbps_isValid;

    float m_default_intranet_ingress_threshold_in_gbps;
    bool m_default_intranet_ingress_threshold_in_gbps_isSet;
    bool m_default_intranet_ingress_threshold_in_gbps_isValid;

    float m_default_request_threshold_in_tps;
    bool m_default_request_threshold_in_tps_isSet;
    bool m_default_request_threshold_in_tps_isValid;

    qint32 m_default_throttle_probability_decay_interval_in_seconds;
    bool m_default_throttle_probability_decay_interval_in_seconds_isSet;
    bool m_default_throttle_probability_decay_interval_in_seconds_isValid;

    float m_default_total_egress_threshold_in_gbps;
    bool m_default_total_egress_threshold_in_gbps_isSet;
    bool m_default_total_egress_threshold_in_gbps_isValid;

    float m_default_total_ingress_threshold_in_gbps;
    bool m_default_total_ingress_threshold_in_gbps_isSet;
    bool m_default_total_ingress_threshold_in_gbps_isValid;

    qint32 m_feedback_refresh_interval_in_seconds;
    bool m_feedback_refresh_interval_in_seconds_isSet;
    bool m_feedback_refresh_interval_in_seconds_isValid;

    qint32 m_grace_period_for_full_throttling_in_refresh_intervals;
    bool m_grace_period_for_full_throttling_in_refresh_intervals_isSet;
    bool m_grace_period_for_full_throttling_in_refresh_intervals_isValid;

    float m_grace_period_max_throttle_probability;
    bool m_grace_period_max_throttle_probability_isSet;
    bool m_grace_period_max_throttle_probability_isValid;

    qint32 m_host_style_http_port;
    bool m_host_style_http_port_isSet;
    bool m_host_style_http_port_isValid;

    qint32 m_host_style_https_port;
    bool m_host_style_https_port_isSet;
    bool m_host_style_https_port_isValid;

    float m_minimum_egress_threshold_in_gbps;
    bool m_minimum_egress_threshold_in_gbps_isSet;
    bool m_minimum_egress_threshold_in_gbps_isValid;

    float m_minimum_ingress_threshold_in_gbps;
    bool m_minimum_ingress_threshold_in_gbps_isSet;
    bool m_minimum_ingress_threshold_in_gbps_isValid;

    float m_minimum_intranet_egress_threshold_in_gbps;
    bool m_minimum_intranet_egress_threshold_in_gbps_isSet;
    bool m_minimum_intranet_egress_threshold_in_gbps_isValid;

    float m_minimum_intranet_ingress_threshold_in_gbps;
    bool m_minimum_intranet_ingress_threshold_in_gbps_isSet;
    bool m_minimum_intranet_ingress_threshold_in_gbps_isValid;

    float m_minimum_request_threshold_in_tps;
    bool m_minimum_request_threshold_in_tps_isSet;
    bool m_minimum_request_threshold_in_tps_isValid;

    float m_minimum_total_egress_threshold_in_gbps;
    bool m_minimum_total_egress_threshold_in_gbps_isSet;
    bool m_minimum_total_egress_threshold_in_gbps_isValid;

    float m_minimum_total_ingress_threshold_in_gbps;
    bool m_minimum_total_ingress_threshold_in_gbps_isSet;
    bool m_minimum_total_ingress_threshold_in_gbps_isValid;

    qint32 m_number_of_accounts_to_sync;
    bool m_number_of_accounts_to_sync_isSet;
    bool m_number_of_accounts_to_sync_isValid;

    float m_overall_egress_threshold_in_gbps;
    bool m_overall_egress_threshold_in_gbps_isSet;
    bool m_overall_egress_threshold_in_gbps_isValid;

    float m_overall_ingress_threshold_in_gbps;
    bool m_overall_ingress_threshold_in_gbps_isSet;
    bool m_overall_ingress_threshold_in_gbps_isValid;

    float m_overall_intranet_egress_threshold_in_gbps;
    bool m_overall_intranet_egress_threshold_in_gbps_isSet;
    bool m_overall_intranet_egress_threshold_in_gbps_isValid;

    float m_overall_intranet_ingress_threshold_in_gbps;
    bool m_overall_intranet_ingress_threshold_in_gbps_isSet;
    bool m_overall_intranet_ingress_threshold_in_gbps_isValid;

    float m_overall_request_threshold_in_tps;
    bool m_overall_request_threshold_in_tps_isSet;
    bool m_overall_request_threshold_in_tps_isValid;

    float m_overall_total_egress_threshold_in_gbps;
    bool m_overall_total_egress_threshold_in_gbps_isSet;
    bool m_overall_total_egress_threshold_in_gbps_isValid;

    float m_overall_total_ingress_threshold_in_gbps;
    bool m_overall_total_ingress_threshold_in_gbps_isSet;
    bool m_overall_total_ingress_threshold_in_gbps_isValid;

    qint32 m_retention_period_for_deleted_storage_accounts_in_days;
    bool m_retention_period_for_deleted_storage_accounts_in_days_isSet;
    bool m_retention_period_for_deleted_storage_accounts_in_days_isValid;

    qint32 m_settings_polling_interval_in_second;
    bool m_settings_polling_interval_in_second_isSet;
    bool m_settings_polling_interval_in_second_isValid;

    float m_tolerance_factor_for_egress;
    bool m_tolerance_factor_for_egress_isSet;
    bool m_tolerance_factor_for_egress_isValid;

    float m_tolerance_factor_for_ingress;
    bool m_tolerance_factor_for_ingress_isSet;
    bool m_tolerance_factor_for_ingress_isValid;

    float m_tolerance_factor_for_intranet_egress;
    bool m_tolerance_factor_for_intranet_egress_isSet;
    bool m_tolerance_factor_for_intranet_egress_isValid;

    float m_tolerance_factor_for_intranet_ingress;
    bool m_tolerance_factor_for_intranet_ingress_isSet;
    bool m_tolerance_factor_for_intranet_ingress_isValid;

    float m_tolerance_factor_for_total_egress;
    bool m_tolerance_factor_for_total_egress_isSet;
    bool m_tolerance_factor_for_total_egress_isValid;

    float m_tolerance_factor_for_total_ingress;
    bool m_tolerance_factor_for_total_ingress_isSet;
    bool m_tolerance_factor_for_total_ingress_isValid;

    float m_tolerance_factor_for_tps;
    bool m_tolerance_factor_for_tps_isSet;
    bool m_tolerance_factor_for_tps_isValid;

    qint32 m_usage_collection_interval_in_seconds;
    bool m_usage_collection_interval_in_seconds_isSet;
    bool m_usage_collection_interval_in_seconds_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFarmSettings)

#endif // OAIFarmSettings_H
