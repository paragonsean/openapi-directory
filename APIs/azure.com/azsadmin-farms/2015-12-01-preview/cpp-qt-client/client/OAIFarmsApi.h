/**
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFarmsApi_H
#define OAI_OAIFarmsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFarm.h"
#include "OAIFarmCreationProperties.h"
#include "OAIFarmList.h"
#include "OAIFarms_ListMetricDefinitions_200_response.h"
#include "OAIFarms_ListMetrics_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFarmsApi : public QObject {
    Q_OBJECT

public:
    OAIFarmsApi(const int timeOut = 0);
    ~OAIFarmsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  farm_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  farm_object OAIFarmCreationProperties [required]
    */
    virtual void farmsCreate(const QString &subscription_id, const QString &resource_group_name, const QString &farm_id, const QString &api_version, const OAIFarmCreationProperties &farm_object);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  farm_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void farmsGet(const QString &subscription_id, const QString &resource_group_name, const QString &farm_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void farmsList(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  farm_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void farmsListMetricDefinitions(const QString &subscription_id, const QString &resource_group_name, const QString &farm_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  farm_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void farmsListMetrics(const QString &subscription_id, const QString &resource_group_name, const QString &farm_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  farm_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void farmsStartGarbageCollection(const QString &subscription_id, const QString &resource_group_name, const QString &farm_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  farm_id QString [required]
    * @param[in]  farm_object OAIFarm [required]
    */
    virtual void farmsUpdate(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &farm_id, const OAIFarm &farm_object);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void farmsCreateCallback(OAIHttpRequestWorker *worker);
    void farmsGetCallback(OAIHttpRequestWorker *worker);
    void farmsListCallback(OAIHttpRequestWorker *worker);
    void farmsListMetricDefinitionsCallback(OAIHttpRequestWorker *worker);
    void farmsListMetricsCallback(OAIHttpRequestWorker *worker);
    void farmsStartGarbageCollectionCallback(OAIHttpRequestWorker *worker);
    void farmsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void farmsCreateSignal(OAIFarm summary);
    void farmsGetSignal(OAIFarm summary);
    void farmsListSignal(OAIFarmList summary);
    void farmsListMetricDefinitionsSignal(OAIFarms_ListMetricDefinitions_200_response summary);
    void farmsListMetricsSignal(OAIFarms_ListMetrics_200_response summary);
    void farmsStartGarbageCollectionSignal();
    void farmsUpdateSignal(OAIFarm summary);


    void farmsCreateSignalFull(OAIHttpRequestWorker *worker, OAIFarm summary);
    void farmsGetSignalFull(OAIHttpRequestWorker *worker, OAIFarm summary);
    void farmsListSignalFull(OAIHttpRequestWorker *worker, OAIFarmList summary);
    void farmsListMetricDefinitionsSignalFull(OAIHttpRequestWorker *worker, OAIFarms_ListMetricDefinitions_200_response summary);
    void farmsListMetricsSignalFull(OAIHttpRequestWorker *worker, OAIFarms_ListMetrics_200_response summary);
    void farmsStartGarbageCollectionSignalFull(OAIHttpRequestWorker *worker);
    void farmsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFarm summary);

    Q_DECL_DEPRECATED_X("Use farmsCreateSignalError() instead")
    void farmsCreateSignalE(OAIFarm summary, QNetworkReply::NetworkError error_type, QString error_str);
    void farmsCreateSignalError(OAIFarm summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use farmsGetSignalError() instead")
    void farmsGetSignalE(OAIFarm summary, QNetworkReply::NetworkError error_type, QString error_str);
    void farmsGetSignalError(OAIFarm summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use farmsListSignalError() instead")
    void farmsListSignalE(OAIFarmList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void farmsListSignalError(OAIFarmList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use farmsListMetricDefinitionsSignalError() instead")
    void farmsListMetricDefinitionsSignalE(OAIFarms_ListMetricDefinitions_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void farmsListMetricDefinitionsSignalError(OAIFarms_ListMetricDefinitions_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use farmsListMetricsSignalError() instead")
    void farmsListMetricsSignalE(OAIFarms_ListMetrics_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void farmsListMetricsSignalError(OAIFarms_ListMetrics_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use farmsStartGarbageCollectionSignalError() instead")
    void farmsStartGarbageCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void farmsStartGarbageCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use farmsUpdateSignalError() instead")
    void farmsUpdateSignalE(OAIFarm summary, QNetworkReply::NetworkError error_type, QString error_str);
    void farmsUpdateSignalError(OAIFarm summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use farmsCreateSignalErrorFull() instead")
    void farmsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void farmsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use farmsGetSignalErrorFull() instead")
    void farmsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void farmsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use farmsListSignalErrorFull() instead")
    void farmsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void farmsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use farmsListMetricDefinitionsSignalErrorFull() instead")
    void farmsListMetricDefinitionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void farmsListMetricDefinitionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use farmsListMetricsSignalErrorFull() instead")
    void farmsListMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void farmsListMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use farmsStartGarbageCollectionSignalErrorFull() instead")
    void farmsStartGarbageCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void farmsStartGarbageCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use farmsUpdateSignalErrorFull() instead")
    void farmsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void farmsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
