/**
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFarmSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFarmSettings::OAIFarmSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFarmSettings::OAIFarmSettings() {
    this->initializeModel();
}

OAIFarmSettings::~OAIFarmSettings() {}

void OAIFarmSettings::initializeModel() {

    m_bandwidth_throttle_is_enabled_isSet = false;
    m_bandwidth_throttle_is_enabled_isValid = false;

    m_cors_allowed_origins_list_isSet = false;
    m_cors_allowed_origins_list_isValid = false;

    m_data_center_uri_host_suffixes_isSet = false;
    m_data_center_uri_host_suffixes_isValid = false;

    m_default_egress_threshold_in_gbps_isSet = false;
    m_default_egress_threshold_in_gbps_isValid = false;

    m_default_ingress_threshold_in_gbps_isSet = false;
    m_default_ingress_threshold_in_gbps_isValid = false;

    m_default_intranet_egress_threshold_in_gbps_isSet = false;
    m_default_intranet_egress_threshold_in_gbps_isValid = false;

    m_default_intranet_ingress_threshold_in_gbps_isSet = false;
    m_default_intranet_ingress_threshold_in_gbps_isValid = false;

    m_default_request_threshold_in_tps_isSet = false;
    m_default_request_threshold_in_tps_isValid = false;

    m_default_throttle_probability_decay_interval_in_seconds_isSet = false;
    m_default_throttle_probability_decay_interval_in_seconds_isValid = false;

    m_default_total_egress_threshold_in_gbps_isSet = false;
    m_default_total_egress_threshold_in_gbps_isValid = false;

    m_default_total_ingress_threshold_in_gbps_isSet = false;
    m_default_total_ingress_threshold_in_gbps_isValid = false;

    m_feedback_refresh_interval_in_seconds_isSet = false;
    m_feedback_refresh_interval_in_seconds_isValid = false;

    m_grace_period_for_full_throttling_in_refresh_intervals_isSet = false;
    m_grace_period_for_full_throttling_in_refresh_intervals_isValid = false;

    m_grace_period_max_throttle_probability_isSet = false;
    m_grace_period_max_throttle_probability_isValid = false;

    m_host_style_http_port_isSet = false;
    m_host_style_http_port_isValid = false;

    m_host_style_https_port_isSet = false;
    m_host_style_https_port_isValid = false;

    m_minimum_egress_threshold_in_gbps_isSet = false;
    m_minimum_egress_threshold_in_gbps_isValid = false;

    m_minimum_ingress_threshold_in_gbps_isSet = false;
    m_minimum_ingress_threshold_in_gbps_isValid = false;

    m_minimum_intranet_egress_threshold_in_gbps_isSet = false;
    m_minimum_intranet_egress_threshold_in_gbps_isValid = false;

    m_minimum_intranet_ingress_threshold_in_gbps_isSet = false;
    m_minimum_intranet_ingress_threshold_in_gbps_isValid = false;

    m_minimum_request_threshold_in_tps_isSet = false;
    m_minimum_request_threshold_in_tps_isValid = false;

    m_minimum_total_egress_threshold_in_gbps_isSet = false;
    m_minimum_total_egress_threshold_in_gbps_isValid = false;

    m_minimum_total_ingress_threshold_in_gbps_isSet = false;
    m_minimum_total_ingress_threshold_in_gbps_isValid = false;

    m_number_of_accounts_to_sync_isSet = false;
    m_number_of_accounts_to_sync_isValid = false;

    m_overall_egress_threshold_in_gbps_isSet = false;
    m_overall_egress_threshold_in_gbps_isValid = false;

    m_overall_ingress_threshold_in_gbps_isSet = false;
    m_overall_ingress_threshold_in_gbps_isValid = false;

    m_overall_intranet_egress_threshold_in_gbps_isSet = false;
    m_overall_intranet_egress_threshold_in_gbps_isValid = false;

    m_overall_intranet_ingress_threshold_in_gbps_isSet = false;
    m_overall_intranet_ingress_threshold_in_gbps_isValid = false;

    m_overall_request_threshold_in_tps_isSet = false;
    m_overall_request_threshold_in_tps_isValid = false;

    m_overall_total_egress_threshold_in_gbps_isSet = false;
    m_overall_total_egress_threshold_in_gbps_isValid = false;

    m_overall_total_ingress_threshold_in_gbps_isSet = false;
    m_overall_total_ingress_threshold_in_gbps_isValid = false;

    m_retention_period_for_deleted_storage_accounts_in_days_isSet = false;
    m_retention_period_for_deleted_storage_accounts_in_days_isValid = false;

    m_settings_polling_interval_in_second_isSet = false;
    m_settings_polling_interval_in_second_isValid = false;

    m_tolerance_factor_for_egress_isSet = false;
    m_tolerance_factor_for_egress_isValid = false;

    m_tolerance_factor_for_ingress_isSet = false;
    m_tolerance_factor_for_ingress_isValid = false;

    m_tolerance_factor_for_intranet_egress_isSet = false;
    m_tolerance_factor_for_intranet_egress_isValid = false;

    m_tolerance_factor_for_intranet_ingress_isSet = false;
    m_tolerance_factor_for_intranet_ingress_isValid = false;

    m_tolerance_factor_for_total_egress_isSet = false;
    m_tolerance_factor_for_total_egress_isValid = false;

    m_tolerance_factor_for_total_ingress_isSet = false;
    m_tolerance_factor_for_total_ingress_isValid = false;

    m_tolerance_factor_for_tps_isSet = false;
    m_tolerance_factor_for_tps_isValid = false;

    m_usage_collection_interval_in_seconds_isSet = false;
    m_usage_collection_interval_in_seconds_isValid = false;
}

void OAIFarmSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFarmSettings::fromJsonObject(QJsonObject json) {

    m_bandwidth_throttle_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_bandwidth_throttle_is_enabled, json[QString("bandwidthThrottleIsEnabled")]);
    m_bandwidth_throttle_is_enabled_isSet = !json[QString("bandwidthThrottleIsEnabled")].isNull() && m_bandwidth_throttle_is_enabled_isValid;

    m_cors_allowed_origins_list_isValid = ::OpenAPI::fromJsonValue(m_cors_allowed_origins_list, json[QString("corsAllowedOriginsList")]);
    m_cors_allowed_origins_list_isSet = !json[QString("corsAllowedOriginsList")].isNull() && m_cors_allowed_origins_list_isValid;

    m_data_center_uri_host_suffixes_isValid = ::OpenAPI::fromJsonValue(m_data_center_uri_host_suffixes, json[QString("dataCenterUriHostSuffixes")]);
    m_data_center_uri_host_suffixes_isSet = !json[QString("dataCenterUriHostSuffixes")].isNull() && m_data_center_uri_host_suffixes_isValid;

    m_default_egress_threshold_in_gbps_isValid = ::OpenAPI::fromJsonValue(m_default_egress_threshold_in_gbps, json[QString("defaultEgressThresholdInGbps")]);
    m_default_egress_threshold_in_gbps_isSet = !json[QString("defaultEgressThresholdInGbps")].isNull() && m_default_egress_threshold_in_gbps_isValid;

    m_default_ingress_threshold_in_gbps_isValid = ::OpenAPI::fromJsonValue(m_default_ingress_threshold_in_gbps, json[QString("defaultIngressThresholdInGbps")]);
    m_default_ingress_threshold_in_gbps_isSet = !json[QString("defaultIngressThresholdInGbps")].isNull() && m_default_ingress_threshold_in_gbps_isValid;

    m_default_intranet_egress_threshold_in_gbps_isValid = ::OpenAPI::fromJsonValue(m_default_intranet_egress_threshold_in_gbps, json[QString("defaultIntranetEgressThresholdInGbps")]);
    m_default_intranet_egress_threshold_in_gbps_isSet = !json[QString("defaultIntranetEgressThresholdInGbps")].isNull() && m_default_intranet_egress_threshold_in_gbps_isValid;

    m_default_intranet_ingress_threshold_in_gbps_isValid = ::OpenAPI::fromJsonValue(m_default_intranet_ingress_threshold_in_gbps, json[QString("defaultIntranetIngressThresholdInGbps")]);
    m_default_intranet_ingress_threshold_in_gbps_isSet = !json[QString("defaultIntranetIngressThresholdInGbps")].isNull() && m_default_intranet_ingress_threshold_in_gbps_isValid;

    m_default_request_threshold_in_tps_isValid = ::OpenAPI::fromJsonValue(m_default_request_threshold_in_tps, json[QString("defaultRequestThresholdInTps")]);
    m_default_request_threshold_in_tps_isSet = !json[QString("defaultRequestThresholdInTps")].isNull() && m_default_request_threshold_in_tps_isValid;

    m_default_throttle_probability_decay_interval_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_default_throttle_probability_decay_interval_in_seconds, json[QString("defaultThrottleProbabilityDecayIntervalInSeconds")]);
    m_default_throttle_probability_decay_interval_in_seconds_isSet = !json[QString("defaultThrottleProbabilityDecayIntervalInSeconds")].isNull() && m_default_throttle_probability_decay_interval_in_seconds_isValid;

    m_default_total_egress_threshold_in_gbps_isValid = ::OpenAPI::fromJsonValue(m_default_total_egress_threshold_in_gbps, json[QString("defaultTotalEgressThresholdInGbps")]);
    m_default_total_egress_threshold_in_gbps_isSet = !json[QString("defaultTotalEgressThresholdInGbps")].isNull() && m_default_total_egress_threshold_in_gbps_isValid;

    m_default_total_ingress_threshold_in_gbps_isValid = ::OpenAPI::fromJsonValue(m_default_total_ingress_threshold_in_gbps, json[QString("defaultTotalIngressThresholdInGbps")]);
    m_default_total_ingress_threshold_in_gbps_isSet = !json[QString("defaultTotalIngressThresholdInGbps")].isNull() && m_default_total_ingress_threshold_in_gbps_isValid;

    m_feedback_refresh_interval_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_feedback_refresh_interval_in_seconds, json[QString("feedbackRefreshIntervalInSeconds")]);
    m_feedback_refresh_interval_in_seconds_isSet = !json[QString("feedbackRefreshIntervalInSeconds")].isNull() && m_feedback_refresh_interval_in_seconds_isValid;

    m_grace_period_for_full_throttling_in_refresh_intervals_isValid = ::OpenAPI::fromJsonValue(m_grace_period_for_full_throttling_in_refresh_intervals, json[QString("gracePeriodForFullThrottlingInRefreshIntervals")]);
    m_grace_period_for_full_throttling_in_refresh_intervals_isSet = !json[QString("gracePeriodForFullThrottlingInRefreshIntervals")].isNull() && m_grace_period_for_full_throttling_in_refresh_intervals_isValid;

    m_grace_period_max_throttle_probability_isValid = ::OpenAPI::fromJsonValue(m_grace_period_max_throttle_probability, json[QString("gracePeriodMaxThrottleProbability")]);
    m_grace_period_max_throttle_probability_isSet = !json[QString("gracePeriodMaxThrottleProbability")].isNull() && m_grace_period_max_throttle_probability_isValid;

    m_host_style_http_port_isValid = ::OpenAPI::fromJsonValue(m_host_style_http_port, json[QString("hostStyleHttpPort")]);
    m_host_style_http_port_isSet = !json[QString("hostStyleHttpPort")].isNull() && m_host_style_http_port_isValid;

    m_host_style_https_port_isValid = ::OpenAPI::fromJsonValue(m_host_style_https_port, json[QString("hostStyleHttpsPort")]);
    m_host_style_https_port_isSet = !json[QString("hostStyleHttpsPort")].isNull() && m_host_style_https_port_isValid;

    m_minimum_egress_threshold_in_gbps_isValid = ::OpenAPI::fromJsonValue(m_minimum_egress_threshold_in_gbps, json[QString("minimumEgressThresholdInGbps")]);
    m_minimum_egress_threshold_in_gbps_isSet = !json[QString("minimumEgressThresholdInGbps")].isNull() && m_minimum_egress_threshold_in_gbps_isValid;

    m_minimum_ingress_threshold_in_gbps_isValid = ::OpenAPI::fromJsonValue(m_minimum_ingress_threshold_in_gbps, json[QString("minimumIngressThresholdInGbps")]);
    m_minimum_ingress_threshold_in_gbps_isSet = !json[QString("minimumIngressThresholdInGbps")].isNull() && m_minimum_ingress_threshold_in_gbps_isValid;

    m_minimum_intranet_egress_threshold_in_gbps_isValid = ::OpenAPI::fromJsonValue(m_minimum_intranet_egress_threshold_in_gbps, json[QString("minimumIntranetEgressThresholdInGbps")]);
    m_minimum_intranet_egress_threshold_in_gbps_isSet = !json[QString("minimumIntranetEgressThresholdInGbps")].isNull() && m_minimum_intranet_egress_threshold_in_gbps_isValid;

    m_minimum_intranet_ingress_threshold_in_gbps_isValid = ::OpenAPI::fromJsonValue(m_minimum_intranet_ingress_threshold_in_gbps, json[QString("minimumIntranetIngressThresholdInGbps")]);
    m_minimum_intranet_ingress_threshold_in_gbps_isSet = !json[QString("minimumIntranetIngressThresholdInGbps")].isNull() && m_minimum_intranet_ingress_threshold_in_gbps_isValid;

    m_minimum_request_threshold_in_tps_isValid = ::OpenAPI::fromJsonValue(m_minimum_request_threshold_in_tps, json[QString("minimumRequestThresholdInTps")]);
    m_minimum_request_threshold_in_tps_isSet = !json[QString("minimumRequestThresholdInTps")].isNull() && m_minimum_request_threshold_in_tps_isValid;

    m_minimum_total_egress_threshold_in_gbps_isValid = ::OpenAPI::fromJsonValue(m_minimum_total_egress_threshold_in_gbps, json[QString("minimumTotalEgressThresholdInGbps")]);
    m_minimum_total_egress_threshold_in_gbps_isSet = !json[QString("minimumTotalEgressThresholdInGbps")].isNull() && m_minimum_total_egress_threshold_in_gbps_isValid;

    m_minimum_total_ingress_threshold_in_gbps_isValid = ::OpenAPI::fromJsonValue(m_minimum_total_ingress_threshold_in_gbps, json[QString("minimumTotalIngressThresholdInGbps")]);
    m_minimum_total_ingress_threshold_in_gbps_isSet = !json[QString("minimumTotalIngressThresholdInGbps")].isNull() && m_minimum_total_ingress_threshold_in_gbps_isValid;

    m_number_of_accounts_to_sync_isValid = ::OpenAPI::fromJsonValue(m_number_of_accounts_to_sync, json[QString("numberOfAccountsToSync")]);
    m_number_of_accounts_to_sync_isSet = !json[QString("numberOfAccountsToSync")].isNull() && m_number_of_accounts_to_sync_isValid;

    m_overall_egress_threshold_in_gbps_isValid = ::OpenAPI::fromJsonValue(m_overall_egress_threshold_in_gbps, json[QString("overallEgressThresholdInGbps")]);
    m_overall_egress_threshold_in_gbps_isSet = !json[QString("overallEgressThresholdInGbps")].isNull() && m_overall_egress_threshold_in_gbps_isValid;

    m_overall_ingress_threshold_in_gbps_isValid = ::OpenAPI::fromJsonValue(m_overall_ingress_threshold_in_gbps, json[QString("overallIngressThresholdInGbps")]);
    m_overall_ingress_threshold_in_gbps_isSet = !json[QString("overallIngressThresholdInGbps")].isNull() && m_overall_ingress_threshold_in_gbps_isValid;

    m_overall_intranet_egress_threshold_in_gbps_isValid = ::OpenAPI::fromJsonValue(m_overall_intranet_egress_threshold_in_gbps, json[QString("overallIntranetEgressThresholdInGbps")]);
    m_overall_intranet_egress_threshold_in_gbps_isSet = !json[QString("overallIntranetEgressThresholdInGbps")].isNull() && m_overall_intranet_egress_threshold_in_gbps_isValid;

    m_overall_intranet_ingress_threshold_in_gbps_isValid = ::OpenAPI::fromJsonValue(m_overall_intranet_ingress_threshold_in_gbps, json[QString("overallIntranetIngressThresholdInGbps")]);
    m_overall_intranet_ingress_threshold_in_gbps_isSet = !json[QString("overallIntranetIngressThresholdInGbps")].isNull() && m_overall_intranet_ingress_threshold_in_gbps_isValid;

    m_overall_request_threshold_in_tps_isValid = ::OpenAPI::fromJsonValue(m_overall_request_threshold_in_tps, json[QString("overallRequestThresholdInTps")]);
    m_overall_request_threshold_in_tps_isSet = !json[QString("overallRequestThresholdInTps")].isNull() && m_overall_request_threshold_in_tps_isValid;

    m_overall_total_egress_threshold_in_gbps_isValid = ::OpenAPI::fromJsonValue(m_overall_total_egress_threshold_in_gbps, json[QString("overallTotalEgressThresholdInGbps")]);
    m_overall_total_egress_threshold_in_gbps_isSet = !json[QString("overallTotalEgressThresholdInGbps")].isNull() && m_overall_total_egress_threshold_in_gbps_isValid;

    m_overall_total_ingress_threshold_in_gbps_isValid = ::OpenAPI::fromJsonValue(m_overall_total_ingress_threshold_in_gbps, json[QString("overallTotalIngressThresholdInGbps")]);
    m_overall_total_ingress_threshold_in_gbps_isSet = !json[QString("overallTotalIngressThresholdInGbps")].isNull() && m_overall_total_ingress_threshold_in_gbps_isValid;

    m_retention_period_for_deleted_storage_accounts_in_days_isValid = ::OpenAPI::fromJsonValue(m_retention_period_for_deleted_storage_accounts_in_days, json[QString("retentionPeriodForDeletedStorageAccountsInDays")]);
    m_retention_period_for_deleted_storage_accounts_in_days_isSet = !json[QString("retentionPeriodForDeletedStorageAccountsInDays")].isNull() && m_retention_period_for_deleted_storage_accounts_in_days_isValid;

    m_settings_polling_interval_in_second_isValid = ::OpenAPI::fromJsonValue(m_settings_polling_interval_in_second, json[QString("settingsPollingIntervalInSecond")]);
    m_settings_polling_interval_in_second_isSet = !json[QString("settingsPollingIntervalInSecond")].isNull() && m_settings_polling_interval_in_second_isValid;

    m_tolerance_factor_for_egress_isValid = ::OpenAPI::fromJsonValue(m_tolerance_factor_for_egress, json[QString("toleranceFactorForEgress")]);
    m_tolerance_factor_for_egress_isSet = !json[QString("toleranceFactorForEgress")].isNull() && m_tolerance_factor_for_egress_isValid;

    m_tolerance_factor_for_ingress_isValid = ::OpenAPI::fromJsonValue(m_tolerance_factor_for_ingress, json[QString("toleranceFactorForIngress")]);
    m_tolerance_factor_for_ingress_isSet = !json[QString("toleranceFactorForIngress")].isNull() && m_tolerance_factor_for_ingress_isValid;

    m_tolerance_factor_for_intranet_egress_isValid = ::OpenAPI::fromJsonValue(m_tolerance_factor_for_intranet_egress, json[QString("toleranceFactorForIntranetEgress")]);
    m_tolerance_factor_for_intranet_egress_isSet = !json[QString("toleranceFactorForIntranetEgress")].isNull() && m_tolerance_factor_for_intranet_egress_isValid;

    m_tolerance_factor_for_intranet_ingress_isValid = ::OpenAPI::fromJsonValue(m_tolerance_factor_for_intranet_ingress, json[QString("toleranceFactorForIntranetIngress")]);
    m_tolerance_factor_for_intranet_ingress_isSet = !json[QString("toleranceFactorForIntranetIngress")].isNull() && m_tolerance_factor_for_intranet_ingress_isValid;

    m_tolerance_factor_for_total_egress_isValid = ::OpenAPI::fromJsonValue(m_tolerance_factor_for_total_egress, json[QString("toleranceFactorForTotalEgress")]);
    m_tolerance_factor_for_total_egress_isSet = !json[QString("toleranceFactorForTotalEgress")].isNull() && m_tolerance_factor_for_total_egress_isValid;

    m_tolerance_factor_for_total_ingress_isValid = ::OpenAPI::fromJsonValue(m_tolerance_factor_for_total_ingress, json[QString("toleranceFactorForTotalIngress")]);
    m_tolerance_factor_for_total_ingress_isSet = !json[QString("toleranceFactorForTotalIngress")].isNull() && m_tolerance_factor_for_total_ingress_isValid;

    m_tolerance_factor_for_tps_isValid = ::OpenAPI::fromJsonValue(m_tolerance_factor_for_tps, json[QString("toleranceFactorForTps")]);
    m_tolerance_factor_for_tps_isSet = !json[QString("toleranceFactorForTps")].isNull() && m_tolerance_factor_for_tps_isValid;

    m_usage_collection_interval_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_usage_collection_interval_in_seconds, json[QString("usageCollectionIntervalInSeconds")]);
    m_usage_collection_interval_in_seconds_isSet = !json[QString("usageCollectionIntervalInSeconds")].isNull() && m_usage_collection_interval_in_seconds_isValid;
}

QString OAIFarmSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFarmSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_bandwidth_throttle_is_enabled_isSet) {
        obj.insert(QString("bandwidthThrottleIsEnabled"), ::OpenAPI::toJsonValue(m_bandwidth_throttle_is_enabled));
    }
    if (m_cors_allowed_origins_list_isSet) {
        obj.insert(QString("corsAllowedOriginsList"), ::OpenAPI::toJsonValue(m_cors_allowed_origins_list));
    }
    if (m_data_center_uri_host_suffixes_isSet) {
        obj.insert(QString("dataCenterUriHostSuffixes"), ::OpenAPI::toJsonValue(m_data_center_uri_host_suffixes));
    }
    if (m_default_egress_threshold_in_gbps_isSet) {
        obj.insert(QString("defaultEgressThresholdInGbps"), ::OpenAPI::toJsonValue(m_default_egress_threshold_in_gbps));
    }
    if (m_default_ingress_threshold_in_gbps_isSet) {
        obj.insert(QString("defaultIngressThresholdInGbps"), ::OpenAPI::toJsonValue(m_default_ingress_threshold_in_gbps));
    }
    if (m_default_intranet_egress_threshold_in_gbps_isSet) {
        obj.insert(QString("defaultIntranetEgressThresholdInGbps"), ::OpenAPI::toJsonValue(m_default_intranet_egress_threshold_in_gbps));
    }
    if (m_default_intranet_ingress_threshold_in_gbps_isSet) {
        obj.insert(QString("defaultIntranetIngressThresholdInGbps"), ::OpenAPI::toJsonValue(m_default_intranet_ingress_threshold_in_gbps));
    }
    if (m_default_request_threshold_in_tps_isSet) {
        obj.insert(QString("defaultRequestThresholdInTps"), ::OpenAPI::toJsonValue(m_default_request_threshold_in_tps));
    }
    if (m_default_throttle_probability_decay_interval_in_seconds_isSet) {
        obj.insert(QString("defaultThrottleProbabilityDecayIntervalInSeconds"), ::OpenAPI::toJsonValue(m_default_throttle_probability_decay_interval_in_seconds));
    }
    if (m_default_total_egress_threshold_in_gbps_isSet) {
        obj.insert(QString("defaultTotalEgressThresholdInGbps"), ::OpenAPI::toJsonValue(m_default_total_egress_threshold_in_gbps));
    }
    if (m_default_total_ingress_threshold_in_gbps_isSet) {
        obj.insert(QString("defaultTotalIngressThresholdInGbps"), ::OpenAPI::toJsonValue(m_default_total_ingress_threshold_in_gbps));
    }
    if (m_feedback_refresh_interval_in_seconds_isSet) {
        obj.insert(QString("feedbackRefreshIntervalInSeconds"), ::OpenAPI::toJsonValue(m_feedback_refresh_interval_in_seconds));
    }
    if (m_grace_period_for_full_throttling_in_refresh_intervals_isSet) {
        obj.insert(QString("gracePeriodForFullThrottlingInRefreshIntervals"), ::OpenAPI::toJsonValue(m_grace_period_for_full_throttling_in_refresh_intervals));
    }
    if (m_grace_period_max_throttle_probability_isSet) {
        obj.insert(QString("gracePeriodMaxThrottleProbability"), ::OpenAPI::toJsonValue(m_grace_period_max_throttle_probability));
    }
    if (m_host_style_http_port_isSet) {
        obj.insert(QString("hostStyleHttpPort"), ::OpenAPI::toJsonValue(m_host_style_http_port));
    }
    if (m_host_style_https_port_isSet) {
        obj.insert(QString("hostStyleHttpsPort"), ::OpenAPI::toJsonValue(m_host_style_https_port));
    }
    if (m_minimum_egress_threshold_in_gbps_isSet) {
        obj.insert(QString("minimumEgressThresholdInGbps"), ::OpenAPI::toJsonValue(m_minimum_egress_threshold_in_gbps));
    }
    if (m_minimum_ingress_threshold_in_gbps_isSet) {
        obj.insert(QString("minimumIngressThresholdInGbps"), ::OpenAPI::toJsonValue(m_minimum_ingress_threshold_in_gbps));
    }
    if (m_minimum_intranet_egress_threshold_in_gbps_isSet) {
        obj.insert(QString("minimumIntranetEgressThresholdInGbps"), ::OpenAPI::toJsonValue(m_minimum_intranet_egress_threshold_in_gbps));
    }
    if (m_minimum_intranet_ingress_threshold_in_gbps_isSet) {
        obj.insert(QString("minimumIntranetIngressThresholdInGbps"), ::OpenAPI::toJsonValue(m_minimum_intranet_ingress_threshold_in_gbps));
    }
    if (m_minimum_request_threshold_in_tps_isSet) {
        obj.insert(QString("minimumRequestThresholdInTps"), ::OpenAPI::toJsonValue(m_minimum_request_threshold_in_tps));
    }
    if (m_minimum_total_egress_threshold_in_gbps_isSet) {
        obj.insert(QString("minimumTotalEgressThresholdInGbps"), ::OpenAPI::toJsonValue(m_minimum_total_egress_threshold_in_gbps));
    }
    if (m_minimum_total_ingress_threshold_in_gbps_isSet) {
        obj.insert(QString("minimumTotalIngressThresholdInGbps"), ::OpenAPI::toJsonValue(m_minimum_total_ingress_threshold_in_gbps));
    }
    if (m_number_of_accounts_to_sync_isSet) {
        obj.insert(QString("numberOfAccountsToSync"), ::OpenAPI::toJsonValue(m_number_of_accounts_to_sync));
    }
    if (m_overall_egress_threshold_in_gbps_isSet) {
        obj.insert(QString("overallEgressThresholdInGbps"), ::OpenAPI::toJsonValue(m_overall_egress_threshold_in_gbps));
    }
    if (m_overall_ingress_threshold_in_gbps_isSet) {
        obj.insert(QString("overallIngressThresholdInGbps"), ::OpenAPI::toJsonValue(m_overall_ingress_threshold_in_gbps));
    }
    if (m_overall_intranet_egress_threshold_in_gbps_isSet) {
        obj.insert(QString("overallIntranetEgressThresholdInGbps"), ::OpenAPI::toJsonValue(m_overall_intranet_egress_threshold_in_gbps));
    }
    if (m_overall_intranet_ingress_threshold_in_gbps_isSet) {
        obj.insert(QString("overallIntranetIngressThresholdInGbps"), ::OpenAPI::toJsonValue(m_overall_intranet_ingress_threshold_in_gbps));
    }
    if (m_overall_request_threshold_in_tps_isSet) {
        obj.insert(QString("overallRequestThresholdInTps"), ::OpenAPI::toJsonValue(m_overall_request_threshold_in_tps));
    }
    if (m_overall_total_egress_threshold_in_gbps_isSet) {
        obj.insert(QString("overallTotalEgressThresholdInGbps"), ::OpenAPI::toJsonValue(m_overall_total_egress_threshold_in_gbps));
    }
    if (m_overall_total_ingress_threshold_in_gbps_isSet) {
        obj.insert(QString("overallTotalIngressThresholdInGbps"), ::OpenAPI::toJsonValue(m_overall_total_ingress_threshold_in_gbps));
    }
    if (m_retention_period_for_deleted_storage_accounts_in_days_isSet) {
        obj.insert(QString("retentionPeriodForDeletedStorageAccountsInDays"), ::OpenAPI::toJsonValue(m_retention_period_for_deleted_storage_accounts_in_days));
    }
    if (m_settings_polling_interval_in_second_isSet) {
        obj.insert(QString("settingsPollingIntervalInSecond"), ::OpenAPI::toJsonValue(m_settings_polling_interval_in_second));
    }
    if (m_tolerance_factor_for_egress_isSet) {
        obj.insert(QString("toleranceFactorForEgress"), ::OpenAPI::toJsonValue(m_tolerance_factor_for_egress));
    }
    if (m_tolerance_factor_for_ingress_isSet) {
        obj.insert(QString("toleranceFactorForIngress"), ::OpenAPI::toJsonValue(m_tolerance_factor_for_ingress));
    }
    if (m_tolerance_factor_for_intranet_egress_isSet) {
        obj.insert(QString("toleranceFactorForIntranetEgress"), ::OpenAPI::toJsonValue(m_tolerance_factor_for_intranet_egress));
    }
    if (m_tolerance_factor_for_intranet_ingress_isSet) {
        obj.insert(QString("toleranceFactorForIntranetIngress"), ::OpenAPI::toJsonValue(m_tolerance_factor_for_intranet_ingress));
    }
    if (m_tolerance_factor_for_total_egress_isSet) {
        obj.insert(QString("toleranceFactorForTotalEgress"), ::OpenAPI::toJsonValue(m_tolerance_factor_for_total_egress));
    }
    if (m_tolerance_factor_for_total_ingress_isSet) {
        obj.insert(QString("toleranceFactorForTotalIngress"), ::OpenAPI::toJsonValue(m_tolerance_factor_for_total_ingress));
    }
    if (m_tolerance_factor_for_tps_isSet) {
        obj.insert(QString("toleranceFactorForTps"), ::OpenAPI::toJsonValue(m_tolerance_factor_for_tps));
    }
    if (m_usage_collection_interval_in_seconds_isSet) {
        obj.insert(QString("usageCollectionIntervalInSeconds"), ::OpenAPI::toJsonValue(m_usage_collection_interval_in_seconds));
    }
    return obj;
}

bool OAIFarmSettings::isBandwidthThrottleIsEnabled() const {
    return m_bandwidth_throttle_is_enabled;
}
void OAIFarmSettings::setBandwidthThrottleIsEnabled(const bool &bandwidth_throttle_is_enabled) {
    m_bandwidth_throttle_is_enabled = bandwidth_throttle_is_enabled;
    m_bandwidth_throttle_is_enabled_isSet = true;
}

bool OAIFarmSettings::is_bandwidth_throttle_is_enabled_Set() const{
    return m_bandwidth_throttle_is_enabled_isSet;
}

bool OAIFarmSettings::is_bandwidth_throttle_is_enabled_Valid() const{
    return m_bandwidth_throttle_is_enabled_isValid;
}

QString OAIFarmSettings::getCorsAllowedOriginsList() const {
    return m_cors_allowed_origins_list;
}
void OAIFarmSettings::setCorsAllowedOriginsList(const QString &cors_allowed_origins_list) {
    m_cors_allowed_origins_list = cors_allowed_origins_list;
    m_cors_allowed_origins_list_isSet = true;
}

bool OAIFarmSettings::is_cors_allowed_origins_list_Set() const{
    return m_cors_allowed_origins_list_isSet;
}

bool OAIFarmSettings::is_cors_allowed_origins_list_Valid() const{
    return m_cors_allowed_origins_list_isValid;
}

QString OAIFarmSettings::getDataCenterUriHostSuffixes() const {
    return m_data_center_uri_host_suffixes;
}
void OAIFarmSettings::setDataCenterUriHostSuffixes(const QString &data_center_uri_host_suffixes) {
    m_data_center_uri_host_suffixes = data_center_uri_host_suffixes;
    m_data_center_uri_host_suffixes_isSet = true;
}

bool OAIFarmSettings::is_data_center_uri_host_suffixes_Set() const{
    return m_data_center_uri_host_suffixes_isSet;
}

bool OAIFarmSettings::is_data_center_uri_host_suffixes_Valid() const{
    return m_data_center_uri_host_suffixes_isValid;
}

float OAIFarmSettings::getDefaultEgressThresholdInGbps() const {
    return m_default_egress_threshold_in_gbps;
}
void OAIFarmSettings::setDefaultEgressThresholdInGbps(const float &default_egress_threshold_in_gbps) {
    m_default_egress_threshold_in_gbps = default_egress_threshold_in_gbps;
    m_default_egress_threshold_in_gbps_isSet = true;
}

bool OAIFarmSettings::is_default_egress_threshold_in_gbps_Set() const{
    return m_default_egress_threshold_in_gbps_isSet;
}

bool OAIFarmSettings::is_default_egress_threshold_in_gbps_Valid() const{
    return m_default_egress_threshold_in_gbps_isValid;
}

float OAIFarmSettings::getDefaultIngressThresholdInGbps() const {
    return m_default_ingress_threshold_in_gbps;
}
void OAIFarmSettings::setDefaultIngressThresholdInGbps(const float &default_ingress_threshold_in_gbps) {
    m_default_ingress_threshold_in_gbps = default_ingress_threshold_in_gbps;
    m_default_ingress_threshold_in_gbps_isSet = true;
}

bool OAIFarmSettings::is_default_ingress_threshold_in_gbps_Set() const{
    return m_default_ingress_threshold_in_gbps_isSet;
}

bool OAIFarmSettings::is_default_ingress_threshold_in_gbps_Valid() const{
    return m_default_ingress_threshold_in_gbps_isValid;
}

float OAIFarmSettings::getDefaultIntranetEgressThresholdInGbps() const {
    return m_default_intranet_egress_threshold_in_gbps;
}
void OAIFarmSettings::setDefaultIntranetEgressThresholdInGbps(const float &default_intranet_egress_threshold_in_gbps) {
    m_default_intranet_egress_threshold_in_gbps = default_intranet_egress_threshold_in_gbps;
    m_default_intranet_egress_threshold_in_gbps_isSet = true;
}

bool OAIFarmSettings::is_default_intranet_egress_threshold_in_gbps_Set() const{
    return m_default_intranet_egress_threshold_in_gbps_isSet;
}

bool OAIFarmSettings::is_default_intranet_egress_threshold_in_gbps_Valid() const{
    return m_default_intranet_egress_threshold_in_gbps_isValid;
}

float OAIFarmSettings::getDefaultIntranetIngressThresholdInGbps() const {
    return m_default_intranet_ingress_threshold_in_gbps;
}
void OAIFarmSettings::setDefaultIntranetIngressThresholdInGbps(const float &default_intranet_ingress_threshold_in_gbps) {
    m_default_intranet_ingress_threshold_in_gbps = default_intranet_ingress_threshold_in_gbps;
    m_default_intranet_ingress_threshold_in_gbps_isSet = true;
}

bool OAIFarmSettings::is_default_intranet_ingress_threshold_in_gbps_Set() const{
    return m_default_intranet_ingress_threshold_in_gbps_isSet;
}

bool OAIFarmSettings::is_default_intranet_ingress_threshold_in_gbps_Valid() const{
    return m_default_intranet_ingress_threshold_in_gbps_isValid;
}

float OAIFarmSettings::getDefaultRequestThresholdInTps() const {
    return m_default_request_threshold_in_tps;
}
void OAIFarmSettings::setDefaultRequestThresholdInTps(const float &default_request_threshold_in_tps) {
    m_default_request_threshold_in_tps = default_request_threshold_in_tps;
    m_default_request_threshold_in_tps_isSet = true;
}

bool OAIFarmSettings::is_default_request_threshold_in_tps_Set() const{
    return m_default_request_threshold_in_tps_isSet;
}

bool OAIFarmSettings::is_default_request_threshold_in_tps_Valid() const{
    return m_default_request_threshold_in_tps_isValid;
}

qint32 OAIFarmSettings::getDefaultThrottleProbabilityDecayIntervalInSeconds() const {
    return m_default_throttle_probability_decay_interval_in_seconds;
}
void OAIFarmSettings::setDefaultThrottleProbabilityDecayIntervalInSeconds(const qint32 &default_throttle_probability_decay_interval_in_seconds) {
    m_default_throttle_probability_decay_interval_in_seconds = default_throttle_probability_decay_interval_in_seconds;
    m_default_throttle_probability_decay_interval_in_seconds_isSet = true;
}

bool OAIFarmSettings::is_default_throttle_probability_decay_interval_in_seconds_Set() const{
    return m_default_throttle_probability_decay_interval_in_seconds_isSet;
}

bool OAIFarmSettings::is_default_throttle_probability_decay_interval_in_seconds_Valid() const{
    return m_default_throttle_probability_decay_interval_in_seconds_isValid;
}

float OAIFarmSettings::getDefaultTotalEgressThresholdInGbps() const {
    return m_default_total_egress_threshold_in_gbps;
}
void OAIFarmSettings::setDefaultTotalEgressThresholdInGbps(const float &default_total_egress_threshold_in_gbps) {
    m_default_total_egress_threshold_in_gbps = default_total_egress_threshold_in_gbps;
    m_default_total_egress_threshold_in_gbps_isSet = true;
}

bool OAIFarmSettings::is_default_total_egress_threshold_in_gbps_Set() const{
    return m_default_total_egress_threshold_in_gbps_isSet;
}

bool OAIFarmSettings::is_default_total_egress_threshold_in_gbps_Valid() const{
    return m_default_total_egress_threshold_in_gbps_isValid;
}

float OAIFarmSettings::getDefaultTotalIngressThresholdInGbps() const {
    return m_default_total_ingress_threshold_in_gbps;
}
void OAIFarmSettings::setDefaultTotalIngressThresholdInGbps(const float &default_total_ingress_threshold_in_gbps) {
    m_default_total_ingress_threshold_in_gbps = default_total_ingress_threshold_in_gbps;
    m_default_total_ingress_threshold_in_gbps_isSet = true;
}

bool OAIFarmSettings::is_default_total_ingress_threshold_in_gbps_Set() const{
    return m_default_total_ingress_threshold_in_gbps_isSet;
}

bool OAIFarmSettings::is_default_total_ingress_threshold_in_gbps_Valid() const{
    return m_default_total_ingress_threshold_in_gbps_isValid;
}

qint32 OAIFarmSettings::getFeedbackRefreshIntervalInSeconds() const {
    return m_feedback_refresh_interval_in_seconds;
}
void OAIFarmSettings::setFeedbackRefreshIntervalInSeconds(const qint32 &feedback_refresh_interval_in_seconds) {
    m_feedback_refresh_interval_in_seconds = feedback_refresh_interval_in_seconds;
    m_feedback_refresh_interval_in_seconds_isSet = true;
}

bool OAIFarmSettings::is_feedback_refresh_interval_in_seconds_Set() const{
    return m_feedback_refresh_interval_in_seconds_isSet;
}

bool OAIFarmSettings::is_feedback_refresh_interval_in_seconds_Valid() const{
    return m_feedback_refresh_interval_in_seconds_isValid;
}

qint32 OAIFarmSettings::getGracePeriodForFullThrottlingInRefreshIntervals() const {
    return m_grace_period_for_full_throttling_in_refresh_intervals;
}
void OAIFarmSettings::setGracePeriodForFullThrottlingInRefreshIntervals(const qint32 &grace_period_for_full_throttling_in_refresh_intervals) {
    m_grace_period_for_full_throttling_in_refresh_intervals = grace_period_for_full_throttling_in_refresh_intervals;
    m_grace_period_for_full_throttling_in_refresh_intervals_isSet = true;
}

bool OAIFarmSettings::is_grace_period_for_full_throttling_in_refresh_intervals_Set() const{
    return m_grace_period_for_full_throttling_in_refresh_intervals_isSet;
}

bool OAIFarmSettings::is_grace_period_for_full_throttling_in_refresh_intervals_Valid() const{
    return m_grace_period_for_full_throttling_in_refresh_intervals_isValid;
}

float OAIFarmSettings::getGracePeriodMaxThrottleProbability() const {
    return m_grace_period_max_throttle_probability;
}
void OAIFarmSettings::setGracePeriodMaxThrottleProbability(const float &grace_period_max_throttle_probability) {
    m_grace_period_max_throttle_probability = grace_period_max_throttle_probability;
    m_grace_period_max_throttle_probability_isSet = true;
}

bool OAIFarmSettings::is_grace_period_max_throttle_probability_Set() const{
    return m_grace_period_max_throttle_probability_isSet;
}

bool OAIFarmSettings::is_grace_period_max_throttle_probability_Valid() const{
    return m_grace_period_max_throttle_probability_isValid;
}

qint32 OAIFarmSettings::getHostStyleHttpPort() const {
    return m_host_style_http_port;
}
void OAIFarmSettings::setHostStyleHttpPort(const qint32 &host_style_http_port) {
    m_host_style_http_port = host_style_http_port;
    m_host_style_http_port_isSet = true;
}

bool OAIFarmSettings::is_host_style_http_port_Set() const{
    return m_host_style_http_port_isSet;
}

bool OAIFarmSettings::is_host_style_http_port_Valid() const{
    return m_host_style_http_port_isValid;
}

qint32 OAIFarmSettings::getHostStyleHttpsPort() const {
    return m_host_style_https_port;
}
void OAIFarmSettings::setHostStyleHttpsPort(const qint32 &host_style_https_port) {
    m_host_style_https_port = host_style_https_port;
    m_host_style_https_port_isSet = true;
}

bool OAIFarmSettings::is_host_style_https_port_Set() const{
    return m_host_style_https_port_isSet;
}

bool OAIFarmSettings::is_host_style_https_port_Valid() const{
    return m_host_style_https_port_isValid;
}

float OAIFarmSettings::getMinimumEgressThresholdInGbps() const {
    return m_minimum_egress_threshold_in_gbps;
}
void OAIFarmSettings::setMinimumEgressThresholdInGbps(const float &minimum_egress_threshold_in_gbps) {
    m_minimum_egress_threshold_in_gbps = minimum_egress_threshold_in_gbps;
    m_minimum_egress_threshold_in_gbps_isSet = true;
}

bool OAIFarmSettings::is_minimum_egress_threshold_in_gbps_Set() const{
    return m_minimum_egress_threshold_in_gbps_isSet;
}

bool OAIFarmSettings::is_minimum_egress_threshold_in_gbps_Valid() const{
    return m_minimum_egress_threshold_in_gbps_isValid;
}

float OAIFarmSettings::getMinimumIngressThresholdInGbps() const {
    return m_minimum_ingress_threshold_in_gbps;
}
void OAIFarmSettings::setMinimumIngressThresholdInGbps(const float &minimum_ingress_threshold_in_gbps) {
    m_minimum_ingress_threshold_in_gbps = minimum_ingress_threshold_in_gbps;
    m_minimum_ingress_threshold_in_gbps_isSet = true;
}

bool OAIFarmSettings::is_minimum_ingress_threshold_in_gbps_Set() const{
    return m_minimum_ingress_threshold_in_gbps_isSet;
}

bool OAIFarmSettings::is_minimum_ingress_threshold_in_gbps_Valid() const{
    return m_minimum_ingress_threshold_in_gbps_isValid;
}

float OAIFarmSettings::getMinimumIntranetEgressThresholdInGbps() const {
    return m_minimum_intranet_egress_threshold_in_gbps;
}
void OAIFarmSettings::setMinimumIntranetEgressThresholdInGbps(const float &minimum_intranet_egress_threshold_in_gbps) {
    m_minimum_intranet_egress_threshold_in_gbps = minimum_intranet_egress_threshold_in_gbps;
    m_minimum_intranet_egress_threshold_in_gbps_isSet = true;
}

bool OAIFarmSettings::is_minimum_intranet_egress_threshold_in_gbps_Set() const{
    return m_minimum_intranet_egress_threshold_in_gbps_isSet;
}

bool OAIFarmSettings::is_minimum_intranet_egress_threshold_in_gbps_Valid() const{
    return m_minimum_intranet_egress_threshold_in_gbps_isValid;
}

float OAIFarmSettings::getMinimumIntranetIngressThresholdInGbps() const {
    return m_minimum_intranet_ingress_threshold_in_gbps;
}
void OAIFarmSettings::setMinimumIntranetIngressThresholdInGbps(const float &minimum_intranet_ingress_threshold_in_gbps) {
    m_minimum_intranet_ingress_threshold_in_gbps = minimum_intranet_ingress_threshold_in_gbps;
    m_minimum_intranet_ingress_threshold_in_gbps_isSet = true;
}

bool OAIFarmSettings::is_minimum_intranet_ingress_threshold_in_gbps_Set() const{
    return m_minimum_intranet_ingress_threshold_in_gbps_isSet;
}

bool OAIFarmSettings::is_minimum_intranet_ingress_threshold_in_gbps_Valid() const{
    return m_minimum_intranet_ingress_threshold_in_gbps_isValid;
}

float OAIFarmSettings::getMinimumRequestThresholdInTps() const {
    return m_minimum_request_threshold_in_tps;
}
void OAIFarmSettings::setMinimumRequestThresholdInTps(const float &minimum_request_threshold_in_tps) {
    m_minimum_request_threshold_in_tps = minimum_request_threshold_in_tps;
    m_minimum_request_threshold_in_tps_isSet = true;
}

bool OAIFarmSettings::is_minimum_request_threshold_in_tps_Set() const{
    return m_minimum_request_threshold_in_tps_isSet;
}

bool OAIFarmSettings::is_minimum_request_threshold_in_tps_Valid() const{
    return m_minimum_request_threshold_in_tps_isValid;
}

float OAIFarmSettings::getMinimumTotalEgressThresholdInGbps() const {
    return m_minimum_total_egress_threshold_in_gbps;
}
void OAIFarmSettings::setMinimumTotalEgressThresholdInGbps(const float &minimum_total_egress_threshold_in_gbps) {
    m_minimum_total_egress_threshold_in_gbps = minimum_total_egress_threshold_in_gbps;
    m_minimum_total_egress_threshold_in_gbps_isSet = true;
}

bool OAIFarmSettings::is_minimum_total_egress_threshold_in_gbps_Set() const{
    return m_minimum_total_egress_threshold_in_gbps_isSet;
}

bool OAIFarmSettings::is_minimum_total_egress_threshold_in_gbps_Valid() const{
    return m_minimum_total_egress_threshold_in_gbps_isValid;
}

float OAIFarmSettings::getMinimumTotalIngressThresholdInGbps() const {
    return m_minimum_total_ingress_threshold_in_gbps;
}
void OAIFarmSettings::setMinimumTotalIngressThresholdInGbps(const float &minimum_total_ingress_threshold_in_gbps) {
    m_minimum_total_ingress_threshold_in_gbps = minimum_total_ingress_threshold_in_gbps;
    m_minimum_total_ingress_threshold_in_gbps_isSet = true;
}

bool OAIFarmSettings::is_minimum_total_ingress_threshold_in_gbps_Set() const{
    return m_minimum_total_ingress_threshold_in_gbps_isSet;
}

bool OAIFarmSettings::is_minimum_total_ingress_threshold_in_gbps_Valid() const{
    return m_minimum_total_ingress_threshold_in_gbps_isValid;
}

qint32 OAIFarmSettings::getNumberOfAccountsToSync() const {
    return m_number_of_accounts_to_sync;
}
void OAIFarmSettings::setNumberOfAccountsToSync(const qint32 &number_of_accounts_to_sync) {
    m_number_of_accounts_to_sync = number_of_accounts_to_sync;
    m_number_of_accounts_to_sync_isSet = true;
}

bool OAIFarmSettings::is_number_of_accounts_to_sync_Set() const{
    return m_number_of_accounts_to_sync_isSet;
}

bool OAIFarmSettings::is_number_of_accounts_to_sync_Valid() const{
    return m_number_of_accounts_to_sync_isValid;
}

float OAIFarmSettings::getOverallEgressThresholdInGbps() const {
    return m_overall_egress_threshold_in_gbps;
}
void OAIFarmSettings::setOverallEgressThresholdInGbps(const float &overall_egress_threshold_in_gbps) {
    m_overall_egress_threshold_in_gbps = overall_egress_threshold_in_gbps;
    m_overall_egress_threshold_in_gbps_isSet = true;
}

bool OAIFarmSettings::is_overall_egress_threshold_in_gbps_Set() const{
    return m_overall_egress_threshold_in_gbps_isSet;
}

bool OAIFarmSettings::is_overall_egress_threshold_in_gbps_Valid() const{
    return m_overall_egress_threshold_in_gbps_isValid;
}

float OAIFarmSettings::getOverallIngressThresholdInGbps() const {
    return m_overall_ingress_threshold_in_gbps;
}
void OAIFarmSettings::setOverallIngressThresholdInGbps(const float &overall_ingress_threshold_in_gbps) {
    m_overall_ingress_threshold_in_gbps = overall_ingress_threshold_in_gbps;
    m_overall_ingress_threshold_in_gbps_isSet = true;
}

bool OAIFarmSettings::is_overall_ingress_threshold_in_gbps_Set() const{
    return m_overall_ingress_threshold_in_gbps_isSet;
}

bool OAIFarmSettings::is_overall_ingress_threshold_in_gbps_Valid() const{
    return m_overall_ingress_threshold_in_gbps_isValid;
}

float OAIFarmSettings::getOverallIntranetEgressThresholdInGbps() const {
    return m_overall_intranet_egress_threshold_in_gbps;
}
void OAIFarmSettings::setOverallIntranetEgressThresholdInGbps(const float &overall_intranet_egress_threshold_in_gbps) {
    m_overall_intranet_egress_threshold_in_gbps = overall_intranet_egress_threshold_in_gbps;
    m_overall_intranet_egress_threshold_in_gbps_isSet = true;
}

bool OAIFarmSettings::is_overall_intranet_egress_threshold_in_gbps_Set() const{
    return m_overall_intranet_egress_threshold_in_gbps_isSet;
}

bool OAIFarmSettings::is_overall_intranet_egress_threshold_in_gbps_Valid() const{
    return m_overall_intranet_egress_threshold_in_gbps_isValid;
}

float OAIFarmSettings::getOverallIntranetIngressThresholdInGbps() const {
    return m_overall_intranet_ingress_threshold_in_gbps;
}
void OAIFarmSettings::setOverallIntranetIngressThresholdInGbps(const float &overall_intranet_ingress_threshold_in_gbps) {
    m_overall_intranet_ingress_threshold_in_gbps = overall_intranet_ingress_threshold_in_gbps;
    m_overall_intranet_ingress_threshold_in_gbps_isSet = true;
}

bool OAIFarmSettings::is_overall_intranet_ingress_threshold_in_gbps_Set() const{
    return m_overall_intranet_ingress_threshold_in_gbps_isSet;
}

bool OAIFarmSettings::is_overall_intranet_ingress_threshold_in_gbps_Valid() const{
    return m_overall_intranet_ingress_threshold_in_gbps_isValid;
}

float OAIFarmSettings::getOverallRequestThresholdInTps() const {
    return m_overall_request_threshold_in_tps;
}
void OAIFarmSettings::setOverallRequestThresholdInTps(const float &overall_request_threshold_in_tps) {
    m_overall_request_threshold_in_tps = overall_request_threshold_in_tps;
    m_overall_request_threshold_in_tps_isSet = true;
}

bool OAIFarmSettings::is_overall_request_threshold_in_tps_Set() const{
    return m_overall_request_threshold_in_tps_isSet;
}

bool OAIFarmSettings::is_overall_request_threshold_in_tps_Valid() const{
    return m_overall_request_threshold_in_tps_isValid;
}

float OAIFarmSettings::getOverallTotalEgressThresholdInGbps() const {
    return m_overall_total_egress_threshold_in_gbps;
}
void OAIFarmSettings::setOverallTotalEgressThresholdInGbps(const float &overall_total_egress_threshold_in_gbps) {
    m_overall_total_egress_threshold_in_gbps = overall_total_egress_threshold_in_gbps;
    m_overall_total_egress_threshold_in_gbps_isSet = true;
}

bool OAIFarmSettings::is_overall_total_egress_threshold_in_gbps_Set() const{
    return m_overall_total_egress_threshold_in_gbps_isSet;
}

bool OAIFarmSettings::is_overall_total_egress_threshold_in_gbps_Valid() const{
    return m_overall_total_egress_threshold_in_gbps_isValid;
}

float OAIFarmSettings::getOverallTotalIngressThresholdInGbps() const {
    return m_overall_total_ingress_threshold_in_gbps;
}
void OAIFarmSettings::setOverallTotalIngressThresholdInGbps(const float &overall_total_ingress_threshold_in_gbps) {
    m_overall_total_ingress_threshold_in_gbps = overall_total_ingress_threshold_in_gbps;
    m_overall_total_ingress_threshold_in_gbps_isSet = true;
}

bool OAIFarmSettings::is_overall_total_ingress_threshold_in_gbps_Set() const{
    return m_overall_total_ingress_threshold_in_gbps_isSet;
}

bool OAIFarmSettings::is_overall_total_ingress_threshold_in_gbps_Valid() const{
    return m_overall_total_ingress_threshold_in_gbps_isValid;
}

qint32 OAIFarmSettings::getRetentionPeriodForDeletedStorageAccountsInDays() const {
    return m_retention_period_for_deleted_storage_accounts_in_days;
}
void OAIFarmSettings::setRetentionPeriodForDeletedStorageAccountsInDays(const qint32 &retention_period_for_deleted_storage_accounts_in_days) {
    m_retention_period_for_deleted_storage_accounts_in_days = retention_period_for_deleted_storage_accounts_in_days;
    m_retention_period_for_deleted_storage_accounts_in_days_isSet = true;
}

bool OAIFarmSettings::is_retention_period_for_deleted_storage_accounts_in_days_Set() const{
    return m_retention_period_for_deleted_storage_accounts_in_days_isSet;
}

bool OAIFarmSettings::is_retention_period_for_deleted_storage_accounts_in_days_Valid() const{
    return m_retention_period_for_deleted_storage_accounts_in_days_isValid;
}

qint32 OAIFarmSettings::getSettingsPollingIntervalInSecond() const {
    return m_settings_polling_interval_in_second;
}
void OAIFarmSettings::setSettingsPollingIntervalInSecond(const qint32 &settings_polling_interval_in_second) {
    m_settings_polling_interval_in_second = settings_polling_interval_in_second;
    m_settings_polling_interval_in_second_isSet = true;
}

bool OAIFarmSettings::is_settings_polling_interval_in_second_Set() const{
    return m_settings_polling_interval_in_second_isSet;
}

bool OAIFarmSettings::is_settings_polling_interval_in_second_Valid() const{
    return m_settings_polling_interval_in_second_isValid;
}

float OAIFarmSettings::getToleranceFactorForEgress() const {
    return m_tolerance_factor_for_egress;
}
void OAIFarmSettings::setToleranceFactorForEgress(const float &tolerance_factor_for_egress) {
    m_tolerance_factor_for_egress = tolerance_factor_for_egress;
    m_tolerance_factor_for_egress_isSet = true;
}

bool OAIFarmSettings::is_tolerance_factor_for_egress_Set() const{
    return m_tolerance_factor_for_egress_isSet;
}

bool OAIFarmSettings::is_tolerance_factor_for_egress_Valid() const{
    return m_tolerance_factor_for_egress_isValid;
}

float OAIFarmSettings::getToleranceFactorForIngress() const {
    return m_tolerance_factor_for_ingress;
}
void OAIFarmSettings::setToleranceFactorForIngress(const float &tolerance_factor_for_ingress) {
    m_tolerance_factor_for_ingress = tolerance_factor_for_ingress;
    m_tolerance_factor_for_ingress_isSet = true;
}

bool OAIFarmSettings::is_tolerance_factor_for_ingress_Set() const{
    return m_tolerance_factor_for_ingress_isSet;
}

bool OAIFarmSettings::is_tolerance_factor_for_ingress_Valid() const{
    return m_tolerance_factor_for_ingress_isValid;
}

float OAIFarmSettings::getToleranceFactorForIntranetEgress() const {
    return m_tolerance_factor_for_intranet_egress;
}
void OAIFarmSettings::setToleranceFactorForIntranetEgress(const float &tolerance_factor_for_intranet_egress) {
    m_tolerance_factor_for_intranet_egress = tolerance_factor_for_intranet_egress;
    m_tolerance_factor_for_intranet_egress_isSet = true;
}

bool OAIFarmSettings::is_tolerance_factor_for_intranet_egress_Set() const{
    return m_tolerance_factor_for_intranet_egress_isSet;
}

bool OAIFarmSettings::is_tolerance_factor_for_intranet_egress_Valid() const{
    return m_tolerance_factor_for_intranet_egress_isValid;
}

float OAIFarmSettings::getToleranceFactorForIntranetIngress() const {
    return m_tolerance_factor_for_intranet_ingress;
}
void OAIFarmSettings::setToleranceFactorForIntranetIngress(const float &tolerance_factor_for_intranet_ingress) {
    m_tolerance_factor_for_intranet_ingress = tolerance_factor_for_intranet_ingress;
    m_tolerance_factor_for_intranet_ingress_isSet = true;
}

bool OAIFarmSettings::is_tolerance_factor_for_intranet_ingress_Set() const{
    return m_tolerance_factor_for_intranet_ingress_isSet;
}

bool OAIFarmSettings::is_tolerance_factor_for_intranet_ingress_Valid() const{
    return m_tolerance_factor_for_intranet_ingress_isValid;
}

float OAIFarmSettings::getToleranceFactorForTotalEgress() const {
    return m_tolerance_factor_for_total_egress;
}
void OAIFarmSettings::setToleranceFactorForTotalEgress(const float &tolerance_factor_for_total_egress) {
    m_tolerance_factor_for_total_egress = tolerance_factor_for_total_egress;
    m_tolerance_factor_for_total_egress_isSet = true;
}

bool OAIFarmSettings::is_tolerance_factor_for_total_egress_Set() const{
    return m_tolerance_factor_for_total_egress_isSet;
}

bool OAIFarmSettings::is_tolerance_factor_for_total_egress_Valid() const{
    return m_tolerance_factor_for_total_egress_isValid;
}

float OAIFarmSettings::getToleranceFactorForTotalIngress() const {
    return m_tolerance_factor_for_total_ingress;
}
void OAIFarmSettings::setToleranceFactorForTotalIngress(const float &tolerance_factor_for_total_ingress) {
    m_tolerance_factor_for_total_ingress = tolerance_factor_for_total_ingress;
    m_tolerance_factor_for_total_ingress_isSet = true;
}

bool OAIFarmSettings::is_tolerance_factor_for_total_ingress_Set() const{
    return m_tolerance_factor_for_total_ingress_isSet;
}

bool OAIFarmSettings::is_tolerance_factor_for_total_ingress_Valid() const{
    return m_tolerance_factor_for_total_ingress_isValid;
}

float OAIFarmSettings::getToleranceFactorForTps() const {
    return m_tolerance_factor_for_tps;
}
void OAIFarmSettings::setToleranceFactorForTps(const float &tolerance_factor_for_tps) {
    m_tolerance_factor_for_tps = tolerance_factor_for_tps;
    m_tolerance_factor_for_tps_isSet = true;
}

bool OAIFarmSettings::is_tolerance_factor_for_tps_Set() const{
    return m_tolerance_factor_for_tps_isSet;
}

bool OAIFarmSettings::is_tolerance_factor_for_tps_Valid() const{
    return m_tolerance_factor_for_tps_isValid;
}

qint32 OAIFarmSettings::getUsageCollectionIntervalInSeconds() const {
    return m_usage_collection_interval_in_seconds;
}
void OAIFarmSettings::setUsageCollectionIntervalInSeconds(const qint32 &usage_collection_interval_in_seconds) {
    m_usage_collection_interval_in_seconds = usage_collection_interval_in_seconds;
    m_usage_collection_interval_in_seconds_isSet = true;
}

bool OAIFarmSettings::is_usage_collection_interval_in_seconds_Set() const{
    return m_usage_collection_interval_in_seconds_isSet;
}

bool OAIFarmSettings::is_usage_collection_interval_in_seconds_Valid() const{
    return m_usage_collection_interval_in_seconds_isValid;
}

bool OAIFarmSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bandwidth_throttle_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cors_allowed_origins_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_center_uri_host_suffixes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_egress_threshold_in_gbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_ingress_threshold_in_gbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_intranet_egress_threshold_in_gbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_intranet_ingress_threshold_in_gbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_request_threshold_in_tps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_throttle_probability_decay_interval_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_total_egress_threshold_in_gbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_total_ingress_threshold_in_gbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feedback_refresh_interval_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grace_period_for_full_throttling_in_refresh_intervals_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grace_period_max_throttle_probability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_style_http_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_style_https_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_egress_threshold_in_gbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_ingress_threshold_in_gbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_intranet_egress_threshold_in_gbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_intranet_ingress_threshold_in_gbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_request_threshold_in_tps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_total_egress_threshold_in_gbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_total_ingress_threshold_in_gbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_accounts_to_sync_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_egress_threshold_in_gbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_ingress_threshold_in_gbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_intranet_egress_threshold_in_gbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_intranet_ingress_threshold_in_gbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_request_threshold_in_tps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_total_egress_threshold_in_gbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overall_total_ingress_threshold_in_gbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_period_for_deleted_storage_accounts_in_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings_polling_interval_in_second_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tolerance_factor_for_egress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tolerance_factor_for_ingress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tolerance_factor_for_intranet_egress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tolerance_factor_for_intranet_ingress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tolerance_factor_for_total_egress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tolerance_factor_for_total_ingress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tolerance_factor_for_tps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_collection_interval_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFarmSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
