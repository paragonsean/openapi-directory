/*
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Farm;
import org.openapitools.client.model.FarmCreationProperties;
import org.openapitools.client.model.FarmList;
import org.openapitools.client.model.FarmsListMetricDefinitions200Response;
import org.openapitools.client.model.FarmsListMetrics200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FarmsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FarmsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FarmsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for farmsCreate
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @param farmObject Parameters used to create a farm (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The new storage farm has been created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call farmsCreateCall(String subscriptionId, String resourceGroupName, String farmId, String apiVersion, FarmCreationProperties farmObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = farmObject;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "farmId" + "}", localVarApiClient.escapeString(farmId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call farmsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String farmId, String apiVersion, FarmCreationProperties farmObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling farmsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling farmsCreate(Async)");
        }

        // verify the required parameter 'farmId' is set
        if (farmId == null) {
            throw new ApiException("Missing the required parameter 'farmId' when calling farmsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling farmsCreate(Async)");
        }

        // verify the required parameter 'farmObject' is set
        if (farmObject == null) {
            throw new ApiException("Missing the required parameter 'farmObject' when calling farmsCreate(Async)");
        }

        return farmsCreateCall(subscriptionId, resourceGroupName, farmId, apiVersion, farmObject, _callback);

    }

    /**
     * 
     * Create a new storage farm.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @param farmObject Parameters used to create a farm (required)
     * @return Farm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The new storage farm has been created. </td><td>  -  </td></tr>
     </table>
     */
    public Farm farmsCreate(String subscriptionId, String resourceGroupName, String farmId, String apiVersion, FarmCreationProperties farmObject) throws ApiException {
        ApiResponse<Farm> localVarResp = farmsCreateWithHttpInfo(subscriptionId, resourceGroupName, farmId, apiVersion, farmObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new storage farm.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @param farmObject Parameters used to create a farm (required)
     * @return ApiResponse&lt;Farm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The new storage farm has been created. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Farm> farmsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String farmId, String apiVersion, FarmCreationProperties farmObject) throws ApiException {
        okhttp3.Call localVarCall = farmsCreateValidateBeforeCall(subscriptionId, resourceGroupName, farmId, apiVersion, farmObject, null);
        Type localVarReturnType = new TypeToken<Farm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new storage farm.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @param farmObject Parameters used to create a farm (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The new storage farm has been created. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call farmsCreateAsync(String subscriptionId, String resourceGroupName, String farmId, String apiVersion, FarmCreationProperties farmObject, final ApiCallback<Farm> _callback) throws ApiException {

        okhttp3.Call localVarCall = farmsCreateValidateBeforeCall(subscriptionId, resourceGroupName, farmId, apiVersion, farmObject, _callback);
        Type localVarReturnType = new TypeToken<Farm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for farmsGet
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The farm has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call farmsGetCall(String subscriptionId, String resourceGroupName, String farmId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "farmId" + "}", localVarApiClient.escapeString(farmId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call farmsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String farmId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling farmsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling farmsGet(Async)");
        }

        // verify the required parameter 'farmId' is set
        if (farmId == null) {
            throw new ApiException("Missing the required parameter 'farmId' when calling farmsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling farmsGet(Async)");
        }

        return farmsGetCall(subscriptionId, resourceGroupName, farmId, apiVersion, _callback);

    }

    /**
     * 
     * Returns the Storage properties and settings for a specified storage farm.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @return Farm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The farm has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public Farm farmsGet(String subscriptionId, String resourceGroupName, String farmId, String apiVersion) throws ApiException {
        ApiResponse<Farm> localVarResp = farmsGetWithHttpInfo(subscriptionId, resourceGroupName, farmId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the Storage properties and settings for a specified storage farm.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @return ApiResponse&lt;Farm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The farm has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Farm> farmsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String farmId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = farmsGetValidateBeforeCall(subscriptionId, resourceGroupName, farmId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Farm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the Storage properties and settings for a specified storage farm.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The farm has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call farmsGetAsync(String subscriptionId, String resourceGroupName, String farmId, String apiVersion, final ApiCallback<Farm> _callback) throws ApiException {

        okhttp3.Call localVarCall = farmsGetValidateBeforeCall(subscriptionId, resourceGroupName, farmId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Farm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for farmsList
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param apiVersion REST Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of storage farms has been returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call farmsListCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call farmsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling farmsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling farmsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling farmsList(Async)");
        }

        return farmsListCall(subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * Returns a list of all storage farms.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param apiVersion REST Api Version. (required)
     * @return FarmList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of storage farms has been returned. </td><td>  -  </td></tr>
     </table>
     */
    public FarmList farmsList(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<FarmList> localVarResp = farmsListWithHttpInfo(subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of all storage farms.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param apiVersion REST Api Version. (required)
     * @return ApiResponse&lt;FarmList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of storage farms has been returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FarmList> farmsListWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = farmsListValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<FarmList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of all storage farms.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param apiVersion REST Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of storage farms has been returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call farmsListAsync(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<FarmList> _callback) throws ApiException {

        okhttp3.Call localVarCall = farmsListValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<FarmList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for farmsListMetricDefinitions
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of metric definitions has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call farmsListMetricDefinitionsCall(String subscriptionId, String resourceGroupName, String farmId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/metricdefinitions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "farmId" + "}", localVarApiClient.escapeString(farmId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call farmsListMetricDefinitionsValidateBeforeCall(String subscriptionId, String resourceGroupName, String farmId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling farmsListMetricDefinitions(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling farmsListMetricDefinitions(Async)");
        }

        // verify the required parameter 'farmId' is set
        if (farmId == null) {
            throw new ApiException("Missing the required parameter 'farmId' when calling farmsListMetricDefinitions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling farmsListMetricDefinitions(Async)");
        }

        return farmsListMetricDefinitionsCall(subscriptionId, resourceGroupName, farmId, apiVersion, _callback);

    }

    /**
     * 
     * Returns a list of metric definitions for a storage farm.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @return FarmsListMetricDefinitions200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of metric definitions has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public FarmsListMetricDefinitions200Response farmsListMetricDefinitions(String subscriptionId, String resourceGroupName, String farmId, String apiVersion) throws ApiException {
        ApiResponse<FarmsListMetricDefinitions200Response> localVarResp = farmsListMetricDefinitionsWithHttpInfo(subscriptionId, resourceGroupName, farmId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of metric definitions for a storage farm.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @return ApiResponse&lt;FarmsListMetricDefinitions200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of metric definitions has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FarmsListMetricDefinitions200Response> farmsListMetricDefinitionsWithHttpInfo(String subscriptionId, String resourceGroupName, String farmId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = farmsListMetricDefinitionsValidateBeforeCall(subscriptionId, resourceGroupName, farmId, apiVersion, null);
        Type localVarReturnType = new TypeToken<FarmsListMetricDefinitions200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of metric definitions for a storage farm.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of metric definitions has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call farmsListMetricDefinitionsAsync(String subscriptionId, String resourceGroupName, String farmId, String apiVersion, final ApiCallback<FarmsListMetricDefinitions200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = farmsListMetricDefinitionsValidateBeforeCall(subscriptionId, resourceGroupName, farmId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<FarmsListMetricDefinitions200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for farmsListMetrics
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of metrics has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call farmsListMetricsCall(String subscriptionId, String resourceGroupName, String farmId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/metrics"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "farmId" + "}", localVarApiClient.escapeString(farmId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call farmsListMetricsValidateBeforeCall(String subscriptionId, String resourceGroupName, String farmId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling farmsListMetrics(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling farmsListMetrics(Async)");
        }

        // verify the required parameter 'farmId' is set
        if (farmId == null) {
            throw new ApiException("Missing the required parameter 'farmId' when calling farmsListMetrics(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling farmsListMetrics(Async)");
        }

        return farmsListMetricsCall(subscriptionId, resourceGroupName, farmId, apiVersion, _callback);

    }

    /**
     * 
     * Returns a list of storage farm metrics.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @return FarmsListMetrics200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of metrics has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public FarmsListMetrics200Response farmsListMetrics(String subscriptionId, String resourceGroupName, String farmId, String apiVersion) throws ApiException {
        ApiResponse<FarmsListMetrics200Response> localVarResp = farmsListMetricsWithHttpInfo(subscriptionId, resourceGroupName, farmId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of storage farm metrics.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @return ApiResponse&lt;FarmsListMetrics200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of metrics has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FarmsListMetrics200Response> farmsListMetricsWithHttpInfo(String subscriptionId, String resourceGroupName, String farmId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = farmsListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, farmId, apiVersion, null);
        Type localVarReturnType = new TypeToken<FarmsListMetrics200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of storage farm metrics.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The list of metrics has been returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND -- The specified farm was not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call farmsListMetricsAsync(String subscriptionId, String resourceGroupName, String farmId, String apiVersion, final ApiCallback<FarmsListMetrics200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = farmsListMetricsValidateBeforeCall(subscriptionId, resourceGroupName, farmId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<FarmsListMetrics200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for farmsStartGarbageCollection
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Garbage collection has completed. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED -- Garbage collection has started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call farmsStartGarbageCollectionCall(String subscriptionId, String resourceGroupName, String farmId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}/ondemandgc"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "farmId" + "}", localVarApiClient.escapeString(farmId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call farmsStartGarbageCollectionValidateBeforeCall(String subscriptionId, String resourceGroupName, String farmId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling farmsStartGarbageCollection(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling farmsStartGarbageCollection(Async)");
        }

        // verify the required parameter 'farmId' is set
        if (farmId == null) {
            throw new ApiException("Missing the required parameter 'farmId' when calling farmsStartGarbageCollection(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling farmsStartGarbageCollection(Async)");
        }

        return farmsStartGarbageCollectionCall(subscriptionId, resourceGroupName, farmId, apiVersion, _callback);

    }

    /**
     * 
     * Start garbage collection on deleted storage objects.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Garbage collection has completed. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED -- Garbage collection has started. </td><td>  -  </td></tr>
     </table>
     */
    public void farmsStartGarbageCollection(String subscriptionId, String resourceGroupName, String farmId, String apiVersion) throws ApiException {
        farmsStartGarbageCollectionWithHttpInfo(subscriptionId, resourceGroupName, farmId, apiVersion);
    }

    /**
     * 
     * Start garbage collection on deleted storage objects.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Garbage collection has completed. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED -- Garbage collection has started. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> farmsStartGarbageCollectionWithHttpInfo(String subscriptionId, String resourceGroupName, String farmId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = farmsStartGarbageCollectionValidateBeforeCall(subscriptionId, resourceGroupName, farmId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Start garbage collection on deleted storage objects.
     * @param subscriptionId Subscription Id. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- Garbage collection has completed. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED -- Garbage collection has started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call farmsStartGarbageCollectionAsync(String subscriptionId, String resourceGroupName, String farmId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = farmsStartGarbageCollectionValidateBeforeCall(subscriptionId, resourceGroupName, farmId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for farmsUpdate
     * @param subscriptionId Subscription Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param farmObject Farm to update. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The properties and settings of storage farm have been updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call farmsUpdateCall(String subscriptionId, String apiVersion, String resourceGroupName, String farmId, Farm farmObject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = farmObject;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Storage.Admin/farms/{farmId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "farmId" + "}", localVarApiClient.escapeString(farmId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call farmsUpdateValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String farmId, Farm farmObject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling farmsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling farmsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling farmsUpdate(Async)");
        }

        // verify the required parameter 'farmId' is set
        if (farmId == null) {
            throw new ApiException("Missing the required parameter 'farmId' when calling farmsUpdate(Async)");
        }

        // verify the required parameter 'farmObject' is set
        if (farmObject == null) {
            throw new ApiException("Missing the required parameter 'farmObject' when calling farmsUpdate(Async)");
        }

        return farmsUpdateCall(subscriptionId, apiVersion, resourceGroupName, farmId, farmObject, _callback);

    }

    /**
     * 
     * Update an existing storage farm.
     * @param subscriptionId Subscription Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param farmObject Farm to update. (required)
     * @return Farm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The properties and settings of storage farm have been updated. </td><td>  -  </td></tr>
     </table>
     */
    public Farm farmsUpdate(String subscriptionId, String apiVersion, String resourceGroupName, String farmId, Farm farmObject) throws ApiException {
        ApiResponse<Farm> localVarResp = farmsUpdateWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, farmId, farmObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Update an existing storage farm.
     * @param subscriptionId Subscription Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param farmObject Farm to update. (required)
     * @return ApiResponse&lt;Farm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The properties and settings of storage farm have been updated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Farm> farmsUpdateWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String farmId, Farm farmObject) throws ApiException {
        okhttp3.Call localVarCall = farmsUpdateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, farmId, farmObject, null);
        Type localVarReturnType = new TypeToken<Farm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update an existing storage farm.
     * @param subscriptionId Subscription Id. (required)
     * @param apiVersion REST Api Version. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param farmId Farm Id. (required)
     * @param farmObject Farm to update. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK -- The properties and settings of storage farm have been updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call farmsUpdateAsync(String subscriptionId, String apiVersion, String resourceGroupName, String farmId, Farm farmObject, final ApiCallback<Farm> _callback) throws ApiException {

        okhttp3.Call localVarCall = farmsUpdateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, farmId, farmObject, _callback);
        Type localVarReturnType = new TypeToken<Farm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
