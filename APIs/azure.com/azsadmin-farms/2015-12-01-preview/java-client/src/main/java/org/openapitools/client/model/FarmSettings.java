/*
 * StorageManagementClient
 * The Admin Storage Management Client.
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Storage farm settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:45:20.553282-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FarmSettings {
  public static final String SERIALIZED_NAME_BANDWIDTH_THROTTLE_IS_ENABLED = "bandwidthThrottleIsEnabled";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_THROTTLE_IS_ENABLED)
  private Boolean bandwidthThrottleIsEnabled;

  public static final String SERIALIZED_NAME_CORS_ALLOWED_ORIGINS_LIST = "corsAllowedOriginsList";
  @SerializedName(SERIALIZED_NAME_CORS_ALLOWED_ORIGINS_LIST)
  private String corsAllowedOriginsList;

  public static final String SERIALIZED_NAME_DATA_CENTER_URI_HOST_SUFFIXES = "dataCenterUriHostSuffixes";
  @SerializedName(SERIALIZED_NAME_DATA_CENTER_URI_HOST_SUFFIXES)
  private String dataCenterUriHostSuffixes;

  public static final String SERIALIZED_NAME_DEFAULT_EGRESS_THRESHOLD_IN_GBPS = "defaultEgressThresholdInGbps";
  @SerializedName(SERIALIZED_NAME_DEFAULT_EGRESS_THRESHOLD_IN_GBPS)
  private Float defaultEgressThresholdInGbps;

  public static final String SERIALIZED_NAME_DEFAULT_INGRESS_THRESHOLD_IN_GBPS = "defaultIngressThresholdInGbps";
  @SerializedName(SERIALIZED_NAME_DEFAULT_INGRESS_THRESHOLD_IN_GBPS)
  private Float defaultIngressThresholdInGbps;

  public static final String SERIALIZED_NAME_DEFAULT_INTRANET_EGRESS_THRESHOLD_IN_GBPS = "defaultIntranetEgressThresholdInGbps";
  @SerializedName(SERIALIZED_NAME_DEFAULT_INTRANET_EGRESS_THRESHOLD_IN_GBPS)
  private Float defaultIntranetEgressThresholdInGbps;

  public static final String SERIALIZED_NAME_DEFAULT_INTRANET_INGRESS_THRESHOLD_IN_GBPS = "defaultIntranetIngressThresholdInGbps";
  @SerializedName(SERIALIZED_NAME_DEFAULT_INTRANET_INGRESS_THRESHOLD_IN_GBPS)
  private Float defaultIntranetIngressThresholdInGbps;

  public static final String SERIALIZED_NAME_DEFAULT_REQUEST_THRESHOLD_IN_TPS = "defaultRequestThresholdInTps";
  @SerializedName(SERIALIZED_NAME_DEFAULT_REQUEST_THRESHOLD_IN_TPS)
  private Float defaultRequestThresholdInTps;

  public static final String SERIALIZED_NAME_DEFAULT_THROTTLE_PROBABILITY_DECAY_INTERVAL_IN_SECONDS = "defaultThrottleProbabilityDecayIntervalInSeconds";
  @SerializedName(SERIALIZED_NAME_DEFAULT_THROTTLE_PROBABILITY_DECAY_INTERVAL_IN_SECONDS)
  private Integer defaultThrottleProbabilityDecayIntervalInSeconds;

  public static final String SERIALIZED_NAME_DEFAULT_TOTAL_EGRESS_THRESHOLD_IN_GBPS = "defaultTotalEgressThresholdInGbps";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TOTAL_EGRESS_THRESHOLD_IN_GBPS)
  private Float defaultTotalEgressThresholdInGbps;

  public static final String SERIALIZED_NAME_DEFAULT_TOTAL_INGRESS_THRESHOLD_IN_GBPS = "defaultTotalIngressThresholdInGbps";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TOTAL_INGRESS_THRESHOLD_IN_GBPS)
  private Float defaultTotalIngressThresholdInGbps;

  public static final String SERIALIZED_NAME_FEEDBACK_REFRESH_INTERVAL_IN_SECONDS = "feedbackRefreshIntervalInSeconds";
  @SerializedName(SERIALIZED_NAME_FEEDBACK_REFRESH_INTERVAL_IN_SECONDS)
  private Integer feedbackRefreshIntervalInSeconds;

  public static final String SERIALIZED_NAME_GRACE_PERIOD_FOR_FULL_THROTTLING_IN_REFRESH_INTERVALS = "gracePeriodForFullThrottlingInRefreshIntervals";
  @SerializedName(SERIALIZED_NAME_GRACE_PERIOD_FOR_FULL_THROTTLING_IN_REFRESH_INTERVALS)
  private Integer gracePeriodForFullThrottlingInRefreshIntervals;

  public static final String SERIALIZED_NAME_GRACE_PERIOD_MAX_THROTTLE_PROBABILITY = "gracePeriodMaxThrottleProbability";
  @SerializedName(SERIALIZED_NAME_GRACE_PERIOD_MAX_THROTTLE_PROBABILITY)
  private Float gracePeriodMaxThrottleProbability;

  public static final String SERIALIZED_NAME_HOST_STYLE_HTTP_PORT = "hostStyleHttpPort";
  @SerializedName(SERIALIZED_NAME_HOST_STYLE_HTTP_PORT)
  private Integer hostStyleHttpPort;

  public static final String SERIALIZED_NAME_HOST_STYLE_HTTPS_PORT = "hostStyleHttpsPort";
  @SerializedName(SERIALIZED_NAME_HOST_STYLE_HTTPS_PORT)
  private Integer hostStyleHttpsPort;

  public static final String SERIALIZED_NAME_MINIMUM_EGRESS_THRESHOLD_IN_GBPS = "minimumEgressThresholdInGbps";
  @SerializedName(SERIALIZED_NAME_MINIMUM_EGRESS_THRESHOLD_IN_GBPS)
  private Float minimumEgressThresholdInGbps;

  public static final String SERIALIZED_NAME_MINIMUM_INGRESS_THRESHOLD_IN_GBPS = "minimumIngressThresholdInGbps";
  @SerializedName(SERIALIZED_NAME_MINIMUM_INGRESS_THRESHOLD_IN_GBPS)
  private Float minimumIngressThresholdInGbps;

  public static final String SERIALIZED_NAME_MINIMUM_INTRANET_EGRESS_THRESHOLD_IN_GBPS = "minimumIntranetEgressThresholdInGbps";
  @SerializedName(SERIALIZED_NAME_MINIMUM_INTRANET_EGRESS_THRESHOLD_IN_GBPS)
  private Float minimumIntranetEgressThresholdInGbps;

  public static final String SERIALIZED_NAME_MINIMUM_INTRANET_INGRESS_THRESHOLD_IN_GBPS = "minimumIntranetIngressThresholdInGbps";
  @SerializedName(SERIALIZED_NAME_MINIMUM_INTRANET_INGRESS_THRESHOLD_IN_GBPS)
  private Float minimumIntranetIngressThresholdInGbps;

  public static final String SERIALIZED_NAME_MINIMUM_REQUEST_THRESHOLD_IN_TPS = "minimumRequestThresholdInTps";
  @SerializedName(SERIALIZED_NAME_MINIMUM_REQUEST_THRESHOLD_IN_TPS)
  private Float minimumRequestThresholdInTps;

  public static final String SERIALIZED_NAME_MINIMUM_TOTAL_EGRESS_THRESHOLD_IN_GBPS = "minimumTotalEgressThresholdInGbps";
  @SerializedName(SERIALIZED_NAME_MINIMUM_TOTAL_EGRESS_THRESHOLD_IN_GBPS)
  private Float minimumTotalEgressThresholdInGbps;

  public static final String SERIALIZED_NAME_MINIMUM_TOTAL_INGRESS_THRESHOLD_IN_GBPS = "minimumTotalIngressThresholdInGbps";
  @SerializedName(SERIALIZED_NAME_MINIMUM_TOTAL_INGRESS_THRESHOLD_IN_GBPS)
  private Float minimumTotalIngressThresholdInGbps;

  public static final String SERIALIZED_NAME_NUMBER_OF_ACCOUNTS_TO_SYNC = "numberOfAccountsToSync";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_ACCOUNTS_TO_SYNC)
  private Integer numberOfAccountsToSync;

  public static final String SERIALIZED_NAME_OVERALL_EGRESS_THRESHOLD_IN_GBPS = "overallEgressThresholdInGbps";
  @SerializedName(SERIALIZED_NAME_OVERALL_EGRESS_THRESHOLD_IN_GBPS)
  private Float overallEgressThresholdInGbps;

  public static final String SERIALIZED_NAME_OVERALL_INGRESS_THRESHOLD_IN_GBPS = "overallIngressThresholdInGbps";
  @SerializedName(SERIALIZED_NAME_OVERALL_INGRESS_THRESHOLD_IN_GBPS)
  private Float overallIngressThresholdInGbps;

  public static final String SERIALIZED_NAME_OVERALL_INTRANET_EGRESS_THRESHOLD_IN_GBPS = "overallIntranetEgressThresholdInGbps";
  @SerializedName(SERIALIZED_NAME_OVERALL_INTRANET_EGRESS_THRESHOLD_IN_GBPS)
  private Float overallIntranetEgressThresholdInGbps;

  public static final String SERIALIZED_NAME_OVERALL_INTRANET_INGRESS_THRESHOLD_IN_GBPS = "overallIntranetIngressThresholdInGbps";
  @SerializedName(SERIALIZED_NAME_OVERALL_INTRANET_INGRESS_THRESHOLD_IN_GBPS)
  private Float overallIntranetIngressThresholdInGbps;

  public static final String SERIALIZED_NAME_OVERALL_REQUEST_THRESHOLD_IN_TPS = "overallRequestThresholdInTps";
  @SerializedName(SERIALIZED_NAME_OVERALL_REQUEST_THRESHOLD_IN_TPS)
  private Float overallRequestThresholdInTps;

  public static final String SERIALIZED_NAME_OVERALL_TOTAL_EGRESS_THRESHOLD_IN_GBPS = "overallTotalEgressThresholdInGbps";
  @SerializedName(SERIALIZED_NAME_OVERALL_TOTAL_EGRESS_THRESHOLD_IN_GBPS)
  private Float overallTotalEgressThresholdInGbps;

  public static final String SERIALIZED_NAME_OVERALL_TOTAL_INGRESS_THRESHOLD_IN_GBPS = "overallTotalIngressThresholdInGbps";
  @SerializedName(SERIALIZED_NAME_OVERALL_TOTAL_INGRESS_THRESHOLD_IN_GBPS)
  private Float overallTotalIngressThresholdInGbps;

  public static final String SERIALIZED_NAME_RETENTION_PERIOD_FOR_DELETED_STORAGE_ACCOUNTS_IN_DAYS = "retentionPeriodForDeletedStorageAccountsInDays";
  @SerializedName(SERIALIZED_NAME_RETENTION_PERIOD_FOR_DELETED_STORAGE_ACCOUNTS_IN_DAYS)
  private Integer retentionPeriodForDeletedStorageAccountsInDays;

  public static final String SERIALIZED_NAME_SETTINGS_POLLING_INTERVAL_IN_SECOND = "settingsPollingIntervalInSecond";
  @SerializedName(SERIALIZED_NAME_SETTINGS_POLLING_INTERVAL_IN_SECOND)
  private Integer settingsPollingIntervalInSecond;

  public static final String SERIALIZED_NAME_TOLERANCE_FACTOR_FOR_EGRESS = "toleranceFactorForEgress";
  @SerializedName(SERIALIZED_NAME_TOLERANCE_FACTOR_FOR_EGRESS)
  private Float toleranceFactorForEgress;

  public static final String SERIALIZED_NAME_TOLERANCE_FACTOR_FOR_INGRESS = "toleranceFactorForIngress";
  @SerializedName(SERIALIZED_NAME_TOLERANCE_FACTOR_FOR_INGRESS)
  private Float toleranceFactorForIngress;

  public static final String SERIALIZED_NAME_TOLERANCE_FACTOR_FOR_INTRANET_EGRESS = "toleranceFactorForIntranetEgress";
  @SerializedName(SERIALIZED_NAME_TOLERANCE_FACTOR_FOR_INTRANET_EGRESS)
  private Float toleranceFactorForIntranetEgress;

  public static final String SERIALIZED_NAME_TOLERANCE_FACTOR_FOR_INTRANET_INGRESS = "toleranceFactorForIntranetIngress";
  @SerializedName(SERIALIZED_NAME_TOLERANCE_FACTOR_FOR_INTRANET_INGRESS)
  private Float toleranceFactorForIntranetIngress;

  public static final String SERIALIZED_NAME_TOLERANCE_FACTOR_FOR_TOTAL_EGRESS = "toleranceFactorForTotalEgress";
  @SerializedName(SERIALIZED_NAME_TOLERANCE_FACTOR_FOR_TOTAL_EGRESS)
  private Float toleranceFactorForTotalEgress;

  public static final String SERIALIZED_NAME_TOLERANCE_FACTOR_FOR_TOTAL_INGRESS = "toleranceFactorForTotalIngress";
  @SerializedName(SERIALIZED_NAME_TOLERANCE_FACTOR_FOR_TOTAL_INGRESS)
  private Float toleranceFactorForTotalIngress;

  public static final String SERIALIZED_NAME_TOLERANCE_FACTOR_FOR_TPS = "toleranceFactorForTps";
  @SerializedName(SERIALIZED_NAME_TOLERANCE_FACTOR_FOR_TPS)
  private Float toleranceFactorForTps;

  public static final String SERIALIZED_NAME_USAGE_COLLECTION_INTERVAL_IN_SECONDS = "usageCollectionIntervalInSeconds";
  @SerializedName(SERIALIZED_NAME_USAGE_COLLECTION_INTERVAL_IN_SECONDS)
  private Integer usageCollectionIntervalInSeconds;

  public FarmSettings() {
  }

  public FarmSettings bandwidthThrottleIsEnabled(Boolean bandwidthThrottleIsEnabled) {
    this.bandwidthThrottleIsEnabled = bandwidthThrottleIsEnabled;
    return this;
  }

  /**
   * Switch of bandwidth throttle enablement.
   * @return bandwidthThrottleIsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getBandwidthThrottleIsEnabled() {
    return bandwidthThrottleIsEnabled;
  }

  public void setBandwidthThrottleIsEnabled(Boolean bandwidthThrottleIsEnabled) {
    this.bandwidthThrottleIsEnabled = bandwidthThrottleIsEnabled;
  }


  public FarmSettings corsAllowedOriginsList(String corsAllowedOriginsList) {
    this.corsAllowedOriginsList = corsAllowedOriginsList;
    return this;
  }

  /**
   * The list of allowed origins.
   * @return corsAllowedOriginsList
   */
  @javax.annotation.Nullable
  public String getCorsAllowedOriginsList() {
    return corsAllowedOriginsList;
  }

  public void setCorsAllowedOriginsList(String corsAllowedOriginsList) {
    this.corsAllowedOriginsList = corsAllowedOriginsList;
  }


  public FarmSettings dataCenterUriHostSuffixes(String dataCenterUriHostSuffixes) {
    this.dataCenterUriHostSuffixes = dataCenterUriHostSuffixes;
    return this;
  }

  /**
   * The suffixes of URI of hosts in data center.
   * @return dataCenterUriHostSuffixes
   */
  @javax.annotation.Nullable
  public String getDataCenterUriHostSuffixes() {
    return dataCenterUriHostSuffixes;
  }

  public void setDataCenterUriHostSuffixes(String dataCenterUriHostSuffixes) {
    this.dataCenterUriHostSuffixes = dataCenterUriHostSuffixes;
  }


  public FarmSettings defaultEgressThresholdInGbps(Float defaultEgressThresholdInGbps) {
    this.defaultEgressThresholdInGbps = defaultEgressThresholdInGbps;
    return this;
  }

  /**
   * Default egress threshold (in Gbps).
   * @return defaultEgressThresholdInGbps
   */
  @javax.annotation.Nullable
  public Float getDefaultEgressThresholdInGbps() {
    return defaultEgressThresholdInGbps;
  }

  public void setDefaultEgressThresholdInGbps(Float defaultEgressThresholdInGbps) {
    this.defaultEgressThresholdInGbps = defaultEgressThresholdInGbps;
  }


  public FarmSettings defaultIngressThresholdInGbps(Float defaultIngressThresholdInGbps) {
    this.defaultIngressThresholdInGbps = defaultIngressThresholdInGbps;
    return this;
  }

  /**
   * Default ingress threshold (in Gbps).
   * @return defaultIngressThresholdInGbps
   */
  @javax.annotation.Nullable
  public Float getDefaultIngressThresholdInGbps() {
    return defaultIngressThresholdInGbps;
  }

  public void setDefaultIngressThresholdInGbps(Float defaultIngressThresholdInGbps) {
    this.defaultIngressThresholdInGbps = defaultIngressThresholdInGbps;
  }


  public FarmSettings defaultIntranetEgressThresholdInGbps(Float defaultIntranetEgressThresholdInGbps) {
    this.defaultIntranetEgressThresholdInGbps = defaultIntranetEgressThresholdInGbps;
    return this;
  }

  /**
   * Default Intranet egress threshold (in Gbps).
   * @return defaultIntranetEgressThresholdInGbps
   */
  @javax.annotation.Nullable
  public Float getDefaultIntranetEgressThresholdInGbps() {
    return defaultIntranetEgressThresholdInGbps;
  }

  public void setDefaultIntranetEgressThresholdInGbps(Float defaultIntranetEgressThresholdInGbps) {
    this.defaultIntranetEgressThresholdInGbps = defaultIntranetEgressThresholdInGbps;
  }


  public FarmSettings defaultIntranetIngressThresholdInGbps(Float defaultIntranetIngressThresholdInGbps) {
    this.defaultIntranetIngressThresholdInGbps = defaultIntranetIngressThresholdInGbps;
    return this;
  }

  /**
   * Default Intranet ingress threshold (in Gbps).
   * @return defaultIntranetIngressThresholdInGbps
   */
  @javax.annotation.Nullable
  public Float getDefaultIntranetIngressThresholdInGbps() {
    return defaultIntranetIngressThresholdInGbps;
  }

  public void setDefaultIntranetIngressThresholdInGbps(Float defaultIntranetIngressThresholdInGbps) {
    this.defaultIntranetIngressThresholdInGbps = defaultIntranetIngressThresholdInGbps;
  }


  public FarmSettings defaultRequestThresholdInTps(Float defaultRequestThresholdInTps) {
    this.defaultRequestThresholdInTps = defaultRequestThresholdInTps;
    return this;
  }

  /**
   * Default request threshold (in TPS).
   * @return defaultRequestThresholdInTps
   */
  @javax.annotation.Nullable
  public Float getDefaultRequestThresholdInTps() {
    return defaultRequestThresholdInTps;
  }

  public void setDefaultRequestThresholdInTps(Float defaultRequestThresholdInTps) {
    this.defaultRequestThresholdInTps = defaultRequestThresholdInTps;
  }


  public FarmSettings defaultThrottleProbabilityDecayIntervalInSeconds(Integer defaultThrottleProbabilityDecayIntervalInSeconds) {
    this.defaultThrottleProbabilityDecayIntervalInSeconds = defaultThrottleProbabilityDecayIntervalInSeconds;
    return this;
  }

  /**
   * Interval (in seconds) of default throttle probability decay.
   * @return defaultThrottleProbabilityDecayIntervalInSeconds
   */
  @javax.annotation.Nullable
  public Integer getDefaultThrottleProbabilityDecayIntervalInSeconds() {
    return defaultThrottleProbabilityDecayIntervalInSeconds;
  }

  public void setDefaultThrottleProbabilityDecayIntervalInSeconds(Integer defaultThrottleProbabilityDecayIntervalInSeconds) {
    this.defaultThrottleProbabilityDecayIntervalInSeconds = defaultThrottleProbabilityDecayIntervalInSeconds;
  }


  public FarmSettings defaultTotalEgressThresholdInGbps(Float defaultTotalEgressThresholdInGbps) {
    this.defaultTotalEgressThresholdInGbps = defaultTotalEgressThresholdInGbps;
    return this;
  }

  /**
   * Default total egress threshold (in Gbps).
   * @return defaultTotalEgressThresholdInGbps
   */
  @javax.annotation.Nullable
  public Float getDefaultTotalEgressThresholdInGbps() {
    return defaultTotalEgressThresholdInGbps;
  }

  public void setDefaultTotalEgressThresholdInGbps(Float defaultTotalEgressThresholdInGbps) {
    this.defaultTotalEgressThresholdInGbps = defaultTotalEgressThresholdInGbps;
  }


  public FarmSettings defaultTotalIngressThresholdInGbps(Float defaultTotalIngressThresholdInGbps) {
    this.defaultTotalIngressThresholdInGbps = defaultTotalIngressThresholdInGbps;
    return this;
  }

  /**
   * Default total ingress threshold (in Gbps).
   * @return defaultTotalIngressThresholdInGbps
   */
  @javax.annotation.Nullable
  public Float getDefaultTotalIngressThresholdInGbps() {
    return defaultTotalIngressThresholdInGbps;
  }

  public void setDefaultTotalIngressThresholdInGbps(Float defaultTotalIngressThresholdInGbps) {
    this.defaultTotalIngressThresholdInGbps = defaultTotalIngressThresholdInGbps;
  }


  public FarmSettings feedbackRefreshIntervalInSeconds(Integer feedbackRefreshIntervalInSeconds) {
    this.feedbackRefreshIntervalInSeconds = feedbackRefreshIntervalInSeconds;
    return this;
  }

  /**
   * Interval (in seconds) of feedback refresh.
   * @return feedbackRefreshIntervalInSeconds
   */
  @javax.annotation.Nullable
  public Integer getFeedbackRefreshIntervalInSeconds() {
    return feedbackRefreshIntervalInSeconds;
  }

  public void setFeedbackRefreshIntervalInSeconds(Integer feedbackRefreshIntervalInSeconds) {
    this.feedbackRefreshIntervalInSeconds = feedbackRefreshIntervalInSeconds;
  }


  public FarmSettings gracePeriodForFullThrottlingInRefreshIntervals(Integer gracePeriodForFullThrottlingInRefreshIntervals) {
    this.gracePeriodForFullThrottlingInRefreshIntervals = gracePeriodForFullThrottlingInRefreshIntervals;
    return this;
  }

  /**
   * Grace period for full throttling in refresh intervals.
   * @return gracePeriodForFullThrottlingInRefreshIntervals
   */
  @javax.annotation.Nullable
  public Integer getGracePeriodForFullThrottlingInRefreshIntervals() {
    return gracePeriodForFullThrottlingInRefreshIntervals;
  }

  public void setGracePeriodForFullThrottlingInRefreshIntervals(Integer gracePeriodForFullThrottlingInRefreshIntervals) {
    this.gracePeriodForFullThrottlingInRefreshIntervals = gracePeriodForFullThrottlingInRefreshIntervals;
  }


  public FarmSettings gracePeriodMaxThrottleProbability(Float gracePeriodMaxThrottleProbability) {
    this.gracePeriodMaxThrottleProbability = gracePeriodMaxThrottleProbability;
    return this;
  }

  /**
   * Maximum probability of throttle in grace period.
   * @return gracePeriodMaxThrottleProbability
   */
  @javax.annotation.Nullable
  public Float getGracePeriodMaxThrottleProbability() {
    return gracePeriodMaxThrottleProbability;
  }

  public void setGracePeriodMaxThrottleProbability(Float gracePeriodMaxThrottleProbability) {
    this.gracePeriodMaxThrottleProbability = gracePeriodMaxThrottleProbability;
  }


  public FarmSettings hostStyleHttpPort(Integer hostStyleHttpPort) {
    this.hostStyleHttpPort = hostStyleHttpPort;
    return this;
  }

  /**
   * Host style HTTP port.
   * @return hostStyleHttpPort
   */
  @javax.annotation.Nullable
  public Integer getHostStyleHttpPort() {
    return hostStyleHttpPort;
  }

  public void setHostStyleHttpPort(Integer hostStyleHttpPort) {
    this.hostStyleHttpPort = hostStyleHttpPort;
  }


  public FarmSettings hostStyleHttpsPort(Integer hostStyleHttpsPort) {
    this.hostStyleHttpsPort = hostStyleHttpsPort;
    return this;
  }

  /**
   * Host style HTTPs port.
   * @return hostStyleHttpsPort
   */
  @javax.annotation.Nullable
  public Integer getHostStyleHttpsPort() {
    return hostStyleHttpsPort;
  }

  public void setHostStyleHttpsPort(Integer hostStyleHttpsPort) {
    this.hostStyleHttpsPort = hostStyleHttpsPort;
  }


  public FarmSettings minimumEgressThresholdInGbps(Float minimumEgressThresholdInGbps) {
    this.minimumEgressThresholdInGbps = minimumEgressThresholdInGbps;
    return this;
  }

  /**
   * Minimum egress threshold (in Gbps).
   * @return minimumEgressThresholdInGbps
   */
  @javax.annotation.Nullable
  public Float getMinimumEgressThresholdInGbps() {
    return minimumEgressThresholdInGbps;
  }

  public void setMinimumEgressThresholdInGbps(Float minimumEgressThresholdInGbps) {
    this.minimumEgressThresholdInGbps = minimumEgressThresholdInGbps;
  }


  public FarmSettings minimumIngressThresholdInGbps(Float minimumIngressThresholdInGbps) {
    this.minimumIngressThresholdInGbps = minimumIngressThresholdInGbps;
    return this;
  }

  /**
   * Minimum ingress threshold (in Gbps).
   * @return minimumIngressThresholdInGbps
   */
  @javax.annotation.Nullable
  public Float getMinimumIngressThresholdInGbps() {
    return minimumIngressThresholdInGbps;
  }

  public void setMinimumIngressThresholdInGbps(Float minimumIngressThresholdInGbps) {
    this.minimumIngressThresholdInGbps = minimumIngressThresholdInGbps;
  }


  public FarmSettings minimumIntranetEgressThresholdInGbps(Float minimumIntranetEgressThresholdInGbps) {
    this.minimumIntranetEgressThresholdInGbps = minimumIntranetEgressThresholdInGbps;
    return this;
  }

  /**
   * Minimum Intranet egress threshold (in Gbps).
   * @return minimumIntranetEgressThresholdInGbps
   */
  @javax.annotation.Nullable
  public Float getMinimumIntranetEgressThresholdInGbps() {
    return minimumIntranetEgressThresholdInGbps;
  }

  public void setMinimumIntranetEgressThresholdInGbps(Float minimumIntranetEgressThresholdInGbps) {
    this.minimumIntranetEgressThresholdInGbps = minimumIntranetEgressThresholdInGbps;
  }


  public FarmSettings minimumIntranetIngressThresholdInGbps(Float minimumIntranetIngressThresholdInGbps) {
    this.minimumIntranetIngressThresholdInGbps = minimumIntranetIngressThresholdInGbps;
    return this;
  }

  /**
   * Minimum Intranet ingress threshold (in Gbps).
   * @return minimumIntranetIngressThresholdInGbps
   */
  @javax.annotation.Nullable
  public Float getMinimumIntranetIngressThresholdInGbps() {
    return minimumIntranetIngressThresholdInGbps;
  }

  public void setMinimumIntranetIngressThresholdInGbps(Float minimumIntranetIngressThresholdInGbps) {
    this.minimumIntranetIngressThresholdInGbps = minimumIntranetIngressThresholdInGbps;
  }


  public FarmSettings minimumRequestThresholdInTps(Float minimumRequestThresholdInTps) {
    this.minimumRequestThresholdInTps = minimumRequestThresholdInTps;
    return this;
  }

  /**
   * Minimum request threshold (in TPS).
   * @return minimumRequestThresholdInTps
   */
  @javax.annotation.Nullable
  public Float getMinimumRequestThresholdInTps() {
    return minimumRequestThresholdInTps;
  }

  public void setMinimumRequestThresholdInTps(Float minimumRequestThresholdInTps) {
    this.minimumRequestThresholdInTps = minimumRequestThresholdInTps;
  }


  public FarmSettings minimumTotalEgressThresholdInGbps(Float minimumTotalEgressThresholdInGbps) {
    this.minimumTotalEgressThresholdInGbps = minimumTotalEgressThresholdInGbps;
    return this;
  }

  /**
   * Minimum total egress threshold (in Gbp
   * @return minimumTotalEgressThresholdInGbps
   */
  @javax.annotation.Nullable
  public Float getMinimumTotalEgressThresholdInGbps() {
    return minimumTotalEgressThresholdInGbps;
  }

  public void setMinimumTotalEgressThresholdInGbps(Float minimumTotalEgressThresholdInGbps) {
    this.minimumTotalEgressThresholdInGbps = minimumTotalEgressThresholdInGbps;
  }


  public FarmSettings minimumTotalIngressThresholdInGbps(Float minimumTotalIngressThresholdInGbps) {
    this.minimumTotalIngressThresholdInGbps = minimumTotalIngressThresholdInGbps;
    return this;
  }

  /**
   * Minimum total ingress threshold (in Gbps).
   * @return minimumTotalIngressThresholdInGbps
   */
  @javax.annotation.Nullable
  public Float getMinimumTotalIngressThresholdInGbps() {
    return minimumTotalIngressThresholdInGbps;
  }

  public void setMinimumTotalIngressThresholdInGbps(Float minimumTotalIngressThresholdInGbps) {
    this.minimumTotalIngressThresholdInGbps = minimumTotalIngressThresholdInGbps;
  }


  public FarmSettings numberOfAccountsToSync(Integer numberOfAccountsToSync) {
    this.numberOfAccountsToSync = numberOfAccountsToSync;
    return this;
  }

  /**
   * Number of accounts to sync.
   * @return numberOfAccountsToSync
   */
  @javax.annotation.Nullable
  public Integer getNumberOfAccountsToSync() {
    return numberOfAccountsToSync;
  }

  public void setNumberOfAccountsToSync(Integer numberOfAccountsToSync) {
    this.numberOfAccountsToSync = numberOfAccountsToSync;
  }


  public FarmSettings overallEgressThresholdInGbps(Float overallEgressThresholdInGbps) {
    this.overallEgressThresholdInGbps = overallEgressThresholdInGbps;
    return this;
  }

  /**
   * Overall egress threshold (in Gbps).
   * @return overallEgressThresholdInGbps
   */
  @javax.annotation.Nullable
  public Float getOverallEgressThresholdInGbps() {
    return overallEgressThresholdInGbps;
  }

  public void setOverallEgressThresholdInGbps(Float overallEgressThresholdInGbps) {
    this.overallEgressThresholdInGbps = overallEgressThresholdInGbps;
  }


  public FarmSettings overallIngressThresholdInGbps(Float overallIngressThresholdInGbps) {
    this.overallIngressThresholdInGbps = overallIngressThresholdInGbps;
    return this;
  }

  /**
   * Overall ingress threshold (in Gbps)
   * @return overallIngressThresholdInGbps
   */
  @javax.annotation.Nullable
  public Float getOverallIngressThresholdInGbps() {
    return overallIngressThresholdInGbps;
  }

  public void setOverallIngressThresholdInGbps(Float overallIngressThresholdInGbps) {
    this.overallIngressThresholdInGbps = overallIngressThresholdInGbps;
  }


  public FarmSettings overallIntranetEgressThresholdInGbps(Float overallIntranetEgressThresholdInGbps) {
    this.overallIntranetEgressThresholdInGbps = overallIntranetEgressThresholdInGbps;
    return this;
  }

  /**
   * Overall Intranet egress threshold (in Gbps).
   * @return overallIntranetEgressThresholdInGbps
   */
  @javax.annotation.Nullable
  public Float getOverallIntranetEgressThresholdInGbps() {
    return overallIntranetEgressThresholdInGbps;
  }

  public void setOverallIntranetEgressThresholdInGbps(Float overallIntranetEgressThresholdInGbps) {
    this.overallIntranetEgressThresholdInGbps = overallIntranetEgressThresholdInGbps;
  }


  public FarmSettings overallIntranetIngressThresholdInGbps(Float overallIntranetIngressThresholdInGbps) {
    this.overallIntranetIngressThresholdInGbps = overallIntranetIngressThresholdInGbps;
    return this;
  }

  /**
   * Overall Intranet ingress threshold (in Gbps).
   * @return overallIntranetIngressThresholdInGbps
   */
  @javax.annotation.Nullable
  public Float getOverallIntranetIngressThresholdInGbps() {
    return overallIntranetIngressThresholdInGbps;
  }

  public void setOverallIntranetIngressThresholdInGbps(Float overallIntranetIngressThresholdInGbps) {
    this.overallIntranetIngressThresholdInGbps = overallIntranetIngressThresholdInGbps;
  }


  public FarmSettings overallRequestThresholdInTps(Float overallRequestThresholdInTps) {
    this.overallRequestThresholdInTps = overallRequestThresholdInTps;
    return this;
  }

  /**
   * Overall request threshold (in TPS).
   * @return overallRequestThresholdInTps
   */
  @javax.annotation.Nullable
  public Float getOverallRequestThresholdInTps() {
    return overallRequestThresholdInTps;
  }

  public void setOverallRequestThresholdInTps(Float overallRequestThresholdInTps) {
    this.overallRequestThresholdInTps = overallRequestThresholdInTps;
  }


  public FarmSettings overallTotalEgressThresholdInGbps(Float overallTotalEgressThresholdInGbps) {
    this.overallTotalEgressThresholdInGbps = overallTotalEgressThresholdInGbps;
    return this;
  }

  /**
   * Overall total egress threshold (in Gbps).
   * @return overallTotalEgressThresholdInGbps
   */
  @javax.annotation.Nullable
  public Float getOverallTotalEgressThresholdInGbps() {
    return overallTotalEgressThresholdInGbps;
  }

  public void setOverallTotalEgressThresholdInGbps(Float overallTotalEgressThresholdInGbps) {
    this.overallTotalEgressThresholdInGbps = overallTotalEgressThresholdInGbps;
  }


  public FarmSettings overallTotalIngressThresholdInGbps(Float overallTotalIngressThresholdInGbps) {
    this.overallTotalIngressThresholdInGbps = overallTotalIngressThresholdInGbps;
    return this;
  }

  /**
   * Overall total ingress threshold (in Gbps).
   * @return overallTotalIngressThresholdInGbps
   */
  @javax.annotation.Nullable
  public Float getOverallTotalIngressThresholdInGbps() {
    return overallTotalIngressThresholdInGbps;
  }

  public void setOverallTotalIngressThresholdInGbps(Float overallTotalIngressThresholdInGbps) {
    this.overallTotalIngressThresholdInGbps = overallTotalIngressThresholdInGbps;
  }


  public FarmSettings retentionPeriodForDeletedStorageAccountsInDays(Integer retentionPeriodForDeletedStorageAccountsInDays) {
    this.retentionPeriodForDeletedStorageAccountsInDays = retentionPeriodForDeletedStorageAccountsInDays;
    return this;
  }

  /**
   * The retention period (in days) for deleted storage account.
   * @return retentionPeriodForDeletedStorageAccountsInDays
   */
  @javax.annotation.Nullable
  public Integer getRetentionPeriodForDeletedStorageAccountsInDays() {
    return retentionPeriodForDeletedStorageAccountsInDays;
  }

  public void setRetentionPeriodForDeletedStorageAccountsInDays(Integer retentionPeriodForDeletedStorageAccountsInDays) {
    this.retentionPeriodForDeletedStorageAccountsInDays = retentionPeriodForDeletedStorageAccountsInDays;
  }


  public FarmSettings settingsPollingIntervalInSecond(Integer settingsPollingIntervalInSecond) {
    this.settingsPollingIntervalInSecond = settingsPollingIntervalInSecond;
    return this;
  }

  /**
   * The polling interval (in second).
   * @return settingsPollingIntervalInSecond
   */
  @javax.annotation.Nullable
  public Integer getSettingsPollingIntervalInSecond() {
    return settingsPollingIntervalInSecond;
  }

  public void setSettingsPollingIntervalInSecond(Integer settingsPollingIntervalInSecond) {
    this.settingsPollingIntervalInSecond = settingsPollingIntervalInSecond;
  }


  public FarmSettings toleranceFactorForEgress(Float toleranceFactorForEgress) {
    this.toleranceFactorForEgress = toleranceFactorForEgress;
    return this;
  }

  /**
   * Tolerance factor for egress.
   * @return toleranceFactorForEgress
   */
  @javax.annotation.Nullable
  public Float getToleranceFactorForEgress() {
    return toleranceFactorForEgress;
  }

  public void setToleranceFactorForEgress(Float toleranceFactorForEgress) {
    this.toleranceFactorForEgress = toleranceFactorForEgress;
  }


  public FarmSettings toleranceFactorForIngress(Float toleranceFactorForIngress) {
    this.toleranceFactorForIngress = toleranceFactorForIngress;
    return this;
  }

  /**
   * Tolerance factor for ingress.
   * @return toleranceFactorForIngress
   */
  @javax.annotation.Nullable
  public Float getToleranceFactorForIngress() {
    return toleranceFactorForIngress;
  }

  public void setToleranceFactorForIngress(Float toleranceFactorForIngress) {
    this.toleranceFactorForIngress = toleranceFactorForIngress;
  }


  public FarmSettings toleranceFactorForIntranetEgress(Float toleranceFactorForIntranetEgress) {
    this.toleranceFactorForIntranetEgress = toleranceFactorForIntranetEgress;
    return this;
  }

  /**
   * Tolerance factor for Intranet egress.
   * @return toleranceFactorForIntranetEgress
   */
  @javax.annotation.Nullable
  public Float getToleranceFactorForIntranetEgress() {
    return toleranceFactorForIntranetEgress;
  }

  public void setToleranceFactorForIntranetEgress(Float toleranceFactorForIntranetEgress) {
    this.toleranceFactorForIntranetEgress = toleranceFactorForIntranetEgress;
  }


  public FarmSettings toleranceFactorForIntranetIngress(Float toleranceFactorForIntranetIngress) {
    this.toleranceFactorForIntranetIngress = toleranceFactorForIntranetIngress;
    return this;
  }

  /**
   * Tolerance factor for Intranet ingress.
   * @return toleranceFactorForIntranetIngress
   */
  @javax.annotation.Nullable
  public Float getToleranceFactorForIntranetIngress() {
    return toleranceFactorForIntranetIngress;
  }

  public void setToleranceFactorForIntranetIngress(Float toleranceFactorForIntranetIngress) {
    this.toleranceFactorForIntranetIngress = toleranceFactorForIntranetIngress;
  }


  public FarmSettings toleranceFactorForTotalEgress(Float toleranceFactorForTotalEgress) {
    this.toleranceFactorForTotalEgress = toleranceFactorForTotalEgress;
    return this;
  }

  /**
   * Tolerance factor for total egress.
   * @return toleranceFactorForTotalEgress
   */
  @javax.annotation.Nullable
  public Float getToleranceFactorForTotalEgress() {
    return toleranceFactorForTotalEgress;
  }

  public void setToleranceFactorForTotalEgress(Float toleranceFactorForTotalEgress) {
    this.toleranceFactorForTotalEgress = toleranceFactorForTotalEgress;
  }


  public FarmSettings toleranceFactorForTotalIngress(Float toleranceFactorForTotalIngress) {
    this.toleranceFactorForTotalIngress = toleranceFactorForTotalIngress;
    return this;
  }

  /**
   * Tolerance factor for total ingress.
   * @return toleranceFactorForTotalIngress
   */
  @javax.annotation.Nullable
  public Float getToleranceFactorForTotalIngress() {
    return toleranceFactorForTotalIngress;
  }

  public void setToleranceFactorForTotalIngress(Float toleranceFactorForTotalIngress) {
    this.toleranceFactorForTotalIngress = toleranceFactorForTotalIngress;
  }


  public FarmSettings toleranceFactorForTps(Float toleranceFactorForTps) {
    this.toleranceFactorForTps = toleranceFactorForTps;
    return this;
  }

  /**
   * Tolerance factor for TPS.
   * @return toleranceFactorForTps
   */
  @javax.annotation.Nullable
  public Float getToleranceFactorForTps() {
    return toleranceFactorForTps;
  }

  public void setToleranceFactorForTps(Float toleranceFactorForTps) {
    this.toleranceFactorForTps = toleranceFactorForTps;
  }


  public FarmSettings usageCollectionIntervalInSeconds(Integer usageCollectionIntervalInSeconds) {
    this.usageCollectionIntervalInSeconds = usageCollectionIntervalInSeconds;
    return this;
  }

  /**
   * Interval (in seconds) of storage usage collection.
   * @return usageCollectionIntervalInSeconds
   */
  @javax.annotation.Nullable
  public Integer getUsageCollectionIntervalInSeconds() {
    return usageCollectionIntervalInSeconds;
  }

  public void setUsageCollectionIntervalInSeconds(Integer usageCollectionIntervalInSeconds) {
    this.usageCollectionIntervalInSeconds = usageCollectionIntervalInSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FarmSettings farmSettings = (FarmSettings) o;
    return Objects.equals(this.bandwidthThrottleIsEnabled, farmSettings.bandwidthThrottleIsEnabled) &&
        Objects.equals(this.corsAllowedOriginsList, farmSettings.corsAllowedOriginsList) &&
        Objects.equals(this.dataCenterUriHostSuffixes, farmSettings.dataCenterUriHostSuffixes) &&
        Objects.equals(this.defaultEgressThresholdInGbps, farmSettings.defaultEgressThresholdInGbps) &&
        Objects.equals(this.defaultIngressThresholdInGbps, farmSettings.defaultIngressThresholdInGbps) &&
        Objects.equals(this.defaultIntranetEgressThresholdInGbps, farmSettings.defaultIntranetEgressThresholdInGbps) &&
        Objects.equals(this.defaultIntranetIngressThresholdInGbps, farmSettings.defaultIntranetIngressThresholdInGbps) &&
        Objects.equals(this.defaultRequestThresholdInTps, farmSettings.defaultRequestThresholdInTps) &&
        Objects.equals(this.defaultThrottleProbabilityDecayIntervalInSeconds, farmSettings.defaultThrottleProbabilityDecayIntervalInSeconds) &&
        Objects.equals(this.defaultTotalEgressThresholdInGbps, farmSettings.defaultTotalEgressThresholdInGbps) &&
        Objects.equals(this.defaultTotalIngressThresholdInGbps, farmSettings.defaultTotalIngressThresholdInGbps) &&
        Objects.equals(this.feedbackRefreshIntervalInSeconds, farmSettings.feedbackRefreshIntervalInSeconds) &&
        Objects.equals(this.gracePeriodForFullThrottlingInRefreshIntervals, farmSettings.gracePeriodForFullThrottlingInRefreshIntervals) &&
        Objects.equals(this.gracePeriodMaxThrottleProbability, farmSettings.gracePeriodMaxThrottleProbability) &&
        Objects.equals(this.hostStyleHttpPort, farmSettings.hostStyleHttpPort) &&
        Objects.equals(this.hostStyleHttpsPort, farmSettings.hostStyleHttpsPort) &&
        Objects.equals(this.minimumEgressThresholdInGbps, farmSettings.minimumEgressThresholdInGbps) &&
        Objects.equals(this.minimumIngressThresholdInGbps, farmSettings.minimumIngressThresholdInGbps) &&
        Objects.equals(this.minimumIntranetEgressThresholdInGbps, farmSettings.minimumIntranetEgressThresholdInGbps) &&
        Objects.equals(this.minimumIntranetIngressThresholdInGbps, farmSettings.minimumIntranetIngressThresholdInGbps) &&
        Objects.equals(this.minimumRequestThresholdInTps, farmSettings.minimumRequestThresholdInTps) &&
        Objects.equals(this.minimumTotalEgressThresholdInGbps, farmSettings.minimumTotalEgressThresholdInGbps) &&
        Objects.equals(this.minimumTotalIngressThresholdInGbps, farmSettings.minimumTotalIngressThresholdInGbps) &&
        Objects.equals(this.numberOfAccountsToSync, farmSettings.numberOfAccountsToSync) &&
        Objects.equals(this.overallEgressThresholdInGbps, farmSettings.overallEgressThresholdInGbps) &&
        Objects.equals(this.overallIngressThresholdInGbps, farmSettings.overallIngressThresholdInGbps) &&
        Objects.equals(this.overallIntranetEgressThresholdInGbps, farmSettings.overallIntranetEgressThresholdInGbps) &&
        Objects.equals(this.overallIntranetIngressThresholdInGbps, farmSettings.overallIntranetIngressThresholdInGbps) &&
        Objects.equals(this.overallRequestThresholdInTps, farmSettings.overallRequestThresholdInTps) &&
        Objects.equals(this.overallTotalEgressThresholdInGbps, farmSettings.overallTotalEgressThresholdInGbps) &&
        Objects.equals(this.overallTotalIngressThresholdInGbps, farmSettings.overallTotalIngressThresholdInGbps) &&
        Objects.equals(this.retentionPeriodForDeletedStorageAccountsInDays, farmSettings.retentionPeriodForDeletedStorageAccountsInDays) &&
        Objects.equals(this.settingsPollingIntervalInSecond, farmSettings.settingsPollingIntervalInSecond) &&
        Objects.equals(this.toleranceFactorForEgress, farmSettings.toleranceFactorForEgress) &&
        Objects.equals(this.toleranceFactorForIngress, farmSettings.toleranceFactorForIngress) &&
        Objects.equals(this.toleranceFactorForIntranetEgress, farmSettings.toleranceFactorForIntranetEgress) &&
        Objects.equals(this.toleranceFactorForIntranetIngress, farmSettings.toleranceFactorForIntranetIngress) &&
        Objects.equals(this.toleranceFactorForTotalEgress, farmSettings.toleranceFactorForTotalEgress) &&
        Objects.equals(this.toleranceFactorForTotalIngress, farmSettings.toleranceFactorForTotalIngress) &&
        Objects.equals(this.toleranceFactorForTps, farmSettings.toleranceFactorForTps) &&
        Objects.equals(this.usageCollectionIntervalInSeconds, farmSettings.usageCollectionIntervalInSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bandwidthThrottleIsEnabled, corsAllowedOriginsList, dataCenterUriHostSuffixes, defaultEgressThresholdInGbps, defaultIngressThresholdInGbps, defaultIntranetEgressThresholdInGbps, defaultIntranetIngressThresholdInGbps, defaultRequestThresholdInTps, defaultThrottleProbabilityDecayIntervalInSeconds, defaultTotalEgressThresholdInGbps, defaultTotalIngressThresholdInGbps, feedbackRefreshIntervalInSeconds, gracePeriodForFullThrottlingInRefreshIntervals, gracePeriodMaxThrottleProbability, hostStyleHttpPort, hostStyleHttpsPort, minimumEgressThresholdInGbps, minimumIngressThresholdInGbps, minimumIntranetEgressThresholdInGbps, minimumIntranetIngressThresholdInGbps, minimumRequestThresholdInTps, minimumTotalEgressThresholdInGbps, minimumTotalIngressThresholdInGbps, numberOfAccountsToSync, overallEgressThresholdInGbps, overallIngressThresholdInGbps, overallIntranetEgressThresholdInGbps, overallIntranetIngressThresholdInGbps, overallRequestThresholdInTps, overallTotalEgressThresholdInGbps, overallTotalIngressThresholdInGbps, retentionPeriodForDeletedStorageAccountsInDays, settingsPollingIntervalInSecond, toleranceFactorForEgress, toleranceFactorForIngress, toleranceFactorForIntranetEgress, toleranceFactorForIntranetIngress, toleranceFactorForTotalEgress, toleranceFactorForTotalIngress, toleranceFactorForTps, usageCollectionIntervalInSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FarmSettings {\n");
    sb.append("    bandwidthThrottleIsEnabled: ").append(toIndentedString(bandwidthThrottleIsEnabled)).append("\n");
    sb.append("    corsAllowedOriginsList: ").append(toIndentedString(corsAllowedOriginsList)).append("\n");
    sb.append("    dataCenterUriHostSuffixes: ").append(toIndentedString(dataCenterUriHostSuffixes)).append("\n");
    sb.append("    defaultEgressThresholdInGbps: ").append(toIndentedString(defaultEgressThresholdInGbps)).append("\n");
    sb.append("    defaultIngressThresholdInGbps: ").append(toIndentedString(defaultIngressThresholdInGbps)).append("\n");
    sb.append("    defaultIntranetEgressThresholdInGbps: ").append(toIndentedString(defaultIntranetEgressThresholdInGbps)).append("\n");
    sb.append("    defaultIntranetIngressThresholdInGbps: ").append(toIndentedString(defaultIntranetIngressThresholdInGbps)).append("\n");
    sb.append("    defaultRequestThresholdInTps: ").append(toIndentedString(defaultRequestThresholdInTps)).append("\n");
    sb.append("    defaultThrottleProbabilityDecayIntervalInSeconds: ").append(toIndentedString(defaultThrottleProbabilityDecayIntervalInSeconds)).append("\n");
    sb.append("    defaultTotalEgressThresholdInGbps: ").append(toIndentedString(defaultTotalEgressThresholdInGbps)).append("\n");
    sb.append("    defaultTotalIngressThresholdInGbps: ").append(toIndentedString(defaultTotalIngressThresholdInGbps)).append("\n");
    sb.append("    feedbackRefreshIntervalInSeconds: ").append(toIndentedString(feedbackRefreshIntervalInSeconds)).append("\n");
    sb.append("    gracePeriodForFullThrottlingInRefreshIntervals: ").append(toIndentedString(gracePeriodForFullThrottlingInRefreshIntervals)).append("\n");
    sb.append("    gracePeriodMaxThrottleProbability: ").append(toIndentedString(gracePeriodMaxThrottleProbability)).append("\n");
    sb.append("    hostStyleHttpPort: ").append(toIndentedString(hostStyleHttpPort)).append("\n");
    sb.append("    hostStyleHttpsPort: ").append(toIndentedString(hostStyleHttpsPort)).append("\n");
    sb.append("    minimumEgressThresholdInGbps: ").append(toIndentedString(minimumEgressThresholdInGbps)).append("\n");
    sb.append("    minimumIngressThresholdInGbps: ").append(toIndentedString(minimumIngressThresholdInGbps)).append("\n");
    sb.append("    minimumIntranetEgressThresholdInGbps: ").append(toIndentedString(minimumIntranetEgressThresholdInGbps)).append("\n");
    sb.append("    minimumIntranetIngressThresholdInGbps: ").append(toIndentedString(minimumIntranetIngressThresholdInGbps)).append("\n");
    sb.append("    minimumRequestThresholdInTps: ").append(toIndentedString(minimumRequestThresholdInTps)).append("\n");
    sb.append("    minimumTotalEgressThresholdInGbps: ").append(toIndentedString(minimumTotalEgressThresholdInGbps)).append("\n");
    sb.append("    minimumTotalIngressThresholdInGbps: ").append(toIndentedString(minimumTotalIngressThresholdInGbps)).append("\n");
    sb.append("    numberOfAccountsToSync: ").append(toIndentedString(numberOfAccountsToSync)).append("\n");
    sb.append("    overallEgressThresholdInGbps: ").append(toIndentedString(overallEgressThresholdInGbps)).append("\n");
    sb.append("    overallIngressThresholdInGbps: ").append(toIndentedString(overallIngressThresholdInGbps)).append("\n");
    sb.append("    overallIntranetEgressThresholdInGbps: ").append(toIndentedString(overallIntranetEgressThresholdInGbps)).append("\n");
    sb.append("    overallIntranetIngressThresholdInGbps: ").append(toIndentedString(overallIntranetIngressThresholdInGbps)).append("\n");
    sb.append("    overallRequestThresholdInTps: ").append(toIndentedString(overallRequestThresholdInTps)).append("\n");
    sb.append("    overallTotalEgressThresholdInGbps: ").append(toIndentedString(overallTotalEgressThresholdInGbps)).append("\n");
    sb.append("    overallTotalIngressThresholdInGbps: ").append(toIndentedString(overallTotalIngressThresholdInGbps)).append("\n");
    sb.append("    retentionPeriodForDeletedStorageAccountsInDays: ").append(toIndentedString(retentionPeriodForDeletedStorageAccountsInDays)).append("\n");
    sb.append("    settingsPollingIntervalInSecond: ").append(toIndentedString(settingsPollingIntervalInSecond)).append("\n");
    sb.append("    toleranceFactorForEgress: ").append(toIndentedString(toleranceFactorForEgress)).append("\n");
    sb.append("    toleranceFactorForIngress: ").append(toIndentedString(toleranceFactorForIngress)).append("\n");
    sb.append("    toleranceFactorForIntranetEgress: ").append(toIndentedString(toleranceFactorForIntranetEgress)).append("\n");
    sb.append("    toleranceFactorForIntranetIngress: ").append(toIndentedString(toleranceFactorForIntranetIngress)).append("\n");
    sb.append("    toleranceFactorForTotalEgress: ").append(toIndentedString(toleranceFactorForTotalEgress)).append("\n");
    sb.append("    toleranceFactorForTotalIngress: ").append(toIndentedString(toleranceFactorForTotalIngress)).append("\n");
    sb.append("    toleranceFactorForTps: ").append(toIndentedString(toleranceFactorForTps)).append("\n");
    sb.append("    usageCollectionIntervalInSeconds: ").append(toIndentedString(usageCollectionIntervalInSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bandwidthThrottleIsEnabled");
    openapiFields.add("corsAllowedOriginsList");
    openapiFields.add("dataCenterUriHostSuffixes");
    openapiFields.add("defaultEgressThresholdInGbps");
    openapiFields.add("defaultIngressThresholdInGbps");
    openapiFields.add("defaultIntranetEgressThresholdInGbps");
    openapiFields.add("defaultIntranetIngressThresholdInGbps");
    openapiFields.add("defaultRequestThresholdInTps");
    openapiFields.add("defaultThrottleProbabilityDecayIntervalInSeconds");
    openapiFields.add("defaultTotalEgressThresholdInGbps");
    openapiFields.add("defaultTotalIngressThresholdInGbps");
    openapiFields.add("feedbackRefreshIntervalInSeconds");
    openapiFields.add("gracePeriodForFullThrottlingInRefreshIntervals");
    openapiFields.add("gracePeriodMaxThrottleProbability");
    openapiFields.add("hostStyleHttpPort");
    openapiFields.add("hostStyleHttpsPort");
    openapiFields.add("minimumEgressThresholdInGbps");
    openapiFields.add("minimumIngressThresholdInGbps");
    openapiFields.add("minimumIntranetEgressThresholdInGbps");
    openapiFields.add("minimumIntranetIngressThresholdInGbps");
    openapiFields.add("minimumRequestThresholdInTps");
    openapiFields.add("minimumTotalEgressThresholdInGbps");
    openapiFields.add("minimumTotalIngressThresholdInGbps");
    openapiFields.add("numberOfAccountsToSync");
    openapiFields.add("overallEgressThresholdInGbps");
    openapiFields.add("overallIngressThresholdInGbps");
    openapiFields.add("overallIntranetEgressThresholdInGbps");
    openapiFields.add("overallIntranetIngressThresholdInGbps");
    openapiFields.add("overallRequestThresholdInTps");
    openapiFields.add("overallTotalEgressThresholdInGbps");
    openapiFields.add("overallTotalIngressThresholdInGbps");
    openapiFields.add("retentionPeriodForDeletedStorageAccountsInDays");
    openapiFields.add("settingsPollingIntervalInSecond");
    openapiFields.add("toleranceFactorForEgress");
    openapiFields.add("toleranceFactorForIngress");
    openapiFields.add("toleranceFactorForIntranetEgress");
    openapiFields.add("toleranceFactorForIntranetIngress");
    openapiFields.add("toleranceFactorForTotalEgress");
    openapiFields.add("toleranceFactorForTotalIngress");
    openapiFields.add("toleranceFactorForTps");
    openapiFields.add("usageCollectionIntervalInSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FarmSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FarmSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FarmSettings is not found in the empty JSON string", FarmSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FarmSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FarmSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("corsAllowedOriginsList") != null && !jsonObj.get("corsAllowedOriginsList").isJsonNull()) && !jsonObj.get("corsAllowedOriginsList").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `corsAllowedOriginsList` to be a primitive type in the JSON string but got `%s`", jsonObj.get("corsAllowedOriginsList").toString()));
      }
      if ((jsonObj.get("dataCenterUriHostSuffixes") != null && !jsonObj.get("dataCenterUriHostSuffixes").isJsonNull()) && !jsonObj.get("dataCenterUriHostSuffixes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataCenterUriHostSuffixes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataCenterUriHostSuffixes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FarmSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FarmSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FarmSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FarmSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<FarmSettings>() {
           @Override
           public void write(JsonWriter out, FarmSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FarmSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FarmSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FarmSettings
   * @throws IOException if the JSON string is invalid with respect to FarmSettings
   */
  public static FarmSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FarmSettings.class);
  }

  /**
   * Convert an instance of FarmSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

