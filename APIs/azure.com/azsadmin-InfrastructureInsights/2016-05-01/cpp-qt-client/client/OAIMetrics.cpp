/**
 * InfrastructureInsightsManagementClient
 * The Admin Infrastructure Insights Management Client.
 *
 * The version of the OpenAPI document: 2016-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetrics::OAIMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetrics::OAIMetrics() {
    this->initializeModel();
}

OAIMetrics::~OAIMetrics() {}

void OAIMetrics::initializeModel() {

    m_ma_counter_name_isSet = false;
    m_ma_counter_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_observed_timestamp_isSet = false;
    m_observed_timestamp_isValid = false;

    m_source_name_isSet = false;
    m_source_name_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetrics::fromJsonObject(QJsonObject json) {

    m_ma_counter_name_isValid = ::OpenAPI::fromJsonValue(m_ma_counter_name, json[QString("maCounterName")]);
    m_ma_counter_name_isSet = !json[QString("maCounterName")].isNull() && m_ma_counter_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_observed_timestamp_isValid = ::OpenAPI::fromJsonValue(m_observed_timestamp, json[QString("observedTimestamp")]);
    m_observed_timestamp_isSet = !json[QString("observedTimestamp")].isNull() && m_observed_timestamp_isValid;

    m_source_name_isValid = ::OpenAPI::fromJsonValue(m_source_name, json[QString("sourceName")]);
    m_source_name_isSet = !json[QString("sourceName")].isNull() && m_source_name_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("sourceType")]);
    m_source_type_isSet = !json[QString("sourceType")].isNull() && m_source_type_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_ma_counter_name_isSet) {
        obj.insert(QString("maCounterName"), ::OpenAPI::toJsonValue(m_ma_counter_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_observed_timestamp_isSet) {
        obj.insert(QString("observedTimestamp"), ::OpenAPI::toJsonValue(m_observed_timestamp));
    }
    if (m_source_name.isSet()) {
        obj.insert(QString("sourceName"), ::OpenAPI::toJsonValue(m_source_name));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("sourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_unit.isSet()) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIMetrics::getMaCounterName() const {
    return m_ma_counter_name;
}
void OAIMetrics::setMaCounterName(const QString &ma_counter_name) {
    m_ma_counter_name = ma_counter_name;
    m_ma_counter_name_isSet = true;
}

bool OAIMetrics::is_ma_counter_name_Set() const{
    return m_ma_counter_name_isSet;
}

bool OAIMetrics::is_ma_counter_name_Valid() const{
    return m_ma_counter_name_isValid;
}

QString OAIMetrics::getName() const {
    return m_name;
}
void OAIMetrics::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMetrics::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMetrics::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIMetrics::getObservedTimestamp() const {
    return m_observed_timestamp;
}
void OAIMetrics::setObservedTimestamp(const QDateTime &observed_timestamp) {
    m_observed_timestamp = observed_timestamp;
    m_observed_timestamp_isSet = true;
}

bool OAIMetrics::is_observed_timestamp_Set() const{
    return m_observed_timestamp_isSet;
}

bool OAIMetrics::is_observed_timestamp_Valid() const{
    return m_observed_timestamp_isValid;
}

OAIMetricsSourceType OAIMetrics::getSourceName() const {
    return m_source_name;
}
void OAIMetrics::setSourceName(const OAIMetricsSourceType &source_name) {
    m_source_name = source_name;
    m_source_name_isSet = true;
}

bool OAIMetrics::is_source_name_Set() const{
    return m_source_name_isSet;
}

bool OAIMetrics::is_source_name_Valid() const{
    return m_source_name_isValid;
}

QString OAIMetrics::getSourceType() const {
    return m_source_type;
}
void OAIMetrics::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIMetrics::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIMetrics::is_source_type_Valid() const{
    return m_source_type_isValid;
}

OAIMetricsUnit OAIMetrics::getUnit() const {
    return m_unit;
}
void OAIMetrics::setUnit(const OAIMetricsUnit &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIMetrics::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIMetrics::is_unit_Valid() const{
    return m_unit_isValid;
}

double OAIMetrics::getValue() const {
    return m_value;
}
void OAIMetrics::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIMetrics::is_value_Set() const{
    return m_value_isSet;
}

bool OAIMetrics::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ma_counter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_observed_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
