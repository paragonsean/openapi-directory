/**
 * InfrastructureInsightsManagementClient
 * The Admin Infrastructure Insights Management Client.
 *
 * The version of the OpenAPI document: 2016-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBaseHealth.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBaseHealth::OAIBaseHealth(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBaseHealth::OAIBaseHealth() {
    this->initializeModel();
}

OAIBaseHealth::~OAIBaseHealth() {}

void OAIBaseHealth::initializeModel() {

    m_alert_summary_isSet = false;
    m_alert_summary_isValid = false;

    m_health_state_isSet = false;
    m_health_state_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_registration_id_isSet = false;
    m_registration_id_isValid = false;

    m_route_prefix_isSet = false;
    m_route_prefix_isValid = false;
}

void OAIBaseHealth::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBaseHealth::fromJsonObject(QJsonObject json) {

    m_alert_summary_isValid = ::OpenAPI::fromJsonValue(m_alert_summary, json[QString("alertSummary")]);
    m_alert_summary_isSet = !json[QString("alertSummary")].isNull() && m_alert_summary_isValid;

    m_health_state_isValid = ::OpenAPI::fromJsonValue(m_health_state, json[QString("healthState")]);
    m_health_state_isSet = !json[QString("healthState")].isNull() && m_health_state_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_registration_id_isValid = ::OpenAPI::fromJsonValue(m_registration_id, json[QString("registrationId")]);
    m_registration_id_isSet = !json[QString("registrationId")].isNull() && m_registration_id_isValid;

    m_route_prefix_isValid = ::OpenAPI::fromJsonValue(m_route_prefix, json[QString("routePrefix")]);
    m_route_prefix_isSet = !json[QString("routePrefix")].isNull() && m_route_prefix_isValid;
}

QString OAIBaseHealth::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBaseHealth::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_summary.isSet()) {
        obj.insert(QString("alertSummary"), ::OpenAPI::toJsonValue(m_alert_summary));
    }
    if (m_health_state_isSet) {
        obj.insert(QString("healthState"), ::OpenAPI::toJsonValue(m_health_state));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_registration_id_isSet) {
        obj.insert(QString("registrationId"), ::OpenAPI::toJsonValue(m_registration_id));
    }
    if (m_route_prefix_isSet) {
        obj.insert(QString("routePrefix"), ::OpenAPI::toJsonValue(m_route_prefix));
    }
    return obj;
}

OAIAlertSummary OAIBaseHealth::getAlertSummary() const {
    return m_alert_summary;
}
void OAIBaseHealth::setAlertSummary(const OAIAlertSummary &alert_summary) {
    m_alert_summary = alert_summary;
    m_alert_summary_isSet = true;
}

bool OAIBaseHealth::is_alert_summary_Set() const{
    return m_alert_summary_isSet;
}

bool OAIBaseHealth::is_alert_summary_Valid() const{
    return m_alert_summary_isValid;
}

QString OAIBaseHealth::getHealthState() const {
    return m_health_state;
}
void OAIBaseHealth::setHealthState(const QString &health_state) {
    m_health_state = health_state;
    m_health_state_isSet = true;
}

bool OAIBaseHealth::is_health_state_Set() const{
    return m_health_state_isSet;
}

bool OAIBaseHealth::is_health_state_Valid() const{
    return m_health_state_isValid;
}

QString OAIBaseHealth::getRNamespace() const {
    return m_r_namespace;
}
void OAIBaseHealth::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIBaseHealth::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIBaseHealth::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIBaseHealth::getRegistrationId() const {
    return m_registration_id;
}
void OAIBaseHealth::setRegistrationId(const QString &registration_id) {
    m_registration_id = registration_id;
    m_registration_id_isSet = true;
}

bool OAIBaseHealth::is_registration_id_Set() const{
    return m_registration_id_isSet;
}

bool OAIBaseHealth::is_registration_id_Valid() const{
    return m_registration_id_isValid;
}

QString OAIBaseHealth::getRoutePrefix() const {
    return m_route_prefix;
}
void OAIBaseHealth::setRoutePrefix(const QString &route_prefix) {
    m_route_prefix = route_prefix;
    m_route_prefix_isSet = true;
}

bool OAIBaseHealth::is_route_prefix_Set() const{
    return m_route_prefix_isSet;
}

bool OAIBaseHealth::is_route_prefix_Valid() const{
    return m_route_prefix_isValid;
}

bool OAIBaseHealth::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBaseHealth::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
