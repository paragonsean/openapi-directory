# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metrics_source_type import MetricsSourceType
from openapi_server.models.metrics_unit import MetricsUnit
from openapi_server import util


class Metrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ma_counter_name: str=None, name: str=None, observed_timestamp: datetime=None, source_name: MetricsSourceType=None, source_type: str=None, unit: MetricsUnit=None, value: float=None):
        """Metrics - a model defined in OpenAPI

        :param ma_counter_name: The ma_counter_name of this Metrics.
        :param name: The name of this Metrics.
        :param observed_timestamp: The observed_timestamp of this Metrics.
        :param source_name: The source_name of this Metrics.
        :param source_type: The source_type of this Metrics.
        :param unit: The unit of this Metrics.
        :param value: The value of this Metrics.
        """
        self.openapi_types = {
            'ma_counter_name': str,
            'name': str,
            'observed_timestamp': datetime,
            'source_name': MetricsSourceType,
            'source_type': str,
            'unit': MetricsUnit,
            'value': float
        }

        self.attribute_map = {
            'ma_counter_name': 'maCounterName',
            'name': 'name',
            'observed_timestamp': 'observedTimestamp',
            'source_name': 'sourceName',
            'source_type': 'sourceType',
            'unit': 'unit',
            'value': 'value'
        }

        self._ma_counter_name = ma_counter_name
        self._name = name
        self._observed_timestamp = observed_timestamp
        self._source_name = source_name
        self._source_type = source_type
        self._unit = unit
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metrics of this Metrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ma_counter_name(self):
        """Gets the ma_counter_name of this Metrics.

        Name of the counter.

        :return: The ma_counter_name of this Metrics.
        :rtype: str
        """
        return self._ma_counter_name

    @ma_counter_name.setter
    def ma_counter_name(self, ma_counter_name):
        """Sets the ma_counter_name of this Metrics.

        Name of the counter.

        :param ma_counter_name: The ma_counter_name of this Metrics.
        :type ma_counter_name: str
        """

        self._ma_counter_name = ma_counter_name

    @property
    def name(self):
        """Gets the name of this Metrics.

        Name of the usage metric.

        :return: The name of this Metrics.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Metrics.

        Name of the usage metric.

        :param name: The name of this Metrics.
        :type name: str
        """

        self._name = name

    @property
    def observed_timestamp(self):
        """Gets the observed_timestamp of this Metrics.

        Time counter was observed.

        :return: The observed_timestamp of this Metrics.
        :rtype: datetime
        """
        return self._observed_timestamp

    @observed_timestamp.setter
    def observed_timestamp(self, observed_timestamp):
        """Sets the observed_timestamp of this Metrics.

        Time counter was observed.

        :param observed_timestamp: The observed_timestamp of this Metrics.
        :type observed_timestamp: datetime
        """

        self._observed_timestamp = observed_timestamp

    @property
    def source_name(self):
        """Gets the source_name of this Metrics.


        :return: The source_name of this Metrics.
        :rtype: MetricsSourceType
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this Metrics.


        :param source_name: The source_name of this Metrics.
        :type source_name: MetricsSourceType
        """

        self._source_name = source_name

    @property
    def source_type(self):
        """Gets the source_type of this Metrics.

        Type of the source.

        :return: The source_type of this Metrics.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this Metrics.

        Type of the source.

        :param source_type: The source_type of this Metrics.
        :type source_type: str
        """

        self._source_type = source_type

    @property
    def unit(self):
        """Gets the unit of this Metrics.


        :return: The unit of this Metrics.
        :rtype: MetricsUnit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Metrics.


        :param unit: The unit of this Metrics.
        :type unit: MetricsUnit
        """

        self._unit = unit

    @property
    def value(self):
        """Gets the value of this Metrics.

        Name of the usage metric.

        :return: The value of this Metrics.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Metrics.

        Name of the usage metric.

        :param value: The value of this Metrics.
        :type value: float
        """

        self._value = value
