/*
 * InfrastructureInsightsManagementClient
 * The Admin Infrastructure Insights Management Client.
 *
 * The version of the OpenAPI document: 2016-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AlertSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Models the base properties for health resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:45:48.811191-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BaseHealth {
  public static final String SERIALIZED_NAME_ALERT_SUMMARY = "alertSummary";
  @SerializedName(SERIALIZED_NAME_ALERT_SUMMARY)
  private AlertSummary alertSummary;

  public static final String SERIALIZED_NAME_HEALTH_STATE = "healthState";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATE)
  private String healthState;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_REGISTRATION_ID = "registrationId";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_ID)
  private String registrationId;

  public static final String SERIALIZED_NAME_ROUTE_PREFIX = "routePrefix";
  @SerializedName(SERIALIZED_NAME_ROUTE_PREFIX)
  private String routePrefix;

  public BaseHealth() {
  }

  public BaseHealth alertSummary(AlertSummary alertSummary) {
    this.alertSummary = alertSummary;
    return this;
  }

  /**
   * Get alertSummary
   * @return alertSummary
   */
  @javax.annotation.Nullable
  public AlertSummary getAlertSummary() {
    return alertSummary;
  }

  public void setAlertSummary(AlertSummary alertSummary) {
    this.alertSummary = alertSummary;
  }


  public BaseHealth healthState(String healthState) {
    this.healthState = healthState;
    return this;
  }

  /**
   * Health state.
   * @return healthState
   */
  @javax.annotation.Nullable
  public String getHealthState() {
    return healthState;
  }

  public void setHealthState(String healthState) {
    this.healthState = healthState;
  }


  public BaseHealth namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Namespace of the health resource.
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public BaseHealth registrationId(String registrationId) {
    this.registrationId = registrationId;
    return this;
  }

  /**
   * Registration ID.
   * @return registrationId
   */
  @javax.annotation.Nullable
  public String getRegistrationId() {
    return registrationId;
  }

  public void setRegistrationId(String registrationId) {
    this.registrationId = registrationId;
  }


  public BaseHealth routePrefix(String routePrefix) {
    this.routePrefix = routePrefix;
    return this;
  }

  /**
   * Route prefix.
   * @return routePrefix
   */
  @javax.annotation.Nullable
  public String getRoutePrefix() {
    return routePrefix;
  }

  public void setRoutePrefix(String routePrefix) {
    this.routePrefix = routePrefix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseHealth baseHealth = (BaseHealth) o;
    return Objects.equals(this.alertSummary, baseHealth.alertSummary) &&
        Objects.equals(this.healthState, baseHealth.healthState) &&
        Objects.equals(this.namespace, baseHealth.namespace) &&
        Objects.equals(this.registrationId, baseHealth.registrationId) &&
        Objects.equals(this.routePrefix, baseHealth.routePrefix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertSummary, healthState, namespace, registrationId, routePrefix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseHealth {\n");
    sb.append("    alertSummary: ").append(toIndentedString(alertSummary)).append("\n");
    sb.append("    healthState: ").append(toIndentedString(healthState)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    registrationId: ").append(toIndentedString(registrationId)).append("\n");
    sb.append("    routePrefix: ").append(toIndentedString(routePrefix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alertSummary");
    openapiFields.add("healthState");
    openapiFields.add("namespace");
    openapiFields.add("registrationId");
    openapiFields.add("routePrefix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BaseHealth
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BaseHealth.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BaseHealth is not found in the empty JSON string", BaseHealth.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BaseHealth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BaseHealth` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `alertSummary`
      if (jsonObj.get("alertSummary") != null && !jsonObj.get("alertSummary").isJsonNull()) {
        AlertSummary.validateJsonElement(jsonObj.get("alertSummary"));
      }
      if ((jsonObj.get("healthState") != null && !jsonObj.get("healthState").isJsonNull()) && !jsonObj.get("healthState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthState").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      if ((jsonObj.get("registrationId") != null && !jsonObj.get("registrationId").isJsonNull()) && !jsonObj.get("registrationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationId").toString()));
      }
      if ((jsonObj.get("routePrefix") != null && !jsonObj.get("routePrefix").isJsonNull()) && !jsonObj.get("routePrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routePrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routePrefix").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BaseHealth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BaseHealth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BaseHealth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BaseHealth.class));

       return (TypeAdapter<T>) new TypeAdapter<BaseHealth>() {
           @Override
           public void write(JsonWriter out, BaseHealth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BaseHealth read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BaseHealth given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BaseHealth
   * @throws IOException if the JSON string is invalid with respect to BaseHealth
   */
  public static BaseHealth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BaseHealth.class);
  }

  /**
   * Convert an instance of BaseHealth to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

