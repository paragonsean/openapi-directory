/**
 * InfrastructureInsightsManagementClient
 * The Admin Infrastructure Insights Management Client.
 *
 * The version of the OpenAPI document: 2016-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlertSummary from './AlertSummary';

/**
 * The BaseHealth model module.
 * @module model/BaseHealth
 * @version 2016-05-01
 */
class BaseHealth {
    /**
     * Constructs a new <code>BaseHealth</code>.
     * Models the base properties for health resource.
     * @alias module:model/BaseHealth
     */
    constructor() { 
        
        BaseHealth.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BaseHealth</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BaseHealth} obj Optional instance to populate.
     * @return {module:model/BaseHealth} The populated <code>BaseHealth</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BaseHealth();

            if (data.hasOwnProperty('alertSummary')) {
                obj['alertSummary'] = AlertSummary.constructFromObject(data['alertSummary']);
            }
            if (data.hasOwnProperty('healthState')) {
                obj['healthState'] = ApiClient.convertToType(data['healthState'], 'String');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('registrationId')) {
                obj['registrationId'] = ApiClient.convertToType(data['registrationId'], 'String');
            }
            if (data.hasOwnProperty('routePrefix')) {
                obj['routePrefix'] = ApiClient.convertToType(data['routePrefix'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BaseHealth</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BaseHealth</code>.
     */
    static validateJSON(data) {
        // validate the optional field `alertSummary`
        if (data['alertSummary']) { // data not null
          AlertSummary.validateJSON(data['alertSummary']);
        }
        // ensure the json data is a string
        if (data['healthState'] && !(typeof data['healthState'] === 'string' || data['healthState'] instanceof String)) {
            throw new Error("Expected the field `healthState` to be a primitive type in the JSON string but got " + data['healthState']);
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // ensure the json data is a string
        if (data['registrationId'] && !(typeof data['registrationId'] === 'string' || data['registrationId'] instanceof String)) {
            throw new Error("Expected the field `registrationId` to be a primitive type in the JSON string but got " + data['registrationId']);
        }
        // ensure the json data is a string
        if (data['routePrefix'] && !(typeof data['routePrefix'] === 'string' || data['routePrefix'] instanceof String)) {
            throw new Error("Expected the field `routePrefix` to be a primitive type in the JSON string but got " + data['routePrefix']);
        }

        return true;
    }


}



/**
 * @member {module:model/AlertSummary} alertSummary
 */
BaseHealth.prototype['alertSummary'] = undefined;

/**
 * Health state.
 * @member {String} healthState
 */
BaseHealth.prototype['healthState'] = undefined;

/**
 * Namespace of the health resource.
 * @member {String} namespace
 */
BaseHealth.prototype['namespace'] = undefined;

/**
 * Registration ID.
 * @member {String} registrationId
 */
BaseHealth.prototype['registrationId'] = undefined;

/**
 * Route prefix.
 * @member {String} routePrefix
 */
BaseHealth.prototype['routePrefix'] = undefined;






export default BaseHealth;

