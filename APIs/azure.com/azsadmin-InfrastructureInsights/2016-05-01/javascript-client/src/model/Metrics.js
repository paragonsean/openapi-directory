/**
 * InfrastructureInsightsManagementClient
 * The Admin Infrastructure Insights Management Client.
 *
 * The version of the OpenAPI document: 2016-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricsSourceType from './MetricsSourceType';
import MetricsUnit from './MetricsUnit';

/**
 * The Metrics model module.
 * @module model/Metrics
 * @version 2016-05-01
 */
class Metrics {
    /**
     * Constructs a new <code>Metrics</code>.
     * Metrics for a source.
     * @alias module:model/Metrics
     */
    constructor() { 
        
        Metrics.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Metrics</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Metrics} obj Optional instance to populate.
     * @return {module:model/Metrics} The populated <code>Metrics</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Metrics();

            if (data.hasOwnProperty('maCounterName')) {
                obj['maCounterName'] = ApiClient.convertToType(data['maCounterName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('observedTimestamp')) {
                obj['observedTimestamp'] = ApiClient.convertToType(data['observedTimestamp'], 'Date');
            }
            if (data.hasOwnProperty('sourceName')) {
                obj['sourceName'] = MetricsSourceType.constructFromObject(data['sourceName']);
            }
            if (data.hasOwnProperty('sourceType')) {
                obj['sourceType'] = ApiClient.convertToType(data['sourceType'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = MetricsUnit.constructFromObject(data['unit']);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Metrics</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Metrics</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['maCounterName'] && !(typeof data['maCounterName'] === 'string' || data['maCounterName'] instanceof String)) {
            throw new Error("Expected the field `maCounterName` to be a primitive type in the JSON string but got " + data['maCounterName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['sourceType'] && !(typeof data['sourceType'] === 'string' || data['sourceType'] instanceof String)) {
            throw new Error("Expected the field `sourceType` to be a primitive type in the JSON string but got " + data['sourceType']);
        }

        return true;
    }


}



/**
 * Name of the counter.
 * @member {String} maCounterName
 */
Metrics.prototype['maCounterName'] = undefined;

/**
 * Name of the usage metric.
 * @member {String} name
 */
Metrics.prototype['name'] = undefined;

/**
 * Time counter was observed.
 * @member {Date} observedTimestamp
 */
Metrics.prototype['observedTimestamp'] = undefined;

/**
 * @member {module:model/MetricsSourceType} sourceName
 */
Metrics.prototype['sourceName'] = undefined;

/**
 * Type of the source.
 * @member {String} sourceType
 */
Metrics.prototype['sourceType'] = undefined;

/**
 * @member {module:model/MetricsUnit} unit
 */
Metrics.prototype['unit'] = undefined;

/**
 * Name of the usage metric.
 * @member {Number} value
 */
Metrics.prototype['value'] = undefined;






export default Metrics;

