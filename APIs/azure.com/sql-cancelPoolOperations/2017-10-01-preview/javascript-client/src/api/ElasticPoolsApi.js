/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ElasticPoolOperationListResult from '../model/ElasticPoolOperationListResult';

/**
* ElasticPools service.
* @module api/ElasticPoolsApi
* @version 2017-10-01-preview
*/
export default class ElasticPoolsApi {

    /**
    * Constructs a new ElasticPoolsApi. 
    * @alias module:api/ElasticPoolsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the elasticPoolOperationsCancel operation.
     * @callback module:api/ElasticPoolsApi~elasticPoolOperationsCancelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels the asynchronous operation on the elastic pool.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} elasticPoolName 
     * @param {String} operationId The operation identifier.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/ElasticPoolsApi~elasticPoolOperationsCancelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    elasticPoolOperationsCancel(resourceGroupName, serverName, elasticPoolName, operationId, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling elasticPoolOperationsCancel");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling elasticPoolOperationsCancel");
      }
      // verify the required parameter 'elasticPoolName' is set
      if (elasticPoolName === undefined || elasticPoolName === null) {
        throw new Error("Missing the required parameter 'elasticPoolName' when calling elasticPoolOperationsCancel");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling elasticPoolOperationsCancel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling elasticPoolOperationsCancel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling elasticPoolOperationsCancel");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'elasticPoolName': elasticPoolName,
        'operationId': operationId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/operations/{operationId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elasticPoolOperationsListByElasticPool operation.
     * @callback module:api/ElasticPoolsApi~elasticPoolOperationsListByElasticPoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ElasticPoolOperationListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of operations performed on the elastic pool.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} elasticPoolName 
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} apiVersion The API version to use for the request.
     * @param {module:api/ElasticPoolsApi~elasticPoolOperationsListByElasticPoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ElasticPoolOperationListResult}
     */
    elasticPoolOperationsListByElasticPool(resourceGroupName, serverName, elasticPoolName, subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling elasticPoolOperationsListByElasticPool");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling elasticPoolOperationsListByElasticPool");
      }
      // verify the required parameter 'elasticPoolName' is set
      if (elasticPoolName === undefined || elasticPoolName === null) {
        throw new Error("Missing the required parameter 'elasticPoolName' when calling elasticPoolOperationsListByElasticPool");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling elasticPoolOperationsListByElasticPool");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling elasticPoolOperationsListByElasticPool");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'elasticPoolName': elasticPoolName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ElasticPoolOperationListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
