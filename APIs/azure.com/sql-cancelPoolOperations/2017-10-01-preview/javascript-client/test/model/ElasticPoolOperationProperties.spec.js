/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SqlManagementClient);
  }
}(this, function(expect, SqlManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SqlManagementClient.ElasticPoolOperationProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ElasticPoolOperationProperties', function() {
    it('should create an instance of ElasticPoolOperationProperties', function() {
      // uncomment below and update the code to test ElasticPoolOperationProperties
      //var instance = new SqlManagementClient.ElasticPoolOperationProperties();
      //expect(instance).to.be.a(SqlManagementClient.ElasticPoolOperationProperties);
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new SqlManagementClient.ElasticPoolOperationProperties();
      //expect(instance).to.be();
    });

    it('should have the property elasticPoolName (base name: "elasticPoolName")', function() {
      // uncomment below and update the code to test the property elasticPoolName
      //var instance = new SqlManagementClient.ElasticPoolOperationProperties();
      //expect(instance).to.be();
    });

    it('should have the property errorCode (base name: "errorCode")', function() {
      // uncomment below and update the code to test the property errorCode
      //var instance = new SqlManagementClient.ElasticPoolOperationProperties();
      //expect(instance).to.be();
    });

    it('should have the property errorDescription (base name: "errorDescription")', function() {
      // uncomment below and update the code to test the property errorDescription
      //var instance = new SqlManagementClient.ElasticPoolOperationProperties();
      //expect(instance).to.be();
    });

    it('should have the property errorSeverity (base name: "errorSeverity")', function() {
      // uncomment below and update the code to test the property errorSeverity
      //var instance = new SqlManagementClient.ElasticPoolOperationProperties();
      //expect(instance).to.be();
    });

    it('should have the property estimatedCompletionTime (base name: "estimatedCompletionTime")', function() {
      // uncomment below and update the code to test the property estimatedCompletionTime
      //var instance = new SqlManagementClient.ElasticPoolOperationProperties();
      //expect(instance).to.be();
    });

    it('should have the property isCancellable (base name: "isCancellable")', function() {
      // uncomment below and update the code to test the property isCancellable
      //var instance = new SqlManagementClient.ElasticPoolOperationProperties();
      //expect(instance).to.be();
    });

    it('should have the property isUserError (base name: "isUserError")', function() {
      // uncomment below and update the code to test the property isUserError
      //var instance = new SqlManagementClient.ElasticPoolOperationProperties();
      //expect(instance).to.be();
    });

    it('should have the property operation (base name: "operation")', function() {
      // uncomment below and update the code to test the property operation
      //var instance = new SqlManagementClient.ElasticPoolOperationProperties();
      //expect(instance).to.be();
    });

    it('should have the property operationFriendlyName (base name: "operationFriendlyName")', function() {
      // uncomment below and update the code to test the property operationFriendlyName
      //var instance = new SqlManagementClient.ElasticPoolOperationProperties();
      //expect(instance).to.be();
    });

    it('should have the property percentComplete (base name: "percentComplete")', function() {
      // uncomment below and update the code to test the property percentComplete
      //var instance = new SqlManagementClient.ElasticPoolOperationProperties();
      //expect(instance).to.be();
    });

    it('should have the property serverName (base name: "serverName")', function() {
      // uncomment below and update the code to test the property serverName
      //var instance = new SqlManagementClient.ElasticPoolOperationProperties();
      //expect(instance).to.be();
    });

    it('should have the property startTime (base name: "startTime")', function() {
      // uncomment below and update the code to test the property startTime
      //var instance = new SqlManagementClient.ElasticPoolOperationProperties();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new SqlManagementClient.ElasticPoolOperationProperties();
      //expect(instance).to.be();
    });

  });

}));
