/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of a elastic pool operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:48:36.828716-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ElasticPoolOperationProperties {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ELASTIC_POOL_NAME = "elasticPoolName";
  @SerializedName(SERIALIZED_NAME_ELASTIC_POOL_NAME)
  private String elasticPoolName;

  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private Integer errorCode;

  public static final String SERIALIZED_NAME_ERROR_DESCRIPTION = "errorDescription";
  @SerializedName(SERIALIZED_NAME_ERROR_DESCRIPTION)
  private String errorDescription;

  public static final String SERIALIZED_NAME_ERROR_SEVERITY = "errorSeverity";
  @SerializedName(SERIALIZED_NAME_ERROR_SEVERITY)
  private Integer errorSeverity;

  public static final String SERIALIZED_NAME_ESTIMATED_COMPLETION_TIME = "estimatedCompletionTime";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_COMPLETION_TIME)
  private OffsetDateTime estimatedCompletionTime;

  public static final String SERIALIZED_NAME_IS_CANCELLABLE = "isCancellable";
  @SerializedName(SERIALIZED_NAME_IS_CANCELLABLE)
  private Boolean isCancellable;

  public static final String SERIALIZED_NAME_IS_USER_ERROR = "isUserError";
  @SerializedName(SERIALIZED_NAME_IS_USER_ERROR)
  private Boolean isUserError;

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private String operation;

  public static final String SERIALIZED_NAME_OPERATION_FRIENDLY_NAME = "operationFriendlyName";
  @SerializedName(SERIALIZED_NAME_OPERATION_FRIENDLY_NAME)
  private String operationFriendlyName;

  public static final String SERIALIZED_NAME_PERCENT_COMPLETE = "percentComplete";
  @SerializedName(SERIALIZED_NAME_PERCENT_COMPLETE)
  private Integer percentComplete;

  public static final String SERIALIZED_NAME_SERVER_NAME = "serverName";
  @SerializedName(SERIALIZED_NAME_SERVER_NAME)
  private String serverName;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public ElasticPoolOperationProperties() {
  }

  public ElasticPoolOperationProperties(
     String description, 
     String elasticPoolName, 
     Integer errorCode, 
     String errorDescription, 
     Integer errorSeverity, 
     OffsetDateTime estimatedCompletionTime, 
     Boolean isCancellable, 
     Boolean isUserError, 
     String operation, 
     String operationFriendlyName, 
     Integer percentComplete, 
     String serverName, 
     OffsetDateTime startTime, 
     String state
  ) {
    this();
    this.description = description;
    this.elasticPoolName = elasticPoolName;
    this.errorCode = errorCode;
    this.errorDescription = errorDescription;
    this.errorSeverity = errorSeverity;
    this.estimatedCompletionTime = estimatedCompletionTime;
    this.isCancellable = isCancellable;
    this.isUserError = isUserError;
    this.operation = operation;
    this.operationFriendlyName = operationFriendlyName;
    this.percentComplete = percentComplete;
    this.serverName = serverName;
    this.startTime = startTime;
    this.state = state;
  }

  /**
   * The operation description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * The name of the elastic pool the operation is being performed on.
   * @return elasticPoolName
   */
  @javax.annotation.Nullable
  public String getElasticPoolName() {
    return elasticPoolName;
  }



  /**
   * The operation error code.
   * @return errorCode
   */
  @javax.annotation.Nullable
  public Integer getErrorCode() {
    return errorCode;
  }



  /**
   * The operation error description.
   * @return errorDescription
   */
  @javax.annotation.Nullable
  public String getErrorDescription() {
    return errorDescription;
  }



  /**
   * The operation error severity.
   * @return errorSeverity
   */
  @javax.annotation.Nullable
  public Integer getErrorSeverity() {
    return errorSeverity;
  }



  /**
   * The estimated completion time of the operation.
   * @return estimatedCompletionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEstimatedCompletionTime() {
    return estimatedCompletionTime;
  }



  /**
   * Whether the operation can be cancelled.
   * @return isCancellable
   */
  @javax.annotation.Nullable
  public Boolean getIsCancellable() {
    return isCancellable;
  }



  /**
   * Whether or not the error is a user error.
   * @return isUserError
   */
  @javax.annotation.Nullable
  public Boolean getIsUserError() {
    return isUserError;
  }



  /**
   * The name of operation.
   * @return operation
   */
  @javax.annotation.Nullable
  public String getOperation() {
    return operation;
  }



  /**
   * The friendly name of operation.
   * @return operationFriendlyName
   */
  @javax.annotation.Nullable
  public String getOperationFriendlyName() {
    return operationFriendlyName;
  }



  /**
   * The percentage of the operation completed.
   * @return percentComplete
   */
  @javax.annotation.Nullable
  public Integer getPercentComplete() {
    return percentComplete;
  }



  /**
   * The name of the server.
   * @return serverName
   */
  @javax.annotation.Nullable
  public String getServerName() {
    return serverName;
  }



  /**
   * The operation start time.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }



  /**
   * The operation state.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElasticPoolOperationProperties elasticPoolOperationProperties = (ElasticPoolOperationProperties) o;
    return Objects.equals(this.description, elasticPoolOperationProperties.description) &&
        Objects.equals(this.elasticPoolName, elasticPoolOperationProperties.elasticPoolName) &&
        Objects.equals(this.errorCode, elasticPoolOperationProperties.errorCode) &&
        Objects.equals(this.errorDescription, elasticPoolOperationProperties.errorDescription) &&
        Objects.equals(this.errorSeverity, elasticPoolOperationProperties.errorSeverity) &&
        Objects.equals(this.estimatedCompletionTime, elasticPoolOperationProperties.estimatedCompletionTime) &&
        Objects.equals(this.isCancellable, elasticPoolOperationProperties.isCancellable) &&
        Objects.equals(this.isUserError, elasticPoolOperationProperties.isUserError) &&
        Objects.equals(this.operation, elasticPoolOperationProperties.operation) &&
        Objects.equals(this.operationFriendlyName, elasticPoolOperationProperties.operationFriendlyName) &&
        Objects.equals(this.percentComplete, elasticPoolOperationProperties.percentComplete) &&
        Objects.equals(this.serverName, elasticPoolOperationProperties.serverName) &&
        Objects.equals(this.startTime, elasticPoolOperationProperties.startTime) &&
        Objects.equals(this.state, elasticPoolOperationProperties.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, elasticPoolName, errorCode, errorDescription, errorSeverity, estimatedCompletionTime, isCancellable, isUserError, operation, operationFriendlyName, percentComplete, serverName, startTime, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElasticPoolOperationProperties {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    elasticPoolName: ").append(toIndentedString(elasticPoolName)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorDescription: ").append(toIndentedString(errorDescription)).append("\n");
    sb.append("    errorSeverity: ").append(toIndentedString(errorSeverity)).append("\n");
    sb.append("    estimatedCompletionTime: ").append(toIndentedString(estimatedCompletionTime)).append("\n");
    sb.append("    isCancellable: ").append(toIndentedString(isCancellable)).append("\n");
    sb.append("    isUserError: ").append(toIndentedString(isUserError)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    operationFriendlyName: ").append(toIndentedString(operationFriendlyName)).append("\n");
    sb.append("    percentComplete: ").append(toIndentedString(percentComplete)).append("\n");
    sb.append("    serverName: ").append(toIndentedString(serverName)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("elasticPoolName");
    openapiFields.add("errorCode");
    openapiFields.add("errorDescription");
    openapiFields.add("errorSeverity");
    openapiFields.add("estimatedCompletionTime");
    openapiFields.add("isCancellable");
    openapiFields.add("isUserError");
    openapiFields.add("operation");
    openapiFields.add("operationFriendlyName");
    openapiFields.add("percentComplete");
    openapiFields.add("serverName");
    openapiFields.add("startTime");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ElasticPoolOperationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ElasticPoolOperationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ElasticPoolOperationProperties is not found in the empty JSON string", ElasticPoolOperationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ElasticPoolOperationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ElasticPoolOperationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("elasticPoolName") != null && !jsonObj.get("elasticPoolName").isJsonNull()) && !jsonObj.get("elasticPoolName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `elasticPoolName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("elasticPoolName").toString()));
      }
      if ((jsonObj.get("errorDescription") != null && !jsonObj.get("errorDescription").isJsonNull()) && !jsonObj.get("errorDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorDescription").toString()));
      }
      if ((jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonNull()) && !jsonObj.get("operation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operation").toString()));
      }
      if ((jsonObj.get("operationFriendlyName") != null && !jsonObj.get("operationFriendlyName").isJsonNull()) && !jsonObj.get("operationFriendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationFriendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationFriendlyName").toString()));
      }
      if ((jsonObj.get("serverName") != null && !jsonObj.get("serverName").isJsonNull()) && !jsonObj.get("serverName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverName").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ElasticPoolOperationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ElasticPoolOperationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ElasticPoolOperationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ElasticPoolOperationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ElasticPoolOperationProperties>() {
           @Override
           public void write(JsonWriter out, ElasticPoolOperationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ElasticPoolOperationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ElasticPoolOperationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ElasticPoolOperationProperties
   * @throws IOException if the JSON string is invalid with respect to ElasticPoolOperationProperties
   */
  public static ElasticPoolOperationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ElasticPoolOperationProperties.class);
  }

  /**
   * Convert an instance of ElasticPoolOperationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

