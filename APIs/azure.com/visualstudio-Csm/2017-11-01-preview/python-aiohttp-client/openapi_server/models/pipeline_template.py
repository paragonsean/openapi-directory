# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_source import ApplicationSource
from openapi_server.models.application_target import ApplicationTarget
from openapi_server.models.authorization import Authorization
from openapi_server import util


class PipelineTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_source: ApplicationSource=None, application_target: ApplicationTarget=None, authorization_details: Dict[str, Authorization]=None):
        """PipelineTemplate - a model defined in OpenAPI

        :param application_source: The application_source of this PipelineTemplate.
        :param application_target: The application_target of this PipelineTemplate.
        :param authorization_details: The authorization_details of this PipelineTemplate.
        """
        self.openapi_types = {
            'application_source': ApplicationSource,
            'application_target': ApplicationTarget,
            'authorization_details': Dict[str, Authorization]
        }

        self.attribute_map = {
            'application_source': 'applicationSource',
            'application_target': 'applicationTarget',
            'authorization_details': 'authorizationDetails'
        }

        self._application_source = application_source
        self._application_target = application_target
        self._authorization_details = authorization_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PipelineTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PipelineTemplate of this PipelineTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_source(self):
        """Gets the application_source of this PipelineTemplate.


        :return: The application_source of this PipelineTemplate.
        :rtype: ApplicationSource
        """
        return self._application_source

    @application_source.setter
    def application_source(self, application_source):
        """Sets the application_source of this PipelineTemplate.


        :param application_source: The application_source of this PipelineTemplate.
        :type application_source: ApplicationSource
        """
        if application_source is None:
            raise ValueError("Invalid value for `application_source`, must not be `None`")

        self._application_source = application_source

    @property
    def application_target(self):
        """Gets the application_target of this PipelineTemplate.


        :return: The application_target of this PipelineTemplate.
        :rtype: ApplicationTarget
        """
        return self._application_target

    @application_target.setter
    def application_target(self, application_target):
        """Sets the application_target of this PipelineTemplate.


        :param application_target: The application_target of this PipelineTemplate.
        :type application_target: ApplicationTarget
        """
        if application_target is None:
            raise ValueError("Invalid value for `application_target`, must not be `None`")

        self._application_target = application_target

    @property
    def authorization_details(self):
        """Gets the authorization_details of this PipelineTemplate.

        Global dictionary of authorization details used by the pipeline, with a friendly name as key. Individual resource in the pipeline can reference to a specific authorization info using the friendly name.

        :return: The authorization_details of this PipelineTemplate.
        :rtype: Dict[str, Authorization]
        """
        return self._authorization_details

    @authorization_details.setter
    def authorization_details(self, authorization_details):
        """Sets the authorization_details of this PipelineTemplate.

        Global dictionary of authorization details used by the pipeline, with a friendly name as key. Individual resource in the pipeline can reference to a specific authorization info using the friendly name.

        :param authorization_details: The authorization_details of this PipelineTemplate.
        :type authorization_details: Dict[str, Authorization]
        """
        if authorization_details is None:
            raise ValueError("Invalid value for `authorization_details`, must not be `None`")

        self._authorization_details = authorization_details
