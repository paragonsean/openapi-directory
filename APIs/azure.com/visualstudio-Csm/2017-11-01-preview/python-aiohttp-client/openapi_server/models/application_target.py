# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.target_resource import TargetResource
from openapi_server import util


class ApplicationTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resources: List[TargetResource]=None, target_type: str=None):
        """ApplicationTarget - a model defined in OpenAPI

        :param resources: The resources of this ApplicationTarget.
        :param target_type: The target_type of this ApplicationTarget.
        """
        self.openapi_types = {
            'resources': List[TargetResource],
            'target_type': str
        }

        self.attribute_map = {
            'resources': 'resources',
            'target_type': 'targetType'
        }

        self._resources = resources
        self._target_type = target_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationTarget of this ApplicationTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resources(self):
        """Gets the resources of this ApplicationTarget.

        List of target resources.

        :return: The resources of this ApplicationTarget.
        :rtype: List[TargetResource]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this ApplicationTarget.

        List of target resources.

        :param resources: The resources of this ApplicationTarget.
        :type resources: List[TargetResource]
        """
        if resources is None:
            raise ValueError("Invalid value for `resources`, must not be `None`")

        self._resources = resources

    @property
    def target_type(self):
        """Gets the target_type of this ApplicationTarget.

        Type of target.

        :return: The target_type of this ApplicationTarget.
        :rtype: str
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this ApplicationTarget.

        Type of target.

        :param target_type: The target_type of this ApplicationTarget.
        :type target_type: str
        """
        allowed_values = ["WindowsAppService"]  # noqa: E501
        if target_type not in allowed_values:
            raise ValueError(
                "Invalid value for `target_type` ({0}), must be one of {1}"
                .format(target_type, allowed_values)
            )

        self._target_type = target_type
