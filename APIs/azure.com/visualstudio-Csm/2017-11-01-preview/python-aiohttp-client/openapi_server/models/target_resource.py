# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TargetResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_reference: str=None, id: str=None, role: str=None):
        """TargetResource - a model defined in OpenAPI

        :param authorization_reference: The authorization_reference of this TargetResource.
        :param id: The id of this TargetResource.
        :param role: The role of this TargetResource.
        """
        self.openapi_types = {
            'authorization_reference': str,
            'id': str,
            'role': str
        }

        self.attribute_map = {
            'authorization_reference': 'authorizationReference',
            'id': 'id',
            'role': 'role'
        }

        self._authorization_reference = authorization_reference
        self._id = id
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetResource of this TargetResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_reference(self):
        """Gets the authorization_reference of this TargetResource.

        Reference to the authorization info used to access the target resource. This value is used as a key into the global authorization details dictionary.

        :return: The authorization_reference of this TargetResource.
        :rtype: str
        """
        return self._authorization_reference

    @authorization_reference.setter
    def authorization_reference(self, authorization_reference):
        """Sets the authorization_reference of this TargetResource.

        Reference to the authorization info used to access the target resource. This value is used as a key into the global authorization details dictionary.

        :param authorization_reference: The authorization_reference of this TargetResource.
        :type authorization_reference: str
        """

        self._authorization_reference = authorization_reference

    @property
    def id(self):
        """Gets the id of this TargetResource.

        Unique identifier of the target resource.

        :return: The id of this TargetResource.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TargetResource.

        Unique identifier of the target resource.

        :param id: The id of this TargetResource.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def role(self):
        """Gets the role of this TargetResource.

        Role of the target resource.

        :return: The role of this TargetResource.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this TargetResource.

        Role of the target resource.

        :param role: The role of this TargetResource.
        :type role: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role
