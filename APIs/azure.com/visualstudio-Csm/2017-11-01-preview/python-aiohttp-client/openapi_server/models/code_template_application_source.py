# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_source import ApplicationSource
from openapi_server import util


class CodeTemplateApplicationSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_configuration: Dict[str, str]=None, application_type: str=None, source_type: str=None):
        """CodeTemplateApplicationSource - a model defined in OpenAPI

        :param application_configuration: The application_configuration of this CodeTemplateApplicationSource.
        :param application_type: The application_type of this CodeTemplateApplicationSource.
        :param source_type: The source_type of this CodeTemplateApplicationSource.
        """
        self.openapi_types = {
            'application_configuration': Dict[str, str],
            'application_type': str,
            'source_type': str
        }

        self.attribute_map = {
            'application_configuration': 'applicationConfiguration',
            'application_type': 'applicationType',
            'source_type': 'sourceType'
        }

        self._application_configuration = application_configuration
        self._application_type = application_type
        self._source_type = source_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CodeTemplateApplicationSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CodeTemplateApplicationSource of this CodeTemplateApplicationSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_configuration(self):
        """Gets the application_configuration of this CodeTemplateApplicationSource.

        Application specific properties.

        :return: The application_configuration of this CodeTemplateApplicationSource.
        :rtype: Dict[str, str]
        """
        return self._application_configuration

    @application_configuration.setter
    def application_configuration(self, application_configuration):
        """Sets the application_configuration of this CodeTemplateApplicationSource.

        Application specific properties.

        :param application_configuration: The application_configuration of this CodeTemplateApplicationSource.
        :type application_configuration: Dict[str, str]
        """

        self._application_configuration = application_configuration

    @property
    def application_type(self):
        """Gets the application_type of this CodeTemplateApplicationSource.

        Type of application.

        :return: The application_type of this CodeTemplateApplicationSource.
        :rtype: str
        """
        return self._application_type

    @application_type.setter
    def application_type(self, application_type):
        """Sets the application_type of this CodeTemplateApplicationSource.

        Type of application.

        :param application_type: The application_type of this CodeTemplateApplicationSource.
        :type application_type: str
        """
        allowed_values = ["AspDotNet", "AspDotNetCore", "NodeJs"]  # noqa: E501
        if application_type not in allowed_values:
            raise ValueError(
                "Invalid value for `application_type` ({0}), must be one of {1}"
                .format(application_type, allowed_values)
            )

        self._application_type = application_type

    @property
    def source_type(self):
        """Gets the source_type of this CodeTemplateApplicationSource.

        Type of application source.

        :return: The source_type of this CodeTemplateApplicationSource.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this CodeTemplateApplicationSource.

        Type of application source.

        :param source_type: The source_type of this CodeTemplateApplicationSource.
        :type source_type: str
        """
        allowed_values = ["CodeTemplate", "CodeRepository"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"
                .format(source_type, allowed_values)
            )

        self._source_type = source_type
