# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pipeline_template import PipelineTemplate
from openapi_server import util


class ProjectResourceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bootstrap_pipeline_template: PipelineTemplate=None, owner_upn: str=None, process_template_id: str=None, tfs_unique_identifier: str=None, version_control_option: str=None):
        """ProjectResourceProperties - a model defined in OpenAPI

        :param bootstrap_pipeline_template: The bootstrap_pipeline_template of this ProjectResourceProperties.
        :param owner_upn: The owner_upn of this ProjectResourceProperties.
        :param process_template_id: The process_template_id of this ProjectResourceProperties.
        :param tfs_unique_identifier: The tfs_unique_identifier of this ProjectResourceProperties.
        :param version_control_option: The version_control_option of this ProjectResourceProperties.
        """
        self.openapi_types = {
            'bootstrap_pipeline_template': PipelineTemplate,
            'owner_upn': str,
            'process_template_id': str,
            'tfs_unique_identifier': str,
            'version_control_option': str
        }

        self.attribute_map = {
            'bootstrap_pipeline_template': 'bootstrapPipelineTemplate',
            'owner_upn': 'ownerUpn',
            'process_template_id': 'processTemplateId',
            'tfs_unique_identifier': 'tfsUniqueIdentifier',
            'version_control_option': 'versionControlOption'
        }

        self._bootstrap_pipeline_template = bootstrap_pipeline_template
        self._owner_upn = owner_upn
        self._process_template_id = process_template_id
        self._tfs_unique_identifier = tfs_unique_identifier
        self._version_control_option = version_control_option

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectResourceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectResourceProperties of this ProjectResourceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bootstrap_pipeline_template(self):
        """Gets the bootstrap_pipeline_template of this ProjectResourceProperties.


        :return: The bootstrap_pipeline_template of this ProjectResourceProperties.
        :rtype: PipelineTemplate
        """
        return self._bootstrap_pipeline_template

    @bootstrap_pipeline_template.setter
    def bootstrap_pipeline_template(self, bootstrap_pipeline_template):
        """Sets the bootstrap_pipeline_template of this ProjectResourceProperties.


        :param bootstrap_pipeline_template: The bootstrap_pipeline_template of this ProjectResourceProperties.
        :type bootstrap_pipeline_template: PipelineTemplate
        """

        self._bootstrap_pipeline_template = bootstrap_pipeline_template

    @property
    def owner_upn(self):
        """Gets the owner_upn of this ProjectResourceProperties.

        Optional UPN of the owner, on-behalf-of whom the project is being created.

        :return: The owner_upn of this ProjectResourceProperties.
        :rtype: str
        """
        return self._owner_upn

    @owner_upn.setter
    def owner_upn(self, owner_upn):
        """Sets the owner_upn of this ProjectResourceProperties.

        Optional UPN of the owner, on-behalf-of whom the project is being created.

        :param owner_upn: The owner_upn of this ProjectResourceProperties.
        :type owner_upn: str
        """

        self._owner_upn = owner_upn

    @property
    def process_template_id(self):
        """Gets the process_template_id of this ProjectResourceProperties.

        Process template to use in the project.

        :return: The process_template_id of this ProjectResourceProperties.
        :rtype: str
        """
        return self._process_template_id

    @process_template_id.setter
    def process_template_id(self, process_template_id):
        """Sets the process_template_id of this ProjectResourceProperties.

        Process template to use in the project.

        :param process_template_id: The process_template_id of this ProjectResourceProperties.
        :type process_template_id: str
        """
        allowed_values = ["Scrum", "Agile", "Cmmi"]  # noqa: E501
        if process_template_id not in allowed_values:
            raise ValueError(
                "Invalid value for `process_template_id` ({0}), must be one of {1}"
                .format(process_template_id, allowed_values)
            )

        self._process_template_id = process_template_id

    @property
    def tfs_unique_identifier(self):
        """Gets the tfs_unique_identifier of this ProjectResourceProperties.

        Unique identifier of the VSTS project.

        :return: The tfs_unique_identifier of this ProjectResourceProperties.
        :rtype: str
        """
        return self._tfs_unique_identifier

    @tfs_unique_identifier.setter
    def tfs_unique_identifier(self, tfs_unique_identifier):
        """Sets the tfs_unique_identifier of this ProjectResourceProperties.

        Unique identifier of the VSTS project.

        :param tfs_unique_identifier: The tfs_unique_identifier of this ProjectResourceProperties.
        :type tfs_unique_identifier: str
        """

        self._tfs_unique_identifier = tfs_unique_identifier

    @property
    def version_control_option(self):
        """Gets the version_control_option of this ProjectResourceProperties.

        Version control to use for the default repo created in the project.

        :return: The version_control_option of this ProjectResourceProperties.
        :rtype: str
        """
        return self._version_control_option

    @version_control_option.setter
    def version_control_option(self, version_control_option):
        """Sets the version_control_option of this ProjectResourceProperties.

        Version control to use for the default repo created in the project.

        :param version_control_option: The version_control_option of this ProjectResourceProperties.
        :type version_control_option: str
        """
        allowed_values = ["Git", "Tfvc"]  # noqa: E501
        if version_control_option not in allowed_values:
            raise ValueError(
                "Invalid value for `version_control_option` ({0}), must be one of {1}"
                .format(version_control_option, allowed_values)
            )

        self._version_control_option = version_control_option
