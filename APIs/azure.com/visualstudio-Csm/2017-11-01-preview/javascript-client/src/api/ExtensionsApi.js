/**
 * Visual Studio Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2017-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExtensionResource from '../model/ExtensionResource';
import ExtensionResourceListResult from '../model/ExtensionResourceListResult';
import ExtensionResourceRequest from '../model/ExtensionResourceRequest';

/**
* Extensions service.
* @module api/ExtensionsApi
* @version 2017-11-01-preview
*/
export default class ExtensionsApi {

    /**
    * Constructs a new ExtensionsApi. 
    * @alias module:api/ExtensionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the extensionsCreate operation.
     * @callback module:api/ExtensionsApi~extensionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtensionResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extensions_Create
     * Registers the extension with a Visual Studio Team Services account.
     * @param {String} resourceGroupName Name of the resource group within the Azure subscription.
     * @param {String} subscriptionId The Azure subscription identifier.
     * @param {String} apiVersion API Version
     * @param {String} accountResourceName The name of the Visual Studio Team Services account resource.
     * @param {String} extensionResourceName The name of the extension.
     * @param {module:model/ExtensionResourceRequest} body An object containing additional information related to the extension request.
     * @param {module:api/ExtensionsApi~extensionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtensionResource}
     */
    extensionsCreate(resourceGroupName, subscriptionId, apiVersion, accountResourceName, extensionResourceName, body, callback) {
      let postBody = body;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling extensionsCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling extensionsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling extensionsCreate");
      }
      // verify the required parameter 'accountResourceName' is set
      if (accountResourceName === undefined || accountResourceName === null) {
        throw new Error("Missing the required parameter 'accountResourceName' when calling extensionsCreate");
      }
      // verify the required parameter 'extensionResourceName' is set
      if (extensionResourceName === undefined || extensionResourceName === null) {
        throw new Error("Missing the required parameter 'extensionResourceName' when calling extensionsCreate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling extensionsCreate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'accountResourceName': accountResourceName,
        'extensionResourceName': extensionResourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExtensionResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension/{extensionResourceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extensionsDelete operation.
     * @callback module:api/ExtensionsApi~extensionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extensions_Delete
     * Removes an extension resource registration for a Visual Studio Team Services account.
     * @param {String} resourceGroupName Name of the resource group within the Azure subscription.
     * @param {String} subscriptionId The Azure subscription identifier.
     * @param {String} apiVersion API Version
     * @param {String} accountResourceName The name of the Visual Studio Team Services account resource.
     * @param {String} extensionResourceName The name of the extension.
     * @param {module:api/ExtensionsApi~extensionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    extensionsDelete(resourceGroupName, subscriptionId, apiVersion, accountResourceName, extensionResourceName, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling extensionsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling extensionsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling extensionsDelete");
      }
      // verify the required parameter 'accountResourceName' is set
      if (accountResourceName === undefined || accountResourceName === null) {
        throw new Error("Missing the required parameter 'accountResourceName' when calling extensionsDelete");
      }
      // verify the required parameter 'extensionResourceName' is set
      if (extensionResourceName === undefined || extensionResourceName === null) {
        throw new Error("Missing the required parameter 'extensionResourceName' when calling extensionsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'accountResourceName': accountResourceName,
        'extensionResourceName': extensionResourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension/{extensionResourceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extensionsGet operation.
     * @callback module:api/ExtensionsApi~extensionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtensionResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extensions_Get
     * Gets the details of an extension associated with a Visual Studio Team Services account resource.
     * @param {String} resourceGroupName Name of the resource group within the Azure subscription.
     * @param {String} subscriptionId The Azure subscription identifier.
     * @param {String} apiVersion API Version
     * @param {String} accountResourceName The name of the Visual Studio Team Services account resource.
     * @param {String} extensionResourceName The name of the extension.
     * @param {module:api/ExtensionsApi~extensionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtensionResource}
     */
    extensionsGet(resourceGroupName, subscriptionId, apiVersion, accountResourceName, extensionResourceName, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling extensionsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling extensionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling extensionsGet");
      }
      // verify the required parameter 'accountResourceName' is set
      if (accountResourceName === undefined || accountResourceName === null) {
        throw new Error("Missing the required parameter 'accountResourceName' when calling extensionsGet");
      }
      // verify the required parameter 'extensionResourceName' is set
      if (extensionResourceName === undefined || extensionResourceName === null) {
        throw new Error("Missing the required parameter 'extensionResourceName' when calling extensionsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'accountResourceName': accountResourceName,
        'extensionResourceName': extensionResourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtensionResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension/{extensionResourceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extensionsListByAccount operation.
     * @callback module:api/ExtensionsApi~extensionsListByAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtensionResourceListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extensions_ListByAccount
     * Gets the details of the extension resources created within the resource group.
     * @param {String} resourceGroupName Name of the resource group within the Azure subscription.
     * @param {String} subscriptionId The Azure subscription identifier.
     * @param {String} apiVersion API Version
     * @param {String} accountResourceName The name of the Visual Studio Team Services account resource.
     * @param {module:api/ExtensionsApi~extensionsListByAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtensionResourceListResult}
     */
    extensionsListByAccount(resourceGroupName, subscriptionId, apiVersion, accountResourceName, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling extensionsListByAccount");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling extensionsListByAccount");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling extensionsListByAccount");
      }
      // verify the required parameter 'accountResourceName' is set
      if (accountResourceName === undefined || accountResourceName === null) {
        throw new Error("Missing the required parameter 'accountResourceName' when calling extensionsListByAccount");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'accountResourceName': accountResourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtensionResourceListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extensionsUpdate operation.
     * @callback module:api/ExtensionsApi~extensionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtensionResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extensions_Update
     * Updates an existing extension registration for the Visual Studio Team Services account.
     * @param {String} resourceGroupName Name of the resource group within the Azure subscription.
     * @param {String} subscriptionId The Azure subscription identifier.
     * @param {String} apiVersion API Version
     * @param {String} accountResourceName The name of the Visual Studio Team Services account resource.
     * @param {String} extensionResourceName The name of the extension.
     * @param {module:model/ExtensionResourceRequest} body An object containing additional information related to the extension request.
     * @param {module:api/ExtensionsApi~extensionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtensionResource}
     */
    extensionsUpdate(resourceGroupName, subscriptionId, apiVersion, accountResourceName, extensionResourceName, body, callback) {
      let postBody = body;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling extensionsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling extensionsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling extensionsUpdate");
      }
      // verify the required parameter 'accountResourceName' is set
      if (accountResourceName === undefined || accountResourceName === null) {
        throw new Error("Missing the required parameter 'accountResourceName' when calling extensionsUpdate");
      }
      // verify the required parameter 'extensionResourceName' is set
      if (extensionResourceName === undefined || extensionResourceName === null) {
        throw new Error("Missing the required parameter 'extensionResourceName' when calling extensionsUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling extensionsUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId,
        'accountResourceName': accountResourceName,
        'extensionResourceName': extensionResourceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExtensionResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension/{extensionResourceName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
