/**
 * Visual Studio Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2017-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CodeRepository model module.
 * @module model/CodeRepository
 * @version 2017-11-01-preview
 */
class CodeRepository {
    /**
     * Constructs a new <code>CodeRepository</code>.
     * Defines a code repository.
     * @alias module:model/CodeRepository
     * @param defaultBranch {String} Default branch for which continuous integration should be configured in the VSTS pipeline.
     * @param id {String} Unique identifier of the code repository.
     * @param repositoryType {module:model/CodeRepository.RepositoryTypeEnum} Type of code repository.
     */
    constructor(defaultBranch, id, repositoryType) { 
        
        CodeRepository.initialize(this, defaultBranch, id, repositoryType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, defaultBranch, id, repositoryType) { 
        obj['defaultBranch'] = defaultBranch;
        obj['id'] = id;
        obj['repositoryType'] = repositoryType;
    }

    /**
     * Constructs a <code>CodeRepository</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CodeRepository} obj Optional instance to populate.
     * @return {module:model/CodeRepository} The populated <code>CodeRepository</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CodeRepository();

            if (data.hasOwnProperty('authorizationReference')) {
                obj['authorizationReference'] = ApiClient.convertToType(data['authorizationReference'], 'String');
            }
            if (data.hasOwnProperty('defaultBranch')) {
                obj['defaultBranch'] = ApiClient.convertToType(data['defaultBranch'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': 'String'});
            }
            if (data.hasOwnProperty('repositoryType')) {
                obj['repositoryType'] = ApiClient.convertToType(data['repositoryType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CodeRepository</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CodeRepository</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CodeRepository.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['authorizationReference'] && !(typeof data['authorizationReference'] === 'string' || data['authorizationReference'] instanceof String)) {
            throw new Error("Expected the field `authorizationReference` to be a primitive type in the JSON string but got " + data['authorizationReference']);
        }
        // ensure the json data is a string
        if (data['defaultBranch'] && !(typeof data['defaultBranch'] === 'string' || data['defaultBranch'] instanceof String)) {
            throw new Error("Expected the field `defaultBranch` to be a primitive type in the JSON string but got " + data['defaultBranch']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['repositoryType'] && !(typeof data['repositoryType'] === 'string' || data['repositoryType'] instanceof String)) {
            throw new Error("Expected the field `repositoryType` to be a primitive type in the JSON string but got " + data['repositoryType']);
        }

        return true;
    }


}

CodeRepository.RequiredProperties = ["defaultBranch", "id", "repositoryType"];

/**
 * Reference to the authorization info used to access the code repository. This value is used as a key into the global authorization details dictionary.
 * @member {String} authorizationReference
 */
CodeRepository.prototype['authorizationReference'] = undefined;

/**
 * Default branch for which continuous integration should be configured in the VSTS pipeline.
 * @member {String} defaultBranch
 */
CodeRepository.prototype['defaultBranch'] = undefined;

/**
 * Unique identifier of the code repository.
 * @member {String} id
 */
CodeRepository.prototype['id'] = undefined;

/**
 * Repository-specific properties.
 * @member {Object.<String, String>} properties
 */
CodeRepository.prototype['properties'] = undefined;

/**
 * Type of code repository.
 * @member {module:model/CodeRepository.RepositoryTypeEnum} repositoryType
 */
CodeRepository.prototype['repositoryType'] = undefined;





/**
 * Allowed values for the <code>repositoryType</code> property.
 * @enum {String}
 * @readonly
 */
CodeRepository['RepositoryTypeEnum'] = {

    /**
     * value: "gitHub"
     * @const
     */
    "gitHub": "gitHub",

    /**
     * value: "vstsGit"
     * @const
     */
    "vstsGit": "vstsGit"
};



export default CodeRepository;

