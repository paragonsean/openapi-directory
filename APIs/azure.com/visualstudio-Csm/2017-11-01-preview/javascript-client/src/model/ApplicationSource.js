/**
 * Visual Studio Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2017-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApplicationSource model module.
 * @module model/ApplicationSource
 * @version 2017-11-01-preview
 */
class ApplicationSource {
    /**
     * Constructs a new <code>ApplicationSource</code>.
     * Defines the source application for a VSTS pipeline.
     * @alias module:model/ApplicationSource
     * @param applicationType {module:model/ApplicationSource.ApplicationTypeEnum} Type of application.
     * @param sourceType {module:model/ApplicationSource.SourceTypeEnum} Type of application source.
     */
    constructor(applicationType, sourceType) { 
        
        ApplicationSource.initialize(this, applicationType, sourceType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, applicationType, sourceType) { 
        obj['applicationType'] = applicationType;
        obj['sourceType'] = sourceType;
    }

    /**
     * Constructs a <code>ApplicationSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationSource} obj Optional instance to populate.
     * @return {module:model/ApplicationSource} The populated <code>ApplicationSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationSource();

            if (data.hasOwnProperty('applicationConfiguration')) {
                obj['applicationConfiguration'] = ApiClient.convertToType(data['applicationConfiguration'], {'String': 'String'});
            }
            if (data.hasOwnProperty('applicationType')) {
                obj['applicationType'] = ApiClient.convertToType(data['applicationType'], 'String');
            }
            if (data.hasOwnProperty('sourceType')) {
                obj['sourceType'] = ApiClient.convertToType(data['sourceType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplicationSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplicationSource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApplicationSource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['applicationType'] && !(typeof data['applicationType'] === 'string' || data['applicationType'] instanceof String)) {
            throw new Error("Expected the field `applicationType` to be a primitive type in the JSON string but got " + data['applicationType']);
        }
        // ensure the json data is a string
        if (data['sourceType'] && !(typeof data['sourceType'] === 'string' || data['sourceType'] instanceof String)) {
            throw new Error("Expected the field `sourceType` to be a primitive type in the JSON string but got " + data['sourceType']);
        }

        return true;
    }


}

ApplicationSource.RequiredProperties = ["applicationType", "sourceType"];

/**
 * Application specific properties.
 * @member {Object.<String, String>} applicationConfiguration
 */
ApplicationSource.prototype['applicationConfiguration'] = undefined;

/**
 * Type of application.
 * @member {module:model/ApplicationSource.ApplicationTypeEnum} applicationType
 */
ApplicationSource.prototype['applicationType'] = undefined;

/**
 * Type of application source.
 * @member {module:model/ApplicationSource.SourceTypeEnum} sourceType
 */
ApplicationSource.prototype['sourceType'] = undefined;





/**
 * Allowed values for the <code>applicationType</code> property.
 * @enum {String}
 * @readonly
 */
ApplicationSource['ApplicationTypeEnum'] = {

    /**
     * value: "AspDotNet"
     * @const
     */
    "AspDotNet": "AspDotNet",

    /**
     * value: "AspDotNetCore"
     * @const
     */
    "AspDotNetCore": "AspDotNetCore",

    /**
     * value: "NodeJs"
     * @const
     */
    "NodeJs": "NodeJs"
};


/**
 * Allowed values for the <code>sourceType</code> property.
 * @enum {String}
 * @readonly
 */
ApplicationSource['SourceTypeEnum'] = {

    /**
     * value: "CodeTemplate"
     * @const
     */
    "CodeTemplate": "CodeTemplate",

    /**
     * value: "CodeRepository"
     * @const
     */
    "CodeRepository": "CodeRepository"
};



export default ApplicationSource;

