/**
 * Visual Studio Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2017-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PipelineTemplate from './PipelineTemplate';

/**
 * The ProjectResourceProperties model module.
 * @module model/ProjectResourceProperties
 * @version 2017-11-01-preview
 */
class ProjectResourceProperties {
    /**
     * Constructs a new <code>ProjectResourceProperties</code>.
     * Defines the custom properties of project resource.
     * @alias module:model/ProjectResourceProperties
     */
    constructor() { 
        
        ProjectResourceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProjectResourceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectResourceProperties} obj Optional instance to populate.
     * @return {module:model/ProjectResourceProperties} The populated <code>ProjectResourceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectResourceProperties();

            if (data.hasOwnProperty('bootstrapPipelineTemplate')) {
                obj['bootstrapPipelineTemplate'] = PipelineTemplate.constructFromObject(data['bootstrapPipelineTemplate']);
            }
            if (data.hasOwnProperty('ownerUpn')) {
                obj['ownerUpn'] = ApiClient.convertToType(data['ownerUpn'], 'String');
            }
            if (data.hasOwnProperty('processTemplateId')) {
                obj['processTemplateId'] = ApiClient.convertToType(data['processTemplateId'], 'String');
            }
            if (data.hasOwnProperty('tfsUniqueIdentifier')) {
                obj['tfsUniqueIdentifier'] = ApiClient.convertToType(data['tfsUniqueIdentifier'], 'String');
            }
            if (data.hasOwnProperty('versionControlOption')) {
                obj['versionControlOption'] = ApiClient.convertToType(data['versionControlOption'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectResourceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectResourceProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bootstrapPipelineTemplate`
        if (data['bootstrapPipelineTemplate']) { // data not null
          PipelineTemplate.validateJSON(data['bootstrapPipelineTemplate']);
        }
        // ensure the json data is a string
        if (data['ownerUpn'] && !(typeof data['ownerUpn'] === 'string' || data['ownerUpn'] instanceof String)) {
            throw new Error("Expected the field `ownerUpn` to be a primitive type in the JSON string but got " + data['ownerUpn']);
        }
        // ensure the json data is a string
        if (data['processTemplateId'] && !(typeof data['processTemplateId'] === 'string' || data['processTemplateId'] instanceof String)) {
            throw new Error("Expected the field `processTemplateId` to be a primitive type in the JSON string but got " + data['processTemplateId']);
        }
        // ensure the json data is a string
        if (data['tfsUniqueIdentifier'] && !(typeof data['tfsUniqueIdentifier'] === 'string' || data['tfsUniqueIdentifier'] instanceof String)) {
            throw new Error("Expected the field `tfsUniqueIdentifier` to be a primitive type in the JSON string but got " + data['tfsUniqueIdentifier']);
        }
        // ensure the json data is a string
        if (data['versionControlOption'] && !(typeof data['versionControlOption'] === 'string' || data['versionControlOption'] instanceof String)) {
            throw new Error("Expected the field `versionControlOption` to be a primitive type in the JSON string but got " + data['versionControlOption']);
        }

        return true;
    }


}



/**
 * @member {module:model/PipelineTemplate} bootstrapPipelineTemplate
 */
ProjectResourceProperties.prototype['bootstrapPipelineTemplate'] = undefined;

/**
 * Optional UPN of the owner, on-behalf-of whom the project is being created.
 * @member {String} ownerUpn
 */
ProjectResourceProperties.prototype['ownerUpn'] = undefined;

/**
 * Process template to use in the project.
 * @member {module:model/ProjectResourceProperties.ProcessTemplateIdEnum} processTemplateId
 */
ProjectResourceProperties.prototype['processTemplateId'] = undefined;

/**
 * Unique identifier of the VSTS project.
 * @member {String} tfsUniqueIdentifier
 */
ProjectResourceProperties.prototype['tfsUniqueIdentifier'] = undefined;

/**
 * Version control to use for the default repo created in the project.
 * @member {module:model/ProjectResourceProperties.VersionControlOptionEnum} versionControlOption
 */
ProjectResourceProperties.prototype['versionControlOption'] = undefined;





/**
 * Allowed values for the <code>processTemplateId</code> property.
 * @enum {String}
 * @readonly
 */
ProjectResourceProperties['ProcessTemplateIdEnum'] = {

    /**
     * value: "Scrum"
     * @const
     */
    "Scrum": "Scrum",

    /**
     * value: "Agile"
     * @const
     */
    "Agile": "Agile",

    /**
     * value: "Cmmi"
     * @const
     */
    "Cmmi": "Cmmi"
};


/**
 * Allowed values for the <code>versionControlOption</code> property.
 * @enum {String}
 * @readonly
 */
ProjectResourceProperties['VersionControlOptionEnum'] = {

    /**
     * value: "Git"
     * @const
     */
    "Git": "Git",

    /**
     * value: "Tfvc"
     * @const
     */
    "Tfvc": "Tfvc"
};



export default ProjectResourceProperties;

