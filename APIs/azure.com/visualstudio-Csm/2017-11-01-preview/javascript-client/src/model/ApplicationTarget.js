/**
 * Visual Studio Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2017-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TargetResource from './TargetResource';

/**
 * The ApplicationTarget model module.
 * @module model/ApplicationTarget
 * @version 2017-11-01-preview
 */
class ApplicationTarget {
    /**
     * Constructs a new <code>ApplicationTarget</code>.
     * Defines the target resources for a VSTS pipeline.
     * @alias module:model/ApplicationTarget
     * @param resources {Array.<module:model/TargetResource>} List of target resources.
     * @param targetType {module:model/ApplicationTarget.TargetTypeEnum} Type of target.
     */
    constructor(resources, targetType) { 
        
        ApplicationTarget.initialize(this, resources, targetType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, resources, targetType) { 
        obj['resources'] = resources;
        obj['targetType'] = targetType;
    }

    /**
     * Constructs a <code>ApplicationTarget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationTarget} obj Optional instance to populate.
     * @return {module:model/ApplicationTarget} The populated <code>ApplicationTarget</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationTarget();

            if (data.hasOwnProperty('resources')) {
                obj['resources'] = ApiClient.convertToType(data['resources'], [TargetResource]);
            }
            if (data.hasOwnProperty('targetType')) {
                obj['targetType'] = ApiClient.convertToType(data['targetType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplicationTarget</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplicationTarget</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApplicationTarget.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['resources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resources'])) {
                throw new Error("Expected the field `resources` to be an array in the JSON data but got " + data['resources']);
            }
            // validate the optional field `resources` (array)
            for (const item of data['resources']) {
                TargetResource.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['targetType'] && !(typeof data['targetType'] === 'string' || data['targetType'] instanceof String)) {
            throw new Error("Expected the field `targetType` to be a primitive type in the JSON string but got " + data['targetType']);
        }

        return true;
    }


}

ApplicationTarget.RequiredProperties = ["resources", "targetType"];

/**
 * List of target resources.
 * @member {Array.<module:model/TargetResource>} resources
 */
ApplicationTarget.prototype['resources'] = undefined;

/**
 * Type of target.
 * @member {module:model/ApplicationTarget.TargetTypeEnum} targetType
 */
ApplicationTarget.prototype['targetType'] = undefined;





/**
 * Allowed values for the <code>targetType</code> property.
 * @enum {String}
 * @readonly
 */
ApplicationTarget['TargetTypeEnum'] = {

    /**
     * value: "WindowsAppService"
     * @const
     */
    "WindowsAppService": "WindowsAppService"
};



export default ApplicationTarget;

