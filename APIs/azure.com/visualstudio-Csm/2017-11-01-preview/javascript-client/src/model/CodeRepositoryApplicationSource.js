/**
 * Visual Studio Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2017-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationSource from './ApplicationSource';
import CodeRepository from './CodeRepository';

/**
 * The CodeRepositoryApplicationSource model module.
 * @module model/CodeRepositoryApplicationSource
 * @version 2017-11-01-preview
 */
class CodeRepositoryApplicationSource {
    /**
     * Constructs a new <code>CodeRepositoryApplicationSource</code>.
     * Defines the source application, when it resides in a code repository.
     * @alias module:model/CodeRepositoryApplicationSource
     * @extends module:model/ApplicationSource
     * @implements module:model/ApplicationSource
     * @param applicationType {module:model/CodeRepositoryApplicationSource.ApplicationTypeEnum} Type of application.
     * @param sourceType {module:model/CodeRepositoryApplicationSource.SourceTypeEnum} Type of application source.
     */
    constructor(applicationType, sourceType) { 
        ApplicationSource.initialize(this, applicationType, sourceType);
        CodeRepositoryApplicationSource.initialize(this, applicationType, sourceType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, applicationType, sourceType) { 
        obj['repository'] = repository;
    }

    /**
     * Constructs a <code>CodeRepositoryApplicationSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CodeRepositoryApplicationSource} obj Optional instance to populate.
     * @return {module:model/CodeRepositoryApplicationSource} The populated <code>CodeRepositoryApplicationSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CodeRepositoryApplicationSource();
            ApplicationSource.constructFromObject(data, obj);
            ApplicationSource.constructFromObject(data, obj);

            if (data.hasOwnProperty('repository')) {
                obj['repository'] = CodeRepository.constructFromObject(data['repository']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CodeRepositoryApplicationSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CodeRepositoryApplicationSource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CodeRepositoryApplicationSource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `repository`
        if (data['repository']) { // data not null
          CodeRepository.validateJSON(data['repository']);
        }

        return true;
    }


}

CodeRepositoryApplicationSource.RequiredProperties = ["repository", "applicationType", "sourceType"];

/**
 * @member {module:model/CodeRepository} repository
 */
CodeRepositoryApplicationSource.prototype['repository'] = undefined;


// Implement ApplicationSource interface:
/**
 * Application specific properties.
 * @member {Object.<String, String>} applicationConfiguration
 */
ApplicationSource.prototype['applicationConfiguration'] = undefined;
/**
 * Type of application.
 * @member {module:model/ApplicationSource.ApplicationTypeEnum} applicationType
 */
ApplicationSource.prototype['applicationType'] = undefined;
/**
 * Type of application source.
 * @member {module:model/ApplicationSource.SourceTypeEnum} sourceType
 */
ApplicationSource.prototype['sourceType'] = undefined;




export default CodeRepositoryApplicationSource;

