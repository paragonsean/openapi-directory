/*
 * Visual Studio Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2017-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccountResource;
import org.openapitools.client.model.AccountResourceListResult;
import org.openapitools.client.model.AccountResourceRequest;
import org.openapitools.client.model.CheckNameAvailabilityParameter;
import org.openapitools.client.model.CheckNameAvailabilityResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountsCheckNameAvailability
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param body Parameters describing the name to check availability for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the result of the name availability check. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsCheckNameAvailabilityCall(String subscriptionId, String apiVersion, CheckNameAvailabilityParameter body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/microsoft.visualstudio/checkNameAvailability"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsCheckNameAvailabilityValidateBeforeCall(String subscriptionId, String apiVersion, CheckNameAvailabilityParameter body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountsCheckNameAvailability(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountsCheckNameAvailability(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling accountsCheckNameAvailability(Async)");
        }

        return accountsCheckNameAvailabilityCall(subscriptionId, apiVersion, body, _callback);

    }

    /**
     * Accounts_CheckNameAvailability
     * Checks if the specified Visual Studio Team Services account name is available. Resource name can be either an account name or an account name and PUID.
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param body Parameters describing the name to check availability for. (required)
     * @return CheckNameAvailabilityResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the result of the name availability check. </td><td>  -  </td></tr>
     </table>
     */
    public CheckNameAvailabilityResult accountsCheckNameAvailability(String subscriptionId, String apiVersion, CheckNameAvailabilityParameter body) throws ApiException {
        ApiResponse<CheckNameAvailabilityResult> localVarResp = accountsCheckNameAvailabilityWithHttpInfo(subscriptionId, apiVersion, body);
        return localVarResp.getData();
    }

    /**
     * Accounts_CheckNameAvailability
     * Checks if the specified Visual Studio Team Services account name is available. Resource name can be either an account name or an account name and PUID.
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param body Parameters describing the name to check availability for. (required)
     * @return ApiResponse&lt;CheckNameAvailabilityResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the result of the name availability check. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckNameAvailabilityResult> accountsCheckNameAvailabilityWithHttpInfo(String subscriptionId, String apiVersion, CheckNameAvailabilityParameter body) throws ApiException {
        okhttp3.Call localVarCall = accountsCheckNameAvailabilityValidateBeforeCall(subscriptionId, apiVersion, body, null);
        Type localVarReturnType = new TypeToken<CheckNameAvailabilityResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Accounts_CheckNameAvailability (asynchronously)
     * Checks if the specified Visual Studio Team Services account name is available. Resource name can be either an account name or an account name and PUID.
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param body Parameters describing the name to check availability for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the result of the name availability check. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsCheckNameAvailabilityAsync(String subscriptionId, String apiVersion, CheckNameAvailabilityParameter body, final ApiCallback<CheckNameAvailabilityResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsCheckNameAvailabilityValidateBeforeCall(subscriptionId, apiVersion, body, _callback);
        Type localVarReturnType = new TypeToken<CheckNameAvailabilityResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsCreateOrUpdate
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param resourceName Name of the resource. (required)
     * @param body The request data. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The Visual Studio Team Services account resource was created or updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Visual Studio Team Services account does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsCreateOrUpdateCall(String resourceGroupName, String subscriptionId, String apiVersion, String resourceName, AccountResourceRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{resourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, String resourceName, AccountResourceRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling accountsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling accountsCreateOrUpdate(Async)");
        }

        return accountsCreateOrUpdateCall(resourceGroupName, subscriptionId, apiVersion, resourceName, body, _callback);

    }

    /**
     * Accounts_CreateOrUpdate
     * Creates or updates a Visual Studio Team Services account resource.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param resourceName Name of the resource. (required)
     * @param body The request data. (required)
     * @return AccountResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The Visual Studio Team Services account resource was created or updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Visual Studio Team Services account does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public AccountResource accountsCreateOrUpdate(String resourceGroupName, String subscriptionId, String apiVersion, String resourceName, AccountResourceRequest body) throws ApiException {
        ApiResponse<AccountResource> localVarResp = accountsCreateOrUpdateWithHttpInfo(resourceGroupName, subscriptionId, apiVersion, resourceName, body);
        return localVarResp.getData();
    }

    /**
     * Accounts_CreateOrUpdate
     * Creates or updates a Visual Studio Team Services account resource.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param resourceName Name of the resource. (required)
     * @param body The request data. (required)
     * @return ApiResponse&lt;AccountResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The Visual Studio Team Services account resource was created or updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Visual Studio Team Services account does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountResource> accountsCreateOrUpdateWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion, String resourceName, AccountResourceRequest body) throws ApiException {
        okhttp3.Call localVarCall = accountsCreateOrUpdateValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, resourceName, body, null);
        Type localVarReturnType = new TypeToken<AccountResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Accounts_CreateOrUpdate (asynchronously)
     * Creates or updates a Visual Studio Team Services account resource.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param resourceName Name of the resource. (required)
     * @param body The request data. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The Visual Studio Team Services account resource was created or updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Visual Studio Team Services account does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsCreateOrUpdateAsync(String resourceGroupName, String subscriptionId, String apiVersion, String resourceName, AccountResourceRequest body, final ApiCallback<AccountResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsCreateOrUpdateValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, resourceName, body, _callback);
        Type localVarReturnType = new TypeToken<AccountResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsDelete
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param resourceName Name of the resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The Visual Studio Team Services account resource was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsDeleteCall(String resourceGroupName, String subscriptionId, String apiVersion, String resourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{resourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsDeleteValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, String resourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountsDelete(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling accountsDelete(Async)");
        }

        return accountsDeleteCall(resourceGroupName, subscriptionId, apiVersion, resourceName, _callback);

    }

    /**
     * Accounts_Delete
     * Deletes a Visual Studio Team Services account resource.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param resourceName Name of the resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The Visual Studio Team Services account resource was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void accountsDelete(String resourceGroupName, String subscriptionId, String apiVersion, String resourceName) throws ApiException {
        accountsDeleteWithHttpInfo(resourceGroupName, subscriptionId, apiVersion, resourceName);
    }

    /**
     * Accounts_Delete
     * Deletes a Visual Studio Team Services account resource.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param resourceName Name of the resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The Visual Studio Team Services account resource was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> accountsDeleteWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion, String resourceName) throws ApiException {
        okhttp3.Call localVarCall = accountsDeleteValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, resourceName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Accounts_Delete (asynchronously)
     * Deletes a Visual Studio Team Services account resource.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param resourceName Name of the resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The Visual Studio Team Services account resource was deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsDeleteAsync(String resourceGroupName, String subscriptionId, String apiVersion, String resourceName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsDeleteValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, resourceName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsGet
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param resourceName Name of the resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the Visual Studio Team Services account resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Visual Studio Team Services account does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsGetCall(String resourceGroupName, String subscriptionId, String apiVersion, String resourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{resourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsGetValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, String resourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountsGet(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling accountsGet(Async)");
        }

        return accountsGetCall(resourceGroupName, subscriptionId, apiVersion, resourceName, _callback);

    }

    /**
     * Accounts_Get
     * Gets the Visual Studio Team Services account resource details.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param resourceName Name of the resource. (required)
     * @return AccountResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the Visual Studio Team Services account resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Visual Studio Team Services account does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public AccountResource accountsGet(String resourceGroupName, String subscriptionId, String apiVersion, String resourceName) throws ApiException {
        ApiResponse<AccountResource> localVarResp = accountsGetWithHttpInfo(resourceGroupName, subscriptionId, apiVersion, resourceName);
        return localVarResp.getData();
    }

    /**
     * Accounts_Get
     * Gets the Visual Studio Team Services account resource details.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param resourceName Name of the resource. (required)
     * @return ApiResponse&lt;AccountResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the Visual Studio Team Services account resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Visual Studio Team Services account does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountResource> accountsGetWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion, String resourceName) throws ApiException {
        okhttp3.Call localVarCall = accountsGetValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, resourceName, null);
        Type localVarReturnType = new TypeToken<AccountResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Accounts_Get (asynchronously)
     * Gets the Visual Studio Team Services account resource details.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param resourceName Name of the resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the Visual Studio Team Services account resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Visual Studio Team Services account does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsGetAsync(String resourceGroupName, String subscriptionId, String apiVersion, String resourceName, final ApiCallback<AccountResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsGetValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, resourceName, _callback);
        Type localVarReturnType = new TypeToken<AccountResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsListByResourceGroup
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the Visual Studio Team Services account resources linked to the Azure subscription. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsListByResourceGroupCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsListByResourceGroupValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountsListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountsListByResourceGroup(Async)");
        }

        return accountsListByResourceGroupCall(resourceGroupName, subscriptionId, apiVersion, _callback);

    }

    /**
     * Accounts_ListByResourceGroup
     * Gets all Visual Studio Team Services account resources under the resource group linked to the specified Azure subscription.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @return AccountResourceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the Visual Studio Team Services account resources linked to the Azure subscription. </td><td>  -  </td></tr>
     </table>
     */
    public AccountResourceListResult accountsListByResourceGroup(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<AccountResourceListResult> localVarResp = accountsListByResourceGroupWithHttpInfo(resourceGroupName, subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Accounts_ListByResourceGroup
     * Gets all Visual Studio Team Services account resources under the resource group linked to the specified Azure subscription.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;AccountResourceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the Visual Studio Team Services account resources linked to the Azure subscription. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccountResourceListResult> accountsListByResourceGroupWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = accountsListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AccountResourceListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Accounts_ListByResourceGroup (asynchronously)
     * Gets all Visual Studio Team Services account resources under the resource group linked to the specified Azure subscription.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the Visual Studio Team Services account resources linked to the Azure subscription. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsListByResourceGroupAsync(String resourceGroupName, String subscriptionId, String apiVersion, final ApiCallback<AccountResourceListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AccountResourceListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
