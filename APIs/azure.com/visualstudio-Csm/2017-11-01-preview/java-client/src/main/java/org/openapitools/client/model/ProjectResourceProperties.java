/*
 * Visual Studio Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2017-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PipelineTemplate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the custom properties of project resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:57.693168-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectResourceProperties {
  public static final String SERIALIZED_NAME_BOOTSTRAP_PIPELINE_TEMPLATE = "bootstrapPipelineTemplate";
  @SerializedName(SERIALIZED_NAME_BOOTSTRAP_PIPELINE_TEMPLATE)
  private PipelineTemplate bootstrapPipelineTemplate;

  public static final String SERIALIZED_NAME_OWNER_UPN = "ownerUpn";
  @SerializedName(SERIALIZED_NAME_OWNER_UPN)
  private String ownerUpn;

  /**
   * Process template to use in the project.
   */
  @JsonAdapter(ProcessTemplateIdEnum.Adapter.class)
  public enum ProcessTemplateIdEnum {
    SCRUM("Scrum"),
    
    AGILE("Agile"),
    
    CMMI("Cmmi");

    private String value;

    ProcessTemplateIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProcessTemplateIdEnum fromValue(String value) {
      for (ProcessTemplateIdEnum b : ProcessTemplateIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProcessTemplateIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProcessTemplateIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProcessTemplateIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProcessTemplateIdEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProcessTemplateIdEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROCESS_TEMPLATE_ID = "processTemplateId";
  @SerializedName(SERIALIZED_NAME_PROCESS_TEMPLATE_ID)
  private ProcessTemplateIdEnum processTemplateId;

  public static final String SERIALIZED_NAME_TFS_UNIQUE_IDENTIFIER = "tfsUniqueIdentifier";
  @SerializedName(SERIALIZED_NAME_TFS_UNIQUE_IDENTIFIER)
  private String tfsUniqueIdentifier;

  /**
   * Version control to use for the default repo created in the project.
   */
  @JsonAdapter(VersionControlOptionEnum.Adapter.class)
  public enum VersionControlOptionEnum {
    GIT("Git"),
    
    TFVC("Tfvc");

    private String value;

    VersionControlOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VersionControlOptionEnum fromValue(String value) {
      for (VersionControlOptionEnum b : VersionControlOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VersionControlOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VersionControlOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VersionControlOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VersionControlOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VersionControlOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VERSION_CONTROL_OPTION = "versionControlOption";
  @SerializedName(SERIALIZED_NAME_VERSION_CONTROL_OPTION)
  private VersionControlOptionEnum versionControlOption;

  public ProjectResourceProperties() {
  }

  public ProjectResourceProperties(
     String tfsUniqueIdentifier
  ) {
    this();
    this.tfsUniqueIdentifier = tfsUniqueIdentifier;
  }

  public ProjectResourceProperties bootstrapPipelineTemplate(PipelineTemplate bootstrapPipelineTemplate) {
    this.bootstrapPipelineTemplate = bootstrapPipelineTemplate;
    return this;
  }

  /**
   * Get bootstrapPipelineTemplate
   * @return bootstrapPipelineTemplate
   */
  @javax.annotation.Nullable
  public PipelineTemplate getBootstrapPipelineTemplate() {
    return bootstrapPipelineTemplate;
  }

  public void setBootstrapPipelineTemplate(PipelineTemplate bootstrapPipelineTemplate) {
    this.bootstrapPipelineTemplate = bootstrapPipelineTemplate;
  }


  public ProjectResourceProperties ownerUpn(String ownerUpn) {
    this.ownerUpn = ownerUpn;
    return this;
  }

  /**
   * Optional UPN of the owner, on-behalf-of whom the project is being created.
   * @return ownerUpn
   */
  @javax.annotation.Nullable
  public String getOwnerUpn() {
    return ownerUpn;
  }

  public void setOwnerUpn(String ownerUpn) {
    this.ownerUpn = ownerUpn;
  }


  public ProjectResourceProperties processTemplateId(ProcessTemplateIdEnum processTemplateId) {
    this.processTemplateId = processTemplateId;
    return this;
  }

  /**
   * Process template to use in the project.
   * @return processTemplateId
   */
  @javax.annotation.Nullable
  public ProcessTemplateIdEnum getProcessTemplateId() {
    return processTemplateId;
  }

  public void setProcessTemplateId(ProcessTemplateIdEnum processTemplateId) {
    this.processTemplateId = processTemplateId;
  }


  /**
   * Unique identifier of the VSTS project.
   * @return tfsUniqueIdentifier
   */
  @javax.annotation.Nullable
  public String getTfsUniqueIdentifier() {
    return tfsUniqueIdentifier;
  }



  public ProjectResourceProperties versionControlOption(VersionControlOptionEnum versionControlOption) {
    this.versionControlOption = versionControlOption;
    return this;
  }

  /**
   * Version control to use for the default repo created in the project.
   * @return versionControlOption
   */
  @javax.annotation.Nullable
  public VersionControlOptionEnum getVersionControlOption() {
    return versionControlOption;
  }

  public void setVersionControlOption(VersionControlOptionEnum versionControlOption) {
    this.versionControlOption = versionControlOption;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectResourceProperties projectResourceProperties = (ProjectResourceProperties) o;
    return Objects.equals(this.bootstrapPipelineTemplate, projectResourceProperties.bootstrapPipelineTemplate) &&
        Objects.equals(this.ownerUpn, projectResourceProperties.ownerUpn) &&
        Objects.equals(this.processTemplateId, projectResourceProperties.processTemplateId) &&
        Objects.equals(this.tfsUniqueIdentifier, projectResourceProperties.tfsUniqueIdentifier) &&
        Objects.equals(this.versionControlOption, projectResourceProperties.versionControlOption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bootstrapPipelineTemplate, ownerUpn, processTemplateId, tfsUniqueIdentifier, versionControlOption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectResourceProperties {\n");
    sb.append("    bootstrapPipelineTemplate: ").append(toIndentedString(bootstrapPipelineTemplate)).append("\n");
    sb.append("    ownerUpn: ").append(toIndentedString(ownerUpn)).append("\n");
    sb.append("    processTemplateId: ").append(toIndentedString(processTemplateId)).append("\n");
    sb.append("    tfsUniqueIdentifier: ").append(toIndentedString(tfsUniqueIdentifier)).append("\n");
    sb.append("    versionControlOption: ").append(toIndentedString(versionControlOption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bootstrapPipelineTemplate");
    openapiFields.add("ownerUpn");
    openapiFields.add("processTemplateId");
    openapiFields.add("tfsUniqueIdentifier");
    openapiFields.add("versionControlOption");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectResourceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectResourceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectResourceProperties is not found in the empty JSON string", ProjectResourceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectResourceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectResourceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bootstrapPipelineTemplate`
      if (jsonObj.get("bootstrapPipelineTemplate") != null && !jsonObj.get("bootstrapPipelineTemplate").isJsonNull()) {
        PipelineTemplate.validateJsonElement(jsonObj.get("bootstrapPipelineTemplate"));
      }
      if ((jsonObj.get("ownerUpn") != null && !jsonObj.get("ownerUpn").isJsonNull()) && !jsonObj.get("ownerUpn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerUpn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerUpn").toString()));
      }
      if ((jsonObj.get("processTemplateId") != null && !jsonObj.get("processTemplateId").isJsonNull()) && !jsonObj.get("processTemplateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processTemplateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processTemplateId").toString()));
      }
      // validate the optional field `processTemplateId`
      if (jsonObj.get("processTemplateId") != null && !jsonObj.get("processTemplateId").isJsonNull()) {
        ProcessTemplateIdEnum.validateJsonElement(jsonObj.get("processTemplateId"));
      }
      if ((jsonObj.get("tfsUniqueIdentifier") != null && !jsonObj.get("tfsUniqueIdentifier").isJsonNull()) && !jsonObj.get("tfsUniqueIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tfsUniqueIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tfsUniqueIdentifier").toString()));
      }
      if ((jsonObj.get("versionControlOption") != null && !jsonObj.get("versionControlOption").isJsonNull()) && !jsonObj.get("versionControlOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `versionControlOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("versionControlOption").toString()));
      }
      // validate the optional field `versionControlOption`
      if (jsonObj.get("versionControlOption") != null && !jsonObj.get("versionControlOption").isJsonNull()) {
        VersionControlOptionEnum.validateJsonElement(jsonObj.get("versionControlOption"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectResourceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectResourceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectResourceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectResourceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectResourceProperties>() {
           @Override
           public void write(JsonWriter out, ProjectResourceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectResourceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectResourceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectResourceProperties
   * @throws IOException if the JSON string is invalid with respect to ProjectResourceProperties
   */
  public static ProjectResourceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectResourceProperties.class);
  }

  /**
   * Convert an instance of ProjectResourceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

