/*
 * Visual Studio Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2017-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a code repository.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:57.693168-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CodeRepository {
  public static final String SERIALIZED_NAME_AUTHORIZATION_REFERENCE = "authorizationReference";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_REFERENCE)
  private String authorizationReference;

  public static final String SERIALIZED_NAME_DEFAULT_BRANCH = "defaultBranch";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BRANCH)
  private String defaultBranch;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, String> properties = new HashMap<>();

  /**
   * Type of code repository.
   */
  @JsonAdapter(RepositoryTypeEnum.Adapter.class)
  public enum RepositoryTypeEnum {
    GIT_HUB("gitHub"),
    
    VSTS_GIT("vstsGit");

    private String value;

    RepositoryTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RepositoryTypeEnum fromValue(String value) {
      for (RepositoryTypeEnum b : RepositoryTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RepositoryTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RepositoryTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RepositoryTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RepositoryTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RepositoryTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPOSITORY_TYPE = "repositoryType";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_TYPE)
  private RepositoryTypeEnum repositoryType;

  public CodeRepository() {
  }

  public CodeRepository authorizationReference(String authorizationReference) {
    this.authorizationReference = authorizationReference;
    return this;
  }

  /**
   * Reference to the authorization info used to access the code repository. This value is used as a key into the global authorization details dictionary.
   * @return authorizationReference
   */
  @javax.annotation.Nullable
  public String getAuthorizationReference() {
    return authorizationReference;
  }

  public void setAuthorizationReference(String authorizationReference) {
    this.authorizationReference = authorizationReference;
  }


  public CodeRepository defaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
    return this;
  }

  /**
   * Default branch for which continuous integration should be configured in the VSTS pipeline.
   * @return defaultBranch
   */
  @javax.annotation.Nonnull
  public String getDefaultBranch() {
    return defaultBranch;
  }

  public void setDefaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
  }


  public CodeRepository id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier of the code repository.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CodeRepository properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public CodeRepository putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * Repository-specific properties.
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, String> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  public CodeRepository repositoryType(RepositoryTypeEnum repositoryType) {
    this.repositoryType = repositoryType;
    return this;
  }

  /**
   * Type of code repository.
   * @return repositoryType
   */
  @javax.annotation.Nonnull
  public RepositoryTypeEnum getRepositoryType() {
    return repositoryType;
  }

  public void setRepositoryType(RepositoryTypeEnum repositoryType) {
    this.repositoryType = repositoryType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CodeRepository codeRepository = (CodeRepository) o;
    return Objects.equals(this.authorizationReference, codeRepository.authorizationReference) &&
        Objects.equals(this.defaultBranch, codeRepository.defaultBranch) &&
        Objects.equals(this.id, codeRepository.id) &&
        Objects.equals(this.properties, codeRepository.properties) &&
        Objects.equals(this.repositoryType, codeRepository.repositoryType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationReference, defaultBranch, id, properties, repositoryType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CodeRepository {\n");
    sb.append("    authorizationReference: ").append(toIndentedString(authorizationReference)).append("\n");
    sb.append("    defaultBranch: ").append(toIndentedString(defaultBranch)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    repositoryType: ").append(toIndentedString(repositoryType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizationReference");
    openapiFields.add("defaultBranch");
    openapiFields.add("id");
    openapiFields.add("properties");
    openapiFields.add("repositoryType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("defaultBranch");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("repositoryType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CodeRepository
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CodeRepository.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CodeRepository is not found in the empty JSON string", CodeRepository.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CodeRepository.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CodeRepository` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CodeRepository.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authorizationReference") != null && !jsonObj.get("authorizationReference").isJsonNull()) && !jsonObj.get("authorizationReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationReference").toString()));
      }
      if (!jsonObj.get("defaultBranch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultBranch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultBranch").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("repositoryType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repositoryType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repositoryType").toString()));
      }
      // validate the required field `repositoryType`
      RepositoryTypeEnum.validateJsonElement(jsonObj.get("repositoryType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CodeRepository.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CodeRepository' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CodeRepository> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CodeRepository.class));

       return (TypeAdapter<T>) new TypeAdapter<CodeRepository>() {
           @Override
           public void write(JsonWriter out, CodeRepository value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CodeRepository read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CodeRepository given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CodeRepository
   * @throws IOException if the JSON string is invalid with respect to CodeRepository
   */
  public static CodeRepository fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CodeRepository.class);
  }

  /**
   * Convert an instance of CodeRepository to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

