/*
 * Visual Studio Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2017-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ApplicationSource;
import org.openapitools.client.model.ApplicationTarget;
import org.openapitools.client.model.Authorization;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines a VSTS pipeline template.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:58:57.693168-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PipelineTemplate {
  public static final String SERIALIZED_NAME_APPLICATION_SOURCE = "applicationSource";
  @SerializedName(SERIALIZED_NAME_APPLICATION_SOURCE)
  private ApplicationSource applicationSource;

  public static final String SERIALIZED_NAME_APPLICATION_TARGET = "applicationTarget";
  @SerializedName(SERIALIZED_NAME_APPLICATION_TARGET)
  private ApplicationTarget applicationTarget;

  public static final String SERIALIZED_NAME_AUTHORIZATION_DETAILS = "authorizationDetails";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_DETAILS)
  private Map<String, Authorization> authorizationDetails = new HashMap<>();

  public PipelineTemplate() {
  }

  public PipelineTemplate applicationSource(ApplicationSource applicationSource) {
    this.applicationSource = applicationSource;
    return this;
  }

  /**
   * Get applicationSource
   * @return applicationSource
   */
  @javax.annotation.Nonnull
  public ApplicationSource getApplicationSource() {
    return applicationSource;
  }

  public void setApplicationSource(ApplicationSource applicationSource) {
    this.applicationSource = applicationSource;
  }


  public PipelineTemplate applicationTarget(ApplicationTarget applicationTarget) {
    this.applicationTarget = applicationTarget;
    return this;
  }

  /**
   * Get applicationTarget
   * @return applicationTarget
   */
  @javax.annotation.Nonnull
  public ApplicationTarget getApplicationTarget() {
    return applicationTarget;
  }

  public void setApplicationTarget(ApplicationTarget applicationTarget) {
    this.applicationTarget = applicationTarget;
  }


  public PipelineTemplate authorizationDetails(Map<String, Authorization> authorizationDetails) {
    this.authorizationDetails = authorizationDetails;
    return this;
  }

  public PipelineTemplate putAuthorizationDetailsItem(String key, Authorization authorizationDetailsItem) {
    if (this.authorizationDetails == null) {
      this.authorizationDetails = new HashMap<>();
    }
    this.authorizationDetails.put(key, authorizationDetailsItem);
    return this;
  }

  /**
   * Global dictionary of authorization details used by the pipeline, with a friendly name as key. Individual resource in the pipeline can reference to a specific authorization info using the friendly name.
   * @return authorizationDetails
   */
  @javax.annotation.Nonnull
  public Map<String, Authorization> getAuthorizationDetails() {
    return authorizationDetails;
  }

  public void setAuthorizationDetails(Map<String, Authorization> authorizationDetails) {
    this.authorizationDetails = authorizationDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PipelineTemplate pipelineTemplate = (PipelineTemplate) o;
    return Objects.equals(this.applicationSource, pipelineTemplate.applicationSource) &&
        Objects.equals(this.applicationTarget, pipelineTemplate.applicationTarget) &&
        Objects.equals(this.authorizationDetails, pipelineTemplate.authorizationDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationSource, applicationTarget, authorizationDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PipelineTemplate {\n");
    sb.append("    applicationSource: ").append(toIndentedString(applicationSource)).append("\n");
    sb.append("    applicationTarget: ").append(toIndentedString(applicationTarget)).append("\n");
    sb.append("    authorizationDetails: ").append(toIndentedString(authorizationDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationSource");
    openapiFields.add("applicationTarget");
    openapiFields.add("authorizationDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("applicationSource");
    openapiRequiredFields.add("applicationTarget");
    openapiRequiredFields.add("authorizationDetails");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PipelineTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PipelineTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PipelineTemplate is not found in the empty JSON string", PipelineTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PipelineTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PipelineTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PipelineTemplate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `applicationSource`
      ApplicationSource.validateJsonElement(jsonObj.get("applicationSource"));
      // validate the required field `applicationTarget`
      ApplicationTarget.validateJsonElement(jsonObj.get("applicationTarget"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PipelineTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PipelineTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PipelineTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PipelineTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<PipelineTemplate>() {
           @Override
           public void write(JsonWriter out, PipelineTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PipelineTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PipelineTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PipelineTemplate
   * @throws IOException if the JSON string is invalid with respect to PipelineTemplate
   */
  public static PipelineTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PipelineTemplate.class);
  }

  /**
   * Convert an instance of PipelineTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

