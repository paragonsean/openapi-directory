/**
 * Visual Studio Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2017-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIApplicationTarget.h
 *
 * Defines the target resources for a VSTS pipeline.
 */

#ifndef OAIApplicationTarget_H
#define OAIApplicationTarget_H

#include <QJsonObject>

#include "OAITargetResource.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITargetResource;

class OAIApplicationTarget : public OAIObject {
public:
    OAIApplicationTarget();
    OAIApplicationTarget(QString json);
    ~OAIApplicationTarget() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAITargetResource> getResources() const;
    void setResources(const QList<OAITargetResource> &resources);
    bool is_resources_Set() const;
    bool is_resources_Valid() const;

    QString getTargetType() const;
    void setTargetType(const QString &target_type);
    bool is_target_type_Set() const;
    bool is_target_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAITargetResource> m_resources;
    bool m_resources_isSet;
    bool m_resources_isValid;

    QString m_target_type;
    bool m_target_type_isSet;
    bool m_target_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIApplicationTarget)

#endif // OAIApplicationTarget_H
