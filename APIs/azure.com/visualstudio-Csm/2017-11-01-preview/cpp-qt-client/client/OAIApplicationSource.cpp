/**
 * Visual Studio Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2017-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationSource::OAIApplicationSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationSource::OAIApplicationSource() {
    this->initializeModel();
}

OAIApplicationSource::~OAIApplicationSource() {}

void OAIApplicationSource::initializeModel() {

    m_application_configuration_isSet = false;
    m_application_configuration_isValid = false;

    m_application_type_isSet = false;
    m_application_type_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;
}

void OAIApplicationSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationSource::fromJsonObject(QJsonObject json) {

    m_application_configuration_isValid = ::OpenAPI::fromJsonValue(m_application_configuration, json[QString("applicationConfiguration")]);
    m_application_configuration_isSet = !json[QString("applicationConfiguration")].isNull() && m_application_configuration_isValid;

    m_application_type_isValid = ::OpenAPI::fromJsonValue(m_application_type, json[QString("applicationType")]);
    m_application_type_isSet = !json[QString("applicationType")].isNull() && m_application_type_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("sourceType")]);
    m_source_type_isSet = !json[QString("sourceType")].isNull() && m_source_type_isValid;
}

QString OAIApplicationSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationSource::asJsonObject() const {
    QJsonObject obj;
    if (m_application_configuration.size() > 0) {
        obj.insert(QString("applicationConfiguration"), ::OpenAPI::toJsonValue(m_application_configuration));
    }
    if (m_application_type_isSet) {
        obj.insert(QString("applicationType"), ::OpenAPI::toJsonValue(m_application_type));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("sourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    return obj;
}

QMap<QString, QString> OAIApplicationSource::getApplicationConfiguration() const {
    return m_application_configuration;
}
void OAIApplicationSource::setApplicationConfiguration(const QMap<QString, QString> &application_configuration) {
    m_application_configuration = application_configuration;
    m_application_configuration_isSet = true;
}

bool OAIApplicationSource::is_application_configuration_Set() const{
    return m_application_configuration_isSet;
}

bool OAIApplicationSource::is_application_configuration_Valid() const{
    return m_application_configuration_isValid;
}

QString OAIApplicationSource::getApplicationType() const {
    return m_application_type;
}
void OAIApplicationSource::setApplicationType(const QString &application_type) {
    m_application_type = application_type;
    m_application_type_isSet = true;
}

bool OAIApplicationSource::is_application_type_Set() const{
    return m_application_type_isSet;
}

bool OAIApplicationSource::is_application_type_Valid() const{
    return m_application_type_isValid;
}

QString OAIApplicationSource::getSourceType() const {
    return m_source_type;
}
void OAIApplicationSource::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIApplicationSource::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIApplicationSource::is_source_type_Valid() const{
    return m_source_type_isValid;
}

bool OAIApplicationSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_configuration.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_type_isValid && m_source_type_isValid && true;
}

} // namespace OpenAPI
