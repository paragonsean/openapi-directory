/**
 * Visual Studio Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2017-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPipelineTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPipelineTemplate::OAIPipelineTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPipelineTemplate::OAIPipelineTemplate() {
    this->initializeModel();
}

OAIPipelineTemplate::~OAIPipelineTemplate() {}

void OAIPipelineTemplate::initializeModel() {

    m_application_source_isSet = false;
    m_application_source_isValid = false;

    m_application_target_isSet = false;
    m_application_target_isValid = false;

    m_authorization_details_isSet = false;
    m_authorization_details_isValid = false;
}

void OAIPipelineTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPipelineTemplate::fromJsonObject(QJsonObject json) {

    m_application_source_isValid = ::OpenAPI::fromJsonValue(m_application_source, json[QString("applicationSource")]);
    m_application_source_isSet = !json[QString("applicationSource")].isNull() && m_application_source_isValid;

    m_application_target_isValid = ::OpenAPI::fromJsonValue(m_application_target, json[QString("applicationTarget")]);
    m_application_target_isSet = !json[QString("applicationTarget")].isNull() && m_application_target_isValid;

    m_authorization_details_isValid = ::OpenAPI::fromJsonValue(m_authorization_details, json[QString("authorizationDetails")]);
    m_authorization_details_isSet = !json[QString("authorizationDetails")].isNull() && m_authorization_details_isValid;
}

QString OAIPipelineTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPipelineTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_application_source.isSet()) {
        obj.insert(QString("applicationSource"), ::OpenAPI::toJsonValue(m_application_source));
    }
    if (m_application_target.isSet()) {
        obj.insert(QString("applicationTarget"), ::OpenAPI::toJsonValue(m_application_target));
    }
    if (m_authorization_details.size() > 0) {
        obj.insert(QString("authorizationDetails"), ::OpenAPI::toJsonValue(m_authorization_details));
    }
    return obj;
}

OAIApplicationSource OAIPipelineTemplate::getApplicationSource() const {
    return m_application_source;
}
void OAIPipelineTemplate::setApplicationSource(const OAIApplicationSource &application_source) {
    m_application_source = application_source;
    m_application_source_isSet = true;
}

bool OAIPipelineTemplate::is_application_source_Set() const{
    return m_application_source_isSet;
}

bool OAIPipelineTemplate::is_application_source_Valid() const{
    return m_application_source_isValid;
}

OAIApplicationTarget OAIPipelineTemplate::getApplicationTarget() const {
    return m_application_target;
}
void OAIPipelineTemplate::setApplicationTarget(const OAIApplicationTarget &application_target) {
    m_application_target = application_target;
    m_application_target_isSet = true;
}

bool OAIPipelineTemplate::is_application_target_Set() const{
    return m_application_target_isSet;
}

bool OAIPipelineTemplate::is_application_target_Valid() const{
    return m_application_target_isValid;
}

QMap<QString, OAIAuthorization> OAIPipelineTemplate::getAuthorizationDetails() const {
    return m_authorization_details;
}
void OAIPipelineTemplate::setAuthorizationDetails(const QMap<QString, OAIAuthorization> &authorization_details) {
    m_authorization_details = authorization_details;
    m_authorization_details_isSet = true;
}

bool OAIPipelineTemplate::is_authorization_details_Set() const{
    return m_authorization_details_isSet;
}

bool OAIPipelineTemplate::is_authorization_details_Valid() const{
    return m_authorization_details_isValid;
}

bool OAIPipelineTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_target.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPipelineTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_source_isValid && m_application_target_isValid && m_authorization_details_isValid && true;
}

} // namespace OpenAPI
