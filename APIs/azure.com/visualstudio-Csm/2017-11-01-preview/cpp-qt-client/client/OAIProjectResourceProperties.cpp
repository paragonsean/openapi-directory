/**
 * Visual Studio Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2017-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectResourceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectResourceProperties::OAIProjectResourceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectResourceProperties::OAIProjectResourceProperties() {
    this->initializeModel();
}

OAIProjectResourceProperties::~OAIProjectResourceProperties() {}

void OAIProjectResourceProperties::initializeModel() {

    m_bootstrap_pipeline_template_isSet = false;
    m_bootstrap_pipeline_template_isValid = false;

    m_owner_upn_isSet = false;
    m_owner_upn_isValid = false;

    m_process_template_id_isSet = false;
    m_process_template_id_isValid = false;

    m_tfs_unique_identifier_isSet = false;
    m_tfs_unique_identifier_isValid = false;

    m_version_control_option_isSet = false;
    m_version_control_option_isValid = false;
}

void OAIProjectResourceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectResourceProperties::fromJsonObject(QJsonObject json) {

    m_bootstrap_pipeline_template_isValid = ::OpenAPI::fromJsonValue(m_bootstrap_pipeline_template, json[QString("bootstrapPipelineTemplate")]);
    m_bootstrap_pipeline_template_isSet = !json[QString("bootstrapPipelineTemplate")].isNull() && m_bootstrap_pipeline_template_isValid;

    m_owner_upn_isValid = ::OpenAPI::fromJsonValue(m_owner_upn, json[QString("ownerUpn")]);
    m_owner_upn_isSet = !json[QString("ownerUpn")].isNull() && m_owner_upn_isValid;

    m_process_template_id_isValid = ::OpenAPI::fromJsonValue(m_process_template_id, json[QString("processTemplateId")]);
    m_process_template_id_isSet = !json[QString("processTemplateId")].isNull() && m_process_template_id_isValid;

    m_tfs_unique_identifier_isValid = ::OpenAPI::fromJsonValue(m_tfs_unique_identifier, json[QString("tfsUniqueIdentifier")]);
    m_tfs_unique_identifier_isSet = !json[QString("tfsUniqueIdentifier")].isNull() && m_tfs_unique_identifier_isValid;

    m_version_control_option_isValid = ::OpenAPI::fromJsonValue(m_version_control_option, json[QString("versionControlOption")]);
    m_version_control_option_isSet = !json[QString("versionControlOption")].isNull() && m_version_control_option_isValid;
}

QString OAIProjectResourceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectResourceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_bootstrap_pipeline_template.isSet()) {
        obj.insert(QString("bootstrapPipelineTemplate"), ::OpenAPI::toJsonValue(m_bootstrap_pipeline_template));
    }
    if (m_owner_upn_isSet) {
        obj.insert(QString("ownerUpn"), ::OpenAPI::toJsonValue(m_owner_upn));
    }
    if (m_process_template_id_isSet) {
        obj.insert(QString("processTemplateId"), ::OpenAPI::toJsonValue(m_process_template_id));
    }
    if (m_tfs_unique_identifier_isSet) {
        obj.insert(QString("tfsUniqueIdentifier"), ::OpenAPI::toJsonValue(m_tfs_unique_identifier));
    }
    if (m_version_control_option_isSet) {
        obj.insert(QString("versionControlOption"), ::OpenAPI::toJsonValue(m_version_control_option));
    }
    return obj;
}

OAIPipelineTemplate OAIProjectResourceProperties::getBootstrapPipelineTemplate() const {
    return m_bootstrap_pipeline_template;
}
void OAIProjectResourceProperties::setBootstrapPipelineTemplate(const OAIPipelineTemplate &bootstrap_pipeline_template) {
    m_bootstrap_pipeline_template = bootstrap_pipeline_template;
    m_bootstrap_pipeline_template_isSet = true;
}

bool OAIProjectResourceProperties::is_bootstrap_pipeline_template_Set() const{
    return m_bootstrap_pipeline_template_isSet;
}

bool OAIProjectResourceProperties::is_bootstrap_pipeline_template_Valid() const{
    return m_bootstrap_pipeline_template_isValid;
}

QString OAIProjectResourceProperties::getOwnerUpn() const {
    return m_owner_upn;
}
void OAIProjectResourceProperties::setOwnerUpn(const QString &owner_upn) {
    m_owner_upn = owner_upn;
    m_owner_upn_isSet = true;
}

bool OAIProjectResourceProperties::is_owner_upn_Set() const{
    return m_owner_upn_isSet;
}

bool OAIProjectResourceProperties::is_owner_upn_Valid() const{
    return m_owner_upn_isValid;
}

QString OAIProjectResourceProperties::getProcessTemplateId() const {
    return m_process_template_id;
}
void OAIProjectResourceProperties::setProcessTemplateId(const QString &process_template_id) {
    m_process_template_id = process_template_id;
    m_process_template_id_isSet = true;
}

bool OAIProjectResourceProperties::is_process_template_id_Set() const{
    return m_process_template_id_isSet;
}

bool OAIProjectResourceProperties::is_process_template_id_Valid() const{
    return m_process_template_id_isValid;
}

QString OAIProjectResourceProperties::getTfsUniqueIdentifier() const {
    return m_tfs_unique_identifier;
}
void OAIProjectResourceProperties::setTfsUniqueIdentifier(const QString &tfs_unique_identifier) {
    m_tfs_unique_identifier = tfs_unique_identifier;
    m_tfs_unique_identifier_isSet = true;
}

bool OAIProjectResourceProperties::is_tfs_unique_identifier_Set() const{
    return m_tfs_unique_identifier_isSet;
}

bool OAIProjectResourceProperties::is_tfs_unique_identifier_Valid() const{
    return m_tfs_unique_identifier_isValid;
}

QString OAIProjectResourceProperties::getVersionControlOption() const {
    return m_version_control_option;
}
void OAIProjectResourceProperties::setVersionControlOption(const QString &version_control_option) {
    m_version_control_option = version_control_option;
    m_version_control_option_isSet = true;
}

bool OAIProjectResourceProperties::is_version_control_option_Set() const{
    return m_version_control_option_isSet;
}

bool OAIProjectResourceProperties::is_version_control_option_Valid() const{
    return m_version_control_option_isValid;
}

bool OAIProjectResourceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bootstrap_pipeline_template.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_upn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_process_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tfs_unique_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_control_option_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectResourceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
