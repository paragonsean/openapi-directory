/**
 * Visual Studio Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2017-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITargetResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITargetResource::OAITargetResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITargetResource::OAITargetResource() {
    this->initializeModel();
}

OAITargetResource::~OAITargetResource() {}

void OAITargetResource::initializeModel() {

    m_authorization_reference_isSet = false;
    m_authorization_reference_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAITargetResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITargetResource::fromJsonObject(QJsonObject json) {

    m_authorization_reference_isValid = ::OpenAPI::fromJsonValue(m_authorization_reference, json[QString("authorizationReference")]);
    m_authorization_reference_isSet = !json[QString("authorizationReference")].isNull() && m_authorization_reference_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;
}

QString OAITargetResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITargetResource::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_reference_isSet) {
        obj.insert(QString("authorizationReference"), ::OpenAPI::toJsonValue(m_authorization_reference));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

QString OAITargetResource::getAuthorizationReference() const {
    return m_authorization_reference;
}
void OAITargetResource::setAuthorizationReference(const QString &authorization_reference) {
    m_authorization_reference = authorization_reference;
    m_authorization_reference_isSet = true;
}

bool OAITargetResource::is_authorization_reference_Set() const{
    return m_authorization_reference_isSet;
}

bool OAITargetResource::is_authorization_reference_Valid() const{
    return m_authorization_reference_isValid;
}

QString OAITargetResource::getId() const {
    return m_id;
}
void OAITargetResource::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITargetResource::is_id_Set() const{
    return m_id_isSet;
}

bool OAITargetResource::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITargetResource::getRole() const {
    return m_role;
}
void OAITargetResource::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAITargetResource::is_role_Set() const{
    return m_role_isSet;
}

bool OAITargetResource::is_role_Valid() const{
    return m_role_isValid;
}

bool OAITargetResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITargetResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_role_isValid && true;
}

} // namespace OpenAPI
