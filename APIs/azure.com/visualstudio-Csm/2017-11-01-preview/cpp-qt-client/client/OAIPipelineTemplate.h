/**
 * Visual Studio Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2017-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPipelineTemplate.h
 *
 * Defines a VSTS pipeline template.
 */

#ifndef OAIPipelineTemplate_H
#define OAIPipelineTemplate_H

#include <QJsonObject>

#include "OAIApplicationSource.h"
#include "OAIApplicationTarget.h"
#include "OAIAuthorization.h"
#include <QMap>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIApplicationSource;
class OAIApplicationTarget;
class OAIAuthorization;

class OAIPipelineTemplate : public OAIObject {
public:
    OAIPipelineTemplate();
    OAIPipelineTemplate(QString json);
    ~OAIPipelineTemplate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIApplicationSource getApplicationSource() const;
    void setApplicationSource(const OAIApplicationSource &application_source);
    bool is_application_source_Set() const;
    bool is_application_source_Valid() const;

    OAIApplicationTarget getApplicationTarget() const;
    void setApplicationTarget(const OAIApplicationTarget &application_target);
    bool is_application_target_Set() const;
    bool is_application_target_Valid() const;

    QMap<QString, OAIAuthorization> getAuthorizationDetails() const;
    void setAuthorizationDetails(const QMap<QString, OAIAuthorization> &authorization_details);
    bool is_authorization_details_Set() const;
    bool is_authorization_details_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIApplicationSource m_application_source;
    bool m_application_source_isSet;
    bool m_application_source_isValid;

    OAIApplicationTarget m_application_target;
    bool m_application_target_isSet;
    bool m_application_target_isValid;

    QMap<QString, OAIAuthorization> m_authorization_details;
    bool m_authorization_details_isSet;
    bool m_authorization_details_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPipelineTemplate)

#endif // OAIPipelineTemplate_H
