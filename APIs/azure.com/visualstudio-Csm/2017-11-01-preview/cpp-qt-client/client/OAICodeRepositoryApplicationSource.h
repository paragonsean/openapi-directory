/**
 * Visual Studio Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2017-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICodeRepositoryApplicationSource.h
 *
 * Defines the source application, when it resides in a code repository.
 */

#ifndef OAICodeRepositoryApplicationSource_H
#define OAICodeRepositoryApplicationSource_H

#include <QJsonObject>

#include "OAIApplicationSource.h"
#include "OAICodeRepository.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICodeRepository;

class OAICodeRepositoryApplicationSource : public OAIObject {
public:
    OAICodeRepositoryApplicationSource();
    OAICodeRepositoryApplicationSource(QString json);
    ~OAICodeRepositoryApplicationSource() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICodeRepository getRepository() const;
    void setRepository(const OAICodeRepository &repository);
    bool is_repository_Set() const;
    bool is_repository_Valid() const;

    QMap<QString, QString> getApplicationConfiguration() const;
    void setApplicationConfiguration(const QMap<QString, QString> &application_configuration);
    bool is_application_configuration_Set() const;
    bool is_application_configuration_Valid() const;

    QString getApplicationType() const;
    void setApplicationType(const QString &application_type);
    bool is_application_type_Set() const;
    bool is_application_type_Valid() const;

    QString getSourceType() const;
    void setSourceType(const QString &source_type);
    bool is_source_type_Set() const;
    bool is_source_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICodeRepository m_repository;
    bool m_repository_isSet;
    bool m_repository_isValid;

    QMap<QString, QString> m_application_configuration;
    bool m_application_configuration_isSet;
    bool m_application_configuration_isValid;

    QString m_application_type;
    bool m_application_type_isSet;
    bool m_application_type_isValid;

    QString m_source_type;
    bool m_source_type_isSet;
    bool m_source_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICodeRepositoryApplicationSource)

#endif // OAICodeRepositoryApplicationSource_H
