/**
 * Visual Studio Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2017-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIExtensionsApi_H
#define OAI_OAIExtensionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExtensionResource.h"
#include "OAIExtensionResourceListResult.h"
#include "OAIExtensionResourceRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIExtensionsApi : public QObject {
    Q_OBJECT

public:
    OAIExtensionsApi(const int timeOut = 0);
    ~OAIExtensionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  account_resource_name QString [required]
    * @param[in]  extension_resource_name QString [required]
    * @param[in]  body OAIExtensionResourceRequest [required]
    */
    virtual void extensionsCreate(const QString &resource_group_name, const QString &subscription_id, const QString &api_version, const QString &account_resource_name, const QString &extension_resource_name, const OAIExtensionResourceRequest &body);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  account_resource_name QString [required]
    * @param[in]  extension_resource_name QString [required]
    */
    virtual void extensionsDelete(const QString &resource_group_name, const QString &subscription_id, const QString &api_version, const QString &account_resource_name, const QString &extension_resource_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  account_resource_name QString [required]
    * @param[in]  extension_resource_name QString [required]
    */
    virtual void extensionsGet(const QString &resource_group_name, const QString &subscription_id, const QString &api_version, const QString &account_resource_name, const QString &extension_resource_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  account_resource_name QString [required]
    */
    virtual void extensionsListByAccount(const QString &resource_group_name, const QString &subscription_id, const QString &api_version, const QString &account_resource_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  account_resource_name QString [required]
    * @param[in]  extension_resource_name QString [required]
    * @param[in]  body OAIExtensionResourceRequest [required]
    */
    virtual void extensionsUpdate(const QString &resource_group_name, const QString &subscription_id, const QString &api_version, const QString &account_resource_name, const QString &extension_resource_name, const OAIExtensionResourceRequest &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void extensionsCreateCallback(OAIHttpRequestWorker *worker);
    void extensionsDeleteCallback(OAIHttpRequestWorker *worker);
    void extensionsGetCallback(OAIHttpRequestWorker *worker);
    void extensionsListByAccountCallback(OAIHttpRequestWorker *worker);
    void extensionsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void extensionsCreateSignal(OAIExtensionResource summary);
    void extensionsDeleteSignal();
    void extensionsGetSignal(OAIExtensionResource summary);
    void extensionsListByAccountSignal(OAIExtensionResourceListResult summary);
    void extensionsUpdateSignal(OAIExtensionResource summary);


    void extensionsCreateSignalFull(OAIHttpRequestWorker *worker, OAIExtensionResource summary);
    void extensionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void extensionsGetSignalFull(OAIHttpRequestWorker *worker, OAIExtensionResource summary);
    void extensionsListByAccountSignalFull(OAIHttpRequestWorker *worker, OAIExtensionResourceListResult summary);
    void extensionsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIExtensionResource summary);

    Q_DECL_DEPRECATED_X("Use extensionsCreateSignalError() instead")
    void extensionsCreateSignalE(OAIExtensionResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extensionsCreateSignalError(OAIExtensionResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extensionsDeleteSignalError() instead")
    void extensionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void extensionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extensionsGetSignalError() instead")
    void extensionsGetSignalE(OAIExtensionResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extensionsGetSignalError(OAIExtensionResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extensionsListByAccountSignalError() instead")
    void extensionsListByAccountSignalE(OAIExtensionResourceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extensionsListByAccountSignalError(OAIExtensionResourceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extensionsUpdateSignalError() instead")
    void extensionsUpdateSignalE(OAIExtensionResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extensionsUpdateSignalError(OAIExtensionResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use extensionsCreateSignalErrorFull() instead")
    void extensionsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extensionsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extensionsDeleteSignalErrorFull() instead")
    void extensionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extensionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extensionsGetSignalErrorFull() instead")
    void extensionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extensionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extensionsListByAccountSignalErrorFull() instead")
    void extensionsListByAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extensionsListByAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extensionsUpdateSignalErrorFull() instead")
    void extensionsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extensionsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
