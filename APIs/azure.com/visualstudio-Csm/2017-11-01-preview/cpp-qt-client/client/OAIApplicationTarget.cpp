/**
 * Visual Studio Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2017-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationTarget.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationTarget::OAIApplicationTarget(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationTarget::OAIApplicationTarget() {
    this->initializeModel();
}

OAIApplicationTarget::~OAIApplicationTarget() {}

void OAIApplicationTarget::initializeModel() {

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_target_type_isSet = false;
    m_target_type_isValid = false;
}

void OAIApplicationTarget::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationTarget::fromJsonObject(QJsonObject json) {

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_target_type_isValid = ::OpenAPI::fromJsonValue(m_target_type, json[QString("targetType")]);
    m_target_type_isSet = !json[QString("targetType")].isNull() && m_target_type_isValid;
}

QString OAIApplicationTarget::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationTarget::asJsonObject() const {
    QJsonObject obj;
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_target_type_isSet) {
        obj.insert(QString("targetType"), ::OpenAPI::toJsonValue(m_target_type));
    }
    return obj;
}

QList<OAITargetResource> OAIApplicationTarget::getResources() const {
    return m_resources;
}
void OAIApplicationTarget::setResources(const QList<OAITargetResource> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIApplicationTarget::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIApplicationTarget::is_resources_Valid() const{
    return m_resources_isValid;
}

QString OAIApplicationTarget::getTargetType() const {
    return m_target_type;
}
void OAIApplicationTarget::setTargetType(const QString &target_type) {
    m_target_type = target_type;
    m_target_type_isSet = true;
}

bool OAIApplicationTarget::is_target_type_Set() const{
    return m_target_type_isSet;
}

bool OAIApplicationTarget::is_target_type_Valid() const{
    return m_target_type_isValid;
}

bool OAIApplicationTarget::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationTarget::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resources_isValid && m_target_type_isValid && true;
}

} // namespace OpenAPI
