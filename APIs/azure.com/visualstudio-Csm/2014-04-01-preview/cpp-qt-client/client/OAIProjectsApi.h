/**
 * Visual Studio Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2014-04-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIProjectResource.h"
#include "OAIProjectResourceListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  root_resource_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  body OAIProjectResource [required]
    * @param[in]  validating QString [optional]
    */
    Q_DECL_DEPRECATED virtual void projectsCreate(const QString &resource_group_name, const QString &subscription_id, const QString &api_version, const QString &root_resource_name, const QString &resource_name, const OAIProjectResource &body, const ::OpenAPI::OptionalParam<QString> &validating = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  root_resource_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    Q_DECL_DEPRECATED virtual void projectsGet(const QString &resource_group_name, const QString &subscription_id, const QString &api_version, const QString &root_resource_name, const QString &resource_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  root_resource_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  sub_container_name QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  job_id QString [optional]
    */
    Q_DECL_DEPRECATED virtual void projectsGetJobStatus(const QString &resource_group_name, const QString &subscription_id, const QString &api_version, const QString &root_resource_name, const QString &resource_name, const QString &sub_container_name, const QString &operation, const ::OpenAPI::OptionalParam<QString> &job_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  root_resource_name QString [required]
    */
    Q_DECL_DEPRECATED virtual void projectsListByResourceGroup(const QString &resource_group_name, const QString &subscription_id, const QString &api_version, const QString &root_resource_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  root_resource_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  body OAIProjectResource [required]
    */
    Q_DECL_DEPRECATED virtual void projectsUpdate(const QString &resource_group_name, const QString &subscription_id, const QString &api_version, const QString &root_resource_name, const QString &resource_name, const OAIProjectResource &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void projectsCreateCallback(OAIHttpRequestWorker *worker);
    void projectsGetCallback(OAIHttpRequestWorker *worker);
    void projectsGetJobStatusCallback(OAIHttpRequestWorker *worker);
    void projectsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void projectsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void projectsCreateSignal(OAIProjectResource summary);
    void projectsGetSignal(OAIProjectResource summary);
    void projectsGetJobStatusSignal(OAIProjectResource summary);
    void projectsListByResourceGroupSignal(OAIProjectResourceListResult summary);
    void projectsUpdateSignal(OAIProjectResource summary);


    void projectsCreateSignalFull(OAIHttpRequestWorker *worker, OAIProjectResource summary);
    void projectsGetSignalFull(OAIHttpRequestWorker *worker, OAIProjectResource summary);
    void projectsGetJobStatusSignalFull(OAIHttpRequestWorker *worker, OAIProjectResource summary);
    void projectsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIProjectResourceListResult summary);
    void projectsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIProjectResource summary);

    Q_DECL_DEPRECATED_X("Use projectsCreateSignalError() instead")
    void projectsCreateSignalE(OAIProjectResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsCreateSignalError(OAIProjectResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsGetSignalError() instead")
    void projectsGetSignalE(OAIProjectResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsGetSignalError(OAIProjectResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsGetJobStatusSignalError() instead")
    void projectsGetJobStatusSignalE(OAIProjectResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsGetJobStatusSignalError(OAIProjectResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsListByResourceGroupSignalError() instead")
    void projectsListByResourceGroupSignalE(OAIProjectResourceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsListByResourceGroupSignalError(OAIProjectResourceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsUpdateSignalError() instead")
    void projectsUpdateSignalE(OAIProjectResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsUpdateSignalError(OAIProjectResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use projectsCreateSignalErrorFull() instead")
    void projectsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsGetSignalErrorFull() instead")
    void projectsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsGetJobStatusSignalErrorFull() instead")
    void projectsGetJobStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsGetJobStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsListByResourceGroupSignalErrorFull() instead")
    void projectsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsUpdateSignalErrorFull() instead")
    void projectsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
