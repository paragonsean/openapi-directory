/**
 * Visual Studio Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2014-04-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountsApi_H
#define OAI_OAIAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountResource.h"
#include "OAIAccountResourceListResult.h"
#include "OAIAccountResourceRequest.h"
#include "OAIAccountTagRequest.h"
#include "OAICheckNameAvailabilityParameter.h"
#include "OAICheckNameAvailabilityResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountsApi : public QObject {
    Q_OBJECT

public:
    OAIAccountsApi(const int timeOut = 0);
    ~OAIAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  body OAICheckNameAvailabilityParameter [required]
    */
    virtual void accountsCheckNameAvailability(const QString &subscription_id, const QString &api_version, const OAICheckNameAvailabilityParameter &body);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  body OAIAccountResourceRequest [required]
    */
    virtual void accountsCreateOrUpdate(const QString &resource_group_name, const QString &subscription_id, const QString &api_version, const QString &resource_name, const OAIAccountResourceRequest &body);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void accountsDelete(const QString &resource_group_name, const QString &subscription_id, const QString &api_version, const QString &resource_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void accountsGet(const QString &resource_group_name, const QString &subscription_id, const QString &api_version, const QString &resource_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void accountsListByResourceGroup(const QString &resource_group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  body OAIAccountTagRequest [required]
    */
    virtual void accountsUpdate(const QString &resource_group_name, const QString &subscription_id, const QString &api_version, const QString &resource_name, const OAIAccountTagRequest &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accountsCheckNameAvailabilityCallback(OAIHttpRequestWorker *worker);
    void accountsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void accountsDeleteCallback(OAIHttpRequestWorker *worker);
    void accountsGetCallback(OAIHttpRequestWorker *worker);
    void accountsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void accountsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accountsCheckNameAvailabilitySignal(OAICheckNameAvailabilityResult summary);
    void accountsCreateOrUpdateSignal(OAIAccountResource summary);
    void accountsDeleteSignal();
    void accountsGetSignal(OAIAccountResource summary);
    void accountsListByResourceGroupSignal(OAIAccountResourceListResult summary);
    void accountsUpdateSignal(OAIAccountResource summary);


    void accountsCheckNameAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAICheckNameAvailabilityResult summary);
    void accountsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAccountResource summary);
    void accountsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void accountsGetSignalFull(OAIHttpRequestWorker *worker, OAIAccountResource summary);
    void accountsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIAccountResourceListResult summary);
    void accountsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAccountResource summary);

    Q_DECL_DEPRECATED_X("Use accountsCheckNameAvailabilitySignalError() instead")
    void accountsCheckNameAvailabilitySignalE(OAICheckNameAvailabilityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsCheckNameAvailabilitySignalError(OAICheckNameAvailabilityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsCreateOrUpdateSignalError() instead")
    void accountsCreateOrUpdateSignalE(OAIAccountResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsCreateOrUpdateSignalError(OAIAccountResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsDeleteSignalError() instead")
    void accountsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsGetSignalError() instead")
    void accountsGetSignalE(OAIAccountResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsGetSignalError(OAIAccountResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsListByResourceGroupSignalError() instead")
    void accountsListByResourceGroupSignalE(OAIAccountResourceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsListByResourceGroupSignalError(OAIAccountResourceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsUpdateSignalError() instead")
    void accountsUpdateSignalE(OAIAccountResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsUpdateSignalError(OAIAccountResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accountsCheckNameAvailabilitySignalErrorFull() instead")
    void accountsCheckNameAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsCheckNameAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsCreateOrUpdateSignalErrorFull() instead")
    void accountsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsDeleteSignalErrorFull() instead")
    void accountsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsGetSignalErrorFull() instead")
    void accountsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsListByResourceGroupSignalErrorFull() instead")
    void accountsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountsUpdateSignalErrorFull() instead")
    void accountsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
