/*
 * Visual Studio Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2014-04-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ProjectResource;
import org.openapitools.client.model.ProjectResourceListResult;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for projectsCreate
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param rootResourceName Name of the Team Services account. (required)
     * @param resourceName Name of the Team Services project. (required)
     * @param body The request data. (required)
     * @param validating This parameter is ignored and should be set to an empty string. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the created or updated team project resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The operation succeeded. A job to create the team project resource has been queued. The URI to monitor the status of the job is provided in the &#39;location&#39; header. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call projectsCreateCall(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName, String resourceName, ProjectResource body, String validating, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "rootResourceName" + "}", localVarApiClient.escapeString(rootResourceName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (validating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validating", validating));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsCreateValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName, String resourceName, ProjectResource body, String validating, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling projectsCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsCreate(Async)");
        }

        // verify the required parameter 'rootResourceName' is set
        if (rootResourceName == null) {
            throw new ApiException("Missing the required parameter 'rootResourceName' when calling projectsCreate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling projectsCreate(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling projectsCreate(Async)");
        }

        return projectsCreateCall(resourceGroupName, subscriptionId, apiVersion, rootResourceName, resourceName, body, validating, _callback);

    }

    /**
     * Projects_Create
     * Creates a Team Services project in the collection with the specified name. &#39;VersionControlOption&#39; and &#39;ProcessTemplateId&#39; must be specified in the resource properties. Valid values for VersionControlOption: Git, Tfvc. Valid values for ProcessTemplateId: 6B724908-EF14-45CF-84F8-768B5384DA45, ADCC42AB-9882-485E-A3ED-7678F01F66BC, 27450541-8E31-4150-9947-DC59F998FC01 (these IDs correspond to Scrum, Agile, and CMMI process templates).
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param rootResourceName Name of the Team Services account. (required)
     * @param resourceName Name of the Team Services project. (required)
     * @param body The request data. (required)
     * @param validating This parameter is ignored and should be set to an empty string. (optional)
     * @return ProjectResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the created or updated team project resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The operation succeeded. A job to create the team project resource has been queued. The URI to monitor the status of the job is provided in the &#39;location&#39; header. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ProjectResource projectsCreate(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName, String resourceName, ProjectResource body, String validating) throws ApiException {
        ApiResponse<ProjectResource> localVarResp = projectsCreateWithHttpInfo(resourceGroupName, subscriptionId, apiVersion, rootResourceName, resourceName, body, validating);
        return localVarResp.getData();
    }

    /**
     * Projects_Create
     * Creates a Team Services project in the collection with the specified name. &#39;VersionControlOption&#39; and &#39;ProcessTemplateId&#39; must be specified in the resource properties. Valid values for VersionControlOption: Git, Tfvc. Valid values for ProcessTemplateId: 6B724908-EF14-45CF-84F8-768B5384DA45, ADCC42AB-9882-485E-A3ED-7678F01F66BC, 27450541-8E31-4150-9947-DC59F998FC01 (these IDs correspond to Scrum, Agile, and CMMI process templates).
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param rootResourceName Name of the Team Services account. (required)
     * @param resourceName Name of the Team Services project. (required)
     * @param body The request data. (required)
     * @param validating This parameter is ignored and should be set to an empty string. (optional)
     * @return ApiResponse&lt;ProjectResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the created or updated team project resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The operation succeeded. A job to create the team project resource has been queued. The URI to monitor the status of the job is provided in the &#39;location&#39; header. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ProjectResource> projectsCreateWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName, String resourceName, ProjectResource body, String validating) throws ApiException {
        okhttp3.Call localVarCall = projectsCreateValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, rootResourceName, resourceName, body, validating, null);
        Type localVarReturnType = new TypeToken<ProjectResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Projects_Create (asynchronously)
     * Creates a Team Services project in the collection with the specified name. &#39;VersionControlOption&#39; and &#39;ProcessTemplateId&#39; must be specified in the resource properties. Valid values for VersionControlOption: Git, Tfvc. Valid values for ProcessTemplateId: 6B724908-EF14-45CF-84F8-768B5384DA45, ADCC42AB-9882-485E-A3ED-7678F01F66BC, 27450541-8E31-4150-9947-DC59F998FC01 (these IDs correspond to Scrum, Agile, and CMMI process templates).
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param rootResourceName Name of the Team Services account. (required)
     * @param resourceName Name of the Team Services project. (required)
     * @param body The request data. (required)
     * @param validating This parameter is ignored and should be set to an empty string. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the created or updated team project resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The operation succeeded. A job to create the team project resource has been queued. The URI to monitor the status of the job is provided in the &#39;location&#39; header. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call projectsCreateAsync(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName, String resourceName, ProjectResource body, String validating, final ApiCallback<ProjectResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsCreateValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, rootResourceName, resourceName, body, validating, _callback);
        Type localVarReturnType = new TypeToken<ProjectResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsGet
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param rootResourceName Name of the Team Services account. (required)
     * @param resourceName Name of the Team Services project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the updated team project resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The project or Azure subscription was not found. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call projectsGetCall(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName, String resourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "rootResourceName" + "}", localVarApiClient.escapeString(rootResourceName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsGetValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName, String resourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling projectsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsGet(Async)");
        }

        // verify the required parameter 'rootResourceName' is set
        if (rootResourceName == null) {
            throw new ApiException("Missing the required parameter 'rootResourceName' when calling projectsGet(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling projectsGet(Async)");
        }

        return projectsGetCall(resourceGroupName, subscriptionId, apiVersion, rootResourceName, resourceName, _callback);

    }

    /**
     * Projects_Get
     * Gets the details of a Team Services project resource.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param rootResourceName Name of the Team Services account. (required)
     * @param resourceName Name of the Team Services project. (required)
     * @return ProjectResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the updated team project resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The project or Azure subscription was not found. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ProjectResource projectsGet(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName, String resourceName) throws ApiException {
        ApiResponse<ProjectResource> localVarResp = projectsGetWithHttpInfo(resourceGroupName, subscriptionId, apiVersion, rootResourceName, resourceName);
        return localVarResp.getData();
    }

    /**
     * Projects_Get
     * Gets the details of a Team Services project resource.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param rootResourceName Name of the Team Services account. (required)
     * @param resourceName Name of the Team Services project. (required)
     * @return ApiResponse&lt;ProjectResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the updated team project resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The project or Azure subscription was not found. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ProjectResource> projectsGetWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName, String resourceName) throws ApiException {
        okhttp3.Call localVarCall = projectsGetValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, rootResourceName, resourceName, null);
        Type localVarReturnType = new TypeToken<ProjectResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Projects_Get (asynchronously)
     * Gets the details of a Team Services project resource.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param rootResourceName Name of the Team Services account. (required)
     * @param resourceName Name of the Team Services project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the updated team project resource. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The project or Azure subscription was not found. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call projectsGetAsync(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName, String resourceName, final ApiCallback<ProjectResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsGetValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, rootResourceName, resourceName, _callback);
        Type localVarReturnType = new TypeToken<ProjectResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsGetJobStatus
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param rootResourceName Name of the Team Services account. (required)
     * @param resourceName Name of the Team Services project. (required)
     * @param subContainerName This parameter should be set to the resourceName. (required)
     * @param operation The operation type. The only supported value is &#39;put&#39;. (required)
     * @param jobId The job identifier. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the newly created team project resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The team project creation job is still running. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call projectsGetJobStatusCall(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName, String resourceName, String subContainerName, String operation, UUID jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}/subContainers/{subContainerName}/status"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "rootResourceName" + "}", localVarApiClient.escapeString(rootResourceName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "subContainerName" + "}", localVarApiClient.escapeString(subContainerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (jobId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobId", jobId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsGetJobStatusValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName, String resourceName, String subContainerName, String operation, UUID jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling projectsGetJobStatus(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsGetJobStatus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsGetJobStatus(Async)");
        }

        // verify the required parameter 'rootResourceName' is set
        if (rootResourceName == null) {
            throw new ApiException("Missing the required parameter 'rootResourceName' when calling projectsGetJobStatus(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling projectsGetJobStatus(Async)");
        }

        // verify the required parameter 'subContainerName' is set
        if (subContainerName == null) {
            throw new ApiException("Missing the required parameter 'subContainerName' when calling projectsGetJobStatus(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling projectsGetJobStatus(Async)");
        }

        return projectsGetJobStatusCall(resourceGroupName, subscriptionId, apiVersion, rootResourceName, resourceName, subContainerName, operation, jobId, _callback);

    }

    /**
     * Projects_GetJobStatus
     * Gets the status of the project resource creation job.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param rootResourceName Name of the Team Services account. (required)
     * @param resourceName Name of the Team Services project. (required)
     * @param subContainerName This parameter should be set to the resourceName. (required)
     * @param operation The operation type. The only supported value is &#39;put&#39;. (required)
     * @param jobId The job identifier. (optional)
     * @return ProjectResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the newly created team project resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The team project creation job is still running. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ProjectResource projectsGetJobStatus(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName, String resourceName, String subContainerName, String operation, UUID jobId) throws ApiException {
        ApiResponse<ProjectResource> localVarResp = projectsGetJobStatusWithHttpInfo(resourceGroupName, subscriptionId, apiVersion, rootResourceName, resourceName, subContainerName, operation, jobId);
        return localVarResp.getData();
    }

    /**
     * Projects_GetJobStatus
     * Gets the status of the project resource creation job.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param rootResourceName Name of the Team Services account. (required)
     * @param resourceName Name of the Team Services project. (required)
     * @param subContainerName This parameter should be set to the resourceName. (required)
     * @param operation The operation type. The only supported value is &#39;put&#39;. (required)
     * @param jobId The job identifier. (optional)
     * @return ApiResponse&lt;ProjectResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the newly created team project resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The team project creation job is still running. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ProjectResource> projectsGetJobStatusWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName, String resourceName, String subContainerName, String operation, UUID jobId) throws ApiException {
        okhttp3.Call localVarCall = projectsGetJobStatusValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, rootResourceName, resourceName, subContainerName, operation, jobId, null);
        Type localVarReturnType = new TypeToken<ProjectResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Projects_GetJobStatus (asynchronously)
     * Gets the status of the project resource creation job.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param rootResourceName Name of the Team Services account. (required)
     * @param resourceName Name of the Team Services project. (required)
     * @param subContainerName This parameter should be set to the resourceName. (required)
     * @param operation The operation type. The only supported value is &#39;put&#39;. (required)
     * @param jobId The job identifier. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the newly created team project resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The team project creation job is still running. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call projectsGetJobStatusAsync(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName, String resourceName, String subContainerName, String operation, UUID jobId, final ApiCallback<ProjectResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsGetJobStatusValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, rootResourceName, resourceName, subContainerName, operation, jobId, _callback);
        Type localVarReturnType = new TypeToken<ProjectResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsListByResourceGroup
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param rootResourceName Name of the Team Services account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the Visual Studio Team Services project resources created in the specified Team Services account. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call projectsListByResourceGroupCall(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "rootResourceName" + "}", localVarApiClient.escapeString(rootResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsListByResourceGroupValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling projectsListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsListByResourceGroup(Async)");
        }

        // verify the required parameter 'rootResourceName' is set
        if (rootResourceName == null) {
            throw new ApiException("Missing the required parameter 'rootResourceName' when calling projectsListByResourceGroup(Async)");
        }

        return projectsListByResourceGroupCall(resourceGroupName, subscriptionId, apiVersion, rootResourceName, _callback);

    }

    /**
     * Projects_ListByResourceGroup
     * Gets all Visual Studio Team Services project resources created in the specified Team Services account.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param rootResourceName Name of the Team Services account. (required)
     * @return ProjectResourceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the Visual Studio Team Services project resources created in the specified Team Services account. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ProjectResourceListResult projectsListByResourceGroup(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName) throws ApiException {
        ApiResponse<ProjectResourceListResult> localVarResp = projectsListByResourceGroupWithHttpInfo(resourceGroupName, subscriptionId, apiVersion, rootResourceName);
        return localVarResp.getData();
    }

    /**
     * Projects_ListByResourceGroup
     * Gets all Visual Studio Team Services project resources created in the specified Team Services account.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param rootResourceName Name of the Team Services account. (required)
     * @return ApiResponse&lt;ProjectResourceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the Visual Studio Team Services project resources created in the specified Team Services account. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ProjectResourceListResult> projectsListByResourceGroupWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName) throws ApiException {
        okhttp3.Call localVarCall = projectsListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, rootResourceName, null);
        Type localVarReturnType = new TypeToken<ProjectResourceListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Projects_ListByResourceGroup (asynchronously)
     * Gets all Visual Studio Team Services project resources created in the specified Team Services account.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param rootResourceName Name of the Team Services account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the Visual Studio Team Services project resources created in the specified Team Services account. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call projectsListByResourceGroupAsync(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName, final ApiCallback<ProjectResourceListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsListByResourceGroupValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, rootResourceName, _callback);
        Type localVarReturnType = new TypeToken<ProjectResourceListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsUpdate
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param rootResourceName Name of the Team Services account. (required)
     * @param resourceName Name of the Team Services project. (required)
     * @param body The request data. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the updated team project resource. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call projectsUpdateCall(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName, String resourceName, ProjectResource body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "rootResourceName" + "}", localVarApiClient.escapeString(rootResourceName.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsUpdateValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName, String resourceName, ProjectResource body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling projectsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsUpdate(Async)");
        }

        // verify the required parameter 'rootResourceName' is set
        if (rootResourceName == null) {
            throw new ApiException("Missing the required parameter 'rootResourceName' when calling projectsUpdate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling projectsUpdate(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling projectsUpdate(Async)");
        }

        return projectsUpdateCall(resourceGroupName, subscriptionId, apiVersion, rootResourceName, resourceName, body, _callback);

    }

    /**
     * Projects_Update
     * Updates the tags of the specified Team Services project.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param rootResourceName Name of the Team Services account. (required)
     * @param resourceName Name of the Team Services project. (required)
     * @param body The request data. (required)
     * @return ProjectResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the updated team project resource. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ProjectResource projectsUpdate(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName, String resourceName, ProjectResource body) throws ApiException {
        ApiResponse<ProjectResource> localVarResp = projectsUpdateWithHttpInfo(resourceGroupName, subscriptionId, apiVersion, rootResourceName, resourceName, body);
        return localVarResp.getData();
    }

    /**
     * Projects_Update
     * Updates the tags of the specified Team Services project.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param rootResourceName Name of the Team Services account. (required)
     * @param resourceName Name of the Team Services project. (required)
     * @param body The request data. (required)
     * @return ApiResponse&lt;ProjectResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the updated team project resource. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ProjectResource> projectsUpdateWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName, String resourceName, ProjectResource body) throws ApiException {
        okhttp3.Call localVarCall = projectsUpdateValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, rootResourceName, resourceName, body, null);
        Type localVarReturnType = new TypeToken<ProjectResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Projects_Update (asynchronously)
     * Updates the tags of the specified Team Services project.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param rootResourceName Name of the Team Services account. (required)
     * @param resourceName Name of the Team Services project. (required)
     * @param body The request data. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the details of the updated team project resource. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call projectsUpdateAsync(String resourceGroupName, String subscriptionId, String apiVersion, String rootResourceName, String resourceName, ProjectResource body, final ApiCallback<ProjectResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsUpdateValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, rootResourceName, resourceName, body, _callback);
        Type localVarReturnType = new TypeToken<ProjectResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
