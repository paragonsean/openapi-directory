/*
 * Visual Studio Resource Provider Client
 * Use these APIs to manage Visual Studio Team Services resources through the Azure Resource Manager. All task operations conform to the HTTP/1.1 protocol specification and each operation returns an x-ms-request-id header that can be used to obtain information about the request. You must make sure that requests made to these resources are secure. For more information, see https://docs.microsoft.com/en-us/rest/api/index.
 *
 * The version of the OpenAPI document: 2014-04-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ExtensionResource;
import org.openapitools.client.model.ExtensionResourceListResult;
import org.openapitools.client.model.ExtensionResourceRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExtensionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExtensionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExtensionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for extensionsCreate
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param accountResourceName The name of the Visual Studio Team Services account resource. (required)
     * @param extensionResourceName The name of the extension. (required)
     * @param body An object containing additional information related to the extension request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The extension resource was created for the specified account. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extensionsCreateCall(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName, String extensionResourceName, ExtensionResourceRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension/{extensionResourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "accountResourceName" + "}", localVarApiClient.escapeString(accountResourceName.toString()))
            .replace("{" + "extensionResourceName" + "}", localVarApiClient.escapeString(extensionResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extensionsCreateValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName, String extensionResourceName, ExtensionResourceRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling extensionsCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling extensionsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling extensionsCreate(Async)");
        }

        // verify the required parameter 'accountResourceName' is set
        if (accountResourceName == null) {
            throw new ApiException("Missing the required parameter 'accountResourceName' when calling extensionsCreate(Async)");
        }

        // verify the required parameter 'extensionResourceName' is set
        if (extensionResourceName == null) {
            throw new ApiException("Missing the required parameter 'extensionResourceName' when calling extensionsCreate(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling extensionsCreate(Async)");
        }

        return extensionsCreateCall(resourceGroupName, subscriptionId, apiVersion, accountResourceName, extensionResourceName, body, _callback);

    }

    /**
     * Extensions_Create
     * Registers the extension with a Visual Studio Team Services account.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param accountResourceName The name of the Visual Studio Team Services account resource. (required)
     * @param extensionResourceName The name of the extension. (required)
     * @param body An object containing additional information related to the extension request. (required)
     * @return ExtensionResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The extension resource was created for the specified account. </td><td>  -  </td></tr>
     </table>
     */
    public ExtensionResource extensionsCreate(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName, String extensionResourceName, ExtensionResourceRequest body) throws ApiException {
        ApiResponse<ExtensionResource> localVarResp = extensionsCreateWithHttpInfo(resourceGroupName, subscriptionId, apiVersion, accountResourceName, extensionResourceName, body);
        return localVarResp.getData();
    }

    /**
     * Extensions_Create
     * Registers the extension with a Visual Studio Team Services account.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param accountResourceName The name of the Visual Studio Team Services account resource. (required)
     * @param extensionResourceName The name of the extension. (required)
     * @param body An object containing additional information related to the extension request. (required)
     * @return ApiResponse&lt;ExtensionResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The extension resource was created for the specified account. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtensionResource> extensionsCreateWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName, String extensionResourceName, ExtensionResourceRequest body) throws ApiException {
        okhttp3.Call localVarCall = extensionsCreateValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, accountResourceName, extensionResourceName, body, null);
        Type localVarReturnType = new TypeToken<ExtensionResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Extensions_Create (asynchronously)
     * Registers the extension with a Visual Studio Team Services account.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param accountResourceName The name of the Visual Studio Team Services account resource. (required)
     * @param extensionResourceName The name of the extension. (required)
     * @param body An object containing additional information related to the extension request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The extension resource was created for the specified account. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extensionsCreateAsync(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName, String extensionResourceName, ExtensionResourceRequest body, final ApiCallback<ExtensionResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = extensionsCreateValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, accountResourceName, extensionResourceName, body, _callback);
        Type localVarReturnType = new TypeToken<ExtensionResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extensionsDelete
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param accountResourceName The name of the Visual Studio Team Services account resource. (required)
     * @param extensionResourceName The name of the extension. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The extension resource has been deleted for the specified account. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extensionsDeleteCall(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName, String extensionResourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension/{extensionResourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "accountResourceName" + "}", localVarApiClient.escapeString(accountResourceName.toString()))
            .replace("{" + "extensionResourceName" + "}", localVarApiClient.escapeString(extensionResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extensionsDeleteValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName, String extensionResourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling extensionsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling extensionsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling extensionsDelete(Async)");
        }

        // verify the required parameter 'accountResourceName' is set
        if (accountResourceName == null) {
            throw new ApiException("Missing the required parameter 'accountResourceName' when calling extensionsDelete(Async)");
        }

        // verify the required parameter 'extensionResourceName' is set
        if (extensionResourceName == null) {
            throw new ApiException("Missing the required parameter 'extensionResourceName' when calling extensionsDelete(Async)");
        }

        return extensionsDeleteCall(resourceGroupName, subscriptionId, apiVersion, accountResourceName, extensionResourceName, _callback);

    }

    /**
     * Extensions_Delete
     * Removes an extension resource registration for a Visual Studio Team Services account.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param accountResourceName The name of the Visual Studio Team Services account resource. (required)
     * @param extensionResourceName The name of the extension. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The extension resource has been deleted for the specified account. </td><td>  -  </td></tr>
     </table>
     */
    public void extensionsDelete(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName, String extensionResourceName) throws ApiException {
        extensionsDeleteWithHttpInfo(resourceGroupName, subscriptionId, apiVersion, accountResourceName, extensionResourceName);
    }

    /**
     * Extensions_Delete
     * Removes an extension resource registration for a Visual Studio Team Services account.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param accountResourceName The name of the Visual Studio Team Services account resource. (required)
     * @param extensionResourceName The name of the extension. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The extension resource has been deleted for the specified account. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> extensionsDeleteWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName, String extensionResourceName) throws ApiException {
        okhttp3.Call localVarCall = extensionsDeleteValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, accountResourceName, extensionResourceName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Extensions_Delete (asynchronously)
     * Removes an extension resource registration for a Visual Studio Team Services account.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param accountResourceName The name of the Visual Studio Team Services account resource. (required)
     * @param extensionResourceName The name of the extension. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The extension resource has been deleted for the specified account. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extensionsDeleteAsync(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName, String extensionResourceName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = extensionsDeleteValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, accountResourceName, extensionResourceName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for extensionsGet
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param accountResourceName The name of the Visual Studio Team Services account resource. (required)
     * @param extensionResourceName The name of the extension. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the extension resource details for the specified account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified extension has no plans defined. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extensionsGetCall(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName, String extensionResourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension/{extensionResourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "accountResourceName" + "}", localVarApiClient.escapeString(accountResourceName.toString()))
            .replace("{" + "extensionResourceName" + "}", localVarApiClient.escapeString(extensionResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extensionsGetValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName, String extensionResourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling extensionsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling extensionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling extensionsGet(Async)");
        }

        // verify the required parameter 'accountResourceName' is set
        if (accountResourceName == null) {
            throw new ApiException("Missing the required parameter 'accountResourceName' when calling extensionsGet(Async)");
        }

        // verify the required parameter 'extensionResourceName' is set
        if (extensionResourceName == null) {
            throw new ApiException("Missing the required parameter 'extensionResourceName' when calling extensionsGet(Async)");
        }

        return extensionsGetCall(resourceGroupName, subscriptionId, apiVersion, accountResourceName, extensionResourceName, _callback);

    }

    /**
     * Extensions_Get
     * Gets the details of an extension associated with a Visual Studio Team Services account resource.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param accountResourceName The name of the Visual Studio Team Services account resource. (required)
     * @param extensionResourceName The name of the extension. (required)
     * @return ExtensionResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the extension resource details for the specified account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified extension has no plans defined. </td><td>  -  </td></tr>
     </table>
     */
    public ExtensionResource extensionsGet(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName, String extensionResourceName) throws ApiException {
        ApiResponse<ExtensionResource> localVarResp = extensionsGetWithHttpInfo(resourceGroupName, subscriptionId, apiVersion, accountResourceName, extensionResourceName);
        return localVarResp.getData();
    }

    /**
     * Extensions_Get
     * Gets the details of an extension associated with a Visual Studio Team Services account resource.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param accountResourceName The name of the Visual Studio Team Services account resource. (required)
     * @param extensionResourceName The name of the extension. (required)
     * @return ApiResponse&lt;ExtensionResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the extension resource details for the specified account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified extension has no plans defined. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtensionResource> extensionsGetWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName, String extensionResourceName) throws ApiException {
        okhttp3.Call localVarCall = extensionsGetValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, accountResourceName, extensionResourceName, null);
        Type localVarReturnType = new TypeToken<ExtensionResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Extensions_Get (asynchronously)
     * Gets the details of an extension associated with a Visual Studio Team Services account resource.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param accountResourceName The name of the Visual Studio Team Services account resource. (required)
     * @param extensionResourceName The name of the extension. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains the extension resource details for the specified account. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified extension has no plans defined. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extensionsGetAsync(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName, String extensionResourceName, final ApiCallback<ExtensionResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = extensionsGetValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, accountResourceName, extensionResourceName, _callback);
        Type localVarReturnType = new TypeToken<ExtensionResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extensionsListByAccount
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param accountResourceName The name of the Visual Studio Team Services account resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains all extension resource details for the specified account. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extensionsListByAccountCall(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "accountResourceName" + "}", localVarApiClient.escapeString(accountResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extensionsListByAccountValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling extensionsListByAccount(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling extensionsListByAccount(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling extensionsListByAccount(Async)");
        }

        // verify the required parameter 'accountResourceName' is set
        if (accountResourceName == null) {
            throw new ApiException("Missing the required parameter 'accountResourceName' when calling extensionsListByAccount(Async)");
        }

        return extensionsListByAccountCall(resourceGroupName, subscriptionId, apiVersion, accountResourceName, _callback);

    }

    /**
     * Extensions_ListByAccount
     * Gets the details of the extension resources created within the resource group.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param accountResourceName The name of the Visual Studio Team Services account resource. (required)
     * @return ExtensionResourceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains all extension resource details for the specified account. </td><td>  -  </td></tr>
     </table>
     */
    public ExtensionResourceListResult extensionsListByAccount(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName) throws ApiException {
        ApiResponse<ExtensionResourceListResult> localVarResp = extensionsListByAccountWithHttpInfo(resourceGroupName, subscriptionId, apiVersion, accountResourceName);
        return localVarResp.getData();
    }

    /**
     * Extensions_ListByAccount
     * Gets the details of the extension resources created within the resource group.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param accountResourceName The name of the Visual Studio Team Services account resource. (required)
     * @return ApiResponse&lt;ExtensionResourceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains all extension resource details for the specified account. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtensionResourceListResult> extensionsListByAccountWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName) throws ApiException {
        okhttp3.Call localVarCall = extensionsListByAccountValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, accountResourceName, null);
        Type localVarReturnType = new TypeToken<ExtensionResourceListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Extensions_ListByAccount (asynchronously)
     * Gets the details of the extension resources created within the resource group.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param accountResourceName The name of the Visual Studio Team Services account resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The response contains all extension resource details for the specified account. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extensionsListByAccountAsync(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName, final ApiCallback<ExtensionResourceListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = extensionsListByAccountValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, accountResourceName, _callback);
        Type localVarReturnType = new TypeToken<ExtensionResourceListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for extensionsUpdate
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param accountResourceName The name of the Visual Studio Team Services account resource. (required)
     * @param extensionResourceName The name of the extension. (required)
     * @param body An object containing additional information related to the extension request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The extension resource was updated for the specified account. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extensionsUpdateCall(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName, String extensionResourceName, ExtensionResourceRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{accountResourceName}/extension/{extensionResourceName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "accountResourceName" + "}", localVarApiClient.escapeString(accountResourceName.toString()))
            .replace("{" + "extensionResourceName" + "}", localVarApiClient.escapeString(extensionResourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extensionsUpdateValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName, String extensionResourceName, ExtensionResourceRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling extensionsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling extensionsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling extensionsUpdate(Async)");
        }

        // verify the required parameter 'accountResourceName' is set
        if (accountResourceName == null) {
            throw new ApiException("Missing the required parameter 'accountResourceName' when calling extensionsUpdate(Async)");
        }

        // verify the required parameter 'extensionResourceName' is set
        if (extensionResourceName == null) {
            throw new ApiException("Missing the required parameter 'extensionResourceName' when calling extensionsUpdate(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling extensionsUpdate(Async)");
        }

        return extensionsUpdateCall(resourceGroupName, subscriptionId, apiVersion, accountResourceName, extensionResourceName, body, _callback);

    }

    /**
     * Extensions_Update
     * Updates an existing extension registration for the Visual Studio Team Services account.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param accountResourceName The name of the Visual Studio Team Services account resource. (required)
     * @param extensionResourceName The name of the extension. (required)
     * @param body An object containing additional information related to the extension request. (required)
     * @return ExtensionResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The extension resource was updated for the specified account. </td><td>  -  </td></tr>
     </table>
     */
    public ExtensionResource extensionsUpdate(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName, String extensionResourceName, ExtensionResourceRequest body) throws ApiException {
        ApiResponse<ExtensionResource> localVarResp = extensionsUpdateWithHttpInfo(resourceGroupName, subscriptionId, apiVersion, accountResourceName, extensionResourceName, body);
        return localVarResp.getData();
    }

    /**
     * Extensions_Update
     * Updates an existing extension registration for the Visual Studio Team Services account.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param accountResourceName The name of the Visual Studio Team Services account resource. (required)
     * @param extensionResourceName The name of the extension. (required)
     * @param body An object containing additional information related to the extension request. (required)
     * @return ApiResponse&lt;ExtensionResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The extension resource was updated for the specified account. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExtensionResource> extensionsUpdateWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName, String extensionResourceName, ExtensionResourceRequest body) throws ApiException {
        okhttp3.Call localVarCall = extensionsUpdateValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, accountResourceName, extensionResourceName, body, null);
        Type localVarReturnType = new TypeToken<ExtensionResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Extensions_Update (asynchronously)
     * Updates an existing extension registration for the Visual Studio Team Services account.
     * @param resourceGroupName Name of the resource group within the Azure subscription. (required)
     * @param subscriptionId The Azure subscription identifier. (required)
     * @param apiVersion API Version (required)
     * @param accountResourceName The name of the Visual Studio Team Services account resource. (required)
     * @param extensionResourceName The name of the extension. (required)
     * @param body An object containing additional information related to the extension request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation succeeded. The extension resource was updated for the specified account. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call extensionsUpdateAsync(String resourceGroupName, String subscriptionId, String apiVersion, String accountResourceName, String extensionResourceName, ExtensionResourceRequest body, final ApiCallback<ExtensionResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = extensionsUpdateValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, accountResourceName, extensionResourceName, body, _callback);
        Type localVarReturnType = new TypeToken<ExtensionResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
