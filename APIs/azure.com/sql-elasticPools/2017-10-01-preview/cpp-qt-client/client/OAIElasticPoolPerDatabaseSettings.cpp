/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElasticPoolPerDatabaseSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElasticPoolPerDatabaseSettings::OAIElasticPoolPerDatabaseSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElasticPoolPerDatabaseSettings::OAIElasticPoolPerDatabaseSettings() {
    this->initializeModel();
}

OAIElasticPoolPerDatabaseSettings::~OAIElasticPoolPerDatabaseSettings() {}

void OAIElasticPoolPerDatabaseSettings::initializeModel() {

    m_max_capacity_isSet = false;
    m_max_capacity_isValid = false;

    m_min_capacity_isSet = false;
    m_min_capacity_isValid = false;
}

void OAIElasticPoolPerDatabaseSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElasticPoolPerDatabaseSettings::fromJsonObject(QJsonObject json) {

    m_max_capacity_isValid = ::OpenAPI::fromJsonValue(m_max_capacity, json[QString("maxCapacity")]);
    m_max_capacity_isSet = !json[QString("maxCapacity")].isNull() && m_max_capacity_isValid;

    m_min_capacity_isValid = ::OpenAPI::fromJsonValue(m_min_capacity, json[QString("minCapacity")]);
    m_min_capacity_isSet = !json[QString("minCapacity")].isNull() && m_min_capacity_isValid;
}

QString OAIElasticPoolPerDatabaseSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElasticPoolPerDatabaseSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_max_capacity_isSet) {
        obj.insert(QString("maxCapacity"), ::OpenAPI::toJsonValue(m_max_capacity));
    }
    if (m_min_capacity_isSet) {
        obj.insert(QString("minCapacity"), ::OpenAPI::toJsonValue(m_min_capacity));
    }
    return obj;
}

double OAIElasticPoolPerDatabaseSettings::getMaxCapacity() const {
    return m_max_capacity;
}
void OAIElasticPoolPerDatabaseSettings::setMaxCapacity(const double &max_capacity) {
    m_max_capacity = max_capacity;
    m_max_capacity_isSet = true;
}

bool OAIElasticPoolPerDatabaseSettings::is_max_capacity_Set() const{
    return m_max_capacity_isSet;
}

bool OAIElasticPoolPerDatabaseSettings::is_max_capacity_Valid() const{
    return m_max_capacity_isValid;
}

double OAIElasticPoolPerDatabaseSettings::getMinCapacity() const {
    return m_min_capacity;
}
void OAIElasticPoolPerDatabaseSettings::setMinCapacity(const double &min_capacity) {
    m_min_capacity = min_capacity;
    m_min_capacity_isSet = true;
}

bool OAIElasticPoolPerDatabaseSettings::is_min_capacity_Set() const{
    return m_min_capacity_isSet;
}

bool OAIElasticPoolPerDatabaseSettings::is_min_capacity_Valid() const{
    return m_min_capacity_isValid;
}

bool OAIElasticPoolPerDatabaseSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElasticPoolPerDatabaseSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
