/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIElasticPoolProperties.h
 *
 * Properties of an elastic pool
 */

#ifndef OAIElasticPoolProperties_H
#define OAIElasticPoolProperties_H

#include <QJsonObject>

#include "OAIElasticPoolPerDatabaseSettings.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIElasticPoolPerDatabaseSettings;

class OAIElasticPoolProperties : public OAIObject {
public:
    OAIElasticPoolProperties();
    OAIElasticPoolProperties(QString json);
    ~OAIElasticPoolProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCreationDate() const;
    void setCreationDate(const QDateTime &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    QString getLicenseType() const;
    void setLicenseType(const QString &license_type);
    bool is_license_type_Set() const;
    bool is_license_type_Valid() const;

    qint64 getMaxSizeBytes() const;
    void setMaxSizeBytes(const qint64 &max_size_bytes);
    bool is_max_size_bytes_Set() const;
    bool is_max_size_bytes_Valid() const;

    OAIElasticPoolPerDatabaseSettings getPerDatabaseSettings() const;
    void setPerDatabaseSettings(const OAIElasticPoolPerDatabaseSettings &per_database_settings);
    bool is_per_database_settings_Set() const;
    bool is_per_database_settings_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    bool isZoneRedundant() const;
    void setZoneRedundant(const bool &zone_redundant);
    bool is_zone_redundant_Set() const;
    bool is_zone_redundant_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    QString m_license_type;
    bool m_license_type_isSet;
    bool m_license_type_isValid;

    qint64 m_max_size_bytes;
    bool m_max_size_bytes_isSet;
    bool m_max_size_bytes_isValid;

    OAIElasticPoolPerDatabaseSettings m_per_database_settings;
    bool m_per_database_settings_isSet;
    bool m_per_database_settings_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    bool m_zone_redundant;
    bool m_zone_redundant_isSet;
    bool m_zone_redundant_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIElasticPoolProperties)

#endif // OAIElasticPoolProperties_H
