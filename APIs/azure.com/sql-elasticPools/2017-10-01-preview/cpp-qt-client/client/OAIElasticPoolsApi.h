/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIElasticPoolsApi_H
#define OAI_OAIElasticPoolsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIElasticPool.h"
#include "OAIElasticPoolListResult.h"
#include "OAIElasticPoolUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIElasticPoolsApi : public QObject {
    Q_OBJECT

public:
    OAIElasticPoolsApi(const int timeOut = 0);
    ~OAIElasticPoolsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  elastic_pool_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIElasticPool [required]
    */
    virtual void elasticPoolsCreateOrUpdate(const QString &resource_group_name, const QString &server_name, const QString &elastic_pool_name, const QString &subscription_id, const QString &api_version, const OAIElasticPool &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  elastic_pool_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void elasticPoolsDelete(const QString &resource_group_name, const QString &server_name, const QString &elastic_pool_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  elastic_pool_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void elasticPoolsGet(const QString &resource_group_name, const QString &server_name, const QString &elastic_pool_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  skip qint32 [optional]
    */
    virtual void elasticPoolsListByServer(const QString &resource_group_name, const QString &server_name, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  elastic_pool_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIElasticPoolUpdate [required]
    */
    virtual void elasticPoolsUpdate(const QString &resource_group_name, const QString &server_name, const QString &elastic_pool_name, const QString &subscription_id, const QString &api_version, const OAIElasticPoolUpdate &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void elasticPoolsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void elasticPoolsDeleteCallback(OAIHttpRequestWorker *worker);
    void elasticPoolsGetCallback(OAIHttpRequestWorker *worker);
    void elasticPoolsListByServerCallback(OAIHttpRequestWorker *worker);
    void elasticPoolsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void elasticPoolsCreateOrUpdateSignal(OAIElasticPool summary);
    void elasticPoolsDeleteSignal();
    void elasticPoolsGetSignal(OAIElasticPool summary);
    void elasticPoolsListByServerSignal(OAIElasticPoolListResult summary);
    void elasticPoolsUpdateSignal(OAIElasticPool summary);


    void elasticPoolsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIElasticPool summary);
    void elasticPoolsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void elasticPoolsGetSignalFull(OAIHttpRequestWorker *worker, OAIElasticPool summary);
    void elasticPoolsListByServerSignalFull(OAIHttpRequestWorker *worker, OAIElasticPoolListResult summary);
    void elasticPoolsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIElasticPool summary);

    Q_DECL_DEPRECATED_X("Use elasticPoolsCreateOrUpdateSignalError() instead")
    void elasticPoolsCreateOrUpdateSignalE(OAIElasticPool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elasticPoolsCreateOrUpdateSignalError(OAIElasticPool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elasticPoolsDeleteSignalError() instead")
    void elasticPoolsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void elasticPoolsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elasticPoolsGetSignalError() instead")
    void elasticPoolsGetSignalE(OAIElasticPool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elasticPoolsGetSignalError(OAIElasticPool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elasticPoolsListByServerSignalError() instead")
    void elasticPoolsListByServerSignalE(OAIElasticPoolListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elasticPoolsListByServerSignalError(OAIElasticPoolListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elasticPoolsUpdateSignalError() instead")
    void elasticPoolsUpdateSignalE(OAIElasticPool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elasticPoolsUpdateSignalError(OAIElasticPool summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use elasticPoolsCreateOrUpdateSignalErrorFull() instead")
    void elasticPoolsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elasticPoolsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elasticPoolsDeleteSignalErrorFull() instead")
    void elasticPoolsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elasticPoolsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elasticPoolsGetSignalErrorFull() instead")
    void elasticPoolsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elasticPoolsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elasticPoolsListByServerSignalErrorFull() instead")
    void elasticPoolsListByServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elasticPoolsListByServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use elasticPoolsUpdateSignalErrorFull() instead")
    void elasticPoolsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elasticPoolsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
