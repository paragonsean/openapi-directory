# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ElasticPoolUpdateSku(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capacity: int=None, family: str=None, name: str=None, size: str=None, tier: str=None):
        """ElasticPoolUpdateSku - a model defined in OpenAPI

        :param capacity: The capacity of this ElasticPoolUpdateSku.
        :param family: The family of this ElasticPoolUpdateSku.
        :param name: The name of this ElasticPoolUpdateSku.
        :param size: The size of this ElasticPoolUpdateSku.
        :param tier: The tier of this ElasticPoolUpdateSku.
        """
        self.openapi_types = {
            'capacity': int,
            'family': str,
            'name': str,
            'size': str,
            'tier': str
        }

        self.attribute_map = {
            'capacity': 'capacity',
            'family': 'family',
            'name': 'name',
            'size': 'size',
            'tier': 'tier'
        }

        self._capacity = capacity
        self._family = family
        self._name = name
        self._size = size
        self._tier = tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElasticPoolUpdateSku':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElasticPoolUpdate_sku of this ElasticPoolUpdateSku.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capacity(self):
        """Gets the capacity of this ElasticPoolUpdateSku.

        Capacity of the particular SKU.

        :return: The capacity of this ElasticPoolUpdateSku.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this ElasticPoolUpdateSku.

        Capacity of the particular SKU.

        :param capacity: The capacity of this ElasticPoolUpdateSku.
        :type capacity: int
        """

        self._capacity = capacity

    @property
    def family(self):
        """Gets the family of this ElasticPoolUpdateSku.

        If the service has different generations of hardware, for the same SKU, then that can be captured here.

        :return: The family of this ElasticPoolUpdateSku.
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this ElasticPoolUpdateSku.

        If the service has different generations of hardware, for the same SKU, then that can be captured here.

        :param family: The family of this ElasticPoolUpdateSku.
        :type family: str
        """

        self._family = family

    @property
    def name(self):
        """Gets the name of this ElasticPoolUpdateSku.

        The name of the SKU, typically, a letter + Number code, e.g. P3.

        :return: The name of this ElasticPoolUpdateSku.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ElasticPoolUpdateSku.

        The name of the SKU, typically, a letter + Number code, e.g. P3.

        :param name: The name of this ElasticPoolUpdateSku.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def size(self):
        """Gets the size of this ElasticPoolUpdateSku.

        Size of the particular SKU

        :return: The size of this ElasticPoolUpdateSku.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ElasticPoolUpdateSku.

        Size of the particular SKU

        :param size: The size of this ElasticPoolUpdateSku.
        :type size: str
        """

        self._size = size

    @property
    def tier(self):
        """Gets the tier of this ElasticPoolUpdateSku.

        The tier or edition of the particular SKU, e.g. Basic, Premium.

        :return: The tier of this ElasticPoolUpdateSku.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this ElasticPoolUpdateSku.

        The tier or edition of the particular SKU, e.g. Basic, Premium.

        :param tier: The tier of this ElasticPoolUpdateSku.
        :type tier: str
        """

        self._tier = tier
