# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ElasticPoolPerDatabaseSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_capacity: float=None, min_capacity: float=None):
        """ElasticPoolPerDatabaseSettings - a model defined in OpenAPI

        :param max_capacity: The max_capacity of this ElasticPoolPerDatabaseSettings.
        :param min_capacity: The min_capacity of this ElasticPoolPerDatabaseSettings.
        """
        self.openapi_types = {
            'max_capacity': float,
            'min_capacity': float
        }

        self.attribute_map = {
            'max_capacity': 'maxCapacity',
            'min_capacity': 'minCapacity'
        }

        self._max_capacity = max_capacity
        self._min_capacity = min_capacity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElasticPoolPerDatabaseSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElasticPoolPerDatabaseSettings of this ElasticPoolPerDatabaseSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_capacity(self):
        """Gets the max_capacity of this ElasticPoolPerDatabaseSettings.

        The maximum capacity any one database can consume.

        :return: The max_capacity of this ElasticPoolPerDatabaseSettings.
        :rtype: float
        """
        return self._max_capacity

    @max_capacity.setter
    def max_capacity(self, max_capacity):
        """Sets the max_capacity of this ElasticPoolPerDatabaseSettings.

        The maximum capacity any one database can consume.

        :param max_capacity: The max_capacity of this ElasticPoolPerDatabaseSettings.
        :type max_capacity: float
        """

        self._max_capacity = max_capacity

    @property
    def min_capacity(self):
        """Gets the min_capacity of this ElasticPoolPerDatabaseSettings.

        The minimum capacity all databases are guaranteed.

        :return: The min_capacity of this ElasticPoolPerDatabaseSettings.
        :rtype: float
        """
        return self._min_capacity

    @min_capacity.setter
    def min_capacity(self, min_capacity):
        """Sets the min_capacity of this ElasticPoolPerDatabaseSettings.

        The minimum capacity all databases are guaranteed.

        :param min_capacity: The min_capacity of this ElasticPoolPerDatabaseSettings.
        :type min_capacity: float
        """

        self._min_capacity = min_capacity
