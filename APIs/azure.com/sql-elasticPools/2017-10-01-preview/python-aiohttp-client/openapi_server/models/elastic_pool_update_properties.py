# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.elastic_pool_per_database_settings import ElasticPoolPerDatabaseSettings
from openapi_server import util


class ElasticPoolUpdateProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, license_type: str=None, max_size_bytes: int=None, per_database_settings: ElasticPoolPerDatabaseSettings=None, zone_redundant: bool=None):
        """ElasticPoolUpdateProperties - a model defined in OpenAPI

        :param license_type: The license_type of this ElasticPoolUpdateProperties.
        :param max_size_bytes: The max_size_bytes of this ElasticPoolUpdateProperties.
        :param per_database_settings: The per_database_settings of this ElasticPoolUpdateProperties.
        :param zone_redundant: The zone_redundant of this ElasticPoolUpdateProperties.
        """
        self.openapi_types = {
            'license_type': str,
            'max_size_bytes': int,
            'per_database_settings': ElasticPoolPerDatabaseSettings,
            'zone_redundant': bool
        }

        self.attribute_map = {
            'license_type': 'licenseType',
            'max_size_bytes': 'maxSizeBytes',
            'per_database_settings': 'perDatabaseSettings',
            'zone_redundant': 'zoneRedundant'
        }

        self._license_type = license_type
        self._max_size_bytes = max_size_bytes
        self._per_database_settings = per_database_settings
        self._zone_redundant = zone_redundant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElasticPoolUpdateProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElasticPoolUpdateProperties of this ElasticPoolUpdateProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def license_type(self):
        """Gets the license_type of this ElasticPoolUpdateProperties.

        The license type to apply for this elastic pool.

        :return: The license_type of this ElasticPoolUpdateProperties.
        :rtype: str
        """
        return self._license_type

    @license_type.setter
    def license_type(self, license_type):
        """Sets the license_type of this ElasticPoolUpdateProperties.

        The license type to apply for this elastic pool.

        :param license_type: The license_type of this ElasticPoolUpdateProperties.
        :type license_type: str
        """
        allowed_values = ["LicenseIncluded", "BasePrice"]  # noqa: E501
        if license_type not in allowed_values:
            raise ValueError(
                "Invalid value for `license_type` ({0}), must be one of {1}"
                .format(license_type, allowed_values)
            )

        self._license_type = license_type

    @property
    def max_size_bytes(self):
        """Gets the max_size_bytes of this ElasticPoolUpdateProperties.

        The storage limit for the database elastic pool in bytes.

        :return: The max_size_bytes of this ElasticPoolUpdateProperties.
        :rtype: int
        """
        return self._max_size_bytes

    @max_size_bytes.setter
    def max_size_bytes(self, max_size_bytes):
        """Sets the max_size_bytes of this ElasticPoolUpdateProperties.

        The storage limit for the database elastic pool in bytes.

        :param max_size_bytes: The max_size_bytes of this ElasticPoolUpdateProperties.
        :type max_size_bytes: int
        """

        self._max_size_bytes = max_size_bytes

    @property
    def per_database_settings(self):
        """Gets the per_database_settings of this ElasticPoolUpdateProperties.


        :return: The per_database_settings of this ElasticPoolUpdateProperties.
        :rtype: ElasticPoolPerDatabaseSettings
        """
        return self._per_database_settings

    @per_database_settings.setter
    def per_database_settings(self, per_database_settings):
        """Sets the per_database_settings of this ElasticPoolUpdateProperties.


        :param per_database_settings: The per_database_settings of this ElasticPoolUpdateProperties.
        :type per_database_settings: ElasticPoolPerDatabaseSettings
        """

        self._per_database_settings = per_database_settings

    @property
    def zone_redundant(self):
        """Gets the zone_redundant of this ElasticPoolUpdateProperties.

        Whether or not this elastic pool is zone redundant, which means the replicas of this elastic pool will be spread across multiple availability zones.

        :return: The zone_redundant of this ElasticPoolUpdateProperties.
        :rtype: bool
        """
        return self._zone_redundant

    @zone_redundant.setter
    def zone_redundant(self, zone_redundant):
        """Sets the zone_redundant of this ElasticPoolUpdateProperties.

        Whether or not this elastic pool is zone redundant, which means the replicas of this elastic pool will be spread across multiple availability zones.

        :param zone_redundant: The zone_redundant of this ElasticPoolUpdateProperties.
        :type zone_redundant: bool
        """

        self._zone_redundant = zone_redundant
