/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2017-10-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ElasticPool;
import org.openapitools.client.model.ElasticPoolListResult;
import org.openapitools.client.model.ElasticPoolUpdate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ElasticPoolsApi
 */
@Disabled
public class ElasticPoolsApiTest {

    private final ElasticPoolsApi api = new ElasticPoolsApi();

    /**
     * Creates or updates an elastic pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elasticPoolsCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String elasticPoolName = null;
        String subscriptionId = null;
        String apiVersion = null;
        ElasticPool parameters = null;
        ElasticPool response = api.elasticPoolsCreateOrUpdate(resourceGroupName, serverName, elasticPoolName, subscriptionId, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Deletes an elastic pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elasticPoolsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String elasticPoolName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.elasticPoolsDelete(resourceGroupName, serverName, elasticPoolName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets an elastic pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elasticPoolsGetTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String elasticPoolName = null;
        String subscriptionId = null;
        String apiVersion = null;
        ElasticPool response = api.elasticPoolsGet(resourceGroupName, serverName, elasticPoolName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all elastic pools in a server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elasticPoolsListByServerTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Integer $skip = null;
        ElasticPoolListResult response = api.elasticPoolsListByServer(resourceGroupName, serverName, subscriptionId, apiVersion, $skip);
        // TODO: test validations
    }

    /**
     * Updates an elastic pool.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void elasticPoolsUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String elasticPoolName = null;
        String subscriptionId = null;
        String apiVersion = null;
        ElasticPoolUpdate parameters = null;
        ElasticPool response = api.elasticPoolsUpdate(resourceGroupName, serverName, elasticPoolName, subscriptionId, apiVersion, parameters);
        // TODO: test validations
    }

}
