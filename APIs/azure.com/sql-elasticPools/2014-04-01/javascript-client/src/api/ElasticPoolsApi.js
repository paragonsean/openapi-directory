/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database elastic pools.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ElasticPool from '../model/ElasticPool';
import ElasticPoolListResult from '../model/ElasticPoolListResult';
import ElasticPoolUpdate from '../model/ElasticPoolUpdate';

/**
* ElasticPools service.
* @module api/ElasticPoolsApi
* @version 2014-04-01
*/
export default class ElasticPoolsApi {

    /**
    * Constructs a new ElasticPoolsApi. 
    * @alias module:api/ElasticPoolsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the elasticPoolsCreateOrUpdate operation.
     * @callback module:api/ElasticPoolsApi~elasticPoolsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ElasticPool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new elastic pool or updates an existing elastic pool.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} elasticPoolName The name of the elastic pool to be operated on (updated or created).
     * @param {module:model/ElasticPool} parameters The required parameters for creating or updating an elastic pool.
     * @param {module:api/ElasticPoolsApi~elasticPoolsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ElasticPool}
     */
    elasticPoolsCreateOrUpdate(apiVersion, subscriptionId, resourceGroupName, serverName, elasticPoolName, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling elasticPoolsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling elasticPoolsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling elasticPoolsCreateOrUpdate");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling elasticPoolsCreateOrUpdate");
      }
      // verify the required parameter 'elasticPoolName' is set
      if (elasticPoolName === undefined || elasticPoolName === null) {
        throw new Error("Missing the required parameter 'elasticPoolName' when calling elasticPoolsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling elasticPoolsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'elasticPoolName': elasticPoolName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ElasticPool;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elasticPoolsDelete operation.
     * @callback module:api/ElasticPoolsApi~elasticPoolsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the elastic pool.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} elasticPoolName The name of the elastic pool to be deleted.
     * @param {module:api/ElasticPoolsApi~elasticPoolsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    elasticPoolsDelete(apiVersion, subscriptionId, resourceGroupName, serverName, elasticPoolName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling elasticPoolsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling elasticPoolsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling elasticPoolsDelete");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling elasticPoolsDelete");
      }
      // verify the required parameter 'elasticPoolName' is set
      if (elasticPoolName === undefined || elasticPoolName === null) {
        throw new Error("Missing the required parameter 'elasticPoolName' when calling elasticPoolsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'elasticPoolName': elasticPoolName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elasticPoolsGet operation.
     * @callback module:api/ElasticPoolsApi~elasticPoolsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ElasticPool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an elastic pool.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} elasticPoolName The name of the elastic pool to be retrieved.
     * @param {module:api/ElasticPoolsApi~elasticPoolsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ElasticPool}
     */
    elasticPoolsGet(apiVersion, subscriptionId, resourceGroupName, serverName, elasticPoolName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling elasticPoolsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling elasticPoolsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling elasticPoolsGet");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling elasticPoolsGet");
      }
      // verify the required parameter 'elasticPoolName' is set
      if (elasticPoolName === undefined || elasticPoolName === null) {
        throw new Error("Missing the required parameter 'elasticPoolName' when calling elasticPoolsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'elasticPoolName': elasticPoolName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ElasticPool;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elasticPoolsListByServer operation.
     * @callback module:api/ElasticPoolsApi~elasticPoolsListByServerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ElasticPoolListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of elastic pools in a server.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {module:api/ElasticPoolsApi~elasticPoolsListByServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ElasticPoolListResult}
     */
    elasticPoolsListByServer(apiVersion, subscriptionId, resourceGroupName, serverName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling elasticPoolsListByServer");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling elasticPoolsListByServer");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling elasticPoolsListByServer");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling elasticPoolsListByServer");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ElasticPoolListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the elasticPoolsUpdate operation.
     * @callback module:api/ElasticPoolsApi~elasticPoolsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ElasticPool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing elastic pool.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} elasticPoolName The name of the elastic pool to be updated.
     * @param {module:model/ElasticPoolUpdate} parameters The required parameters for updating an elastic pool.
     * @param {module:api/ElasticPoolsApi~elasticPoolsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ElasticPool}
     */
    elasticPoolsUpdate(apiVersion, subscriptionId, resourceGroupName, serverName, elasticPoolName, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling elasticPoolsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling elasticPoolsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling elasticPoolsUpdate");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling elasticPoolsUpdate");
      }
      // verify the required parameter 'elasticPoolName' is set
      if (elasticPoolName === undefined || elasticPoolName === null) {
        throw new Error("Missing the required parameter 'elasticPoolName' when calling elasticPoolsUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling elasticPoolsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'elasticPoolName': elasticPoolName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ElasticPool;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/elasticPools/{elasticPoolName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
