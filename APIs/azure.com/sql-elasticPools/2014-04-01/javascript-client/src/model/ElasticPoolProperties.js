/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database elastic pools.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ElasticPoolProperties model module.
 * @module model/ElasticPoolProperties
 * @version 2014-04-01
 */
class ElasticPoolProperties {
    /**
     * Constructs a new <code>ElasticPoolProperties</code>.
     * Represents the properties of an elastic pool.
     * @alias module:model/ElasticPoolProperties
     */
    constructor() { 
        
        ElasticPoolProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ElasticPoolProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ElasticPoolProperties} obj Optional instance to populate.
     * @return {module:model/ElasticPoolProperties} The populated <code>ElasticPoolProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ElasticPoolProperties();

            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('databaseDtuMax')) {
                obj['databaseDtuMax'] = ApiClient.convertToType(data['databaseDtuMax'], 'Number');
            }
            if (data.hasOwnProperty('databaseDtuMin')) {
                obj['databaseDtuMin'] = ApiClient.convertToType(data['databaseDtuMin'], 'Number');
            }
            if (data.hasOwnProperty('dtu')) {
                obj['dtu'] = ApiClient.convertToType(data['dtu'], 'Number');
            }
            if (data.hasOwnProperty('edition')) {
                obj['edition'] = ApiClient.convertToType(data['edition'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('storageMB')) {
                obj['storageMB'] = ApiClient.convertToType(data['storageMB'], 'Number');
            }
            if (data.hasOwnProperty('zoneRedundant')) {
                obj['zoneRedundant'] = ApiClient.convertToType(data['zoneRedundant'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ElasticPoolProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ElasticPoolProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['edition'] && !(typeof data['edition'] === 'string' || data['edition'] instanceof String)) {
            throw new Error("Expected the field `edition` to be a primitive type in the JSON string but got " + data['edition']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * The creation date of the elastic pool (ISO8601 format).
 * @member {Date} creationDate
 */
ElasticPoolProperties.prototype['creationDate'] = undefined;

/**
 * The maximum DTU any one database can consume.
 * @member {Number} databaseDtuMax
 */
ElasticPoolProperties.prototype['databaseDtuMax'] = undefined;

/**
 * The minimum DTU all databases are guaranteed.
 * @member {Number} databaseDtuMin
 */
ElasticPoolProperties.prototype['databaseDtuMin'] = undefined;

/**
 * The total shared DTU for the database elastic pool.
 * @member {Number} dtu
 */
ElasticPoolProperties.prototype['dtu'] = undefined;

/**
 * The edition of the elastic pool.
 * @member {module:model/ElasticPoolProperties.EditionEnum} edition
 */
ElasticPoolProperties.prototype['edition'] = undefined;

/**
 * The state of the elastic pool.
 * @member {module:model/ElasticPoolProperties.StateEnum} state
 */
ElasticPoolProperties.prototype['state'] = undefined;

/**
 * Gets storage limit for the database elastic pool in MB.
 * @member {Number} storageMB
 */
ElasticPoolProperties.prototype['storageMB'] = undefined;

/**
 * Whether or not this database elastic pool is zone redundant, which means the replicas of this database will be spread across multiple availability zones.
 * @member {Boolean} zoneRedundant
 */
ElasticPoolProperties.prototype['zoneRedundant'] = undefined;





/**
 * Allowed values for the <code>edition</code> property.
 * @enum {String}
 * @readonly
 */
ElasticPoolProperties['EditionEnum'] = {

    /**
     * value: "Basic"
     * @const
     */
    "Basic": "Basic",

    /**
     * value: "Standard"
     * @const
     */
    "Standard": "Standard",

    /**
     * value: "Premium"
     * @const
     */
    "Premium": "Premium",

    /**
     * value: "GeneralPurpose"
     * @const
     */
    "GeneralPurpose": "GeneralPurpose",

    /**
     * value: "BusinessCritical"
     * @const
     */
    "BusinessCritical": "BusinessCritical"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ElasticPoolProperties['StateEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Ready"
     * @const
     */
    "Ready": "Ready",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};



export default ElasticPoolProperties;

