# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ElasticPoolProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_date: datetime=None, database_dtu_max: int=None, database_dtu_min: int=None, dtu: int=None, edition: str=None, state: str=None, storage_mb: int=None, zone_redundant: bool=None):
        """ElasticPoolProperties - a model defined in OpenAPI

        :param creation_date: The creation_date of this ElasticPoolProperties.
        :param database_dtu_max: The database_dtu_max of this ElasticPoolProperties.
        :param database_dtu_min: The database_dtu_min of this ElasticPoolProperties.
        :param dtu: The dtu of this ElasticPoolProperties.
        :param edition: The edition of this ElasticPoolProperties.
        :param state: The state of this ElasticPoolProperties.
        :param storage_mb: The storage_mb of this ElasticPoolProperties.
        :param zone_redundant: The zone_redundant of this ElasticPoolProperties.
        """
        self.openapi_types = {
            'creation_date': datetime,
            'database_dtu_max': int,
            'database_dtu_min': int,
            'dtu': int,
            'edition': str,
            'state': str,
            'storage_mb': int,
            'zone_redundant': bool
        }

        self.attribute_map = {
            'creation_date': 'creationDate',
            'database_dtu_max': 'databaseDtuMax',
            'database_dtu_min': 'databaseDtuMin',
            'dtu': 'dtu',
            'edition': 'edition',
            'state': 'state',
            'storage_mb': 'storageMB',
            'zone_redundant': 'zoneRedundant'
        }

        self._creation_date = creation_date
        self._database_dtu_max = database_dtu_max
        self._database_dtu_min = database_dtu_min
        self._dtu = dtu
        self._edition = edition
        self._state = state
        self._storage_mb = storage_mb
        self._zone_redundant = zone_redundant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElasticPoolProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElasticPoolProperties of this ElasticPoolProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_date(self):
        """Gets the creation_date of this ElasticPoolProperties.

        The creation date of the elastic pool (ISO8601 format).

        :return: The creation_date of this ElasticPoolProperties.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ElasticPoolProperties.

        The creation date of the elastic pool (ISO8601 format).

        :param creation_date: The creation_date of this ElasticPoolProperties.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def database_dtu_max(self):
        """Gets the database_dtu_max of this ElasticPoolProperties.

        The maximum DTU any one database can consume.

        :return: The database_dtu_max of this ElasticPoolProperties.
        :rtype: int
        """
        return self._database_dtu_max

    @database_dtu_max.setter
    def database_dtu_max(self, database_dtu_max):
        """Sets the database_dtu_max of this ElasticPoolProperties.

        The maximum DTU any one database can consume.

        :param database_dtu_max: The database_dtu_max of this ElasticPoolProperties.
        :type database_dtu_max: int
        """

        self._database_dtu_max = database_dtu_max

    @property
    def database_dtu_min(self):
        """Gets the database_dtu_min of this ElasticPoolProperties.

        The minimum DTU all databases are guaranteed.

        :return: The database_dtu_min of this ElasticPoolProperties.
        :rtype: int
        """
        return self._database_dtu_min

    @database_dtu_min.setter
    def database_dtu_min(self, database_dtu_min):
        """Sets the database_dtu_min of this ElasticPoolProperties.

        The minimum DTU all databases are guaranteed.

        :param database_dtu_min: The database_dtu_min of this ElasticPoolProperties.
        :type database_dtu_min: int
        """

        self._database_dtu_min = database_dtu_min

    @property
    def dtu(self):
        """Gets the dtu of this ElasticPoolProperties.

        The total shared DTU for the database elastic pool.

        :return: The dtu of this ElasticPoolProperties.
        :rtype: int
        """
        return self._dtu

    @dtu.setter
    def dtu(self, dtu):
        """Sets the dtu of this ElasticPoolProperties.

        The total shared DTU for the database elastic pool.

        :param dtu: The dtu of this ElasticPoolProperties.
        :type dtu: int
        """

        self._dtu = dtu

    @property
    def edition(self):
        """Gets the edition of this ElasticPoolProperties.

        The edition of the elastic pool.

        :return: The edition of this ElasticPoolProperties.
        :rtype: str
        """
        return self._edition

    @edition.setter
    def edition(self, edition):
        """Sets the edition of this ElasticPoolProperties.

        The edition of the elastic pool.

        :param edition: The edition of this ElasticPoolProperties.
        :type edition: str
        """
        allowed_values = ["Basic", "Standard", "Premium", "GeneralPurpose", "BusinessCritical"]  # noqa: E501
        if edition not in allowed_values:
            raise ValueError(
                "Invalid value for `edition` ({0}), must be one of {1}"
                .format(edition, allowed_values)
            )

        self._edition = edition

    @property
    def state(self):
        """Gets the state of this ElasticPoolProperties.

        The state of the elastic pool.

        :return: The state of this ElasticPoolProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ElasticPoolProperties.

        The state of the elastic pool.

        :param state: The state of this ElasticPoolProperties.
        :type state: str
        """
        allowed_values = ["Creating", "Ready", "Disabled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def storage_mb(self):
        """Gets the storage_mb of this ElasticPoolProperties.

        Gets storage limit for the database elastic pool in MB.

        :return: The storage_mb of this ElasticPoolProperties.
        :rtype: int
        """
        return self._storage_mb

    @storage_mb.setter
    def storage_mb(self, storage_mb):
        """Sets the storage_mb of this ElasticPoolProperties.

        Gets storage limit for the database elastic pool in MB.

        :param storage_mb: The storage_mb of this ElasticPoolProperties.
        :type storage_mb: int
        """

        self._storage_mb = storage_mb

    @property
    def zone_redundant(self):
        """Gets the zone_redundant of this ElasticPoolProperties.

        Whether or not this database elastic pool is zone redundant, which means the replicas of this database will be spread across multiple availability zones.

        :return: The zone_redundant of this ElasticPoolProperties.
        :rtype: bool
        """
        return self._zone_redundant

    @zone_redundant.setter
    def zone_redundant(self, zone_redundant):
        """Sets the zone_redundant of this ElasticPoolProperties.

        Whether or not this database elastic pool is zone redundant, which means the replicas of this database will be spread across multiple availability zones.

        :param zone_redundant: The zone_redundant of this ElasticPoolProperties.
        :type zone_redundant: bool
        """

        self._zone_redundant = zone_redundant
