/*
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database elastic pools.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the properties of an elastic pool.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:16.006919-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ElasticPoolProperties {
  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_DATABASE_DTU_MAX = "databaseDtuMax";
  @SerializedName(SERIALIZED_NAME_DATABASE_DTU_MAX)
  private Integer databaseDtuMax;

  public static final String SERIALIZED_NAME_DATABASE_DTU_MIN = "databaseDtuMin";
  @SerializedName(SERIALIZED_NAME_DATABASE_DTU_MIN)
  private Integer databaseDtuMin;

  public static final String SERIALIZED_NAME_DTU = "dtu";
  @SerializedName(SERIALIZED_NAME_DTU)
  private Integer dtu;

  /**
   * The edition of the elastic pool.
   */
  @JsonAdapter(EditionEnum.Adapter.class)
  public enum EditionEnum {
    BASIC("Basic"),
    
    STANDARD("Standard"),
    
    PREMIUM("Premium"),
    
    GENERAL_PURPOSE("GeneralPurpose"),
    
    BUSINESS_CRITICAL("BusinessCritical");

    private String value;

    EditionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EditionEnum fromValue(String value) {
      for (EditionEnum b : EditionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EditionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EditionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EditionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EditionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EditionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EDITION = "edition";
  @SerializedName(SERIALIZED_NAME_EDITION)
  private EditionEnum edition;

  /**
   * The state of the elastic pool.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    CREATING("Creating"),
    
    READY("Ready"),
    
    DISABLED("Disabled");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STORAGE_M_B = "storageMB";
  @SerializedName(SERIALIZED_NAME_STORAGE_M_B)
  private Integer storageMB;

  public static final String SERIALIZED_NAME_ZONE_REDUNDANT = "zoneRedundant";
  @SerializedName(SERIALIZED_NAME_ZONE_REDUNDANT)
  private Boolean zoneRedundant;

  public ElasticPoolProperties() {
  }

  public ElasticPoolProperties(
     OffsetDateTime creationDate, 
     StateEnum state
  ) {
    this();
    this.creationDate = creationDate;
    this.state = state;
  }

  /**
   * The creation date of the elastic pool (ISO8601 format).
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }



  public ElasticPoolProperties databaseDtuMax(Integer databaseDtuMax) {
    this.databaseDtuMax = databaseDtuMax;
    return this;
  }

  /**
   * The maximum DTU any one database can consume.
   * @return databaseDtuMax
   */
  @javax.annotation.Nullable
  public Integer getDatabaseDtuMax() {
    return databaseDtuMax;
  }

  public void setDatabaseDtuMax(Integer databaseDtuMax) {
    this.databaseDtuMax = databaseDtuMax;
  }


  public ElasticPoolProperties databaseDtuMin(Integer databaseDtuMin) {
    this.databaseDtuMin = databaseDtuMin;
    return this;
  }

  /**
   * The minimum DTU all databases are guaranteed.
   * @return databaseDtuMin
   */
  @javax.annotation.Nullable
  public Integer getDatabaseDtuMin() {
    return databaseDtuMin;
  }

  public void setDatabaseDtuMin(Integer databaseDtuMin) {
    this.databaseDtuMin = databaseDtuMin;
  }


  public ElasticPoolProperties dtu(Integer dtu) {
    this.dtu = dtu;
    return this;
  }

  /**
   * The total shared DTU for the database elastic pool.
   * @return dtu
   */
  @javax.annotation.Nullable
  public Integer getDtu() {
    return dtu;
  }

  public void setDtu(Integer dtu) {
    this.dtu = dtu;
  }


  public ElasticPoolProperties edition(EditionEnum edition) {
    this.edition = edition;
    return this;
  }

  /**
   * The edition of the elastic pool.
   * @return edition
   */
  @javax.annotation.Nullable
  public EditionEnum getEdition() {
    return edition;
  }

  public void setEdition(EditionEnum edition) {
    this.edition = edition;
  }


  /**
   * The state of the elastic pool.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public ElasticPoolProperties storageMB(Integer storageMB) {
    this.storageMB = storageMB;
    return this;
  }

  /**
   * Gets storage limit for the database elastic pool in MB.
   * @return storageMB
   */
  @javax.annotation.Nullable
  public Integer getStorageMB() {
    return storageMB;
  }

  public void setStorageMB(Integer storageMB) {
    this.storageMB = storageMB;
  }


  public ElasticPoolProperties zoneRedundant(Boolean zoneRedundant) {
    this.zoneRedundant = zoneRedundant;
    return this;
  }

  /**
   * Whether or not this database elastic pool is zone redundant, which means the replicas of this database will be spread across multiple availability zones.
   * @return zoneRedundant
   */
  @javax.annotation.Nullable
  public Boolean getZoneRedundant() {
    return zoneRedundant;
  }

  public void setZoneRedundant(Boolean zoneRedundant) {
    this.zoneRedundant = zoneRedundant;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElasticPoolProperties elasticPoolProperties = (ElasticPoolProperties) o;
    return Objects.equals(this.creationDate, elasticPoolProperties.creationDate) &&
        Objects.equals(this.databaseDtuMax, elasticPoolProperties.databaseDtuMax) &&
        Objects.equals(this.databaseDtuMin, elasticPoolProperties.databaseDtuMin) &&
        Objects.equals(this.dtu, elasticPoolProperties.dtu) &&
        Objects.equals(this.edition, elasticPoolProperties.edition) &&
        Objects.equals(this.state, elasticPoolProperties.state) &&
        Objects.equals(this.storageMB, elasticPoolProperties.storageMB) &&
        Objects.equals(this.zoneRedundant, elasticPoolProperties.zoneRedundant);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationDate, databaseDtuMax, databaseDtuMin, dtu, edition, state, storageMB, zoneRedundant);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElasticPoolProperties {\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    databaseDtuMax: ").append(toIndentedString(databaseDtuMax)).append("\n");
    sb.append("    databaseDtuMin: ").append(toIndentedString(databaseDtuMin)).append("\n");
    sb.append("    dtu: ").append(toIndentedString(dtu)).append("\n");
    sb.append("    edition: ").append(toIndentedString(edition)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    storageMB: ").append(toIndentedString(storageMB)).append("\n");
    sb.append("    zoneRedundant: ").append(toIndentedString(zoneRedundant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationDate");
    openapiFields.add("databaseDtuMax");
    openapiFields.add("databaseDtuMin");
    openapiFields.add("dtu");
    openapiFields.add("edition");
    openapiFields.add("state");
    openapiFields.add("storageMB");
    openapiFields.add("zoneRedundant");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ElasticPoolProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ElasticPoolProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ElasticPoolProperties is not found in the empty JSON string", ElasticPoolProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ElasticPoolProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ElasticPoolProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("edition") != null && !jsonObj.get("edition").isJsonNull()) && !jsonObj.get("edition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `edition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("edition").toString()));
      }
      // validate the optional field `edition`
      if (jsonObj.get("edition") != null && !jsonObj.get("edition").isJsonNull()) {
        EditionEnum.validateJsonElement(jsonObj.get("edition"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ElasticPoolProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ElasticPoolProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ElasticPoolProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ElasticPoolProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ElasticPoolProperties>() {
           @Override
           public void write(JsonWriter out, ElasticPoolProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ElasticPoolProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ElasticPoolProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ElasticPoolProperties
   * @throws IOException if the JSON string is invalid with respect to ElasticPoolProperties
   */
  public static ElasticPoolProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ElasticPoolProperties.class);
  }

  /**
   * Convert an instance of ElasticPoolProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

