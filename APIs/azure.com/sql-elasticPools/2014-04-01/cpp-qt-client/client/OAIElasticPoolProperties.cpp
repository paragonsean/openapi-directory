/**
 * Azure SQL Database
 * Provides create, read, update and delete functionality for Azure SQL Database elastic pools.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElasticPoolProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElasticPoolProperties::OAIElasticPoolProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElasticPoolProperties::OAIElasticPoolProperties() {
    this->initializeModel();
}

OAIElasticPoolProperties::~OAIElasticPoolProperties() {}

void OAIElasticPoolProperties::initializeModel() {

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_database_dtu_max_isSet = false;
    m_database_dtu_max_isValid = false;

    m_database_dtu_min_isSet = false;
    m_database_dtu_min_isValid = false;

    m_dtu_isSet = false;
    m_dtu_isValid = false;

    m_edition_isSet = false;
    m_edition_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_storage_mb_isSet = false;
    m_storage_mb_isValid = false;

    m_zone_redundant_isSet = false;
    m_zone_redundant_isValid = false;
}

void OAIElasticPoolProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElasticPoolProperties::fromJsonObject(QJsonObject json) {

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_database_dtu_max_isValid = ::OpenAPI::fromJsonValue(m_database_dtu_max, json[QString("databaseDtuMax")]);
    m_database_dtu_max_isSet = !json[QString("databaseDtuMax")].isNull() && m_database_dtu_max_isValid;

    m_database_dtu_min_isValid = ::OpenAPI::fromJsonValue(m_database_dtu_min, json[QString("databaseDtuMin")]);
    m_database_dtu_min_isSet = !json[QString("databaseDtuMin")].isNull() && m_database_dtu_min_isValid;

    m_dtu_isValid = ::OpenAPI::fromJsonValue(m_dtu, json[QString("dtu")]);
    m_dtu_isSet = !json[QString("dtu")].isNull() && m_dtu_isValid;

    m_edition_isValid = ::OpenAPI::fromJsonValue(m_edition, json[QString("edition")]);
    m_edition_isSet = !json[QString("edition")].isNull() && m_edition_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_storage_mb_isValid = ::OpenAPI::fromJsonValue(m_storage_mb, json[QString("storageMB")]);
    m_storage_mb_isSet = !json[QString("storageMB")].isNull() && m_storage_mb_isValid;

    m_zone_redundant_isValid = ::OpenAPI::fromJsonValue(m_zone_redundant, json[QString("zoneRedundant")]);
    m_zone_redundant_isSet = !json[QString("zoneRedundant")].isNull() && m_zone_redundant_isValid;
}

QString OAIElasticPoolProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElasticPoolProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_database_dtu_max_isSet) {
        obj.insert(QString("databaseDtuMax"), ::OpenAPI::toJsonValue(m_database_dtu_max));
    }
    if (m_database_dtu_min_isSet) {
        obj.insert(QString("databaseDtuMin"), ::OpenAPI::toJsonValue(m_database_dtu_min));
    }
    if (m_dtu_isSet) {
        obj.insert(QString("dtu"), ::OpenAPI::toJsonValue(m_dtu));
    }
    if (m_edition_isSet) {
        obj.insert(QString("edition"), ::OpenAPI::toJsonValue(m_edition));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_storage_mb_isSet) {
        obj.insert(QString("storageMB"), ::OpenAPI::toJsonValue(m_storage_mb));
    }
    if (m_zone_redundant_isSet) {
        obj.insert(QString("zoneRedundant"), ::OpenAPI::toJsonValue(m_zone_redundant));
    }
    return obj;
}

QDateTime OAIElasticPoolProperties::getCreationDate() const {
    return m_creation_date;
}
void OAIElasticPoolProperties::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIElasticPoolProperties::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIElasticPoolProperties::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

qint32 OAIElasticPoolProperties::getDatabaseDtuMax() const {
    return m_database_dtu_max;
}
void OAIElasticPoolProperties::setDatabaseDtuMax(const qint32 &database_dtu_max) {
    m_database_dtu_max = database_dtu_max;
    m_database_dtu_max_isSet = true;
}

bool OAIElasticPoolProperties::is_database_dtu_max_Set() const{
    return m_database_dtu_max_isSet;
}

bool OAIElasticPoolProperties::is_database_dtu_max_Valid() const{
    return m_database_dtu_max_isValid;
}

qint32 OAIElasticPoolProperties::getDatabaseDtuMin() const {
    return m_database_dtu_min;
}
void OAIElasticPoolProperties::setDatabaseDtuMin(const qint32 &database_dtu_min) {
    m_database_dtu_min = database_dtu_min;
    m_database_dtu_min_isSet = true;
}

bool OAIElasticPoolProperties::is_database_dtu_min_Set() const{
    return m_database_dtu_min_isSet;
}

bool OAIElasticPoolProperties::is_database_dtu_min_Valid() const{
    return m_database_dtu_min_isValid;
}

qint32 OAIElasticPoolProperties::getDtu() const {
    return m_dtu;
}
void OAIElasticPoolProperties::setDtu(const qint32 &dtu) {
    m_dtu = dtu;
    m_dtu_isSet = true;
}

bool OAIElasticPoolProperties::is_dtu_Set() const{
    return m_dtu_isSet;
}

bool OAIElasticPoolProperties::is_dtu_Valid() const{
    return m_dtu_isValid;
}

QString OAIElasticPoolProperties::getEdition() const {
    return m_edition;
}
void OAIElasticPoolProperties::setEdition(const QString &edition) {
    m_edition = edition;
    m_edition_isSet = true;
}

bool OAIElasticPoolProperties::is_edition_Set() const{
    return m_edition_isSet;
}

bool OAIElasticPoolProperties::is_edition_Valid() const{
    return m_edition_isValid;
}

QString OAIElasticPoolProperties::getState() const {
    return m_state;
}
void OAIElasticPoolProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIElasticPoolProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIElasticPoolProperties::is_state_Valid() const{
    return m_state_isValid;
}

qint32 OAIElasticPoolProperties::getStorageMb() const {
    return m_storage_mb;
}
void OAIElasticPoolProperties::setStorageMb(const qint32 &storage_mb) {
    m_storage_mb = storage_mb;
    m_storage_mb_isSet = true;
}

bool OAIElasticPoolProperties::is_storage_mb_Set() const{
    return m_storage_mb_isSet;
}

bool OAIElasticPoolProperties::is_storage_mb_Valid() const{
    return m_storage_mb_isValid;
}

bool OAIElasticPoolProperties::isZoneRedundant() const {
    return m_zone_redundant;
}
void OAIElasticPoolProperties::setZoneRedundant(const bool &zone_redundant) {
    m_zone_redundant = zone_redundant;
    m_zone_redundant_isSet = true;
}

bool OAIElasticPoolProperties::is_zone_redundant_Set() const{
    return m_zone_redundant_isSet;
}

bool OAIElasticPoolProperties::is_zone_redundant_Valid() const{
    return m_zone_redundant_isValid;
}

bool OAIElasticPoolProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_dtu_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_dtu_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dtu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_redundant_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElasticPoolProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
