/*
 * PolicyClient
 * To manage and control access to your resources, you can define customized policies and assign them at a scope.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.PolicySetDefinition;
import org.openapitools.client.model.PolicySetDefinitionListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PolicySetDefinitionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PolicySetDefinitionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PolicySetDefinitionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for policySetDefinitionsCreateOrUpdate
     * @param policySetDefinitionName The name of the policy set definition to create. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters The policy set definition properties. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policySetDefinitionsCreateOrUpdateCall(String policySetDefinitionName, String apiVersion, String subscriptionId, PolicySetDefinition parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}"
            .replace("{" + "policySetDefinitionName" + "}", localVarApiClient.escapeString(policySetDefinitionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policySetDefinitionsCreateOrUpdateValidateBeforeCall(String policySetDefinitionName, String apiVersion, String subscriptionId, PolicySetDefinition parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policySetDefinitionName' is set
        if (policySetDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'policySetDefinitionName' when calling policySetDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policySetDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling policySetDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling policySetDefinitionsCreateOrUpdate(Async)");
        }

        return policySetDefinitionsCreateOrUpdateCall(policySetDefinitionName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * Creates or updates a policy set definition.
     * This operation creates or updates a policy set definition in the given subscription with the given name.
     * @param policySetDefinitionName The name of the policy set definition to create. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters The policy set definition properties. (required)
     * @return PolicySetDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PolicySetDefinition policySetDefinitionsCreateOrUpdate(String policySetDefinitionName, String apiVersion, String subscriptionId, PolicySetDefinition parameters) throws ApiException {
        ApiResponse<PolicySetDefinition> localVarResp = policySetDefinitionsCreateOrUpdateWithHttpInfo(policySetDefinitionName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * Creates or updates a policy set definition.
     * This operation creates or updates a policy set definition in the given subscription with the given name.
     * @param policySetDefinitionName The name of the policy set definition to create. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters The policy set definition properties. (required)
     * @return ApiResponse&lt;PolicySetDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicySetDefinition> policySetDefinitionsCreateOrUpdateWithHttpInfo(String policySetDefinitionName, String apiVersion, String subscriptionId, PolicySetDefinition parameters) throws ApiException {
        okhttp3.Call localVarCall = policySetDefinitionsCreateOrUpdateValidateBeforeCall(policySetDefinitionName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<PolicySetDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates or updates a policy set definition. (asynchronously)
     * This operation creates or updates a policy set definition in the given subscription with the given name.
     * @param policySetDefinitionName The name of the policy set definition to create. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters The policy set definition properties. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policySetDefinitionsCreateOrUpdateAsync(String policySetDefinitionName, String apiVersion, String subscriptionId, PolicySetDefinition parameters, final ApiCallback<PolicySetDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = policySetDefinitionsCreateOrUpdateValidateBeforeCall(policySetDefinitionName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<PolicySetDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policySetDefinitionsCreateOrUpdateAtManagementGroup
     * @param policySetDefinitionName The name of the policy set definition to create. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param managementGroupId The ID of the management group. (required)
     * @param parameters The policy set definition properties. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policySetDefinitionsCreateOrUpdateAtManagementGroupCall(String policySetDefinitionName, String apiVersion, String managementGroupId, PolicySetDefinition parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}"
            .replace("{" + "policySetDefinitionName" + "}", localVarApiClient.escapeString(policySetDefinitionName.toString()))
            .replace("{" + "managementGroupId" + "}", localVarApiClient.escapeString(managementGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policySetDefinitionsCreateOrUpdateAtManagementGroupValidateBeforeCall(String policySetDefinitionName, String apiVersion, String managementGroupId, PolicySetDefinition parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policySetDefinitionName' is set
        if (policySetDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'policySetDefinitionName' when calling policySetDefinitionsCreateOrUpdateAtManagementGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policySetDefinitionsCreateOrUpdateAtManagementGroup(Async)");
        }

        // verify the required parameter 'managementGroupId' is set
        if (managementGroupId == null) {
            throw new ApiException("Missing the required parameter 'managementGroupId' when calling policySetDefinitionsCreateOrUpdateAtManagementGroup(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling policySetDefinitionsCreateOrUpdateAtManagementGroup(Async)");
        }

        return policySetDefinitionsCreateOrUpdateAtManagementGroupCall(policySetDefinitionName, apiVersion, managementGroupId, parameters, _callback);

    }

    /**
     * Creates or updates a policy set definition.
     * This operation creates or updates a policy set definition in the given management group with the given name.
     * @param policySetDefinitionName The name of the policy set definition to create. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param managementGroupId The ID of the management group. (required)
     * @param parameters The policy set definition properties. (required)
     * @return PolicySetDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PolicySetDefinition policySetDefinitionsCreateOrUpdateAtManagementGroup(String policySetDefinitionName, String apiVersion, String managementGroupId, PolicySetDefinition parameters) throws ApiException {
        ApiResponse<PolicySetDefinition> localVarResp = policySetDefinitionsCreateOrUpdateAtManagementGroupWithHttpInfo(policySetDefinitionName, apiVersion, managementGroupId, parameters);
        return localVarResp.getData();
    }

    /**
     * Creates or updates a policy set definition.
     * This operation creates or updates a policy set definition in the given management group with the given name.
     * @param policySetDefinitionName The name of the policy set definition to create. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param managementGroupId The ID of the management group. (required)
     * @param parameters The policy set definition properties. (required)
     * @return ApiResponse&lt;PolicySetDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicySetDefinition> policySetDefinitionsCreateOrUpdateAtManagementGroupWithHttpInfo(String policySetDefinitionName, String apiVersion, String managementGroupId, PolicySetDefinition parameters) throws ApiException {
        okhttp3.Call localVarCall = policySetDefinitionsCreateOrUpdateAtManagementGroupValidateBeforeCall(policySetDefinitionName, apiVersion, managementGroupId, parameters, null);
        Type localVarReturnType = new TypeToken<PolicySetDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates or updates a policy set definition. (asynchronously)
     * This operation creates or updates a policy set definition in the given management group with the given name.
     * @param policySetDefinitionName The name of the policy set definition to create. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param managementGroupId The ID of the management group. (required)
     * @param parameters The policy set definition properties. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policySetDefinitionsCreateOrUpdateAtManagementGroupAsync(String policySetDefinitionName, String apiVersion, String managementGroupId, PolicySetDefinition parameters, final ApiCallback<PolicySetDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = policySetDefinitionsCreateOrUpdateAtManagementGroupValidateBeforeCall(policySetDefinitionName, apiVersion, managementGroupId, parameters, _callback);
        Type localVarReturnType = new TypeToken<PolicySetDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policySetDefinitionsDelete
     * @param policySetDefinitionName The name of the policy set definition to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the policy set definition doesn&#39;t exist in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policySetDefinitionsDeleteCall(String policySetDefinitionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}"
            .replace("{" + "policySetDefinitionName" + "}", localVarApiClient.escapeString(policySetDefinitionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policySetDefinitionsDeleteValidateBeforeCall(String policySetDefinitionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policySetDefinitionName' is set
        if (policySetDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'policySetDefinitionName' when calling policySetDefinitionsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policySetDefinitionsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling policySetDefinitionsDelete(Async)");
        }

        return policySetDefinitionsDeleteCall(policySetDefinitionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * Deletes a policy set definition.
     * This operation deletes the policy set definition in the given subscription with the given name.
     * @param policySetDefinitionName The name of the policy set definition to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the policy set definition doesn&#39;t exist in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void policySetDefinitionsDelete(String policySetDefinitionName, String apiVersion, String subscriptionId) throws ApiException {
        policySetDefinitionsDeleteWithHttpInfo(policySetDefinitionName, apiVersion, subscriptionId);
    }

    /**
     * Deletes a policy set definition.
     * This operation deletes the policy set definition in the given subscription with the given name.
     * @param policySetDefinitionName The name of the policy set definition to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the policy set definition doesn&#39;t exist in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> policySetDefinitionsDeleteWithHttpInfo(String policySetDefinitionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = policySetDefinitionsDeleteValidateBeforeCall(policySetDefinitionName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a policy set definition. (asynchronously)
     * This operation deletes the policy set definition in the given subscription with the given name.
     * @param policySetDefinitionName The name of the policy set definition to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the policy set definition doesn&#39;t exist in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policySetDefinitionsDeleteAsync(String policySetDefinitionName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = policySetDefinitionsDeleteValidateBeforeCall(policySetDefinitionName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for policySetDefinitionsDeleteAtManagementGroup
     * @param policySetDefinitionName The name of the policy set definition to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param managementGroupId The ID of the management group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the policy set definition doesn&#39;t exist in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policySetDefinitionsDeleteAtManagementGroupCall(String policySetDefinitionName, String apiVersion, String managementGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}"
            .replace("{" + "policySetDefinitionName" + "}", localVarApiClient.escapeString(policySetDefinitionName.toString()))
            .replace("{" + "managementGroupId" + "}", localVarApiClient.escapeString(managementGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policySetDefinitionsDeleteAtManagementGroupValidateBeforeCall(String policySetDefinitionName, String apiVersion, String managementGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policySetDefinitionName' is set
        if (policySetDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'policySetDefinitionName' when calling policySetDefinitionsDeleteAtManagementGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policySetDefinitionsDeleteAtManagementGroup(Async)");
        }

        // verify the required parameter 'managementGroupId' is set
        if (managementGroupId == null) {
            throw new ApiException("Missing the required parameter 'managementGroupId' when calling policySetDefinitionsDeleteAtManagementGroup(Async)");
        }

        return policySetDefinitionsDeleteAtManagementGroupCall(policySetDefinitionName, apiVersion, managementGroupId, _callback);

    }

    /**
     * Deletes a policy set definition.
     * This operation deletes the policy set definition in the given management group with the given name.
     * @param policySetDefinitionName The name of the policy set definition to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param managementGroupId The ID of the management group. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the policy set definition doesn&#39;t exist in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void policySetDefinitionsDeleteAtManagementGroup(String policySetDefinitionName, String apiVersion, String managementGroupId) throws ApiException {
        policySetDefinitionsDeleteAtManagementGroupWithHttpInfo(policySetDefinitionName, apiVersion, managementGroupId);
    }

    /**
     * Deletes a policy set definition.
     * This operation deletes the policy set definition in the given management group with the given name.
     * @param policySetDefinitionName The name of the policy set definition to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param managementGroupId The ID of the management group. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the policy set definition doesn&#39;t exist in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> policySetDefinitionsDeleteAtManagementGroupWithHttpInfo(String policySetDefinitionName, String apiVersion, String managementGroupId) throws ApiException {
        okhttp3.Call localVarCall = policySetDefinitionsDeleteAtManagementGroupValidateBeforeCall(policySetDefinitionName, apiVersion, managementGroupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a policy set definition. (asynchronously)
     * This operation deletes the policy set definition in the given management group with the given name.
     * @param policySetDefinitionName The name of the policy set definition to delete. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param managementGroupId The ID of the management group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the policy set definition doesn&#39;t exist in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policySetDefinitionsDeleteAtManagementGroupAsync(String policySetDefinitionName, String apiVersion, String managementGroupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = policySetDefinitionsDeleteAtManagementGroupValidateBeforeCall(policySetDefinitionName, apiVersion, managementGroupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for policySetDefinitionsGet
     * @param policySetDefinitionName The name of the policy set definition to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policySetDefinitionsGetCall(String policySetDefinitionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}"
            .replace("{" + "policySetDefinitionName" + "}", localVarApiClient.escapeString(policySetDefinitionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policySetDefinitionsGetValidateBeforeCall(String policySetDefinitionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policySetDefinitionName' is set
        if (policySetDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'policySetDefinitionName' when calling policySetDefinitionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policySetDefinitionsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling policySetDefinitionsGet(Async)");
        }

        return policySetDefinitionsGetCall(policySetDefinitionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * Retrieves a policy set definition.
     * This operation retrieves the policy set definition in the given subscription with the given name.
     * @param policySetDefinitionName The name of the policy set definition to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return PolicySetDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PolicySetDefinition policySetDefinitionsGet(String policySetDefinitionName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<PolicySetDefinition> localVarResp = policySetDefinitionsGetWithHttpInfo(policySetDefinitionName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Retrieves a policy set definition.
     * This operation retrieves the policy set definition in the given subscription with the given name.
     * @param policySetDefinitionName The name of the policy set definition to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ApiResponse&lt;PolicySetDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicySetDefinition> policySetDefinitionsGetWithHttpInfo(String policySetDefinitionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = policySetDefinitionsGetValidateBeforeCall(policySetDefinitionName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<PolicySetDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a policy set definition. (asynchronously)
     * This operation retrieves the policy set definition in the given subscription with the given name.
     * @param policySetDefinitionName The name of the policy set definition to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policySetDefinitionsGetAsync(String policySetDefinitionName, String apiVersion, String subscriptionId, final ApiCallback<PolicySetDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = policySetDefinitionsGetValidateBeforeCall(policySetDefinitionName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<PolicySetDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policySetDefinitionsGetAtManagementGroup
     * @param policySetDefinitionName The name of the policy set definition to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param managementGroupId The ID of the management group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policySetDefinitionsGetAtManagementGroupCall(String policySetDefinitionName, String apiVersion, String managementGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}"
            .replace("{" + "policySetDefinitionName" + "}", localVarApiClient.escapeString(policySetDefinitionName.toString()))
            .replace("{" + "managementGroupId" + "}", localVarApiClient.escapeString(managementGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policySetDefinitionsGetAtManagementGroupValidateBeforeCall(String policySetDefinitionName, String apiVersion, String managementGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policySetDefinitionName' is set
        if (policySetDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'policySetDefinitionName' when calling policySetDefinitionsGetAtManagementGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policySetDefinitionsGetAtManagementGroup(Async)");
        }

        // verify the required parameter 'managementGroupId' is set
        if (managementGroupId == null) {
            throw new ApiException("Missing the required parameter 'managementGroupId' when calling policySetDefinitionsGetAtManagementGroup(Async)");
        }

        return policySetDefinitionsGetAtManagementGroupCall(policySetDefinitionName, apiVersion, managementGroupId, _callback);

    }

    /**
     * Retrieves a policy set definition.
     * This operation retrieves the policy set definition in the given management group with the given name.
     * @param policySetDefinitionName The name of the policy set definition to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param managementGroupId The ID of the management group. (required)
     * @return PolicySetDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PolicySetDefinition policySetDefinitionsGetAtManagementGroup(String policySetDefinitionName, String apiVersion, String managementGroupId) throws ApiException {
        ApiResponse<PolicySetDefinition> localVarResp = policySetDefinitionsGetAtManagementGroupWithHttpInfo(policySetDefinitionName, apiVersion, managementGroupId);
        return localVarResp.getData();
    }

    /**
     * Retrieves a policy set definition.
     * This operation retrieves the policy set definition in the given management group with the given name.
     * @param policySetDefinitionName The name of the policy set definition to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param managementGroupId The ID of the management group. (required)
     * @return ApiResponse&lt;PolicySetDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicySetDefinition> policySetDefinitionsGetAtManagementGroupWithHttpInfo(String policySetDefinitionName, String apiVersion, String managementGroupId) throws ApiException {
        okhttp3.Call localVarCall = policySetDefinitionsGetAtManagementGroupValidateBeforeCall(policySetDefinitionName, apiVersion, managementGroupId, null);
        Type localVarReturnType = new TypeToken<PolicySetDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a policy set definition. (asynchronously)
     * This operation retrieves the policy set definition in the given management group with the given name.
     * @param policySetDefinitionName The name of the policy set definition to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param managementGroupId The ID of the management group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the policy set definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policySetDefinitionsGetAtManagementGroupAsync(String policySetDefinitionName, String apiVersion, String managementGroupId, final ApiCallback<PolicySetDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = policySetDefinitionsGetAtManagementGroupValidateBeforeCall(policySetDefinitionName, apiVersion, managementGroupId, _callback);
        Type localVarReturnType = new TypeToken<PolicySetDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policySetDefinitionsGetBuiltIn
     * @param policySetDefinitionName The name of the policy set definition to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the built in policy set definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policySetDefinitionsGetBuiltInCall(String policySetDefinitionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}"
            .replace("{" + "policySetDefinitionName" + "}", localVarApiClient.escapeString(policySetDefinitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policySetDefinitionsGetBuiltInValidateBeforeCall(String policySetDefinitionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policySetDefinitionName' is set
        if (policySetDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'policySetDefinitionName' when calling policySetDefinitionsGetBuiltIn(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policySetDefinitionsGetBuiltIn(Async)");
        }

        return policySetDefinitionsGetBuiltInCall(policySetDefinitionName, apiVersion, _callback);

    }

    /**
     * Retrieves a built in policy set definition.
     * This operation retrieves the built-in policy set definition with the given name.
     * @param policySetDefinitionName The name of the policy set definition to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @return PolicySetDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the built in policy set definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PolicySetDefinition policySetDefinitionsGetBuiltIn(String policySetDefinitionName, String apiVersion) throws ApiException {
        ApiResponse<PolicySetDefinition> localVarResp = policySetDefinitionsGetBuiltInWithHttpInfo(policySetDefinitionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieves a built in policy set definition.
     * This operation retrieves the built-in policy set definition with the given name.
     * @param policySetDefinitionName The name of the policy set definition to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @return ApiResponse&lt;PolicySetDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the built in policy set definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicySetDefinition> policySetDefinitionsGetBuiltInWithHttpInfo(String policySetDefinitionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = policySetDefinitionsGetBuiltInValidateBeforeCall(policySetDefinitionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<PolicySetDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a built in policy set definition. (asynchronously)
     * This operation retrieves the built-in policy set definition with the given name.
     * @param policySetDefinitionName The name of the policy set definition to get. (required)
     * @param apiVersion The API version to use for the operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the built in policy set definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policySetDefinitionsGetBuiltInAsync(String policySetDefinitionName, String apiVersion, final ApiCallback<PolicySetDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = policySetDefinitionsGetBuiltInValidateBeforeCall(policySetDefinitionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PolicySetDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policySetDefinitionsList
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of policy set definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policySetDefinitionsListCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policySetDefinitionsListValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policySetDefinitionsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling policySetDefinitionsList(Async)");
        }

        return policySetDefinitionsListCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * Retrieves the policy set definitions for a subscription.
     * This operation retrieves a list of all the policy set definitions in the given subscription.
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return PolicySetDefinitionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of policy set definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PolicySetDefinitionListResult policySetDefinitionsList(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<PolicySetDefinitionListResult> localVarResp = policySetDefinitionsListWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Retrieves the policy set definitions for a subscription.
     * This operation retrieves a list of all the policy set definitions in the given subscription.
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ApiResponse&lt;PolicySetDefinitionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of policy set definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicySetDefinitionListResult> policySetDefinitionsListWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = policySetDefinitionsListValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<PolicySetDefinitionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the policy set definitions for a subscription. (asynchronously)
     * This operation retrieves a list of all the policy set definitions in the given subscription.
     * @param apiVersion The API version to use for the operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of policy set definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policySetDefinitionsListAsync(String apiVersion, String subscriptionId, final ApiCallback<PolicySetDefinitionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = policySetDefinitionsListValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<PolicySetDefinitionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policySetDefinitionsListBuiltIn
     * @param apiVersion The API version to use for the operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of built in policy set definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policySetDefinitionsListBuiltInCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Authorization/policySetDefinitions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policySetDefinitionsListBuiltInValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policySetDefinitionsListBuiltIn(Async)");
        }

        return policySetDefinitionsListBuiltInCall(apiVersion, _callback);

    }

    /**
     * Retrieves built-in policy set definitions.
     * This operation retrieves a list of all the built-in policy set definitions.
     * @param apiVersion The API version to use for the operation. (required)
     * @return PolicySetDefinitionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of built in policy set definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PolicySetDefinitionListResult policySetDefinitionsListBuiltIn(String apiVersion) throws ApiException {
        ApiResponse<PolicySetDefinitionListResult> localVarResp = policySetDefinitionsListBuiltInWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieves built-in policy set definitions.
     * This operation retrieves a list of all the built-in policy set definitions.
     * @param apiVersion The API version to use for the operation. (required)
     * @return ApiResponse&lt;PolicySetDefinitionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of built in policy set definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicySetDefinitionListResult> policySetDefinitionsListBuiltInWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = policySetDefinitionsListBuiltInValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<PolicySetDefinitionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves built-in policy set definitions. (asynchronously)
     * This operation retrieves a list of all the built-in policy set definitions.
     * @param apiVersion The API version to use for the operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of built in policy set definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policySetDefinitionsListBuiltInAsync(String apiVersion, final ApiCallback<PolicySetDefinitionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = policySetDefinitionsListBuiltInValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PolicySetDefinitionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policySetDefinitionsListByManagementGroup
     * @param apiVersion The API version to use for the operation. (required)
     * @param managementGroupId The ID of the management group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of policy set definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policySetDefinitionsListByManagementGroupCall(String apiVersion, String managementGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions"
            .replace("{" + "managementGroupId" + "}", localVarApiClient.escapeString(managementGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policySetDefinitionsListByManagementGroupValidateBeforeCall(String apiVersion, String managementGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policySetDefinitionsListByManagementGroup(Async)");
        }

        // verify the required parameter 'managementGroupId' is set
        if (managementGroupId == null) {
            throw new ApiException("Missing the required parameter 'managementGroupId' when calling policySetDefinitionsListByManagementGroup(Async)");
        }

        return policySetDefinitionsListByManagementGroupCall(apiVersion, managementGroupId, _callback);

    }

    /**
     * Retrieves all policy set definitions in management group.
     * This operation retrieves a list of all the a policy set definition in the given management group.
     * @param apiVersion The API version to use for the operation. (required)
     * @param managementGroupId The ID of the management group. (required)
     * @return PolicySetDefinitionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of policy set definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PolicySetDefinitionListResult policySetDefinitionsListByManagementGroup(String apiVersion, String managementGroupId) throws ApiException {
        ApiResponse<PolicySetDefinitionListResult> localVarResp = policySetDefinitionsListByManagementGroupWithHttpInfo(apiVersion, managementGroupId);
        return localVarResp.getData();
    }

    /**
     * Retrieves all policy set definitions in management group.
     * This operation retrieves a list of all the a policy set definition in the given management group.
     * @param apiVersion The API version to use for the operation. (required)
     * @param managementGroupId The ID of the management group. (required)
     * @return ApiResponse&lt;PolicySetDefinitionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of policy set definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicySetDefinitionListResult> policySetDefinitionsListByManagementGroupWithHttpInfo(String apiVersion, String managementGroupId) throws ApiException {
        okhttp3.Call localVarCall = policySetDefinitionsListByManagementGroupValidateBeforeCall(apiVersion, managementGroupId, null);
        Type localVarReturnType = new TypeToken<PolicySetDefinitionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves all policy set definitions in management group. (asynchronously)
     * This operation retrieves a list of all the a policy set definition in the given management group.
     * @param apiVersion The API version to use for the operation. (required)
     * @param managementGroupId The ID of the management group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of policy set definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policySetDefinitionsListByManagementGroupAsync(String apiVersion, String managementGroupId, final ApiCallback<PolicySetDefinitionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = policySetDefinitionsListByManagementGroupValidateBeforeCall(apiVersion, managementGroupId, _callback);
        Type localVarReturnType = new TypeToken<PolicySetDefinitionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
