/**
 * PolicyClient
 * To manage and control access to your resources, you can define customized policies and assign them at a scope.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPolicySetDefinitionsApi_H
#define OAI_OAIPolicySetDefinitionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIPolicySetDefinition.h"
#include "OAIPolicySetDefinitionListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPolicySetDefinitionsApi : public QObject {
    Q_OBJECT

public:
    OAIPolicySetDefinitionsApi(const int timeOut = 0);
    ~OAIPolicySetDefinitionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  policy_set_definition_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIPolicySetDefinition [required]
    */
    virtual void policySetDefinitionsCreateOrUpdate(const QString &policy_set_definition_name, const QString &api_version, const QString &subscription_id, const OAIPolicySetDefinition &parameters);

    /**
    * @param[in]  policy_set_definition_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  management_group_id QString [required]
    * @param[in]  parameters OAIPolicySetDefinition [required]
    */
    virtual void policySetDefinitionsCreateOrUpdateAtManagementGroup(const QString &policy_set_definition_name, const QString &api_version, const QString &management_group_id, const OAIPolicySetDefinition &parameters);

    /**
    * @param[in]  policy_set_definition_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void policySetDefinitionsDelete(const QString &policy_set_definition_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  policy_set_definition_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  management_group_id QString [required]
    */
    virtual void policySetDefinitionsDeleteAtManagementGroup(const QString &policy_set_definition_name, const QString &api_version, const QString &management_group_id);

    /**
    * @param[in]  policy_set_definition_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void policySetDefinitionsGet(const QString &policy_set_definition_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  policy_set_definition_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  management_group_id QString [required]
    */
    virtual void policySetDefinitionsGetAtManagementGroup(const QString &policy_set_definition_name, const QString &api_version, const QString &management_group_id);

    /**
    * @param[in]  policy_set_definition_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void policySetDefinitionsGetBuiltIn(const QString &policy_set_definition_name, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void policySetDefinitionsList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void policySetDefinitionsListBuiltIn(const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  management_group_id QString [required]
    */
    virtual void policySetDefinitionsListByManagementGroup(const QString &api_version, const QString &management_group_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void policySetDefinitionsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void policySetDefinitionsCreateOrUpdateAtManagementGroupCallback(OAIHttpRequestWorker *worker);
    void policySetDefinitionsDeleteCallback(OAIHttpRequestWorker *worker);
    void policySetDefinitionsDeleteAtManagementGroupCallback(OAIHttpRequestWorker *worker);
    void policySetDefinitionsGetCallback(OAIHttpRequestWorker *worker);
    void policySetDefinitionsGetAtManagementGroupCallback(OAIHttpRequestWorker *worker);
    void policySetDefinitionsGetBuiltInCallback(OAIHttpRequestWorker *worker);
    void policySetDefinitionsListCallback(OAIHttpRequestWorker *worker);
    void policySetDefinitionsListBuiltInCallback(OAIHttpRequestWorker *worker);
    void policySetDefinitionsListByManagementGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void policySetDefinitionsCreateOrUpdateSignal(OAIPolicySetDefinition summary);
    void policySetDefinitionsCreateOrUpdateAtManagementGroupSignal(OAIPolicySetDefinition summary);
    void policySetDefinitionsDeleteSignal();
    void policySetDefinitionsDeleteAtManagementGroupSignal();
    void policySetDefinitionsGetSignal(OAIPolicySetDefinition summary);
    void policySetDefinitionsGetAtManagementGroupSignal(OAIPolicySetDefinition summary);
    void policySetDefinitionsGetBuiltInSignal(OAIPolicySetDefinition summary);
    void policySetDefinitionsListSignal(OAIPolicySetDefinitionListResult summary);
    void policySetDefinitionsListBuiltInSignal(OAIPolicySetDefinitionListResult summary);
    void policySetDefinitionsListByManagementGroupSignal(OAIPolicySetDefinitionListResult summary);


    void policySetDefinitionsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIPolicySetDefinition summary);
    void policySetDefinitionsCreateOrUpdateAtManagementGroupSignalFull(OAIHttpRequestWorker *worker, OAIPolicySetDefinition summary);
    void policySetDefinitionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void policySetDefinitionsDeleteAtManagementGroupSignalFull(OAIHttpRequestWorker *worker);
    void policySetDefinitionsGetSignalFull(OAIHttpRequestWorker *worker, OAIPolicySetDefinition summary);
    void policySetDefinitionsGetAtManagementGroupSignalFull(OAIHttpRequestWorker *worker, OAIPolicySetDefinition summary);
    void policySetDefinitionsGetBuiltInSignalFull(OAIHttpRequestWorker *worker, OAIPolicySetDefinition summary);
    void policySetDefinitionsListSignalFull(OAIHttpRequestWorker *worker, OAIPolicySetDefinitionListResult summary);
    void policySetDefinitionsListBuiltInSignalFull(OAIHttpRequestWorker *worker, OAIPolicySetDefinitionListResult summary);
    void policySetDefinitionsListByManagementGroupSignalFull(OAIHttpRequestWorker *worker, OAIPolicySetDefinitionListResult summary);

    Q_DECL_DEPRECATED_X("Use policySetDefinitionsCreateOrUpdateSignalError() instead")
    void policySetDefinitionsCreateOrUpdateSignalE(OAIPolicySetDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policySetDefinitionsCreateOrUpdateSignalError(OAIPolicySetDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policySetDefinitionsCreateOrUpdateAtManagementGroupSignalError() instead")
    void policySetDefinitionsCreateOrUpdateAtManagementGroupSignalE(OAIPolicySetDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policySetDefinitionsCreateOrUpdateAtManagementGroupSignalError(OAIPolicySetDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policySetDefinitionsDeleteSignalError() instead")
    void policySetDefinitionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void policySetDefinitionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policySetDefinitionsDeleteAtManagementGroupSignalError() instead")
    void policySetDefinitionsDeleteAtManagementGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void policySetDefinitionsDeleteAtManagementGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policySetDefinitionsGetSignalError() instead")
    void policySetDefinitionsGetSignalE(OAIPolicySetDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policySetDefinitionsGetSignalError(OAIPolicySetDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policySetDefinitionsGetAtManagementGroupSignalError() instead")
    void policySetDefinitionsGetAtManagementGroupSignalE(OAIPolicySetDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policySetDefinitionsGetAtManagementGroupSignalError(OAIPolicySetDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policySetDefinitionsGetBuiltInSignalError() instead")
    void policySetDefinitionsGetBuiltInSignalE(OAIPolicySetDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policySetDefinitionsGetBuiltInSignalError(OAIPolicySetDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policySetDefinitionsListSignalError() instead")
    void policySetDefinitionsListSignalE(OAIPolicySetDefinitionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policySetDefinitionsListSignalError(OAIPolicySetDefinitionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policySetDefinitionsListBuiltInSignalError() instead")
    void policySetDefinitionsListBuiltInSignalE(OAIPolicySetDefinitionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policySetDefinitionsListBuiltInSignalError(OAIPolicySetDefinitionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policySetDefinitionsListByManagementGroupSignalError() instead")
    void policySetDefinitionsListByManagementGroupSignalE(OAIPolicySetDefinitionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policySetDefinitionsListByManagementGroupSignalError(OAIPolicySetDefinitionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use policySetDefinitionsCreateOrUpdateSignalErrorFull() instead")
    void policySetDefinitionsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policySetDefinitionsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policySetDefinitionsCreateOrUpdateAtManagementGroupSignalErrorFull() instead")
    void policySetDefinitionsCreateOrUpdateAtManagementGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policySetDefinitionsCreateOrUpdateAtManagementGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policySetDefinitionsDeleteSignalErrorFull() instead")
    void policySetDefinitionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policySetDefinitionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policySetDefinitionsDeleteAtManagementGroupSignalErrorFull() instead")
    void policySetDefinitionsDeleteAtManagementGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policySetDefinitionsDeleteAtManagementGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policySetDefinitionsGetSignalErrorFull() instead")
    void policySetDefinitionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policySetDefinitionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policySetDefinitionsGetAtManagementGroupSignalErrorFull() instead")
    void policySetDefinitionsGetAtManagementGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policySetDefinitionsGetAtManagementGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policySetDefinitionsGetBuiltInSignalErrorFull() instead")
    void policySetDefinitionsGetBuiltInSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policySetDefinitionsGetBuiltInSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policySetDefinitionsListSignalErrorFull() instead")
    void policySetDefinitionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policySetDefinitionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policySetDefinitionsListBuiltInSignalErrorFull() instead")
    void policySetDefinitionsListBuiltInSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policySetDefinitionsListBuiltInSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policySetDefinitionsListByManagementGroupSignalErrorFull() instead")
    void policySetDefinitionsListByManagementGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policySetDefinitionsListByManagementGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
