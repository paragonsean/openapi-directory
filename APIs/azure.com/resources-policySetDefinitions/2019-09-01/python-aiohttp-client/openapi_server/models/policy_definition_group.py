# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PolicyDefinitionGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_metadata_id: str=None, category: str=None, description: str=None, display_name: str=None, name: str=None):
        """PolicyDefinitionGroup - a model defined in OpenAPI

        :param additional_metadata_id: The additional_metadata_id of this PolicyDefinitionGroup.
        :param category: The category of this PolicyDefinitionGroup.
        :param description: The description of this PolicyDefinitionGroup.
        :param display_name: The display_name of this PolicyDefinitionGroup.
        :param name: The name of this PolicyDefinitionGroup.
        """
        self.openapi_types = {
            'additional_metadata_id': str,
            'category': str,
            'description': str,
            'display_name': str,
            'name': str
        }

        self.attribute_map = {
            'additional_metadata_id': 'additionalMetadataId',
            'category': 'category',
            'description': 'description',
            'display_name': 'displayName',
            'name': 'name'
        }

        self._additional_metadata_id = additional_metadata_id
        self._category = category
        self._description = description
        self._display_name = display_name
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyDefinitionGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyDefinitionGroup of this PolicyDefinitionGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_metadata_id(self):
        """Gets the additional_metadata_id of this PolicyDefinitionGroup.

        A resource ID of a resource that contains additional metadata about the group.

        :return: The additional_metadata_id of this PolicyDefinitionGroup.
        :rtype: str
        """
        return self._additional_metadata_id

    @additional_metadata_id.setter
    def additional_metadata_id(self, additional_metadata_id):
        """Sets the additional_metadata_id of this PolicyDefinitionGroup.

        A resource ID of a resource that contains additional metadata about the group.

        :param additional_metadata_id: The additional_metadata_id of this PolicyDefinitionGroup.
        :type additional_metadata_id: str
        """

        self._additional_metadata_id = additional_metadata_id

    @property
    def category(self):
        """Gets the category of this PolicyDefinitionGroup.

        The group's category.

        :return: The category of this PolicyDefinitionGroup.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this PolicyDefinitionGroup.

        The group's category.

        :param category: The category of this PolicyDefinitionGroup.
        :type category: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this PolicyDefinitionGroup.

        The group's description.

        :return: The description of this PolicyDefinitionGroup.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PolicyDefinitionGroup.

        The group's description.

        :param description: The description of this PolicyDefinitionGroup.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this PolicyDefinitionGroup.

        The group's display name.

        :return: The display_name of this PolicyDefinitionGroup.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PolicyDefinitionGroup.

        The group's display name.

        :param display_name: The display_name of this PolicyDefinitionGroup.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this PolicyDefinitionGroup.

        The name of the group.

        :return: The name of this PolicyDefinitionGroup.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PolicyDefinitionGroup.

        The name of the group.

        :param name: The name of this PolicyDefinitionGroup.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
