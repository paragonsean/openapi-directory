# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PolicySetDefinitionPropertiesParametersValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_values: List[object]=None, default_value: object=None, metadata: Dict[str, object]=None, type: str=None):
        """PolicySetDefinitionPropertiesParametersValue - a model defined in OpenAPI

        :param allowed_values: The allowed_values of this PolicySetDefinitionPropertiesParametersValue.
        :param default_value: The default_value of this PolicySetDefinitionPropertiesParametersValue.
        :param metadata: The metadata of this PolicySetDefinitionPropertiesParametersValue.
        :param type: The type of this PolicySetDefinitionPropertiesParametersValue.
        """
        self.openapi_types = {
            'allowed_values': List[object],
            'default_value': object,
            'metadata': Dict[str, object],
            'type': str
        }

        self.attribute_map = {
            'allowed_values': 'allowedValues',
            'default_value': 'defaultValue',
            'metadata': 'metadata',
            'type': 'type'
        }

        self._allowed_values = allowed_values
        self._default_value = default_value
        self._metadata = metadata
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicySetDefinitionPropertiesParametersValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicySetDefinitionProperties_parameters_value of this PolicySetDefinitionPropertiesParametersValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_values(self):
        """Gets the allowed_values of this PolicySetDefinitionPropertiesParametersValue.

        The allowed values for the parameter.

        :return: The allowed_values of this PolicySetDefinitionPropertiesParametersValue.
        :rtype: List[object]
        """
        return self._allowed_values

    @allowed_values.setter
    def allowed_values(self, allowed_values):
        """Sets the allowed_values of this PolicySetDefinitionPropertiesParametersValue.

        The allowed values for the parameter.

        :param allowed_values: The allowed_values of this PolicySetDefinitionPropertiesParametersValue.
        :type allowed_values: List[object]
        """

        self._allowed_values = allowed_values

    @property
    def default_value(self):
        """Gets the default_value of this PolicySetDefinitionPropertiesParametersValue.

        The default value for the parameter if no value is provided.

        :return: The default_value of this PolicySetDefinitionPropertiesParametersValue.
        :rtype: object
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this PolicySetDefinitionPropertiesParametersValue.

        The default value for the parameter if no value is provided.

        :param default_value: The default_value of this PolicySetDefinitionPropertiesParametersValue.
        :type default_value: object
        """

        self._default_value = default_value

    @property
    def metadata(self):
        """Gets the metadata of this PolicySetDefinitionPropertiesParametersValue.

        General metadata for the parameter.

        :return: The metadata of this PolicySetDefinitionPropertiesParametersValue.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PolicySetDefinitionPropertiesParametersValue.

        General metadata for the parameter.

        :param metadata: The metadata of this PolicySetDefinitionPropertiesParametersValue.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def type(self):
        """Gets the type of this PolicySetDefinitionPropertiesParametersValue.

        The data type of the parameter.

        :return: The type of this PolicySetDefinitionPropertiesParametersValue.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PolicySetDefinitionPropertiesParametersValue.

        The data type of the parameter.

        :param type: The type of this PolicySetDefinitionPropertiesParametersValue.
        :type type: str
        """
        allowed_values = ["String", "Array", "Object", "Boolean", "Integer", "Float", "DateTime"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
