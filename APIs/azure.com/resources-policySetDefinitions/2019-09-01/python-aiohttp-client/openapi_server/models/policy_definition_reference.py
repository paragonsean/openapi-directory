# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_definition_reference_parameters_value import PolicyDefinitionReferenceParametersValue
from openapi_server import util


class PolicyDefinitionReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_names: List[str]=None, parameters: Dict[str, PolicyDefinitionReferenceParametersValue]=None, policy_definition_id: str=None, policy_definition_reference_id: str=None):
        """PolicyDefinitionReference - a model defined in OpenAPI

        :param group_names: The group_names of this PolicyDefinitionReference.
        :param parameters: The parameters of this PolicyDefinitionReference.
        :param policy_definition_id: The policy_definition_id of this PolicyDefinitionReference.
        :param policy_definition_reference_id: The policy_definition_reference_id of this PolicyDefinitionReference.
        """
        self.openapi_types = {
            'group_names': List[str],
            'parameters': Dict[str, PolicyDefinitionReferenceParametersValue],
            'policy_definition_id': str,
            'policy_definition_reference_id': str
        }

        self.attribute_map = {
            'group_names': 'groupNames',
            'parameters': 'parameters',
            'policy_definition_id': 'policyDefinitionId',
            'policy_definition_reference_id': 'policyDefinitionReferenceId'
        }

        self._group_names = group_names
        self._parameters = parameters
        self._policy_definition_id = policy_definition_id
        self._policy_definition_reference_id = policy_definition_reference_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyDefinitionReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyDefinitionReference of this PolicyDefinitionReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_names(self):
        """Gets the group_names of this PolicyDefinitionReference.

        The name of the groups that this policy definition reference belongs to.

        :return: The group_names of this PolicyDefinitionReference.
        :rtype: List[str]
        """
        return self._group_names

    @group_names.setter
    def group_names(self, group_names):
        """Sets the group_names of this PolicyDefinitionReference.

        The name of the groups that this policy definition reference belongs to.

        :param group_names: The group_names of this PolicyDefinitionReference.
        :type group_names: List[str]
        """

        self._group_names = group_names

    @property
    def parameters(self):
        """Gets the parameters of this PolicyDefinitionReference.

        The parameter values for the policy rule. The keys are the parameter names.

        :return: The parameters of this PolicyDefinitionReference.
        :rtype: Dict[str, PolicyDefinitionReferenceParametersValue]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this PolicyDefinitionReference.

        The parameter values for the policy rule. The keys are the parameter names.

        :param parameters: The parameters of this PolicyDefinitionReference.
        :type parameters: Dict[str, PolicyDefinitionReferenceParametersValue]
        """

        self._parameters = parameters

    @property
    def policy_definition_id(self):
        """Gets the policy_definition_id of this PolicyDefinitionReference.

        The ID of the policy definition or policy set definition.

        :return: The policy_definition_id of this PolicyDefinitionReference.
        :rtype: str
        """
        return self._policy_definition_id

    @policy_definition_id.setter
    def policy_definition_id(self, policy_definition_id):
        """Sets the policy_definition_id of this PolicyDefinitionReference.

        The ID of the policy definition or policy set definition.

        :param policy_definition_id: The policy_definition_id of this PolicyDefinitionReference.
        :type policy_definition_id: str
        """
        if policy_definition_id is None:
            raise ValueError("Invalid value for `policy_definition_id`, must not be `None`")

        self._policy_definition_id = policy_definition_id

    @property
    def policy_definition_reference_id(self):
        """Gets the policy_definition_reference_id of this PolicyDefinitionReference.

        A unique id (within the policy set definition) for this policy definition reference.

        :return: The policy_definition_reference_id of this PolicyDefinitionReference.
        :rtype: str
        """
        return self._policy_definition_reference_id

    @policy_definition_reference_id.setter
    def policy_definition_reference_id(self, policy_definition_reference_id):
        """Sets the policy_definition_reference_id of this PolicyDefinitionReference.

        A unique id (within the policy set definition) for this policy definition reference.

        :param policy_definition_reference_id: The policy_definition_reference_id of this PolicyDefinitionReference.
        :type policy_definition_reference_id: str
        """

        self._policy_definition_reference_id = policy_definition_reference_id
