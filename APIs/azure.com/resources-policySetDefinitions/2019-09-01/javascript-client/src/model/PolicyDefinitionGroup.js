/**
 * PolicyClient
 * To manage and control access to your resources, you can define customized policies and assign them at a scope.
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PolicyDefinitionGroup model module.
 * @module model/PolicyDefinitionGroup
 * @version 2019-09-01
 */
class PolicyDefinitionGroup {
    /**
     * Constructs a new <code>PolicyDefinitionGroup</code>.
     * The policy definition group.
     * @alias module:model/PolicyDefinitionGroup
     * @param name {String} The name of the group.
     */
    constructor(name) { 
        
        PolicyDefinitionGroup.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>PolicyDefinitionGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicyDefinitionGroup} obj Optional instance to populate.
     * @return {module:model/PolicyDefinitionGroup} The populated <code>PolicyDefinitionGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicyDefinitionGroup();

            if (data.hasOwnProperty('additionalMetadataId')) {
                obj['additionalMetadataId'] = ApiClient.convertToType(data['additionalMetadataId'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicyDefinitionGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicyDefinitionGroup</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PolicyDefinitionGroup.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['additionalMetadataId'] && !(typeof data['additionalMetadataId'] === 'string' || data['additionalMetadataId'] instanceof String)) {
            throw new Error("Expected the field `additionalMetadataId` to be a primitive type in the JSON string but got " + data['additionalMetadataId']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

PolicyDefinitionGroup.RequiredProperties = ["name"];

/**
 * A resource ID of a resource that contains additional metadata about the group.
 * @member {String} additionalMetadataId
 */
PolicyDefinitionGroup.prototype['additionalMetadataId'] = undefined;

/**
 * The group's category.
 * @member {String} category
 */
PolicyDefinitionGroup.prototype['category'] = undefined;

/**
 * The group's description.
 * @member {String} description
 */
PolicyDefinitionGroup.prototype['description'] = undefined;

/**
 * The group's display name.
 * @member {String} displayName
 */
PolicyDefinitionGroup.prototype['displayName'] = undefined;

/**
 * The name of the group.
 * @member {String} name
 */
PolicyDefinitionGroup.prototype['name'] = undefined;






export default PolicyDefinitionGroup;

