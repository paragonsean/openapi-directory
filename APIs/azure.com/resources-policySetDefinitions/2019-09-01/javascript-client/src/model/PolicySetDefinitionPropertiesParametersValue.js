/**
 * PolicyClient
 * To manage and control access to your resources, you can define customized policies and assign them at a scope.
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PolicySetDefinitionPropertiesParametersValue model module.
 * @module model/PolicySetDefinitionPropertiesParametersValue
 * @version 2019-09-01
 */
class PolicySetDefinitionPropertiesParametersValue {
    /**
     * Constructs a new <code>PolicySetDefinitionPropertiesParametersValue</code>.
     * The definition of a parameter that can be provided to the policy.
     * @alias module:model/PolicySetDefinitionPropertiesParametersValue
     */
    constructor() { 
        
        PolicySetDefinitionPropertiesParametersValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PolicySetDefinitionPropertiesParametersValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicySetDefinitionPropertiesParametersValue} obj Optional instance to populate.
     * @return {module:model/PolicySetDefinitionPropertiesParametersValue} The populated <code>PolicySetDefinitionPropertiesParametersValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicySetDefinitionPropertiesParametersValue();

            if (data.hasOwnProperty('allowedValues')) {
                obj['allowedValues'] = ApiClient.convertToType(data['allowedValues'], [Object]);
            }
            if (data.hasOwnProperty('defaultValue')) {
                obj['defaultValue'] = ApiClient.convertToType(data['defaultValue'], Object);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': Object});
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicySetDefinitionPropertiesParametersValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicySetDefinitionPropertiesParametersValue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['allowedValues'])) {
            throw new Error("Expected the field `allowedValues` to be an array in the JSON data but got " + data['allowedValues']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The allowed values for the parameter.
 * @member {Array.<Object>} allowedValues
 */
PolicySetDefinitionPropertiesParametersValue.prototype['allowedValues'] = undefined;

/**
 * The default value for the parameter if no value is provided.
 * @member {Object} defaultValue
 */
PolicySetDefinitionPropertiesParametersValue.prototype['defaultValue'] = undefined;

/**
 * General metadata for the parameter.
 * @member {Object.<String, Object>} metadata
 */
PolicySetDefinitionPropertiesParametersValue.prototype['metadata'] = undefined;

/**
 * The data type of the parameter.
 * @member {module:model/PolicySetDefinitionPropertiesParametersValue.TypeEnum} type
 */
PolicySetDefinitionPropertiesParametersValue.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
PolicySetDefinitionPropertiesParametersValue['TypeEnum'] = {

    /**
     * value: "String"
     * @const
     */
    "String": "String",

    /**
     * value: "Array"
     * @const
     */
    "Array": "Array",

    /**
     * value: "Object"
     * @const
     */
    "Object": "Object",

    /**
     * value: "Boolean"
     * @const
     */
    "Boolean": "Boolean",

    /**
     * value: "Integer"
     * @const
     */
    "Integer": "Integer",

    /**
     * value: "Float"
     * @const
     */
    "Float": "Float",

    /**
     * value: "DateTime"
     * @const
     */
    "DateTime": "DateTime"
};



export default PolicySetDefinitionPropertiesParametersValue;

