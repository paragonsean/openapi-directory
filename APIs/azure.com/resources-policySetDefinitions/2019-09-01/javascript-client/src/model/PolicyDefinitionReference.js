/**
 * PolicyClient
 * To manage and control access to your resources, you can define customized policies and assign them at a scope.
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PolicyDefinitionReferenceParametersValue from './PolicyDefinitionReferenceParametersValue';

/**
 * The PolicyDefinitionReference model module.
 * @module model/PolicyDefinitionReference
 * @version 2019-09-01
 */
class PolicyDefinitionReference {
    /**
     * Constructs a new <code>PolicyDefinitionReference</code>.
     * The policy definition reference.
     * @alias module:model/PolicyDefinitionReference
     * @param policyDefinitionId {String} The ID of the policy definition or policy set definition.
     */
    constructor(policyDefinitionId) { 
        
        PolicyDefinitionReference.initialize(this, policyDefinitionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, policyDefinitionId) { 
        obj['policyDefinitionId'] = policyDefinitionId;
    }

    /**
     * Constructs a <code>PolicyDefinitionReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicyDefinitionReference} obj Optional instance to populate.
     * @return {module:model/PolicyDefinitionReference} The populated <code>PolicyDefinitionReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicyDefinitionReference();

            if (data.hasOwnProperty('groupNames')) {
                obj['groupNames'] = ApiClient.convertToType(data['groupNames'], ['String']);
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], {'String': PolicyDefinitionReferenceParametersValue});
            }
            if (data.hasOwnProperty('policyDefinitionId')) {
                obj['policyDefinitionId'] = ApiClient.convertToType(data['policyDefinitionId'], 'String');
            }
            if (data.hasOwnProperty('policyDefinitionReferenceId')) {
                obj['policyDefinitionReferenceId'] = ApiClient.convertToType(data['policyDefinitionReferenceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicyDefinitionReference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicyDefinitionReference</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PolicyDefinitionReference.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['groupNames'])) {
            throw new Error("Expected the field `groupNames` to be an array in the JSON data but got " + data['groupNames']);
        }
        // ensure the json data is a string
        if (data['policyDefinitionId'] && !(typeof data['policyDefinitionId'] === 'string' || data['policyDefinitionId'] instanceof String)) {
            throw new Error("Expected the field `policyDefinitionId` to be a primitive type in the JSON string but got " + data['policyDefinitionId']);
        }
        // ensure the json data is a string
        if (data['policyDefinitionReferenceId'] && !(typeof data['policyDefinitionReferenceId'] === 'string' || data['policyDefinitionReferenceId'] instanceof String)) {
            throw new Error("Expected the field `policyDefinitionReferenceId` to be a primitive type in the JSON string but got " + data['policyDefinitionReferenceId']);
        }

        return true;
    }


}

PolicyDefinitionReference.RequiredProperties = ["policyDefinitionId"];

/**
 * The name of the groups that this policy definition reference belongs to.
 * @member {Array.<String>} groupNames
 */
PolicyDefinitionReference.prototype['groupNames'] = undefined;

/**
 * The parameter values for the policy rule. The keys are the parameter names.
 * @member {Object.<String, module:model/PolicyDefinitionReferenceParametersValue>} parameters
 */
PolicyDefinitionReference.prototype['parameters'] = undefined;

/**
 * The ID of the policy definition or policy set definition.
 * @member {String} policyDefinitionId
 */
PolicyDefinitionReference.prototype['policyDefinitionId'] = undefined;

/**
 * A unique id (within the policy set definition) for this policy definition reference.
 * @member {String} policyDefinitionReferenceId
 */
PolicyDefinitionReference.prototype['policyDefinitionReferenceId'] = undefined;






export default PolicyDefinitionReference;

