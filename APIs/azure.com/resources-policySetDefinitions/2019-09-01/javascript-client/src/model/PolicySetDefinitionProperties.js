/**
 * PolicyClient
 * To manage and control access to your resources, you can define customized policies and assign them at a scope.
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PolicyDefinitionGroup from './PolicyDefinitionGroup';
import PolicyDefinitionReference from './PolicyDefinitionReference';
import PolicySetDefinitionPropertiesParametersValue from './PolicySetDefinitionPropertiesParametersValue';

/**
 * The PolicySetDefinitionProperties model module.
 * @module model/PolicySetDefinitionProperties
 * @version 2019-09-01
 */
class PolicySetDefinitionProperties {
    /**
     * Constructs a new <code>PolicySetDefinitionProperties</code>.
     * The policy set definition properties.
     * @alias module:model/PolicySetDefinitionProperties
     * @param policyDefinitions {Array.<module:model/PolicyDefinitionReference>} An array of policy definition references.
     */
    constructor(policyDefinitions) { 
        
        PolicySetDefinitionProperties.initialize(this, policyDefinitions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, policyDefinitions) { 
        obj['policyDefinitions'] = policyDefinitions;
    }

    /**
     * Constructs a <code>PolicySetDefinitionProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicySetDefinitionProperties} obj Optional instance to populate.
     * @return {module:model/PolicySetDefinitionProperties} The populated <code>PolicySetDefinitionProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicySetDefinitionProperties();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], {'String': PolicySetDefinitionPropertiesParametersValue});
            }
            if (data.hasOwnProperty('policyDefinitionGroups')) {
                obj['policyDefinitionGroups'] = ApiClient.convertToType(data['policyDefinitionGroups'], [PolicyDefinitionGroup]);
            }
            if (data.hasOwnProperty('policyDefinitions')) {
                obj['policyDefinitions'] = ApiClient.convertToType(data['policyDefinitions'], [PolicyDefinitionReference]);
            }
            if (data.hasOwnProperty('policyType')) {
                obj['policyType'] = ApiClient.convertToType(data['policyType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicySetDefinitionProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicySetDefinitionProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PolicySetDefinitionProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        if (data['policyDefinitionGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['policyDefinitionGroups'])) {
                throw new Error("Expected the field `policyDefinitionGroups` to be an array in the JSON data but got " + data['policyDefinitionGroups']);
            }
            // validate the optional field `policyDefinitionGroups` (array)
            for (const item of data['policyDefinitionGroups']) {
                PolicyDefinitionGroup.validateJSON(item);
            };
        }
        if (data['policyDefinitions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['policyDefinitions'])) {
                throw new Error("Expected the field `policyDefinitions` to be an array in the JSON data but got " + data['policyDefinitions']);
            }
            // validate the optional field `policyDefinitions` (array)
            for (const item of data['policyDefinitions']) {
                PolicyDefinitionReference.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['policyType'] && !(typeof data['policyType'] === 'string' || data['policyType'] instanceof String)) {
            throw new Error("Expected the field `policyType` to be a primitive type in the JSON string but got " + data['policyType']);
        }

        return true;
    }


}

PolicySetDefinitionProperties.RequiredProperties = ["policyDefinitions"];

/**
 * The policy set definition description.
 * @member {String} description
 */
PolicySetDefinitionProperties.prototype['description'] = undefined;

/**
 * The display name of the policy set definition.
 * @member {String} displayName
 */
PolicySetDefinitionProperties.prototype['displayName'] = undefined;

/**
 * The policy set definition metadata.  Metadata is an open ended object and is typically a collection of key value pairs.
 * @member {Object} metadata
 */
PolicySetDefinitionProperties.prototype['metadata'] = undefined;

/**
 * The parameter definitions for parameters used in the policy. The keys are the parameter names.
 * @member {Object.<String, module:model/PolicySetDefinitionPropertiesParametersValue>} parameters
 */
PolicySetDefinitionProperties.prototype['parameters'] = undefined;

/**
 * The metadata describing groups of policy definition references within the policy set definition.
 * @member {Array.<module:model/PolicyDefinitionGroup>} policyDefinitionGroups
 */
PolicySetDefinitionProperties.prototype['policyDefinitionGroups'] = undefined;

/**
 * An array of policy definition references.
 * @member {Array.<module:model/PolicyDefinitionReference>} policyDefinitions
 */
PolicySetDefinitionProperties.prototype['policyDefinitions'] = undefined;

/**
 * The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
 * @member {module:model/PolicySetDefinitionProperties.PolicyTypeEnum} policyType
 */
PolicySetDefinitionProperties.prototype['policyType'] = undefined;





/**
 * Allowed values for the <code>policyType</code> property.
 * @enum {String}
 * @readonly
 */
PolicySetDefinitionProperties['PolicyTypeEnum'] = {

    /**
     * value: "NotSpecified"
     * @const
     */
    "NotSpecified": "NotSpecified",

    /**
     * value: "BuiltIn"
     * @const
     */
    "BuiltIn": "BuiltIn",

    /**
     * value: "Custom"
     * @const
     */
    "Custom": "Custom",

    /**
     * value: "Static"
     * @const
     */
    "Static": "Static"
};



export default PolicySetDefinitionProperties;

