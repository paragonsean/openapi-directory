/**
 * PolicyClient
 * To manage and control access to your resources, you can define customized policies and assign them at a scope.
 *
 * The version of the OpenAPI document: 2019-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import PolicySetDefinition from '../model/PolicySetDefinition';
import PolicySetDefinitionListResult from '../model/PolicySetDefinitionListResult';

/**
* PolicySetDefinitions service.
* @module api/PolicySetDefinitionsApi
* @version 2019-09-01
*/
export default class PolicySetDefinitionsApi {

    /**
    * Constructs a new PolicySetDefinitionsApi. 
    * @alias module:api/PolicySetDefinitionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the policySetDefinitionsCreateOrUpdate operation.
     * @callback module:api/PolicySetDefinitionsApi~policySetDefinitionsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicySetDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a policy set definition.
     * This operation creates or updates a policy set definition in the given subscription with the given name.
     * @param {String} policySetDefinitionName The name of the policy set definition to create.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/PolicySetDefinition} parameters The policy set definition properties.
     * @param {module:api/PolicySetDefinitionsApi~policySetDefinitionsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicySetDefinition}
     */
    policySetDefinitionsCreateOrUpdate(policySetDefinitionName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'policySetDefinitionName' is set
      if (policySetDefinitionName === undefined || policySetDefinitionName === null) {
        throw new Error("Missing the required parameter 'policySetDefinitionName' when calling policySetDefinitionsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policySetDefinitionsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policySetDefinitionsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling policySetDefinitionsCreateOrUpdate");
      }

      let pathParams = {
        'policySetDefinitionName': policySetDefinitionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PolicySetDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policySetDefinitionsCreateOrUpdateAtManagementGroup operation.
     * @callback module:api/PolicySetDefinitionsApi~policySetDefinitionsCreateOrUpdateAtManagementGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicySetDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a policy set definition.
     * This operation creates or updates a policy set definition in the given management group with the given name.
     * @param {String} policySetDefinitionName The name of the policy set definition to create.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} managementGroupId The ID of the management group.
     * @param {module:model/PolicySetDefinition} parameters The policy set definition properties.
     * @param {module:api/PolicySetDefinitionsApi~policySetDefinitionsCreateOrUpdateAtManagementGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicySetDefinition}
     */
    policySetDefinitionsCreateOrUpdateAtManagementGroup(policySetDefinitionName, apiVersion, managementGroupId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'policySetDefinitionName' is set
      if (policySetDefinitionName === undefined || policySetDefinitionName === null) {
        throw new Error("Missing the required parameter 'policySetDefinitionName' when calling policySetDefinitionsCreateOrUpdateAtManagementGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policySetDefinitionsCreateOrUpdateAtManagementGroup");
      }
      // verify the required parameter 'managementGroupId' is set
      if (managementGroupId === undefined || managementGroupId === null) {
        throw new Error("Missing the required parameter 'managementGroupId' when calling policySetDefinitionsCreateOrUpdateAtManagementGroup");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling policySetDefinitionsCreateOrUpdateAtManagementGroup");
      }

      let pathParams = {
        'policySetDefinitionName': policySetDefinitionName,
        'managementGroupId': managementGroupId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PolicySetDefinition;
      return this.apiClient.callApi(
        '/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policySetDefinitionsDelete operation.
     * @callback module:api/PolicySetDefinitionsApi~policySetDefinitionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a policy set definition.
     * This operation deletes the policy set definition in the given subscription with the given name.
     * @param {String} policySetDefinitionName The name of the policy set definition to delete.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/PolicySetDefinitionsApi~policySetDefinitionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    policySetDefinitionsDelete(policySetDefinitionName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'policySetDefinitionName' is set
      if (policySetDefinitionName === undefined || policySetDefinitionName === null) {
        throw new Error("Missing the required parameter 'policySetDefinitionName' when calling policySetDefinitionsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policySetDefinitionsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policySetDefinitionsDelete");
      }

      let pathParams = {
        'policySetDefinitionName': policySetDefinitionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policySetDefinitionsDeleteAtManagementGroup operation.
     * @callback module:api/PolicySetDefinitionsApi~policySetDefinitionsDeleteAtManagementGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a policy set definition.
     * This operation deletes the policy set definition in the given management group with the given name.
     * @param {String} policySetDefinitionName The name of the policy set definition to delete.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} managementGroupId The ID of the management group.
     * @param {module:api/PolicySetDefinitionsApi~policySetDefinitionsDeleteAtManagementGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    policySetDefinitionsDeleteAtManagementGroup(policySetDefinitionName, apiVersion, managementGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'policySetDefinitionName' is set
      if (policySetDefinitionName === undefined || policySetDefinitionName === null) {
        throw new Error("Missing the required parameter 'policySetDefinitionName' when calling policySetDefinitionsDeleteAtManagementGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policySetDefinitionsDeleteAtManagementGroup");
      }
      // verify the required parameter 'managementGroupId' is set
      if (managementGroupId === undefined || managementGroupId === null) {
        throw new Error("Missing the required parameter 'managementGroupId' when calling policySetDefinitionsDeleteAtManagementGroup");
      }

      let pathParams = {
        'policySetDefinitionName': policySetDefinitionName,
        'managementGroupId': managementGroupId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policySetDefinitionsGet operation.
     * @callback module:api/PolicySetDefinitionsApi~policySetDefinitionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicySetDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a policy set definition.
     * This operation retrieves the policy set definition in the given subscription with the given name.
     * @param {String} policySetDefinitionName The name of the policy set definition to get.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/PolicySetDefinitionsApi~policySetDefinitionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicySetDefinition}
     */
    policySetDefinitionsGet(policySetDefinitionName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'policySetDefinitionName' is set
      if (policySetDefinitionName === undefined || policySetDefinitionName === null) {
        throw new Error("Missing the required parameter 'policySetDefinitionName' when calling policySetDefinitionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policySetDefinitionsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policySetDefinitionsGet");
      }

      let pathParams = {
        'policySetDefinitionName': policySetDefinitionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicySetDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policySetDefinitionsGetAtManagementGroup operation.
     * @callback module:api/PolicySetDefinitionsApi~policySetDefinitionsGetAtManagementGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicySetDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a policy set definition.
     * This operation retrieves the policy set definition in the given management group with the given name.
     * @param {String} policySetDefinitionName The name of the policy set definition to get.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} managementGroupId The ID of the management group.
     * @param {module:api/PolicySetDefinitionsApi~policySetDefinitionsGetAtManagementGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicySetDefinition}
     */
    policySetDefinitionsGetAtManagementGroup(policySetDefinitionName, apiVersion, managementGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'policySetDefinitionName' is set
      if (policySetDefinitionName === undefined || policySetDefinitionName === null) {
        throw new Error("Missing the required parameter 'policySetDefinitionName' when calling policySetDefinitionsGetAtManagementGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policySetDefinitionsGetAtManagementGroup");
      }
      // verify the required parameter 'managementGroupId' is set
      if (managementGroupId === undefined || managementGroupId === null) {
        throw new Error("Missing the required parameter 'managementGroupId' when calling policySetDefinitionsGetAtManagementGroup");
      }

      let pathParams = {
        'policySetDefinitionName': policySetDefinitionName,
        'managementGroupId': managementGroupId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicySetDefinition;
      return this.apiClient.callApi(
        '/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policySetDefinitionsGetBuiltIn operation.
     * @callback module:api/PolicySetDefinitionsApi~policySetDefinitionsGetBuiltInCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicySetDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a built in policy set definition.
     * This operation retrieves the built-in policy set definition with the given name.
     * @param {String} policySetDefinitionName The name of the policy set definition to get.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {module:api/PolicySetDefinitionsApi~policySetDefinitionsGetBuiltInCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicySetDefinition}
     */
    policySetDefinitionsGetBuiltIn(policySetDefinitionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'policySetDefinitionName' is set
      if (policySetDefinitionName === undefined || policySetDefinitionName === null) {
        throw new Error("Missing the required parameter 'policySetDefinitionName' when calling policySetDefinitionsGetBuiltIn");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policySetDefinitionsGetBuiltIn");
      }

      let pathParams = {
        'policySetDefinitionName': policySetDefinitionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicySetDefinition;
      return this.apiClient.callApi(
        '/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policySetDefinitionsList operation.
     * @callback module:api/PolicySetDefinitionsApi~policySetDefinitionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicySetDefinitionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the policy set definitions for a subscription.
     * This operation retrieves a list of all the policy set definitions in the given subscription.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/PolicySetDefinitionsApi~policySetDefinitionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicySetDefinitionListResult}
     */
    policySetDefinitionsList(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policySetDefinitionsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policySetDefinitionsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicySetDefinitionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policySetDefinitionsListBuiltIn operation.
     * @callback module:api/PolicySetDefinitionsApi~policySetDefinitionsListBuiltInCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicySetDefinitionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves built-in policy set definitions.
     * This operation retrieves a list of all the built-in policy set definitions.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {module:api/PolicySetDefinitionsApi~policySetDefinitionsListBuiltInCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicySetDefinitionListResult}
     */
    policySetDefinitionsListBuiltIn(apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policySetDefinitionsListBuiltIn");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicySetDefinitionListResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Authorization/policySetDefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policySetDefinitionsListByManagementGroup operation.
     * @callback module:api/PolicySetDefinitionsApi~policySetDefinitionsListByManagementGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicySetDefinitionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all policy set definitions in management group.
     * This operation retrieves a list of all the a policy set definition in the given management group.
     * @param {String} apiVersion The API version to use for the operation.
     * @param {String} managementGroupId The ID of the management group.
     * @param {module:api/PolicySetDefinitionsApi~policySetDefinitionsListByManagementGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicySetDefinitionListResult}
     */
    policySetDefinitionsListByManagementGroup(apiVersion, managementGroupId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policySetDefinitionsListByManagementGroup");
      }
      // verify the required parameter 'managementGroupId' is set
      if (managementGroupId === undefined || managementGroupId === null) {
        throw new Error("Missing the required parameter 'managementGroupId' when calling policySetDefinitionsListByManagementGroup");
      }

      let pathParams = {
        'managementGroupId': managementGroupId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicySetDefinitionListResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
