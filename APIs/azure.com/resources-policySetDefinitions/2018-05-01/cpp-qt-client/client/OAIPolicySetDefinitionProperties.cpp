/**
 * PolicyClient
 * To manage and control access to your resources, you can define customized policies and assign them at a scope.
 *
 * The version of the OpenAPI document: 2018-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicySetDefinitionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicySetDefinitionProperties::OAIPolicySetDefinitionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicySetDefinitionProperties::OAIPolicySetDefinitionProperties() {
    this->initializeModel();
}

OAIPolicySetDefinitionProperties::~OAIPolicySetDefinitionProperties() {}

void OAIPolicySetDefinitionProperties::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_policy_definitions_isSet = false;
    m_policy_definitions_isValid = false;

    m_policy_type_isSet = false;
    m_policy_type_isValid = false;
}

void OAIPolicySetDefinitionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicySetDefinitionProperties::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_policy_definitions_isValid = ::OpenAPI::fromJsonValue(m_policy_definitions, json[QString("policyDefinitions")]);
    m_policy_definitions_isSet = !json[QString("policyDefinitions")].isNull() && m_policy_definitions_isValid;

    m_policy_type_isValid = ::OpenAPI::fromJsonValue(m_policy_type, json[QString("policyType")]);
    m_policy_type_isSet = !json[QString("policyType")].isNull() && m_policy_type_isValid;
}

QString OAIPolicySetDefinitionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicySetDefinitionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_parameters_isSet) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_policy_definitions.size() > 0) {
        obj.insert(QString("policyDefinitions"), ::OpenAPI::toJsonValue(m_policy_definitions));
    }
    if (m_policy_type_isSet) {
        obj.insert(QString("policyType"), ::OpenAPI::toJsonValue(m_policy_type));
    }
    return obj;
}

QString OAIPolicySetDefinitionProperties::getDescription() const {
    return m_description;
}
void OAIPolicySetDefinitionProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPolicySetDefinitionProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPolicySetDefinitionProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPolicySetDefinitionProperties::getDisplayName() const {
    return m_display_name;
}
void OAIPolicySetDefinitionProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPolicySetDefinitionProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPolicySetDefinitionProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIObject OAIPolicySetDefinitionProperties::getMetadata() const {
    return m_metadata;
}
void OAIPolicySetDefinitionProperties::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPolicySetDefinitionProperties::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPolicySetDefinitionProperties::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIObject OAIPolicySetDefinitionProperties::getParameters() const {
    return m_parameters;
}
void OAIPolicySetDefinitionProperties::setParameters(const OAIObject &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIPolicySetDefinitionProperties::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIPolicySetDefinitionProperties::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QList<OAIPolicyDefinitionReference> OAIPolicySetDefinitionProperties::getPolicyDefinitions() const {
    return m_policy_definitions;
}
void OAIPolicySetDefinitionProperties::setPolicyDefinitions(const QList<OAIPolicyDefinitionReference> &policy_definitions) {
    m_policy_definitions = policy_definitions;
    m_policy_definitions_isSet = true;
}

bool OAIPolicySetDefinitionProperties::is_policy_definitions_Set() const{
    return m_policy_definitions_isSet;
}

bool OAIPolicySetDefinitionProperties::is_policy_definitions_Valid() const{
    return m_policy_definitions_isValid;
}

QString OAIPolicySetDefinitionProperties::getPolicyType() const {
    return m_policy_type;
}
void OAIPolicySetDefinitionProperties::setPolicyType(const QString &policy_type) {
    m_policy_type = policy_type;
    m_policy_type_isSet = true;
}

bool OAIPolicySetDefinitionProperties::is_policy_type_Set() const{
    return m_policy_type_isSet;
}

bool OAIPolicySetDefinitionProperties::is_policy_type_Valid() const{
    return m_policy_type_isValid;
}

bool OAIPolicySetDefinitionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_definitions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicySetDefinitionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_policy_definitions_isValid && true;
}

} // namespace OpenAPI
