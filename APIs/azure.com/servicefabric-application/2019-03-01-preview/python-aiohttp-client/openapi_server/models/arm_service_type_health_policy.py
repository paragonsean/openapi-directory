# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ArmServiceTypeHealthPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_percent_unhealthy_partitions_per_service: int=None, max_percent_unhealthy_replicas_per_partition: int=None, max_percent_unhealthy_services: int=None):
        """ArmServiceTypeHealthPolicy - a model defined in OpenAPI

        :param max_percent_unhealthy_partitions_per_service: The max_percent_unhealthy_partitions_per_service of this ArmServiceTypeHealthPolicy.
        :param max_percent_unhealthy_replicas_per_partition: The max_percent_unhealthy_replicas_per_partition of this ArmServiceTypeHealthPolicy.
        :param max_percent_unhealthy_services: The max_percent_unhealthy_services of this ArmServiceTypeHealthPolicy.
        """
        self.openapi_types = {
            'max_percent_unhealthy_partitions_per_service': int,
            'max_percent_unhealthy_replicas_per_partition': int,
            'max_percent_unhealthy_services': int
        }

        self.attribute_map = {
            'max_percent_unhealthy_partitions_per_service': 'maxPercentUnhealthyPartitionsPerService',
            'max_percent_unhealthy_replicas_per_partition': 'maxPercentUnhealthyReplicasPerPartition',
            'max_percent_unhealthy_services': 'maxPercentUnhealthyServices'
        }

        self._max_percent_unhealthy_partitions_per_service = max_percent_unhealthy_partitions_per_service
        self._max_percent_unhealthy_replicas_per_partition = max_percent_unhealthy_replicas_per_partition
        self._max_percent_unhealthy_services = max_percent_unhealthy_services

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArmServiceTypeHealthPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArmServiceTypeHealthPolicy of this ArmServiceTypeHealthPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_percent_unhealthy_partitions_per_service(self):
        """Gets the max_percent_unhealthy_partitions_per_service of this ArmServiceTypeHealthPolicy.

        The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error. 

        :return: The max_percent_unhealthy_partitions_per_service of this ArmServiceTypeHealthPolicy.
        :rtype: int
        """
        return self._max_percent_unhealthy_partitions_per_service

    @max_percent_unhealthy_partitions_per_service.setter
    def max_percent_unhealthy_partitions_per_service(self, max_percent_unhealthy_partitions_per_service):
        """Sets the max_percent_unhealthy_partitions_per_service of this ArmServiceTypeHealthPolicy.

        The maximum percentage of partitions per service allowed to be unhealthy before your application is considered in error. 

        :param max_percent_unhealthy_partitions_per_service: The max_percent_unhealthy_partitions_per_service of this ArmServiceTypeHealthPolicy.
        :type max_percent_unhealthy_partitions_per_service: int
        """
        if max_percent_unhealthy_partitions_per_service is not None and max_percent_unhealthy_partitions_per_service > 100:
            raise ValueError("Invalid value for `max_percent_unhealthy_partitions_per_service`, must be a value less than or equal to `100`")
        if max_percent_unhealthy_partitions_per_service is not None and max_percent_unhealthy_partitions_per_service < 0:
            raise ValueError("Invalid value for `max_percent_unhealthy_partitions_per_service`, must be a value greater than or equal to `0`")

        self._max_percent_unhealthy_partitions_per_service = max_percent_unhealthy_partitions_per_service

    @property
    def max_percent_unhealthy_replicas_per_partition(self):
        """Gets the max_percent_unhealthy_replicas_per_partition of this ArmServiceTypeHealthPolicy.

        The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error. 

        :return: The max_percent_unhealthy_replicas_per_partition of this ArmServiceTypeHealthPolicy.
        :rtype: int
        """
        return self._max_percent_unhealthy_replicas_per_partition

    @max_percent_unhealthy_replicas_per_partition.setter
    def max_percent_unhealthy_replicas_per_partition(self, max_percent_unhealthy_replicas_per_partition):
        """Sets the max_percent_unhealthy_replicas_per_partition of this ArmServiceTypeHealthPolicy.

        The maximum percentage of replicas per partition allowed to be unhealthy before your application is considered in error. 

        :param max_percent_unhealthy_replicas_per_partition: The max_percent_unhealthy_replicas_per_partition of this ArmServiceTypeHealthPolicy.
        :type max_percent_unhealthy_replicas_per_partition: int
        """
        if max_percent_unhealthy_replicas_per_partition is not None and max_percent_unhealthy_replicas_per_partition > 100:
            raise ValueError("Invalid value for `max_percent_unhealthy_replicas_per_partition`, must be a value less than or equal to `100`")
        if max_percent_unhealthy_replicas_per_partition is not None and max_percent_unhealthy_replicas_per_partition < 0:
            raise ValueError("Invalid value for `max_percent_unhealthy_replicas_per_partition`, must be a value greater than or equal to `0`")

        self._max_percent_unhealthy_replicas_per_partition = max_percent_unhealthy_replicas_per_partition

    @property
    def max_percent_unhealthy_services(self):
        """Gets the max_percent_unhealthy_services of this ArmServiceTypeHealthPolicy.

        The maximum percentage of services allowed to be unhealthy before your application is considered in error. 

        :return: The max_percent_unhealthy_services of this ArmServiceTypeHealthPolicy.
        :rtype: int
        """
        return self._max_percent_unhealthy_services

    @max_percent_unhealthy_services.setter
    def max_percent_unhealthy_services(self, max_percent_unhealthy_services):
        """Sets the max_percent_unhealthy_services of this ArmServiceTypeHealthPolicy.

        The maximum percentage of services allowed to be unhealthy before your application is considered in error. 

        :param max_percent_unhealthy_services: The max_percent_unhealthy_services of this ArmServiceTypeHealthPolicy.
        :type max_percent_unhealthy_services: int
        """
        if max_percent_unhealthy_services is not None and max_percent_unhealthy_services > 100:
            raise ValueError("Invalid value for `max_percent_unhealthy_services`, must be a value less than or equal to `100`")
        if max_percent_unhealthy_services is not None and max_percent_unhealthy_services < 0:
            raise ValueError("Invalid value for `max_percent_unhealthy_services`, must be a value greater than or equal to `0`")

        self._max_percent_unhealthy_services = max_percent_unhealthy_services
