/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApplicationTypeVersionApi_H
#define OAI_OAIApplicationTypeVersionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplicationTypeVersionResource.h"
#include "OAIApplicationTypeVersionResourceList.h"
#include "OAIErrorModel.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApplicationTypeVersionApi : public QObject {
    Q_OBJECT

public:
    OAIApplicationTypeVersionApi(const int timeOut = 0);
    ~OAIApplicationTypeVersionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  application_type_name QString [required]
    * @param[in]  version QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIApplicationTypeVersionResource [required]
    */
    virtual void applicationTypeVersionsCreate(const QString &subscription_id, const QString &resource_group_name, const QString &cluster_name, const QString &application_type_name, const QString &version, const QString &api_version, const OAIApplicationTypeVersionResource &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  application_type_name QString [required]
    * @param[in]  version QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void applicationTypeVersionsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &cluster_name, const QString &application_type_name, const QString &version, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  application_type_name QString [required]
    * @param[in]  version QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void applicationTypeVersionsGet(const QString &subscription_id, const QString &resource_group_name, const QString &cluster_name, const QString &application_type_name, const QString &version, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  cluster_name QString [required]
    * @param[in]  application_type_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void applicationTypeVersionsList(const QString &subscription_id, const QString &resource_group_name, const QString &cluster_name, const QString &application_type_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void applicationTypeVersionsCreateCallback(OAIHttpRequestWorker *worker);
    void applicationTypeVersionsDeleteCallback(OAIHttpRequestWorker *worker);
    void applicationTypeVersionsGetCallback(OAIHttpRequestWorker *worker);
    void applicationTypeVersionsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void applicationTypeVersionsCreateSignal(OAIApplicationTypeVersionResource summary);
    void applicationTypeVersionsDeleteSignal();
    void applicationTypeVersionsGetSignal(OAIApplicationTypeVersionResource summary);
    void applicationTypeVersionsListSignal(OAIApplicationTypeVersionResourceList summary);


    void applicationTypeVersionsCreateSignalFull(OAIHttpRequestWorker *worker, OAIApplicationTypeVersionResource summary);
    void applicationTypeVersionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void applicationTypeVersionsGetSignalFull(OAIHttpRequestWorker *worker, OAIApplicationTypeVersionResource summary);
    void applicationTypeVersionsListSignalFull(OAIHttpRequestWorker *worker, OAIApplicationTypeVersionResourceList summary);

    Q_DECL_DEPRECATED_X("Use applicationTypeVersionsCreateSignalError() instead")
    void applicationTypeVersionsCreateSignalE(OAIApplicationTypeVersionResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationTypeVersionsCreateSignalError(OAIApplicationTypeVersionResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationTypeVersionsDeleteSignalError() instead")
    void applicationTypeVersionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void applicationTypeVersionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationTypeVersionsGetSignalError() instead")
    void applicationTypeVersionsGetSignalE(OAIApplicationTypeVersionResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationTypeVersionsGetSignalError(OAIApplicationTypeVersionResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationTypeVersionsListSignalError() instead")
    void applicationTypeVersionsListSignalE(OAIApplicationTypeVersionResourceList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationTypeVersionsListSignalError(OAIApplicationTypeVersionResourceList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use applicationTypeVersionsCreateSignalErrorFull() instead")
    void applicationTypeVersionsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationTypeVersionsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationTypeVersionsDeleteSignalErrorFull() instead")
    void applicationTypeVersionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationTypeVersionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationTypeVersionsGetSignalErrorFull() instead")
    void applicationTypeVersionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationTypeVersionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationTypeVersionsListSignalErrorFull() instead")
    void applicationTypeVersionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationTypeVersionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
