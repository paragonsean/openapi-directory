/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArmRollingUpgradeMonitoringPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArmRollingUpgradeMonitoringPolicy::OAIArmRollingUpgradeMonitoringPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArmRollingUpgradeMonitoringPolicy::OAIArmRollingUpgradeMonitoringPolicy() {
    this->initializeModel();
}

OAIArmRollingUpgradeMonitoringPolicy::~OAIArmRollingUpgradeMonitoringPolicy() {}

void OAIArmRollingUpgradeMonitoringPolicy::initializeModel() {

    m_failure_action_isSet = false;
    m_failure_action_isValid = false;

    m_health_check_retry_timeout_isSet = false;
    m_health_check_retry_timeout_isValid = false;

    m_health_check_stable_duration_isSet = false;
    m_health_check_stable_duration_isValid = false;

    m_health_check_wait_duration_isSet = false;
    m_health_check_wait_duration_isValid = false;

    m_upgrade_domain_timeout_isSet = false;
    m_upgrade_domain_timeout_isValid = false;

    m_upgrade_timeout_isSet = false;
    m_upgrade_timeout_isValid = false;
}

void OAIArmRollingUpgradeMonitoringPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArmRollingUpgradeMonitoringPolicy::fromJsonObject(QJsonObject json) {

    m_failure_action_isValid = ::OpenAPI::fromJsonValue(m_failure_action, json[QString("failureAction")]);
    m_failure_action_isSet = !json[QString("failureAction")].isNull() && m_failure_action_isValid;

    m_health_check_retry_timeout_isValid = ::OpenAPI::fromJsonValue(m_health_check_retry_timeout, json[QString("healthCheckRetryTimeout")]);
    m_health_check_retry_timeout_isSet = !json[QString("healthCheckRetryTimeout")].isNull() && m_health_check_retry_timeout_isValid;

    m_health_check_stable_duration_isValid = ::OpenAPI::fromJsonValue(m_health_check_stable_duration, json[QString("healthCheckStableDuration")]);
    m_health_check_stable_duration_isSet = !json[QString("healthCheckStableDuration")].isNull() && m_health_check_stable_duration_isValid;

    m_health_check_wait_duration_isValid = ::OpenAPI::fromJsonValue(m_health_check_wait_duration, json[QString("healthCheckWaitDuration")]);
    m_health_check_wait_duration_isSet = !json[QString("healthCheckWaitDuration")].isNull() && m_health_check_wait_duration_isValid;

    m_upgrade_domain_timeout_isValid = ::OpenAPI::fromJsonValue(m_upgrade_domain_timeout, json[QString("upgradeDomainTimeout")]);
    m_upgrade_domain_timeout_isSet = !json[QString("upgradeDomainTimeout")].isNull() && m_upgrade_domain_timeout_isValid;

    m_upgrade_timeout_isValid = ::OpenAPI::fromJsonValue(m_upgrade_timeout, json[QString("upgradeTimeout")]);
    m_upgrade_timeout_isSet = !json[QString("upgradeTimeout")].isNull() && m_upgrade_timeout_isValid;
}

QString OAIArmRollingUpgradeMonitoringPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArmRollingUpgradeMonitoringPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_failure_action_isSet) {
        obj.insert(QString("failureAction"), ::OpenAPI::toJsonValue(m_failure_action));
    }
    if (m_health_check_retry_timeout_isSet) {
        obj.insert(QString("healthCheckRetryTimeout"), ::OpenAPI::toJsonValue(m_health_check_retry_timeout));
    }
    if (m_health_check_stable_duration_isSet) {
        obj.insert(QString("healthCheckStableDuration"), ::OpenAPI::toJsonValue(m_health_check_stable_duration));
    }
    if (m_health_check_wait_duration_isSet) {
        obj.insert(QString("healthCheckWaitDuration"), ::OpenAPI::toJsonValue(m_health_check_wait_duration));
    }
    if (m_upgrade_domain_timeout_isSet) {
        obj.insert(QString("upgradeDomainTimeout"), ::OpenAPI::toJsonValue(m_upgrade_domain_timeout));
    }
    if (m_upgrade_timeout_isSet) {
        obj.insert(QString("upgradeTimeout"), ::OpenAPI::toJsonValue(m_upgrade_timeout));
    }
    return obj;
}

QString OAIArmRollingUpgradeMonitoringPolicy::getFailureAction() const {
    return m_failure_action;
}
void OAIArmRollingUpgradeMonitoringPolicy::setFailureAction(const QString &failure_action) {
    m_failure_action = failure_action;
    m_failure_action_isSet = true;
}

bool OAIArmRollingUpgradeMonitoringPolicy::is_failure_action_Set() const{
    return m_failure_action_isSet;
}

bool OAIArmRollingUpgradeMonitoringPolicy::is_failure_action_Valid() const{
    return m_failure_action_isValid;
}

QString OAIArmRollingUpgradeMonitoringPolicy::getHealthCheckRetryTimeout() const {
    return m_health_check_retry_timeout;
}
void OAIArmRollingUpgradeMonitoringPolicy::setHealthCheckRetryTimeout(const QString &health_check_retry_timeout) {
    m_health_check_retry_timeout = health_check_retry_timeout;
    m_health_check_retry_timeout_isSet = true;
}

bool OAIArmRollingUpgradeMonitoringPolicy::is_health_check_retry_timeout_Set() const{
    return m_health_check_retry_timeout_isSet;
}

bool OAIArmRollingUpgradeMonitoringPolicy::is_health_check_retry_timeout_Valid() const{
    return m_health_check_retry_timeout_isValid;
}

QString OAIArmRollingUpgradeMonitoringPolicy::getHealthCheckStableDuration() const {
    return m_health_check_stable_duration;
}
void OAIArmRollingUpgradeMonitoringPolicy::setHealthCheckStableDuration(const QString &health_check_stable_duration) {
    m_health_check_stable_duration = health_check_stable_duration;
    m_health_check_stable_duration_isSet = true;
}

bool OAIArmRollingUpgradeMonitoringPolicy::is_health_check_stable_duration_Set() const{
    return m_health_check_stable_duration_isSet;
}

bool OAIArmRollingUpgradeMonitoringPolicy::is_health_check_stable_duration_Valid() const{
    return m_health_check_stable_duration_isValid;
}

QString OAIArmRollingUpgradeMonitoringPolicy::getHealthCheckWaitDuration() const {
    return m_health_check_wait_duration;
}
void OAIArmRollingUpgradeMonitoringPolicy::setHealthCheckWaitDuration(const QString &health_check_wait_duration) {
    m_health_check_wait_duration = health_check_wait_duration;
    m_health_check_wait_duration_isSet = true;
}

bool OAIArmRollingUpgradeMonitoringPolicy::is_health_check_wait_duration_Set() const{
    return m_health_check_wait_duration_isSet;
}

bool OAIArmRollingUpgradeMonitoringPolicy::is_health_check_wait_duration_Valid() const{
    return m_health_check_wait_duration_isValid;
}

QString OAIArmRollingUpgradeMonitoringPolicy::getUpgradeDomainTimeout() const {
    return m_upgrade_domain_timeout;
}
void OAIArmRollingUpgradeMonitoringPolicy::setUpgradeDomainTimeout(const QString &upgrade_domain_timeout) {
    m_upgrade_domain_timeout = upgrade_domain_timeout;
    m_upgrade_domain_timeout_isSet = true;
}

bool OAIArmRollingUpgradeMonitoringPolicy::is_upgrade_domain_timeout_Set() const{
    return m_upgrade_domain_timeout_isSet;
}

bool OAIArmRollingUpgradeMonitoringPolicy::is_upgrade_domain_timeout_Valid() const{
    return m_upgrade_domain_timeout_isValid;
}

QString OAIArmRollingUpgradeMonitoringPolicy::getUpgradeTimeout() const {
    return m_upgrade_timeout;
}
void OAIArmRollingUpgradeMonitoringPolicy::setUpgradeTimeout(const QString &upgrade_timeout) {
    m_upgrade_timeout = upgrade_timeout;
    m_upgrade_timeout_isSet = true;
}

bool OAIArmRollingUpgradeMonitoringPolicy::is_upgrade_timeout_Set() const{
    return m_upgrade_timeout_isSet;
}

bool OAIArmRollingUpgradeMonitoringPolicy::is_upgrade_timeout_Valid() const{
    return m_upgrade_timeout_isValid;
}

bool OAIArmRollingUpgradeMonitoringPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failure_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_retry_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_stable_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_health_check_wait_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_domain_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArmRollingUpgradeMonitoringPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
