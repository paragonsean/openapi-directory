# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_metric_description import ApplicationMetricDescription
from openapi_server.models.application_upgrade_policy import ApplicationUpgradePolicy
from openapi_server.models.application_user_assigned_identity import ApplicationUserAssignedIdentity
from openapi_server import util


class ApplicationResourceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, provisioning_state: str=None, type_name: str=None, managed_identities: List[ApplicationUserAssignedIdentity]=None, maximum_nodes: int=0, metrics: List[ApplicationMetricDescription]=None, minimum_nodes: int=None, parameters: Dict[str, str]=None, remove_application_capacity: bool=None, type_version: str=None, upgrade_policy: ApplicationUpgradePolicy=None):
        """ApplicationResourceProperties - a model defined in OpenAPI

        :param provisioning_state: The provisioning_state of this ApplicationResourceProperties.
        :param type_name: The type_name of this ApplicationResourceProperties.
        :param managed_identities: The managed_identities of this ApplicationResourceProperties.
        :param maximum_nodes: The maximum_nodes of this ApplicationResourceProperties.
        :param metrics: The metrics of this ApplicationResourceProperties.
        :param minimum_nodes: The minimum_nodes of this ApplicationResourceProperties.
        :param parameters: The parameters of this ApplicationResourceProperties.
        :param remove_application_capacity: The remove_application_capacity of this ApplicationResourceProperties.
        :param type_version: The type_version of this ApplicationResourceProperties.
        :param upgrade_policy: The upgrade_policy of this ApplicationResourceProperties.
        """
        self.openapi_types = {
            'provisioning_state': str,
            'type_name': str,
            'managed_identities': List[ApplicationUserAssignedIdentity],
            'maximum_nodes': int,
            'metrics': List[ApplicationMetricDescription],
            'minimum_nodes': int,
            'parameters': Dict[str, str],
            'remove_application_capacity': bool,
            'type_version': str,
            'upgrade_policy': ApplicationUpgradePolicy
        }

        self.attribute_map = {
            'provisioning_state': 'provisioningState',
            'type_name': 'typeName',
            'managed_identities': 'managedIdentities',
            'maximum_nodes': 'maximumNodes',
            'metrics': 'metrics',
            'minimum_nodes': 'minimumNodes',
            'parameters': 'parameters',
            'remove_application_capacity': 'removeApplicationCapacity',
            'type_version': 'typeVersion',
            'upgrade_policy': 'upgradePolicy'
        }

        self._provisioning_state = provisioning_state
        self._type_name = type_name
        self._managed_identities = managed_identities
        self._maximum_nodes = maximum_nodes
        self._metrics = metrics
        self._minimum_nodes = minimum_nodes
        self._parameters = parameters
        self._remove_application_capacity = remove_application_capacity
        self._type_version = type_version
        self._upgrade_policy = upgrade_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationResourceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationResourceProperties of this ApplicationResourceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ApplicationResourceProperties.

        The current deployment or provisioning state, which only appears in the response

        :return: The provisioning_state of this ApplicationResourceProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ApplicationResourceProperties.

        The current deployment or provisioning state, which only appears in the response

        :param provisioning_state: The provisioning_state of this ApplicationResourceProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def type_name(self):
        """Gets the type_name of this ApplicationResourceProperties.

        The application type name as defined in the application manifest.

        :return: The type_name of this ApplicationResourceProperties.
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this ApplicationResourceProperties.

        The application type name as defined in the application manifest.

        :param type_name: The type_name of this ApplicationResourceProperties.
        :type type_name: str
        """

        self._type_name = type_name

    @property
    def managed_identities(self):
        """Gets the managed_identities of this ApplicationResourceProperties.

        List of user assigned identities for the application, each mapped to a friendly name.

        :return: The managed_identities of this ApplicationResourceProperties.
        :rtype: List[ApplicationUserAssignedIdentity]
        """
        return self._managed_identities

    @managed_identities.setter
    def managed_identities(self, managed_identities):
        """Sets the managed_identities of this ApplicationResourceProperties.

        List of user assigned identities for the application, each mapped to a friendly name.

        :param managed_identities: The managed_identities of this ApplicationResourceProperties.
        :type managed_identities: List[ApplicationUserAssignedIdentity]
        """

        self._managed_identities = managed_identities

    @property
    def maximum_nodes(self):
        """Gets the maximum_nodes of this ApplicationResourceProperties.

        The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.

        :return: The maximum_nodes of this ApplicationResourceProperties.
        :rtype: int
        """
        return self._maximum_nodes

    @maximum_nodes.setter
    def maximum_nodes(self, maximum_nodes):
        """Sets the maximum_nodes of this ApplicationResourceProperties.

        The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.

        :param maximum_nodes: The maximum_nodes of this ApplicationResourceProperties.
        :type maximum_nodes: int
        """
        if maximum_nodes is not None and maximum_nodes < 0:
            raise ValueError("Invalid value for `maximum_nodes`, must be a value greater than or equal to `0`")

        self._maximum_nodes = maximum_nodes

    @property
    def metrics(self):
        """Gets the metrics of this ApplicationResourceProperties.

        List of application capacity metric description.

        :return: The metrics of this ApplicationResourceProperties.
        :rtype: List[ApplicationMetricDescription]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this ApplicationResourceProperties.

        List of application capacity metric description.

        :param metrics: The metrics of this ApplicationResourceProperties.
        :type metrics: List[ApplicationMetricDescription]
        """

        self._metrics = metrics

    @property
    def minimum_nodes(self):
        """Gets the minimum_nodes of this ApplicationResourceProperties.

        The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.

        :return: The minimum_nodes of this ApplicationResourceProperties.
        :rtype: int
        """
        return self._minimum_nodes

    @minimum_nodes.setter
    def minimum_nodes(self, minimum_nodes):
        """Sets the minimum_nodes of this ApplicationResourceProperties.

        The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.

        :param minimum_nodes: The minimum_nodes of this ApplicationResourceProperties.
        :type minimum_nodes: int
        """
        if minimum_nodes is not None and minimum_nodes < 0:
            raise ValueError("Invalid value for `minimum_nodes`, must be a value greater than or equal to `0`")

        self._minimum_nodes = minimum_nodes

    @property
    def parameters(self):
        """Gets the parameters of this ApplicationResourceProperties.

        List of application parameters with overridden values from their default values specified in the application manifest.

        :return: The parameters of this ApplicationResourceProperties.
        :rtype: Dict[str, str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ApplicationResourceProperties.

        List of application parameters with overridden values from their default values specified in the application manifest.

        :param parameters: The parameters of this ApplicationResourceProperties.
        :type parameters: Dict[str, str]
        """

        self._parameters = parameters

    @property
    def remove_application_capacity(self):
        """Gets the remove_application_capacity of this ApplicationResourceProperties.

        Remove the current application capacity settings.

        :return: The remove_application_capacity of this ApplicationResourceProperties.
        :rtype: bool
        """
        return self._remove_application_capacity

    @remove_application_capacity.setter
    def remove_application_capacity(self, remove_application_capacity):
        """Sets the remove_application_capacity of this ApplicationResourceProperties.

        Remove the current application capacity settings.

        :param remove_application_capacity: The remove_application_capacity of this ApplicationResourceProperties.
        :type remove_application_capacity: bool
        """

        self._remove_application_capacity = remove_application_capacity

    @property
    def type_version(self):
        """Gets the type_version of this ApplicationResourceProperties.

        The version of the application type as defined in the application manifest.

        :return: The type_version of this ApplicationResourceProperties.
        :rtype: str
        """
        return self._type_version

    @type_version.setter
    def type_version(self, type_version):
        """Sets the type_version of this ApplicationResourceProperties.

        The version of the application type as defined in the application manifest.

        :param type_version: The type_version of this ApplicationResourceProperties.
        :type type_version: str
        """

        self._type_version = type_version

    @property
    def upgrade_policy(self):
        """Gets the upgrade_policy of this ApplicationResourceProperties.


        :return: The upgrade_policy of this ApplicationResourceProperties.
        :rtype: ApplicationUpgradePolicy
        """
        return self._upgrade_policy

    @upgrade_policy.setter
    def upgrade_policy(self, upgrade_policy):
        """Sets the upgrade_policy of this ApplicationResourceProperties.


        :param upgrade_policy: The upgrade_policy of this ApplicationResourceProperties.
        :type upgrade_policy: ApplicationUpgradePolicy
        """

        self._upgrade_policy = upgrade_policy
