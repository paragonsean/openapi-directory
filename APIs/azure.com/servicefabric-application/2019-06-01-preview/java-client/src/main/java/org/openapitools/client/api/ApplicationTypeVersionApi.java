/*
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApplicationTypeVersionResource;
import org.openapitools.client.model.ApplicationTypeVersionResourceList;
import org.openapitools.client.model.ErrorModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApplicationTypeVersionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApplicationTypeVersionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationTypeVersionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for applicationTypeVersionsCreate
     * @param subscriptionId The customer subscription identifier. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param clusterName The name of the cluster resource. (required)
     * @param applicationTypeName The name of the application type name resource. (required)
     * @param version The application type version. (required)
     * @param apiVersion The version of the Service Fabric resource provider API. This is a required parameter and it&#39;s value must be \&quot;2019-06-01-preview\&quot; for this specification. (required)
     * @param parameters The application type version resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request was accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationTypeVersionsCreateCall(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String version, String apiVersion, ApplicationTypeVersionResource parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applicationTypes/{applicationTypeName}/versions/{version}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "applicationTypeName" + "}", localVarApiClient.escapeString(applicationTypeName.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationTypeVersionsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String version, String apiVersion, ApplicationTypeVersionResource parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling applicationTypeVersionsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling applicationTypeVersionsCreate(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling applicationTypeVersionsCreate(Async)");
        }

        // verify the required parameter 'applicationTypeName' is set
        if (applicationTypeName == null) {
            throw new ApiException("Missing the required parameter 'applicationTypeName' when calling applicationTypeVersionsCreate(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling applicationTypeVersionsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationTypeVersionsCreate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling applicationTypeVersionsCreate(Async)");
        }

        return applicationTypeVersionsCreateCall(subscriptionId, resourceGroupName, clusterName, applicationTypeName, version, apiVersion, parameters, _callback);

    }

    /**
     * Creates or updates a Service Fabric application type version resource.
     * Create or update a Service Fabric application type version resource with the specified name.
     * @param subscriptionId The customer subscription identifier. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param clusterName The name of the cluster resource. (required)
     * @param applicationTypeName The name of the application type name resource. (required)
     * @param version The application type version. (required)
     * @param apiVersion The version of the Service Fabric resource provider API. This is a required parameter and it&#39;s value must be \&quot;2019-06-01-preview\&quot; for this specification. (required)
     * @param parameters The application type version resource. (required)
     * @return ApplicationTypeVersionResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request was accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationTypeVersionResource applicationTypeVersionsCreate(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String version, String apiVersion, ApplicationTypeVersionResource parameters) throws ApiException {
        ApiResponse<ApplicationTypeVersionResource> localVarResp = applicationTypeVersionsCreateWithHttpInfo(subscriptionId, resourceGroupName, clusterName, applicationTypeName, version, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Creates or updates a Service Fabric application type version resource.
     * Create or update a Service Fabric application type version resource with the specified name.
     * @param subscriptionId The customer subscription identifier. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param clusterName The name of the cluster resource. (required)
     * @param applicationTypeName The name of the application type name resource. (required)
     * @param version The application type version. (required)
     * @param apiVersion The version of the Service Fabric resource provider API. This is a required parameter and it&#39;s value must be \&quot;2019-06-01-preview\&quot; for this specification. (required)
     * @param parameters The application type version resource. (required)
     * @return ApiResponse&lt;ApplicationTypeVersionResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request was accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationTypeVersionResource> applicationTypeVersionsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String version, String apiVersion, ApplicationTypeVersionResource parameters) throws ApiException {
        okhttp3.Call localVarCall = applicationTypeVersionsCreateValidateBeforeCall(subscriptionId, resourceGroupName, clusterName, applicationTypeName, version, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<ApplicationTypeVersionResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates or updates a Service Fabric application type version resource. (asynchronously)
     * Create or update a Service Fabric application type version resource with the specified name.
     * @param subscriptionId The customer subscription identifier. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param clusterName The name of the cluster resource. (required)
     * @param applicationTypeName The name of the application type name resource. (required)
     * @param version The application type version. (required)
     * @param apiVersion The version of the Service Fabric resource provider API. This is a required parameter and it&#39;s value must be \&quot;2019-06-01-preview\&quot; for this specification. (required)
     * @param parameters The application type version resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request was accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationTypeVersionsCreateAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String version, String apiVersion, ApplicationTypeVersionResource parameters, final ApiCallback<ApplicationTypeVersionResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationTypeVersionsCreateValidateBeforeCall(subscriptionId, resourceGroupName, clusterName, applicationTypeName, version, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<ApplicationTypeVersionResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationTypeVersionsDelete
     * @param subscriptionId The customer subscription identifier. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param clusterName The name of the cluster resource. (required)
     * @param applicationTypeName The name of the application type name resource. (required)
     * @param version The application type version. (required)
     * @param apiVersion The version of the Service Fabric resource provider API. This is a required parameter and it&#39;s value must be \&quot;2019-06-01-preview\&quot; for this specification. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request was accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationTypeVersionsDeleteCall(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String version, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applicationTypes/{applicationTypeName}/versions/{version}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "applicationTypeName" + "}", localVarApiClient.escapeString(applicationTypeName.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationTypeVersionsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String version, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling applicationTypeVersionsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling applicationTypeVersionsDelete(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling applicationTypeVersionsDelete(Async)");
        }

        // verify the required parameter 'applicationTypeName' is set
        if (applicationTypeName == null) {
            throw new ApiException("Missing the required parameter 'applicationTypeName' when calling applicationTypeVersionsDelete(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling applicationTypeVersionsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationTypeVersionsDelete(Async)");
        }

        return applicationTypeVersionsDeleteCall(subscriptionId, resourceGroupName, clusterName, applicationTypeName, version, apiVersion, _callback);

    }

    /**
     * Deletes a Service Fabric application type version resource.
     * Delete a Service Fabric application type version resource with the specified name.
     * @param subscriptionId The customer subscription identifier. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param clusterName The name of the cluster resource. (required)
     * @param applicationTypeName The name of the application type name resource. (required)
     * @param version The application type version. (required)
     * @param apiVersion The version of the Service Fabric resource provider API. This is a required parameter and it&#39;s value must be \&quot;2019-06-01-preview\&quot; for this specification. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request was accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public void applicationTypeVersionsDelete(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String version, String apiVersion) throws ApiException {
        applicationTypeVersionsDeleteWithHttpInfo(subscriptionId, resourceGroupName, clusterName, applicationTypeName, version, apiVersion);
    }

    /**
     * Deletes a Service Fabric application type version resource.
     * Delete a Service Fabric application type version resource with the specified name.
     * @param subscriptionId The customer subscription identifier. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param clusterName The name of the cluster resource. (required)
     * @param applicationTypeName The name of the application type name resource. (required)
     * @param version The application type version. (required)
     * @param apiVersion The version of the Service Fabric resource provider API. This is a required parameter and it&#39;s value must be \&quot;2019-06-01-preview\&quot; for this specification. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request was accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> applicationTypeVersionsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String version, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = applicationTypeVersionsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, clusterName, applicationTypeName, version, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a Service Fabric application type version resource. (asynchronously)
     * Delete a Service Fabric application type version resource with the specified name.
     * @param subscriptionId The customer subscription identifier. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param clusterName The name of the cluster resource. (required)
     * @param applicationTypeName The name of the application type name resource. (required)
     * @param version The application type version. (required)
     * @param apiVersion The version of the Service Fabric resource provider API. This is a required parameter and it&#39;s value must be \&quot;2019-06-01-preview\&quot; for this specification. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request was accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The resource was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationTypeVersionsDeleteAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String version, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationTypeVersionsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, clusterName, applicationTypeName, version, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationTypeVersionsGet
     * @param subscriptionId The customer subscription identifier. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param clusterName The name of the cluster resource. (required)
     * @param applicationTypeName The name of the application type name resource. (required)
     * @param version The application type version. (required)
     * @param apiVersion The version of the Service Fabric resource provider API. This is a required parameter and it&#39;s value must be \&quot;2019-06-01-preview\&quot; for this specification. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationTypeVersionsGetCall(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String version, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applicationTypes/{applicationTypeName}/versions/{version}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "applicationTypeName" + "}", localVarApiClient.escapeString(applicationTypeName.toString()))
            .replace("{" + "version" + "}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationTypeVersionsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String version, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling applicationTypeVersionsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling applicationTypeVersionsGet(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling applicationTypeVersionsGet(Async)");
        }

        // verify the required parameter 'applicationTypeName' is set
        if (applicationTypeName == null) {
            throw new ApiException("Missing the required parameter 'applicationTypeName' when calling applicationTypeVersionsGet(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling applicationTypeVersionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationTypeVersionsGet(Async)");
        }

        return applicationTypeVersionsGetCall(subscriptionId, resourceGroupName, clusterName, applicationTypeName, version, apiVersion, _callback);

    }

    /**
     * Gets a Service Fabric application type version resource.
     * Get a Service Fabric application type version resource created or in the process of being created in the Service Fabric application type name resource.
     * @param subscriptionId The customer subscription identifier. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param clusterName The name of the cluster resource. (required)
     * @param applicationTypeName The name of the application type name resource. (required)
     * @param version The application type version. (required)
     * @param apiVersion The version of the Service Fabric resource provider API. This is a required parameter and it&#39;s value must be \&quot;2019-06-01-preview\&quot; for this specification. (required)
     * @return ApplicationTypeVersionResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationTypeVersionResource applicationTypeVersionsGet(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String version, String apiVersion) throws ApiException {
        ApiResponse<ApplicationTypeVersionResource> localVarResp = applicationTypeVersionsGetWithHttpInfo(subscriptionId, resourceGroupName, clusterName, applicationTypeName, version, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a Service Fabric application type version resource.
     * Get a Service Fabric application type version resource created or in the process of being created in the Service Fabric application type name resource.
     * @param subscriptionId The customer subscription identifier. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param clusterName The name of the cluster resource. (required)
     * @param applicationTypeName The name of the application type name resource. (required)
     * @param version The application type version. (required)
     * @param apiVersion The version of the Service Fabric resource provider API. This is a required parameter and it&#39;s value must be \&quot;2019-06-01-preview\&quot; for this specification. (required)
     * @return ApiResponse&lt;ApplicationTypeVersionResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationTypeVersionResource> applicationTypeVersionsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String version, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = applicationTypeVersionsGetValidateBeforeCall(subscriptionId, resourceGroupName, clusterName, applicationTypeName, version, apiVersion, null);
        Type localVarReturnType = new TypeToken<ApplicationTypeVersionResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a Service Fabric application type version resource. (asynchronously)
     * Get a Service Fabric application type version resource created or in the process of being created in the Service Fabric application type name resource.
     * @param subscriptionId The customer subscription identifier. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param clusterName The name of the cluster resource. (required)
     * @param applicationTypeName The name of the application type name resource. (required)
     * @param version The application type version. (required)
     * @param apiVersion The version of the Service Fabric resource provider API. This is a required parameter and it&#39;s value must be \&quot;2019-06-01-preview\&quot; for this specification. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationTypeVersionsGetAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String version, String apiVersion, final ApiCallback<ApplicationTypeVersionResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationTypeVersionsGetValidateBeforeCall(subscriptionId, resourceGroupName, clusterName, applicationTypeName, version, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ApplicationTypeVersionResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationTypeVersionsList
     * @param subscriptionId The customer subscription identifier. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param clusterName The name of the cluster resource. (required)
     * @param applicationTypeName The name of the application type name resource. (required)
     * @param apiVersion The version of the Service Fabric resource provider API. This is a required parameter and it&#39;s value must be \&quot;2019-06-01-preview\&quot; for this specification. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationTypeVersionsListCall(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applicationTypes/{applicationTypeName}/versions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "clusterName" + "}", localVarApiClient.escapeString(clusterName.toString()))
            .replace("{" + "applicationTypeName" + "}", localVarApiClient.escapeString(applicationTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationTypeVersionsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling applicationTypeVersionsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling applicationTypeVersionsList(Async)");
        }

        // verify the required parameter 'clusterName' is set
        if (clusterName == null) {
            throw new ApiException("Missing the required parameter 'clusterName' when calling applicationTypeVersionsList(Async)");
        }

        // verify the required parameter 'applicationTypeName' is set
        if (applicationTypeName == null) {
            throw new ApiException("Missing the required parameter 'applicationTypeName' when calling applicationTypeVersionsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applicationTypeVersionsList(Async)");
        }

        return applicationTypeVersionsListCall(subscriptionId, resourceGroupName, clusterName, applicationTypeName, apiVersion, _callback);

    }

    /**
     * Gets the list of application type version resources created in the specified Service Fabric application type name resource.
     * Gets all application type version resources created or in the process of being created in the Service Fabric application type name resource.
     * @param subscriptionId The customer subscription identifier. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param clusterName The name of the cluster resource. (required)
     * @param applicationTypeName The name of the application type name resource. (required)
     * @param apiVersion The version of the Service Fabric resource provider API. This is a required parameter and it&#39;s value must be \&quot;2019-06-01-preview\&quot; for this specification. (required)
     * @return ApplicationTypeVersionResourceList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationTypeVersionResourceList applicationTypeVersionsList(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String apiVersion) throws ApiException {
        ApiResponse<ApplicationTypeVersionResourceList> localVarResp = applicationTypeVersionsListWithHttpInfo(subscriptionId, resourceGroupName, clusterName, applicationTypeName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the list of application type version resources created in the specified Service Fabric application type name resource.
     * Gets all application type version resources created or in the process of being created in the Service Fabric application type name resource.
     * @param subscriptionId The customer subscription identifier. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param clusterName The name of the cluster resource. (required)
     * @param applicationTypeName The name of the application type name resource. (required)
     * @param apiVersion The version of the Service Fabric resource provider API. This is a required parameter and it&#39;s value must be \&quot;2019-06-01-preview\&quot; for this specification. (required)
     * @return ApiResponse&lt;ApplicationTypeVersionResourceList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationTypeVersionResourceList> applicationTypeVersionsListWithHttpInfo(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = applicationTypeVersionsListValidateBeforeCall(subscriptionId, resourceGroupName, clusterName, applicationTypeName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ApplicationTypeVersionResourceList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the list of application type version resources created in the specified Service Fabric application type name resource. (asynchronously)
     * Gets all application type version resources created or in the process of being created in the Service Fabric application type name resource.
     * @param subscriptionId The customer subscription identifier. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param clusterName The name of the cluster resource. (required)
     * @param applicationTypeName The name of the application type name resource. (required)
     * @param apiVersion The version of the Service Fabric resource provider API. This is a required parameter and it&#39;s value must be \&quot;2019-06-01-preview\&quot; for this specification. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> The detailed error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationTypeVersionsListAsync(String subscriptionId, String resourceGroupName, String clusterName, String applicationTypeName, String apiVersion, final ApiCallback<ApplicationTypeVersionResourceList> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationTypeVersionsListValidateBeforeCall(subscriptionId, resourceGroupName, clusterName, applicationTypeName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ApplicationTypeVersionResourceList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
