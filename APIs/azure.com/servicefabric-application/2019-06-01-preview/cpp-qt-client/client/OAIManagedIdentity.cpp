/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagedIdentity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagedIdentity::OAIManagedIdentity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagedIdentity::OAIManagedIdentity() {
    this->initializeModel();
}

OAIManagedIdentity::~OAIManagedIdentity() {}

void OAIManagedIdentity::initializeModel() {

    m_principal_id_isSet = false;
    m_principal_id_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_assigned_identities_isSet = false;
    m_user_assigned_identities_isValid = false;
}

void OAIManagedIdentity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagedIdentity::fromJsonObject(QJsonObject json) {

    m_principal_id_isValid = ::OpenAPI::fromJsonValue(m_principal_id, json[QString("principalId")]);
    m_principal_id_isSet = !json[QString("principalId")].isNull() && m_principal_id_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_assigned_identities_isValid = ::OpenAPI::fromJsonValue(m_user_assigned_identities, json[QString("userAssignedIdentities")]);
    m_user_assigned_identities_isSet = !json[QString("userAssignedIdentities")].isNull() && m_user_assigned_identities_isValid;
}

QString OAIManagedIdentity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagedIdentity::asJsonObject() const {
    QJsonObject obj;
    if (m_principal_id_isSet) {
        obj.insert(QString("principalId"), ::OpenAPI::toJsonValue(m_principal_id));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_assigned_identities.size() > 0) {
        obj.insert(QString("userAssignedIdentities"), ::OpenAPI::toJsonValue(m_user_assigned_identities));
    }
    return obj;
}

QString OAIManagedIdentity::getPrincipalId() const {
    return m_principal_id;
}
void OAIManagedIdentity::setPrincipalId(const QString &principal_id) {
    m_principal_id = principal_id;
    m_principal_id_isSet = true;
}

bool OAIManagedIdentity::is_principal_id_Set() const{
    return m_principal_id_isSet;
}

bool OAIManagedIdentity::is_principal_id_Valid() const{
    return m_principal_id_isValid;
}

QString OAIManagedIdentity::getTenantId() const {
    return m_tenant_id;
}
void OAIManagedIdentity::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIManagedIdentity::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIManagedIdentity::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

OAIManagedIdentityType OAIManagedIdentity::getType() const {
    return m_type;
}
void OAIManagedIdentity::setType(const OAIManagedIdentityType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIManagedIdentity::is_type_Set() const{
    return m_type_isSet;
}

bool OAIManagedIdentity::is_type_Valid() const{
    return m_type_isValid;
}

QMap<QString, OAIUserAssignedIdentity> OAIManagedIdentity::getUserAssignedIdentities() const {
    return m_user_assigned_identities;
}
void OAIManagedIdentity::setUserAssignedIdentities(const QMap<QString, OAIUserAssignedIdentity> &user_assigned_identities) {
    m_user_assigned_identities = user_assigned_identities;
    m_user_assigned_identities_isSet = true;
}

bool OAIManagedIdentity::is_user_assigned_identities_Set() const{
    return m_user_assigned_identities_isSet;
}

bool OAIManagedIdentity::is_user_assigned_identities_Valid() const{
    return m_user_assigned_identities_isValid;
}

bool OAIManagedIdentity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_principal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_assigned_identities.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagedIdentity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
