/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApplicationMetricDescription model module.
 * @module model/ApplicationMetricDescription
 * @version 2019-06-01-preview
 */
class ApplicationMetricDescription {
    /**
     * Constructs a new <code>ApplicationMetricDescription</code>.
     * Describes capacity information for a custom resource balancing metric. This can be used to limit the total consumption of this metric by the services of this application. 
     * @alias module:model/ApplicationMetricDescription
     */
    constructor() { 
        
        ApplicationMetricDescription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApplicationMetricDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationMetricDescription} obj Optional instance to populate.
     * @return {module:model/ApplicationMetricDescription} The populated <code>ApplicationMetricDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationMetricDescription();

            if (data.hasOwnProperty('maximumCapacity')) {
                obj['maximumCapacity'] = ApiClient.convertToType(data['maximumCapacity'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('reservationCapacity')) {
                obj['reservationCapacity'] = ApiClient.convertToType(data['reservationCapacity'], 'Number');
            }
            if (data.hasOwnProperty('totalApplicationCapacity')) {
                obj['totalApplicationCapacity'] = ApiClient.convertToType(data['totalApplicationCapacity'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplicationMetricDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplicationMetricDescription</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * The maximum node capacity for Service Fabric application. This is the maximum Load for an instance of this application on a single node. Even if the capacity of node is greater than this value, Service Fabric will limit the total load of services within the application on each node to this value. If set to zero, capacity for this metric is unlimited on each node. When creating a new application with application capacity defined, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity. When updating existing application with application capacity, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity. 
 * @member {Number} maximumCapacity
 */
ApplicationMetricDescription.prototype['maximumCapacity'] = undefined;

/**
 * The name of the metric.
 * @member {String} name
 */
ApplicationMetricDescription.prototype['name'] = undefined;

/**
 * The node reservation capacity for Service Fabric application. This is the amount of load which is reserved on nodes which have instances of this application. If MinimumNodes is specified, then the product of these values will be the capacity reserved in the cluster for the application. If set to zero, no capacity is reserved for this metric. When setting application capacity or when updating application capacity; this value must be smaller than or equal to MaximumCapacity for each metric. 
 * @member {Number} reservationCapacity
 */
ApplicationMetricDescription.prototype['reservationCapacity'] = undefined;

/**
 * The total metric capacity for Service Fabric application. This is the total metric capacity for this application in the cluster. Service Fabric will try to limit the sum of loads of services within the application to this value. When creating a new application with application capacity defined, the product of MaximumNodes and MaximumCapacity must always be smaller than or equal to this value. 
 * @member {Number} totalApplicationCapacity
 */
ApplicationMetricDescription.prototype['totalApplicationCapacity'] = undefined;






export default ApplicationMetricDescription;

