/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorModel from '../model/ErrorModel';
import ServiceResource from '../model/ServiceResource';
import ServiceResourceList from '../model/ServiceResourceList';
import ServiceResourceUpdate from '../model/ServiceResourceUpdate';

/**
* Service service.
* @module api/ServiceApi
* @version 2019-06-01-preview
*/
export default class ServiceApi {

    /**
    * Constructs a new ServiceApi. 
    * @alias module:api/ServiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the servicesCreate operation.
     * @callback module:api/ServiceApi~servicesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a Service Fabric service resource.
     * Create or update a Service Fabric service resource with the specified name.
     * @param {String} subscriptionId The customer subscription identifier.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} clusterName The name of the cluster resource.
     * @param {String} applicationName The name of the application resource.
     * @param {String} serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @param {module:model/String} apiVersion The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-06-01-preview\" for this specification.
     * @param {module:model/ServiceResource} parameters The service resource.
     * @param {module:api/ServiceApi~servicesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceResource}
     */
    servicesCreate(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling servicesCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling servicesCreate");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling servicesCreate");
      }
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling servicesCreate");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesCreate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling servicesCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'applicationName': applicationName,
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}/services/{serviceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesDelete operation.
     * @callback module:api/ServiceApi~servicesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Service Fabric service resource.
     * Delete a Service Fabric service resource with the specified name.
     * @param {String} subscriptionId The customer subscription identifier.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} clusterName The name of the cluster resource.
     * @param {String} applicationName The name of the application resource.
     * @param {String} serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @param {module:model/String} apiVersion The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-06-01-preview\" for this specification.
     * @param {module:api/ServiceApi~servicesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesDelete(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling servicesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling servicesDelete");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling servicesDelete");
      }
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling servicesDelete");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'applicationName': applicationName,
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}/services/{serviceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesGet operation.
     * @callback module:api/ServiceApi~servicesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Service Fabric service resource.
     * Get a Service Fabric service resource created or in the process of being created in the Service Fabric application resource.
     * @param {String} subscriptionId The customer subscription identifier.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} clusterName The name of the cluster resource.
     * @param {String} applicationName The name of the application resource.
     * @param {String} serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @param {module:model/String} apiVersion The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-06-01-preview\" for this specification.
     * @param {module:api/ServiceApi~servicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceResource}
     */
    servicesGet(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling servicesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling servicesGet");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling servicesGet");
      }
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling servicesGet");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'applicationName': applicationName,
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}/services/{serviceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesList operation.
     * @callback module:api/ServiceApi~servicesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceResourceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of service resources created in the specified Service Fabric application resource.
     * Gets all service resources created or in the process of being created in the Service Fabric application resource.
     * @param {String} subscriptionId The customer subscription identifier.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} clusterName The name of the cluster resource.
     * @param {String} applicationName The name of the application resource.
     * @param {module:model/String} apiVersion The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-06-01-preview\" for this specification.
     * @param {module:api/ServiceApi~servicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceResourceList}
     */
    servicesList(subscriptionId, resourceGroupName, clusterName, applicationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling servicesList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling servicesList");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling servicesList");
      }
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling servicesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'applicationName': applicationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceResourceList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesUpdate operation.
     * @callback module:api/ServiceApi~servicesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Service Fabric service resource.
     * Update a Service Fabric service resource with the specified name.
     * @param {String} subscriptionId The customer subscription identifier.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} clusterName The name of the cluster resource.
     * @param {String} applicationName The name of the application resource.
     * @param {String} serviceName The name of the service resource in the format of {applicationName}~{serviceName}.
     * @param {module:model/String} apiVersion The version of the Service Fabric resource provider API. This is a required parameter and it's value must be \"2019-06-01-preview\" for this specification.
     * @param {module:model/ServiceResourceUpdate} parameters The service resource for patch operations.
     * @param {module:api/ServiceApi~servicesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceResource}
     */
    servicesUpdate(subscriptionId, resourceGroupName, clusterName, applicationName, serviceName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling servicesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling servicesUpdate");
      }
      // verify the required parameter 'clusterName' is set
      if (clusterName === undefined || clusterName === null) {
        throw new Error("Missing the required parameter 'clusterName' when calling servicesUpdate");
      }
      // verify the required parameter 'applicationName' is set
      if (applicationName === undefined || applicationName === null) {
        throw new Error("Missing the required parameter 'applicationName' when calling servicesUpdate");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling servicesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'clusterName': clusterName,
        'applicationName': applicationName,
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServiceResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabric/clusters/{clusterName}/applications/{applicationName}/services/{serviceName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
