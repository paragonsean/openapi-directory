/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationUpgradePolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationUpgradePolicy::OAIApplicationUpgradePolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationUpgradePolicy::OAIApplicationUpgradePolicy() {
    this->initializeModel();
}

OAIApplicationUpgradePolicy::~OAIApplicationUpgradePolicy() {}

void OAIApplicationUpgradePolicy::initializeModel() {

    m_application_health_policy_isSet = false;
    m_application_health_policy_isValid = false;

    m_force_restart_isSet = false;
    m_force_restart_isValid = false;

    m_rolling_upgrade_monitoring_policy_isSet = false;
    m_rolling_upgrade_monitoring_policy_isValid = false;

    m_upgrade_replica_set_check_timeout_isSet = false;
    m_upgrade_replica_set_check_timeout_isValid = false;
}

void OAIApplicationUpgradePolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationUpgradePolicy::fromJsonObject(QJsonObject json) {

    m_application_health_policy_isValid = ::OpenAPI::fromJsonValue(m_application_health_policy, json[QString("applicationHealthPolicy")]);
    m_application_health_policy_isSet = !json[QString("applicationHealthPolicy")].isNull() && m_application_health_policy_isValid;

    m_force_restart_isValid = ::OpenAPI::fromJsonValue(m_force_restart, json[QString("forceRestart")]);
    m_force_restart_isSet = !json[QString("forceRestart")].isNull() && m_force_restart_isValid;

    m_rolling_upgrade_monitoring_policy_isValid = ::OpenAPI::fromJsonValue(m_rolling_upgrade_monitoring_policy, json[QString("rollingUpgradeMonitoringPolicy")]);
    m_rolling_upgrade_monitoring_policy_isSet = !json[QString("rollingUpgradeMonitoringPolicy")].isNull() && m_rolling_upgrade_monitoring_policy_isValid;

    m_upgrade_replica_set_check_timeout_isValid = ::OpenAPI::fromJsonValue(m_upgrade_replica_set_check_timeout, json[QString("upgradeReplicaSetCheckTimeout")]);
    m_upgrade_replica_set_check_timeout_isSet = !json[QString("upgradeReplicaSetCheckTimeout")].isNull() && m_upgrade_replica_set_check_timeout_isValid;
}

QString OAIApplicationUpgradePolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationUpgradePolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_application_health_policy.isSet()) {
        obj.insert(QString("applicationHealthPolicy"), ::OpenAPI::toJsonValue(m_application_health_policy));
    }
    if (m_force_restart_isSet) {
        obj.insert(QString("forceRestart"), ::OpenAPI::toJsonValue(m_force_restart));
    }
    if (m_rolling_upgrade_monitoring_policy.isSet()) {
        obj.insert(QString("rollingUpgradeMonitoringPolicy"), ::OpenAPI::toJsonValue(m_rolling_upgrade_monitoring_policy));
    }
    if (m_upgrade_replica_set_check_timeout_isSet) {
        obj.insert(QString("upgradeReplicaSetCheckTimeout"), ::OpenAPI::toJsonValue(m_upgrade_replica_set_check_timeout));
    }
    return obj;
}

OAIArmApplicationHealthPolicy OAIApplicationUpgradePolicy::getApplicationHealthPolicy() const {
    return m_application_health_policy;
}
void OAIApplicationUpgradePolicy::setApplicationHealthPolicy(const OAIArmApplicationHealthPolicy &application_health_policy) {
    m_application_health_policy = application_health_policy;
    m_application_health_policy_isSet = true;
}

bool OAIApplicationUpgradePolicy::is_application_health_policy_Set() const{
    return m_application_health_policy_isSet;
}

bool OAIApplicationUpgradePolicy::is_application_health_policy_Valid() const{
    return m_application_health_policy_isValid;
}

bool OAIApplicationUpgradePolicy::isForceRestart() const {
    return m_force_restart;
}
void OAIApplicationUpgradePolicy::setForceRestart(const bool &force_restart) {
    m_force_restart = force_restart;
    m_force_restart_isSet = true;
}

bool OAIApplicationUpgradePolicy::is_force_restart_Set() const{
    return m_force_restart_isSet;
}

bool OAIApplicationUpgradePolicy::is_force_restart_Valid() const{
    return m_force_restart_isValid;
}

OAIArmRollingUpgradeMonitoringPolicy OAIApplicationUpgradePolicy::getRollingUpgradeMonitoringPolicy() const {
    return m_rolling_upgrade_monitoring_policy;
}
void OAIApplicationUpgradePolicy::setRollingUpgradeMonitoringPolicy(const OAIArmRollingUpgradeMonitoringPolicy &rolling_upgrade_monitoring_policy) {
    m_rolling_upgrade_monitoring_policy = rolling_upgrade_monitoring_policy;
    m_rolling_upgrade_monitoring_policy_isSet = true;
}

bool OAIApplicationUpgradePolicy::is_rolling_upgrade_monitoring_policy_Set() const{
    return m_rolling_upgrade_monitoring_policy_isSet;
}

bool OAIApplicationUpgradePolicy::is_rolling_upgrade_monitoring_policy_Valid() const{
    return m_rolling_upgrade_monitoring_policy_isValid;
}

QString OAIApplicationUpgradePolicy::getUpgradeReplicaSetCheckTimeout() const {
    return m_upgrade_replica_set_check_timeout;
}
void OAIApplicationUpgradePolicy::setUpgradeReplicaSetCheckTimeout(const QString &upgrade_replica_set_check_timeout) {
    m_upgrade_replica_set_check_timeout = upgrade_replica_set_check_timeout;
    m_upgrade_replica_set_check_timeout_isSet = true;
}

bool OAIApplicationUpgradePolicy::is_upgrade_replica_set_check_timeout_Set() const{
    return m_upgrade_replica_set_check_timeout_isSet;
}

bool OAIApplicationUpgradePolicy::is_upgrade_replica_set_check_timeout_Valid() const{
    return m_upgrade_replica_set_check_timeout_isValid;
}

bool OAIApplicationUpgradePolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_health_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_restart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rolling_upgrade_monitoring_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_replica_set_check_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationUpgradePolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
