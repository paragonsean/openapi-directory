/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatefulServiceUpdateProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatefulServiceUpdateProperties::OAIStatefulServiceUpdateProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatefulServiceUpdateProperties::OAIStatefulServiceUpdateProperties() {
    this->initializeModel();
}

OAIStatefulServiceUpdateProperties::~OAIStatefulServiceUpdateProperties() {}

void OAIStatefulServiceUpdateProperties::initializeModel() {

    m_min_replica_set_size_isSet = false;
    m_min_replica_set_size_isValid = false;

    m_quorum_loss_wait_duration_isSet = false;
    m_quorum_loss_wait_duration_isValid = false;

    m_replica_restart_wait_duration_isSet = false;
    m_replica_restart_wait_duration_isValid = false;

    m_stand_by_replica_keep_duration_isSet = false;
    m_stand_by_replica_keep_duration_isValid = false;

    m_target_replica_set_size_isSet = false;
    m_target_replica_set_size_isValid = false;

    m_service_kind_isSet = false;
    m_service_kind_isValid = false;

    m_correlation_scheme_isSet = false;
    m_correlation_scheme_isValid = false;

    m_default_move_cost_isSet = false;
    m_default_move_cost_isValid = false;

    m_placement_constraints_isSet = false;
    m_placement_constraints_isValid = false;

    m_service_load_metrics_isSet = false;
    m_service_load_metrics_isValid = false;

    m_service_placement_policies_isSet = false;
    m_service_placement_policies_isValid = false;
}

void OAIStatefulServiceUpdateProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatefulServiceUpdateProperties::fromJsonObject(QJsonObject json) {

    m_min_replica_set_size_isValid = ::OpenAPI::fromJsonValue(m_min_replica_set_size, json[QString("minReplicaSetSize")]);
    m_min_replica_set_size_isSet = !json[QString("minReplicaSetSize")].isNull() && m_min_replica_set_size_isValid;

    m_quorum_loss_wait_duration_isValid = ::OpenAPI::fromJsonValue(m_quorum_loss_wait_duration, json[QString("quorumLossWaitDuration")]);
    m_quorum_loss_wait_duration_isSet = !json[QString("quorumLossWaitDuration")].isNull() && m_quorum_loss_wait_duration_isValid;

    m_replica_restart_wait_duration_isValid = ::OpenAPI::fromJsonValue(m_replica_restart_wait_duration, json[QString("replicaRestartWaitDuration")]);
    m_replica_restart_wait_duration_isSet = !json[QString("replicaRestartWaitDuration")].isNull() && m_replica_restart_wait_duration_isValid;

    m_stand_by_replica_keep_duration_isValid = ::OpenAPI::fromJsonValue(m_stand_by_replica_keep_duration, json[QString("standByReplicaKeepDuration")]);
    m_stand_by_replica_keep_duration_isSet = !json[QString("standByReplicaKeepDuration")].isNull() && m_stand_by_replica_keep_duration_isValid;

    m_target_replica_set_size_isValid = ::OpenAPI::fromJsonValue(m_target_replica_set_size, json[QString("targetReplicaSetSize")]);
    m_target_replica_set_size_isSet = !json[QString("targetReplicaSetSize")].isNull() && m_target_replica_set_size_isValid;

    m_service_kind_isValid = ::OpenAPI::fromJsonValue(m_service_kind, json[QString("serviceKind")]);
    m_service_kind_isSet = !json[QString("serviceKind")].isNull() && m_service_kind_isValid;

    m_correlation_scheme_isValid = ::OpenAPI::fromJsonValue(m_correlation_scheme, json[QString("correlationScheme")]);
    m_correlation_scheme_isSet = !json[QString("correlationScheme")].isNull() && m_correlation_scheme_isValid;

    m_default_move_cost_isValid = ::OpenAPI::fromJsonValue(m_default_move_cost, json[QString("defaultMoveCost")]);
    m_default_move_cost_isSet = !json[QString("defaultMoveCost")].isNull() && m_default_move_cost_isValid;

    m_placement_constraints_isValid = ::OpenAPI::fromJsonValue(m_placement_constraints, json[QString("placementConstraints")]);
    m_placement_constraints_isSet = !json[QString("placementConstraints")].isNull() && m_placement_constraints_isValid;

    m_service_load_metrics_isValid = ::OpenAPI::fromJsonValue(m_service_load_metrics, json[QString("serviceLoadMetrics")]);
    m_service_load_metrics_isSet = !json[QString("serviceLoadMetrics")].isNull() && m_service_load_metrics_isValid;

    m_service_placement_policies_isValid = ::OpenAPI::fromJsonValue(m_service_placement_policies, json[QString("servicePlacementPolicies")]);
    m_service_placement_policies_isSet = !json[QString("servicePlacementPolicies")].isNull() && m_service_placement_policies_isValid;
}

QString OAIStatefulServiceUpdateProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatefulServiceUpdateProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_min_replica_set_size_isSet) {
        obj.insert(QString("minReplicaSetSize"), ::OpenAPI::toJsonValue(m_min_replica_set_size));
    }
    if (m_quorum_loss_wait_duration_isSet) {
        obj.insert(QString("quorumLossWaitDuration"), ::OpenAPI::toJsonValue(m_quorum_loss_wait_duration));
    }
    if (m_replica_restart_wait_duration_isSet) {
        obj.insert(QString("replicaRestartWaitDuration"), ::OpenAPI::toJsonValue(m_replica_restart_wait_duration));
    }
    if (m_stand_by_replica_keep_duration_isSet) {
        obj.insert(QString("standByReplicaKeepDuration"), ::OpenAPI::toJsonValue(m_stand_by_replica_keep_duration));
    }
    if (m_target_replica_set_size_isSet) {
        obj.insert(QString("targetReplicaSetSize"), ::OpenAPI::toJsonValue(m_target_replica_set_size));
    }
    if (m_service_kind.isSet()) {
        obj.insert(QString("serviceKind"), ::OpenAPI::toJsonValue(m_service_kind));
    }
    if (m_correlation_scheme.size() > 0) {
        obj.insert(QString("correlationScheme"), ::OpenAPI::toJsonValue(m_correlation_scheme));
    }
    if (m_default_move_cost.isSet()) {
        obj.insert(QString("defaultMoveCost"), ::OpenAPI::toJsonValue(m_default_move_cost));
    }
    if (m_placement_constraints_isSet) {
        obj.insert(QString("placementConstraints"), ::OpenAPI::toJsonValue(m_placement_constraints));
    }
    if (m_service_load_metrics.size() > 0) {
        obj.insert(QString("serviceLoadMetrics"), ::OpenAPI::toJsonValue(m_service_load_metrics));
    }
    if (m_service_placement_policies.size() > 0) {
        obj.insert(QString("servicePlacementPolicies"), ::OpenAPI::toJsonValue(m_service_placement_policies));
    }
    return obj;
}

qint32 OAIStatefulServiceUpdateProperties::getMinReplicaSetSize() const {
    return m_min_replica_set_size;
}
void OAIStatefulServiceUpdateProperties::setMinReplicaSetSize(const qint32 &min_replica_set_size) {
    m_min_replica_set_size = min_replica_set_size;
    m_min_replica_set_size_isSet = true;
}

bool OAIStatefulServiceUpdateProperties::is_min_replica_set_size_Set() const{
    return m_min_replica_set_size_isSet;
}

bool OAIStatefulServiceUpdateProperties::is_min_replica_set_size_Valid() const{
    return m_min_replica_set_size_isValid;
}

QDateTime OAIStatefulServiceUpdateProperties::getQuorumLossWaitDuration() const {
    return m_quorum_loss_wait_duration;
}
void OAIStatefulServiceUpdateProperties::setQuorumLossWaitDuration(const QDateTime &quorum_loss_wait_duration) {
    m_quorum_loss_wait_duration = quorum_loss_wait_duration;
    m_quorum_loss_wait_duration_isSet = true;
}

bool OAIStatefulServiceUpdateProperties::is_quorum_loss_wait_duration_Set() const{
    return m_quorum_loss_wait_duration_isSet;
}

bool OAIStatefulServiceUpdateProperties::is_quorum_loss_wait_duration_Valid() const{
    return m_quorum_loss_wait_duration_isValid;
}

QDateTime OAIStatefulServiceUpdateProperties::getReplicaRestartWaitDuration() const {
    return m_replica_restart_wait_duration;
}
void OAIStatefulServiceUpdateProperties::setReplicaRestartWaitDuration(const QDateTime &replica_restart_wait_duration) {
    m_replica_restart_wait_duration = replica_restart_wait_duration;
    m_replica_restart_wait_duration_isSet = true;
}

bool OAIStatefulServiceUpdateProperties::is_replica_restart_wait_duration_Set() const{
    return m_replica_restart_wait_duration_isSet;
}

bool OAIStatefulServiceUpdateProperties::is_replica_restart_wait_duration_Valid() const{
    return m_replica_restart_wait_duration_isValid;
}

QDateTime OAIStatefulServiceUpdateProperties::getStandByReplicaKeepDuration() const {
    return m_stand_by_replica_keep_duration;
}
void OAIStatefulServiceUpdateProperties::setStandByReplicaKeepDuration(const QDateTime &stand_by_replica_keep_duration) {
    m_stand_by_replica_keep_duration = stand_by_replica_keep_duration;
    m_stand_by_replica_keep_duration_isSet = true;
}

bool OAIStatefulServiceUpdateProperties::is_stand_by_replica_keep_duration_Set() const{
    return m_stand_by_replica_keep_duration_isSet;
}

bool OAIStatefulServiceUpdateProperties::is_stand_by_replica_keep_duration_Valid() const{
    return m_stand_by_replica_keep_duration_isValid;
}

qint32 OAIStatefulServiceUpdateProperties::getTargetReplicaSetSize() const {
    return m_target_replica_set_size;
}
void OAIStatefulServiceUpdateProperties::setTargetReplicaSetSize(const qint32 &target_replica_set_size) {
    m_target_replica_set_size = target_replica_set_size;
    m_target_replica_set_size_isSet = true;
}

bool OAIStatefulServiceUpdateProperties::is_target_replica_set_size_Set() const{
    return m_target_replica_set_size_isSet;
}

bool OAIStatefulServiceUpdateProperties::is_target_replica_set_size_Valid() const{
    return m_target_replica_set_size_isValid;
}

OAIServiceKind OAIStatefulServiceUpdateProperties::getServiceKind() const {
    return m_service_kind;
}
void OAIStatefulServiceUpdateProperties::setServiceKind(const OAIServiceKind &service_kind) {
    m_service_kind = service_kind;
    m_service_kind_isSet = true;
}

bool OAIStatefulServiceUpdateProperties::is_service_kind_Set() const{
    return m_service_kind_isSet;
}

bool OAIStatefulServiceUpdateProperties::is_service_kind_Valid() const{
    return m_service_kind_isValid;
}

QList<OAIServiceCorrelationDescription> OAIStatefulServiceUpdateProperties::getCorrelationScheme() const {
    return m_correlation_scheme;
}
void OAIStatefulServiceUpdateProperties::setCorrelationScheme(const QList<OAIServiceCorrelationDescription> &correlation_scheme) {
    m_correlation_scheme = correlation_scheme;
    m_correlation_scheme_isSet = true;
}

bool OAIStatefulServiceUpdateProperties::is_correlation_scheme_Set() const{
    return m_correlation_scheme_isSet;
}

bool OAIStatefulServiceUpdateProperties::is_correlation_scheme_Valid() const{
    return m_correlation_scheme_isValid;
}

OAIMoveCost OAIStatefulServiceUpdateProperties::getDefaultMoveCost() const {
    return m_default_move_cost;
}
void OAIStatefulServiceUpdateProperties::setDefaultMoveCost(const OAIMoveCost &default_move_cost) {
    m_default_move_cost = default_move_cost;
    m_default_move_cost_isSet = true;
}

bool OAIStatefulServiceUpdateProperties::is_default_move_cost_Set() const{
    return m_default_move_cost_isSet;
}

bool OAIStatefulServiceUpdateProperties::is_default_move_cost_Valid() const{
    return m_default_move_cost_isValid;
}

QString OAIStatefulServiceUpdateProperties::getPlacementConstraints() const {
    return m_placement_constraints;
}
void OAIStatefulServiceUpdateProperties::setPlacementConstraints(const QString &placement_constraints) {
    m_placement_constraints = placement_constraints;
    m_placement_constraints_isSet = true;
}

bool OAIStatefulServiceUpdateProperties::is_placement_constraints_Set() const{
    return m_placement_constraints_isSet;
}

bool OAIStatefulServiceUpdateProperties::is_placement_constraints_Valid() const{
    return m_placement_constraints_isValid;
}

QList<OAIServiceLoadMetricDescription> OAIStatefulServiceUpdateProperties::getServiceLoadMetrics() const {
    return m_service_load_metrics;
}
void OAIStatefulServiceUpdateProperties::setServiceLoadMetrics(const QList<OAIServiceLoadMetricDescription> &service_load_metrics) {
    m_service_load_metrics = service_load_metrics;
    m_service_load_metrics_isSet = true;
}

bool OAIStatefulServiceUpdateProperties::is_service_load_metrics_Set() const{
    return m_service_load_metrics_isSet;
}

bool OAIStatefulServiceUpdateProperties::is_service_load_metrics_Valid() const{
    return m_service_load_metrics_isValid;
}

QList<OAIServicePlacementPolicyDescription> OAIStatefulServiceUpdateProperties::getServicePlacementPolicies() const {
    return m_service_placement_policies;
}
void OAIStatefulServiceUpdateProperties::setServicePlacementPolicies(const QList<OAIServicePlacementPolicyDescription> &service_placement_policies) {
    m_service_placement_policies = service_placement_policies;
    m_service_placement_policies_isSet = true;
}

bool OAIStatefulServiceUpdateProperties::is_service_placement_policies_Set() const{
    return m_service_placement_policies_isSet;
}

bool OAIStatefulServiceUpdateProperties::is_service_placement_policies_Valid() const{
    return m_service_placement_policies_isValid;
}

bool OAIStatefulServiceUpdateProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_min_replica_set_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quorum_loss_wait_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_restart_wait_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stand_by_replica_keep_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_replica_set_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_kind.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_correlation_scheme.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_move_cost.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_constraints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_load_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_placement_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatefulServiceUpdateProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_kind_isValid && true;
}

} // namespace OpenAPI
