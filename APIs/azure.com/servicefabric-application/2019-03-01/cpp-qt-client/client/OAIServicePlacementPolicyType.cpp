/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServicePlacementPolicyType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServicePlacementPolicyType::OAIServicePlacementPolicyType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServicePlacementPolicyType::OAIServicePlacementPolicyType() {
    this->initializeModel();
}

OAIServicePlacementPolicyType::~OAIServicePlacementPolicyType() {}

void OAIServicePlacementPolicyType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIServicePlacementPolicyType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIServicePlacementPolicyType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Invalid", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServicePlacementPolicyType::INVALID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidDomain", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServicePlacementPolicyType::INVALIDDOMAIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RequiredDomain", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServicePlacementPolicyType::REQUIREDDOMAIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PreferredPrimaryDomain", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServicePlacementPolicyType::PREFERREDPRIMARYDOMAIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RequiredDomainDistribution", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServicePlacementPolicyType::REQUIREDDOMAINDISTRIBUTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NonPartiallyPlaceService", Qt::CaseInsensitive) == 0) {
        m_value = eOAIServicePlacementPolicyType::NONPARTIALLYPLACESERVICE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIServicePlacementPolicyType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIServicePlacementPolicyType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIServicePlacementPolicyType::INVALID:
            val = "Invalid";
            break;
        case eOAIServicePlacementPolicyType::INVALIDDOMAIN:
            val = "InvalidDomain";
            break;
        case eOAIServicePlacementPolicyType::REQUIREDDOMAIN:
            val = "RequiredDomain";
            break;
        case eOAIServicePlacementPolicyType::PREFERREDPRIMARYDOMAIN:
            val = "PreferredPrimaryDomain";
            break;
        case eOAIServicePlacementPolicyType::REQUIREDDOMAINDISTRIBUTION:
            val = "RequiredDomainDistribution";
            break;
        case eOAIServicePlacementPolicyType::NONPARTIALLYPLACESERVICE:
            val = "NonPartiallyPlaceService";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIServicePlacementPolicyType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIServicePlacementPolicyType::eOAIServicePlacementPolicyType OAIServicePlacementPolicyType::getValue() const {
    return m_value;
}

void OAIServicePlacementPolicyType::setValue(const OAIServicePlacementPolicyType::eOAIServicePlacementPolicyType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIServicePlacementPolicyType::isSet() const {
    
    return m_value_isSet;
}

bool OAIServicePlacementPolicyType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
