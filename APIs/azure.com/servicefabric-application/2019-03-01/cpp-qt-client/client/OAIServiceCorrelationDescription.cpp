/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceCorrelationDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceCorrelationDescription::OAIServiceCorrelationDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceCorrelationDescription::OAIServiceCorrelationDescription() {
    this->initializeModel();
}

OAIServiceCorrelationDescription::~OAIServiceCorrelationDescription() {}

void OAIServiceCorrelationDescription::initializeModel() {

    m_scheme_isSet = false;
    m_scheme_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;
}

void OAIServiceCorrelationDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceCorrelationDescription::fromJsonObject(QJsonObject json) {

    m_scheme_isValid = ::OpenAPI::fromJsonValue(m_scheme, json[QString("scheme")]);
    m_scheme_isSet = !json[QString("scheme")].isNull() && m_scheme_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;
}

QString OAIServiceCorrelationDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceCorrelationDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_scheme.isSet()) {
        obj.insert(QString("scheme"), ::OpenAPI::toJsonValue(m_scheme));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    return obj;
}

OAIServiceCorrelationScheme OAIServiceCorrelationDescription::getScheme() const {
    return m_scheme;
}
void OAIServiceCorrelationDescription::setScheme(const OAIServiceCorrelationScheme &scheme) {
    m_scheme = scheme;
    m_scheme_isSet = true;
}

bool OAIServiceCorrelationDescription::is_scheme_Set() const{
    return m_scheme_isSet;
}

bool OAIServiceCorrelationDescription::is_scheme_Valid() const{
    return m_scheme_isValid;
}

QString OAIServiceCorrelationDescription::getServiceName() const {
    return m_service_name;
}
void OAIServiceCorrelationDescription::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIServiceCorrelationDescription::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIServiceCorrelationDescription::is_service_name_Valid() const{
    return m_service_name_isValid;
}

bool OAIServiceCorrelationDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_scheme.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceCorrelationDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_scheme_isValid && m_service_name_isValid && true;
}

} // namespace OpenAPI
