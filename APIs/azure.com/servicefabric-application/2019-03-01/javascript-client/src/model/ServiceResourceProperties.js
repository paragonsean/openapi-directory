/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MoveCost from './MoveCost';
import PartitionSchemeDescription from './PartitionSchemeDescription';
import ServiceCorrelationDescription from './ServiceCorrelationDescription';
import ServiceKind from './ServiceKind';
import ServiceLoadMetricDescription from './ServiceLoadMetricDescription';
import ServicePlacementPolicyDescription from './ServicePlacementPolicyDescription';
import ServiceResourcePropertiesBase from './ServiceResourcePropertiesBase';

/**
 * The ServiceResourceProperties model module.
 * @module model/ServiceResourceProperties
 * @version 2019-03-01
 */
class ServiceResourceProperties {
    /**
     * Constructs a new <code>ServiceResourceProperties</code>.
     * The service resource properties.
     * @alias module:model/ServiceResourceProperties
     * @implements module:model/ServiceResourcePropertiesBase
     */
    constructor() { 
        ServiceResourcePropertiesBase.initialize(this);
        ServiceResourceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['serviceKind'] = serviceKind;
    }

    /**
     * Constructs a <code>ServiceResourceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceResourceProperties} obj Optional instance to populate.
     * @return {module:model/ServiceResourceProperties} The populated <code>ServiceResourceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceResourceProperties();
            ServiceResourcePropertiesBase.constructFromObject(data, obj);

            if (data.hasOwnProperty('partitionDescription')) {
                obj['partitionDescription'] = PartitionSchemeDescription.constructFromObject(data['partitionDescription']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('serviceKind')) {
                obj['serviceKind'] = ServiceKind.constructFromObject(data['serviceKind']);
            }
            if (data.hasOwnProperty('servicePackageActivationMode')) {
                obj['servicePackageActivationMode'] = ApiClient.convertToType(data['servicePackageActivationMode'], 'String');
            }
            if (data.hasOwnProperty('serviceTypeName')) {
                obj['serviceTypeName'] = ApiClient.convertToType(data['serviceTypeName'], 'String');
            }
            if (data.hasOwnProperty('correlationScheme')) {
                obj['correlationScheme'] = ApiClient.convertToType(data['correlationScheme'], [ServiceCorrelationDescription]);
            }
            if (data.hasOwnProperty('defaultMoveCost')) {
                obj['defaultMoveCost'] = MoveCost.constructFromObject(data['defaultMoveCost']);
            }
            if (data.hasOwnProperty('placementConstraints')) {
                obj['placementConstraints'] = ApiClient.convertToType(data['placementConstraints'], 'String');
            }
            if (data.hasOwnProperty('serviceLoadMetrics')) {
                obj['serviceLoadMetrics'] = ApiClient.convertToType(data['serviceLoadMetrics'], [ServiceLoadMetricDescription]);
            }
            if (data.hasOwnProperty('servicePlacementPolicies')) {
                obj['servicePlacementPolicies'] = ApiClient.convertToType(data['servicePlacementPolicies'], [ServicePlacementPolicyDescription]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceResourceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceResourceProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServiceResourceProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `partitionDescription`
        if (data['partitionDescription']) { // data not null
          PartitionSchemeDescription.validateJSON(data['partitionDescription']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['servicePackageActivationMode'] && !(typeof data['servicePackageActivationMode'] === 'string' || data['servicePackageActivationMode'] instanceof String)) {
            throw new Error("Expected the field `servicePackageActivationMode` to be a primitive type in the JSON string but got " + data['servicePackageActivationMode']);
        }
        // ensure the json data is a string
        if (data['serviceTypeName'] && !(typeof data['serviceTypeName'] === 'string' || data['serviceTypeName'] instanceof String)) {
            throw new Error("Expected the field `serviceTypeName` to be a primitive type in the JSON string but got " + data['serviceTypeName']);
        }
        if (data['correlationScheme']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['correlationScheme'])) {
                throw new Error("Expected the field `correlationScheme` to be an array in the JSON data but got " + data['correlationScheme']);
            }
            // validate the optional field `correlationScheme` (array)
            for (const item of data['correlationScheme']) {
                ServiceCorrelationDescription.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['placementConstraints'] && !(typeof data['placementConstraints'] === 'string' || data['placementConstraints'] instanceof String)) {
            throw new Error("Expected the field `placementConstraints` to be a primitive type in the JSON string but got " + data['placementConstraints']);
        }
        if (data['serviceLoadMetrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['serviceLoadMetrics'])) {
                throw new Error("Expected the field `serviceLoadMetrics` to be an array in the JSON data but got " + data['serviceLoadMetrics']);
            }
            // validate the optional field `serviceLoadMetrics` (array)
            for (const item of data['serviceLoadMetrics']) {
                ServiceLoadMetricDescription.validateJSON(item);
            };
        }
        if (data['servicePlacementPolicies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['servicePlacementPolicies'])) {
                throw new Error("Expected the field `servicePlacementPolicies` to be an array in the JSON data but got " + data['servicePlacementPolicies']);
            }
            // validate the optional field `servicePlacementPolicies` (array)
            for (const item of data['servicePlacementPolicies']) {
                ServicePlacementPolicyDescription.validateJSON(item);
            };
        }

        return true;
    }


}

ServiceResourceProperties.RequiredProperties = ["serviceKind"];

/**
 * @member {module:model/PartitionSchemeDescription} partitionDescription
 */
ServiceResourceProperties.prototype['partitionDescription'] = undefined;

/**
 * The current deployment or provisioning state, which only appears in the response
 * @member {String} provisioningState
 */
ServiceResourceProperties.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/ServiceKind} serviceKind
 */
ServiceResourceProperties.prototype['serviceKind'] = undefined;

/**
 * The activation Mode of the service package
 * @member {module:model/ServiceResourceProperties.ServicePackageActivationModeEnum} servicePackageActivationMode
 */
ServiceResourceProperties.prototype['servicePackageActivationMode'] = undefined;

/**
 * The name of the service type
 * @member {String} serviceTypeName
 */
ServiceResourceProperties.prototype['serviceTypeName'] = undefined;

/**
 * A list that describes the correlation of the service with other services.
 * @member {Array.<module:model/ServiceCorrelationDescription>} correlationScheme
 */
ServiceResourceProperties.prototype['correlationScheme'] = undefined;

/**
 * @member {module:model/MoveCost} defaultMoveCost
 */
ServiceResourceProperties.prototype['defaultMoveCost'] = undefined;

/**
 * The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: \"NodeColor == blue)\".
 * @member {String} placementConstraints
 */
ServiceResourceProperties.prototype['placementConstraints'] = undefined;

/**
 * The service load metrics is given as an array of ServiceLoadMetricDescription objects.
 * @member {Array.<module:model/ServiceLoadMetricDescription>} serviceLoadMetrics
 */
ServiceResourceProperties.prototype['serviceLoadMetrics'] = undefined;

/**
 * A list that describes the correlation of the service with other services.
 * @member {Array.<module:model/ServicePlacementPolicyDescription>} servicePlacementPolicies
 */
ServiceResourceProperties.prototype['servicePlacementPolicies'] = undefined;


// Implement ServiceResourcePropertiesBase interface:
/**
 * A list that describes the correlation of the service with other services.
 * @member {Array.<module:model/ServiceCorrelationDescription>} correlationScheme
 */
ServiceResourcePropertiesBase.prototype['correlationScheme'] = undefined;
/**
 * @member {module:model/MoveCost} defaultMoveCost
 */
ServiceResourcePropertiesBase.prototype['defaultMoveCost'] = undefined;
/**
 * The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: \"NodeColor == blue)\".
 * @member {String} placementConstraints
 */
ServiceResourcePropertiesBase.prototype['placementConstraints'] = undefined;
/**
 * The service load metrics is given as an array of ServiceLoadMetricDescription objects.
 * @member {Array.<module:model/ServiceLoadMetricDescription>} serviceLoadMetrics
 */
ServiceResourcePropertiesBase.prototype['serviceLoadMetrics'] = undefined;
/**
 * A list that describes the correlation of the service with other services.
 * @member {Array.<module:model/ServicePlacementPolicyDescription>} servicePlacementPolicies
 */
ServiceResourcePropertiesBase.prototype['servicePlacementPolicies'] = undefined;



/**
 * Allowed values for the <code>servicePackageActivationMode</code> property.
 * @enum {String}
 * @readonly
 */
ServiceResourceProperties['ServicePackageActivationModeEnum'] = {

    /**
     * value: "SharedProcess"
     * @const
     */
    "SharedProcess": "SharedProcess",

    /**
     * value: "ExclusiveProcess"
     * @const
     */
    "ExclusiveProcess": "ExclusiveProcess"
};



export default ServiceResourceProperties;

