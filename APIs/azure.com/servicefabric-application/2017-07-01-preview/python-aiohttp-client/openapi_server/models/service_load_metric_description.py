# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_load_metric_weight import ServiceLoadMetricWeight
from openapi_server import util


class ServiceLoadMetricDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_load: int=None, name: str=None, primary_default_load: int=None, secondary_default_load: int=None, weight: ServiceLoadMetricWeight=None):
        """ServiceLoadMetricDescription - a model defined in OpenAPI

        :param default_load: The default_load of this ServiceLoadMetricDescription.
        :param name: The name of this ServiceLoadMetricDescription.
        :param primary_default_load: The primary_default_load of this ServiceLoadMetricDescription.
        :param secondary_default_load: The secondary_default_load of this ServiceLoadMetricDescription.
        :param weight: The weight of this ServiceLoadMetricDescription.
        """
        self.openapi_types = {
            'default_load': int,
            'name': str,
            'primary_default_load': int,
            'secondary_default_load': int,
            'weight': ServiceLoadMetricWeight
        }

        self.attribute_map = {
            'default_load': 'DefaultLoad',
            'name': 'Name',
            'primary_default_load': 'PrimaryDefaultLoad',
            'secondary_default_load': 'SecondaryDefaultLoad',
            'weight': 'Weight'
        }

        self._default_load = default_load
        self._name = name
        self._primary_default_load = primary_default_load
        self._secondary_default_load = secondary_default_load
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceLoadMetricDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceLoadMetricDescription of this ServiceLoadMetricDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_load(self):
        """Gets the default_load of this ServiceLoadMetricDescription.

        Used only for Stateless services. The default amount of load, as a number, that this service creates for this metric.

        :return: The default_load of this ServiceLoadMetricDescription.
        :rtype: int
        """
        return self._default_load

    @default_load.setter
    def default_load(self, default_load):
        """Sets the default_load of this ServiceLoadMetricDescription.

        Used only for Stateless services. The default amount of load, as a number, that this service creates for this metric.

        :param default_load: The default_load of this ServiceLoadMetricDescription.
        :type default_load: int
        """

        self._default_load = default_load

    @property
    def name(self):
        """Gets the name of this ServiceLoadMetricDescription.

        The name of the metric. If the service chooses to report load during runtime, the load metric name should match the name that is specified in Name exactly. Note that metric names are case sensitive.

        :return: The name of this ServiceLoadMetricDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceLoadMetricDescription.

        The name of the metric. If the service chooses to report load during runtime, the load metric name should match the name that is specified in Name exactly. Note that metric names are case sensitive.

        :param name: The name of this ServiceLoadMetricDescription.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def primary_default_load(self):
        """Gets the primary_default_load of this ServiceLoadMetricDescription.

        Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Primary replica.

        :return: The primary_default_load of this ServiceLoadMetricDescription.
        :rtype: int
        """
        return self._primary_default_load

    @primary_default_load.setter
    def primary_default_load(self, primary_default_load):
        """Sets the primary_default_load of this ServiceLoadMetricDescription.

        Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Primary replica.

        :param primary_default_load: The primary_default_load of this ServiceLoadMetricDescription.
        :type primary_default_load: int
        """

        self._primary_default_load = primary_default_load

    @property
    def secondary_default_load(self):
        """Gets the secondary_default_load of this ServiceLoadMetricDescription.

        Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Secondary replica.

        :return: The secondary_default_load of this ServiceLoadMetricDescription.
        :rtype: int
        """
        return self._secondary_default_load

    @secondary_default_load.setter
    def secondary_default_load(self, secondary_default_load):
        """Sets the secondary_default_load of this ServiceLoadMetricDescription.

        Used only for Stateful services. The default amount of load, as a number, that this service creates for this metric when it is a Secondary replica.

        :param secondary_default_load: The secondary_default_load of this ServiceLoadMetricDescription.
        :type secondary_default_load: int
        """

        self._secondary_default_load = secondary_default_load

    @property
    def weight(self):
        """Gets the weight of this ServiceLoadMetricDescription.


        :return: The weight of this ServiceLoadMetricDescription.
        :rtype: ServiceLoadMetricWeight
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ServiceLoadMetricDescription.


        :param weight: The weight of this ServiceLoadMetricDescription.
        :type weight: ServiceLoadMetricWeight
        """

        self._weight = weight
