/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2017-07-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIArmApplicationHealthPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIArmApplicationHealthPolicy::OAIArmApplicationHealthPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIArmApplicationHealthPolicy::OAIArmApplicationHealthPolicy() {
    this->initializeModel();
}

OAIArmApplicationHealthPolicy::~OAIArmApplicationHealthPolicy() {}

void OAIArmApplicationHealthPolicy::initializeModel() {

    m_consider_warning_as_error_isSet = false;
    m_consider_warning_as_error_isValid = false;

    m_default_service_type_health_policy_isSet = false;
    m_default_service_type_health_policy_isValid = false;

    m_max_percent_unhealthy_deployed_applications_isSet = false;
    m_max_percent_unhealthy_deployed_applications_isValid = false;

    m_service_type_health_policy_map_isSet = false;
    m_service_type_health_policy_map_isValid = false;
}

void OAIArmApplicationHealthPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIArmApplicationHealthPolicy::fromJsonObject(QJsonObject json) {

    m_consider_warning_as_error_isValid = ::OpenAPI::fromJsonValue(m_consider_warning_as_error, json[QString("ConsiderWarningAsError")]);
    m_consider_warning_as_error_isSet = !json[QString("ConsiderWarningAsError")].isNull() && m_consider_warning_as_error_isValid;

    m_default_service_type_health_policy_isValid = ::OpenAPI::fromJsonValue(m_default_service_type_health_policy, json[QString("DefaultServiceTypeHealthPolicy")]);
    m_default_service_type_health_policy_isSet = !json[QString("DefaultServiceTypeHealthPolicy")].isNull() && m_default_service_type_health_policy_isValid;

    m_max_percent_unhealthy_deployed_applications_isValid = ::OpenAPI::fromJsonValue(m_max_percent_unhealthy_deployed_applications, json[QString("MaxPercentUnhealthyDeployedApplications")]);
    m_max_percent_unhealthy_deployed_applications_isSet = !json[QString("MaxPercentUnhealthyDeployedApplications")].isNull() && m_max_percent_unhealthy_deployed_applications_isValid;

    m_service_type_health_policy_map_isValid = ::OpenAPI::fromJsonValue(m_service_type_health_policy_map, json[QString("ServiceTypeHealthPolicyMap")]);
    m_service_type_health_policy_map_isSet = !json[QString("ServiceTypeHealthPolicyMap")].isNull() && m_service_type_health_policy_map_isValid;
}

QString OAIArmApplicationHealthPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIArmApplicationHealthPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_consider_warning_as_error_isSet) {
        obj.insert(QString("ConsiderWarningAsError"), ::OpenAPI::toJsonValue(m_consider_warning_as_error));
    }
    if (m_default_service_type_health_policy.isSet()) {
        obj.insert(QString("DefaultServiceTypeHealthPolicy"), ::OpenAPI::toJsonValue(m_default_service_type_health_policy));
    }
    if (m_max_percent_unhealthy_deployed_applications_isSet) {
        obj.insert(QString("MaxPercentUnhealthyDeployedApplications"), ::OpenAPI::toJsonValue(m_max_percent_unhealthy_deployed_applications));
    }
    if (m_service_type_health_policy_map.size() > 0) {
        obj.insert(QString("ServiceTypeHealthPolicyMap"), ::OpenAPI::toJsonValue(m_service_type_health_policy_map));
    }
    return obj;
}

bool OAIArmApplicationHealthPolicy::isConsiderWarningAsError() const {
    return m_consider_warning_as_error;
}
void OAIArmApplicationHealthPolicy::setConsiderWarningAsError(const bool &consider_warning_as_error) {
    m_consider_warning_as_error = consider_warning_as_error;
    m_consider_warning_as_error_isSet = true;
}

bool OAIArmApplicationHealthPolicy::is_consider_warning_as_error_Set() const{
    return m_consider_warning_as_error_isSet;
}

bool OAIArmApplicationHealthPolicy::is_consider_warning_as_error_Valid() const{
    return m_consider_warning_as_error_isValid;
}

OAIArmServiceTypeHealthPolicy OAIArmApplicationHealthPolicy::getDefaultServiceTypeHealthPolicy() const {
    return m_default_service_type_health_policy;
}
void OAIArmApplicationHealthPolicy::setDefaultServiceTypeHealthPolicy(const OAIArmServiceTypeHealthPolicy &default_service_type_health_policy) {
    m_default_service_type_health_policy = default_service_type_health_policy;
    m_default_service_type_health_policy_isSet = true;
}

bool OAIArmApplicationHealthPolicy::is_default_service_type_health_policy_Set() const{
    return m_default_service_type_health_policy_isSet;
}

bool OAIArmApplicationHealthPolicy::is_default_service_type_health_policy_Valid() const{
    return m_default_service_type_health_policy_isValid;
}

qint32 OAIArmApplicationHealthPolicy::getMaxPercentUnhealthyDeployedApplications() const {
    return m_max_percent_unhealthy_deployed_applications;
}
void OAIArmApplicationHealthPolicy::setMaxPercentUnhealthyDeployedApplications(const qint32 &max_percent_unhealthy_deployed_applications) {
    m_max_percent_unhealthy_deployed_applications = max_percent_unhealthy_deployed_applications;
    m_max_percent_unhealthy_deployed_applications_isSet = true;
}

bool OAIArmApplicationHealthPolicy::is_max_percent_unhealthy_deployed_applications_Set() const{
    return m_max_percent_unhealthy_deployed_applications_isSet;
}

bool OAIArmApplicationHealthPolicy::is_max_percent_unhealthy_deployed_applications_Valid() const{
    return m_max_percent_unhealthy_deployed_applications_isValid;
}

QMap<QString, OAIArmServiceTypeHealthPolicy> OAIArmApplicationHealthPolicy::getServiceTypeHealthPolicyMap() const {
    return m_service_type_health_policy_map;
}
void OAIArmApplicationHealthPolicy::setServiceTypeHealthPolicyMap(const QMap<QString, OAIArmServiceTypeHealthPolicy> &service_type_health_policy_map) {
    m_service_type_health_policy_map = service_type_health_policy_map;
    m_service_type_health_policy_map_isSet = true;
}

bool OAIArmApplicationHealthPolicy::is_service_type_health_policy_map_Set() const{
    return m_service_type_health_policy_map_isSet;
}

bool OAIArmApplicationHealthPolicy::is_service_type_health_policy_map_Valid() const{
    return m_service_type_health_policy_map_isValid;
}

bool OAIArmApplicationHealthPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consider_warning_as_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_service_type_health_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_percent_unhealthy_deployed_applications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_type_health_policy_map.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIArmApplicationHealthPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
