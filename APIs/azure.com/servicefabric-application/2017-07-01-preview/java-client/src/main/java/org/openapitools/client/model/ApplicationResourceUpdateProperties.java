/*
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2017-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ApplicationMetricDescription;
import org.openapitools.client.model.ApplicationUpgradePolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The application resource properties for patch operations.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:54:15.512136-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationResourceUpdateProperties {
  public static final String SERIALIZED_NAME_MAXIMUM_NODES = "maximumNodes";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_NODES)
  private Long maximumNodes = 0l;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<ApplicationMetricDescription> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_MINIMUM_NODES = "minimumNodes";
  @SerializedName(SERIALIZED_NAME_MINIMUM_NODES)
  private Long minimumNodes;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, String> parameters = new HashMap<>();

  public static final String SERIALIZED_NAME_REMOVE_APPLICATION_CAPACITY = "removeApplicationCapacity";
  @SerializedName(SERIALIZED_NAME_REMOVE_APPLICATION_CAPACITY)
  private Boolean removeApplicationCapacity;

  public static final String SERIALIZED_NAME_TYPE_VERSION = "typeVersion";
  @SerializedName(SERIALIZED_NAME_TYPE_VERSION)
  private String typeVersion;

  public static final String SERIALIZED_NAME_UPGRADE_POLICY = "upgradePolicy";
  @SerializedName(SERIALIZED_NAME_UPGRADE_POLICY)
  private ApplicationUpgradePolicy upgradePolicy;

  public ApplicationResourceUpdateProperties() {
  }

  public ApplicationResourceUpdateProperties maximumNodes(Long maximumNodes) {
    this.maximumNodes = maximumNodes;
    return this;
  }

  /**
   * The maximum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. By default, the value of this property is zero and it means that the services can be placed on any node.
   * minimum: 0
   * @return maximumNodes
   */
  @javax.annotation.Nullable
  public Long getMaximumNodes() {
    return maximumNodes;
  }

  public void setMaximumNodes(Long maximumNodes) {
    this.maximumNodes = maximumNodes;
  }


  public ApplicationResourceUpdateProperties metrics(List<ApplicationMetricDescription> metrics) {
    this.metrics = metrics;
    return this;
  }

  public ApplicationResourceUpdateProperties addMetricsItem(ApplicationMetricDescription metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * List of application capacity metric description.
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<ApplicationMetricDescription> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<ApplicationMetricDescription> metrics) {
    this.metrics = metrics;
  }


  public ApplicationResourceUpdateProperties minimumNodes(Long minimumNodes) {
    this.minimumNodes = minimumNodes;
    return this;
  }

  /**
   * The minimum number of nodes where Service Fabric will reserve capacity for this application. Note that this does not mean that the services of this application will be placed on all of those nodes. If this property is set to zero, no capacity will be reserved. The value of this property cannot be more than the value of the MaximumNodes property.
   * minimum: 0
   * @return minimumNodes
   */
  @javax.annotation.Nullable
  public Long getMinimumNodes() {
    return minimumNodes;
  }

  public void setMinimumNodes(Long minimumNodes) {
    this.minimumNodes = minimumNodes;
  }


  public ApplicationResourceUpdateProperties parameters(Map<String, String> parameters) {
    this.parameters = parameters;
    return this;
  }

  public ApplicationResourceUpdateProperties putParametersItem(String key, String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * List of application parameters with overridden values from their default values specified in the application manifest.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, String> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, String> parameters) {
    this.parameters = parameters;
  }


  public ApplicationResourceUpdateProperties removeApplicationCapacity(Boolean removeApplicationCapacity) {
    this.removeApplicationCapacity = removeApplicationCapacity;
    return this;
  }

  /**
   * Remove the current application capacity settings.
   * @return removeApplicationCapacity
   */
  @javax.annotation.Nullable
  public Boolean getRemoveApplicationCapacity() {
    return removeApplicationCapacity;
  }

  public void setRemoveApplicationCapacity(Boolean removeApplicationCapacity) {
    this.removeApplicationCapacity = removeApplicationCapacity;
  }


  public ApplicationResourceUpdateProperties typeVersion(String typeVersion) {
    this.typeVersion = typeVersion;
    return this;
  }

  /**
   * The version of the application type as defined in the application manifest.
   * @return typeVersion
   */
  @javax.annotation.Nullable
  public String getTypeVersion() {
    return typeVersion;
  }

  public void setTypeVersion(String typeVersion) {
    this.typeVersion = typeVersion;
  }


  public ApplicationResourceUpdateProperties upgradePolicy(ApplicationUpgradePolicy upgradePolicy) {
    this.upgradePolicy = upgradePolicy;
    return this;
  }

  /**
   * Get upgradePolicy
   * @return upgradePolicy
   */
  @javax.annotation.Nullable
  public ApplicationUpgradePolicy getUpgradePolicy() {
    return upgradePolicy;
  }

  public void setUpgradePolicy(ApplicationUpgradePolicy upgradePolicy) {
    this.upgradePolicy = upgradePolicy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationResourceUpdateProperties applicationResourceUpdateProperties = (ApplicationResourceUpdateProperties) o;
    return Objects.equals(this.maximumNodes, applicationResourceUpdateProperties.maximumNodes) &&
        Objects.equals(this.metrics, applicationResourceUpdateProperties.metrics) &&
        Objects.equals(this.minimumNodes, applicationResourceUpdateProperties.minimumNodes) &&
        Objects.equals(this.parameters, applicationResourceUpdateProperties.parameters) &&
        Objects.equals(this.removeApplicationCapacity, applicationResourceUpdateProperties.removeApplicationCapacity) &&
        Objects.equals(this.typeVersion, applicationResourceUpdateProperties.typeVersion) &&
        Objects.equals(this.upgradePolicy, applicationResourceUpdateProperties.upgradePolicy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maximumNodes, metrics, minimumNodes, parameters, removeApplicationCapacity, typeVersion, upgradePolicy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationResourceUpdateProperties {\n");
    sb.append("    maximumNodes: ").append(toIndentedString(maximumNodes)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    minimumNodes: ").append(toIndentedString(minimumNodes)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    removeApplicationCapacity: ").append(toIndentedString(removeApplicationCapacity)).append("\n");
    sb.append("    typeVersion: ").append(toIndentedString(typeVersion)).append("\n");
    sb.append("    upgradePolicy: ").append(toIndentedString(upgradePolicy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("maximumNodes");
    openapiFields.add("metrics");
    openapiFields.add("minimumNodes");
    openapiFields.add("parameters");
    openapiFields.add("removeApplicationCapacity");
    openapiFields.add("typeVersion");
    openapiFields.add("upgradePolicy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationResourceUpdateProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationResourceUpdateProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationResourceUpdateProperties is not found in the empty JSON string", ApplicationResourceUpdateProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationResourceUpdateProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationResourceUpdateProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull()) {
        JsonArray jsonArraymetrics = jsonObj.getAsJsonArray("metrics");
        if (jsonArraymetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
          }

          // validate the optional field `metrics` (array)
          for (int i = 0; i < jsonArraymetrics.size(); i++) {
            ApplicationMetricDescription.validateJsonElement(jsonArraymetrics.get(i));
          };
        }
      }
      if ((jsonObj.get("typeVersion") != null && !jsonObj.get("typeVersion").isJsonNull()) && !jsonObj.get("typeVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeVersion").toString()));
      }
      // validate the optional field `upgradePolicy`
      if (jsonObj.get("upgradePolicy") != null && !jsonObj.get("upgradePolicy").isJsonNull()) {
        ApplicationUpgradePolicy.validateJsonElement(jsonObj.get("upgradePolicy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationResourceUpdateProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationResourceUpdateProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationResourceUpdateProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationResourceUpdateProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationResourceUpdateProperties>() {
           @Override
           public void write(JsonWriter out, ApplicationResourceUpdateProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationResourceUpdateProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationResourceUpdateProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationResourceUpdateProperties
   * @throws IOException if the JSON string is invalid with respect to ApplicationResourceUpdateProperties
   */
  public static ApplicationResourceUpdateProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationResourceUpdateProperties.class);
  }

  /**
   * Convert an instance of ApplicationResourceUpdateProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

