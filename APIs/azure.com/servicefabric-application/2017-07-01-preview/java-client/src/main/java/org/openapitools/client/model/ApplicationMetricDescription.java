/*
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2017-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes capacity information for a custom resource balancing metric. This can be used to limit the total consumption of this metric by the services of this application. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:54:15.512136-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationMetricDescription {
  public static final String SERIALIZED_NAME_MAXIMUM_CAPACITY = "MaximumCapacity";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_CAPACITY)
  private Long maximumCapacity;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESERVATION_CAPACITY = "ReservationCapacity";
  @SerializedName(SERIALIZED_NAME_RESERVATION_CAPACITY)
  private Long reservationCapacity;

  public static final String SERIALIZED_NAME_TOTAL_APPLICATION_CAPACITY = "TotalApplicationCapacity";
  @SerializedName(SERIALIZED_NAME_TOTAL_APPLICATION_CAPACITY)
  private Long totalApplicationCapacity;

  public ApplicationMetricDescription() {
  }

  public ApplicationMetricDescription maximumCapacity(Long maximumCapacity) {
    this.maximumCapacity = maximumCapacity;
    return this;
  }

  /**
   * The maximum node capacity for Service Fabric application. This is the maximum Load for an instance of this application on a single node. Even if the capacity of node is greater than this value, Service Fabric will limit the total load of services within the application on each node to this value. If set to zero, capacity for this metric is unlimited on each node. When creating a new application with application capacity defined, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity. When updating existing application with application capacity, the product of MaximumNodes and this value must always be smaller than or equal to TotalApplicationCapacity. 
   * @return maximumCapacity
   */
  @javax.annotation.Nullable
  public Long getMaximumCapacity() {
    return maximumCapacity;
  }

  public void setMaximumCapacity(Long maximumCapacity) {
    this.maximumCapacity = maximumCapacity;
  }


  public ApplicationMetricDescription name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the metric.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ApplicationMetricDescription reservationCapacity(Long reservationCapacity) {
    this.reservationCapacity = reservationCapacity;
    return this;
  }

  /**
   * The node reservation capacity for Service Fabric application. This is the amount of load which is reserved on nodes which have instances of this application. If MinimumNodes is specified, then the product of these values will be the capacity reserved in the cluster for the application. If set to zero, no capacity is reserved for this metric. When setting application capacity or when updating application capacity; this value must be smaller than or equal to MaximumCapacity for each metric. 
   * @return reservationCapacity
   */
  @javax.annotation.Nullable
  public Long getReservationCapacity() {
    return reservationCapacity;
  }

  public void setReservationCapacity(Long reservationCapacity) {
    this.reservationCapacity = reservationCapacity;
  }


  public ApplicationMetricDescription totalApplicationCapacity(Long totalApplicationCapacity) {
    this.totalApplicationCapacity = totalApplicationCapacity;
    return this;
  }

  /**
   * The total metric capacity for Service Fabric application. This is the total metric capacity for this application in the cluster. Service Fabric will try to limit the sum of loads of services within the application to this value. When creating a new application with application capacity defined, the product of MaximumNodes and MaximumCapacity must always be smaller than or equal to this value. 
   * @return totalApplicationCapacity
   */
  @javax.annotation.Nullable
  public Long getTotalApplicationCapacity() {
    return totalApplicationCapacity;
  }

  public void setTotalApplicationCapacity(Long totalApplicationCapacity) {
    this.totalApplicationCapacity = totalApplicationCapacity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationMetricDescription applicationMetricDescription = (ApplicationMetricDescription) o;
    return Objects.equals(this.maximumCapacity, applicationMetricDescription.maximumCapacity) &&
        Objects.equals(this.name, applicationMetricDescription.name) &&
        Objects.equals(this.reservationCapacity, applicationMetricDescription.reservationCapacity) &&
        Objects.equals(this.totalApplicationCapacity, applicationMetricDescription.totalApplicationCapacity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maximumCapacity, name, reservationCapacity, totalApplicationCapacity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationMetricDescription {\n");
    sb.append("    maximumCapacity: ").append(toIndentedString(maximumCapacity)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    reservationCapacity: ").append(toIndentedString(reservationCapacity)).append("\n");
    sb.append("    totalApplicationCapacity: ").append(toIndentedString(totalApplicationCapacity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MaximumCapacity");
    openapiFields.add("Name");
    openapiFields.add("ReservationCapacity");
    openapiFields.add("TotalApplicationCapacity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationMetricDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationMetricDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationMetricDescription is not found in the empty JSON string", ApplicationMetricDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationMetricDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationMetricDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationMetricDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationMetricDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationMetricDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationMetricDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationMetricDescription>() {
           @Override
           public void write(JsonWriter out, ApplicationMetricDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationMetricDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationMetricDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationMetricDescription
   * @throws IOException if the JSON string is invalid with respect to ApplicationMetricDescription
   */
  public static ApplicationMetricDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationMetricDescription.class);
  }

  /**
   * Convert an instance of ApplicationMetricDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

