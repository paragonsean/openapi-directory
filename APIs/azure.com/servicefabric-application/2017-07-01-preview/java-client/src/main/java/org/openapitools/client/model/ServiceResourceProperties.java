/*
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2017-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MoveCost;
import org.openapitools.client.model.PartitionSchemeDescription;
import org.openapitools.client.model.ServiceCorrelationDescription;
import org.openapitools.client.model.ServiceKind;
import org.openapitools.client.model.ServiceLoadMetricDescription;
import org.openapitools.client.model.ServicePlacementPolicyDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The service resource properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:54:15.512136-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceResourceProperties {
  public static final String SERIALIZED_NAME_PARTITION_DESCRIPTION = "partitionDescription";
  @SerializedName(SERIALIZED_NAME_PARTITION_DESCRIPTION)
  private PartitionSchemeDescription partitionDescription;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_SERVICE_KIND = "serviceKind";
  @SerializedName(SERIALIZED_NAME_SERVICE_KIND)
  private ServiceKind serviceKind;

  public static final String SERIALIZED_NAME_SERVICE_TYPE_NAME = "serviceTypeName";
  @SerializedName(SERIALIZED_NAME_SERVICE_TYPE_NAME)
  private String serviceTypeName;

  public static final String SERIALIZED_NAME_CORRELATION_SCHEME = "correlationScheme";
  @SerializedName(SERIALIZED_NAME_CORRELATION_SCHEME)
  private List<ServiceCorrelationDescription> correlationScheme = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEFAULT_MOVE_COST = "defaultMoveCost";
  @SerializedName(SERIALIZED_NAME_DEFAULT_MOVE_COST)
  private MoveCost defaultMoveCost;

  public static final String SERIALIZED_NAME_PLACEMENT_CONSTRAINTS = "placementConstraints";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_CONSTRAINTS)
  private String placementConstraints;

  public static final String SERIALIZED_NAME_SERVICE_LOAD_METRICS = "serviceLoadMetrics";
  @SerializedName(SERIALIZED_NAME_SERVICE_LOAD_METRICS)
  private List<ServiceLoadMetricDescription> serviceLoadMetrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_PLACEMENT_POLICIES = "servicePlacementPolicies";
  @SerializedName(SERIALIZED_NAME_SERVICE_PLACEMENT_POLICIES)
  private List<ServicePlacementPolicyDescription> servicePlacementPolicies = new ArrayList<>();

  public ServiceResourceProperties() {
  }

  public ServiceResourceProperties(
     String provisioningState
  ) {
    this();
    this.provisioningState = provisioningState;
  }

  public ServiceResourceProperties partitionDescription(PartitionSchemeDescription partitionDescription) {
    this.partitionDescription = partitionDescription;
    return this;
  }

  /**
   * Get partitionDescription
   * @return partitionDescription
   */
  @javax.annotation.Nullable
  public PartitionSchemeDescription getPartitionDescription() {
    return partitionDescription;
  }

  public void setPartitionDescription(PartitionSchemeDescription partitionDescription) {
    this.partitionDescription = partitionDescription;
  }


  /**
   * The current deployment or provisioning state, which only appears in the response
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  public ServiceResourceProperties serviceKind(ServiceKind serviceKind) {
    this.serviceKind = serviceKind;
    return this;
  }

  /**
   * Get serviceKind
   * @return serviceKind
   */
  @javax.annotation.Nonnull
  public ServiceKind getServiceKind() {
    return serviceKind;
  }

  public void setServiceKind(ServiceKind serviceKind) {
    this.serviceKind = serviceKind;
  }


  public ServiceResourceProperties serviceTypeName(String serviceTypeName) {
    this.serviceTypeName = serviceTypeName;
    return this;
  }

  /**
   * The name of the service type
   * @return serviceTypeName
   */
  @javax.annotation.Nullable
  public String getServiceTypeName() {
    return serviceTypeName;
  }

  public void setServiceTypeName(String serviceTypeName) {
    this.serviceTypeName = serviceTypeName;
  }


  public ServiceResourceProperties correlationScheme(List<ServiceCorrelationDescription> correlationScheme) {
    this.correlationScheme = correlationScheme;
    return this;
  }

  public ServiceResourceProperties addCorrelationSchemeItem(ServiceCorrelationDescription correlationSchemeItem) {
    if (this.correlationScheme == null) {
      this.correlationScheme = new ArrayList<>();
    }
    this.correlationScheme.add(correlationSchemeItem);
    return this;
  }

  /**
   * A list that describes the correlation of the service with other services.
   * @return correlationScheme
   */
  @javax.annotation.Nullable
  public List<ServiceCorrelationDescription> getCorrelationScheme() {
    return correlationScheme;
  }

  public void setCorrelationScheme(List<ServiceCorrelationDescription> correlationScheme) {
    this.correlationScheme = correlationScheme;
  }


  public ServiceResourceProperties defaultMoveCost(MoveCost defaultMoveCost) {
    this.defaultMoveCost = defaultMoveCost;
    return this;
  }

  /**
   * Get defaultMoveCost
   * @return defaultMoveCost
   */
  @javax.annotation.Nullable
  public MoveCost getDefaultMoveCost() {
    return defaultMoveCost;
  }

  public void setDefaultMoveCost(MoveCost defaultMoveCost) {
    this.defaultMoveCost = defaultMoveCost;
  }


  public ServiceResourceProperties placementConstraints(String placementConstraints) {
    this.placementConstraints = placementConstraints;
    return this;
  }

  /**
   * The placement constraints as a string. Placement constraints are boolean expressions on node properties and allow for restricting a service to particular nodes based on the service requirements. For example, to place a service on nodes where NodeType is blue specify the following: \&quot;NodeColor &#x3D;&#x3D; blue)\&quot;.
   * @return placementConstraints
   */
  @javax.annotation.Nullable
  public String getPlacementConstraints() {
    return placementConstraints;
  }

  public void setPlacementConstraints(String placementConstraints) {
    this.placementConstraints = placementConstraints;
  }


  public ServiceResourceProperties serviceLoadMetrics(List<ServiceLoadMetricDescription> serviceLoadMetrics) {
    this.serviceLoadMetrics = serviceLoadMetrics;
    return this;
  }

  public ServiceResourceProperties addServiceLoadMetricsItem(ServiceLoadMetricDescription serviceLoadMetricsItem) {
    if (this.serviceLoadMetrics == null) {
      this.serviceLoadMetrics = new ArrayList<>();
    }
    this.serviceLoadMetrics.add(serviceLoadMetricsItem);
    return this;
  }

  /**
   * The service load metrics is given as an array of ServiceLoadMetricDescription objects.
   * @return serviceLoadMetrics
   */
  @javax.annotation.Nullable
  public List<ServiceLoadMetricDescription> getServiceLoadMetrics() {
    return serviceLoadMetrics;
  }

  public void setServiceLoadMetrics(List<ServiceLoadMetricDescription> serviceLoadMetrics) {
    this.serviceLoadMetrics = serviceLoadMetrics;
  }


  public ServiceResourceProperties servicePlacementPolicies(List<ServicePlacementPolicyDescription> servicePlacementPolicies) {
    this.servicePlacementPolicies = servicePlacementPolicies;
    return this;
  }

  public ServiceResourceProperties addServicePlacementPoliciesItem(ServicePlacementPolicyDescription servicePlacementPoliciesItem) {
    if (this.servicePlacementPolicies == null) {
      this.servicePlacementPolicies = new ArrayList<>();
    }
    this.servicePlacementPolicies.add(servicePlacementPoliciesItem);
    return this;
  }

  /**
   * A list that describes the correlation of the service with other services.
   * @return servicePlacementPolicies
   */
  @javax.annotation.Nullable
  public List<ServicePlacementPolicyDescription> getServicePlacementPolicies() {
    return servicePlacementPolicies;
  }

  public void setServicePlacementPolicies(List<ServicePlacementPolicyDescription> servicePlacementPolicies) {
    this.servicePlacementPolicies = servicePlacementPolicies;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceResourceProperties serviceResourceProperties = (ServiceResourceProperties) o;
    return Objects.equals(this.partitionDescription, serviceResourceProperties.partitionDescription) &&
        Objects.equals(this.provisioningState, serviceResourceProperties.provisioningState) &&
        Objects.equals(this.serviceKind, serviceResourceProperties.serviceKind) &&
        Objects.equals(this.serviceTypeName, serviceResourceProperties.serviceTypeName) &&
        Objects.equals(this.correlationScheme, serviceResourceProperties.correlationScheme) &&
        Objects.equals(this.defaultMoveCost, serviceResourceProperties.defaultMoveCost) &&
        Objects.equals(this.placementConstraints, serviceResourceProperties.placementConstraints) &&
        Objects.equals(this.serviceLoadMetrics, serviceResourceProperties.serviceLoadMetrics) &&
        Objects.equals(this.servicePlacementPolicies, serviceResourceProperties.servicePlacementPolicies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(partitionDescription, provisioningState, serviceKind, serviceTypeName, correlationScheme, defaultMoveCost, placementConstraints, serviceLoadMetrics, servicePlacementPolicies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceResourceProperties {\n");
    sb.append("    partitionDescription: ").append(toIndentedString(partitionDescription)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    serviceKind: ").append(toIndentedString(serviceKind)).append("\n");
    sb.append("    serviceTypeName: ").append(toIndentedString(serviceTypeName)).append("\n");
    sb.append("    correlationScheme: ").append(toIndentedString(correlationScheme)).append("\n");
    sb.append("    defaultMoveCost: ").append(toIndentedString(defaultMoveCost)).append("\n");
    sb.append("    placementConstraints: ").append(toIndentedString(placementConstraints)).append("\n");
    sb.append("    serviceLoadMetrics: ").append(toIndentedString(serviceLoadMetrics)).append("\n");
    sb.append("    servicePlacementPolicies: ").append(toIndentedString(servicePlacementPolicies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("correlationScheme");
    openapiFields.add("defaultMoveCost");
    openapiFields.add("placementConstraints");
    openapiFields.add("serviceLoadMetrics");
    openapiFields.add("servicePlacementPolicies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("serviceKind");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceResourceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceResourceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceResourceProperties is not found in the empty JSON string", ServiceResourceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceResourceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceResourceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServiceResourceProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `partitionDescription`
      if (jsonObj.get("partitionDescription") != null && !jsonObj.get("partitionDescription").isJsonNull()) {
        PartitionSchemeDescription.validateJsonElement(jsonObj.get("partitionDescription"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the required field `serviceKind`
      ServiceKind.validateJsonElement(jsonObj.get("serviceKind"));
      if ((jsonObj.get("serviceTypeName") != null && !jsonObj.get("serviceTypeName").isJsonNull()) && !jsonObj.get("serviceTypeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceTypeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceTypeName").toString()));
      }
      if (jsonObj.get("correlationScheme") != null && !jsonObj.get("correlationScheme").isJsonNull()) {
        JsonArray jsonArraycorrelationScheme = jsonObj.getAsJsonArray("correlationScheme");
        if (jsonArraycorrelationScheme != null) {
          // ensure the json data is an array
          if (!jsonObj.get("correlationScheme").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `correlationScheme` to be an array in the JSON string but got `%s`", jsonObj.get("correlationScheme").toString()));
          }

          // validate the optional field `correlationScheme` (array)
          for (int i = 0; i < jsonArraycorrelationScheme.size(); i++) {
            ServiceCorrelationDescription.validateJsonElement(jsonArraycorrelationScheme.get(i));
          };
        }
      }
      // validate the optional field `defaultMoveCost`
      if (jsonObj.get("defaultMoveCost") != null && !jsonObj.get("defaultMoveCost").isJsonNull()) {
        MoveCost.validateJsonElement(jsonObj.get("defaultMoveCost"));
      }
      if ((jsonObj.get("placementConstraints") != null && !jsonObj.get("placementConstraints").isJsonNull()) && !jsonObj.get("placementConstraints").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placementConstraints` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placementConstraints").toString()));
      }
      if (jsonObj.get("serviceLoadMetrics") != null && !jsonObj.get("serviceLoadMetrics").isJsonNull()) {
        JsonArray jsonArrayserviceLoadMetrics = jsonObj.getAsJsonArray("serviceLoadMetrics");
        if (jsonArrayserviceLoadMetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("serviceLoadMetrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `serviceLoadMetrics` to be an array in the JSON string but got `%s`", jsonObj.get("serviceLoadMetrics").toString()));
          }

          // validate the optional field `serviceLoadMetrics` (array)
          for (int i = 0; i < jsonArrayserviceLoadMetrics.size(); i++) {
            ServiceLoadMetricDescription.validateJsonElement(jsonArrayserviceLoadMetrics.get(i));
          };
        }
      }
      if (jsonObj.get("servicePlacementPolicies") != null && !jsonObj.get("servicePlacementPolicies").isJsonNull()) {
        JsonArray jsonArrayservicePlacementPolicies = jsonObj.getAsJsonArray("servicePlacementPolicies");
        if (jsonArrayservicePlacementPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("servicePlacementPolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `servicePlacementPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("servicePlacementPolicies").toString()));
          }

          // validate the optional field `servicePlacementPolicies` (array)
          for (int i = 0; i < jsonArrayservicePlacementPolicies.size(); i++) {
            ServicePlacementPolicyDescription.validateJsonElement(jsonArrayservicePlacementPolicies.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceResourceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceResourceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceResourceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceResourceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceResourceProperties>() {
           @Override
           public void write(JsonWriter out, ServiceResourceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceResourceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceResourceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceResourceProperties
   * @throws IOException if the JSON string is invalid with respect to ServiceResourceProperties
   */
  public static ServiceResourceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceResourceProperties.class);
  }

  /**
   * Convert an instance of ServiceResourceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

