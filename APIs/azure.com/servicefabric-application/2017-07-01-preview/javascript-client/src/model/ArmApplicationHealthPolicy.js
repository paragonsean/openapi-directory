/**
 * ServiceFabricManagementClient
 * Azure Service Fabric Resource Provider API Client
 *
 * The version of the OpenAPI document: 2017-07-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArmServiceTypeHealthPolicy from './ArmServiceTypeHealthPolicy';

/**
 * The ArmApplicationHealthPolicy model module.
 * @module model/ArmApplicationHealthPolicy
 * @version 2017-07-01-preview
 */
class ArmApplicationHealthPolicy {
    /**
     * Constructs a new <code>ArmApplicationHealthPolicy</code>.
     * Defines a health policy used to evaluate the health of an application or one of its children entities. 
     * @alias module:model/ArmApplicationHealthPolicy
     */
    constructor() { 
        
        ArmApplicationHealthPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['ConsiderWarningAsError'] = false;
    }

    /**
     * Constructs a <code>ArmApplicationHealthPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ArmApplicationHealthPolicy} obj Optional instance to populate.
     * @return {module:model/ArmApplicationHealthPolicy} The populated <code>ArmApplicationHealthPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ArmApplicationHealthPolicy();

            if (data.hasOwnProperty('ConsiderWarningAsError')) {
                obj['ConsiderWarningAsError'] = ApiClient.convertToType(data['ConsiderWarningAsError'], 'Boolean');
            }
            if (data.hasOwnProperty('DefaultServiceTypeHealthPolicy')) {
                obj['DefaultServiceTypeHealthPolicy'] = ArmServiceTypeHealthPolicy.constructFromObject(data['DefaultServiceTypeHealthPolicy']);
            }
            if (data.hasOwnProperty('MaxPercentUnhealthyDeployedApplications')) {
                obj['MaxPercentUnhealthyDeployedApplications'] = ApiClient.convertToType(data['MaxPercentUnhealthyDeployedApplications'], 'Number');
            }
            if (data.hasOwnProperty('ServiceTypeHealthPolicyMap')) {
                obj['ServiceTypeHealthPolicyMap'] = ApiClient.convertToType(data['ServiceTypeHealthPolicyMap'], {'String': ArmServiceTypeHealthPolicy});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ArmApplicationHealthPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArmApplicationHealthPolicy</code>.
     */
    static validateJSON(data) {
        // validate the optional field `DefaultServiceTypeHealthPolicy`
        if (data['DefaultServiceTypeHealthPolicy']) { // data not null
          ArmServiceTypeHealthPolicy.validateJSON(data['DefaultServiceTypeHealthPolicy']);
        }

        return true;
    }


}



/**
 * Indicates whether warnings are treated with the same severity as errors.
 * @member {Boolean} ConsiderWarningAsError
 * @default false
 */
ArmApplicationHealthPolicy.prototype['ConsiderWarningAsError'] = false;

/**
 * @member {module:model/ArmServiceTypeHealthPolicy} DefaultServiceTypeHealthPolicy
 */
ArmApplicationHealthPolicy.prototype['DefaultServiceTypeHealthPolicy'] = undefined;

/**
 * The maximum allowed percentage of unhealthy deployed applications. Allowed values are Byte values from zero to 100. The percentage represents the maximum tolerated percentage of deployed applications that can be unhealthy before the application is considered in error. This is calculated by dividing the number of unhealthy deployed applications over the number of nodes where the application is currently deployed on in the cluster. The computation rounds up to tolerate one failure on small numbers of nodes. Default percentage is zero. 
 * @member {Number} MaxPercentUnhealthyDeployedApplications
 */
ArmApplicationHealthPolicy.prototype['MaxPercentUnhealthyDeployedApplications'] = undefined;

/**
 * Defines a ServiceTypeHealthPolicy per service type name.  The entries in the map replace the default service type health policy for each specified service type. For example, in an application that contains both a stateless gateway service type and a stateful engine service type, the health policies for the stateless and stateful services can be configured differently. With policy per service type, there's more granular control of the health of the service.  If no policy is specified for a service type name, the DefaultServiceTypeHealthPolicy is used for evaluation. 
 * @member {Object.<String, module:model/ArmServiceTypeHealthPolicy>} ServiceTypeHealthPolicyMap
 */
ArmApplicationHealthPolicy.prototype['ServiceTypeHealthPolicyMap'] = undefined;






export default ArmApplicationHealthPolicy;

