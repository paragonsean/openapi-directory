/*
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2017-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Pricing;
import org.openapitools.client.model.PricingList;
import org.openapitools.client.model.PricingsListDefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PricingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PricingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PricingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for pricingsCreateOrUpdateResourceGroupPricing
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param pricingName name of the pricing configuration (required)
     * @param pricing Pricing object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pricingsCreateOrUpdateResourceGroupPricingCall(String apiVersion, String subscriptionId, String resourceGroupName, String pricingName, Pricing pricing, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pricing;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/pricings/{pricingName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "pricingName" + "}", localVarApiClient.escapeString(pricingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pricingsCreateOrUpdateResourceGroupPricingValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String pricingName, Pricing pricing, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling pricingsCreateOrUpdateResourceGroupPricing(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling pricingsCreateOrUpdateResourceGroupPricing(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling pricingsCreateOrUpdateResourceGroupPricing(Async)");
        }

        // verify the required parameter 'pricingName' is set
        if (pricingName == null) {
            throw new ApiException("Missing the required parameter 'pricingName' when calling pricingsCreateOrUpdateResourceGroupPricing(Async)");
        }

        // verify the required parameter 'pricing' is set
        if (pricing == null) {
            throw new ApiException("Missing the required parameter 'pricing' when calling pricingsCreateOrUpdateResourceGroupPricing(Async)");
        }

        return pricingsCreateOrUpdateResourceGroupPricingCall(apiVersion, subscriptionId, resourceGroupName, pricingName, pricing, _callback);

    }

    /**
     * 
     * Security pricing configuration in the resource group
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param pricingName name of the pricing configuration (required)
     * @param pricing Pricing object (required)
     * @return Pricing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Pricing pricingsCreateOrUpdateResourceGroupPricing(String apiVersion, String subscriptionId, String resourceGroupName, String pricingName, Pricing pricing) throws ApiException {
        ApiResponse<Pricing> localVarResp = pricingsCreateOrUpdateResourceGroupPricingWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, pricingName, pricing);
        return localVarResp.getData();
    }

    /**
     * 
     * Security pricing configuration in the resource group
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param pricingName name of the pricing configuration (required)
     * @param pricing Pricing object (required)
     * @return ApiResponse&lt;Pricing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pricing> pricingsCreateOrUpdateResourceGroupPricingWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String pricingName, Pricing pricing) throws ApiException {
        okhttp3.Call localVarCall = pricingsCreateOrUpdateResourceGroupPricingValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, pricingName, pricing, null);
        Type localVarReturnType = new TypeToken<Pricing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Security pricing configuration in the resource group
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param pricingName name of the pricing configuration (required)
     * @param pricing Pricing object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pricingsCreateOrUpdateResourceGroupPricingAsync(String apiVersion, String subscriptionId, String resourceGroupName, String pricingName, Pricing pricing, final ApiCallback<Pricing> _callback) throws ApiException {

        okhttp3.Call localVarCall = pricingsCreateOrUpdateResourceGroupPricingValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, pricingName, pricing, _callback);
        Type localVarReturnType = new TypeToken<Pricing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pricingsGetResourceGroupPricing
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param pricingName name of the pricing configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pricingsGetResourceGroupPricingCall(String apiVersion, String subscriptionId, String resourceGroupName, String pricingName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/pricings/{pricingName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "pricingName" + "}", localVarApiClient.escapeString(pricingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pricingsGetResourceGroupPricingValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String pricingName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling pricingsGetResourceGroupPricing(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling pricingsGetResourceGroupPricing(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling pricingsGetResourceGroupPricing(Async)");
        }

        // verify the required parameter 'pricingName' is set
        if (pricingName == null) {
            throw new ApiException("Missing the required parameter 'pricingName' when calling pricingsGetResourceGroupPricing(Async)");
        }

        return pricingsGetResourceGroupPricingCall(apiVersion, subscriptionId, resourceGroupName, pricingName, _callback);

    }

    /**
     * 
     * Security pricing configuration in the resource group
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param pricingName name of the pricing configuration (required)
     * @return Pricing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Pricing pricingsGetResourceGroupPricing(String apiVersion, String subscriptionId, String resourceGroupName, String pricingName) throws ApiException {
        ApiResponse<Pricing> localVarResp = pricingsGetResourceGroupPricingWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, pricingName);
        return localVarResp.getData();
    }

    /**
     * 
     * Security pricing configuration in the resource group
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param pricingName name of the pricing configuration (required)
     * @return ApiResponse&lt;Pricing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pricing> pricingsGetResourceGroupPricingWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String pricingName) throws ApiException {
        okhttp3.Call localVarCall = pricingsGetResourceGroupPricingValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, pricingName, null);
        Type localVarReturnType = new TypeToken<Pricing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Security pricing configuration in the resource group
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param pricingName name of the pricing configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pricingsGetResourceGroupPricingAsync(String apiVersion, String subscriptionId, String resourceGroupName, String pricingName, final ApiCallback<Pricing> _callback) throws ApiException {

        okhttp3.Call localVarCall = pricingsGetResourceGroupPricingValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, pricingName, _callback);
        Type localVarReturnType = new TypeToken<Pricing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pricingsGetSubscriptionPricing
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param pricingName name of the pricing configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pricingsGetSubscriptionPricingCall(String apiVersion, String subscriptionId, String pricingName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/pricings/{pricingName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "pricingName" + "}", localVarApiClient.escapeString(pricingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pricingsGetSubscriptionPricingValidateBeforeCall(String apiVersion, String subscriptionId, String pricingName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling pricingsGetSubscriptionPricing(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling pricingsGetSubscriptionPricing(Async)");
        }

        // verify the required parameter 'pricingName' is set
        if (pricingName == null) {
            throw new ApiException("Missing the required parameter 'pricingName' when calling pricingsGetSubscriptionPricing(Async)");
        }

        return pricingsGetSubscriptionPricingCall(apiVersion, subscriptionId, pricingName, _callback);

    }

    /**
     * 
     * Security pricing configuration in the subscriptionSecurity pricing configuration in the subscription
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param pricingName name of the pricing configuration (required)
     * @return Pricing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Pricing pricingsGetSubscriptionPricing(String apiVersion, String subscriptionId, String pricingName) throws ApiException {
        ApiResponse<Pricing> localVarResp = pricingsGetSubscriptionPricingWithHttpInfo(apiVersion, subscriptionId, pricingName);
        return localVarResp.getData();
    }

    /**
     * 
     * Security pricing configuration in the subscriptionSecurity pricing configuration in the subscription
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param pricingName name of the pricing configuration (required)
     * @return ApiResponse&lt;Pricing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pricing> pricingsGetSubscriptionPricingWithHttpInfo(String apiVersion, String subscriptionId, String pricingName) throws ApiException {
        okhttp3.Call localVarCall = pricingsGetSubscriptionPricingValidateBeforeCall(apiVersion, subscriptionId, pricingName, null);
        Type localVarReturnType = new TypeToken<Pricing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Security pricing configuration in the subscriptionSecurity pricing configuration in the subscription
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param pricingName name of the pricing configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pricingsGetSubscriptionPricingAsync(String apiVersion, String subscriptionId, String pricingName, final ApiCallback<Pricing> _callback) throws ApiException {

        okhttp3.Call localVarCall = pricingsGetSubscriptionPricingValidateBeforeCall(apiVersion, subscriptionId, pricingName, _callback);
        Type localVarReturnType = new TypeToken<Pricing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pricingsList
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pricingsListCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/pricings"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pricingsListValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling pricingsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling pricingsList(Async)");
        }

        return pricingsListCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Security pricing configurations in the subscription
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @return PricingList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PricingList pricingsList(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<PricingList> localVarResp = pricingsListWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Security pricing configurations in the subscription
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @return ApiResponse&lt;PricingList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PricingList> pricingsListWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = pricingsListValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<PricingList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Security pricing configurations in the subscription
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pricingsListAsync(String apiVersion, String subscriptionId, final ApiCallback<PricingList> _callback) throws ApiException {

        okhttp3.Call localVarCall = pricingsListValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<PricingList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pricingsListByResourceGroup
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pricingsListByResourceGroupCall(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/pricings"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pricingsListByResourceGroupValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling pricingsListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling pricingsListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling pricingsListByResourceGroup(Async)");
        }

        return pricingsListByResourceGroupCall(apiVersion, subscriptionId, resourceGroupName, _callback);

    }

    /**
     * 
     * Security pricing configurations in the resource group
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @return PricingList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PricingList pricingsListByResourceGroup(String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        ApiResponse<PricingList> localVarResp = pricingsListByResourceGroupWithHttpInfo(apiVersion, subscriptionId, resourceGroupName);
        return localVarResp.getData();
    }

    /**
     * 
     * Security pricing configurations in the resource group
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @return ApiResponse&lt;PricingList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PricingList> pricingsListByResourceGroupWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        okhttp3.Call localVarCall = pricingsListByResourceGroupValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, null);
        Type localVarReturnType = new TypeToken<PricingList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Security pricing configurations in the resource group
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pricingsListByResourceGroupAsync(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback<PricingList> _callback) throws ApiException {

        okhttp3.Call localVarCall = pricingsListByResourceGroupValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, _callback);
        Type localVarReturnType = new TypeToken<PricingList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pricingsUpdateSubscriptionPricing
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param pricingName name of the pricing configuration (required)
     * @param pricing Pricing object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pricingsUpdateSubscriptionPricingCall(String apiVersion, String subscriptionId, String pricingName, Pricing pricing, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pricing;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/pricings/{pricingName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "pricingName" + "}", localVarApiClient.escapeString(pricingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pricingsUpdateSubscriptionPricingValidateBeforeCall(String apiVersion, String subscriptionId, String pricingName, Pricing pricing, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling pricingsUpdateSubscriptionPricing(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling pricingsUpdateSubscriptionPricing(Async)");
        }

        // verify the required parameter 'pricingName' is set
        if (pricingName == null) {
            throw new ApiException("Missing the required parameter 'pricingName' when calling pricingsUpdateSubscriptionPricing(Async)");
        }

        // verify the required parameter 'pricing' is set
        if (pricing == null) {
            throw new ApiException("Missing the required parameter 'pricing' when calling pricingsUpdateSubscriptionPricing(Async)");
        }

        return pricingsUpdateSubscriptionPricingCall(apiVersion, subscriptionId, pricingName, pricing, _callback);

    }

    /**
     * 
     * Security pricing configuration in the subscription
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param pricingName name of the pricing configuration (required)
     * @param pricing Pricing object (required)
     * @return Pricing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Pricing pricingsUpdateSubscriptionPricing(String apiVersion, String subscriptionId, String pricingName, Pricing pricing) throws ApiException {
        ApiResponse<Pricing> localVarResp = pricingsUpdateSubscriptionPricingWithHttpInfo(apiVersion, subscriptionId, pricingName, pricing);
        return localVarResp.getData();
    }

    /**
     * 
     * Security pricing configuration in the subscription
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param pricingName name of the pricing configuration (required)
     * @param pricing Pricing object (required)
     * @return ApiResponse&lt;Pricing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pricing> pricingsUpdateSubscriptionPricingWithHttpInfo(String apiVersion, String subscriptionId, String pricingName, Pricing pricing) throws ApiException {
        okhttp3.Call localVarCall = pricingsUpdateSubscriptionPricingValidateBeforeCall(apiVersion, subscriptionId, pricingName, pricing, null);
        Type localVarReturnType = new TypeToken<Pricing>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Security pricing configuration in the subscription
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param pricingName name of the pricing configuration (required)
     * @param pricing Pricing object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pricingsUpdateSubscriptionPricingAsync(String apiVersion, String subscriptionId, String pricingName, Pricing pricing, final ApiCallback<Pricing> _callback) throws ApiException {

        okhttp3.Call localVarCall = pricingsUpdateSubscriptionPricingValidateBeforeCall(apiVersion, subscriptionId, pricingName, pricing, _callback);
        Type localVarReturnType = new TypeToken<Pricing>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
