# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegionContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_deleted: bool=None, is_master_region: bool=None, name: str=None):
        """RegionContract - a model defined in OpenAPI

        :param is_deleted: The is_deleted of this RegionContract.
        :param is_master_region: The is_master_region of this RegionContract.
        :param name: The name of this RegionContract.
        """
        self.openapi_types = {
            'is_deleted': bool,
            'is_master_region': bool,
            'name': str
        }

        self.attribute_map = {
            'is_deleted': 'isDeleted',
            'is_master_region': 'isMasterRegion',
            'name': 'name'
        }

        self._is_deleted = is_deleted
        self._is_master_region = is_master_region
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegionContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegionContract of this RegionContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_deleted(self):
        """Gets the is_deleted of this RegionContract.

        whether Region is deleted.

        :return: The is_deleted of this RegionContract.
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this RegionContract.

        whether Region is deleted.

        :param is_deleted: The is_deleted of this RegionContract.
        :type is_deleted: bool
        """

        self._is_deleted = is_deleted

    @property
    def is_master_region(self):
        """Gets the is_master_region of this RegionContract.

        whether Region is the master region.

        :return: The is_master_region of this RegionContract.
        :rtype: bool
        """
        return self._is_master_region

    @is_master_region.setter
    def is_master_region(self, is_master_region):
        """Sets the is_master_region of this RegionContract.

        whether Region is the master region.

        :param is_master_region: The is_master_region of this RegionContract.
        :type is_master_region: bool
        """

        self._is_master_region = is_master_region

    @property
    def name(self):
        """Gets the name of this RegionContract.

        Region name.

        :return: The name of this RegionContract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RegionContract.

        Region name.

        :param name: The name of this RegionContract.
        :type name: str
        """

        self._name = name
