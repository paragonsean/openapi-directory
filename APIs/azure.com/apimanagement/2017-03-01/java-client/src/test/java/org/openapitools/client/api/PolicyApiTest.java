/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on entities like API, Product, and Subscription associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.PolicyCollection;
import org.openapitools.client.model.PolicyContract;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PolicyApi
 */
@Disabled
public class PolicyApiTest {

    private final PolicyApi api = new PolicyApi();

    /**
     * Creates or updates the global policy configuration of the Api Management service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String policyId = null;
        String apiVersion = null;
        String subscriptionId = null;
        PolicyContract parameters = null;
        PolicyContract response = api.policyCreateOrUpdate(resourceGroupName, serviceName, policyId, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes the global policy configuration of the Api Management Service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String policyId = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.policyDelete(resourceGroupName, serviceName, policyId, ifMatch, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Get the Global policy definition of the Api Management service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyGetTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String policyId = null;
        String apiVersion = null;
        String subscriptionId = null;
        PolicyContract response = api.policyGet(resourceGroupName, serviceName, policyId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all the Global Policy definitions of the Api Management service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyListByServiceTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String scope = null;
        PolicyCollection response = api.policyListByService(resourceGroupName, serviceName, apiVersion, subscriptionId, scope);
        // TODO: test validations
    }

}
