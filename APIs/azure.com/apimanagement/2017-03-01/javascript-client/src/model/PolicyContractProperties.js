/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on entities like API, Product, and Subscription associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PolicyContractProperties model module.
 * @module model/PolicyContractProperties
 * @version 2017-03-01
 */
class PolicyContractProperties {
    /**
     * Constructs a new <code>PolicyContractProperties</code>.
     * Policy contract Properties.
     * @alias module:model/PolicyContractProperties
     * @param policyContent {String} Json escaped Xml Encoded contents of the Policy.
     */
    constructor(policyContent) { 
        
        PolicyContractProperties.initialize(this, policyContent);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, policyContent) { 
        obj['policyContent'] = policyContent;
    }

    /**
     * Constructs a <code>PolicyContractProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicyContractProperties} obj Optional instance to populate.
     * @return {module:model/PolicyContractProperties} The populated <code>PolicyContractProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicyContractProperties();

            if (data.hasOwnProperty('policyContent')) {
                obj['policyContent'] = ApiClient.convertToType(data['policyContent'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicyContractProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicyContractProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PolicyContractProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['policyContent'] && !(typeof data['policyContent'] === 'string' || data['policyContent'] instanceof String)) {
            throw new Error("Expected the field `policyContent` to be a primitive type in the JSON string but got " + data['policyContent']);
        }

        return true;
    }


}

PolicyContractProperties.RequiredProperties = ["policyContent"];

/**
 * Json escaped Xml Encoded contents of the Policy.
 * @member {String} policyContent
 */
PolicyContractProperties.prototype['policyContent'] = undefined;






export default PolicyContractProperties;

