/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on entities like API, Product, and Subscription associated with your Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyContractProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyContractProperties::OAIPolicyContractProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyContractProperties::OAIPolicyContractProperties() {
    this->initializeModel();
}

OAIPolicyContractProperties::~OAIPolicyContractProperties() {}

void OAIPolicyContractProperties::initializeModel() {

    m_content_format_isSet = false;
    m_content_format_isValid = false;

    m_policy_content_isSet = false;
    m_policy_content_isValid = false;
}

void OAIPolicyContractProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyContractProperties::fromJsonObject(QJsonObject json) {

    m_content_format_isValid = ::OpenAPI::fromJsonValue(m_content_format, json[QString("contentFormat")]);
    m_content_format_isSet = !json[QString("contentFormat")].isNull() && m_content_format_isValid;

    m_policy_content_isValid = ::OpenAPI::fromJsonValue(m_policy_content, json[QString("policyContent")]);
    m_policy_content_isSet = !json[QString("policyContent")].isNull() && m_policy_content_isValid;
}

QString OAIPolicyContractProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyContractProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_content_format_isSet) {
        obj.insert(QString("contentFormat"), ::OpenAPI::toJsonValue(m_content_format));
    }
    if (m_policy_content_isSet) {
        obj.insert(QString("policyContent"), ::OpenAPI::toJsonValue(m_policy_content));
    }
    return obj;
}

QString OAIPolicyContractProperties::getContentFormat() const {
    return m_content_format;
}
void OAIPolicyContractProperties::setContentFormat(const QString &content_format) {
    m_content_format = content_format;
    m_content_format_isSet = true;
}

bool OAIPolicyContractProperties::is_content_format_Set() const{
    return m_content_format_isSet;
}

bool OAIPolicyContractProperties::is_content_format_Valid() const{
    return m_content_format_isValid;
}

QString OAIPolicyContractProperties::getPolicyContent() const {
    return m_policy_content;
}
void OAIPolicyContractProperties::setPolicyContent(const QString &policy_content) {
    m_policy_content = policy_content;
    m_policy_content_isSet = true;
}

bool OAIPolicyContractProperties::is_policy_content_Set() const{
    return m_policy_content_isSet;
}

bool OAIPolicyContractProperties::is_policy_content_Valid() const{
    return m_policy_content_isValid;
}

bool OAIPolicyContractProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_content_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyContractProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_policy_content_isValid && true;
}

} // namespace OpenAPI
