/**
 * ApiManagementClient
 * Use these REST APIs for managing OAuth2 servers configuration in your Azure API Management deployment. OAuth 2.0 can be used to authorize developer accounts for Azure API Management. For more information refer to [How to OAuth2](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-oauth2).
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorizationServer_ListByService_200_response_value_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorizationServer_ListByService_200_response_value_inner::OAIAuthorizationServer_ListByService_200_response_value_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorizationServer_ListByService_200_response_value_inner::OAIAuthorizationServer_ListByService_200_response_value_inner() {
    this->initializeModel();
}

OAIAuthorizationServer_ListByService_200_response_value_inner::~OAIAuthorizationServer_ListByService_200_response_value_inner() {}

void OAIAuthorizationServer_ListByService_200_response_value_inner::initializeModel() {

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAIAuthorizationServer_ListByService_200_response_value_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorizationServer_ListByService_200_response_value_inner::fromJsonObject(QJsonObject json) {

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAIAuthorizationServer_ListByService_200_response_value_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorizationServer_ListByService_200_response_value_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

OAIAuthorizationServer_ListByService_200_response_value_inner_properties OAIAuthorizationServer_ListByService_200_response_value_inner::getProperties() const {
    return m_properties;
}
void OAIAuthorizationServer_ListByService_200_response_value_inner::setProperties(const OAIAuthorizationServer_ListByService_200_response_value_inner_properties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIAuthorizationServer_ListByService_200_response_value_inner::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIAuthorizationServer_ListByService_200_response_value_inner::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAIAuthorizationServer_ListByService_200_response_value_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorizationServer_ListByService_200_response_value_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
