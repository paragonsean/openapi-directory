# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.token_body_parameter_contract import TokenBodyParameterContract
from openapi_server import util


class OAuth2AuthorizationServerUpdateContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_endpoint: str=None, authorization_methods: List[str]=None, bearer_token_sending_methods: List[str]=None, client_authentication_method: List[str]=None, client_id: str=None, client_registration_endpoint: str=None, client_secret: str=None, default_scope: str=None, description: str=None, grant_types: List[str]=None, name: str=None, resource_owner_password: str=None, resource_owner_username: str=None, support_state: bool=None, token_body_parameters: List[TokenBodyParameterContract]=None, token_endpoint: str=None):
        """OAuth2AuthorizationServerUpdateContract - a model defined in OpenAPI

        :param authorization_endpoint: The authorization_endpoint of this OAuth2AuthorizationServerUpdateContract.
        :param authorization_methods: The authorization_methods of this OAuth2AuthorizationServerUpdateContract.
        :param bearer_token_sending_methods: The bearer_token_sending_methods of this OAuth2AuthorizationServerUpdateContract.
        :param client_authentication_method: The client_authentication_method of this OAuth2AuthorizationServerUpdateContract.
        :param client_id: The client_id of this OAuth2AuthorizationServerUpdateContract.
        :param client_registration_endpoint: The client_registration_endpoint of this OAuth2AuthorizationServerUpdateContract.
        :param client_secret: The client_secret of this OAuth2AuthorizationServerUpdateContract.
        :param default_scope: The default_scope of this OAuth2AuthorizationServerUpdateContract.
        :param description: The description of this OAuth2AuthorizationServerUpdateContract.
        :param grant_types: The grant_types of this OAuth2AuthorizationServerUpdateContract.
        :param name: The name of this OAuth2AuthorizationServerUpdateContract.
        :param resource_owner_password: The resource_owner_password of this OAuth2AuthorizationServerUpdateContract.
        :param resource_owner_username: The resource_owner_username of this OAuth2AuthorizationServerUpdateContract.
        :param support_state: The support_state of this OAuth2AuthorizationServerUpdateContract.
        :param token_body_parameters: The token_body_parameters of this OAuth2AuthorizationServerUpdateContract.
        :param token_endpoint: The token_endpoint of this OAuth2AuthorizationServerUpdateContract.
        """
        self.openapi_types = {
            'authorization_endpoint': str,
            'authorization_methods': List[str],
            'bearer_token_sending_methods': List[str],
            'client_authentication_method': List[str],
            'client_id': str,
            'client_registration_endpoint': str,
            'client_secret': str,
            'default_scope': str,
            'description': str,
            'grant_types': List[str],
            'name': str,
            'resource_owner_password': str,
            'resource_owner_username': str,
            'support_state': bool,
            'token_body_parameters': List[TokenBodyParameterContract],
            'token_endpoint': str
        }

        self.attribute_map = {
            'authorization_endpoint': 'authorizationEndpoint',
            'authorization_methods': 'authorizationMethods',
            'bearer_token_sending_methods': 'bearerTokenSendingMethods',
            'client_authentication_method': 'clientAuthenticationMethod',
            'client_id': 'clientId',
            'client_registration_endpoint': 'clientRegistrationEndpoint',
            'client_secret': 'clientSecret',
            'default_scope': 'defaultScope',
            'description': 'description',
            'grant_types': 'grantTypes',
            'name': 'name',
            'resource_owner_password': 'resourceOwnerPassword',
            'resource_owner_username': 'resourceOwnerUsername',
            'support_state': 'supportState',
            'token_body_parameters': 'tokenBodyParameters',
            'token_endpoint': 'tokenEndpoint'
        }

        self._authorization_endpoint = authorization_endpoint
        self._authorization_methods = authorization_methods
        self._bearer_token_sending_methods = bearer_token_sending_methods
        self._client_authentication_method = client_authentication_method
        self._client_id = client_id
        self._client_registration_endpoint = client_registration_endpoint
        self._client_secret = client_secret
        self._default_scope = default_scope
        self._description = description
        self._grant_types = grant_types
        self._name = name
        self._resource_owner_password = resource_owner_password
        self._resource_owner_username = resource_owner_username
        self._support_state = support_state
        self._token_body_parameters = token_body_parameters
        self._token_endpoint = token_endpoint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OAuth2AuthorizationServerUpdateContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OAuth2AuthorizationServerUpdateContract of this OAuth2AuthorizationServerUpdateContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_endpoint(self):
        """Gets the authorization_endpoint of this OAuth2AuthorizationServerUpdateContract.

        OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2.

        :return: The authorization_endpoint of this OAuth2AuthorizationServerUpdateContract.
        :rtype: str
        """
        return self._authorization_endpoint

    @authorization_endpoint.setter
    def authorization_endpoint(self, authorization_endpoint):
        """Sets the authorization_endpoint of this OAuth2AuthorizationServerUpdateContract.

        OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2.

        :param authorization_endpoint: The authorization_endpoint of this OAuth2AuthorizationServerUpdateContract.
        :type authorization_endpoint: str
        """

        self._authorization_endpoint = authorization_endpoint

    @property
    def authorization_methods(self):
        """Gets the authorization_methods of this OAuth2AuthorizationServerUpdateContract.

        HTTP verbs supported by the authorization endpoint. GET must be always present. POST is optional.

        :return: The authorization_methods of this OAuth2AuthorizationServerUpdateContract.
        :rtype: List[str]
        """
        return self._authorization_methods

    @authorization_methods.setter
    def authorization_methods(self, authorization_methods):
        """Sets the authorization_methods of this OAuth2AuthorizationServerUpdateContract.

        HTTP verbs supported by the authorization endpoint. GET must be always present. POST is optional.

        :param authorization_methods: The authorization_methods of this OAuth2AuthorizationServerUpdateContract.
        :type authorization_methods: List[str]
        """
        allowed_values = ["HEAD", "OPTIONS", "TRACE", "GET", "POST", "PUT", "PATCH", "DELETE"]  # noqa: E501
        if not set(authorization_methods).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `authorization_methods` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(authorization_methods) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._authorization_methods = authorization_methods

    @property
    def bearer_token_sending_methods(self):
        """Gets the bearer_token_sending_methods of this OAuth2AuthorizationServerUpdateContract.

        Specifies the mechanism by which access token is passed to the API. 

        :return: The bearer_token_sending_methods of this OAuth2AuthorizationServerUpdateContract.
        :rtype: List[str]
        """
        return self._bearer_token_sending_methods

    @bearer_token_sending_methods.setter
    def bearer_token_sending_methods(self, bearer_token_sending_methods):
        """Sets the bearer_token_sending_methods of this OAuth2AuthorizationServerUpdateContract.

        Specifies the mechanism by which access token is passed to the API. 

        :param bearer_token_sending_methods: The bearer_token_sending_methods of this OAuth2AuthorizationServerUpdateContract.
        :type bearer_token_sending_methods: List[str]
        """
        allowed_values = ["authorizationHeader", "query"]  # noqa: E501
        if not set(bearer_token_sending_methods).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `bearer_token_sending_methods` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(bearer_token_sending_methods) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._bearer_token_sending_methods = bearer_token_sending_methods

    @property
    def client_authentication_method(self):
        """Gets the client_authentication_method of this OAuth2AuthorizationServerUpdateContract.

        Method of authentication supported by the token endpoint of this authorization server. Possible values are Basic and/or Body. When Body is specified, client credentials and other parameters are passed within the request body in the application/x-www-form-urlencoded format.

        :return: The client_authentication_method of this OAuth2AuthorizationServerUpdateContract.
        :rtype: List[str]
        """
        return self._client_authentication_method

    @client_authentication_method.setter
    def client_authentication_method(self, client_authentication_method):
        """Sets the client_authentication_method of this OAuth2AuthorizationServerUpdateContract.

        Method of authentication supported by the token endpoint of this authorization server. Possible values are Basic and/or Body. When Body is specified, client credentials and other parameters are passed within the request body in the application/x-www-form-urlencoded format.

        :param client_authentication_method: The client_authentication_method of this OAuth2AuthorizationServerUpdateContract.
        :type client_authentication_method: List[str]
        """
        allowed_values = ["Basic", "Body"]  # noqa: E501
        if not set(client_authentication_method).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `client_authentication_method` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(client_authentication_method) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._client_authentication_method = client_authentication_method

    @property
    def client_id(self):
        """Gets the client_id of this OAuth2AuthorizationServerUpdateContract.

        Client or app id registered with this authorization server.

        :return: The client_id of this OAuth2AuthorizationServerUpdateContract.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OAuth2AuthorizationServerUpdateContract.

        Client or app id registered with this authorization server.

        :param client_id: The client_id of this OAuth2AuthorizationServerUpdateContract.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def client_registration_endpoint(self):
        """Gets the client_registration_endpoint of this OAuth2AuthorizationServerUpdateContract.

        Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced.

        :return: The client_registration_endpoint of this OAuth2AuthorizationServerUpdateContract.
        :rtype: str
        """
        return self._client_registration_endpoint

    @client_registration_endpoint.setter
    def client_registration_endpoint(self, client_registration_endpoint):
        """Sets the client_registration_endpoint of this OAuth2AuthorizationServerUpdateContract.

        Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced.

        :param client_registration_endpoint: The client_registration_endpoint of this OAuth2AuthorizationServerUpdateContract.
        :type client_registration_endpoint: str
        """

        self._client_registration_endpoint = client_registration_endpoint

    @property
    def client_secret(self):
        """Gets the client_secret of this OAuth2AuthorizationServerUpdateContract.

        Client or app secret registered with this authorization server.

        :return: The client_secret of this OAuth2AuthorizationServerUpdateContract.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this OAuth2AuthorizationServerUpdateContract.

        Client or app secret registered with this authorization server.

        :param client_secret: The client_secret of this OAuth2AuthorizationServerUpdateContract.
        :type client_secret: str
        """

        self._client_secret = client_secret

    @property
    def default_scope(self):
        """Gets the default_scope of this OAuth2AuthorizationServerUpdateContract.

        Access token scope that is going to be requested by default. Can be overridden at the API level. Should be provided in the form of a string containing space-delimited values.

        :return: The default_scope of this OAuth2AuthorizationServerUpdateContract.
        :rtype: str
        """
        return self._default_scope

    @default_scope.setter
    def default_scope(self, default_scope):
        """Sets the default_scope of this OAuth2AuthorizationServerUpdateContract.

        Access token scope that is going to be requested by default. Can be overridden at the API level. Should be provided in the form of a string containing space-delimited values.

        :param default_scope: The default_scope of this OAuth2AuthorizationServerUpdateContract.
        :type default_scope: str
        """

        self._default_scope = default_scope

    @property
    def description(self):
        """Gets the description of this OAuth2AuthorizationServerUpdateContract.

        Description of the authorization server. Can contain HTML formatting tags.

        :return: The description of this OAuth2AuthorizationServerUpdateContract.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OAuth2AuthorizationServerUpdateContract.

        Description of the authorization server. Can contain HTML formatting tags.

        :param description: The description of this OAuth2AuthorizationServerUpdateContract.
        :type description: str
        """

        self._description = description

    @property
    def grant_types(self):
        """Gets the grant_types of this OAuth2AuthorizationServerUpdateContract.

        Form of an authorization grant, which the client uses to request the access token.

        :return: The grant_types of this OAuth2AuthorizationServerUpdateContract.
        :rtype: List[str]
        """
        return self._grant_types

    @grant_types.setter
    def grant_types(self, grant_types):
        """Sets the grant_types of this OAuth2AuthorizationServerUpdateContract.

        Form of an authorization grant, which the client uses to request the access token.

        :param grant_types: The grant_types of this OAuth2AuthorizationServerUpdateContract.
        :type grant_types: List[str]
        """
        allowed_values = ["authorizationCode", "implicit", "resourceOwnerPassword", "clientCredentials"]  # noqa: E501
        if not set(grant_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `grant_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(grant_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._grant_types = grant_types

    @property
    def name(self):
        """Gets the name of this OAuth2AuthorizationServerUpdateContract.

        User-friendly authorization server name.

        :return: The name of this OAuth2AuthorizationServerUpdateContract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OAuth2AuthorizationServerUpdateContract.

        User-friendly authorization server name.

        :param name: The name of this OAuth2AuthorizationServerUpdateContract.
        :type name: str
        """
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def resource_owner_password(self):
        """Gets the resource_owner_password of this OAuth2AuthorizationServerUpdateContract.

        Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner password.

        :return: The resource_owner_password of this OAuth2AuthorizationServerUpdateContract.
        :rtype: str
        """
        return self._resource_owner_password

    @resource_owner_password.setter
    def resource_owner_password(self, resource_owner_password):
        """Sets the resource_owner_password of this OAuth2AuthorizationServerUpdateContract.

        Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner password.

        :param resource_owner_password: The resource_owner_password of this OAuth2AuthorizationServerUpdateContract.
        :type resource_owner_password: str
        """

        self._resource_owner_password = resource_owner_password

    @property
    def resource_owner_username(self):
        """Gets the resource_owner_username of this OAuth2AuthorizationServerUpdateContract.

        Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner username.

        :return: The resource_owner_username of this OAuth2AuthorizationServerUpdateContract.
        :rtype: str
        """
        return self._resource_owner_username

    @resource_owner_username.setter
    def resource_owner_username(self, resource_owner_username):
        """Sets the resource_owner_username of this OAuth2AuthorizationServerUpdateContract.

        Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner username.

        :param resource_owner_username: The resource_owner_username of this OAuth2AuthorizationServerUpdateContract.
        :type resource_owner_username: str
        """

        self._resource_owner_username = resource_owner_username

    @property
    def support_state(self):
        """Gets the support_state of this OAuth2AuthorizationServerUpdateContract.

        If true, authorization server will include state parameter from the authorization request to its response. Client may use state parameter to raise protocol security.

        :return: The support_state of this OAuth2AuthorizationServerUpdateContract.
        :rtype: bool
        """
        return self._support_state

    @support_state.setter
    def support_state(self, support_state):
        """Sets the support_state of this OAuth2AuthorizationServerUpdateContract.

        If true, authorization server will include state parameter from the authorization request to its response. Client may use state parameter to raise protocol security.

        :param support_state: The support_state of this OAuth2AuthorizationServerUpdateContract.
        :type support_state: bool
        """

        self._support_state = support_state

    @property
    def token_body_parameters(self):
        """Gets the token_body_parameters of this OAuth2AuthorizationServerUpdateContract.

        Additional parameters required by the token endpoint of this authorization server represented as an array of JSON objects with name and value string properties, i.e. {\"name\" : \"name value\", \"value\": \"a value\"}.

        :return: The token_body_parameters of this OAuth2AuthorizationServerUpdateContract.
        :rtype: List[TokenBodyParameterContract]
        """
        return self._token_body_parameters

    @token_body_parameters.setter
    def token_body_parameters(self, token_body_parameters):
        """Sets the token_body_parameters of this OAuth2AuthorizationServerUpdateContract.

        Additional parameters required by the token endpoint of this authorization server represented as an array of JSON objects with name and value string properties, i.e. {\"name\" : \"name value\", \"value\": \"a value\"}.

        :param token_body_parameters: The token_body_parameters of this OAuth2AuthorizationServerUpdateContract.
        :type token_body_parameters: List[TokenBodyParameterContract]
        """

        self._token_body_parameters = token_body_parameters

    @property
    def token_endpoint(self):
        """Gets the token_endpoint of this OAuth2AuthorizationServerUpdateContract.

        OAuth token endpoint. Contains absolute URI to entity being referenced.

        :return: The token_endpoint of this OAuth2AuthorizationServerUpdateContract.
        :rtype: str
        """
        return self._token_endpoint

    @token_endpoint.setter
    def token_endpoint(self, token_endpoint):
        """Sets the token_endpoint of this OAuth2AuthorizationServerUpdateContract.

        OAuth token endpoint. Contains absolute URI to entity being referenced.

        :param token_endpoint: The token_endpoint of this OAuth2AuthorizationServerUpdateContract.
        :type token_endpoint: str
        """

        self._token_endpoint = token_endpoint
