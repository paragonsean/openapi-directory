/**
 * ApiManagementClient
 * Use these REST APIs for managing OAuth2 servers configuration in your Azure API Management deployment. OAuth 2.0 can be used to authorize developer accounts for Azure API Management. For more information refer to [How to OAuth2](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-oauth2).
 *
 * The version of the OpenAPI document: 2016-10-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOAuth2AuthorizationServerContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOAuth2AuthorizationServerContract::OAIOAuth2AuthorizationServerContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOAuth2AuthorizationServerContract::OAIOAuth2AuthorizationServerContract() {
    this->initializeModel();
}

OAIOAuth2AuthorizationServerContract::~OAIOAuth2AuthorizationServerContract() {}

void OAIOAuth2AuthorizationServerContract::initializeModel() {

    m_authorization_endpoint_isSet = false;
    m_authorization_endpoint_isValid = false;

    m_authorization_methods_isSet = false;
    m_authorization_methods_isValid = false;

    m_bearer_token_sending_methods_isSet = false;
    m_bearer_token_sending_methods_isValid = false;

    m_client_authentication_method_isSet = false;
    m_client_authentication_method_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_registration_endpoint_isSet = false;
    m_client_registration_endpoint_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_default_scope_isSet = false;
    m_default_scope_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_grant_types_isSet = false;
    m_grant_types_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_owner_password_isSet = false;
    m_resource_owner_password_isValid = false;

    m_resource_owner_username_isSet = false;
    m_resource_owner_username_isValid = false;

    m_support_state_isSet = false;
    m_support_state_isValid = false;

    m_token_body_parameters_isSet = false;
    m_token_body_parameters_isValid = false;

    m_token_endpoint_isSet = false;
    m_token_endpoint_isValid = false;
}

void OAIOAuth2AuthorizationServerContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOAuth2AuthorizationServerContract::fromJsonObject(QJsonObject json) {

    m_authorization_endpoint_isValid = ::OpenAPI::fromJsonValue(m_authorization_endpoint, json[QString("authorizationEndpoint")]);
    m_authorization_endpoint_isSet = !json[QString("authorizationEndpoint")].isNull() && m_authorization_endpoint_isValid;

    m_authorization_methods_isValid = ::OpenAPI::fromJsonValue(m_authorization_methods, json[QString("authorizationMethods")]);
    m_authorization_methods_isSet = !json[QString("authorizationMethods")].isNull() && m_authorization_methods_isValid;

    m_bearer_token_sending_methods_isValid = ::OpenAPI::fromJsonValue(m_bearer_token_sending_methods, json[QString("bearerTokenSendingMethods")]);
    m_bearer_token_sending_methods_isSet = !json[QString("bearerTokenSendingMethods")].isNull() && m_bearer_token_sending_methods_isValid;

    m_client_authentication_method_isValid = ::OpenAPI::fromJsonValue(m_client_authentication_method, json[QString("clientAuthenticationMethod")]);
    m_client_authentication_method_isSet = !json[QString("clientAuthenticationMethod")].isNull() && m_client_authentication_method_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_registration_endpoint_isValid = ::OpenAPI::fromJsonValue(m_client_registration_endpoint, json[QString("clientRegistrationEndpoint")]);
    m_client_registration_endpoint_isSet = !json[QString("clientRegistrationEndpoint")].isNull() && m_client_registration_endpoint_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;

    m_default_scope_isValid = ::OpenAPI::fromJsonValue(m_default_scope, json[QString("defaultScope")]);
    m_default_scope_isSet = !json[QString("defaultScope")].isNull() && m_default_scope_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_grant_types_isValid = ::OpenAPI::fromJsonValue(m_grant_types, json[QString("grantTypes")]);
    m_grant_types_isSet = !json[QString("grantTypes")].isNull() && m_grant_types_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_owner_password_isValid = ::OpenAPI::fromJsonValue(m_resource_owner_password, json[QString("resourceOwnerPassword")]);
    m_resource_owner_password_isSet = !json[QString("resourceOwnerPassword")].isNull() && m_resource_owner_password_isValid;

    m_resource_owner_username_isValid = ::OpenAPI::fromJsonValue(m_resource_owner_username, json[QString("resourceOwnerUsername")]);
    m_resource_owner_username_isSet = !json[QString("resourceOwnerUsername")].isNull() && m_resource_owner_username_isValid;

    m_support_state_isValid = ::OpenAPI::fromJsonValue(m_support_state, json[QString("supportState")]);
    m_support_state_isSet = !json[QString("supportState")].isNull() && m_support_state_isValid;

    m_token_body_parameters_isValid = ::OpenAPI::fromJsonValue(m_token_body_parameters, json[QString("tokenBodyParameters")]);
    m_token_body_parameters_isSet = !json[QString("tokenBodyParameters")].isNull() && m_token_body_parameters_isValid;

    m_token_endpoint_isValid = ::OpenAPI::fromJsonValue(m_token_endpoint, json[QString("tokenEndpoint")]);
    m_token_endpoint_isSet = !json[QString("tokenEndpoint")].isNull() && m_token_endpoint_isValid;
}

QString OAIOAuth2AuthorizationServerContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOAuth2AuthorizationServerContract::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_endpoint_isSet) {
        obj.insert(QString("authorizationEndpoint"), ::OpenAPI::toJsonValue(m_authorization_endpoint));
    }
    if (m_authorization_methods.size() > 0) {
        obj.insert(QString("authorizationMethods"), ::OpenAPI::toJsonValue(m_authorization_methods));
    }
    if (m_bearer_token_sending_methods.size() > 0) {
        obj.insert(QString("bearerTokenSendingMethods"), ::OpenAPI::toJsonValue(m_bearer_token_sending_methods));
    }
    if (m_client_authentication_method.size() > 0) {
        obj.insert(QString("clientAuthenticationMethod"), ::OpenAPI::toJsonValue(m_client_authentication_method));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_registration_endpoint_isSet) {
        obj.insert(QString("clientRegistrationEndpoint"), ::OpenAPI::toJsonValue(m_client_registration_endpoint));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_default_scope_isSet) {
        obj.insert(QString("defaultScope"), ::OpenAPI::toJsonValue(m_default_scope));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_grant_types.size() > 0) {
        obj.insert(QString("grantTypes"), ::OpenAPI::toJsonValue(m_grant_types));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_owner_password_isSet) {
        obj.insert(QString("resourceOwnerPassword"), ::OpenAPI::toJsonValue(m_resource_owner_password));
    }
    if (m_resource_owner_username_isSet) {
        obj.insert(QString("resourceOwnerUsername"), ::OpenAPI::toJsonValue(m_resource_owner_username));
    }
    if (m_support_state_isSet) {
        obj.insert(QString("supportState"), ::OpenAPI::toJsonValue(m_support_state));
    }
    if (m_token_body_parameters.size() > 0) {
        obj.insert(QString("tokenBodyParameters"), ::OpenAPI::toJsonValue(m_token_body_parameters));
    }
    if (m_token_endpoint_isSet) {
        obj.insert(QString("tokenEndpoint"), ::OpenAPI::toJsonValue(m_token_endpoint));
    }
    return obj;
}

QString OAIOAuth2AuthorizationServerContract::getAuthorizationEndpoint() const {
    return m_authorization_endpoint;
}
void OAIOAuth2AuthorizationServerContract::setAuthorizationEndpoint(const QString &authorization_endpoint) {
    m_authorization_endpoint = authorization_endpoint;
    m_authorization_endpoint_isSet = true;
}

bool OAIOAuth2AuthorizationServerContract::is_authorization_endpoint_Set() const{
    return m_authorization_endpoint_isSet;
}

bool OAIOAuth2AuthorizationServerContract::is_authorization_endpoint_Valid() const{
    return m_authorization_endpoint_isValid;
}

QList<QString> OAIOAuth2AuthorizationServerContract::getAuthorizationMethods() const {
    return m_authorization_methods;
}
void OAIOAuth2AuthorizationServerContract::setAuthorizationMethods(const QList<QString> &authorization_methods) {
    m_authorization_methods = authorization_methods;
    m_authorization_methods_isSet = true;
}

bool OAIOAuth2AuthorizationServerContract::is_authorization_methods_Set() const{
    return m_authorization_methods_isSet;
}

bool OAIOAuth2AuthorizationServerContract::is_authorization_methods_Valid() const{
    return m_authorization_methods_isValid;
}

QList<QString> OAIOAuth2AuthorizationServerContract::getBearerTokenSendingMethods() const {
    return m_bearer_token_sending_methods;
}
void OAIOAuth2AuthorizationServerContract::setBearerTokenSendingMethods(const QList<QString> &bearer_token_sending_methods) {
    m_bearer_token_sending_methods = bearer_token_sending_methods;
    m_bearer_token_sending_methods_isSet = true;
}

bool OAIOAuth2AuthorizationServerContract::is_bearer_token_sending_methods_Set() const{
    return m_bearer_token_sending_methods_isSet;
}

bool OAIOAuth2AuthorizationServerContract::is_bearer_token_sending_methods_Valid() const{
    return m_bearer_token_sending_methods_isValid;
}

QList<QString> OAIOAuth2AuthorizationServerContract::getClientAuthenticationMethod() const {
    return m_client_authentication_method;
}
void OAIOAuth2AuthorizationServerContract::setClientAuthenticationMethod(const QList<QString> &client_authentication_method) {
    m_client_authentication_method = client_authentication_method;
    m_client_authentication_method_isSet = true;
}

bool OAIOAuth2AuthorizationServerContract::is_client_authentication_method_Set() const{
    return m_client_authentication_method_isSet;
}

bool OAIOAuth2AuthorizationServerContract::is_client_authentication_method_Valid() const{
    return m_client_authentication_method_isValid;
}

QString OAIOAuth2AuthorizationServerContract::getClientId() const {
    return m_client_id;
}
void OAIOAuth2AuthorizationServerContract::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIOAuth2AuthorizationServerContract::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIOAuth2AuthorizationServerContract::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIOAuth2AuthorizationServerContract::getClientRegistrationEndpoint() const {
    return m_client_registration_endpoint;
}
void OAIOAuth2AuthorizationServerContract::setClientRegistrationEndpoint(const QString &client_registration_endpoint) {
    m_client_registration_endpoint = client_registration_endpoint;
    m_client_registration_endpoint_isSet = true;
}

bool OAIOAuth2AuthorizationServerContract::is_client_registration_endpoint_Set() const{
    return m_client_registration_endpoint_isSet;
}

bool OAIOAuth2AuthorizationServerContract::is_client_registration_endpoint_Valid() const{
    return m_client_registration_endpoint_isValid;
}

QString OAIOAuth2AuthorizationServerContract::getClientSecret() const {
    return m_client_secret;
}
void OAIOAuth2AuthorizationServerContract::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIOAuth2AuthorizationServerContract::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIOAuth2AuthorizationServerContract::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QString OAIOAuth2AuthorizationServerContract::getDefaultScope() const {
    return m_default_scope;
}
void OAIOAuth2AuthorizationServerContract::setDefaultScope(const QString &default_scope) {
    m_default_scope = default_scope;
    m_default_scope_isSet = true;
}

bool OAIOAuth2AuthorizationServerContract::is_default_scope_Set() const{
    return m_default_scope_isSet;
}

bool OAIOAuth2AuthorizationServerContract::is_default_scope_Valid() const{
    return m_default_scope_isValid;
}

QString OAIOAuth2AuthorizationServerContract::getDescription() const {
    return m_description;
}
void OAIOAuth2AuthorizationServerContract::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOAuth2AuthorizationServerContract::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOAuth2AuthorizationServerContract::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIOAuth2AuthorizationServerContract::getGrantTypes() const {
    return m_grant_types;
}
void OAIOAuth2AuthorizationServerContract::setGrantTypes(const QList<QString> &grant_types) {
    m_grant_types = grant_types;
    m_grant_types_isSet = true;
}

bool OAIOAuth2AuthorizationServerContract::is_grant_types_Set() const{
    return m_grant_types_isSet;
}

bool OAIOAuth2AuthorizationServerContract::is_grant_types_Valid() const{
    return m_grant_types_isValid;
}

QString OAIOAuth2AuthorizationServerContract::getId() const {
    return m_id;
}
void OAIOAuth2AuthorizationServerContract::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOAuth2AuthorizationServerContract::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOAuth2AuthorizationServerContract::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOAuth2AuthorizationServerContract::getName() const {
    return m_name;
}
void OAIOAuth2AuthorizationServerContract::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOAuth2AuthorizationServerContract::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOAuth2AuthorizationServerContract::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOAuth2AuthorizationServerContract::getResourceOwnerPassword() const {
    return m_resource_owner_password;
}
void OAIOAuth2AuthorizationServerContract::setResourceOwnerPassword(const QString &resource_owner_password) {
    m_resource_owner_password = resource_owner_password;
    m_resource_owner_password_isSet = true;
}

bool OAIOAuth2AuthorizationServerContract::is_resource_owner_password_Set() const{
    return m_resource_owner_password_isSet;
}

bool OAIOAuth2AuthorizationServerContract::is_resource_owner_password_Valid() const{
    return m_resource_owner_password_isValid;
}

QString OAIOAuth2AuthorizationServerContract::getResourceOwnerUsername() const {
    return m_resource_owner_username;
}
void OAIOAuth2AuthorizationServerContract::setResourceOwnerUsername(const QString &resource_owner_username) {
    m_resource_owner_username = resource_owner_username;
    m_resource_owner_username_isSet = true;
}

bool OAIOAuth2AuthorizationServerContract::is_resource_owner_username_Set() const{
    return m_resource_owner_username_isSet;
}

bool OAIOAuth2AuthorizationServerContract::is_resource_owner_username_Valid() const{
    return m_resource_owner_username_isValid;
}

bool OAIOAuth2AuthorizationServerContract::isSupportState() const {
    return m_support_state;
}
void OAIOAuth2AuthorizationServerContract::setSupportState(const bool &support_state) {
    m_support_state = support_state;
    m_support_state_isSet = true;
}

bool OAIOAuth2AuthorizationServerContract::is_support_state_Set() const{
    return m_support_state_isSet;
}

bool OAIOAuth2AuthorizationServerContract::is_support_state_Valid() const{
    return m_support_state_isValid;
}

QList<OAITokenBodyParameterContract> OAIOAuth2AuthorizationServerContract::getTokenBodyParameters() const {
    return m_token_body_parameters;
}
void OAIOAuth2AuthorizationServerContract::setTokenBodyParameters(const QList<OAITokenBodyParameterContract> &token_body_parameters) {
    m_token_body_parameters = token_body_parameters;
    m_token_body_parameters_isSet = true;
}

bool OAIOAuth2AuthorizationServerContract::is_token_body_parameters_Set() const{
    return m_token_body_parameters_isSet;
}

bool OAIOAuth2AuthorizationServerContract::is_token_body_parameters_Valid() const{
    return m_token_body_parameters_isValid;
}

QString OAIOAuth2AuthorizationServerContract::getTokenEndpoint() const {
    return m_token_endpoint;
}
void OAIOAuth2AuthorizationServerContract::setTokenEndpoint(const QString &token_endpoint) {
    m_token_endpoint = token_endpoint;
    m_token_endpoint_isSet = true;
}

bool OAIOAuth2AuthorizationServerContract::is_token_endpoint_Set() const{
    return m_token_endpoint_isSet;
}

bool OAIOAuth2AuthorizationServerContract::is_token_endpoint_Valid() const{
    return m_token_endpoint_isValid;
}

bool OAIOAuth2AuthorizationServerContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bearer_token_sending_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_authentication_method.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_registration_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_owner_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_owner_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_body_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOAuth2AuthorizationServerContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authorization_endpoint_isValid && m_client_id_isValid && m_client_registration_endpoint_isValid && m_grant_types_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
