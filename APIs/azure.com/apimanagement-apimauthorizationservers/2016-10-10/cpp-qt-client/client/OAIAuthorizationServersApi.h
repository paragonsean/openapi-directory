/**
 * ApiManagementClient
 * Use these REST APIs for managing OAuth2 servers configuration in your Azure API Management deployment. OAuth 2.0 can be used to authorize developer accounts for Azure API Management. For more information refer to [How to OAuth2](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-oauth2).
 *
 * The version of the OpenAPI document: 2016-10-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthorizationServersApi_H
#define OAI_OAIAuthorizationServersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAuthorizationServerCollection.h"
#include "OAIAuthorizationServers_Get_default_response.h"
#include "OAIOAuth2AuthorizationServerContract.h"
#include "OAIOAuth2AuthorizationServerUpdateContract.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthorizationServersApi : public QObject {
    Q_OBJECT

public:
    OAIAuthorizationServersApi(const int timeOut = 0);
    ~OAIAuthorizationServersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  authsid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIOAuth2AuthorizationServerContract [required]
    */
    virtual void authorizationServersCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &authsid, const QString &api_version, const QString &subscription_id, const OAIOAuth2AuthorizationServerContract &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  authsid QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void authorizationServersDelete(const QString &resource_group_name, const QString &service_name, const QString &authsid, const QString &if_match, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  authsid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void authorizationServersGet(const QString &resource_group_name, const QString &service_name, const QString &authsid, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    */
    virtual void authorizationServersListByService(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  authsid QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIOAuth2AuthorizationServerUpdateContract [required]
    */
    virtual void authorizationServersUpdate(const QString &resource_group_name, const QString &service_name, const QString &authsid, const QString &if_match, const QString &api_version, const QString &subscription_id, const OAIOAuth2AuthorizationServerUpdateContract &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void authorizationServersCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void authorizationServersDeleteCallback(OAIHttpRequestWorker *worker);
    void authorizationServersGetCallback(OAIHttpRequestWorker *worker);
    void authorizationServersListByServiceCallback(OAIHttpRequestWorker *worker);
    void authorizationServersUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void authorizationServersCreateOrUpdateSignal();
    void authorizationServersDeleteSignal();
    void authorizationServersGetSignal(OAIOAuth2AuthorizationServerContract summary);
    void authorizationServersListByServiceSignal(OAIAuthorizationServerCollection summary);
    void authorizationServersUpdateSignal();


    void authorizationServersCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker);
    void authorizationServersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void authorizationServersGetSignalFull(OAIHttpRequestWorker *worker, OAIOAuth2AuthorizationServerContract summary);
    void authorizationServersListByServiceSignalFull(OAIHttpRequestWorker *worker, OAIAuthorizationServerCollection summary);
    void authorizationServersUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use authorizationServersCreateOrUpdateSignalError() instead")
    void authorizationServersCreateOrUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationServersCreateOrUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationServersDeleteSignalError() instead")
    void authorizationServersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationServersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationServersGetSignalError() instead")
    void authorizationServersGetSignalE(OAIOAuth2AuthorizationServerContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationServersGetSignalError(OAIOAuth2AuthorizationServerContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationServersListByServiceSignalError() instead")
    void authorizationServersListByServiceSignalE(OAIAuthorizationServerCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationServersListByServiceSignalError(OAIAuthorizationServerCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationServersUpdateSignalError() instead")
    void authorizationServersUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationServersUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use authorizationServersCreateOrUpdateSignalErrorFull() instead")
    void authorizationServersCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationServersCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationServersDeleteSignalErrorFull() instead")
    void authorizationServersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationServersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationServersGetSignalErrorFull() instead")
    void authorizationServersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationServersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationServersListByServiceSignalErrorFull() instead")
    void authorizationServersListByServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationServersListByServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationServersUpdateSignalErrorFull() instead")
    void authorizationServersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationServersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
