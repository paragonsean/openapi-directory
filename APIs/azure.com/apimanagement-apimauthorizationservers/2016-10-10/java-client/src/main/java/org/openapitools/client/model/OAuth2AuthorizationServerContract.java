/*
 * ApiManagementClient
 * Use these REST APIs for managing OAuth2 servers configuration in your Azure API Management deployment. OAuth 2.0 can be used to authorize developer accounts for Azure API Management. For more information refer to [How to OAuth2](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-oauth2).
 *
 * The version of the OpenAPI document: 2016-10-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TokenBodyParameterContract;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * External OAuth authorization server settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:22:52.949021-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OAuth2AuthorizationServerContract {
  public static final String SERIALIZED_NAME_AUTHORIZATION_ENDPOINT = "authorizationEndpoint";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_ENDPOINT)
  private String authorizationEndpoint;

  /**
   * Gets or Sets authorizationMethods
   */
  @JsonAdapter(AuthorizationMethodsEnum.Adapter.class)
  public enum AuthorizationMethodsEnum {
    HEAD("HEAD"),
    
    OPTIONS("OPTIONS"),
    
    TRACE("TRACE"),
    
    GET("GET"),
    
    POST("POST"),
    
    PUT("PUT"),
    
    PATCH("PATCH"),
    
    DELETE("DELETE");

    private String value;

    AuthorizationMethodsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthorizationMethodsEnum fromValue(String value) {
      for (AuthorizationMethodsEnum b : AuthorizationMethodsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthorizationMethodsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthorizationMethodsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthorizationMethodsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthorizationMethodsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthorizationMethodsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHORIZATION_METHODS = "authorizationMethods";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_METHODS)
  private List<AuthorizationMethodsEnum> authorizationMethods = new ArrayList<>();

  /**
   * Gets or Sets bearerTokenSendingMethods
   */
  @JsonAdapter(BearerTokenSendingMethodsEnum.Adapter.class)
  public enum BearerTokenSendingMethodsEnum {
    AUTHORIZATION_HEADER("authorizationHeader"),
    
    QUERY("query");

    private String value;

    BearerTokenSendingMethodsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BearerTokenSendingMethodsEnum fromValue(String value) {
      for (BearerTokenSendingMethodsEnum b : BearerTokenSendingMethodsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BearerTokenSendingMethodsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BearerTokenSendingMethodsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BearerTokenSendingMethodsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BearerTokenSendingMethodsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BearerTokenSendingMethodsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BEARER_TOKEN_SENDING_METHODS = "bearerTokenSendingMethods";
  @SerializedName(SERIALIZED_NAME_BEARER_TOKEN_SENDING_METHODS)
  private List<BearerTokenSendingMethodsEnum> bearerTokenSendingMethods = new ArrayList<>();

  /**
   * Gets or Sets clientAuthenticationMethod
   */
  @JsonAdapter(ClientAuthenticationMethodEnum.Adapter.class)
  public enum ClientAuthenticationMethodEnum {
    BASIC("Basic"),
    
    BODY("Body");

    private String value;

    ClientAuthenticationMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClientAuthenticationMethodEnum fromValue(String value) {
      for (ClientAuthenticationMethodEnum b : ClientAuthenticationMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClientAuthenticationMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClientAuthenticationMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClientAuthenticationMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClientAuthenticationMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClientAuthenticationMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLIENT_AUTHENTICATION_METHOD = "clientAuthenticationMethod";
  @SerializedName(SERIALIZED_NAME_CLIENT_AUTHENTICATION_METHOD)
  private List<ClientAuthenticationMethodEnum> clientAuthenticationMethod = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_REGISTRATION_ENDPOINT = "clientRegistrationEndpoint";
  @SerializedName(SERIALIZED_NAME_CLIENT_REGISTRATION_ENDPOINT)
  private String clientRegistrationEndpoint;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "clientSecret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private String clientSecret;

  public static final String SERIALIZED_NAME_DEFAULT_SCOPE = "defaultScope";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SCOPE)
  private String defaultScope;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Gets or Sets grantTypes
   */
  @JsonAdapter(GrantTypesEnum.Adapter.class)
  public enum GrantTypesEnum {
    AUTHORIZATION_CODE("authorizationCode"),
    
    IMPLICIT("implicit"),
    
    RESOURCE_OWNER_PASSWORD("resourceOwnerPassword"),
    
    CLIENT_CREDENTIALS("clientCredentials");

    private String value;

    GrantTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GrantTypesEnum fromValue(String value) {
      for (GrantTypesEnum b : GrantTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GrantTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GrantTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GrantTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GrantTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GrantTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GRANT_TYPES = "grantTypes";
  @SerializedName(SERIALIZED_NAME_GRANT_TYPES)
  private List<GrantTypesEnum> grantTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESOURCE_OWNER_PASSWORD = "resourceOwnerPassword";
  @SerializedName(SERIALIZED_NAME_RESOURCE_OWNER_PASSWORD)
  private String resourceOwnerPassword;

  public static final String SERIALIZED_NAME_RESOURCE_OWNER_USERNAME = "resourceOwnerUsername";
  @SerializedName(SERIALIZED_NAME_RESOURCE_OWNER_USERNAME)
  private String resourceOwnerUsername;

  public static final String SERIALIZED_NAME_SUPPORT_STATE = "supportState";
  @SerializedName(SERIALIZED_NAME_SUPPORT_STATE)
  private Boolean supportState;

  public static final String SERIALIZED_NAME_TOKEN_BODY_PARAMETERS = "tokenBodyParameters";
  @SerializedName(SERIALIZED_NAME_TOKEN_BODY_PARAMETERS)
  private List<TokenBodyParameterContract> tokenBodyParameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOKEN_ENDPOINT = "tokenEndpoint";
  @SerializedName(SERIALIZED_NAME_TOKEN_ENDPOINT)
  private String tokenEndpoint;

  public OAuth2AuthorizationServerContract() {
  }

  public OAuth2AuthorizationServerContract(
     String id
  ) {
    this();
    this.id = id;
  }

  public OAuth2AuthorizationServerContract authorizationEndpoint(String authorizationEndpoint) {
    this.authorizationEndpoint = authorizationEndpoint;
    return this;
  }

  /**
   * OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2.
   * @return authorizationEndpoint
   */
  @javax.annotation.Nonnull
  public String getAuthorizationEndpoint() {
    return authorizationEndpoint;
  }

  public void setAuthorizationEndpoint(String authorizationEndpoint) {
    this.authorizationEndpoint = authorizationEndpoint;
  }


  public OAuth2AuthorizationServerContract authorizationMethods(List<AuthorizationMethodsEnum> authorizationMethods) {
    this.authorizationMethods = authorizationMethods;
    return this;
  }

  public OAuth2AuthorizationServerContract addAuthorizationMethodsItem(AuthorizationMethodsEnum authorizationMethodsItem) {
    if (this.authorizationMethods == null) {
      this.authorizationMethods = new ArrayList<>();
    }
    this.authorizationMethods.add(authorizationMethodsItem);
    return this;
  }

  /**
   * HTTP verbs supported by the authorization endpoint. GET must be always present. POST is optional.
   * @return authorizationMethods
   */
  @javax.annotation.Nullable
  public List<AuthorizationMethodsEnum> getAuthorizationMethods() {
    return authorizationMethods;
  }

  public void setAuthorizationMethods(List<AuthorizationMethodsEnum> authorizationMethods) {
    this.authorizationMethods = authorizationMethods;
  }


  public OAuth2AuthorizationServerContract bearerTokenSendingMethods(List<BearerTokenSendingMethodsEnum> bearerTokenSendingMethods) {
    this.bearerTokenSendingMethods = bearerTokenSendingMethods;
    return this;
  }

  public OAuth2AuthorizationServerContract addBearerTokenSendingMethodsItem(BearerTokenSendingMethodsEnum bearerTokenSendingMethodsItem) {
    if (this.bearerTokenSendingMethods == null) {
      this.bearerTokenSendingMethods = new ArrayList<>();
    }
    this.bearerTokenSendingMethods.add(bearerTokenSendingMethodsItem);
    return this;
  }

  /**
   * Specifies the mechanism by which access token is passed to the API. 
   * @return bearerTokenSendingMethods
   */
  @javax.annotation.Nullable
  public List<BearerTokenSendingMethodsEnum> getBearerTokenSendingMethods() {
    return bearerTokenSendingMethods;
  }

  public void setBearerTokenSendingMethods(List<BearerTokenSendingMethodsEnum> bearerTokenSendingMethods) {
    this.bearerTokenSendingMethods = bearerTokenSendingMethods;
  }


  public OAuth2AuthorizationServerContract clientAuthenticationMethod(List<ClientAuthenticationMethodEnum> clientAuthenticationMethod) {
    this.clientAuthenticationMethod = clientAuthenticationMethod;
    return this;
  }

  public OAuth2AuthorizationServerContract addClientAuthenticationMethodItem(ClientAuthenticationMethodEnum clientAuthenticationMethodItem) {
    if (this.clientAuthenticationMethod == null) {
      this.clientAuthenticationMethod = new ArrayList<>();
    }
    this.clientAuthenticationMethod.add(clientAuthenticationMethodItem);
    return this;
  }

  /**
   * Method of authentication supported by the token endpoint of this authorization server. Possible values are Basic and/or Body. When Body is specified, client credentials and other parameters are passed within the request body in the application/x-www-form-urlencoded format.
   * @return clientAuthenticationMethod
   */
  @javax.annotation.Nullable
  public List<ClientAuthenticationMethodEnum> getClientAuthenticationMethod() {
    return clientAuthenticationMethod;
  }

  public void setClientAuthenticationMethod(List<ClientAuthenticationMethodEnum> clientAuthenticationMethod) {
    this.clientAuthenticationMethod = clientAuthenticationMethod;
  }


  public OAuth2AuthorizationServerContract clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Client or app id registered with this authorization server.
   * @return clientId
   */
  @javax.annotation.Nonnull
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public OAuth2AuthorizationServerContract clientRegistrationEndpoint(String clientRegistrationEndpoint) {
    this.clientRegistrationEndpoint = clientRegistrationEndpoint;
    return this;
  }

  /**
   * Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced.
   * @return clientRegistrationEndpoint
   */
  @javax.annotation.Nonnull
  public String getClientRegistrationEndpoint() {
    return clientRegistrationEndpoint;
  }

  public void setClientRegistrationEndpoint(String clientRegistrationEndpoint) {
    this.clientRegistrationEndpoint = clientRegistrationEndpoint;
  }


  public OAuth2AuthorizationServerContract clientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * Client or app secret registered with this authorization server.
   * @return clientSecret
   */
  @javax.annotation.Nullable
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public OAuth2AuthorizationServerContract defaultScope(String defaultScope) {
    this.defaultScope = defaultScope;
    return this;
  }

  /**
   * Access token scope that is going to be requested by default. Can be overridden at the API level. Should be provided in the form of a string containing space-delimited values.
   * @return defaultScope
   */
  @javax.annotation.Nullable
  public String getDefaultScope() {
    return defaultScope;
  }

  public void setDefaultScope(String defaultScope) {
    this.defaultScope = defaultScope;
  }


  public OAuth2AuthorizationServerContract description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the authorization server. Can contain HTML formatting tags.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public OAuth2AuthorizationServerContract grantTypes(List<GrantTypesEnum> grantTypes) {
    this.grantTypes = grantTypes;
    return this;
  }

  public OAuth2AuthorizationServerContract addGrantTypesItem(GrantTypesEnum grantTypesItem) {
    if (this.grantTypes == null) {
      this.grantTypes = new ArrayList<>();
    }
    this.grantTypes.add(grantTypesItem);
    return this;
  }

  /**
   * Form of an authorization grant, which the client uses to request the access token.
   * @return grantTypes
   */
  @javax.annotation.Nonnull
  public List<GrantTypesEnum> getGrantTypes() {
    return grantTypes;
  }

  public void setGrantTypes(List<GrantTypesEnum> grantTypes) {
    this.grantTypes = grantTypes;
  }


  /**
   * Uniquely identifies the authorization server within the current API Management service instance. The value is a valid relative URL in the format of /authorizationServers/{authsid} where {authsid} is an authorization server identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public OAuth2AuthorizationServerContract name(String name) {
    this.name = name;
    return this;
  }

  /**
   * User-friendly authorization server name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public OAuth2AuthorizationServerContract resourceOwnerPassword(String resourceOwnerPassword) {
    this.resourceOwnerPassword = resourceOwnerPassword;
    return this;
  }

  /**
   * Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner password.
   * @return resourceOwnerPassword
   */
  @javax.annotation.Nullable
  public String getResourceOwnerPassword() {
    return resourceOwnerPassword;
  }

  public void setResourceOwnerPassword(String resourceOwnerPassword) {
    this.resourceOwnerPassword = resourceOwnerPassword;
  }


  public OAuth2AuthorizationServerContract resourceOwnerUsername(String resourceOwnerUsername) {
    this.resourceOwnerUsername = resourceOwnerUsername;
    return this;
  }

  /**
   * Can be optionally specified when resource owner password grant type is supported by this authorization server. Default resource owner username.
   * @return resourceOwnerUsername
   */
  @javax.annotation.Nullable
  public String getResourceOwnerUsername() {
    return resourceOwnerUsername;
  }

  public void setResourceOwnerUsername(String resourceOwnerUsername) {
    this.resourceOwnerUsername = resourceOwnerUsername;
  }


  public OAuth2AuthorizationServerContract supportState(Boolean supportState) {
    this.supportState = supportState;
    return this;
  }

  /**
   * If true, authorization server will include state parameter from the authorization request to its response. Client may use state parameter to raise protocol security.
   * @return supportState
   */
  @javax.annotation.Nullable
  public Boolean getSupportState() {
    return supportState;
  }

  public void setSupportState(Boolean supportState) {
    this.supportState = supportState;
  }


  public OAuth2AuthorizationServerContract tokenBodyParameters(List<TokenBodyParameterContract> tokenBodyParameters) {
    this.tokenBodyParameters = tokenBodyParameters;
    return this;
  }

  public OAuth2AuthorizationServerContract addTokenBodyParametersItem(TokenBodyParameterContract tokenBodyParametersItem) {
    if (this.tokenBodyParameters == null) {
      this.tokenBodyParameters = new ArrayList<>();
    }
    this.tokenBodyParameters.add(tokenBodyParametersItem);
    return this;
  }

  /**
   * Additional parameters required by the token endpoint of this authorization server represented as an array of JSON objects with name and value string properties, i.e. {\&quot;name\&quot; : \&quot;name value\&quot;, \&quot;value\&quot;: \&quot;a value\&quot;}.
   * @return tokenBodyParameters
   */
  @javax.annotation.Nullable
  public List<TokenBodyParameterContract> getTokenBodyParameters() {
    return tokenBodyParameters;
  }

  public void setTokenBodyParameters(List<TokenBodyParameterContract> tokenBodyParameters) {
    this.tokenBodyParameters = tokenBodyParameters;
  }


  public OAuth2AuthorizationServerContract tokenEndpoint(String tokenEndpoint) {
    this.tokenEndpoint = tokenEndpoint;
    return this;
  }

  /**
   * OAuth token endpoint. Contains absolute URI to entity being referenced.
   * @return tokenEndpoint
   */
  @javax.annotation.Nullable
  public String getTokenEndpoint() {
    return tokenEndpoint;
  }

  public void setTokenEndpoint(String tokenEndpoint) {
    this.tokenEndpoint = tokenEndpoint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OAuth2AuthorizationServerContract oauth2AuthorizationServerContract = (OAuth2AuthorizationServerContract) o;
    return Objects.equals(this.authorizationEndpoint, oauth2AuthorizationServerContract.authorizationEndpoint) &&
        Objects.equals(this.authorizationMethods, oauth2AuthorizationServerContract.authorizationMethods) &&
        Objects.equals(this.bearerTokenSendingMethods, oauth2AuthorizationServerContract.bearerTokenSendingMethods) &&
        Objects.equals(this.clientAuthenticationMethod, oauth2AuthorizationServerContract.clientAuthenticationMethod) &&
        Objects.equals(this.clientId, oauth2AuthorizationServerContract.clientId) &&
        Objects.equals(this.clientRegistrationEndpoint, oauth2AuthorizationServerContract.clientRegistrationEndpoint) &&
        Objects.equals(this.clientSecret, oauth2AuthorizationServerContract.clientSecret) &&
        Objects.equals(this.defaultScope, oauth2AuthorizationServerContract.defaultScope) &&
        Objects.equals(this.description, oauth2AuthorizationServerContract.description) &&
        Objects.equals(this.grantTypes, oauth2AuthorizationServerContract.grantTypes) &&
        Objects.equals(this.id, oauth2AuthorizationServerContract.id) &&
        Objects.equals(this.name, oauth2AuthorizationServerContract.name) &&
        Objects.equals(this.resourceOwnerPassword, oauth2AuthorizationServerContract.resourceOwnerPassword) &&
        Objects.equals(this.resourceOwnerUsername, oauth2AuthorizationServerContract.resourceOwnerUsername) &&
        Objects.equals(this.supportState, oauth2AuthorizationServerContract.supportState) &&
        Objects.equals(this.tokenBodyParameters, oauth2AuthorizationServerContract.tokenBodyParameters) &&
        Objects.equals(this.tokenEndpoint, oauth2AuthorizationServerContract.tokenEndpoint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationEndpoint, authorizationMethods, bearerTokenSendingMethods, clientAuthenticationMethod, clientId, clientRegistrationEndpoint, clientSecret, defaultScope, description, grantTypes, id, name, resourceOwnerPassword, resourceOwnerUsername, supportState, tokenBodyParameters, tokenEndpoint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OAuth2AuthorizationServerContract {\n");
    sb.append("    authorizationEndpoint: ").append(toIndentedString(authorizationEndpoint)).append("\n");
    sb.append("    authorizationMethods: ").append(toIndentedString(authorizationMethods)).append("\n");
    sb.append("    bearerTokenSendingMethods: ").append(toIndentedString(bearerTokenSendingMethods)).append("\n");
    sb.append("    clientAuthenticationMethod: ").append(toIndentedString(clientAuthenticationMethod)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientRegistrationEndpoint: ").append(toIndentedString(clientRegistrationEndpoint)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    defaultScope: ").append(toIndentedString(defaultScope)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    grantTypes: ").append(toIndentedString(grantTypes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resourceOwnerPassword: ").append(toIndentedString(resourceOwnerPassword)).append("\n");
    sb.append("    resourceOwnerUsername: ").append(toIndentedString(resourceOwnerUsername)).append("\n");
    sb.append("    supportState: ").append(toIndentedString(supportState)).append("\n");
    sb.append("    tokenBodyParameters: ").append(toIndentedString(tokenBodyParameters)).append("\n");
    sb.append("    tokenEndpoint: ").append(toIndentedString(tokenEndpoint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizationEndpoint");
    openapiFields.add("authorizationMethods");
    openapiFields.add("bearerTokenSendingMethods");
    openapiFields.add("clientAuthenticationMethod");
    openapiFields.add("clientId");
    openapiFields.add("clientRegistrationEndpoint");
    openapiFields.add("clientSecret");
    openapiFields.add("defaultScope");
    openapiFields.add("description");
    openapiFields.add("grantTypes");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("resourceOwnerPassword");
    openapiFields.add("resourceOwnerUsername");
    openapiFields.add("supportState");
    openapiFields.add("tokenBodyParameters");
    openapiFields.add("tokenEndpoint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authorizationEndpoint");
    openapiRequiredFields.add("clientId");
    openapiRequiredFields.add("clientRegistrationEndpoint");
    openapiRequiredFields.add("grantTypes");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OAuth2AuthorizationServerContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OAuth2AuthorizationServerContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OAuth2AuthorizationServerContract is not found in the empty JSON string", OAuth2AuthorizationServerContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OAuth2AuthorizationServerContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OAuth2AuthorizationServerContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OAuth2AuthorizationServerContract.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("authorizationEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationEndpoint").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("authorizationMethods") != null && !jsonObj.get("authorizationMethods").isJsonNull() && !jsonObj.get("authorizationMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationMethods` to be an array in the JSON string but got `%s`", jsonObj.get("authorizationMethods").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bearerTokenSendingMethods") != null && !jsonObj.get("bearerTokenSendingMethods").isJsonNull() && !jsonObj.get("bearerTokenSendingMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bearerTokenSendingMethods` to be an array in the JSON string but got `%s`", jsonObj.get("bearerTokenSendingMethods").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("clientAuthenticationMethod") != null && !jsonObj.get("clientAuthenticationMethod").isJsonNull() && !jsonObj.get("clientAuthenticationMethod").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientAuthenticationMethod` to be an array in the JSON string but got `%s`", jsonObj.get("clientAuthenticationMethod").toString()));
      }
      if (!jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if (!jsonObj.get("clientRegistrationEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientRegistrationEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientRegistrationEndpoint").toString()));
      }
      if ((jsonObj.get("clientSecret") != null && !jsonObj.get("clientSecret").isJsonNull()) && !jsonObj.get("clientSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientSecret").toString()));
      }
      if ((jsonObj.get("defaultScope") != null && !jsonObj.get("defaultScope").isJsonNull()) && !jsonObj.get("defaultScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultScope").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("grantTypes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("grantTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `grantTypes` to be an array in the JSON string but got `%s`", jsonObj.get("grantTypes").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("resourceOwnerPassword") != null && !jsonObj.get("resourceOwnerPassword").isJsonNull()) && !jsonObj.get("resourceOwnerPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceOwnerPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceOwnerPassword").toString()));
      }
      if ((jsonObj.get("resourceOwnerUsername") != null && !jsonObj.get("resourceOwnerUsername").isJsonNull()) && !jsonObj.get("resourceOwnerUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceOwnerUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceOwnerUsername").toString()));
      }
      if (jsonObj.get("tokenBodyParameters") != null && !jsonObj.get("tokenBodyParameters").isJsonNull()) {
        JsonArray jsonArraytokenBodyParameters = jsonObj.getAsJsonArray("tokenBodyParameters");
        if (jsonArraytokenBodyParameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tokenBodyParameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tokenBodyParameters` to be an array in the JSON string but got `%s`", jsonObj.get("tokenBodyParameters").toString()));
          }

          // validate the optional field `tokenBodyParameters` (array)
          for (int i = 0; i < jsonArraytokenBodyParameters.size(); i++) {
            TokenBodyParameterContract.validateJsonElement(jsonArraytokenBodyParameters.get(i));
          };
        }
      }
      if ((jsonObj.get("tokenEndpoint") != null && !jsonObj.get("tokenEndpoint").isJsonNull()) && !jsonObj.get("tokenEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenEndpoint").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OAuth2AuthorizationServerContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OAuth2AuthorizationServerContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OAuth2AuthorizationServerContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OAuth2AuthorizationServerContract.class));

       return (TypeAdapter<T>) new TypeAdapter<OAuth2AuthorizationServerContract>() {
           @Override
           public void write(JsonWriter out, OAuth2AuthorizationServerContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OAuth2AuthorizationServerContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OAuth2AuthorizationServerContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OAuth2AuthorizationServerContract
   * @throws IOException if the JSON string is invalid with respect to OAuth2AuthorizationServerContract
   */
  public static OAuth2AuthorizationServerContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OAuth2AuthorizationServerContract.class);
  }

  /**
   * Convert an instance of OAuth2AuthorizationServerContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

