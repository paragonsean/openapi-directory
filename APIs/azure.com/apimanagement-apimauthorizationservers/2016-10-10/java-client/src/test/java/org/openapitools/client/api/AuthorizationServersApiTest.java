/*
 * ApiManagementClient
 * Use these REST APIs for managing OAuth2 servers configuration in your Azure API Management deployment. OAuth 2.0 can be used to authorize developer accounts for Azure API Management. For more information refer to [How to OAuth2](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-oauth2).
 *
 * The version of the OpenAPI document: 2016-10-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AuthorizationServerCollection;
import org.openapitools.client.model.AuthorizationServersGetDefaultResponse;
import org.openapitools.client.model.OAuth2AuthorizationServerContract;
import org.openapitools.client.model.OAuth2AuthorizationServerUpdateContract;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthorizationServersApi
 */
@Disabled
public class AuthorizationServersApiTest {

    private final AuthorizationServersApi api = new AuthorizationServersApi();

    /**
     * Creates new authorization server or updates an existing authorization server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizationServersCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String authsid = null;
        String apiVersion = null;
        String subscriptionId = null;
        OAuth2AuthorizationServerContract parameters = null;
        api.authorizationServersCreateOrUpdate(resourceGroupName, serviceName, authsid, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes specific authorization server instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizationServersDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String authsid = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.authorizationServersDelete(resourceGroupName, serviceName, authsid, ifMatch, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the details of the authorization server specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizationServersGetTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String authsid = null;
        String apiVersion = null;
        String subscriptionId = null;
        OAuth2AuthorizationServerContract response = api.authorizationServersGet(resourceGroupName, serviceName, authsid, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists a collection of authorization servers defined within a service instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizationServersListByServiceTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        AuthorizationServerCollection response = api.authorizationServersListByService(resourceGroupName, serviceName, apiVersion, subscriptionId, $filter, $top, $skip);
        // TODO: test validations
    }

    /**
     * Updates the details of the authorization server specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizationServersUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String authsid = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        OAuth2AuthorizationServerUpdateContract parameters = null;
        api.authorizationServersUpdate(resourceGroupName, serviceName, authsid, ifMatch, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
