/**
 * ApiManagementClient
 * Use these REST APIs for managing OAuth2 servers configuration in your Azure API Management deployment. OAuth 2.0 can be used to authorize developer accounts for Azure API Management. For more information refer to [How to OAuth2](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-oauth2).
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiManagementClient);
  }
}(this, function(expect, ApiManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApiManagementClient.AuthorizationServersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AuthorizationServersApi', function() {
    describe('authorizationServerCreateOrUpdate', function() {
      it('should call authorizationServerCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test authorizationServerCreateOrUpdate
        //instance.authorizationServerCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authorizationServerDelete', function() {
      it('should call authorizationServerDelete successfully', function(done) {
        //uncomment below and update the code to test authorizationServerDelete
        //instance.authorizationServerDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authorizationServerGet', function() {
      it('should call authorizationServerGet successfully', function(done) {
        //uncomment below and update the code to test authorizationServerGet
        //instance.authorizationServerGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authorizationServerGetEntityTag', function() {
      it('should call authorizationServerGetEntityTag successfully', function(done) {
        //uncomment below and update the code to test authorizationServerGetEntityTag
        //instance.authorizationServerGetEntityTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authorizationServerListByService', function() {
      it('should call authorizationServerListByService successfully', function(done) {
        //uncomment below and update the code to test authorizationServerListByService
        //instance.authorizationServerListByService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('authorizationServerUpdate', function() {
      it('should call authorizationServerUpdate successfully', function(done) {
        //uncomment below and update the code to test authorizationServerUpdate
        //instance.authorizationServerUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
