/**
 * ApiManagementClient
 * Use these REST APIs for managing OAuth2 servers configuration in your Azure API Management deployment. OAuth 2.0 can be used to authorize developer accounts for Azure API Management. For more information refer to [How to OAuth2](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-oauth2).
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TokenBodyParameterContract model module.
 * @module model/TokenBodyParameterContract
 * @version 2018-01-01
 */
class TokenBodyParameterContract {
    /**
     * Constructs a new <code>TokenBodyParameterContract</code>.
     * OAuth acquire token request body parameter (www-url-form-encoded).
     * @alias module:model/TokenBodyParameterContract
     * @param name {String} body parameter name.
     * @param value {String} body parameter value.
     */
    constructor(name, value) { 
        
        TokenBodyParameterContract.initialize(this, name, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, value) { 
        obj['name'] = name;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>TokenBodyParameterContract</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenBodyParameterContract} obj Optional instance to populate.
     * @return {module:model/TokenBodyParameterContract} The populated <code>TokenBodyParameterContract</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TokenBodyParameterContract();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TokenBodyParameterContract</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TokenBodyParameterContract</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TokenBodyParameterContract.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

TokenBodyParameterContract.RequiredProperties = ["name", "value"];

/**
 * body parameter name.
 * @member {String} name
 */
TokenBodyParameterContract.prototype['name'] = undefined;

/**
 * body parameter value.
 * @member {String} value
 */
TokenBodyParameterContract.prototype['value'] = undefined;






export default TokenBodyParameterContract;

