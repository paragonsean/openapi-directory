/**
 * ApiManagementClient
 * Use these REST APIs for managing OAuth2 servers configuration in your Azure API Management deployment. OAuth 2.0 can be used to authorize developer accounts for Azure API Management. For more information refer to [How to OAuth2](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-oauth2).
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAuthorizationServerContractProperties.h
 *
 * External OAuth authorization server settings Properties.
 */

#ifndef OAIAuthorizationServerContractProperties_H
#define OAIAuthorizationServerContractProperties_H

#include <QJsonObject>

#include "OAITokenBodyParameterContract.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITokenBodyParameterContract;

class OAIAuthorizationServerContractProperties : public OAIObject {
public:
    OAIAuthorizationServerContractProperties();
    OAIAuthorizationServerContractProperties(QString json);
    ~OAIAuthorizationServerContractProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAuthorizationEndpoint() const;
    void setAuthorizationEndpoint(const QString &authorization_endpoint);
    bool is_authorization_endpoint_Set() const;
    bool is_authorization_endpoint_Valid() const;

    QString getClientId() const;
    void setClientId(const QString &client_id);
    bool is_client_id_Set() const;
    bool is_client_id_Valid() const;

    QString getClientRegistrationEndpoint() const;
    void setClientRegistrationEndpoint(const QString &client_registration_endpoint);
    bool is_client_registration_endpoint_Set() const;
    bool is_client_registration_endpoint_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QList<QString> getGrantTypes() const;
    void setGrantTypes(const QList<QString> &grant_types);
    bool is_grant_types_Set() const;
    bool is_grant_types_Valid() const;

    QList<QString> getAuthorizationMethods() const;
    void setAuthorizationMethods(const QList<QString> &authorization_methods);
    bool is_authorization_methods_Set() const;
    bool is_authorization_methods_Valid() const;

    QList<QString> getBearerTokenSendingMethods() const;
    void setBearerTokenSendingMethods(const QList<QString> &bearer_token_sending_methods);
    bool is_bearer_token_sending_methods_Set() const;
    bool is_bearer_token_sending_methods_Valid() const;

    QList<QString> getClientAuthenticationMethod() const;
    void setClientAuthenticationMethod(const QList<QString> &client_authentication_method);
    bool is_client_authentication_method_Set() const;
    bool is_client_authentication_method_Valid() const;

    QString getClientSecret() const;
    void setClientSecret(const QString &client_secret);
    bool is_client_secret_Set() const;
    bool is_client_secret_Valid() const;

    QString getDefaultScope() const;
    void setDefaultScope(const QString &default_scope);
    bool is_default_scope_Set() const;
    bool is_default_scope_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getResourceOwnerPassword() const;
    void setResourceOwnerPassword(const QString &resource_owner_password);
    bool is_resource_owner_password_Set() const;
    bool is_resource_owner_password_Valid() const;

    QString getResourceOwnerUsername() const;
    void setResourceOwnerUsername(const QString &resource_owner_username);
    bool is_resource_owner_username_Set() const;
    bool is_resource_owner_username_Valid() const;

    bool isSupportState() const;
    void setSupportState(const bool &support_state);
    bool is_support_state_Set() const;
    bool is_support_state_Valid() const;

    QList<OAITokenBodyParameterContract> getTokenBodyParameters() const;
    void setTokenBodyParameters(const QList<OAITokenBodyParameterContract> &token_body_parameters);
    bool is_token_body_parameters_Set() const;
    bool is_token_body_parameters_Valid() const;

    QString getTokenEndpoint() const;
    void setTokenEndpoint(const QString &token_endpoint);
    bool is_token_endpoint_Set() const;
    bool is_token_endpoint_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_authorization_endpoint;
    bool m_authorization_endpoint_isSet;
    bool m_authorization_endpoint_isValid;

    QString m_client_id;
    bool m_client_id_isSet;
    bool m_client_id_isValid;

    QString m_client_registration_endpoint;
    bool m_client_registration_endpoint_isSet;
    bool m_client_registration_endpoint_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QList<QString> m_grant_types;
    bool m_grant_types_isSet;
    bool m_grant_types_isValid;

    QList<QString> m_authorization_methods;
    bool m_authorization_methods_isSet;
    bool m_authorization_methods_isValid;

    QList<QString> m_bearer_token_sending_methods;
    bool m_bearer_token_sending_methods_isSet;
    bool m_bearer_token_sending_methods_isValid;

    QList<QString> m_client_authentication_method;
    bool m_client_authentication_method_isSet;
    bool m_client_authentication_method_isValid;

    QString m_client_secret;
    bool m_client_secret_isSet;
    bool m_client_secret_isValid;

    QString m_default_scope;
    bool m_default_scope_isSet;
    bool m_default_scope_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_resource_owner_password;
    bool m_resource_owner_password_isSet;
    bool m_resource_owner_password_isValid;

    QString m_resource_owner_username;
    bool m_resource_owner_username_isSet;
    bool m_resource_owner_username_isValid;

    bool m_support_state;
    bool m_support_state_isSet;
    bool m_support_state_isValid;

    QList<OAITokenBodyParameterContract> m_token_body_parameters;
    bool m_token_body_parameters_isSet;
    bool m_token_body_parameters_isValid;

    QString m_token_endpoint;
    bool m_token_endpoint_isSet;
    bool m_token_endpoint_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAuthorizationServerContractProperties)

#endif // OAIAuthorizationServerContractProperties_H
