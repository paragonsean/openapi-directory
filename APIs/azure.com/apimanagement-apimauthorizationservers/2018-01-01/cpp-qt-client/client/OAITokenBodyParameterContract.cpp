/**
 * ApiManagementClient
 * Use these REST APIs for managing OAuth2 servers configuration in your Azure API Management deployment. OAuth 2.0 can be used to authorize developer accounts for Azure API Management. For more information refer to [How to OAuth2](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-oauth2).
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITokenBodyParameterContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITokenBodyParameterContract::OAITokenBodyParameterContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITokenBodyParameterContract::OAITokenBodyParameterContract() {
    this->initializeModel();
}

OAITokenBodyParameterContract::~OAITokenBodyParameterContract() {}

void OAITokenBodyParameterContract::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAITokenBodyParameterContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITokenBodyParameterContract::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAITokenBodyParameterContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITokenBodyParameterContract::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAITokenBodyParameterContract::getName() const {
    return m_name;
}
void OAITokenBodyParameterContract::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITokenBodyParameterContract::is_name_Set() const{
    return m_name_isSet;
}

bool OAITokenBodyParameterContract::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITokenBodyParameterContract::getValue() const {
    return m_value;
}
void OAITokenBodyParameterContract::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAITokenBodyParameterContract::is_value_Set() const{
    return m_value_isSet;
}

bool OAITokenBodyParameterContract::is_value_Valid() const{
    return m_value_isValid;
}

bool OAITokenBodyParameterContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITokenBodyParameterContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
