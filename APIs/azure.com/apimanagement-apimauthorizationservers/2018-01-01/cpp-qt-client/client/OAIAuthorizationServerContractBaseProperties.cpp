/**
 * ApiManagementClient
 * Use these REST APIs for managing OAuth2 servers configuration in your Azure API Management deployment. OAuth 2.0 can be used to authorize developer accounts for Azure API Management. For more information refer to [How to OAuth2](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-oauth2).
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorizationServerContractBaseProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorizationServerContractBaseProperties::OAIAuthorizationServerContractBaseProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorizationServerContractBaseProperties::OAIAuthorizationServerContractBaseProperties() {
    this->initializeModel();
}

OAIAuthorizationServerContractBaseProperties::~OAIAuthorizationServerContractBaseProperties() {}

void OAIAuthorizationServerContractBaseProperties::initializeModel() {

    m_authorization_methods_isSet = false;
    m_authorization_methods_isValid = false;

    m_bearer_token_sending_methods_isSet = false;
    m_bearer_token_sending_methods_isValid = false;

    m_client_authentication_method_isSet = false;
    m_client_authentication_method_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_default_scope_isSet = false;
    m_default_scope_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_resource_owner_password_isSet = false;
    m_resource_owner_password_isValid = false;

    m_resource_owner_username_isSet = false;
    m_resource_owner_username_isValid = false;

    m_support_state_isSet = false;
    m_support_state_isValid = false;

    m_token_body_parameters_isSet = false;
    m_token_body_parameters_isValid = false;

    m_token_endpoint_isSet = false;
    m_token_endpoint_isValid = false;
}

void OAIAuthorizationServerContractBaseProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorizationServerContractBaseProperties::fromJsonObject(QJsonObject json) {

    m_authorization_methods_isValid = ::OpenAPI::fromJsonValue(m_authorization_methods, json[QString("authorizationMethods")]);
    m_authorization_methods_isSet = !json[QString("authorizationMethods")].isNull() && m_authorization_methods_isValid;

    m_bearer_token_sending_methods_isValid = ::OpenAPI::fromJsonValue(m_bearer_token_sending_methods, json[QString("bearerTokenSendingMethods")]);
    m_bearer_token_sending_methods_isSet = !json[QString("bearerTokenSendingMethods")].isNull() && m_bearer_token_sending_methods_isValid;

    m_client_authentication_method_isValid = ::OpenAPI::fromJsonValue(m_client_authentication_method, json[QString("clientAuthenticationMethod")]);
    m_client_authentication_method_isSet = !json[QString("clientAuthenticationMethod")].isNull() && m_client_authentication_method_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;

    m_default_scope_isValid = ::OpenAPI::fromJsonValue(m_default_scope, json[QString("defaultScope")]);
    m_default_scope_isSet = !json[QString("defaultScope")].isNull() && m_default_scope_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_resource_owner_password_isValid = ::OpenAPI::fromJsonValue(m_resource_owner_password, json[QString("resourceOwnerPassword")]);
    m_resource_owner_password_isSet = !json[QString("resourceOwnerPassword")].isNull() && m_resource_owner_password_isValid;

    m_resource_owner_username_isValid = ::OpenAPI::fromJsonValue(m_resource_owner_username, json[QString("resourceOwnerUsername")]);
    m_resource_owner_username_isSet = !json[QString("resourceOwnerUsername")].isNull() && m_resource_owner_username_isValid;

    m_support_state_isValid = ::OpenAPI::fromJsonValue(m_support_state, json[QString("supportState")]);
    m_support_state_isSet = !json[QString("supportState")].isNull() && m_support_state_isValid;

    m_token_body_parameters_isValid = ::OpenAPI::fromJsonValue(m_token_body_parameters, json[QString("tokenBodyParameters")]);
    m_token_body_parameters_isSet = !json[QString("tokenBodyParameters")].isNull() && m_token_body_parameters_isValid;

    m_token_endpoint_isValid = ::OpenAPI::fromJsonValue(m_token_endpoint, json[QString("tokenEndpoint")]);
    m_token_endpoint_isSet = !json[QString("tokenEndpoint")].isNull() && m_token_endpoint_isValid;
}

QString OAIAuthorizationServerContractBaseProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorizationServerContractBaseProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_methods.size() > 0) {
        obj.insert(QString("authorizationMethods"), ::OpenAPI::toJsonValue(m_authorization_methods));
    }
    if (m_bearer_token_sending_methods.size() > 0) {
        obj.insert(QString("bearerTokenSendingMethods"), ::OpenAPI::toJsonValue(m_bearer_token_sending_methods));
    }
    if (m_client_authentication_method.size() > 0) {
        obj.insert(QString("clientAuthenticationMethod"), ::OpenAPI::toJsonValue(m_client_authentication_method));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_default_scope_isSet) {
        obj.insert(QString("defaultScope"), ::OpenAPI::toJsonValue(m_default_scope));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_resource_owner_password_isSet) {
        obj.insert(QString("resourceOwnerPassword"), ::OpenAPI::toJsonValue(m_resource_owner_password));
    }
    if (m_resource_owner_username_isSet) {
        obj.insert(QString("resourceOwnerUsername"), ::OpenAPI::toJsonValue(m_resource_owner_username));
    }
    if (m_support_state_isSet) {
        obj.insert(QString("supportState"), ::OpenAPI::toJsonValue(m_support_state));
    }
    if (m_token_body_parameters.size() > 0) {
        obj.insert(QString("tokenBodyParameters"), ::OpenAPI::toJsonValue(m_token_body_parameters));
    }
    if (m_token_endpoint_isSet) {
        obj.insert(QString("tokenEndpoint"), ::OpenAPI::toJsonValue(m_token_endpoint));
    }
    return obj;
}

QList<QString> OAIAuthorizationServerContractBaseProperties::getAuthorizationMethods() const {
    return m_authorization_methods;
}
void OAIAuthorizationServerContractBaseProperties::setAuthorizationMethods(const QList<QString> &authorization_methods) {
    m_authorization_methods = authorization_methods;
    m_authorization_methods_isSet = true;
}

bool OAIAuthorizationServerContractBaseProperties::is_authorization_methods_Set() const{
    return m_authorization_methods_isSet;
}

bool OAIAuthorizationServerContractBaseProperties::is_authorization_methods_Valid() const{
    return m_authorization_methods_isValid;
}

QList<QString> OAIAuthorizationServerContractBaseProperties::getBearerTokenSendingMethods() const {
    return m_bearer_token_sending_methods;
}
void OAIAuthorizationServerContractBaseProperties::setBearerTokenSendingMethods(const QList<QString> &bearer_token_sending_methods) {
    m_bearer_token_sending_methods = bearer_token_sending_methods;
    m_bearer_token_sending_methods_isSet = true;
}

bool OAIAuthorizationServerContractBaseProperties::is_bearer_token_sending_methods_Set() const{
    return m_bearer_token_sending_methods_isSet;
}

bool OAIAuthorizationServerContractBaseProperties::is_bearer_token_sending_methods_Valid() const{
    return m_bearer_token_sending_methods_isValid;
}

QList<QString> OAIAuthorizationServerContractBaseProperties::getClientAuthenticationMethod() const {
    return m_client_authentication_method;
}
void OAIAuthorizationServerContractBaseProperties::setClientAuthenticationMethod(const QList<QString> &client_authentication_method) {
    m_client_authentication_method = client_authentication_method;
    m_client_authentication_method_isSet = true;
}

bool OAIAuthorizationServerContractBaseProperties::is_client_authentication_method_Set() const{
    return m_client_authentication_method_isSet;
}

bool OAIAuthorizationServerContractBaseProperties::is_client_authentication_method_Valid() const{
    return m_client_authentication_method_isValid;
}

QString OAIAuthorizationServerContractBaseProperties::getClientSecret() const {
    return m_client_secret;
}
void OAIAuthorizationServerContractBaseProperties::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIAuthorizationServerContractBaseProperties::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIAuthorizationServerContractBaseProperties::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QString OAIAuthorizationServerContractBaseProperties::getDefaultScope() const {
    return m_default_scope;
}
void OAIAuthorizationServerContractBaseProperties::setDefaultScope(const QString &default_scope) {
    m_default_scope = default_scope;
    m_default_scope_isSet = true;
}

bool OAIAuthorizationServerContractBaseProperties::is_default_scope_Set() const{
    return m_default_scope_isSet;
}

bool OAIAuthorizationServerContractBaseProperties::is_default_scope_Valid() const{
    return m_default_scope_isValid;
}

QString OAIAuthorizationServerContractBaseProperties::getDescription() const {
    return m_description;
}
void OAIAuthorizationServerContractBaseProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAuthorizationServerContractBaseProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAuthorizationServerContractBaseProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAuthorizationServerContractBaseProperties::getResourceOwnerPassword() const {
    return m_resource_owner_password;
}
void OAIAuthorizationServerContractBaseProperties::setResourceOwnerPassword(const QString &resource_owner_password) {
    m_resource_owner_password = resource_owner_password;
    m_resource_owner_password_isSet = true;
}

bool OAIAuthorizationServerContractBaseProperties::is_resource_owner_password_Set() const{
    return m_resource_owner_password_isSet;
}

bool OAIAuthorizationServerContractBaseProperties::is_resource_owner_password_Valid() const{
    return m_resource_owner_password_isValid;
}

QString OAIAuthorizationServerContractBaseProperties::getResourceOwnerUsername() const {
    return m_resource_owner_username;
}
void OAIAuthorizationServerContractBaseProperties::setResourceOwnerUsername(const QString &resource_owner_username) {
    m_resource_owner_username = resource_owner_username;
    m_resource_owner_username_isSet = true;
}

bool OAIAuthorizationServerContractBaseProperties::is_resource_owner_username_Set() const{
    return m_resource_owner_username_isSet;
}

bool OAIAuthorizationServerContractBaseProperties::is_resource_owner_username_Valid() const{
    return m_resource_owner_username_isValid;
}

bool OAIAuthorizationServerContractBaseProperties::isSupportState() const {
    return m_support_state;
}
void OAIAuthorizationServerContractBaseProperties::setSupportState(const bool &support_state) {
    m_support_state = support_state;
    m_support_state_isSet = true;
}

bool OAIAuthorizationServerContractBaseProperties::is_support_state_Set() const{
    return m_support_state_isSet;
}

bool OAIAuthorizationServerContractBaseProperties::is_support_state_Valid() const{
    return m_support_state_isValid;
}

QList<OAITokenBodyParameterContract> OAIAuthorizationServerContractBaseProperties::getTokenBodyParameters() const {
    return m_token_body_parameters;
}
void OAIAuthorizationServerContractBaseProperties::setTokenBodyParameters(const QList<OAITokenBodyParameterContract> &token_body_parameters) {
    m_token_body_parameters = token_body_parameters;
    m_token_body_parameters_isSet = true;
}

bool OAIAuthorizationServerContractBaseProperties::is_token_body_parameters_Set() const{
    return m_token_body_parameters_isSet;
}

bool OAIAuthorizationServerContractBaseProperties::is_token_body_parameters_Valid() const{
    return m_token_body_parameters_isValid;
}

QString OAIAuthorizationServerContractBaseProperties::getTokenEndpoint() const {
    return m_token_endpoint;
}
void OAIAuthorizationServerContractBaseProperties::setTokenEndpoint(const QString &token_endpoint) {
    m_token_endpoint = token_endpoint;
    m_token_endpoint_isSet = true;
}

bool OAIAuthorizationServerContractBaseProperties::is_token_endpoint_Set() const{
    return m_token_endpoint_isSet;
}

bool OAIAuthorizationServerContractBaseProperties::is_token_endpoint_Valid() const{
    return m_token_endpoint_isValid;
}

bool OAIAuthorizationServerContractBaseProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_bearer_token_sending_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_authentication_method.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_owner_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_owner_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_body_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorizationServerContractBaseProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
