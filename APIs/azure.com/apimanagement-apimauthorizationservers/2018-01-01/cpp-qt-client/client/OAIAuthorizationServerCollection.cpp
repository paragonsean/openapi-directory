/**
 * ApiManagementClient
 * Use these REST APIs for managing OAuth2 servers configuration in your Azure API Management deployment. OAuth 2.0 can be used to authorize developer accounts for Azure API Management. For more information refer to [How to OAuth2](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-oauth2).
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorizationServerCollection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorizationServerCollection::OAIAuthorizationServerCollection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorizationServerCollection::OAIAuthorizationServerCollection() {
    this->initializeModel();
}

OAIAuthorizationServerCollection::~OAIAuthorizationServerCollection() {}

void OAIAuthorizationServerCollection::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_next_link_isSet = false;
    m_next_link_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIAuthorizationServerCollection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorizationServerCollection::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_next_link_isValid = ::OpenAPI::fromJsonValue(m_next_link, json[QString("nextLink")]);
    m_next_link_isSet = !json[QString("nextLink")].isNull() && m_next_link_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIAuthorizationServerCollection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorizationServerCollection::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_next_link_isSet) {
        obj.insert(QString("nextLink"), ::OpenAPI::toJsonValue(m_next_link));
    }
    if (m_value.size() > 0) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

qint64 OAIAuthorizationServerCollection::getCount() const {
    return m_count;
}
void OAIAuthorizationServerCollection::setCount(const qint64 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIAuthorizationServerCollection::is_count_Set() const{
    return m_count_isSet;
}

bool OAIAuthorizationServerCollection::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIAuthorizationServerCollection::getNextLink() const {
    return m_next_link;
}
void OAIAuthorizationServerCollection::setNextLink(const QString &next_link) {
    m_next_link = next_link;
    m_next_link_isSet = true;
}

bool OAIAuthorizationServerCollection::is_next_link_Set() const{
    return m_next_link_isSet;
}

bool OAIAuthorizationServerCollection::is_next_link_Valid() const{
    return m_next_link_isValid;
}

QList<OAIAuthorizationServerContract> OAIAuthorizationServerCollection::getValue() const {
    return m_value;
}
void OAIAuthorizationServerCollection::setValue(const QList<OAIAuthorizationServerContract> &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIAuthorizationServerCollection::is_value_Set() const{
    return m_value_isSet;
}

bool OAIAuthorizationServerCollection::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIAuthorizationServerCollection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorizationServerCollection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
