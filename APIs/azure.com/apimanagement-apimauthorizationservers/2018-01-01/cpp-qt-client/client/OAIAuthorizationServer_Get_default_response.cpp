/**
 * ApiManagementClient
 * Use these REST APIs for managing OAuth2 servers configuration in your Azure API Management deployment. OAuth 2.0 can be used to authorize developer accounts for Azure API Management. For more information refer to [How to OAuth2](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-oauth2).
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorizationServer_Get_default_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorizationServer_Get_default_response::OAIAuthorizationServer_Get_default_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorizationServer_Get_default_response::OAIAuthorizationServer_Get_default_response() {
    this->initializeModel();
}

OAIAuthorizationServer_Get_default_response::~OAIAuthorizationServer_Get_default_response() {}

void OAIAuthorizationServer_Get_default_response::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;
}

void OAIAuthorizationServer_Get_default_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorizationServer_Get_default_response::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;
}

QString OAIAuthorizationServer_Get_default_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorizationServer_Get_default_response::asJsonObject() const {
    QJsonObject obj;
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    return obj;
}

OAIAuthorizationServer_Get_default_response_error OAIAuthorizationServer_Get_default_response::getError() const {
    return m_error;
}
void OAIAuthorizationServer_Get_default_response::setError(const OAIAuthorizationServer_Get_default_response_error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIAuthorizationServer_Get_default_response::is_error_Set() const{
    return m_error_isSet;
}

bool OAIAuthorizationServer_Get_default_response::is_error_Valid() const{
    return m_error_isValid;
}

bool OAIAuthorizationServer_Get_default_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorizationServer_Get_default_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
