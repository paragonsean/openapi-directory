# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthorizationServerUpdateRequestProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_endpoint: str=None, client_id: str=None, client_registration_endpoint: str=None, client_secret: str=None, display_name: str=None, grant_types: List[str]=None):
        """AuthorizationServerUpdateRequestProperties - a model defined in OpenAPI

        :param authorization_endpoint: The authorization_endpoint of this AuthorizationServerUpdateRequestProperties.
        :param client_id: The client_id of this AuthorizationServerUpdateRequestProperties.
        :param client_registration_endpoint: The client_registration_endpoint of this AuthorizationServerUpdateRequestProperties.
        :param client_secret: The client_secret of this AuthorizationServerUpdateRequestProperties.
        :param display_name: The display_name of this AuthorizationServerUpdateRequestProperties.
        :param grant_types: The grant_types of this AuthorizationServerUpdateRequestProperties.
        """
        self.openapi_types = {
            'authorization_endpoint': str,
            'client_id': str,
            'client_registration_endpoint': str,
            'client_secret': str,
            'display_name': str,
            'grant_types': List[str]
        }

        self.attribute_map = {
            'authorization_endpoint': 'authorizationEndpoint',
            'client_id': 'clientId',
            'client_registration_endpoint': 'clientRegistrationEndpoint',
            'client_secret': 'clientSecret',
            'display_name': 'displayName',
            'grant_types': 'grantTypes'
        }

        self._authorization_endpoint = authorization_endpoint
        self._client_id = client_id
        self._client_registration_endpoint = client_registration_endpoint
        self._client_secret = client_secret
        self._display_name = display_name
        self._grant_types = grant_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthorizationServerUpdateRequestProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthorizationServer_Update_request_properties of this AuthorizationServerUpdateRequestProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_endpoint(self):
        """Gets the authorization_endpoint of this AuthorizationServerUpdateRequestProperties.

        OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2.

        :return: The authorization_endpoint of this AuthorizationServerUpdateRequestProperties.
        :rtype: str
        """
        return self._authorization_endpoint

    @authorization_endpoint.setter
    def authorization_endpoint(self, authorization_endpoint):
        """Sets the authorization_endpoint of this AuthorizationServerUpdateRequestProperties.

        OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2.

        :param authorization_endpoint: The authorization_endpoint of this AuthorizationServerUpdateRequestProperties.
        :type authorization_endpoint: str
        """

        self._authorization_endpoint = authorization_endpoint

    @property
    def client_id(self):
        """Gets the client_id of this AuthorizationServerUpdateRequestProperties.

        Client or app id registered with this authorization server.

        :return: The client_id of this AuthorizationServerUpdateRequestProperties.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this AuthorizationServerUpdateRequestProperties.

        Client or app id registered with this authorization server.

        :param client_id: The client_id of this AuthorizationServerUpdateRequestProperties.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def client_registration_endpoint(self):
        """Gets the client_registration_endpoint of this AuthorizationServerUpdateRequestProperties.

        Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced.

        :return: The client_registration_endpoint of this AuthorizationServerUpdateRequestProperties.
        :rtype: str
        """
        return self._client_registration_endpoint

    @client_registration_endpoint.setter
    def client_registration_endpoint(self, client_registration_endpoint):
        """Sets the client_registration_endpoint of this AuthorizationServerUpdateRequestProperties.

        Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced.

        :param client_registration_endpoint: The client_registration_endpoint of this AuthorizationServerUpdateRequestProperties.
        :type client_registration_endpoint: str
        """

        self._client_registration_endpoint = client_registration_endpoint

    @property
    def client_secret(self):
        """Gets the client_secret of this AuthorizationServerUpdateRequestProperties.

        Client or app secret registered with this authorization server. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.

        :return: The client_secret of this AuthorizationServerUpdateRequestProperties.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this AuthorizationServerUpdateRequestProperties.

        Client or app secret registered with this authorization server. This property will not be filled on 'GET' operations! Use '/listSecrets' POST request to get the value.

        :param client_secret: The client_secret of this AuthorizationServerUpdateRequestProperties.
        :type client_secret: str
        """

        self._client_secret = client_secret

    @property
    def display_name(self):
        """Gets the display_name of this AuthorizationServerUpdateRequestProperties.

        User-friendly authorization server name.

        :return: The display_name of this AuthorizationServerUpdateRequestProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AuthorizationServerUpdateRequestProperties.

        User-friendly authorization server name.

        :param display_name: The display_name of this AuthorizationServerUpdateRequestProperties.
        :type display_name: str
        """
        if display_name is not None and len(display_name) > 50:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `50`")
        if display_name is not None and len(display_name) < 1:
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")

        self._display_name = display_name

    @property
    def grant_types(self):
        """Gets the grant_types of this AuthorizationServerUpdateRequestProperties.

        Form of an authorization grant, which the client uses to request the access token.

        :return: The grant_types of this AuthorizationServerUpdateRequestProperties.
        :rtype: List[str]
        """
        return self._grant_types

    @grant_types.setter
    def grant_types(self, grant_types):
        """Sets the grant_types of this AuthorizationServerUpdateRequestProperties.

        Form of an authorization grant, which the client uses to request the access token.

        :param grant_types: The grant_types of this AuthorizationServerUpdateRequestProperties.
        :type grant_types: List[str]
        """
        allowed_values = ["authorizationCode", "implicit", "resourceOwnerPassword", "clientCredentials"]  # noqa: E501
        if not set(grant_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `grant_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(grant_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._grant_types = grant_types
