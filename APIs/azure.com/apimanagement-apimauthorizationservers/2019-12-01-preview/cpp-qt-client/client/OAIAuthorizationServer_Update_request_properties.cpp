/**
 * ApiManagementClient
 * Use these REST APIs for managing OAuth2 servers configuration in your Azure API Management deployment. OAuth 2.0 can be used to authorize developer accounts for Azure API Management. For more information refer to [How to OAuth2](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-oauth2).
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorizationServer_Update_request_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorizationServer_Update_request_properties::OAIAuthorizationServer_Update_request_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorizationServer_Update_request_properties::OAIAuthorizationServer_Update_request_properties() {
    this->initializeModel();
}

OAIAuthorizationServer_Update_request_properties::~OAIAuthorizationServer_Update_request_properties() {}

void OAIAuthorizationServer_Update_request_properties::initializeModel() {

    m_authorization_endpoint_isSet = false;
    m_authorization_endpoint_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_registration_endpoint_isSet = false;
    m_client_registration_endpoint_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_grant_types_isSet = false;
    m_grant_types_isValid = false;
}

void OAIAuthorizationServer_Update_request_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorizationServer_Update_request_properties::fromJsonObject(QJsonObject json) {

    m_authorization_endpoint_isValid = ::OpenAPI::fromJsonValue(m_authorization_endpoint, json[QString("authorizationEndpoint")]);
    m_authorization_endpoint_isSet = !json[QString("authorizationEndpoint")].isNull() && m_authorization_endpoint_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_registration_endpoint_isValid = ::OpenAPI::fromJsonValue(m_client_registration_endpoint, json[QString("clientRegistrationEndpoint")]);
    m_client_registration_endpoint_isSet = !json[QString("clientRegistrationEndpoint")].isNull() && m_client_registration_endpoint_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_grant_types_isValid = ::OpenAPI::fromJsonValue(m_grant_types, json[QString("grantTypes")]);
    m_grant_types_isSet = !json[QString("grantTypes")].isNull() && m_grant_types_isValid;
}

QString OAIAuthorizationServer_Update_request_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorizationServer_Update_request_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_endpoint_isSet) {
        obj.insert(QString("authorizationEndpoint"), ::OpenAPI::toJsonValue(m_authorization_endpoint));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_registration_endpoint_isSet) {
        obj.insert(QString("clientRegistrationEndpoint"), ::OpenAPI::toJsonValue(m_client_registration_endpoint));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_grant_types.size() > 0) {
        obj.insert(QString("grantTypes"), ::OpenAPI::toJsonValue(m_grant_types));
    }
    return obj;
}

QString OAIAuthorizationServer_Update_request_properties::getAuthorizationEndpoint() const {
    return m_authorization_endpoint;
}
void OAIAuthorizationServer_Update_request_properties::setAuthorizationEndpoint(const QString &authorization_endpoint) {
    m_authorization_endpoint = authorization_endpoint;
    m_authorization_endpoint_isSet = true;
}

bool OAIAuthorizationServer_Update_request_properties::is_authorization_endpoint_Set() const{
    return m_authorization_endpoint_isSet;
}

bool OAIAuthorizationServer_Update_request_properties::is_authorization_endpoint_Valid() const{
    return m_authorization_endpoint_isValid;
}

QString OAIAuthorizationServer_Update_request_properties::getClientId() const {
    return m_client_id;
}
void OAIAuthorizationServer_Update_request_properties::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIAuthorizationServer_Update_request_properties::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIAuthorizationServer_Update_request_properties::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIAuthorizationServer_Update_request_properties::getClientRegistrationEndpoint() const {
    return m_client_registration_endpoint;
}
void OAIAuthorizationServer_Update_request_properties::setClientRegistrationEndpoint(const QString &client_registration_endpoint) {
    m_client_registration_endpoint = client_registration_endpoint;
    m_client_registration_endpoint_isSet = true;
}

bool OAIAuthorizationServer_Update_request_properties::is_client_registration_endpoint_Set() const{
    return m_client_registration_endpoint_isSet;
}

bool OAIAuthorizationServer_Update_request_properties::is_client_registration_endpoint_Valid() const{
    return m_client_registration_endpoint_isValid;
}

QString OAIAuthorizationServer_Update_request_properties::getClientSecret() const {
    return m_client_secret;
}
void OAIAuthorizationServer_Update_request_properties::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIAuthorizationServer_Update_request_properties::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIAuthorizationServer_Update_request_properties::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QString OAIAuthorizationServer_Update_request_properties::getDisplayName() const {
    return m_display_name;
}
void OAIAuthorizationServer_Update_request_properties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAuthorizationServer_Update_request_properties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAuthorizationServer_Update_request_properties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<QString> OAIAuthorizationServer_Update_request_properties::getGrantTypes() const {
    return m_grant_types;
}
void OAIAuthorizationServer_Update_request_properties::setGrantTypes(const QList<QString> &grant_types) {
    m_grant_types = grant_types;
    m_grant_types_isSet = true;
}

bool OAIAuthorizationServer_Update_request_properties::is_grant_types_Set() const{
    return m_grant_types_isSet;
}

bool OAIAuthorizationServer_Update_request_properties::is_grant_types_Valid() const{
    return m_grant_types_isValid;
}

bool OAIAuthorizationServer_Update_request_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_registration_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorizationServer_Update_request_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
