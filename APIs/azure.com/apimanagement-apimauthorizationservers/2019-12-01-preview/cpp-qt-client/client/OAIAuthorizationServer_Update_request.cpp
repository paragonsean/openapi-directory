/**
 * ApiManagementClient
 * Use these REST APIs for managing OAuth2 servers configuration in your Azure API Management deployment. OAuth 2.0 can be used to authorize developer accounts for Azure API Management. For more information refer to [How to OAuth2](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-oauth2).
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorizationServer_Update_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorizationServer_Update_request::OAIAuthorizationServer_Update_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorizationServer_Update_request::OAIAuthorizationServer_Update_request() {
    this->initializeModel();
}

OAIAuthorizationServer_Update_request::~OAIAuthorizationServer_Update_request() {}

void OAIAuthorizationServer_Update_request::initializeModel() {

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAuthorizationServer_Update_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorizationServer_Update_request::fromJsonObject(QJsonObject json) {

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAuthorizationServer_Update_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorizationServer_Update_request::asJsonObject() const {
    QJsonObject obj;
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIAuthorizationServer_Update_request_properties OAIAuthorizationServer_Update_request::getProperties() const {
    return m_properties;
}
void OAIAuthorizationServer_Update_request::setProperties(const OAIAuthorizationServer_Update_request_properties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIAuthorizationServer_Update_request::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIAuthorizationServer_Update_request::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIAuthorizationServer_Update_request::getId() const {
    return m_id;
}
void OAIAuthorizationServer_Update_request::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAuthorizationServer_Update_request::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAuthorizationServer_Update_request::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAuthorizationServer_Update_request::getName() const {
    return m_name;
}
void OAIAuthorizationServer_Update_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAuthorizationServer_Update_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAuthorizationServer_Update_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAuthorizationServer_Update_request::getType() const {
    return m_type;
}
void OAIAuthorizationServer_Update_request::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAuthorizationServer_Update_request::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAuthorizationServer_Update_request::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAuthorizationServer_Update_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorizationServer_Update_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
