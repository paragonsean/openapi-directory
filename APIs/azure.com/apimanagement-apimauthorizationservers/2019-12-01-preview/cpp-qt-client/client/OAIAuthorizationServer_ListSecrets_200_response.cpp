/**
 * ApiManagementClient
 * Use these REST APIs for managing OAuth2 servers configuration in your Azure API Management deployment. OAuth 2.0 can be used to authorize developer accounts for Azure API Management. For more information refer to [How to OAuth2](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-oauth2).
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorizationServer_ListSecrets_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorizationServer_ListSecrets_200_response::OAIAuthorizationServer_ListSecrets_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorizationServer_ListSecrets_200_response::OAIAuthorizationServer_ListSecrets_200_response() {
    this->initializeModel();
}

OAIAuthorizationServer_ListSecrets_200_response::~OAIAuthorizationServer_ListSecrets_200_response() {}

void OAIAuthorizationServer_ListSecrets_200_response::initializeModel() {

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;
}

void OAIAuthorizationServer_ListSecrets_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorizationServer_ListSecrets_200_response::fromJsonObject(QJsonObject json) {

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;
}

QString OAIAuthorizationServer_ListSecrets_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorizationServer_ListSecrets_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    return obj;
}

QString OAIAuthorizationServer_ListSecrets_200_response::getClientSecret() const {
    return m_client_secret;
}
void OAIAuthorizationServer_ListSecrets_200_response::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIAuthorizationServer_ListSecrets_200_response::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIAuthorizationServer_ListSecrets_200_response::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

bool OAIAuthorizationServer_ListSecrets_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorizationServer_ListSecrets_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
