/**
 * ApiManagementClient
 * Use these REST APIs for managing OAuth2 servers configuration in your Azure API Management deployment. OAuth 2.0 can be used to authorize developer accounts for Azure API Management. For more information refer to [How to OAuth2](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-oauth2).
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorizationServer_Get_default_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorizationServer_Get_default_response::OAIAuthorizationServer_Get_default_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorizationServer_Get_default_response::OAIAuthorizationServer_Get_default_response() {
    this->initializeModel();
}

OAIAuthorizationServer_Get_default_response::~OAIAuthorizationServer_Get_default_response() {}

void OAIAuthorizationServer_Get_default_response::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIAuthorizationServer_Get_default_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorizationServer_Get_default_response::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIAuthorizationServer_Get_default_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorizationServer_Get_default_response::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAIAuthorizationServer_Get_default_response::getCode() const {
    return m_code;
}
void OAIAuthorizationServer_Get_default_response::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIAuthorizationServer_Get_default_response::is_code_Set() const{
    return m_code_isSet;
}

bool OAIAuthorizationServer_Get_default_response::is_code_Valid() const{
    return m_code_isValid;
}

QList<OAIAuthorizationServer_Get_default_response_details_inner> OAIAuthorizationServer_Get_default_response::getDetails() const {
    return m_details;
}
void OAIAuthorizationServer_Get_default_response::setDetails(const QList<OAIAuthorizationServer_Get_default_response_details_inner> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIAuthorizationServer_Get_default_response::is_details_Set() const{
    return m_details_isSet;
}

bool OAIAuthorizationServer_Get_default_response::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIAuthorizationServer_Get_default_response::getMessage() const {
    return m_message;
}
void OAIAuthorizationServer_Get_default_response::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIAuthorizationServer_Get_default_response::is_message_Set() const{
    return m_message_isSet;
}

bool OAIAuthorizationServer_Get_default_response::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIAuthorizationServer_Get_default_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorizationServer_Get_default_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
