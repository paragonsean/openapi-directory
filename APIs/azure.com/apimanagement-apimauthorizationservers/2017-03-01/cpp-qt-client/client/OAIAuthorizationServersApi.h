/**
 * ApiManagementClient
 * Use these REST APIs for managing OAuth2 servers configuration in your Azure API Management deployment. OAuth 2.0 can be used to authorize developer accounts for Azure API Management. For more information refer to [How to OAuth2](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-oauth2).
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthorizationServersApi_H
#define OAI_OAIAuthorizationServersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAuthorizationServerCollection.h"
#include "OAIAuthorizationServerContract.h"
#include "OAIAuthorizationServerUpdateContract.h"
#include "OAIAuthorizationServer_Get_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthorizationServersApi : public QObject {
    Q_OBJECT

public:
    OAIAuthorizationServersApi(const int timeOut = 0);
    ~OAIAuthorizationServersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  authsid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIAuthorizationServerContract [required]
    */
    virtual void authorizationServerCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &authsid, const QString &api_version, const QString &subscription_id, const OAIAuthorizationServerContract &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  authsid QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void authorizationServerDelete(const QString &resource_group_name, const QString &service_name, const QString &authsid, const QString &if_match, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  authsid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void authorizationServerGet(const QString &resource_group_name, const QString &service_name, const QString &authsid, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  authsid QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void authorizationServerGetEntityTag(const QString &resource_group_name, const QString &service_name, const QString &authsid, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    */
    virtual void authorizationServerListByService(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  authsid QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIAuthorizationServerUpdateContract [required]
    */
    virtual void authorizationServerUpdate(const QString &resource_group_name, const QString &service_name, const QString &authsid, const QString &if_match, const QString &api_version, const QString &subscription_id, const OAIAuthorizationServerUpdateContract &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void authorizationServerCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void authorizationServerDeleteCallback(OAIHttpRequestWorker *worker);
    void authorizationServerGetCallback(OAIHttpRequestWorker *worker);
    void authorizationServerGetEntityTagCallback(OAIHttpRequestWorker *worker);
    void authorizationServerListByServiceCallback(OAIHttpRequestWorker *worker);
    void authorizationServerUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void authorizationServerCreateOrUpdateSignal(OAIAuthorizationServerContract summary);
    void authorizationServerDeleteSignal();
    void authorizationServerGetSignal(OAIAuthorizationServerContract summary);
    void authorizationServerGetEntityTagSignal();
    void authorizationServerListByServiceSignal(OAIAuthorizationServerCollection summary);
    void authorizationServerUpdateSignal();


    void authorizationServerCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAuthorizationServerContract summary);
    void authorizationServerDeleteSignalFull(OAIHttpRequestWorker *worker);
    void authorizationServerGetSignalFull(OAIHttpRequestWorker *worker, OAIAuthorizationServerContract summary);
    void authorizationServerGetEntityTagSignalFull(OAIHttpRequestWorker *worker);
    void authorizationServerListByServiceSignalFull(OAIHttpRequestWorker *worker, OAIAuthorizationServerCollection summary);
    void authorizationServerUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use authorizationServerCreateOrUpdateSignalError() instead")
    void authorizationServerCreateOrUpdateSignalE(OAIAuthorizationServerContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationServerCreateOrUpdateSignalError(OAIAuthorizationServerContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationServerDeleteSignalError() instead")
    void authorizationServerDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationServerDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationServerGetSignalError() instead")
    void authorizationServerGetSignalE(OAIAuthorizationServerContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationServerGetSignalError(OAIAuthorizationServerContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationServerGetEntityTagSignalError() instead")
    void authorizationServerGetEntityTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationServerGetEntityTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationServerListByServiceSignalError() instead")
    void authorizationServerListByServiceSignalE(OAIAuthorizationServerCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationServerListByServiceSignalError(OAIAuthorizationServerCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationServerUpdateSignalError() instead")
    void authorizationServerUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationServerUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use authorizationServerCreateOrUpdateSignalErrorFull() instead")
    void authorizationServerCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationServerCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationServerDeleteSignalErrorFull() instead")
    void authorizationServerDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationServerDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationServerGetSignalErrorFull() instead")
    void authorizationServerGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationServerGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationServerGetEntityTagSignalErrorFull() instead")
    void authorizationServerGetEntityTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationServerGetEntityTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationServerListByServiceSignalErrorFull() instead")
    void authorizationServerListByServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationServerListByServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use authorizationServerUpdateSignalErrorFull() instead")
    void authorizationServerUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizationServerUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
