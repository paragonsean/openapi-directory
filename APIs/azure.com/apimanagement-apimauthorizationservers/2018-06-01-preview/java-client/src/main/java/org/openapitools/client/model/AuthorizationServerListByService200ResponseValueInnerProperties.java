/*
 * ApiManagementClient
 * Use these REST APIs for managing OAuth2 servers configuration in your Azure API Management deployment. OAuth 2.0 can be used to authorize developer accounts for Azure API Management. For more information refer to [How to OAuth2](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-oauth2).
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * External OAuth authorization server settings Properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:22:48.227097-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuthorizationServerListByService200ResponseValueInnerProperties {
  public static final String SERIALIZED_NAME_AUTHORIZATION_ENDPOINT = "authorizationEndpoint";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_ENDPOINT)
  private String authorizationEndpoint;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_REGISTRATION_ENDPOINT = "clientRegistrationEndpoint";
  @SerializedName(SERIALIZED_NAME_CLIENT_REGISTRATION_ENDPOINT)
  private String clientRegistrationEndpoint;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  /**
   * Gets or Sets grantTypes
   */
  @JsonAdapter(GrantTypesEnum.Adapter.class)
  public enum GrantTypesEnum {
    AUTHORIZATION_CODE("authorizationCode"),
    
    IMPLICIT("implicit"),
    
    RESOURCE_OWNER_PASSWORD("resourceOwnerPassword"),
    
    CLIENT_CREDENTIALS("clientCredentials");

    private String value;

    GrantTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GrantTypesEnum fromValue(String value) {
      for (GrantTypesEnum b : GrantTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GrantTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GrantTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GrantTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GrantTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GrantTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GRANT_TYPES = "grantTypes";
  @SerializedName(SERIALIZED_NAME_GRANT_TYPES)
  private List<GrantTypesEnum> grantTypes = new ArrayList<>();

  public AuthorizationServerListByService200ResponseValueInnerProperties() {
  }

  public AuthorizationServerListByService200ResponseValueInnerProperties authorizationEndpoint(String authorizationEndpoint) {
    this.authorizationEndpoint = authorizationEndpoint;
    return this;
  }

  /**
   * OAuth authorization endpoint. See http://tools.ietf.org/html/rfc6749#section-3.2.
   * @return authorizationEndpoint
   */
  @javax.annotation.Nonnull
  public String getAuthorizationEndpoint() {
    return authorizationEndpoint;
  }

  public void setAuthorizationEndpoint(String authorizationEndpoint) {
    this.authorizationEndpoint = authorizationEndpoint;
  }


  public AuthorizationServerListByService200ResponseValueInnerProperties clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Client or app id registered with this authorization server.
   * @return clientId
   */
  @javax.annotation.Nonnull
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public AuthorizationServerListByService200ResponseValueInnerProperties clientRegistrationEndpoint(String clientRegistrationEndpoint) {
    this.clientRegistrationEndpoint = clientRegistrationEndpoint;
    return this;
  }

  /**
   * Optional reference to a page where client or app registration for this authorization server is performed. Contains absolute URL to entity being referenced.
   * @return clientRegistrationEndpoint
   */
  @javax.annotation.Nonnull
  public String getClientRegistrationEndpoint() {
    return clientRegistrationEndpoint;
  }

  public void setClientRegistrationEndpoint(String clientRegistrationEndpoint) {
    this.clientRegistrationEndpoint = clientRegistrationEndpoint;
  }


  public AuthorizationServerListByService200ResponseValueInnerProperties displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * User-friendly authorization server name.
   * @return displayName
   */
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public AuthorizationServerListByService200ResponseValueInnerProperties grantTypes(List<GrantTypesEnum> grantTypes) {
    this.grantTypes = grantTypes;
    return this;
  }

  public AuthorizationServerListByService200ResponseValueInnerProperties addGrantTypesItem(GrantTypesEnum grantTypesItem) {
    if (this.grantTypes == null) {
      this.grantTypes = new ArrayList<>();
    }
    this.grantTypes.add(grantTypesItem);
    return this;
  }

  /**
   * Form of an authorization grant, which the client uses to request the access token.
   * @return grantTypes
   */
  @javax.annotation.Nonnull
  public List<GrantTypesEnum> getGrantTypes() {
    return grantTypes;
  }

  public void setGrantTypes(List<GrantTypesEnum> grantTypes) {
    this.grantTypes = grantTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthorizationServerListByService200ResponseValueInnerProperties authorizationServerListByService200ResponseValueInnerProperties = (AuthorizationServerListByService200ResponseValueInnerProperties) o;
    return Objects.equals(this.authorizationEndpoint, authorizationServerListByService200ResponseValueInnerProperties.authorizationEndpoint) &&
        Objects.equals(this.clientId, authorizationServerListByService200ResponseValueInnerProperties.clientId) &&
        Objects.equals(this.clientRegistrationEndpoint, authorizationServerListByService200ResponseValueInnerProperties.clientRegistrationEndpoint) &&
        Objects.equals(this.displayName, authorizationServerListByService200ResponseValueInnerProperties.displayName) &&
        Objects.equals(this.grantTypes, authorizationServerListByService200ResponseValueInnerProperties.grantTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationEndpoint, clientId, clientRegistrationEndpoint, displayName, grantTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthorizationServerListByService200ResponseValueInnerProperties {\n");
    sb.append("    authorizationEndpoint: ").append(toIndentedString(authorizationEndpoint)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientRegistrationEndpoint: ").append(toIndentedString(clientRegistrationEndpoint)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    grantTypes: ").append(toIndentedString(grantTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizationEndpoint");
    openapiFields.add("clientId");
    openapiFields.add("clientRegistrationEndpoint");
    openapiFields.add("displayName");
    openapiFields.add("grantTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authorizationEndpoint");
    openapiRequiredFields.add("clientId");
    openapiRequiredFields.add("clientRegistrationEndpoint");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("grantTypes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthorizationServerListByService200ResponseValueInnerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthorizationServerListByService200ResponseValueInnerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthorizationServerListByService200ResponseValueInnerProperties is not found in the empty JSON string", AuthorizationServerListByService200ResponseValueInnerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthorizationServerListByService200ResponseValueInnerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthorizationServerListByService200ResponseValueInnerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuthorizationServerListByService200ResponseValueInnerProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("authorizationEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationEndpoint").toString()));
      }
      if (!jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if (!jsonObj.get("clientRegistrationEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientRegistrationEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientRegistrationEndpoint").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("grantTypes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("grantTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `grantTypes` to be an array in the JSON string but got `%s`", jsonObj.get("grantTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthorizationServerListByService200ResponseValueInnerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthorizationServerListByService200ResponseValueInnerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthorizationServerListByService200ResponseValueInnerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthorizationServerListByService200ResponseValueInnerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthorizationServerListByService200ResponseValueInnerProperties>() {
           @Override
           public void write(JsonWriter out, AuthorizationServerListByService200ResponseValueInnerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthorizationServerListByService200ResponseValueInnerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthorizationServerListByService200ResponseValueInnerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthorizationServerListByService200ResponseValueInnerProperties
   * @throws IOException if the JSON string is invalid with respect to AuthorizationServerListByService200ResponseValueInnerProperties
   */
  public static AuthorizationServerListByService200ResponseValueInnerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthorizationServerListByService200ResponseValueInnerProperties.class);
  }

  /**
   * Convert an instance of AuthorizationServerListByService200ResponseValueInnerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

