/*
 * FabricAdminClient
 * Software load balancer multiplexer operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2016-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a SLB MUX.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:23:40.463685-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SlbMuxInstanceModel {
  public static final String SERIALIZED_NAME_BGP_PEERS = "bgpPeers";
  @SerializedName(SERIALIZED_NAME_BGP_PEERS)
  private List<String> bgpPeers = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIGURATION_STATE = "configurationState";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_STATE)
  private String configurationState;

  public static final String SERIALIZED_NAME_VIRTUAL_SERVER = "virtualServer";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_SERVER)
  private String virtualServer;

  public SlbMuxInstanceModel() {
  }

  public SlbMuxInstanceModel bgpPeers(List<String> bgpPeers) {
    this.bgpPeers = bgpPeers;
    return this;
  }

  public SlbMuxInstanceModel addBgpPeersItem(String bgpPeersItem) {
    if (this.bgpPeers == null) {
      this.bgpPeers = new ArrayList<>();
    }
    this.bgpPeers.add(bgpPeersItem);
    return this;
  }

  /**
   * List of BGP peers.
   * @return bgpPeers
   */
  @javax.annotation.Nullable
  public List<String> getBgpPeers() {
    return bgpPeers;
  }

  public void setBgpPeers(List<String> bgpPeers) {
    this.bgpPeers = bgpPeers;
  }


  public SlbMuxInstanceModel configurationState(String configurationState) {
    this.configurationState = configurationState;
    return this;
  }

  /**
   * Configuration state.
   * @return configurationState
   */
  @javax.annotation.Nullable
  public String getConfigurationState() {
    return configurationState;
  }

  public void setConfigurationState(String configurationState) {
    this.configurationState = configurationState;
  }


  public SlbMuxInstanceModel virtualServer(String virtualServer) {
    this.virtualServer = virtualServer;
    return this;
  }

  /**
   * Virtual server.
   * @return virtualServer
   */
  @javax.annotation.Nullable
  public String getVirtualServer() {
    return virtualServer;
  }

  public void setVirtualServer(String virtualServer) {
    this.virtualServer = virtualServer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SlbMuxInstanceModel slbMuxInstanceModel = (SlbMuxInstanceModel) o;
    return Objects.equals(this.bgpPeers, slbMuxInstanceModel.bgpPeers) &&
        Objects.equals(this.configurationState, slbMuxInstanceModel.configurationState) &&
        Objects.equals(this.virtualServer, slbMuxInstanceModel.virtualServer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bgpPeers, configurationState, virtualServer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SlbMuxInstanceModel {\n");
    sb.append("    bgpPeers: ").append(toIndentedString(bgpPeers)).append("\n");
    sb.append("    configurationState: ").append(toIndentedString(configurationState)).append("\n");
    sb.append("    virtualServer: ").append(toIndentedString(virtualServer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bgpPeers");
    openapiFields.add("configurationState");
    openapiFields.add("virtualServer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SlbMuxInstanceModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SlbMuxInstanceModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SlbMuxInstanceModel is not found in the empty JSON string", SlbMuxInstanceModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SlbMuxInstanceModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SlbMuxInstanceModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("bgpPeers") != null && !jsonObj.get("bgpPeers").isJsonNull() && !jsonObj.get("bgpPeers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bgpPeers` to be an array in the JSON string but got `%s`", jsonObj.get("bgpPeers").toString()));
      }
      if ((jsonObj.get("configurationState") != null && !jsonObj.get("configurationState").isJsonNull()) && !jsonObj.get("configurationState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configurationState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configurationState").toString()));
      }
      if ((jsonObj.get("virtualServer") != null && !jsonObj.get("virtualServer").isJsonNull()) && !jsonObj.get("virtualServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualServer").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SlbMuxInstanceModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SlbMuxInstanceModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SlbMuxInstanceModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SlbMuxInstanceModel.class));

       return (TypeAdapter<T>) new TypeAdapter<SlbMuxInstanceModel>() {
           @Override
           public void write(JsonWriter out, SlbMuxInstanceModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SlbMuxInstanceModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SlbMuxInstanceModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SlbMuxInstanceModel
   * @throws IOException if the JSON string is invalid with respect to SlbMuxInstanceModel
   */
  public static SlbMuxInstanceModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SlbMuxInstanceModel.class);
  }

  /**
   * Convert an instance of SlbMuxInstanceModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

