# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SlbMuxInstanceModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bgp_peers: List[str]=None, configuration_state: str=None, virtual_server: str=None):
        """SlbMuxInstanceModel - a model defined in OpenAPI

        :param bgp_peers: The bgp_peers of this SlbMuxInstanceModel.
        :param configuration_state: The configuration_state of this SlbMuxInstanceModel.
        :param virtual_server: The virtual_server of this SlbMuxInstanceModel.
        """
        self.openapi_types = {
            'bgp_peers': List[str],
            'configuration_state': str,
            'virtual_server': str
        }

        self.attribute_map = {
            'bgp_peers': 'bgpPeers',
            'configuration_state': 'configurationState',
            'virtual_server': 'virtualServer'
        }

        self._bgp_peers = bgp_peers
        self._configuration_state = configuration_state
        self._virtual_server = virtual_server

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SlbMuxInstanceModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SlbMuxInstanceModel of this SlbMuxInstanceModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bgp_peers(self):
        """Gets the bgp_peers of this SlbMuxInstanceModel.

        List of BGP peers.

        :return: The bgp_peers of this SlbMuxInstanceModel.
        :rtype: List[str]
        """
        return self._bgp_peers

    @bgp_peers.setter
    def bgp_peers(self, bgp_peers):
        """Sets the bgp_peers of this SlbMuxInstanceModel.

        List of BGP peers.

        :param bgp_peers: The bgp_peers of this SlbMuxInstanceModel.
        :type bgp_peers: List[str]
        """

        self._bgp_peers = bgp_peers

    @property
    def configuration_state(self):
        """Gets the configuration_state of this SlbMuxInstanceModel.

        Configuration state.

        :return: The configuration_state of this SlbMuxInstanceModel.
        :rtype: str
        """
        return self._configuration_state

    @configuration_state.setter
    def configuration_state(self, configuration_state):
        """Sets the configuration_state of this SlbMuxInstanceModel.

        Configuration state.

        :param configuration_state: The configuration_state of this SlbMuxInstanceModel.
        :type configuration_state: str
        """

        self._configuration_state = configuration_state

    @property
    def virtual_server(self):
        """Gets the virtual_server of this SlbMuxInstanceModel.

        Virtual server.

        :return: The virtual_server of this SlbMuxInstanceModel.
        :rtype: str
        """
        return self._virtual_server

    @virtual_server.setter
    def virtual_server(self, virtual_server):
        """Sets the virtual_server of this SlbMuxInstanceModel.

        Virtual server.

        :param virtual_server: The virtual_server of this SlbMuxInstanceModel.
        :type virtual_server: str
        """

        self._virtual_server = virtual_server
