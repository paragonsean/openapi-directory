/**
 * FabricAdminClient
 * Software load balancer multiplexer operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2016-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISlbMuxInstanceModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISlbMuxInstanceModel::OAISlbMuxInstanceModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISlbMuxInstanceModel::OAISlbMuxInstanceModel() {
    this->initializeModel();
}

OAISlbMuxInstanceModel::~OAISlbMuxInstanceModel() {}

void OAISlbMuxInstanceModel::initializeModel() {

    m_bgp_peers_isSet = false;
    m_bgp_peers_isValid = false;

    m_configuration_state_isSet = false;
    m_configuration_state_isValid = false;

    m_virtual_server_isSet = false;
    m_virtual_server_isValid = false;
}

void OAISlbMuxInstanceModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISlbMuxInstanceModel::fromJsonObject(QJsonObject json) {

    m_bgp_peers_isValid = ::OpenAPI::fromJsonValue(m_bgp_peers, json[QString("bgpPeers")]);
    m_bgp_peers_isSet = !json[QString("bgpPeers")].isNull() && m_bgp_peers_isValid;

    m_configuration_state_isValid = ::OpenAPI::fromJsonValue(m_configuration_state, json[QString("configurationState")]);
    m_configuration_state_isSet = !json[QString("configurationState")].isNull() && m_configuration_state_isValid;

    m_virtual_server_isValid = ::OpenAPI::fromJsonValue(m_virtual_server, json[QString("virtualServer")]);
    m_virtual_server_isSet = !json[QString("virtualServer")].isNull() && m_virtual_server_isValid;
}

QString OAISlbMuxInstanceModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISlbMuxInstanceModel::asJsonObject() const {
    QJsonObject obj;
    if (m_bgp_peers.size() > 0) {
        obj.insert(QString("bgpPeers"), ::OpenAPI::toJsonValue(m_bgp_peers));
    }
    if (m_configuration_state_isSet) {
        obj.insert(QString("configurationState"), ::OpenAPI::toJsonValue(m_configuration_state));
    }
    if (m_virtual_server_isSet) {
        obj.insert(QString("virtualServer"), ::OpenAPI::toJsonValue(m_virtual_server));
    }
    return obj;
}

QList<QString> OAISlbMuxInstanceModel::getBgpPeers() const {
    return m_bgp_peers;
}
void OAISlbMuxInstanceModel::setBgpPeers(const QList<QString> &bgp_peers) {
    m_bgp_peers = bgp_peers;
    m_bgp_peers_isSet = true;
}

bool OAISlbMuxInstanceModel::is_bgp_peers_Set() const{
    return m_bgp_peers_isSet;
}

bool OAISlbMuxInstanceModel::is_bgp_peers_Valid() const{
    return m_bgp_peers_isValid;
}

QString OAISlbMuxInstanceModel::getConfigurationState() const {
    return m_configuration_state;
}
void OAISlbMuxInstanceModel::setConfigurationState(const QString &configuration_state) {
    m_configuration_state = configuration_state;
    m_configuration_state_isSet = true;
}

bool OAISlbMuxInstanceModel::is_configuration_state_Set() const{
    return m_configuration_state_isSet;
}

bool OAISlbMuxInstanceModel::is_configuration_state_Valid() const{
    return m_configuration_state_isValid;
}

QString OAISlbMuxInstanceModel::getVirtualServer() const {
    return m_virtual_server;
}
void OAISlbMuxInstanceModel::setVirtualServer(const QString &virtual_server) {
    m_virtual_server = virtual_server;
    m_virtual_server_isSet = true;
}

bool OAISlbMuxInstanceModel::is_virtual_server_Set() const{
    return m_virtual_server_isSet;
}

bool OAISlbMuxInstanceModel::is_virtual_server_Valid() const{
    return m_virtual_server_isValid;
}

bool OAISlbMuxInstanceModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bgp_peers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_server_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISlbMuxInstanceModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
