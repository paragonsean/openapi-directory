# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.deployment_mode import DeploymentMode
from openapi_server import util


class ApplicationDeploymentPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deployment_mode: DeploymentMode=None):
        """ApplicationDeploymentPolicy - a model defined in OpenAPI

        :param deployment_mode: The deployment_mode of this ApplicationDeploymentPolicy.
        """
        self.openapi_types = {
            'deployment_mode': DeploymentMode
        }

        self.attribute_map = {
            'deployment_mode': 'deploymentMode'
        }

        self._deployment_mode = deployment_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationDeploymentPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationDeploymentPolicy of this ApplicationDeploymentPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deployment_mode(self):
        """Gets the deployment_mode of this ApplicationDeploymentPolicy.


        :return: The deployment_mode of this ApplicationDeploymentPolicy.
        :rtype: DeploymentMode
        """
        return self._deployment_mode

    @deployment_mode.setter
    def deployment_mode(self, deployment_mode):
        """Sets the deployment_mode of this ApplicationDeploymentPolicy.


        :param deployment_mode: The deployment_mode of this ApplicationDeploymentPolicy.
        :type deployment_mode: DeploymentMode
        """
        if deployment_mode is None:
            raise ValueError("Invalid value for `deployment_mode`, must not be `None`")

        self._deployment_mode = deployment_mode
