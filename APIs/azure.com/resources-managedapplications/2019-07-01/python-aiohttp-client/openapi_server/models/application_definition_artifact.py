# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_artifact_type import ApplicationArtifactType
from openapi_server.models.application_definition_artifact_name import ApplicationDefinitionArtifactName
from openapi_server import util


class ApplicationDefinitionArtifact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: ApplicationDefinitionArtifactName=None, type: ApplicationArtifactType=None, uri: str=None):
        """ApplicationDefinitionArtifact - a model defined in OpenAPI

        :param name: The name of this ApplicationDefinitionArtifact.
        :param type: The type of this ApplicationDefinitionArtifact.
        :param uri: The uri of this ApplicationDefinitionArtifact.
        """
        self.openapi_types = {
            'name': ApplicationDefinitionArtifactName,
            'type': ApplicationArtifactType,
            'uri': str
        }

        self.attribute_map = {
            'name': 'name',
            'type': 'type',
            'uri': 'uri'
        }

        self._name = name
        self._type = type
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationDefinitionArtifact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationDefinitionArtifact of this ApplicationDefinitionArtifact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ApplicationDefinitionArtifact.


        :return: The name of this ApplicationDefinitionArtifact.
        :rtype: ApplicationDefinitionArtifactName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationDefinitionArtifact.


        :param name: The name of this ApplicationDefinitionArtifact.
        :type name: ApplicationDefinitionArtifactName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this ApplicationDefinitionArtifact.


        :return: The type of this ApplicationDefinitionArtifact.
        :rtype: ApplicationArtifactType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApplicationDefinitionArtifact.


        :param type: The type of this ApplicationDefinitionArtifact.
        :type type: ApplicationArtifactType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def uri(self):
        """Gets the uri of this ApplicationDefinitionArtifact.

        The managed application definition artifact blob uri.

        :return: The uri of this ApplicationDefinitionArtifact.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ApplicationDefinitionArtifact.

        The managed application definition artifact blob uri.

        :param uri: The uri of this ApplicationDefinitionArtifact.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri
