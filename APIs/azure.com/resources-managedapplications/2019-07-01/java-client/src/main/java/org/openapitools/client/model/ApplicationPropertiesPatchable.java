/*
 * ApplicationClient
 * ARM applications
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ProvisioningState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The managed application properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:01.014318-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationPropertiesPatchable {
  public static final String SERIALIZED_NAME_APPLICATION_DEFINITION_ID = "applicationDefinitionId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_DEFINITION_ID)
  private String applicationDefinitionId;

  public static final String SERIALIZED_NAME_MANAGED_RESOURCE_GROUP_ID = "managedResourceGroupId";
  @SerializedName(SERIALIZED_NAME_MANAGED_RESOURCE_GROUP_ID)
  private String managedResourceGroupId;

  public static final String SERIALIZED_NAME_OUTPUTS = "outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private Object outputs;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Object parameters;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningState provisioningState;

  public ApplicationPropertiesPatchable() {
  }

  public ApplicationPropertiesPatchable(
     Object outputs
  ) {
    this();
    this.outputs = outputs;
  }

  public ApplicationPropertiesPatchable applicationDefinitionId(String applicationDefinitionId) {
    this.applicationDefinitionId = applicationDefinitionId;
    return this;
  }

  /**
   * The fully qualified path of managed application definition Id.
   * @return applicationDefinitionId
   */
  @javax.annotation.Nullable
  public String getApplicationDefinitionId() {
    return applicationDefinitionId;
  }

  public void setApplicationDefinitionId(String applicationDefinitionId) {
    this.applicationDefinitionId = applicationDefinitionId;
  }


  public ApplicationPropertiesPatchable managedResourceGroupId(String managedResourceGroupId) {
    this.managedResourceGroupId = managedResourceGroupId;
    return this;
  }

  /**
   * The managed resource group Id.
   * @return managedResourceGroupId
   */
  @javax.annotation.Nullable
  public String getManagedResourceGroupId() {
    return managedResourceGroupId;
  }

  public void setManagedResourceGroupId(String managedResourceGroupId) {
    this.managedResourceGroupId = managedResourceGroupId;
  }


  /**
   * Name and value pairs that define the managed application outputs.
   * @return outputs
   */
  @javax.annotation.Nullable
  public Object getOutputs() {
    return outputs;
  }



  public ApplicationPropertiesPatchable parameters(Object parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Name and value pairs that define the managed application parameters. It can be a JObject or a well formed JSON string.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Object getParameters() {
    return parameters;
  }

  public void setParameters(Object parameters) {
    this.parameters = parameters;
  }


  public ApplicationPropertiesPatchable provisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Get provisioningState
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningState getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationPropertiesPatchable applicationPropertiesPatchable = (ApplicationPropertiesPatchable) o;
    return Objects.equals(this.applicationDefinitionId, applicationPropertiesPatchable.applicationDefinitionId) &&
        Objects.equals(this.managedResourceGroupId, applicationPropertiesPatchable.managedResourceGroupId) &&
        Objects.equals(this.outputs, applicationPropertiesPatchable.outputs) &&
        Objects.equals(this.parameters, applicationPropertiesPatchable.parameters) &&
        Objects.equals(this.provisioningState, applicationPropertiesPatchable.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationDefinitionId, managedResourceGroupId, outputs, parameters, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationPropertiesPatchable {\n");
    sb.append("    applicationDefinitionId: ").append(toIndentedString(applicationDefinitionId)).append("\n");
    sb.append("    managedResourceGroupId: ").append(toIndentedString(managedResourceGroupId)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationDefinitionId");
    openapiFields.add("managedResourceGroupId");
    openapiFields.add("outputs");
    openapiFields.add("parameters");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationPropertiesPatchable
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationPropertiesPatchable.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationPropertiesPatchable is not found in the empty JSON string", ApplicationPropertiesPatchable.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationPropertiesPatchable.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationPropertiesPatchable` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("applicationDefinitionId") != null && !jsonObj.get("applicationDefinitionId").isJsonNull()) && !jsonObj.get("applicationDefinitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationDefinitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationDefinitionId").toString()));
      }
      if ((jsonObj.get("managedResourceGroupId") != null && !jsonObj.get("managedResourceGroupId").isJsonNull()) && !jsonObj.get("managedResourceGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managedResourceGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managedResourceGroupId").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningState.validateJsonElement(jsonObj.get("provisioningState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationPropertiesPatchable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationPropertiesPatchable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationPropertiesPatchable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationPropertiesPatchable.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationPropertiesPatchable>() {
           @Override
           public void write(JsonWriter out, ApplicationPropertiesPatchable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationPropertiesPatchable read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationPropertiesPatchable given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationPropertiesPatchable
   * @throws IOException if the JSON string is invalid with respect to ApplicationPropertiesPatchable
   */
  public static ApplicationPropertiesPatchable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationPropertiesPatchable.class);
  }

  /**
   * Convert an instance of ApplicationPropertiesPatchable to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

