/*
 * ApplicationClient
 * ARM applications
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.JitApprovalMode;
import org.openapitools.client.model.JitApproverDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Managed application Jit access policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:01.014318-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationJitAccessPolicy {
  public static final String SERIALIZED_NAME_JIT_ACCESS_ENABLED = "jitAccessEnabled";
  @SerializedName(SERIALIZED_NAME_JIT_ACCESS_ENABLED)
  private Boolean jitAccessEnabled;

  public static final String SERIALIZED_NAME_JIT_APPROVAL_MODE = "jitApprovalMode";
  @SerializedName(SERIALIZED_NAME_JIT_APPROVAL_MODE)
  private JitApprovalMode jitApprovalMode;

  public static final String SERIALIZED_NAME_JIT_APPROVERS = "jitApprovers";
  @SerializedName(SERIALIZED_NAME_JIT_APPROVERS)
  private List<JitApproverDefinition> jitApprovers = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAXIMUM_JIT_ACCESS_DURATION = "maximumJitAccessDuration";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_JIT_ACCESS_DURATION)
  private String maximumJitAccessDuration;

  public ApplicationJitAccessPolicy() {
  }

  public ApplicationJitAccessPolicy jitAccessEnabled(Boolean jitAccessEnabled) {
    this.jitAccessEnabled = jitAccessEnabled;
    return this;
  }

  /**
   * Whether the JIT access is enabled.
   * @return jitAccessEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getJitAccessEnabled() {
    return jitAccessEnabled;
  }

  public void setJitAccessEnabled(Boolean jitAccessEnabled) {
    this.jitAccessEnabled = jitAccessEnabled;
  }


  public ApplicationJitAccessPolicy jitApprovalMode(JitApprovalMode jitApprovalMode) {
    this.jitApprovalMode = jitApprovalMode;
    return this;
  }

  /**
   * Get jitApprovalMode
   * @return jitApprovalMode
   */
  @javax.annotation.Nullable
  public JitApprovalMode getJitApprovalMode() {
    return jitApprovalMode;
  }

  public void setJitApprovalMode(JitApprovalMode jitApprovalMode) {
    this.jitApprovalMode = jitApprovalMode;
  }


  public ApplicationJitAccessPolicy jitApprovers(List<JitApproverDefinition> jitApprovers) {
    this.jitApprovers = jitApprovers;
    return this;
  }

  public ApplicationJitAccessPolicy addJitApproversItem(JitApproverDefinition jitApproversItem) {
    if (this.jitApprovers == null) {
      this.jitApprovers = new ArrayList<>();
    }
    this.jitApprovers.add(jitApproversItem);
    return this;
  }

  /**
   * The JIT approvers
   * @return jitApprovers
   */
  @javax.annotation.Nullable
  public List<JitApproverDefinition> getJitApprovers() {
    return jitApprovers;
  }

  public void setJitApprovers(List<JitApproverDefinition> jitApprovers) {
    this.jitApprovers = jitApprovers;
  }


  public ApplicationJitAccessPolicy maximumJitAccessDuration(String maximumJitAccessDuration) {
    this.maximumJitAccessDuration = maximumJitAccessDuration;
    return this;
  }

  /**
   * The maximum duration JIT access is granted. This is an ISO8601 time period value.
   * @return maximumJitAccessDuration
   */
  @javax.annotation.Nullable
  public String getMaximumJitAccessDuration() {
    return maximumJitAccessDuration;
  }

  public void setMaximumJitAccessDuration(String maximumJitAccessDuration) {
    this.maximumJitAccessDuration = maximumJitAccessDuration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationJitAccessPolicy applicationJitAccessPolicy = (ApplicationJitAccessPolicy) o;
    return Objects.equals(this.jitAccessEnabled, applicationJitAccessPolicy.jitAccessEnabled) &&
        Objects.equals(this.jitApprovalMode, applicationJitAccessPolicy.jitApprovalMode) &&
        Objects.equals(this.jitApprovers, applicationJitAccessPolicy.jitApprovers) &&
        Objects.equals(this.maximumJitAccessDuration, applicationJitAccessPolicy.maximumJitAccessDuration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jitAccessEnabled, jitApprovalMode, jitApprovers, maximumJitAccessDuration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationJitAccessPolicy {\n");
    sb.append("    jitAccessEnabled: ").append(toIndentedString(jitAccessEnabled)).append("\n");
    sb.append("    jitApprovalMode: ").append(toIndentedString(jitApprovalMode)).append("\n");
    sb.append("    jitApprovers: ").append(toIndentedString(jitApprovers)).append("\n");
    sb.append("    maximumJitAccessDuration: ").append(toIndentedString(maximumJitAccessDuration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jitAccessEnabled");
    openapiFields.add("jitApprovalMode");
    openapiFields.add("jitApprovers");
    openapiFields.add("maximumJitAccessDuration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("jitAccessEnabled");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationJitAccessPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationJitAccessPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationJitAccessPolicy is not found in the empty JSON string", ApplicationJitAccessPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationJitAccessPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationJitAccessPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicationJitAccessPolicy.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `jitApprovalMode`
      if (jsonObj.get("jitApprovalMode") != null && !jsonObj.get("jitApprovalMode").isJsonNull()) {
        JitApprovalMode.validateJsonElement(jsonObj.get("jitApprovalMode"));
      }
      if (jsonObj.get("jitApprovers") != null && !jsonObj.get("jitApprovers").isJsonNull()) {
        JsonArray jsonArrayjitApprovers = jsonObj.getAsJsonArray("jitApprovers");
        if (jsonArrayjitApprovers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("jitApprovers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `jitApprovers` to be an array in the JSON string but got `%s`", jsonObj.get("jitApprovers").toString()));
          }

          // validate the optional field `jitApprovers` (array)
          for (int i = 0; i < jsonArrayjitApprovers.size(); i++) {
            JitApproverDefinition.validateJsonElement(jsonArrayjitApprovers.get(i));
          };
        }
      }
      if ((jsonObj.get("maximumJitAccessDuration") != null && !jsonObj.get("maximumJitAccessDuration").isJsonNull()) && !jsonObj.get("maximumJitAccessDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maximumJitAccessDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maximumJitAccessDuration").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationJitAccessPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationJitAccessPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationJitAccessPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationJitAccessPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationJitAccessPolicy>() {
           @Override
           public void write(JsonWriter out, ApplicationJitAccessPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationJitAccessPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationJitAccessPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationJitAccessPolicy
   * @throws IOException if the JSON string is invalid with respect to ApplicationJitAccessPolicy
   */
  public static ApplicationJitAccessPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationJitAccessPolicy.class);
  }

  /**
   * Convert an instance of ApplicationJitAccessPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

