/*
 * ApplicationClient
 * ARM applications
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationClientDetails;
import org.openapitools.client.model.JitAuthorizationPolicies;
import org.openapitools.client.model.JitRequestState;
import org.openapitools.client.model.JitSchedulingPolicy;
import org.openapitools.client.model.ProvisioningState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about JIT request properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:01.014318-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JitRequestProperties {
  public static final String SERIALIZED_NAME_APPLICATION_RESOURCE_ID = "applicationResourceId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_RESOURCE_ID)
  private String applicationResourceId;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private ApplicationClientDetails createdBy;

  public static final String SERIALIZED_NAME_JIT_AUTHORIZATION_POLICIES = "jitAuthorizationPolicies";
  @SerializedName(SERIALIZED_NAME_JIT_AUTHORIZATION_POLICIES)
  private List<JitAuthorizationPolicies> jitAuthorizationPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_JIT_REQUEST_STATE = "jitRequestState";
  @SerializedName(SERIALIZED_NAME_JIT_REQUEST_STATE)
  private JitRequestState jitRequestState;

  public static final String SERIALIZED_NAME_JIT_SCHEDULING_POLICY = "jitSchedulingPolicy";
  @SerializedName(SERIALIZED_NAME_JIT_SCHEDULING_POLICY)
  private JitSchedulingPolicy jitSchedulingPolicy;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningState provisioningState;

  public static final String SERIALIZED_NAME_PUBLISHER_TENANT_ID = "publisherTenantId";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_TENANT_ID)
  private String publisherTenantId;

  public static final String SERIALIZED_NAME_UPDATED_BY = "updatedBy";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY)
  private ApplicationClientDetails updatedBy;

  public JitRequestProperties() {
  }

  public JitRequestProperties(
     String publisherTenantId
  ) {
    this();
    this.publisherTenantId = publisherTenantId;
  }

  public JitRequestProperties applicationResourceId(String applicationResourceId) {
    this.applicationResourceId = applicationResourceId;
    return this;
  }

  /**
   * The parent application id.
   * @return applicationResourceId
   */
  @javax.annotation.Nonnull
  public String getApplicationResourceId() {
    return applicationResourceId;
  }

  public void setApplicationResourceId(String applicationResourceId) {
    this.applicationResourceId = applicationResourceId;
  }


  public JitRequestProperties createdBy(ApplicationClientDetails createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public ApplicationClientDetails getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(ApplicationClientDetails createdBy) {
    this.createdBy = createdBy;
  }


  public JitRequestProperties jitAuthorizationPolicies(List<JitAuthorizationPolicies> jitAuthorizationPolicies) {
    this.jitAuthorizationPolicies = jitAuthorizationPolicies;
    return this;
  }

  public JitRequestProperties addJitAuthorizationPoliciesItem(JitAuthorizationPolicies jitAuthorizationPoliciesItem) {
    if (this.jitAuthorizationPolicies == null) {
      this.jitAuthorizationPolicies = new ArrayList<>();
    }
    this.jitAuthorizationPolicies.add(jitAuthorizationPoliciesItem);
    return this;
  }

  /**
   * The JIT authorization policies.
   * @return jitAuthorizationPolicies
   */
  @javax.annotation.Nonnull
  public List<JitAuthorizationPolicies> getJitAuthorizationPolicies() {
    return jitAuthorizationPolicies;
  }

  public void setJitAuthorizationPolicies(List<JitAuthorizationPolicies> jitAuthorizationPolicies) {
    this.jitAuthorizationPolicies = jitAuthorizationPolicies;
  }


  public JitRequestProperties jitRequestState(JitRequestState jitRequestState) {
    this.jitRequestState = jitRequestState;
    return this;
  }

  /**
   * Get jitRequestState
   * @return jitRequestState
   */
  @javax.annotation.Nullable
  public JitRequestState getJitRequestState() {
    return jitRequestState;
  }

  public void setJitRequestState(JitRequestState jitRequestState) {
    this.jitRequestState = jitRequestState;
  }


  public JitRequestProperties jitSchedulingPolicy(JitSchedulingPolicy jitSchedulingPolicy) {
    this.jitSchedulingPolicy = jitSchedulingPolicy;
    return this;
  }

  /**
   * Get jitSchedulingPolicy
   * @return jitSchedulingPolicy
   */
  @javax.annotation.Nonnull
  public JitSchedulingPolicy getJitSchedulingPolicy() {
    return jitSchedulingPolicy;
  }

  public void setJitSchedulingPolicy(JitSchedulingPolicy jitSchedulingPolicy) {
    this.jitSchedulingPolicy = jitSchedulingPolicy;
  }


  public JitRequestProperties provisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Get provisioningState
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningState getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
  }


  /**
   * The publisher tenant id.
   * @return publisherTenantId
   */
  @javax.annotation.Nullable
  public String getPublisherTenantId() {
    return publisherTenantId;
  }



  public JitRequestProperties updatedBy(ApplicationClientDetails updatedBy) {
    this.updatedBy = updatedBy;
    return this;
  }

  /**
   * Get updatedBy
   * @return updatedBy
   */
  @javax.annotation.Nullable
  public ApplicationClientDetails getUpdatedBy() {
    return updatedBy;
  }

  public void setUpdatedBy(ApplicationClientDetails updatedBy) {
    this.updatedBy = updatedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JitRequestProperties jitRequestProperties = (JitRequestProperties) o;
    return Objects.equals(this.applicationResourceId, jitRequestProperties.applicationResourceId) &&
        Objects.equals(this.createdBy, jitRequestProperties.createdBy) &&
        Objects.equals(this.jitAuthorizationPolicies, jitRequestProperties.jitAuthorizationPolicies) &&
        Objects.equals(this.jitRequestState, jitRequestProperties.jitRequestState) &&
        Objects.equals(this.jitSchedulingPolicy, jitRequestProperties.jitSchedulingPolicy) &&
        Objects.equals(this.provisioningState, jitRequestProperties.provisioningState) &&
        Objects.equals(this.publisherTenantId, jitRequestProperties.publisherTenantId) &&
        Objects.equals(this.updatedBy, jitRequestProperties.updatedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationResourceId, createdBy, jitAuthorizationPolicies, jitRequestState, jitSchedulingPolicy, provisioningState, publisherTenantId, updatedBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JitRequestProperties {\n");
    sb.append("    applicationResourceId: ").append(toIndentedString(applicationResourceId)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    jitAuthorizationPolicies: ").append(toIndentedString(jitAuthorizationPolicies)).append("\n");
    sb.append("    jitRequestState: ").append(toIndentedString(jitRequestState)).append("\n");
    sb.append("    jitSchedulingPolicy: ").append(toIndentedString(jitSchedulingPolicy)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    publisherTenantId: ").append(toIndentedString(publisherTenantId)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationResourceId");
    openapiFields.add("createdBy");
    openapiFields.add("jitAuthorizationPolicies");
    openapiFields.add("jitRequestState");
    openapiFields.add("jitSchedulingPolicy");
    openapiFields.add("provisioningState");
    openapiFields.add("publisherTenantId");
    openapiFields.add("updatedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("applicationResourceId");
    openapiRequiredFields.add("jitAuthorizationPolicies");
    openapiRequiredFields.add("jitSchedulingPolicy");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JitRequestProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JitRequestProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JitRequestProperties is not found in the empty JSON string", JitRequestProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JitRequestProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JitRequestProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JitRequestProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("applicationResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationResourceId").toString()));
      }
      // validate the optional field `createdBy`
      if (jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) {
        ApplicationClientDetails.validateJsonElement(jsonObj.get("createdBy"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("jitAuthorizationPolicies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `jitAuthorizationPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("jitAuthorizationPolicies").toString()));
      }

      JsonArray jsonArrayjitAuthorizationPolicies = jsonObj.getAsJsonArray("jitAuthorizationPolicies");
      // validate the required field `jitAuthorizationPolicies` (array)
      for (int i = 0; i < jsonArrayjitAuthorizationPolicies.size(); i++) {
        JitAuthorizationPolicies.validateJsonElement(jsonArrayjitAuthorizationPolicies.get(i));
      };
      // validate the optional field `jitRequestState`
      if (jsonObj.get("jitRequestState") != null && !jsonObj.get("jitRequestState").isJsonNull()) {
        JitRequestState.validateJsonElement(jsonObj.get("jitRequestState"));
      }
      // validate the required field `jitSchedulingPolicy`
      JitSchedulingPolicy.validateJsonElement(jsonObj.get("jitSchedulingPolicy"));
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningState.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("publisherTenantId") != null && !jsonObj.get("publisherTenantId").isJsonNull()) && !jsonObj.get("publisherTenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisherTenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisherTenantId").toString()));
      }
      // validate the optional field `updatedBy`
      if (jsonObj.get("updatedBy") != null && !jsonObj.get("updatedBy").isJsonNull()) {
        ApplicationClientDetails.validateJsonElement(jsonObj.get("updatedBy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JitRequestProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JitRequestProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JitRequestProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JitRequestProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<JitRequestProperties>() {
           @Override
           public void write(JsonWriter out, JitRequestProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JitRequestProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JitRequestProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JitRequestProperties
   * @throws IOException if the JSON string is invalid with respect to JitRequestProperties
   */
  public static JitRequestProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JitRequestProperties.class);
  }

  /**
   * Convert an instance of JitRequestProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

