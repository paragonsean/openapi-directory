/*
 * ApplicationClient
 * ARM applications
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationAuthorization;
import org.openapitools.client.model.ApplicationDefinitionArtifact;
import org.openapitools.client.model.ApplicationDeploymentPolicy;
import org.openapitools.client.model.ApplicationLockLevel;
import org.openapitools.client.model.ApplicationManagementPolicy;
import org.openapitools.client.model.ApplicationNotificationPolicy;
import org.openapitools.client.model.ApplicationPackageLockingPolicyDefinition;
import org.openapitools.client.model.ApplicationPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The managed application definition properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:01.014318-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationDefinitionProperties {
  public static final String SERIALIZED_NAME_ARTIFACTS = "artifacts";
  @SerializedName(SERIALIZED_NAME_ARTIFACTS)
  private List<ApplicationDefinitionArtifact> artifacts = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTHORIZATIONS = "authorizations";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATIONS)
  private List<ApplicationAuthorization> authorizations = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATE_UI_DEFINITION = "createUiDefinition";
  @SerializedName(SERIALIZED_NAME_CREATE_UI_DEFINITION)
  private Object createUiDefinition;

  public static final String SERIALIZED_NAME_DEPLOYMENT_POLICY = "deploymentPolicy";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_POLICY)
  private ApplicationDeploymentPolicy deploymentPolicy;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_IS_ENABLED = "isEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_LOCK_LEVEL = "lockLevel";
  @SerializedName(SERIALIZED_NAME_LOCK_LEVEL)
  private ApplicationLockLevel lockLevel;

  public static final String SERIALIZED_NAME_LOCKING_POLICY = "lockingPolicy";
  @SerializedName(SERIALIZED_NAME_LOCKING_POLICY)
  private ApplicationPackageLockingPolicyDefinition lockingPolicy;

  public static final String SERIALIZED_NAME_MAIN_TEMPLATE = "mainTemplate";
  @SerializedName(SERIALIZED_NAME_MAIN_TEMPLATE)
  private Object mainTemplate;

  public static final String SERIALIZED_NAME_MANAGEMENT_POLICY = "managementPolicy";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT_POLICY)
  private ApplicationManagementPolicy managementPolicy;

  public static final String SERIALIZED_NAME_NOTIFICATION_POLICY = "notificationPolicy";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_POLICY)
  private ApplicationNotificationPolicy notificationPolicy;

  public static final String SERIALIZED_NAME_PACKAGE_FILE_URI = "packageFileUri";
  @SerializedName(SERIALIZED_NAME_PACKAGE_FILE_URI)
  private String packageFileUri;

  public static final String SERIALIZED_NAME_POLICIES = "policies";
  @SerializedName(SERIALIZED_NAME_POLICIES)
  private List<ApplicationPolicy> policies = new ArrayList<>();

  public ApplicationDefinitionProperties() {
  }

  public ApplicationDefinitionProperties artifacts(List<ApplicationDefinitionArtifact> artifacts) {
    this.artifacts = artifacts;
    return this;
  }

  public ApplicationDefinitionProperties addArtifactsItem(ApplicationDefinitionArtifact artifactsItem) {
    if (this.artifacts == null) {
      this.artifacts = new ArrayList<>();
    }
    this.artifacts.add(artifactsItem);
    return this;
  }

  /**
   * The collection of managed application artifacts. The portal will use the files specified as artifacts to construct the user experience of creating a managed application from a managed application definition.
   * @return artifacts
   */
  @javax.annotation.Nullable
  public List<ApplicationDefinitionArtifact> getArtifacts() {
    return artifacts;
  }

  public void setArtifacts(List<ApplicationDefinitionArtifact> artifacts) {
    this.artifacts = artifacts;
  }


  public ApplicationDefinitionProperties authorizations(List<ApplicationAuthorization> authorizations) {
    this.authorizations = authorizations;
    return this;
  }

  public ApplicationDefinitionProperties addAuthorizationsItem(ApplicationAuthorization authorizationsItem) {
    if (this.authorizations == null) {
      this.authorizations = new ArrayList<>();
    }
    this.authorizations.add(authorizationsItem);
    return this;
  }

  /**
   * The managed application provider authorizations.
   * @return authorizations
   */
  @javax.annotation.Nullable
  public List<ApplicationAuthorization> getAuthorizations() {
    return authorizations;
  }

  public void setAuthorizations(List<ApplicationAuthorization> authorizations) {
    this.authorizations = authorizations;
  }


  public ApplicationDefinitionProperties createUiDefinition(Object createUiDefinition) {
    this.createUiDefinition = createUiDefinition;
    return this;
  }

  /**
   * The createUiDefinition json for the backing template with Microsoft.Solutions/applications resource. It can be a JObject or well-formed JSON string.
   * @return createUiDefinition
   */
  @javax.annotation.Nullable
  public Object getCreateUiDefinition() {
    return createUiDefinition;
  }

  public void setCreateUiDefinition(Object createUiDefinition) {
    this.createUiDefinition = createUiDefinition;
  }


  public ApplicationDefinitionProperties deploymentPolicy(ApplicationDeploymentPolicy deploymentPolicy) {
    this.deploymentPolicy = deploymentPolicy;
    return this;
  }

  /**
   * Get deploymentPolicy
   * @return deploymentPolicy
   */
  @javax.annotation.Nullable
  public ApplicationDeploymentPolicy getDeploymentPolicy() {
    return deploymentPolicy;
  }

  public void setDeploymentPolicy(ApplicationDeploymentPolicy deploymentPolicy) {
    this.deploymentPolicy = deploymentPolicy;
  }


  public ApplicationDefinitionProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The managed application definition description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ApplicationDefinitionProperties displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The managed application definition display name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ApplicationDefinitionProperties isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

  /**
   * A value indicating whether the package is enabled or not.
   * @return isEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public ApplicationDefinitionProperties lockLevel(ApplicationLockLevel lockLevel) {
    this.lockLevel = lockLevel;
    return this;
  }

  /**
   * Get lockLevel
   * @return lockLevel
   */
  @javax.annotation.Nonnull
  public ApplicationLockLevel getLockLevel() {
    return lockLevel;
  }

  public void setLockLevel(ApplicationLockLevel lockLevel) {
    this.lockLevel = lockLevel;
  }


  public ApplicationDefinitionProperties lockingPolicy(ApplicationPackageLockingPolicyDefinition lockingPolicy) {
    this.lockingPolicy = lockingPolicy;
    return this;
  }

  /**
   * Get lockingPolicy
   * @return lockingPolicy
   */
  @javax.annotation.Nullable
  public ApplicationPackageLockingPolicyDefinition getLockingPolicy() {
    return lockingPolicy;
  }

  public void setLockingPolicy(ApplicationPackageLockingPolicyDefinition lockingPolicy) {
    this.lockingPolicy = lockingPolicy;
  }


  public ApplicationDefinitionProperties mainTemplate(Object mainTemplate) {
    this.mainTemplate = mainTemplate;
    return this;
  }

  /**
   * The inline main template json which has resources to be provisioned. It can be a JObject or well-formed JSON string.
   * @return mainTemplate
   */
  @javax.annotation.Nullable
  public Object getMainTemplate() {
    return mainTemplate;
  }

  public void setMainTemplate(Object mainTemplate) {
    this.mainTemplate = mainTemplate;
  }


  public ApplicationDefinitionProperties managementPolicy(ApplicationManagementPolicy managementPolicy) {
    this.managementPolicy = managementPolicy;
    return this;
  }

  /**
   * Get managementPolicy
   * @return managementPolicy
   */
  @javax.annotation.Nullable
  public ApplicationManagementPolicy getManagementPolicy() {
    return managementPolicy;
  }

  public void setManagementPolicy(ApplicationManagementPolicy managementPolicy) {
    this.managementPolicy = managementPolicy;
  }


  public ApplicationDefinitionProperties notificationPolicy(ApplicationNotificationPolicy notificationPolicy) {
    this.notificationPolicy = notificationPolicy;
    return this;
  }

  /**
   * Get notificationPolicy
   * @return notificationPolicy
   */
  @javax.annotation.Nullable
  public ApplicationNotificationPolicy getNotificationPolicy() {
    return notificationPolicy;
  }

  public void setNotificationPolicy(ApplicationNotificationPolicy notificationPolicy) {
    this.notificationPolicy = notificationPolicy;
  }


  public ApplicationDefinitionProperties packageFileUri(String packageFileUri) {
    this.packageFileUri = packageFileUri;
    return this;
  }

  /**
   * The managed application definition package file Uri. Use this element
   * @return packageFileUri
   */
  @javax.annotation.Nullable
  public String getPackageFileUri() {
    return packageFileUri;
  }

  public void setPackageFileUri(String packageFileUri) {
    this.packageFileUri = packageFileUri;
  }


  public ApplicationDefinitionProperties policies(List<ApplicationPolicy> policies) {
    this.policies = policies;
    return this;
  }

  public ApplicationDefinitionProperties addPoliciesItem(ApplicationPolicy policiesItem) {
    if (this.policies == null) {
      this.policies = new ArrayList<>();
    }
    this.policies.add(policiesItem);
    return this;
  }

  /**
   * The managed application provider policies.
   * @return policies
   */
  @javax.annotation.Nullable
  public List<ApplicationPolicy> getPolicies() {
    return policies;
  }

  public void setPolicies(List<ApplicationPolicy> policies) {
    this.policies = policies;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationDefinitionProperties applicationDefinitionProperties = (ApplicationDefinitionProperties) o;
    return Objects.equals(this.artifacts, applicationDefinitionProperties.artifacts) &&
        Objects.equals(this.authorizations, applicationDefinitionProperties.authorizations) &&
        Objects.equals(this.createUiDefinition, applicationDefinitionProperties.createUiDefinition) &&
        Objects.equals(this.deploymentPolicy, applicationDefinitionProperties.deploymentPolicy) &&
        Objects.equals(this.description, applicationDefinitionProperties.description) &&
        Objects.equals(this.displayName, applicationDefinitionProperties.displayName) &&
        Objects.equals(this.isEnabled, applicationDefinitionProperties.isEnabled) &&
        Objects.equals(this.lockLevel, applicationDefinitionProperties.lockLevel) &&
        Objects.equals(this.lockingPolicy, applicationDefinitionProperties.lockingPolicy) &&
        Objects.equals(this.mainTemplate, applicationDefinitionProperties.mainTemplate) &&
        Objects.equals(this.managementPolicy, applicationDefinitionProperties.managementPolicy) &&
        Objects.equals(this.notificationPolicy, applicationDefinitionProperties.notificationPolicy) &&
        Objects.equals(this.packageFileUri, applicationDefinitionProperties.packageFileUri) &&
        Objects.equals(this.policies, applicationDefinitionProperties.policies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifacts, authorizations, createUiDefinition, deploymentPolicy, description, displayName, isEnabled, lockLevel, lockingPolicy, mainTemplate, managementPolicy, notificationPolicy, packageFileUri, policies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationDefinitionProperties {\n");
    sb.append("    artifacts: ").append(toIndentedString(artifacts)).append("\n");
    sb.append("    authorizations: ").append(toIndentedString(authorizations)).append("\n");
    sb.append("    createUiDefinition: ").append(toIndentedString(createUiDefinition)).append("\n");
    sb.append("    deploymentPolicy: ").append(toIndentedString(deploymentPolicy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    lockLevel: ").append(toIndentedString(lockLevel)).append("\n");
    sb.append("    lockingPolicy: ").append(toIndentedString(lockingPolicy)).append("\n");
    sb.append("    mainTemplate: ").append(toIndentedString(mainTemplate)).append("\n");
    sb.append("    managementPolicy: ").append(toIndentedString(managementPolicy)).append("\n");
    sb.append("    notificationPolicy: ").append(toIndentedString(notificationPolicy)).append("\n");
    sb.append("    packageFileUri: ").append(toIndentedString(packageFileUri)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("artifacts");
    openapiFields.add("authorizations");
    openapiFields.add("createUiDefinition");
    openapiFields.add("deploymentPolicy");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("isEnabled");
    openapiFields.add("lockLevel");
    openapiFields.add("lockingPolicy");
    openapiFields.add("mainTemplate");
    openapiFields.add("managementPolicy");
    openapiFields.add("notificationPolicy");
    openapiFields.add("packageFileUri");
    openapiFields.add("policies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lockLevel");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationDefinitionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationDefinitionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationDefinitionProperties is not found in the empty JSON string", ApplicationDefinitionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationDefinitionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationDefinitionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ApplicationDefinitionProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("artifacts") != null && !jsonObj.get("artifacts").isJsonNull()) {
        JsonArray jsonArrayartifacts = jsonObj.getAsJsonArray("artifacts");
        if (jsonArrayartifacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("artifacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `artifacts` to be an array in the JSON string but got `%s`", jsonObj.get("artifacts").toString()));
          }

          // validate the optional field `artifacts` (array)
          for (int i = 0; i < jsonArrayartifacts.size(); i++) {
            ApplicationDefinitionArtifact.validateJsonElement(jsonArrayartifacts.get(i));
          };
        }
      }
      if (jsonObj.get("authorizations") != null && !jsonObj.get("authorizations").isJsonNull()) {
        JsonArray jsonArrayauthorizations = jsonObj.getAsJsonArray("authorizations");
        if (jsonArrayauthorizations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authorizations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authorizations` to be an array in the JSON string but got `%s`", jsonObj.get("authorizations").toString()));
          }

          // validate the optional field `authorizations` (array)
          for (int i = 0; i < jsonArrayauthorizations.size(); i++) {
            ApplicationAuthorization.validateJsonElement(jsonArrayauthorizations.get(i));
          };
        }
      }
      // validate the optional field `deploymentPolicy`
      if (jsonObj.get("deploymentPolicy") != null && !jsonObj.get("deploymentPolicy").isJsonNull()) {
        ApplicationDeploymentPolicy.validateJsonElement(jsonObj.get("deploymentPolicy"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the required field `lockLevel`
      ApplicationLockLevel.validateJsonElement(jsonObj.get("lockLevel"));
      // validate the optional field `lockingPolicy`
      if (jsonObj.get("lockingPolicy") != null && !jsonObj.get("lockingPolicy").isJsonNull()) {
        ApplicationPackageLockingPolicyDefinition.validateJsonElement(jsonObj.get("lockingPolicy"));
      }
      // validate the optional field `managementPolicy`
      if (jsonObj.get("managementPolicy") != null && !jsonObj.get("managementPolicy").isJsonNull()) {
        ApplicationManagementPolicy.validateJsonElement(jsonObj.get("managementPolicy"));
      }
      // validate the optional field `notificationPolicy`
      if (jsonObj.get("notificationPolicy") != null && !jsonObj.get("notificationPolicy").isJsonNull()) {
        ApplicationNotificationPolicy.validateJsonElement(jsonObj.get("notificationPolicy"));
      }
      if ((jsonObj.get("packageFileUri") != null && !jsonObj.get("packageFileUri").isJsonNull()) && !jsonObj.get("packageFileUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `packageFileUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("packageFileUri").toString()));
      }
      if (jsonObj.get("policies") != null && !jsonObj.get("policies").isJsonNull()) {
        JsonArray jsonArraypolicies = jsonObj.getAsJsonArray("policies");
        if (jsonArraypolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("policies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `policies` to be an array in the JSON string but got `%s`", jsonObj.get("policies").toString()));
          }

          // validate the optional field `policies` (array)
          for (int i = 0; i < jsonArraypolicies.size(); i++) {
            ApplicationPolicy.validateJsonElement(jsonArraypolicies.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationDefinitionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationDefinitionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationDefinitionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationDefinitionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationDefinitionProperties>() {
           @Override
           public void write(JsonWriter out, ApplicationDefinitionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationDefinitionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationDefinitionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationDefinitionProperties
   * @throws IOException if the JSON string is invalid with respect to ApplicationDefinitionProperties
   */
  public static ApplicationDefinitionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationDefinitionProperties.class);
  }

  /**
   * Convert an instance of ApplicationDefinitionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

