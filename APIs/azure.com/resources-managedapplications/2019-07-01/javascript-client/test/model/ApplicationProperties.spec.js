/**
 * ApplicationClient
 * ARM applications
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApplicationClient);
  }
}(this, function(expect, ApplicationClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApplicationClient.ApplicationProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ApplicationProperties', function() {
    it('should create an instance of ApplicationProperties', function() {
      // uncomment below and update the code to test ApplicationProperties
      //var instance = new ApplicationClient.ApplicationProperties();
      //expect(instance).to.be.a(ApplicationClient.ApplicationProperties);
    });

    it('should have the property applicationDefinitionId (base name: "applicationDefinitionId")', function() {
      // uncomment below and update the code to test the property applicationDefinitionId
      //var instance = new ApplicationClient.ApplicationProperties();
      //expect(instance).to.be();
    });

    it('should have the property artifacts (base name: "artifacts")', function() {
      // uncomment below and update the code to test the property artifacts
      //var instance = new ApplicationClient.ApplicationProperties();
      //expect(instance).to.be();
    });

    it('should have the property authorizations (base name: "authorizations")', function() {
      // uncomment below and update the code to test the property authorizations
      //var instance = new ApplicationClient.ApplicationProperties();
      //expect(instance).to.be();
    });

    it('should have the property billingDetails (base name: "billingDetails")', function() {
      // uncomment below and update the code to test the property billingDetails
      //var instance = new ApplicationClient.ApplicationProperties();
      //expect(instance).to.be();
    });

    it('should have the property createdBy (base name: "createdBy")', function() {
      // uncomment below and update the code to test the property createdBy
      //var instance = new ApplicationClient.ApplicationProperties();
      //expect(instance).to.be();
    });

    it('should have the property customerSupport (base name: "customerSupport")', function() {
      // uncomment below and update the code to test the property customerSupport
      //var instance = new ApplicationClient.ApplicationProperties();
      //expect(instance).to.be();
    });

    it('should have the property jitAccessPolicy (base name: "jitAccessPolicy")', function() {
      // uncomment below and update the code to test the property jitAccessPolicy
      //var instance = new ApplicationClient.ApplicationProperties();
      //expect(instance).to.be();
    });

    it('should have the property managedResourceGroupId (base name: "managedResourceGroupId")', function() {
      // uncomment below and update the code to test the property managedResourceGroupId
      //var instance = new ApplicationClient.ApplicationProperties();
      //expect(instance).to.be();
    });

    it('should have the property managementMode (base name: "managementMode")', function() {
      // uncomment below and update the code to test the property managementMode
      //var instance = new ApplicationClient.ApplicationProperties();
      //expect(instance).to.be();
    });

    it('should have the property outputs (base name: "outputs")', function() {
      // uncomment below and update the code to test the property outputs
      //var instance = new ApplicationClient.ApplicationProperties();
      //expect(instance).to.be();
    });

    it('should have the property parameters (base name: "parameters")', function() {
      // uncomment below and update the code to test the property parameters
      //var instance = new ApplicationClient.ApplicationProperties();
      //expect(instance).to.be();
    });

    it('should have the property provisioningState (base name: "provisioningState")', function() {
      // uncomment below and update the code to test the property provisioningState
      //var instance = new ApplicationClient.ApplicationProperties();
      //expect(instance).to.be();
    });

    it('should have the property publisherTenantId (base name: "publisherTenantId")', function() {
      // uncomment below and update the code to test the property publisherTenantId
      //var instance = new ApplicationClient.ApplicationProperties();
      //expect(instance).to.be();
    });

    it('should have the property supportUrls (base name: "supportUrls")', function() {
      // uncomment below and update the code to test the property supportUrls
      //var instance = new ApplicationClient.ApplicationProperties();
      //expect(instance).to.be();
    });

    it('should have the property updatedBy (base name: "updatedBy")', function() {
      // uncomment below and update the code to test the property updatedBy
      //var instance = new ApplicationClient.ApplicationProperties();
      //expect(instance).to.be();
    });

  });

}));
