/**
 * ApplicationClient
 * ARM applications
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApplicationClient);
  }
}(this, function(expect, ApplicationClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApplicationClient.ApplicationsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ApplicationsApi', function() {
    describe('applicationsCreateOrUpdate', function() {
      it('should call applicationsCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test applicationsCreateOrUpdate
        //instance.applicationsCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('applicationsCreateOrUpdateById', function() {
      it('should call applicationsCreateOrUpdateById successfully', function(done) {
        //uncomment below and update the code to test applicationsCreateOrUpdateById
        //instance.applicationsCreateOrUpdateById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('applicationsDelete', function() {
      it('should call applicationsDelete successfully', function(done) {
        //uncomment below and update the code to test applicationsDelete
        //instance.applicationsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('applicationsDeleteById', function() {
      it('should call applicationsDeleteById successfully', function(done) {
        //uncomment below and update the code to test applicationsDeleteById
        //instance.applicationsDeleteById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('applicationsGet', function() {
      it('should call applicationsGet successfully', function(done) {
        //uncomment below and update the code to test applicationsGet
        //instance.applicationsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('applicationsGetById', function() {
      it('should call applicationsGetById successfully', function(done) {
        //uncomment below and update the code to test applicationsGetById
        //instance.applicationsGetById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('applicationsListByResourceGroup', function() {
      it('should call applicationsListByResourceGroup successfully', function(done) {
        //uncomment below and update the code to test applicationsListByResourceGroup
        //instance.applicationsListByResourceGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('applicationsListBySubscription', function() {
      it('should call applicationsListBySubscription successfully', function(done) {
        //uncomment below and update the code to test applicationsListBySubscription
        //instance.applicationsListBySubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('applicationsRefreshPermissions', function() {
      it('should call applicationsRefreshPermissions successfully', function(done) {
        //uncomment below and update the code to test applicationsRefreshPermissions
        //instance.applicationsRefreshPermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('applicationsUpdate', function() {
      it('should call applicationsUpdate successfully', function(done) {
        //uncomment below and update the code to test applicationsUpdate
        //instance.applicationsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('applicationsUpdateById', function() {
      it('should call applicationsUpdateById successfully', function(done) {
        //uncomment below and update the code to test applicationsUpdateById
        //instance.applicationsUpdateById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
