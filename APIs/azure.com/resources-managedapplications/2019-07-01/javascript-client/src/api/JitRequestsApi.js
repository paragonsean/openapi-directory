/**
 * ApplicationClient
 * ARM applications
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import JitRequestDefinition from '../model/JitRequestDefinition';
import JitRequestDefinitionListResult from '../model/JitRequestDefinitionListResult';
import JitRequestPatchable from '../model/JitRequestPatchable';

/**
* JitRequests service.
* @module api/JitRequestsApi
* @version 2019-07-01
*/
export default class JitRequestsApi {

    /**
    * Constructs a new JitRequestsApi. 
    * @alias module:api/JitRequestsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the jitRequestsCreateOrUpdate operation.
     * @callback module:api/JitRequestsApi~jitRequestsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JitRequestDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the JIT request.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} jitRequestName The name of the JIT request.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/JitRequestDefinition} parameters Parameters supplied to the update JIT request.
     * @param {module:api/JitRequestsApi~jitRequestsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JitRequestDefinition}
     */
    jitRequestsCreateOrUpdate(resourceGroupName, jitRequestName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jitRequestsCreateOrUpdate");
      }
      // verify the required parameter 'jitRequestName' is set
      if (jitRequestName === undefined || jitRequestName === null) {
        throw new Error("Missing the required parameter 'jitRequestName' when calling jitRequestsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jitRequestsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jitRequestsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling jitRequestsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'jitRequestName': jitRequestName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JitRequestDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests/{jitRequestName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jitRequestsDelete operation.
     * @callback module:api/JitRequestsApi~jitRequestsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the JIT request.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} jitRequestName The name of the JIT request.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/JitRequestsApi~jitRequestsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jitRequestsDelete(resourceGroupName, jitRequestName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jitRequestsDelete");
      }
      // verify the required parameter 'jitRequestName' is set
      if (jitRequestName === undefined || jitRequestName === null) {
        throw new Error("Missing the required parameter 'jitRequestName' when calling jitRequestsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jitRequestsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jitRequestsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'jitRequestName': jitRequestName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests/{jitRequestName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jitRequestsGet operation.
     * @callback module:api/JitRequestsApi~jitRequestsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JitRequestDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the JIT request.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} jitRequestName The name of the JIT request.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/JitRequestsApi~jitRequestsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JitRequestDefinition}
     */
    jitRequestsGet(resourceGroupName, jitRequestName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jitRequestsGet");
      }
      // verify the required parameter 'jitRequestName' is set
      if (jitRequestName === undefined || jitRequestName === null) {
        throw new Error("Missing the required parameter 'jitRequestName' when calling jitRequestsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jitRequestsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jitRequestsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'jitRequestName': jitRequestName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JitRequestDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests/{jitRequestName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jitRequestsListByResourceGroup operation.
     * @callback module:api/JitRequestsApi~jitRequestsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JitRequestDefinitionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all JIT requests within the resource group.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/JitRequestsApi~jitRequestsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JitRequestDefinitionListResult}
     */
    jitRequestsListByResourceGroup(resourceGroupName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jitRequestsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jitRequestsListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jitRequestsListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JitRequestDefinitionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jitRequestsListBySubscription operation.
     * @callback module:api/JitRequestsApi~jitRequestsListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JitRequestDefinitionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all JIT requests within the subscription.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/JitRequestsApi~jitRequestsListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JitRequestDefinitionListResult}
     */
    jitRequestsListBySubscription(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jitRequestsListBySubscription");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jitRequestsListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JitRequestDefinitionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Solutions/jitRequests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jitRequestsUpdate operation.
     * @callback module:api/JitRequestsApi~jitRequestsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JitRequestDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the JIT request.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} jitRequestName The name of the JIT request.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/JitRequestPatchable} parameters Parameters supplied to the update JIT request.
     * @param {module:api/JitRequestsApi~jitRequestsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JitRequestDefinition}
     */
    jitRequestsUpdate(resourceGroupName, jitRequestName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jitRequestsUpdate");
      }
      // verify the required parameter 'jitRequestName' is set
      if (jitRequestName === undefined || jitRequestName === null) {
        throw new Error("Missing the required parameter 'jitRequestName' when calling jitRequestsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jitRequestsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jitRequestsUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling jitRequestsUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'jitRequestName': jitRequestName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JitRequestDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/jitRequests/{jitRequestName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
