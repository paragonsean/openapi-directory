/**
 * ApplicationClient
 * ARM applications
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJitRequestProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJitRequestProperties::OAIJitRequestProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJitRequestProperties::OAIJitRequestProperties() {
    this->initializeModel();
}

OAIJitRequestProperties::~OAIJitRequestProperties() {}

void OAIJitRequestProperties::initializeModel() {

    m_application_resource_id_isSet = false;
    m_application_resource_id_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_jit_authorization_policies_isSet = false;
    m_jit_authorization_policies_isValid = false;

    m_jit_request_state_isSet = false;
    m_jit_request_state_isValid = false;

    m_jit_scheduling_policy_isSet = false;
    m_jit_scheduling_policy_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_publisher_tenant_id_isSet = false;
    m_publisher_tenant_id_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;
}

void OAIJitRequestProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJitRequestProperties::fromJsonObject(QJsonObject json) {

    m_application_resource_id_isValid = ::OpenAPI::fromJsonValue(m_application_resource_id, json[QString("applicationResourceId")]);
    m_application_resource_id_isSet = !json[QString("applicationResourceId")].isNull() && m_application_resource_id_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_jit_authorization_policies_isValid = ::OpenAPI::fromJsonValue(m_jit_authorization_policies, json[QString("jitAuthorizationPolicies")]);
    m_jit_authorization_policies_isSet = !json[QString("jitAuthorizationPolicies")].isNull() && m_jit_authorization_policies_isValid;

    m_jit_request_state_isValid = ::OpenAPI::fromJsonValue(m_jit_request_state, json[QString("jitRequestState")]);
    m_jit_request_state_isSet = !json[QString("jitRequestState")].isNull() && m_jit_request_state_isValid;

    m_jit_scheduling_policy_isValid = ::OpenAPI::fromJsonValue(m_jit_scheduling_policy, json[QString("jitSchedulingPolicy")]);
    m_jit_scheduling_policy_isSet = !json[QString("jitSchedulingPolicy")].isNull() && m_jit_scheduling_policy_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_publisher_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_publisher_tenant_id, json[QString("publisherTenantId")]);
    m_publisher_tenant_id_isSet = !json[QString("publisherTenantId")].isNull() && m_publisher_tenant_id_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updatedBy")]);
    m_updated_by_isSet = !json[QString("updatedBy")].isNull() && m_updated_by_isValid;
}

QString OAIJitRequestProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJitRequestProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_application_resource_id_isSet) {
        obj.insert(QString("applicationResourceId"), ::OpenAPI::toJsonValue(m_application_resource_id));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_jit_authorization_policies.size() > 0) {
        obj.insert(QString("jitAuthorizationPolicies"), ::OpenAPI::toJsonValue(m_jit_authorization_policies));
    }
    if (m_jit_request_state.isSet()) {
        obj.insert(QString("jitRequestState"), ::OpenAPI::toJsonValue(m_jit_request_state));
    }
    if (m_jit_scheduling_policy.isSet()) {
        obj.insert(QString("jitSchedulingPolicy"), ::OpenAPI::toJsonValue(m_jit_scheduling_policy));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_publisher_tenant_id_isSet) {
        obj.insert(QString("publisherTenantId"), ::OpenAPI::toJsonValue(m_publisher_tenant_id));
    }
    if (m_updated_by.isSet()) {
        obj.insert(QString("updatedBy"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    return obj;
}

QString OAIJitRequestProperties::getApplicationResourceId() const {
    return m_application_resource_id;
}
void OAIJitRequestProperties::setApplicationResourceId(const QString &application_resource_id) {
    m_application_resource_id = application_resource_id;
    m_application_resource_id_isSet = true;
}

bool OAIJitRequestProperties::is_application_resource_id_Set() const{
    return m_application_resource_id_isSet;
}

bool OAIJitRequestProperties::is_application_resource_id_Valid() const{
    return m_application_resource_id_isValid;
}

OAIApplicationClientDetails OAIJitRequestProperties::getCreatedBy() const {
    return m_created_by;
}
void OAIJitRequestProperties::setCreatedBy(const OAIApplicationClientDetails &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIJitRequestProperties::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIJitRequestProperties::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QList<OAIJitAuthorizationPolicies> OAIJitRequestProperties::getJitAuthorizationPolicies() const {
    return m_jit_authorization_policies;
}
void OAIJitRequestProperties::setJitAuthorizationPolicies(const QList<OAIJitAuthorizationPolicies> &jit_authorization_policies) {
    m_jit_authorization_policies = jit_authorization_policies;
    m_jit_authorization_policies_isSet = true;
}

bool OAIJitRequestProperties::is_jit_authorization_policies_Set() const{
    return m_jit_authorization_policies_isSet;
}

bool OAIJitRequestProperties::is_jit_authorization_policies_Valid() const{
    return m_jit_authorization_policies_isValid;
}

OAIJitRequestState OAIJitRequestProperties::getJitRequestState() const {
    return m_jit_request_state;
}
void OAIJitRequestProperties::setJitRequestState(const OAIJitRequestState &jit_request_state) {
    m_jit_request_state = jit_request_state;
    m_jit_request_state_isSet = true;
}

bool OAIJitRequestProperties::is_jit_request_state_Set() const{
    return m_jit_request_state_isSet;
}

bool OAIJitRequestProperties::is_jit_request_state_Valid() const{
    return m_jit_request_state_isValid;
}

OAIJitSchedulingPolicy OAIJitRequestProperties::getJitSchedulingPolicy() const {
    return m_jit_scheduling_policy;
}
void OAIJitRequestProperties::setJitSchedulingPolicy(const OAIJitSchedulingPolicy &jit_scheduling_policy) {
    m_jit_scheduling_policy = jit_scheduling_policy;
    m_jit_scheduling_policy_isSet = true;
}

bool OAIJitRequestProperties::is_jit_scheduling_policy_Set() const{
    return m_jit_scheduling_policy_isSet;
}

bool OAIJitRequestProperties::is_jit_scheduling_policy_Valid() const{
    return m_jit_scheduling_policy_isValid;
}

OAIProvisioningState OAIJitRequestProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIJitRequestProperties::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIJitRequestProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIJitRequestProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIJitRequestProperties::getPublisherTenantId() const {
    return m_publisher_tenant_id;
}
void OAIJitRequestProperties::setPublisherTenantId(const QString &publisher_tenant_id) {
    m_publisher_tenant_id = publisher_tenant_id;
    m_publisher_tenant_id_isSet = true;
}

bool OAIJitRequestProperties::is_publisher_tenant_id_Set() const{
    return m_publisher_tenant_id_isSet;
}

bool OAIJitRequestProperties::is_publisher_tenant_id_Valid() const{
    return m_publisher_tenant_id_isValid;
}

OAIApplicationClientDetails OAIJitRequestProperties::getUpdatedBy() const {
    return m_updated_by;
}
void OAIJitRequestProperties::setUpdatedBy(const OAIApplicationClientDetails &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIJitRequestProperties::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIJitRequestProperties::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

bool OAIJitRequestProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_jit_authorization_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_jit_request_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_jit_scheduling_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJitRequestProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_resource_id_isValid && m_jit_authorization_policies_isValid && m_jit_scheduling_policy_isValid && true;
}

} // namespace OpenAPI
