/**
 * ApplicationClient
 * ARM applications
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationDefinitionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationDefinitionProperties::OAIApplicationDefinitionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationDefinitionProperties::OAIApplicationDefinitionProperties() {
    this->initializeModel();
}

OAIApplicationDefinitionProperties::~OAIApplicationDefinitionProperties() {}

void OAIApplicationDefinitionProperties::initializeModel() {

    m_artifacts_isSet = false;
    m_artifacts_isValid = false;

    m_authorizations_isSet = false;
    m_authorizations_isValid = false;

    m_create_ui_definition_isSet = false;
    m_create_ui_definition_isValid = false;

    m_deployment_policy_isSet = false;
    m_deployment_policy_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_lock_level_isSet = false;
    m_lock_level_isValid = false;

    m_locking_policy_isSet = false;
    m_locking_policy_isValid = false;

    m_main_template_isSet = false;
    m_main_template_isValid = false;

    m_management_policy_isSet = false;
    m_management_policy_isValid = false;

    m_notification_policy_isSet = false;
    m_notification_policy_isValid = false;

    m_package_file_uri_isSet = false;
    m_package_file_uri_isValid = false;

    m_policies_isSet = false;
    m_policies_isValid = false;
}

void OAIApplicationDefinitionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationDefinitionProperties::fromJsonObject(QJsonObject json) {

    m_artifacts_isValid = ::OpenAPI::fromJsonValue(m_artifacts, json[QString("artifacts")]);
    m_artifacts_isSet = !json[QString("artifacts")].isNull() && m_artifacts_isValid;

    m_authorizations_isValid = ::OpenAPI::fromJsonValue(m_authorizations, json[QString("authorizations")]);
    m_authorizations_isSet = !json[QString("authorizations")].isNull() && m_authorizations_isValid;

    m_create_ui_definition_isValid = ::OpenAPI::fromJsonValue(m_create_ui_definition, json[QString("createUiDefinition")]);
    m_create_ui_definition_isSet = !json[QString("createUiDefinition")].isNull() && m_create_ui_definition_isValid;

    m_deployment_policy_isValid = ::OpenAPI::fromJsonValue(m_deployment_policy, json[QString("deploymentPolicy")]);
    m_deployment_policy_isSet = !json[QString("deploymentPolicy")].isNull() && m_deployment_policy_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("isEnabled")]);
    m_is_enabled_isSet = !json[QString("isEnabled")].isNull() && m_is_enabled_isValid;

    m_lock_level_isValid = ::OpenAPI::fromJsonValue(m_lock_level, json[QString("lockLevel")]);
    m_lock_level_isSet = !json[QString("lockLevel")].isNull() && m_lock_level_isValid;

    m_locking_policy_isValid = ::OpenAPI::fromJsonValue(m_locking_policy, json[QString("lockingPolicy")]);
    m_locking_policy_isSet = !json[QString("lockingPolicy")].isNull() && m_locking_policy_isValid;

    m_main_template_isValid = ::OpenAPI::fromJsonValue(m_main_template, json[QString("mainTemplate")]);
    m_main_template_isSet = !json[QString("mainTemplate")].isNull() && m_main_template_isValid;

    m_management_policy_isValid = ::OpenAPI::fromJsonValue(m_management_policy, json[QString("managementPolicy")]);
    m_management_policy_isSet = !json[QString("managementPolicy")].isNull() && m_management_policy_isValid;

    m_notification_policy_isValid = ::OpenAPI::fromJsonValue(m_notification_policy, json[QString("notificationPolicy")]);
    m_notification_policy_isSet = !json[QString("notificationPolicy")].isNull() && m_notification_policy_isValid;

    m_package_file_uri_isValid = ::OpenAPI::fromJsonValue(m_package_file_uri, json[QString("packageFileUri")]);
    m_package_file_uri_isSet = !json[QString("packageFileUri")].isNull() && m_package_file_uri_isValid;

    m_policies_isValid = ::OpenAPI::fromJsonValue(m_policies, json[QString("policies")]);
    m_policies_isSet = !json[QString("policies")].isNull() && m_policies_isValid;
}

QString OAIApplicationDefinitionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationDefinitionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_artifacts.size() > 0) {
        obj.insert(QString("artifacts"), ::OpenAPI::toJsonValue(m_artifacts));
    }
    if (m_authorizations.size() > 0) {
        obj.insert(QString("authorizations"), ::OpenAPI::toJsonValue(m_authorizations));
    }
    if (m_create_ui_definition_isSet) {
        obj.insert(QString("createUiDefinition"), ::OpenAPI::toJsonValue(m_create_ui_definition));
    }
    if (m_deployment_policy.isSet()) {
        obj.insert(QString("deploymentPolicy"), ::OpenAPI::toJsonValue(m_deployment_policy));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("isEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_lock_level.isSet()) {
        obj.insert(QString("lockLevel"), ::OpenAPI::toJsonValue(m_lock_level));
    }
    if (m_locking_policy.isSet()) {
        obj.insert(QString("lockingPolicy"), ::OpenAPI::toJsonValue(m_locking_policy));
    }
    if (m_main_template_isSet) {
        obj.insert(QString("mainTemplate"), ::OpenAPI::toJsonValue(m_main_template));
    }
    if (m_management_policy.isSet()) {
        obj.insert(QString("managementPolicy"), ::OpenAPI::toJsonValue(m_management_policy));
    }
    if (m_notification_policy.isSet()) {
        obj.insert(QString("notificationPolicy"), ::OpenAPI::toJsonValue(m_notification_policy));
    }
    if (m_package_file_uri_isSet) {
        obj.insert(QString("packageFileUri"), ::OpenAPI::toJsonValue(m_package_file_uri));
    }
    if (m_policies.size() > 0) {
        obj.insert(QString("policies"), ::OpenAPI::toJsonValue(m_policies));
    }
    return obj;
}

QList<OAIApplicationDefinitionArtifact> OAIApplicationDefinitionProperties::getArtifacts() const {
    return m_artifacts;
}
void OAIApplicationDefinitionProperties::setArtifacts(const QList<OAIApplicationDefinitionArtifact> &artifacts) {
    m_artifacts = artifacts;
    m_artifacts_isSet = true;
}

bool OAIApplicationDefinitionProperties::is_artifacts_Set() const{
    return m_artifacts_isSet;
}

bool OAIApplicationDefinitionProperties::is_artifacts_Valid() const{
    return m_artifacts_isValid;
}

QList<OAIApplicationAuthorization> OAIApplicationDefinitionProperties::getAuthorizations() const {
    return m_authorizations;
}
void OAIApplicationDefinitionProperties::setAuthorizations(const QList<OAIApplicationAuthorization> &authorizations) {
    m_authorizations = authorizations;
    m_authorizations_isSet = true;
}

bool OAIApplicationDefinitionProperties::is_authorizations_Set() const{
    return m_authorizations_isSet;
}

bool OAIApplicationDefinitionProperties::is_authorizations_Valid() const{
    return m_authorizations_isValid;
}

OAIObject OAIApplicationDefinitionProperties::getCreateUiDefinition() const {
    return m_create_ui_definition;
}
void OAIApplicationDefinitionProperties::setCreateUiDefinition(const OAIObject &create_ui_definition) {
    m_create_ui_definition = create_ui_definition;
    m_create_ui_definition_isSet = true;
}

bool OAIApplicationDefinitionProperties::is_create_ui_definition_Set() const{
    return m_create_ui_definition_isSet;
}

bool OAIApplicationDefinitionProperties::is_create_ui_definition_Valid() const{
    return m_create_ui_definition_isValid;
}

OAIApplicationDeploymentPolicy OAIApplicationDefinitionProperties::getDeploymentPolicy() const {
    return m_deployment_policy;
}
void OAIApplicationDefinitionProperties::setDeploymentPolicy(const OAIApplicationDeploymentPolicy &deployment_policy) {
    m_deployment_policy = deployment_policy;
    m_deployment_policy_isSet = true;
}

bool OAIApplicationDefinitionProperties::is_deployment_policy_Set() const{
    return m_deployment_policy_isSet;
}

bool OAIApplicationDefinitionProperties::is_deployment_policy_Valid() const{
    return m_deployment_policy_isValid;
}

QString OAIApplicationDefinitionProperties::getDescription() const {
    return m_description;
}
void OAIApplicationDefinitionProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApplicationDefinitionProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApplicationDefinitionProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIApplicationDefinitionProperties::getDisplayName() const {
    return m_display_name;
}
void OAIApplicationDefinitionProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIApplicationDefinitionProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIApplicationDefinitionProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIApplicationDefinitionProperties::isIsEnabled() const {
    return m_is_enabled;
}
void OAIApplicationDefinitionProperties::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAIApplicationDefinitionProperties::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAIApplicationDefinitionProperties::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

OAIApplicationLockLevel OAIApplicationDefinitionProperties::getLockLevel() const {
    return m_lock_level;
}
void OAIApplicationDefinitionProperties::setLockLevel(const OAIApplicationLockLevel &lock_level) {
    m_lock_level = lock_level;
    m_lock_level_isSet = true;
}

bool OAIApplicationDefinitionProperties::is_lock_level_Set() const{
    return m_lock_level_isSet;
}

bool OAIApplicationDefinitionProperties::is_lock_level_Valid() const{
    return m_lock_level_isValid;
}

OAIApplicationPackageLockingPolicyDefinition OAIApplicationDefinitionProperties::getLockingPolicy() const {
    return m_locking_policy;
}
void OAIApplicationDefinitionProperties::setLockingPolicy(const OAIApplicationPackageLockingPolicyDefinition &locking_policy) {
    m_locking_policy = locking_policy;
    m_locking_policy_isSet = true;
}

bool OAIApplicationDefinitionProperties::is_locking_policy_Set() const{
    return m_locking_policy_isSet;
}

bool OAIApplicationDefinitionProperties::is_locking_policy_Valid() const{
    return m_locking_policy_isValid;
}

OAIObject OAIApplicationDefinitionProperties::getMainTemplate() const {
    return m_main_template;
}
void OAIApplicationDefinitionProperties::setMainTemplate(const OAIObject &main_template) {
    m_main_template = main_template;
    m_main_template_isSet = true;
}

bool OAIApplicationDefinitionProperties::is_main_template_Set() const{
    return m_main_template_isSet;
}

bool OAIApplicationDefinitionProperties::is_main_template_Valid() const{
    return m_main_template_isValid;
}

OAIApplicationManagementPolicy OAIApplicationDefinitionProperties::getManagementPolicy() const {
    return m_management_policy;
}
void OAIApplicationDefinitionProperties::setManagementPolicy(const OAIApplicationManagementPolicy &management_policy) {
    m_management_policy = management_policy;
    m_management_policy_isSet = true;
}

bool OAIApplicationDefinitionProperties::is_management_policy_Set() const{
    return m_management_policy_isSet;
}

bool OAIApplicationDefinitionProperties::is_management_policy_Valid() const{
    return m_management_policy_isValid;
}

OAIApplicationNotificationPolicy OAIApplicationDefinitionProperties::getNotificationPolicy() const {
    return m_notification_policy;
}
void OAIApplicationDefinitionProperties::setNotificationPolicy(const OAIApplicationNotificationPolicy &notification_policy) {
    m_notification_policy = notification_policy;
    m_notification_policy_isSet = true;
}

bool OAIApplicationDefinitionProperties::is_notification_policy_Set() const{
    return m_notification_policy_isSet;
}

bool OAIApplicationDefinitionProperties::is_notification_policy_Valid() const{
    return m_notification_policy_isValid;
}

QString OAIApplicationDefinitionProperties::getPackageFileUri() const {
    return m_package_file_uri;
}
void OAIApplicationDefinitionProperties::setPackageFileUri(const QString &package_file_uri) {
    m_package_file_uri = package_file_uri;
    m_package_file_uri_isSet = true;
}

bool OAIApplicationDefinitionProperties::is_package_file_uri_Set() const{
    return m_package_file_uri_isSet;
}

bool OAIApplicationDefinitionProperties::is_package_file_uri_Valid() const{
    return m_package_file_uri_isValid;
}

QList<OAIApplicationPolicy> OAIApplicationDefinitionProperties::getPolicies() const {
    return m_policies;
}
void OAIApplicationDefinitionProperties::setPolicies(const QList<OAIApplicationPolicy> &policies) {
    m_policies = policies;
    m_policies_isSet = true;
}

bool OAIApplicationDefinitionProperties::is_policies_Set() const{
    return m_policies_isSet;
}

bool OAIApplicationDefinitionProperties::is_policies_Valid() const{
    return m_policies_isValid;
}

bool OAIApplicationDefinitionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorizations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_ui_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_locking_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_management_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_file_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationDefinitionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lock_level_isValid && true;
}

} // namespace OpenAPI
