/**
 * ApplicationClient
 * ARM applications
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationPolicy::OAIApplicationPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationPolicy::OAIApplicationPolicy() {
    this->initializeModel();
}

OAIApplicationPolicy::~OAIApplicationPolicy() {}

void OAIApplicationPolicy::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_policy_definition_id_isSet = false;
    m_policy_definition_id_isValid = false;
}

void OAIApplicationPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationPolicy::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_policy_definition_id_isValid = ::OpenAPI::fromJsonValue(m_policy_definition_id, json[QString("policyDefinitionId")]);
    m_policy_definition_id_isSet = !json[QString("policyDefinitionId")].isNull() && m_policy_definition_id_isValid;
}

QString OAIApplicationPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters_isSet) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_policy_definition_id_isSet) {
        obj.insert(QString("policyDefinitionId"), ::OpenAPI::toJsonValue(m_policy_definition_id));
    }
    return obj;
}

QString OAIApplicationPolicy::getName() const {
    return m_name;
}
void OAIApplicationPolicy::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplicationPolicy::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplicationPolicy::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApplicationPolicy::getParameters() const {
    return m_parameters;
}
void OAIApplicationPolicy::setParameters(const QString &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIApplicationPolicy::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIApplicationPolicy::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIApplicationPolicy::getPolicyDefinitionId() const {
    return m_policy_definition_id;
}
void OAIApplicationPolicy::setPolicyDefinitionId(const QString &policy_definition_id) {
    m_policy_definition_id = policy_definition_id;
    m_policy_definition_id_isSet = true;
}

bool OAIApplicationPolicy::is_policy_definition_id_Set() const{
    return m_policy_definition_id_isSet;
}

bool OAIApplicationPolicy::is_policy_definition_id_Valid() const{
    return m_policy_definition_id_isValid;
}

bool OAIApplicationPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_definition_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
