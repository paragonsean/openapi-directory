/**
 * ApplicationClient
 * ARM applications
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJitRequestsApi_H
#define OAI_OAIJitRequestsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIJitRequestDefinition.h"
#include "OAIJitRequestDefinitionListResult.h"
#include "OAIJitRequestPatchable.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJitRequestsApi : public QObject {
    Q_OBJECT

public:
    OAIJitRequestsApi(const int timeOut = 0);
    ~OAIJitRequestsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  jit_request_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIJitRequestDefinition [required]
    */
    virtual void jitRequestsCreateOrUpdate(const QString &resource_group_name, const QString &jit_request_name, const QString &api_version, const QString &subscription_id, const OAIJitRequestDefinition &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  jit_request_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void jitRequestsDelete(const QString &resource_group_name, const QString &jit_request_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  jit_request_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void jitRequestsGet(const QString &resource_group_name, const QString &jit_request_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void jitRequestsListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void jitRequestsListBySubscription(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  jit_request_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIJitRequestPatchable [required]
    */
    virtual void jitRequestsUpdate(const QString &resource_group_name, const QString &jit_request_name, const QString &api_version, const QString &subscription_id, const OAIJitRequestPatchable &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void jitRequestsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void jitRequestsDeleteCallback(OAIHttpRequestWorker *worker);
    void jitRequestsGetCallback(OAIHttpRequestWorker *worker);
    void jitRequestsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void jitRequestsListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void jitRequestsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void jitRequestsCreateOrUpdateSignal(OAIJitRequestDefinition summary);
    void jitRequestsDeleteSignal();
    void jitRequestsGetSignal(OAIJitRequestDefinition summary);
    void jitRequestsListByResourceGroupSignal(OAIJitRequestDefinitionListResult summary);
    void jitRequestsListBySubscriptionSignal(OAIJitRequestDefinitionListResult summary);
    void jitRequestsUpdateSignal(OAIJitRequestDefinition summary);


    void jitRequestsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIJitRequestDefinition summary);
    void jitRequestsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void jitRequestsGetSignalFull(OAIHttpRequestWorker *worker, OAIJitRequestDefinition summary);
    void jitRequestsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIJitRequestDefinitionListResult summary);
    void jitRequestsListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIJitRequestDefinitionListResult summary);
    void jitRequestsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIJitRequestDefinition summary);

    Q_DECL_DEPRECATED_X("Use jitRequestsCreateOrUpdateSignalError() instead")
    void jitRequestsCreateOrUpdateSignalE(OAIJitRequestDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jitRequestsCreateOrUpdateSignalError(OAIJitRequestDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitRequestsDeleteSignalError() instead")
    void jitRequestsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jitRequestsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitRequestsGetSignalError() instead")
    void jitRequestsGetSignalE(OAIJitRequestDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jitRequestsGetSignalError(OAIJitRequestDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitRequestsListByResourceGroupSignalError() instead")
    void jitRequestsListByResourceGroupSignalE(OAIJitRequestDefinitionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jitRequestsListByResourceGroupSignalError(OAIJitRequestDefinitionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitRequestsListBySubscriptionSignalError() instead")
    void jitRequestsListBySubscriptionSignalE(OAIJitRequestDefinitionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jitRequestsListBySubscriptionSignalError(OAIJitRequestDefinitionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitRequestsUpdateSignalError() instead")
    void jitRequestsUpdateSignalE(OAIJitRequestDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jitRequestsUpdateSignalError(OAIJitRequestDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use jitRequestsCreateOrUpdateSignalErrorFull() instead")
    void jitRequestsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jitRequestsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitRequestsDeleteSignalErrorFull() instead")
    void jitRequestsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jitRequestsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitRequestsGetSignalErrorFull() instead")
    void jitRequestsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jitRequestsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitRequestsListByResourceGroupSignalErrorFull() instead")
    void jitRequestsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jitRequestsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitRequestsListBySubscriptionSignalErrorFull() instead")
    void jitRequestsListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jitRequestsListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jitRequestsUpdateSignalErrorFull() instead")
    void jitRequestsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jitRequestsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
