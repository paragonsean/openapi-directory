/**
 * ApplicationClient
 * ARM applications
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationProperties::OAIApplicationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationProperties::OAIApplicationProperties() {
    this->initializeModel();
}

OAIApplicationProperties::~OAIApplicationProperties() {}

void OAIApplicationProperties::initializeModel() {

    m_application_definition_id_isSet = false;
    m_application_definition_id_isValid = false;

    m_artifacts_isSet = false;
    m_artifacts_isValid = false;

    m_authorizations_isSet = false;
    m_authorizations_isValid = false;

    m_billing_details_isSet = false;
    m_billing_details_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_customer_support_isSet = false;
    m_customer_support_isValid = false;

    m_jit_access_policy_isSet = false;
    m_jit_access_policy_isValid = false;

    m_managed_resource_group_id_isSet = false;
    m_managed_resource_group_id_isValid = false;

    m_management_mode_isSet = false;
    m_management_mode_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_publisher_tenant_id_isSet = false;
    m_publisher_tenant_id_isValid = false;

    m_support_urls_isSet = false;
    m_support_urls_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;
}

void OAIApplicationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationProperties::fromJsonObject(QJsonObject json) {

    m_application_definition_id_isValid = ::OpenAPI::fromJsonValue(m_application_definition_id, json[QString("applicationDefinitionId")]);
    m_application_definition_id_isSet = !json[QString("applicationDefinitionId")].isNull() && m_application_definition_id_isValid;

    m_artifacts_isValid = ::OpenAPI::fromJsonValue(m_artifacts, json[QString("artifacts")]);
    m_artifacts_isSet = !json[QString("artifacts")].isNull() && m_artifacts_isValid;

    m_authorizations_isValid = ::OpenAPI::fromJsonValue(m_authorizations, json[QString("authorizations")]);
    m_authorizations_isSet = !json[QString("authorizations")].isNull() && m_authorizations_isValid;

    m_billing_details_isValid = ::OpenAPI::fromJsonValue(m_billing_details, json[QString("billingDetails")]);
    m_billing_details_isSet = !json[QString("billingDetails")].isNull() && m_billing_details_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_customer_support_isValid = ::OpenAPI::fromJsonValue(m_customer_support, json[QString("customerSupport")]);
    m_customer_support_isSet = !json[QString("customerSupport")].isNull() && m_customer_support_isValid;

    m_jit_access_policy_isValid = ::OpenAPI::fromJsonValue(m_jit_access_policy, json[QString("jitAccessPolicy")]);
    m_jit_access_policy_isSet = !json[QString("jitAccessPolicy")].isNull() && m_jit_access_policy_isValid;

    m_managed_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_managed_resource_group_id, json[QString("managedResourceGroupId")]);
    m_managed_resource_group_id_isSet = !json[QString("managedResourceGroupId")].isNull() && m_managed_resource_group_id_isValid;

    m_management_mode_isValid = ::OpenAPI::fromJsonValue(m_management_mode, json[QString("managementMode")]);
    m_management_mode_isSet = !json[QString("managementMode")].isNull() && m_management_mode_isValid;

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("outputs")]);
    m_outputs_isSet = !json[QString("outputs")].isNull() && m_outputs_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_publisher_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_publisher_tenant_id, json[QString("publisherTenantId")]);
    m_publisher_tenant_id_isSet = !json[QString("publisherTenantId")].isNull() && m_publisher_tenant_id_isValid;

    m_support_urls_isValid = ::OpenAPI::fromJsonValue(m_support_urls, json[QString("supportUrls")]);
    m_support_urls_isSet = !json[QString("supportUrls")].isNull() && m_support_urls_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updatedBy")]);
    m_updated_by_isSet = !json[QString("updatedBy")].isNull() && m_updated_by_isValid;
}

QString OAIApplicationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_application_definition_id_isSet) {
        obj.insert(QString("applicationDefinitionId"), ::OpenAPI::toJsonValue(m_application_definition_id));
    }
    if (m_artifacts.size() > 0) {
        obj.insert(QString("artifacts"), ::OpenAPI::toJsonValue(m_artifacts));
    }
    if (m_authorizations.size() > 0) {
        obj.insert(QString("authorizations"), ::OpenAPI::toJsonValue(m_authorizations));
    }
    if (m_billing_details.isSet()) {
        obj.insert(QString("billingDetails"), ::OpenAPI::toJsonValue(m_billing_details));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_customer_support.isSet()) {
        obj.insert(QString("customerSupport"), ::OpenAPI::toJsonValue(m_customer_support));
    }
    if (m_jit_access_policy.isSet()) {
        obj.insert(QString("jitAccessPolicy"), ::OpenAPI::toJsonValue(m_jit_access_policy));
    }
    if (m_managed_resource_group_id_isSet) {
        obj.insert(QString("managedResourceGroupId"), ::OpenAPI::toJsonValue(m_managed_resource_group_id));
    }
    if (m_management_mode.isSet()) {
        obj.insert(QString("managementMode"), ::OpenAPI::toJsonValue(m_management_mode));
    }
    if (m_outputs_isSet) {
        obj.insert(QString("outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    if (m_parameters_isSet) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_publisher_tenant_id_isSet) {
        obj.insert(QString("publisherTenantId"), ::OpenAPI::toJsonValue(m_publisher_tenant_id));
    }
    if (m_support_urls.isSet()) {
        obj.insert(QString("supportUrls"), ::OpenAPI::toJsonValue(m_support_urls));
    }
    if (m_updated_by.isSet()) {
        obj.insert(QString("updatedBy"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    return obj;
}

QString OAIApplicationProperties::getApplicationDefinitionId() const {
    return m_application_definition_id;
}
void OAIApplicationProperties::setApplicationDefinitionId(const QString &application_definition_id) {
    m_application_definition_id = application_definition_id;
    m_application_definition_id_isSet = true;
}

bool OAIApplicationProperties::is_application_definition_id_Set() const{
    return m_application_definition_id_isSet;
}

bool OAIApplicationProperties::is_application_definition_id_Valid() const{
    return m_application_definition_id_isValid;
}

QList<OAIApplicationArtifact> OAIApplicationProperties::getArtifacts() const {
    return m_artifacts;
}
void OAIApplicationProperties::setArtifacts(const QList<OAIApplicationArtifact> &artifacts) {
    m_artifacts = artifacts;
    m_artifacts_isSet = true;
}

bool OAIApplicationProperties::is_artifacts_Set() const{
    return m_artifacts_isSet;
}

bool OAIApplicationProperties::is_artifacts_Valid() const{
    return m_artifacts_isValid;
}

QList<OAIApplicationAuthorization> OAIApplicationProperties::getAuthorizations() const {
    return m_authorizations;
}
void OAIApplicationProperties::setAuthorizations(const QList<OAIApplicationAuthorization> &authorizations) {
    m_authorizations = authorizations;
    m_authorizations_isSet = true;
}

bool OAIApplicationProperties::is_authorizations_Set() const{
    return m_authorizations_isSet;
}

bool OAIApplicationProperties::is_authorizations_Valid() const{
    return m_authorizations_isValid;
}

OAIApplicationBillingDetailsDefinition OAIApplicationProperties::getBillingDetails() const {
    return m_billing_details;
}
void OAIApplicationProperties::setBillingDetails(const OAIApplicationBillingDetailsDefinition &billing_details) {
    m_billing_details = billing_details;
    m_billing_details_isSet = true;
}

bool OAIApplicationProperties::is_billing_details_Set() const{
    return m_billing_details_isSet;
}

bool OAIApplicationProperties::is_billing_details_Valid() const{
    return m_billing_details_isValid;
}

OAIApplicationClientDetails OAIApplicationProperties::getCreatedBy() const {
    return m_created_by;
}
void OAIApplicationProperties::setCreatedBy(const OAIApplicationClientDetails &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIApplicationProperties::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIApplicationProperties::is_created_by_Valid() const{
    return m_created_by_isValid;
}

OAIApplicationPackageContact OAIApplicationProperties::getCustomerSupport() const {
    return m_customer_support;
}
void OAIApplicationProperties::setCustomerSupport(const OAIApplicationPackageContact &customer_support) {
    m_customer_support = customer_support;
    m_customer_support_isSet = true;
}

bool OAIApplicationProperties::is_customer_support_Set() const{
    return m_customer_support_isSet;
}

bool OAIApplicationProperties::is_customer_support_Valid() const{
    return m_customer_support_isValid;
}

OAIApplicationJitAccessPolicy OAIApplicationProperties::getJitAccessPolicy() const {
    return m_jit_access_policy;
}
void OAIApplicationProperties::setJitAccessPolicy(const OAIApplicationJitAccessPolicy &jit_access_policy) {
    m_jit_access_policy = jit_access_policy;
    m_jit_access_policy_isSet = true;
}

bool OAIApplicationProperties::is_jit_access_policy_Set() const{
    return m_jit_access_policy_isSet;
}

bool OAIApplicationProperties::is_jit_access_policy_Valid() const{
    return m_jit_access_policy_isValid;
}

QString OAIApplicationProperties::getManagedResourceGroupId() const {
    return m_managed_resource_group_id;
}
void OAIApplicationProperties::setManagedResourceGroupId(const QString &managed_resource_group_id) {
    m_managed_resource_group_id = managed_resource_group_id;
    m_managed_resource_group_id_isSet = true;
}

bool OAIApplicationProperties::is_managed_resource_group_id_Set() const{
    return m_managed_resource_group_id_isSet;
}

bool OAIApplicationProperties::is_managed_resource_group_id_Valid() const{
    return m_managed_resource_group_id_isValid;
}

OAIApplicationManagementMode OAIApplicationProperties::getManagementMode() const {
    return m_management_mode;
}
void OAIApplicationProperties::setManagementMode(const OAIApplicationManagementMode &management_mode) {
    m_management_mode = management_mode;
    m_management_mode_isSet = true;
}

bool OAIApplicationProperties::is_management_mode_Set() const{
    return m_management_mode_isSet;
}

bool OAIApplicationProperties::is_management_mode_Valid() const{
    return m_management_mode_isValid;
}

OAIObject OAIApplicationProperties::getOutputs() const {
    return m_outputs;
}
void OAIApplicationProperties::setOutputs(const OAIObject &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAIApplicationProperties::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAIApplicationProperties::is_outputs_Valid() const{
    return m_outputs_isValid;
}

OAIObject OAIApplicationProperties::getParameters() const {
    return m_parameters;
}
void OAIApplicationProperties::setParameters(const OAIObject &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIApplicationProperties::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIApplicationProperties::is_parameters_Valid() const{
    return m_parameters_isValid;
}

OAIProvisioningState OAIApplicationProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIApplicationProperties::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIApplicationProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIApplicationProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIApplicationProperties::getPublisherTenantId() const {
    return m_publisher_tenant_id;
}
void OAIApplicationProperties::setPublisherTenantId(const QString &publisher_tenant_id) {
    m_publisher_tenant_id = publisher_tenant_id;
    m_publisher_tenant_id_isSet = true;
}

bool OAIApplicationProperties::is_publisher_tenant_id_Set() const{
    return m_publisher_tenant_id_isSet;
}

bool OAIApplicationProperties::is_publisher_tenant_id_Valid() const{
    return m_publisher_tenant_id_isValid;
}

OAIApplicationPackageSupportUrls OAIApplicationProperties::getSupportUrls() const {
    return m_support_urls;
}
void OAIApplicationProperties::setSupportUrls(const OAIApplicationPackageSupportUrls &support_urls) {
    m_support_urls = support_urls;
    m_support_urls_isSet = true;
}

bool OAIApplicationProperties::is_support_urls_Set() const{
    return m_support_urls_isSet;
}

bool OAIApplicationProperties::is_support_urls_Valid() const{
    return m_support_urls_isValid;
}

OAIApplicationClientDetails OAIApplicationProperties::getUpdatedBy() const {
    return m_updated_by;
}
void OAIApplicationProperties::setUpdatedBy(const OAIApplicationClientDetails &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIApplicationProperties::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIApplicationProperties::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

bool OAIApplicationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_definition_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artifacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorizations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_support.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_jit_access_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_management_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_urls.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
