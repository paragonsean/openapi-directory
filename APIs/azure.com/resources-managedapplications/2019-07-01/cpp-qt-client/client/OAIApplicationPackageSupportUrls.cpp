/**
 * ApplicationClient
 * ARM applications
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationPackageSupportUrls.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationPackageSupportUrls::OAIApplicationPackageSupportUrls(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationPackageSupportUrls::OAIApplicationPackageSupportUrls() {
    this->initializeModel();
}

OAIApplicationPackageSupportUrls::~OAIApplicationPackageSupportUrls() {}

void OAIApplicationPackageSupportUrls::initializeModel() {

    m_government_cloud_isSet = false;
    m_government_cloud_isValid = false;

    m_public_azure_isSet = false;
    m_public_azure_isValid = false;
}

void OAIApplicationPackageSupportUrls::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationPackageSupportUrls::fromJsonObject(QJsonObject json) {

    m_government_cloud_isValid = ::OpenAPI::fromJsonValue(m_government_cloud, json[QString("governmentCloud")]);
    m_government_cloud_isSet = !json[QString("governmentCloud")].isNull() && m_government_cloud_isValid;

    m_public_azure_isValid = ::OpenAPI::fromJsonValue(m_public_azure, json[QString("publicAzure")]);
    m_public_azure_isSet = !json[QString("publicAzure")].isNull() && m_public_azure_isValid;
}

QString OAIApplicationPackageSupportUrls::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationPackageSupportUrls::asJsonObject() const {
    QJsonObject obj;
    if (m_government_cloud_isSet) {
        obj.insert(QString("governmentCloud"), ::OpenAPI::toJsonValue(m_government_cloud));
    }
    if (m_public_azure_isSet) {
        obj.insert(QString("publicAzure"), ::OpenAPI::toJsonValue(m_public_azure));
    }
    return obj;
}

QString OAIApplicationPackageSupportUrls::getGovernmentCloud() const {
    return m_government_cloud;
}
void OAIApplicationPackageSupportUrls::setGovernmentCloud(const QString &government_cloud) {
    m_government_cloud = government_cloud;
    m_government_cloud_isSet = true;
}

bool OAIApplicationPackageSupportUrls::is_government_cloud_Set() const{
    return m_government_cloud_isSet;
}

bool OAIApplicationPackageSupportUrls::is_government_cloud_Valid() const{
    return m_government_cloud_isValid;
}

QString OAIApplicationPackageSupportUrls::getPublicAzure() const {
    return m_public_azure;
}
void OAIApplicationPackageSupportUrls::setPublicAzure(const QString &public_azure) {
    m_public_azure = public_azure;
    m_public_azure_isSet = true;
}

bool OAIApplicationPackageSupportUrls::is_public_azure_Set() const{
    return m_public_azure_isSet;
}

bool OAIApplicationPackageSupportUrls::is_public_azure_Valid() const{
    return m_public_azure_isValid;
}

bool OAIApplicationPackageSupportUrls::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_government_cloud_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_azure_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationPackageSupportUrls::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
