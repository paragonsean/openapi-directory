/**
 * ApplicationClient
 * ARM applications
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJitRequestState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJitRequestState::OAIJitRequestState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJitRequestState::OAIJitRequestState() {
    this->initializeModel();
}

OAIJitRequestState::~OAIJitRequestState() {}

void OAIJitRequestState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIJitRequestState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIJitRequestState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NotSpecified", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJitRequestState::NOTSPECIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Pending", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJitRequestState::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Approved", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJitRequestState::APPROVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Denied", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJitRequestState::DENIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJitRequestState::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Canceled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJitRequestState::CANCELED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Expired", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJitRequestState::EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Timeout", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJitRequestState::TIMEOUT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIJitRequestState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIJitRequestState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIJitRequestState::NOTSPECIFIED:
            val = "NotSpecified";
            break;
        case eOAIJitRequestState::PENDING:
            val = "Pending";
            break;
        case eOAIJitRequestState::APPROVED:
            val = "Approved";
            break;
        case eOAIJitRequestState::DENIED:
            val = "Denied";
            break;
        case eOAIJitRequestState::FAILED:
            val = "Failed";
            break;
        case eOAIJitRequestState::CANCELED:
            val = "Canceled";
            break;
        case eOAIJitRequestState::EXPIRED:
            val = "Expired";
            break;
        case eOAIJitRequestState::TIMEOUT:
            val = "Timeout";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIJitRequestState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIJitRequestState::eOAIJitRequestState OAIJitRequestState::getValue() const {
    return m_value;
}

void OAIJitRequestState::setValue(const OAIJitRequestState::eOAIJitRequestState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIJitRequestState::isSet() const {
    
    return m_value_isSet;
}

bool OAIJitRequestState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
