/**
 * ManagedApplicationClient
 * ARM managed applications (appliances)
 *
 * The version of the OpenAPI document: 2016-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplianceDefinitionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplianceDefinitionProperties::OAIApplianceDefinitionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplianceDefinitionProperties::OAIApplianceDefinitionProperties() {
    this->initializeModel();
}

OAIApplianceDefinitionProperties::~OAIApplianceDefinitionProperties() {}

void OAIApplianceDefinitionProperties::initializeModel() {

    m_artifacts_isSet = false;
    m_artifacts_isValid = false;

    m_authorizations_isSet = false;
    m_authorizations_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_lock_level_isSet = false;
    m_lock_level_isValid = false;

    m_package_file_uri_isSet = false;
    m_package_file_uri_isValid = false;
}

void OAIApplianceDefinitionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplianceDefinitionProperties::fromJsonObject(QJsonObject json) {

    m_artifacts_isValid = ::OpenAPI::fromJsonValue(m_artifacts, json[QString("artifacts")]);
    m_artifacts_isSet = !json[QString("artifacts")].isNull() && m_artifacts_isValid;

    m_authorizations_isValid = ::OpenAPI::fromJsonValue(m_authorizations, json[QString("authorizations")]);
    m_authorizations_isSet = !json[QString("authorizations")].isNull() && m_authorizations_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_lock_level_isValid = ::OpenAPI::fromJsonValue(m_lock_level, json[QString("lockLevel")]);
    m_lock_level_isSet = !json[QString("lockLevel")].isNull() && m_lock_level_isValid;

    m_package_file_uri_isValid = ::OpenAPI::fromJsonValue(m_package_file_uri, json[QString("packageFileUri")]);
    m_package_file_uri_isSet = !json[QString("packageFileUri")].isNull() && m_package_file_uri_isValid;
}

QString OAIApplianceDefinitionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplianceDefinitionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_artifacts.size() > 0) {
        obj.insert(QString("artifacts"), ::OpenAPI::toJsonValue(m_artifacts));
    }
    if (m_authorizations.size() > 0) {
        obj.insert(QString("authorizations"), ::OpenAPI::toJsonValue(m_authorizations));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_lock_level.isSet()) {
        obj.insert(QString("lockLevel"), ::OpenAPI::toJsonValue(m_lock_level));
    }
    if (m_package_file_uri_isSet) {
        obj.insert(QString("packageFileUri"), ::OpenAPI::toJsonValue(m_package_file_uri));
    }
    return obj;
}

QList<OAIApplianceArtifact> OAIApplianceDefinitionProperties::getArtifacts() const {
    return m_artifacts;
}
void OAIApplianceDefinitionProperties::setArtifacts(const QList<OAIApplianceArtifact> &artifacts) {
    m_artifacts = artifacts;
    m_artifacts_isSet = true;
}

bool OAIApplianceDefinitionProperties::is_artifacts_Set() const{
    return m_artifacts_isSet;
}

bool OAIApplianceDefinitionProperties::is_artifacts_Valid() const{
    return m_artifacts_isValid;
}

QList<OAIApplianceProviderAuthorization> OAIApplianceDefinitionProperties::getAuthorizations() const {
    return m_authorizations;
}
void OAIApplianceDefinitionProperties::setAuthorizations(const QList<OAIApplianceProviderAuthorization> &authorizations) {
    m_authorizations = authorizations;
    m_authorizations_isSet = true;
}

bool OAIApplianceDefinitionProperties::is_authorizations_Set() const{
    return m_authorizations_isSet;
}

bool OAIApplianceDefinitionProperties::is_authorizations_Valid() const{
    return m_authorizations_isValid;
}

QString OAIApplianceDefinitionProperties::getDescription() const {
    return m_description;
}
void OAIApplianceDefinitionProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApplianceDefinitionProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApplianceDefinitionProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIApplianceDefinitionProperties::getDisplayName() const {
    return m_display_name;
}
void OAIApplianceDefinitionProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIApplianceDefinitionProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIApplianceDefinitionProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIApplianceLockLevel OAIApplianceDefinitionProperties::getLockLevel() const {
    return m_lock_level;
}
void OAIApplianceDefinitionProperties::setLockLevel(const OAIApplianceLockLevel &lock_level) {
    m_lock_level = lock_level;
    m_lock_level_isSet = true;
}

bool OAIApplianceDefinitionProperties::is_lock_level_Set() const{
    return m_lock_level_isSet;
}

bool OAIApplianceDefinitionProperties::is_lock_level_Valid() const{
    return m_lock_level_isValid;
}

QString OAIApplianceDefinitionProperties::getPackageFileUri() const {
    return m_package_file_uri;
}
void OAIApplianceDefinitionProperties::setPackageFileUri(const QString &package_file_uri) {
    m_package_file_uri = package_file_uri;
    m_package_file_uri_isSet = true;
}

bool OAIApplianceDefinitionProperties::is_package_file_uri_Set() const{
    return m_package_file_uri_isSet;
}

bool OAIApplianceDefinitionProperties::is_package_file_uri_Valid() const{
    return m_package_file_uri_isValid;
}

bool OAIApplianceDefinitionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifacts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorizations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_file_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplianceDefinitionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authorizations_isValid && m_lock_level_isValid && m_package_file_uri_isValid && true;
}

} // namespace OpenAPI
