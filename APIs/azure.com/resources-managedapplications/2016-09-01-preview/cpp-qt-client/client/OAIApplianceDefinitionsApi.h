/**
 * ManagedApplicationClient
 * ARM managed applications (appliances)
 *
 * The version of the OpenAPI document: 2016-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApplianceDefinitionsApi_H
#define OAI_OAIApplianceDefinitionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplianceDefinition.h"
#include "OAIApplianceDefinitionListResult.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApplianceDefinitionsApi : public QObject {
    Q_OBJECT

public:
    OAIApplianceDefinitionsApi(const int timeOut = 0);
    ~OAIApplianceDefinitionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  appliance_definition_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApplianceDefinition [required]
    */
    virtual void applianceDefinitionsCreateOrUpdate(const QString &resource_group_name, const QString &appliance_definition_name, const QString &api_version, const QString &subscription_id, const OAIApplianceDefinition &parameters);

    /**
    * @param[in]  appliance_definition_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIApplianceDefinition [required]
    */
    virtual void applianceDefinitionsCreateOrUpdateById(const QString &appliance_definition_id, const QString &api_version, const OAIApplianceDefinition &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  appliance_definition_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void applianceDefinitionsDelete(const QString &resource_group_name, const QString &appliance_definition_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  appliance_definition_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void applianceDefinitionsDeleteById(const QString &appliance_definition_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  appliance_definition_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void applianceDefinitionsGet(const QString &resource_group_name, const QString &appliance_definition_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  appliance_definition_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void applianceDefinitionsGetById(const QString &appliance_definition_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void applianceDefinitionsListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void applianceDefinitionsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void applianceDefinitionsCreateOrUpdateByIdCallback(OAIHttpRequestWorker *worker);
    void applianceDefinitionsDeleteCallback(OAIHttpRequestWorker *worker);
    void applianceDefinitionsDeleteByIdCallback(OAIHttpRequestWorker *worker);
    void applianceDefinitionsGetCallback(OAIHttpRequestWorker *worker);
    void applianceDefinitionsGetByIdCallback(OAIHttpRequestWorker *worker);
    void applianceDefinitionsListByResourceGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void applianceDefinitionsCreateOrUpdateSignal(OAIApplianceDefinition summary);
    void applianceDefinitionsCreateOrUpdateByIdSignal(OAIApplianceDefinition summary);
    void applianceDefinitionsDeleteSignal();
    void applianceDefinitionsDeleteByIdSignal();
    void applianceDefinitionsGetSignal(OAIApplianceDefinition summary);
    void applianceDefinitionsGetByIdSignal(OAIApplianceDefinition summary);
    void applianceDefinitionsListByResourceGroupSignal(OAIApplianceDefinitionListResult summary);


    void applianceDefinitionsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIApplianceDefinition summary);
    void applianceDefinitionsCreateOrUpdateByIdSignalFull(OAIHttpRequestWorker *worker, OAIApplianceDefinition summary);
    void applianceDefinitionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void applianceDefinitionsDeleteByIdSignalFull(OAIHttpRequestWorker *worker);
    void applianceDefinitionsGetSignalFull(OAIHttpRequestWorker *worker, OAIApplianceDefinition summary);
    void applianceDefinitionsGetByIdSignalFull(OAIHttpRequestWorker *worker, OAIApplianceDefinition summary);
    void applianceDefinitionsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIApplianceDefinitionListResult summary);

    Q_DECL_DEPRECATED_X("Use applianceDefinitionsCreateOrUpdateSignalError() instead")
    void applianceDefinitionsCreateOrUpdateSignalE(OAIApplianceDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applianceDefinitionsCreateOrUpdateSignalError(OAIApplianceDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applianceDefinitionsCreateOrUpdateByIdSignalError() instead")
    void applianceDefinitionsCreateOrUpdateByIdSignalE(OAIApplianceDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applianceDefinitionsCreateOrUpdateByIdSignalError(OAIApplianceDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applianceDefinitionsDeleteSignalError() instead")
    void applianceDefinitionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void applianceDefinitionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applianceDefinitionsDeleteByIdSignalError() instead")
    void applianceDefinitionsDeleteByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void applianceDefinitionsDeleteByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applianceDefinitionsGetSignalError() instead")
    void applianceDefinitionsGetSignalE(OAIApplianceDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applianceDefinitionsGetSignalError(OAIApplianceDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applianceDefinitionsGetByIdSignalError() instead")
    void applianceDefinitionsGetByIdSignalE(OAIApplianceDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applianceDefinitionsGetByIdSignalError(OAIApplianceDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applianceDefinitionsListByResourceGroupSignalError() instead")
    void applianceDefinitionsListByResourceGroupSignalE(OAIApplianceDefinitionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applianceDefinitionsListByResourceGroupSignalError(OAIApplianceDefinitionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use applianceDefinitionsCreateOrUpdateSignalErrorFull() instead")
    void applianceDefinitionsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applianceDefinitionsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applianceDefinitionsCreateOrUpdateByIdSignalErrorFull() instead")
    void applianceDefinitionsCreateOrUpdateByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applianceDefinitionsCreateOrUpdateByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applianceDefinitionsDeleteSignalErrorFull() instead")
    void applianceDefinitionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applianceDefinitionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applianceDefinitionsDeleteByIdSignalErrorFull() instead")
    void applianceDefinitionsDeleteByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applianceDefinitionsDeleteByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applianceDefinitionsGetSignalErrorFull() instead")
    void applianceDefinitionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applianceDefinitionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applianceDefinitionsGetByIdSignalErrorFull() instead")
    void applianceDefinitionsGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applianceDefinitionsGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applianceDefinitionsListByResourceGroupSignalErrorFull() instead")
    void applianceDefinitionsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applianceDefinitionsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
