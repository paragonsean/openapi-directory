/**
 * ManagedApplicationClient
 * ARM managed applications (appliances)
 *
 * The version of the OpenAPI document: 2016-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAppliancesApi_H
#define OAI_OAIAppliancesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppliance.h"
#include "OAIApplianceListResult.h"
#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAppliancesApi : public QObject {
    Q_OBJECT

public:
    OAIAppliancesApi(const int timeOut = 0);
    ~OAIAppliancesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  appliance_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIAppliance [required]
    */
    virtual void appliancesCreateOrUpdate(const QString &resource_group_name, const QString &appliance_name, const QString &api_version, const QString &subscription_id, const OAIAppliance &parameters);

    /**
    * @param[in]  appliance_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIAppliance [required]
    */
    virtual void appliancesCreateOrUpdateById(const QString &appliance_id, const QString &api_version, const OAIAppliance &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  appliance_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void appliancesDelete(const QString &resource_group_name, const QString &appliance_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  appliance_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appliancesDeleteById(const QString &appliance_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  appliance_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void appliancesGet(const QString &resource_group_name, const QString &appliance_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  appliance_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void appliancesGetById(const QString &appliance_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void appliancesListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void appliancesListBySubscription(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  appliance_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIAppliance [optional]
    */
    virtual void appliancesUpdate(const QString &resource_group_name, const QString &appliance_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<OAIAppliance> &parameters = ::OpenAPI::OptionalParam<OAIAppliance>());

    /**
    * @param[in]  appliance_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIAppliance [optional]
    */
    virtual void appliancesUpdateById(const QString &appliance_id, const QString &api_version, const ::OpenAPI::OptionalParam<OAIAppliance> &parameters = ::OpenAPI::OptionalParam<OAIAppliance>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void appliancesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void appliancesCreateOrUpdateByIdCallback(OAIHttpRequestWorker *worker);
    void appliancesDeleteCallback(OAIHttpRequestWorker *worker);
    void appliancesDeleteByIdCallback(OAIHttpRequestWorker *worker);
    void appliancesGetCallback(OAIHttpRequestWorker *worker);
    void appliancesGetByIdCallback(OAIHttpRequestWorker *worker);
    void appliancesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void appliancesListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void appliancesUpdateCallback(OAIHttpRequestWorker *worker);
    void appliancesUpdateByIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void appliancesCreateOrUpdateSignal(OAIAppliance summary);
    void appliancesCreateOrUpdateByIdSignal(OAIAppliance summary);
    void appliancesDeleteSignal();
    void appliancesDeleteByIdSignal();
    void appliancesGetSignal(OAIAppliance summary);
    void appliancesGetByIdSignal(OAIAppliance summary);
    void appliancesListByResourceGroupSignal(OAIApplianceListResult summary);
    void appliancesListBySubscriptionSignal(OAIApplianceListResult summary);
    void appliancesUpdateSignal(OAIAppliance summary);
    void appliancesUpdateByIdSignal(OAIAppliance summary);


    void appliancesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAppliance summary);
    void appliancesCreateOrUpdateByIdSignalFull(OAIHttpRequestWorker *worker, OAIAppliance summary);
    void appliancesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void appliancesDeleteByIdSignalFull(OAIHttpRequestWorker *worker);
    void appliancesGetSignalFull(OAIHttpRequestWorker *worker, OAIAppliance summary);
    void appliancesGetByIdSignalFull(OAIHttpRequestWorker *worker, OAIAppliance summary);
    void appliancesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIApplianceListResult summary);
    void appliancesListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIApplianceListResult summary);
    void appliancesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAppliance summary);
    void appliancesUpdateByIdSignalFull(OAIHttpRequestWorker *worker, OAIAppliance summary);

    Q_DECL_DEPRECATED_X("Use appliancesCreateOrUpdateSignalError() instead")
    void appliancesCreateOrUpdateSignalE(OAIAppliance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appliancesCreateOrUpdateSignalError(OAIAppliance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appliancesCreateOrUpdateByIdSignalError() instead")
    void appliancesCreateOrUpdateByIdSignalE(OAIAppliance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appliancesCreateOrUpdateByIdSignalError(OAIAppliance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appliancesDeleteSignalError() instead")
    void appliancesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appliancesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appliancesDeleteByIdSignalError() instead")
    void appliancesDeleteByIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void appliancesDeleteByIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appliancesGetSignalError() instead")
    void appliancesGetSignalE(OAIAppliance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appliancesGetSignalError(OAIAppliance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appliancesGetByIdSignalError() instead")
    void appliancesGetByIdSignalE(OAIAppliance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appliancesGetByIdSignalError(OAIAppliance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appliancesListByResourceGroupSignalError() instead")
    void appliancesListByResourceGroupSignalE(OAIApplianceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appliancesListByResourceGroupSignalError(OAIApplianceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appliancesListBySubscriptionSignalError() instead")
    void appliancesListBySubscriptionSignalE(OAIApplianceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appliancesListBySubscriptionSignalError(OAIApplianceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appliancesUpdateSignalError() instead")
    void appliancesUpdateSignalE(OAIAppliance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appliancesUpdateSignalError(OAIAppliance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appliancesUpdateByIdSignalError() instead")
    void appliancesUpdateByIdSignalE(OAIAppliance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appliancesUpdateByIdSignalError(OAIAppliance summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use appliancesCreateOrUpdateSignalErrorFull() instead")
    void appliancesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appliancesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appliancesCreateOrUpdateByIdSignalErrorFull() instead")
    void appliancesCreateOrUpdateByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appliancesCreateOrUpdateByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appliancesDeleteSignalErrorFull() instead")
    void appliancesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appliancesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appliancesDeleteByIdSignalErrorFull() instead")
    void appliancesDeleteByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appliancesDeleteByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appliancesGetSignalErrorFull() instead")
    void appliancesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appliancesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appliancesGetByIdSignalErrorFull() instead")
    void appliancesGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appliancesGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appliancesListByResourceGroupSignalErrorFull() instead")
    void appliancesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appliancesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appliancesListBySubscriptionSignalErrorFull() instead")
    void appliancesListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appliancesListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appliancesUpdateSignalErrorFull() instead")
    void appliancesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appliancesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appliancesUpdateByIdSignalErrorFull() instead")
    void appliancesUpdateByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appliancesUpdateByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
