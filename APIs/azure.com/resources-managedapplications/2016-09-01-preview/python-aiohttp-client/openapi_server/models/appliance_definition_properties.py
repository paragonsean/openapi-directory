# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.appliance_artifact import ApplianceArtifact
from openapi_server.models.appliance_lock_level import ApplianceLockLevel
from openapi_server.models.appliance_provider_authorization import ApplianceProviderAuthorization
from openapi_server import util


class ApplianceDefinitionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifacts: List[ApplianceArtifact]=None, authorizations: List[ApplianceProviderAuthorization]=None, description: str=None, display_name: str=None, lock_level: ApplianceLockLevel=None, package_file_uri: str=None):
        """ApplianceDefinitionProperties - a model defined in OpenAPI

        :param artifacts: The artifacts of this ApplianceDefinitionProperties.
        :param authorizations: The authorizations of this ApplianceDefinitionProperties.
        :param description: The description of this ApplianceDefinitionProperties.
        :param display_name: The display_name of this ApplianceDefinitionProperties.
        :param lock_level: The lock_level of this ApplianceDefinitionProperties.
        :param package_file_uri: The package_file_uri of this ApplianceDefinitionProperties.
        """
        self.openapi_types = {
            'artifacts': List[ApplianceArtifact],
            'authorizations': List[ApplianceProviderAuthorization],
            'description': str,
            'display_name': str,
            'lock_level': ApplianceLockLevel,
            'package_file_uri': str
        }

        self.attribute_map = {
            'artifacts': 'artifacts',
            'authorizations': 'authorizations',
            'description': 'description',
            'display_name': 'displayName',
            'lock_level': 'lockLevel',
            'package_file_uri': 'packageFileUri'
        }

        self._artifacts = artifacts
        self._authorizations = authorizations
        self._description = description
        self._display_name = display_name
        self._lock_level = lock_level
        self._package_file_uri = package_file_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplianceDefinitionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplianceDefinitionProperties of this ApplianceDefinitionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifacts(self):
        """Gets the artifacts of this ApplianceDefinitionProperties.

        The collection of appliance artifacts. The portal will use the files specified as artifacts to construct the user experience of creating an appliance from an appliance definition.

        :return: The artifacts of this ApplianceDefinitionProperties.
        :rtype: List[ApplianceArtifact]
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this ApplianceDefinitionProperties.

        The collection of appliance artifacts. The portal will use the files specified as artifacts to construct the user experience of creating an appliance from an appliance definition.

        :param artifacts: The artifacts of this ApplianceDefinitionProperties.
        :type artifacts: List[ApplianceArtifact]
        """

        self._artifacts = artifacts

    @property
    def authorizations(self):
        """Gets the authorizations of this ApplianceDefinitionProperties.

        The appliance provider authorizations.

        :return: The authorizations of this ApplianceDefinitionProperties.
        :rtype: List[ApplianceProviderAuthorization]
        """
        return self._authorizations

    @authorizations.setter
    def authorizations(self, authorizations):
        """Sets the authorizations of this ApplianceDefinitionProperties.

        The appliance provider authorizations.

        :param authorizations: The authorizations of this ApplianceDefinitionProperties.
        :type authorizations: List[ApplianceProviderAuthorization]
        """
        if authorizations is None:
            raise ValueError("Invalid value for `authorizations`, must not be `None`")

        self._authorizations = authorizations

    @property
    def description(self):
        """Gets the description of this ApplianceDefinitionProperties.

        The appliance definition description.

        :return: The description of this ApplianceDefinitionProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApplianceDefinitionProperties.

        The appliance definition description.

        :param description: The description of this ApplianceDefinitionProperties.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this ApplianceDefinitionProperties.

        The appliance definition display name.

        :return: The display_name of this ApplianceDefinitionProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ApplianceDefinitionProperties.

        The appliance definition display name.

        :param display_name: The display_name of this ApplianceDefinitionProperties.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def lock_level(self):
        """Gets the lock_level of this ApplianceDefinitionProperties.


        :return: The lock_level of this ApplianceDefinitionProperties.
        :rtype: ApplianceLockLevel
        """
        return self._lock_level

    @lock_level.setter
    def lock_level(self, lock_level):
        """Sets the lock_level of this ApplianceDefinitionProperties.


        :param lock_level: The lock_level of this ApplianceDefinitionProperties.
        :type lock_level: ApplianceLockLevel
        """
        if lock_level is None:
            raise ValueError("Invalid value for `lock_level`, must not be `None`")

        self._lock_level = lock_level

    @property
    def package_file_uri(self):
        """Gets the package_file_uri of this ApplianceDefinitionProperties.

        The appliance definition package file Uri.

        :return: The package_file_uri of this ApplianceDefinitionProperties.
        :rtype: str
        """
        return self._package_file_uri

    @package_file_uri.setter
    def package_file_uri(self, package_file_uri):
        """Sets the package_file_uri of this ApplianceDefinitionProperties.

        The appliance definition package file Uri.

        :param package_file_uri: The package_file_uri of this ApplianceDefinitionProperties.
        :type package_file_uri: str
        """
        if package_file_uri is None:
            raise ValueError("Invalid value for `package_file_uri`, must not be `None`")

        self._package_file_uri = package_file_uri
