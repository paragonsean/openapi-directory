/**
 * ManagedApplicationClient
 * ARM managed applications (appliances)
 *
 * The version of the OpenAPI document: 2016-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApplianceDefinition from '../model/ApplianceDefinition';
import ApplianceDefinitionListResult from '../model/ApplianceDefinitionListResult';
import ErrorResponse from '../model/ErrorResponse';

/**
* ApplianceDefinitions service.
* @module api/ApplianceDefinitionsApi
* @version 2016-09-01-preview
*/
export default class ApplianceDefinitionsApi {

    /**
    * Constructs a new ApplianceDefinitionsApi. 
    * @alias module:api/ApplianceDefinitionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the applianceDefinitionsCreateOrUpdate operation.
     * @callback module:api/ApplianceDefinitionsApi~applianceDefinitionsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplianceDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new appliance definition.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} applianceDefinitionName The name of the appliance definition.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/ApplianceDefinition} parameters Parameters supplied to the create or update an appliance definition.
     * @param {module:api/ApplianceDefinitionsApi~applianceDefinitionsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplianceDefinition}
     */
    applianceDefinitionsCreateOrUpdate(resourceGroupName, applianceDefinitionName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling applianceDefinitionsCreateOrUpdate");
      }
      // verify the required parameter 'applianceDefinitionName' is set
      if (applianceDefinitionName === undefined || applianceDefinitionName === null) {
        throw new Error("Missing the required parameter 'applianceDefinitionName' when calling applianceDefinitionsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applianceDefinitionsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling applianceDefinitionsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling applianceDefinitionsCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'applianceDefinitionName': applianceDefinitionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApplianceDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applianceDefinitions/{applianceDefinitionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applianceDefinitionsCreateOrUpdateById operation.
     * @callback module:api/ApplianceDefinitionsApi~applianceDefinitionsCreateOrUpdateByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplianceDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new appliance definition.
     * @param {String} applianceDefinitionId The fully qualified ID of the appliance definition, including the appliance name and the appliance definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name}
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:model/ApplianceDefinition} parameters Parameters supplied to the create or update an appliance definition.
     * @param {module:api/ApplianceDefinitionsApi~applianceDefinitionsCreateOrUpdateByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplianceDefinition}
     */
    applianceDefinitionsCreateOrUpdateById(applianceDefinitionId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'applianceDefinitionId' is set
      if (applianceDefinitionId === undefined || applianceDefinitionId === null) {
        throw new Error("Missing the required parameter 'applianceDefinitionId' when calling applianceDefinitionsCreateOrUpdateById");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applianceDefinitionsCreateOrUpdateById");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling applianceDefinitionsCreateOrUpdateById");
      }

      let pathParams = {
        'applianceDefinitionId': applianceDefinitionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApplianceDefinition;
      return this.apiClient.callApi(
        '/{applianceDefinitionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applianceDefinitionsDelete operation.
     * @callback module:api/ApplianceDefinitionsApi~applianceDefinitionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the appliance definition.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} applianceDefinitionName The name of the appliance definition to delete.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/ApplianceDefinitionsApi~applianceDefinitionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    applianceDefinitionsDelete(resourceGroupName, applianceDefinitionName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling applianceDefinitionsDelete");
      }
      // verify the required parameter 'applianceDefinitionName' is set
      if (applianceDefinitionName === undefined || applianceDefinitionName === null) {
        throw new Error("Missing the required parameter 'applianceDefinitionName' when calling applianceDefinitionsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applianceDefinitionsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling applianceDefinitionsDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'applianceDefinitionName': applianceDefinitionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applianceDefinitions/{applianceDefinitionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applianceDefinitionsDeleteById operation.
     * @callback module:api/ApplianceDefinitionsApi~applianceDefinitionsDeleteByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the appliance definition.
     * @param {String} applianceDefinitionId The fully qualified ID of the appliance definition, including the appliance name and the appliance definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name}
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/ApplianceDefinitionsApi~applianceDefinitionsDeleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    applianceDefinitionsDeleteById(applianceDefinitionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'applianceDefinitionId' is set
      if (applianceDefinitionId === undefined || applianceDefinitionId === null) {
        throw new Error("Missing the required parameter 'applianceDefinitionId' when calling applianceDefinitionsDeleteById");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applianceDefinitionsDeleteById");
      }

      let pathParams = {
        'applianceDefinitionId': applianceDefinitionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{applianceDefinitionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applianceDefinitionsGet operation.
     * @callback module:api/ApplianceDefinitionsApi~applianceDefinitionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplianceDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the appliance definition.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} applianceDefinitionName The name of the appliance definition.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/ApplianceDefinitionsApi~applianceDefinitionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplianceDefinition}
     */
    applianceDefinitionsGet(resourceGroupName, applianceDefinitionName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling applianceDefinitionsGet");
      }
      // verify the required parameter 'applianceDefinitionName' is set
      if (applianceDefinitionName === undefined || applianceDefinitionName === null) {
        throw new Error("Missing the required parameter 'applianceDefinitionName' when calling applianceDefinitionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applianceDefinitionsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling applianceDefinitionsGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'applianceDefinitionName': applianceDefinitionName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplianceDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applianceDefinitions/{applianceDefinitionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applianceDefinitionsGetById operation.
     * @callback module:api/ApplianceDefinitionsApi~applianceDefinitionsGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplianceDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the appliance definition.
     * @param {String} applianceDefinitionId The fully qualified ID of the appliance definition, including the appliance name and the appliance definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name}
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/ApplianceDefinitionsApi~applianceDefinitionsGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplianceDefinition}
     */
    applianceDefinitionsGetById(applianceDefinitionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'applianceDefinitionId' is set
      if (applianceDefinitionId === undefined || applianceDefinitionId === null) {
        throw new Error("Missing the required parameter 'applianceDefinitionId' when calling applianceDefinitionsGetById");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applianceDefinitionsGetById");
      }

      let pathParams = {
        'applianceDefinitionId': applianceDefinitionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplianceDefinition;
      return this.apiClient.callApi(
        '/{applianceDefinitionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applianceDefinitionsListByResourceGroup operation.
     * @callback module:api/ApplianceDefinitionsApi~applianceDefinitionsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplianceDefinitionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the appliance definitions in a resource group.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/ApplianceDefinitionsApi~applianceDefinitionsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplianceDefinitionListResult}
     */
    applianceDefinitionsListByResourceGroup(resourceGroupName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling applianceDefinitionsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling applianceDefinitionsListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling applianceDefinitionsListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplianceDefinitionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applianceDefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
