/**
 * ManagedApplicationClient
 * ARM managed applications (appliances)
 *
 * The version of the OpenAPI document: 2016-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Appliance from '../model/Appliance';
import ApplianceListResult from '../model/ApplianceListResult';
import ErrorResponse from '../model/ErrorResponse';

/**
* Appliances service.
* @module api/AppliancesApi
* @version 2016-09-01-preview
*/
export default class AppliancesApi {

    /**
    * Constructs a new AppliancesApi. 
    * @alias module:api/AppliancesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the appliancesCreateOrUpdate operation.
     * @callback module:api/AppliancesApi~appliancesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Appliance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new appliance.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} applianceName The name of the appliance.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/Appliance} parameters Parameters supplied to the create or update an appliance.
     * @param {module:api/AppliancesApi~appliancesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Appliance}
     */
    appliancesCreateOrUpdate(resourceGroupName, applianceName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appliancesCreateOrUpdate");
      }
      // verify the required parameter 'applianceName' is set
      if (applianceName === undefined || applianceName === null) {
        throw new Error("Missing the required parameter 'applianceName' when calling appliancesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appliancesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appliancesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling appliancesCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'applianceName': applianceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Appliance;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/appliances/{applianceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appliancesCreateOrUpdateById operation.
     * @callback module:api/AppliancesApi~appliancesCreateOrUpdateByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Appliance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new appliance.
     * @param {String} applianceId The fully qualified ID of the appliance, including the appliance name and the appliance resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:model/Appliance} parameters Parameters supplied to the create or update an appliance.
     * @param {module:api/AppliancesApi~appliancesCreateOrUpdateByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Appliance}
     */
    appliancesCreateOrUpdateById(applianceId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'applianceId' is set
      if (applianceId === undefined || applianceId === null) {
        throw new Error("Missing the required parameter 'applianceId' when calling appliancesCreateOrUpdateById");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appliancesCreateOrUpdateById");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling appliancesCreateOrUpdateById");
      }

      let pathParams = {
        'applianceId': applianceId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Appliance;
      return this.apiClient.callApi(
        '/{applianceId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appliancesDelete operation.
     * @callback module:api/AppliancesApi~appliancesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the appliance.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} applianceName The name of the appliance.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/AppliancesApi~appliancesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appliancesDelete(resourceGroupName, applianceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appliancesDelete");
      }
      // verify the required parameter 'applianceName' is set
      if (applianceName === undefined || applianceName === null) {
        throw new Error("Missing the required parameter 'applianceName' when calling appliancesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appliancesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appliancesDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'applianceName': applianceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/appliances/{applianceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appliancesDeleteById operation.
     * @callback module:api/AppliancesApi~appliancesDeleteByIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the appliance.
     * @param {String} applianceId The fully qualified ID of the appliance, including the appliance name and the appliance resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/AppliancesApi~appliancesDeleteByIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    appliancesDeleteById(applianceId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'applianceId' is set
      if (applianceId === undefined || applianceId === null) {
        throw new Error("Missing the required parameter 'applianceId' when calling appliancesDeleteById");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appliancesDeleteById");
      }

      let pathParams = {
        'applianceId': applianceId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{applianceId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appliancesGet operation.
     * @callback module:api/AppliancesApi~appliancesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Appliance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the appliance.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} applianceName The name of the appliance.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/AppliancesApi~appliancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Appliance}
     */
    appliancesGet(resourceGroupName, applianceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appliancesGet");
      }
      // verify the required parameter 'applianceName' is set
      if (applianceName === undefined || applianceName === null) {
        throw new Error("Missing the required parameter 'applianceName' when calling appliancesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appliancesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appliancesGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'applianceName': applianceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Appliance;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/appliances/{applianceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appliancesGetById operation.
     * @callback module:api/AppliancesApi~appliancesGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Appliance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the appliance.
     * @param {String} applianceId The fully qualified ID of the appliance, including the appliance name and the appliance resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
     * @param {String} apiVersion The API version to use for this operation.
     * @param {module:api/AppliancesApi~appliancesGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Appliance}
     */
    appliancesGetById(applianceId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'applianceId' is set
      if (applianceId === undefined || applianceId === null) {
        throw new Error("Missing the required parameter 'applianceId' when calling appliancesGetById");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appliancesGetById");
      }

      let pathParams = {
        'applianceId': applianceId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Appliance;
      return this.apiClient.callApi(
        '/{applianceId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appliancesListByResourceGroup operation.
     * @callback module:api/AppliancesApi~appliancesListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplianceListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the appliances within a resource group.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/AppliancesApi~appliancesListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplianceListResult}
     */
    appliancesListByResourceGroup(resourceGroupName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appliancesListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appliancesListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appliancesListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplianceListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/appliances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appliancesListBySubscription operation.
     * @callback module:api/AppliancesApi~appliancesListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplianceListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the appliances within a subscription.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:api/AppliancesApi~appliancesListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplianceListResult}
     */
    appliancesListBySubscription(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appliancesListBySubscription");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appliancesListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApplianceListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Solutions/appliances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appliancesUpdate operation.
     * @callback module:api/AppliancesApi~appliancesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Appliance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing appliance. The only value that can be updated via PATCH currently is the tags.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} applianceName The name of the appliance.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {Object} opts Optional parameters
     * @param {module:model/Appliance} [parameters] Parameters supplied to update an existing appliance.
     * @param {module:api/AppliancesApi~appliancesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Appliance}
     */
    appliancesUpdate(resourceGroupName, applianceName, apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['parameters'];
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling appliancesUpdate");
      }
      // verify the required parameter 'applianceName' is set
      if (applianceName === undefined || applianceName === null) {
        throw new Error("Missing the required parameter 'applianceName' when calling appliancesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appliancesUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling appliancesUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'applianceName': applianceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Appliance;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/appliances/{applianceName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appliancesUpdateById operation.
     * @callback module:api/AppliancesApi~appliancesUpdateByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Appliance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing appliance. The only value that can be updated via PATCH currently is the tags.
     * @param {String} applianceId The fully qualified ID of the appliance, including the appliance name and the appliance resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
     * @param {String} apiVersion The API version to use for this operation.
     * @param {Object} opts Optional parameters
     * @param {module:model/Appliance} [parameters] Parameters supplied to update an existing appliance.
     * @param {module:api/AppliancesApi~appliancesUpdateByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Appliance}
     */
    appliancesUpdateById(applianceId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = opts['parameters'];
      // verify the required parameter 'applianceId' is set
      if (applianceId === undefined || applianceId === null) {
        throw new Error("Missing the required parameter 'applianceId' when calling appliancesUpdateById");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling appliancesUpdateById");
      }

      let pathParams = {
        'applianceId': applianceId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Appliance;
      return this.apiClient.callApi(
        '/{applianceId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
