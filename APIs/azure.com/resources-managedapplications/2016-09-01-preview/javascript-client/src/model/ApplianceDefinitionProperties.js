/**
 * ManagedApplicationClient
 * ARM managed applications (appliances)
 *
 * The version of the OpenAPI document: 2016-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplianceArtifact from './ApplianceArtifact';
import ApplianceLockLevel from './ApplianceLockLevel';
import ApplianceProviderAuthorization from './ApplianceProviderAuthorization';

/**
 * The ApplianceDefinitionProperties model module.
 * @module model/ApplianceDefinitionProperties
 * @version 2016-09-01-preview
 */
class ApplianceDefinitionProperties {
    /**
     * Constructs a new <code>ApplianceDefinitionProperties</code>.
     * The appliance definition properties.
     * @alias module:model/ApplianceDefinitionProperties
     * @param authorizations {Array.<module:model/ApplianceProviderAuthorization>} The appliance provider authorizations.
     * @param lockLevel {module:model/ApplianceLockLevel} 
     * @param packageFileUri {String} The appliance definition package file Uri.
     */
    constructor(authorizations, lockLevel, packageFileUri) { 
        
        ApplianceDefinitionProperties.initialize(this, authorizations, lockLevel, packageFileUri);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authorizations, lockLevel, packageFileUri) { 
        obj['authorizations'] = authorizations;
        obj['lockLevel'] = lockLevel;
        obj['packageFileUri'] = packageFileUri;
    }

    /**
     * Constructs a <code>ApplianceDefinitionProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplianceDefinitionProperties} obj Optional instance to populate.
     * @return {module:model/ApplianceDefinitionProperties} The populated <code>ApplianceDefinitionProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplianceDefinitionProperties();

            if (data.hasOwnProperty('artifacts')) {
                obj['artifacts'] = ApiClient.convertToType(data['artifacts'], [ApplianceArtifact]);
            }
            if (data.hasOwnProperty('authorizations')) {
                obj['authorizations'] = ApiClient.convertToType(data['authorizations'], [ApplianceProviderAuthorization]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('lockLevel')) {
                obj['lockLevel'] = ApplianceLockLevel.constructFromObject(data['lockLevel']);
            }
            if (data.hasOwnProperty('packageFileUri')) {
                obj['packageFileUri'] = ApiClient.convertToType(data['packageFileUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplianceDefinitionProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplianceDefinitionProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApplianceDefinitionProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['artifacts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['artifacts'])) {
                throw new Error("Expected the field `artifacts` to be an array in the JSON data but got " + data['artifacts']);
            }
            // validate the optional field `artifacts` (array)
            for (const item of data['artifacts']) {
                ApplianceArtifact.validateJSON(item);
            };
        }
        if (data['authorizations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authorizations'])) {
                throw new Error("Expected the field `authorizations` to be an array in the JSON data but got " + data['authorizations']);
            }
            // validate the optional field `authorizations` (array)
            for (const item of data['authorizations']) {
                ApplianceProviderAuthorization.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['packageFileUri'] && !(typeof data['packageFileUri'] === 'string' || data['packageFileUri'] instanceof String)) {
            throw new Error("Expected the field `packageFileUri` to be a primitive type in the JSON string but got " + data['packageFileUri']);
        }

        return true;
    }


}

ApplianceDefinitionProperties.RequiredProperties = ["authorizations", "lockLevel", "packageFileUri"];

/**
 * The collection of appliance artifacts. The portal will use the files specified as artifacts to construct the user experience of creating an appliance from an appliance definition.
 * @member {Array.<module:model/ApplianceArtifact>} artifacts
 */
ApplianceDefinitionProperties.prototype['artifacts'] = undefined;

/**
 * The appliance provider authorizations.
 * @member {Array.<module:model/ApplianceProviderAuthorization>} authorizations
 */
ApplianceDefinitionProperties.prototype['authorizations'] = undefined;

/**
 * The appliance definition description.
 * @member {String} description
 */
ApplianceDefinitionProperties.prototype['description'] = undefined;

/**
 * The appliance definition display name.
 * @member {String} displayName
 */
ApplianceDefinitionProperties.prototype['displayName'] = undefined;

/**
 * @member {module:model/ApplianceLockLevel} lockLevel
 */
ApplianceDefinitionProperties.prototype['lockLevel'] = undefined;

/**
 * The appliance definition package file Uri.
 * @member {String} packageFileUri
 */
ApplianceDefinitionProperties.prototype['packageFileUri'] = undefined;






export default ApplianceDefinitionProperties;

