/**
 * ManagedApplicationClient
 * ARM managed applications (appliances)
 *
 * The version of the OpenAPI document: 2016-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApplianceProviderAuthorization model module.
 * @module model/ApplianceProviderAuthorization
 * @version 2016-09-01-preview
 */
class ApplianceProviderAuthorization {
    /**
     * Constructs a new <code>ApplianceProviderAuthorization</code>.
     * The appliance provider authorization.
     * @alias module:model/ApplianceProviderAuthorization
     * @param principalId {String} The provider's principal identifier. This is the identity that the provider will use to call ARM to manage the appliance resources.
     * @param roleDefinitionId {String} The provider's role definition identifier. This role will define all the permissions that the provider must have on the appliance's container resource group. This role definition cannot have permission to delete the resource group.
     */
    constructor(principalId, roleDefinitionId) { 
        
        ApplianceProviderAuthorization.initialize(this, principalId, roleDefinitionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, principalId, roleDefinitionId) { 
        obj['principalId'] = principalId;
        obj['roleDefinitionId'] = roleDefinitionId;
    }

    /**
     * Constructs a <code>ApplianceProviderAuthorization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplianceProviderAuthorization} obj Optional instance to populate.
     * @return {module:model/ApplianceProviderAuthorization} The populated <code>ApplianceProviderAuthorization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplianceProviderAuthorization();

            if (data.hasOwnProperty('principalId')) {
                obj['principalId'] = ApiClient.convertToType(data['principalId'], 'String');
            }
            if (data.hasOwnProperty('roleDefinitionId')) {
                obj['roleDefinitionId'] = ApiClient.convertToType(data['roleDefinitionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplianceProviderAuthorization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplianceProviderAuthorization</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApplianceProviderAuthorization.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['principalId'] && !(typeof data['principalId'] === 'string' || data['principalId'] instanceof String)) {
            throw new Error("Expected the field `principalId` to be a primitive type in the JSON string but got " + data['principalId']);
        }
        // ensure the json data is a string
        if (data['roleDefinitionId'] && !(typeof data['roleDefinitionId'] === 'string' || data['roleDefinitionId'] instanceof String)) {
            throw new Error("Expected the field `roleDefinitionId` to be a primitive type in the JSON string but got " + data['roleDefinitionId']);
        }

        return true;
    }


}

ApplianceProviderAuthorization.RequiredProperties = ["principalId", "roleDefinitionId"];

/**
 * The provider's principal identifier. This is the identity that the provider will use to call ARM to manage the appliance resources.
 * @member {String} principalId
 */
ApplianceProviderAuthorization.prototype['principalId'] = undefined;

/**
 * The provider's role definition identifier. This role will define all the permissions that the provider must have on the appliance's container resource group. This role definition cannot have permission to delete the resource group.
 * @member {String} roleDefinitionId
 */
ApplianceProviderAuthorization.prototype['roleDefinitionId'] = undefined;






export default ApplianceProviderAuthorization;

