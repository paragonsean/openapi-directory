/*
 * ManagedApplicationClient
 * ARM managed applications (appliances)
 *
 * The version of the OpenAPI document: 2016-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApplianceDefinition;
import org.openapitools.client.model.ApplianceDefinitionListResult;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApplianceDefinitionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApplianceDefinitionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApplianceDefinitionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for applianceDefinitionsCreateOrUpdate
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param applianceDefinitionName The name of the appliance definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters supplied to the create or update an appliance definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the appliance definition, including provisioning status. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the appliance definition, including provisioning status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applianceDefinitionsCreateOrUpdateCall(String resourceGroupName, String applianceDefinitionName, String apiVersion, String subscriptionId, ApplianceDefinition parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applianceDefinitions/{applianceDefinitionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "applianceDefinitionName" + "}", localVarApiClient.escapeString(applianceDefinitionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applianceDefinitionsCreateOrUpdateValidateBeforeCall(String resourceGroupName, String applianceDefinitionName, String apiVersion, String subscriptionId, ApplianceDefinition parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling applianceDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'applianceDefinitionName' is set
        if (applianceDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'applianceDefinitionName' when calling applianceDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applianceDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling applianceDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling applianceDefinitionsCreateOrUpdate(Async)");
        }

        return applianceDefinitionsCreateOrUpdateCall(resourceGroupName, applianceDefinitionName, apiVersion, subscriptionId, parameters, _callback);

    }

    /**
     * 
     * Creates a new appliance definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param applianceDefinitionName The name of the appliance definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters supplied to the create or update an appliance definition. (required)
     * @return ApplianceDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the appliance definition, including provisioning status. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the appliance definition, including provisioning status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApplianceDefinition applianceDefinitionsCreateOrUpdate(String resourceGroupName, String applianceDefinitionName, String apiVersion, String subscriptionId, ApplianceDefinition parameters) throws ApiException {
        ApiResponse<ApplianceDefinition> localVarResp = applianceDefinitionsCreateOrUpdateWithHttpInfo(resourceGroupName, applianceDefinitionName, apiVersion, subscriptionId, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new appliance definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param applianceDefinitionName The name of the appliance definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters supplied to the create or update an appliance definition. (required)
     * @return ApiResponse&lt;ApplianceDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the appliance definition, including provisioning status. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the appliance definition, including provisioning status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplianceDefinition> applianceDefinitionsCreateOrUpdateWithHttpInfo(String resourceGroupName, String applianceDefinitionName, String apiVersion, String subscriptionId, ApplianceDefinition parameters) throws ApiException {
        okhttp3.Call localVarCall = applianceDefinitionsCreateOrUpdateValidateBeforeCall(resourceGroupName, applianceDefinitionName, apiVersion, subscriptionId, parameters, null);
        Type localVarReturnType = new TypeToken<ApplianceDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new appliance definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param applianceDefinitionName The name of the appliance definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param parameters Parameters supplied to the create or update an appliance definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the appliance definition, including provisioning status. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the appliance definition, including provisioning status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applianceDefinitionsCreateOrUpdateAsync(String resourceGroupName, String applianceDefinitionName, String apiVersion, String subscriptionId, ApplianceDefinition parameters, final ApiCallback<ApplianceDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = applianceDefinitionsCreateOrUpdateValidateBeforeCall(resourceGroupName, applianceDefinitionName, apiVersion, subscriptionId, parameters, _callback);
        Type localVarReturnType = new TypeToken<ApplianceDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applianceDefinitionsCreateOrUpdateById
     * @param applianceDefinitionId The fully qualified ID of the appliance definition, including the appliance name and the appliance definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name} (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param parameters Parameters supplied to the create or update an appliance definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the appliance definition, including provisioning status. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the appliance definition, including provisioning status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applianceDefinitionsCreateOrUpdateByIdCall(String applianceDefinitionId, String apiVersion, ApplianceDefinition parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/{applianceDefinitionId}"
            .replace("{" + "applianceDefinitionId" + "}", localVarApiClient.escapeString(applianceDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applianceDefinitionsCreateOrUpdateByIdValidateBeforeCall(String applianceDefinitionId, String apiVersion, ApplianceDefinition parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applianceDefinitionId' is set
        if (applianceDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'applianceDefinitionId' when calling applianceDefinitionsCreateOrUpdateById(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applianceDefinitionsCreateOrUpdateById(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling applianceDefinitionsCreateOrUpdateById(Async)");
        }

        return applianceDefinitionsCreateOrUpdateByIdCall(applianceDefinitionId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates a new appliance definition.
     * @param applianceDefinitionId The fully qualified ID of the appliance definition, including the appliance name and the appliance definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name} (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param parameters Parameters supplied to the create or update an appliance definition. (required)
     * @return ApplianceDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the appliance definition, including provisioning status. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the appliance definition, including provisioning status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApplianceDefinition applianceDefinitionsCreateOrUpdateById(String applianceDefinitionId, String apiVersion, ApplianceDefinition parameters) throws ApiException {
        ApiResponse<ApplianceDefinition> localVarResp = applianceDefinitionsCreateOrUpdateByIdWithHttpInfo(applianceDefinitionId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new appliance definition.
     * @param applianceDefinitionId The fully qualified ID of the appliance definition, including the appliance name and the appliance definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name} (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param parameters Parameters supplied to the create or update an appliance definition. (required)
     * @return ApiResponse&lt;ApplianceDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the appliance definition, including provisioning status. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the appliance definition, including provisioning status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplianceDefinition> applianceDefinitionsCreateOrUpdateByIdWithHttpInfo(String applianceDefinitionId, String apiVersion, ApplianceDefinition parameters) throws ApiException {
        okhttp3.Call localVarCall = applianceDefinitionsCreateOrUpdateByIdValidateBeforeCall(applianceDefinitionId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<ApplianceDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new appliance definition.
     * @param applianceDefinitionId The fully qualified ID of the appliance definition, including the appliance name and the appliance definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name} (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param parameters Parameters supplied to the create or update an appliance definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the appliance definition, including provisioning status. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created - Returns information about the appliance definition, including provisioning status. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applianceDefinitionsCreateOrUpdateByIdAsync(String applianceDefinitionId, String apiVersion, ApplianceDefinition parameters, final ApiCallback<ApplianceDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = applianceDefinitionsCreateOrUpdateByIdValidateBeforeCall(applianceDefinitionId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<ApplianceDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applianceDefinitionsDelete
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param applianceDefinitionName The name of the appliance definition to delete. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted - Returns this status until the asynchronous operation has completed. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applianceDefinitionsDeleteCall(String resourceGroupName, String applianceDefinitionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applianceDefinitions/{applianceDefinitionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "applianceDefinitionName" + "}", localVarApiClient.escapeString(applianceDefinitionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applianceDefinitionsDeleteValidateBeforeCall(String resourceGroupName, String applianceDefinitionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling applianceDefinitionsDelete(Async)");
        }

        // verify the required parameter 'applianceDefinitionName' is set
        if (applianceDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'applianceDefinitionName' when calling applianceDefinitionsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applianceDefinitionsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling applianceDefinitionsDelete(Async)");
        }

        return applianceDefinitionsDeleteCall(resourceGroupName, applianceDefinitionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the appliance definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param applianceDefinitionName The name of the appliance definition to delete. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted - Returns this status until the asynchronous operation has completed. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void applianceDefinitionsDelete(String resourceGroupName, String applianceDefinitionName, String apiVersion, String subscriptionId) throws ApiException {
        applianceDefinitionsDeleteWithHttpInfo(resourceGroupName, applianceDefinitionName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the appliance definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param applianceDefinitionName The name of the appliance definition to delete. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted - Returns this status until the asynchronous operation has completed. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> applianceDefinitionsDeleteWithHttpInfo(String resourceGroupName, String applianceDefinitionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = applianceDefinitionsDeleteValidateBeforeCall(resourceGroupName, applianceDefinitionName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the appliance definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param applianceDefinitionName The name of the appliance definition to delete. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted - Returns this status until the asynchronous operation has completed. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applianceDefinitionsDeleteAsync(String resourceGroupName, String applianceDefinitionName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = applianceDefinitionsDeleteValidateBeforeCall(resourceGroupName, applianceDefinitionName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for applianceDefinitionsDeleteById
     * @param applianceDefinitionId The fully qualified ID of the appliance definition, including the appliance name and the appliance definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name} (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted - Returns this status until the asynchronous operation has completed. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applianceDefinitionsDeleteByIdCall(String applianceDefinitionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{applianceDefinitionId}"
            .replace("{" + "applianceDefinitionId" + "}", localVarApiClient.escapeString(applianceDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applianceDefinitionsDeleteByIdValidateBeforeCall(String applianceDefinitionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applianceDefinitionId' is set
        if (applianceDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'applianceDefinitionId' when calling applianceDefinitionsDeleteById(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applianceDefinitionsDeleteById(Async)");
        }

        return applianceDefinitionsDeleteByIdCall(applianceDefinitionId, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the appliance definition.
     * @param applianceDefinitionId The fully qualified ID of the appliance definition, including the appliance name and the appliance definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name} (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted - Returns this status until the asynchronous operation has completed. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void applianceDefinitionsDeleteById(String applianceDefinitionId, String apiVersion) throws ApiException {
        applianceDefinitionsDeleteByIdWithHttpInfo(applianceDefinitionId, apiVersion);
    }

    /**
     * 
     * Deletes the appliance definition.
     * @param applianceDefinitionId The fully qualified ID of the appliance definition, including the appliance name and the appliance definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name} (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted - Returns this status until the asynchronous operation has completed. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> applianceDefinitionsDeleteByIdWithHttpInfo(String applianceDefinitionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = applianceDefinitionsDeleteByIdValidateBeforeCall(applianceDefinitionId, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the appliance definition.
     * @param applianceDefinitionId The fully qualified ID of the appliance definition, including the appliance name and the appliance definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name} (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted - Returns this status until the asynchronous operation has completed. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applianceDefinitionsDeleteByIdAsync(String applianceDefinitionId, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = applianceDefinitionsDeleteByIdValidateBeforeCall(applianceDefinitionId, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for applianceDefinitionsGet
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param applianceDefinitionName The name of the appliance definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the appliance definition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applianceDefinitionsGetCall(String resourceGroupName, String applianceDefinitionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applianceDefinitions/{applianceDefinitionName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "applianceDefinitionName" + "}", localVarApiClient.escapeString(applianceDefinitionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applianceDefinitionsGetValidateBeforeCall(String resourceGroupName, String applianceDefinitionName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling applianceDefinitionsGet(Async)");
        }

        // verify the required parameter 'applianceDefinitionName' is set
        if (applianceDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'applianceDefinitionName' when calling applianceDefinitionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applianceDefinitionsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling applianceDefinitionsGet(Async)");
        }

        return applianceDefinitionsGetCall(resourceGroupName, applianceDefinitionName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets the appliance definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param applianceDefinitionName The name of the appliance definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ApplianceDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the appliance definition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApplianceDefinition applianceDefinitionsGet(String resourceGroupName, String applianceDefinitionName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ApplianceDefinition> localVarResp = applianceDefinitionsGetWithHttpInfo(resourceGroupName, applianceDefinitionName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the appliance definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param applianceDefinitionName The name of the appliance definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ApiResponse&lt;ApplianceDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the appliance definition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplianceDefinition> applianceDefinitionsGetWithHttpInfo(String resourceGroupName, String applianceDefinitionName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = applianceDefinitionsGetValidateBeforeCall(resourceGroupName, applianceDefinitionName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ApplianceDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the appliance definition.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param applianceDefinitionName The name of the appliance definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the appliance definition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applianceDefinitionsGetAsync(String resourceGroupName, String applianceDefinitionName, String apiVersion, String subscriptionId, final ApiCallback<ApplianceDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = applianceDefinitionsGetValidateBeforeCall(resourceGroupName, applianceDefinitionName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ApplianceDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applianceDefinitionsGetById
     * @param applianceDefinitionId The fully qualified ID of the appliance definition, including the appliance name and the appliance definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name} (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the appliance definition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applianceDefinitionsGetByIdCall(String applianceDefinitionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{applianceDefinitionId}"
            .replace("{" + "applianceDefinitionId" + "}", localVarApiClient.escapeString(applianceDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applianceDefinitionsGetByIdValidateBeforeCall(String applianceDefinitionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'applianceDefinitionId' is set
        if (applianceDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'applianceDefinitionId' when calling applianceDefinitionsGetById(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applianceDefinitionsGetById(Async)");
        }

        return applianceDefinitionsGetByIdCall(applianceDefinitionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets the appliance definition.
     * @param applianceDefinitionId The fully qualified ID of the appliance definition, including the appliance name and the appliance definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name} (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return ApplianceDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the appliance definition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApplianceDefinition applianceDefinitionsGetById(String applianceDefinitionId, String apiVersion) throws ApiException {
        ApiResponse<ApplianceDefinition> localVarResp = applianceDefinitionsGetByIdWithHttpInfo(applianceDefinitionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the appliance definition.
     * @param applianceDefinitionId The fully qualified ID of the appliance definition, including the appliance name and the appliance definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name} (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return ApiResponse&lt;ApplianceDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the appliance definition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplianceDefinition> applianceDefinitionsGetByIdWithHttpInfo(String applianceDefinitionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = applianceDefinitionsGetByIdValidateBeforeCall(applianceDefinitionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ApplianceDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the appliance definition.
     * @param applianceDefinitionId The fully qualified ID of the appliance definition, including the appliance name and the appliance definition resource type. Use the format, /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/applianceDefinitions/{applianceDefinition-name} (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns the appliance definition. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applianceDefinitionsGetByIdAsync(String applianceDefinitionId, String apiVersion, final ApiCallback<ApplianceDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = applianceDefinitionsGetByIdValidateBeforeCall(applianceDefinitionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ApplianceDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applianceDefinitionsListByResourceGroup
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of appliance definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applianceDefinitionsListByResourceGroupCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Solutions/applianceDefinitions"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applianceDefinitionsListByResourceGroupValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling applianceDefinitionsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling applianceDefinitionsListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling applianceDefinitionsListByResourceGroup(Async)");
        }

        return applianceDefinitionsListByResourceGroupCall(resourceGroupName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Lists the appliance definitions in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ApplianceDefinitionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of appliance definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApplianceDefinitionListResult applianceDefinitionsListByResourceGroup(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<ApplianceDefinitionListResult> localVarResp = applianceDefinitionsListByResourceGroupWithHttpInfo(resourceGroupName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the appliance definitions in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @return ApiResponse&lt;ApplianceDefinitionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of appliance definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplianceDefinitionListResult> applianceDefinitionsListByResourceGroupWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = applianceDefinitionsListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<ApplianceDefinitionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the appliance definitions in a resource group.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of appliance definitions. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applianceDefinitionsListByResourceGroupAsync(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback<ApplianceDefinitionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = applianceDefinitionsListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<ApplianceDefinitionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
