/*
 * ManagedApplicationClient
 * ARM managed applications (appliances)
 *
 * The version of the OpenAPI document: 2016-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Appliance;
import org.openapitools.client.model.ApplianceListResult;
import org.openapitools.client.model.ErrorResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AppliancesApi
 */
@Disabled
public class AppliancesApiTest {

    private final AppliancesApi api = new AppliancesApi();

    /**
     * Creates a new appliance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appliancesCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String applianceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Appliance parameters = null;
        Appliance response = api.appliancesCreateOrUpdate(resourceGroupName, applianceName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Creates a new appliance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appliancesCreateOrUpdateByIdTest() throws ApiException {
        String applianceId = null;
        String apiVersion = null;
        Appliance parameters = null;
        Appliance response = api.appliancesCreateOrUpdateById(applianceId, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Deletes the appliance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appliancesDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String applianceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.appliancesDelete(resourceGroupName, applianceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Deletes the appliance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appliancesDeleteByIdTest() throws ApiException {
        String applianceId = null;
        String apiVersion = null;
        api.appliancesDeleteById(applianceId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the appliance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appliancesGetTest() throws ApiException {
        String resourceGroupName = null;
        String applianceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Appliance response = api.appliancesGet(resourceGroupName, applianceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the appliance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appliancesGetByIdTest() throws ApiException {
        String applianceId = null;
        String apiVersion = null;
        Appliance response = api.appliancesGetById(applianceId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all the appliances within a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appliancesListByResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        ApplianceListResult response = api.appliancesListByResourceGroup(resourceGroupName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets all the appliances within a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appliancesListBySubscriptionTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        ApplianceListResult response = api.appliancesListBySubscription(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Updates an existing appliance. The only value that can be updated via PATCH currently is the tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appliancesUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String applianceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        Appliance parameters = null;
        Appliance response = api.appliancesUpdate(resourceGroupName, applianceName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Updates an existing appliance. The only value that can be updated via PATCH currently is the tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appliancesUpdateByIdTest() throws ApiException {
        String applianceId = null;
        String apiVersion = null;
        Appliance parameters = null;
        Appliance response = api.appliancesUpdateById(applianceId, apiVersion, parameters);
        // TODO: test validations
    }

}
