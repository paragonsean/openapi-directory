# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.provisioning_state import ProvisioningState
from openapi_server import util


class ApplicationPropertiesPatchable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_definition_id: str=None, managed_resource_group_id: str=None, outputs: object=None, parameters: object=None, provisioning_state: ProvisioningState=None):
        """ApplicationPropertiesPatchable - a model defined in OpenAPI

        :param application_definition_id: The application_definition_id of this ApplicationPropertiesPatchable.
        :param managed_resource_group_id: The managed_resource_group_id of this ApplicationPropertiesPatchable.
        :param outputs: The outputs of this ApplicationPropertiesPatchable.
        :param parameters: The parameters of this ApplicationPropertiesPatchable.
        :param provisioning_state: The provisioning_state of this ApplicationPropertiesPatchable.
        """
        self.openapi_types = {
            'application_definition_id': str,
            'managed_resource_group_id': str,
            'outputs': object,
            'parameters': object,
            'provisioning_state': ProvisioningState
        }

        self.attribute_map = {
            'application_definition_id': 'applicationDefinitionId',
            'managed_resource_group_id': 'managedResourceGroupId',
            'outputs': 'outputs',
            'parameters': 'parameters',
            'provisioning_state': 'provisioningState'
        }

        self._application_definition_id = application_definition_id
        self._managed_resource_group_id = managed_resource_group_id
        self._outputs = outputs
        self._parameters = parameters
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationPropertiesPatchable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationPropertiesPatchable of this ApplicationPropertiesPatchable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_definition_id(self):
        """Gets the application_definition_id of this ApplicationPropertiesPatchable.

        The fully qualified path of managed application definition Id.

        :return: The application_definition_id of this ApplicationPropertiesPatchable.
        :rtype: str
        """
        return self._application_definition_id

    @application_definition_id.setter
    def application_definition_id(self, application_definition_id):
        """Sets the application_definition_id of this ApplicationPropertiesPatchable.

        The fully qualified path of managed application definition Id.

        :param application_definition_id: The application_definition_id of this ApplicationPropertiesPatchable.
        :type application_definition_id: str
        """

        self._application_definition_id = application_definition_id

    @property
    def managed_resource_group_id(self):
        """Gets the managed_resource_group_id of this ApplicationPropertiesPatchable.

        The managed resource group Id.

        :return: The managed_resource_group_id of this ApplicationPropertiesPatchable.
        :rtype: str
        """
        return self._managed_resource_group_id

    @managed_resource_group_id.setter
    def managed_resource_group_id(self, managed_resource_group_id):
        """Sets the managed_resource_group_id of this ApplicationPropertiesPatchable.

        The managed resource group Id.

        :param managed_resource_group_id: The managed_resource_group_id of this ApplicationPropertiesPatchable.
        :type managed_resource_group_id: str
        """

        self._managed_resource_group_id = managed_resource_group_id

    @property
    def outputs(self):
        """Gets the outputs of this ApplicationPropertiesPatchable.

        Name and value pairs that define the managed application outputs.

        :return: The outputs of this ApplicationPropertiesPatchable.
        :rtype: object
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this ApplicationPropertiesPatchable.

        Name and value pairs that define the managed application outputs.

        :param outputs: The outputs of this ApplicationPropertiesPatchable.
        :type outputs: object
        """

        self._outputs = outputs

    @property
    def parameters(self):
        """Gets the parameters of this ApplicationPropertiesPatchable.

        Name and value pairs that define the managed application parameters. It can be a JObject or a well formed JSON string.

        :return: The parameters of this ApplicationPropertiesPatchable.
        :rtype: object
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ApplicationPropertiesPatchable.

        Name and value pairs that define the managed application parameters. It can be a JObject or a well formed JSON string.

        :param parameters: The parameters of this ApplicationPropertiesPatchable.
        :type parameters: object
        """

        self._parameters = parameters

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ApplicationPropertiesPatchable.


        :return: The provisioning_state of this ApplicationPropertiesPatchable.
        :rtype: ProvisioningState
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ApplicationPropertiesPatchable.


        :param provisioning_state: The provisioning_state of this ApplicationPropertiesPatchable.
        :type provisioning_state: ProvisioningState
        """

        self._provisioning_state = provisioning_state
