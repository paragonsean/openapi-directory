# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.application_artifact import ApplicationArtifact
from openapi_server.models.application_lock_level import ApplicationLockLevel
from openapi_server.models.application_provider_authorization import ApplicationProviderAuthorization
from openapi_server import util


class ApplicationDefinitionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifacts: List[ApplicationArtifact]=None, authorizations: List[ApplicationProviderAuthorization]=None, create_ui_definition: object=None, description: str=None, display_name: str=None, is_enabled: str=None, lock_level: ApplicationLockLevel=None, main_template: object=None, package_file_uri: str=None):
        """ApplicationDefinitionProperties - a model defined in OpenAPI

        :param artifacts: The artifacts of this ApplicationDefinitionProperties.
        :param authorizations: The authorizations of this ApplicationDefinitionProperties.
        :param create_ui_definition: The create_ui_definition of this ApplicationDefinitionProperties.
        :param description: The description of this ApplicationDefinitionProperties.
        :param display_name: The display_name of this ApplicationDefinitionProperties.
        :param is_enabled: The is_enabled of this ApplicationDefinitionProperties.
        :param lock_level: The lock_level of this ApplicationDefinitionProperties.
        :param main_template: The main_template of this ApplicationDefinitionProperties.
        :param package_file_uri: The package_file_uri of this ApplicationDefinitionProperties.
        """
        self.openapi_types = {
            'artifacts': List[ApplicationArtifact],
            'authorizations': List[ApplicationProviderAuthorization],
            'create_ui_definition': object,
            'description': str,
            'display_name': str,
            'is_enabled': str,
            'lock_level': ApplicationLockLevel,
            'main_template': object,
            'package_file_uri': str
        }

        self.attribute_map = {
            'artifacts': 'artifacts',
            'authorizations': 'authorizations',
            'create_ui_definition': 'createUiDefinition',
            'description': 'description',
            'display_name': 'displayName',
            'is_enabled': 'isEnabled',
            'lock_level': 'lockLevel',
            'main_template': 'mainTemplate',
            'package_file_uri': 'packageFileUri'
        }

        self._artifacts = artifacts
        self._authorizations = authorizations
        self._create_ui_definition = create_ui_definition
        self._description = description
        self._display_name = display_name
        self._is_enabled = is_enabled
        self._lock_level = lock_level
        self._main_template = main_template
        self._package_file_uri = package_file_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplicationDefinitionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplicationDefinitionProperties of this ApplicationDefinitionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifacts(self):
        """Gets the artifacts of this ApplicationDefinitionProperties.

        The collection of managed application artifacts. The portal will use the files specified as artifacts to construct the user experience of creating a managed application from a managed application definition.

        :return: The artifacts of this ApplicationDefinitionProperties.
        :rtype: List[ApplicationArtifact]
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts):
        """Sets the artifacts of this ApplicationDefinitionProperties.

        The collection of managed application artifacts. The portal will use the files specified as artifacts to construct the user experience of creating a managed application from a managed application definition.

        :param artifacts: The artifacts of this ApplicationDefinitionProperties.
        :type artifacts: List[ApplicationArtifact]
        """

        self._artifacts = artifacts

    @property
    def authorizations(self):
        """Gets the authorizations of this ApplicationDefinitionProperties.

        The managed application provider authorizations.

        :return: The authorizations of this ApplicationDefinitionProperties.
        :rtype: List[ApplicationProviderAuthorization]
        """
        return self._authorizations

    @authorizations.setter
    def authorizations(self, authorizations):
        """Sets the authorizations of this ApplicationDefinitionProperties.

        The managed application provider authorizations.

        :param authorizations: The authorizations of this ApplicationDefinitionProperties.
        :type authorizations: List[ApplicationProviderAuthorization]
        """
        if authorizations is None:
            raise ValueError("Invalid value for `authorizations`, must not be `None`")

        self._authorizations = authorizations

    @property
    def create_ui_definition(self):
        """Gets the create_ui_definition of this ApplicationDefinitionProperties.

        The createUiDefinition json for the backing template with Microsoft.Solutions/applications resource. It can be a JObject or well-formed JSON string.

        :return: The create_ui_definition of this ApplicationDefinitionProperties.
        :rtype: object
        """
        return self._create_ui_definition

    @create_ui_definition.setter
    def create_ui_definition(self, create_ui_definition):
        """Sets the create_ui_definition of this ApplicationDefinitionProperties.

        The createUiDefinition json for the backing template with Microsoft.Solutions/applications resource. It can be a JObject or well-formed JSON string.

        :param create_ui_definition: The create_ui_definition of this ApplicationDefinitionProperties.
        :type create_ui_definition: object
        """

        self._create_ui_definition = create_ui_definition

    @property
    def description(self):
        """Gets the description of this ApplicationDefinitionProperties.

        The managed application definition description.

        :return: The description of this ApplicationDefinitionProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApplicationDefinitionProperties.

        The managed application definition description.

        :param description: The description of this ApplicationDefinitionProperties.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this ApplicationDefinitionProperties.

        The managed application definition display name.

        :return: The display_name of this ApplicationDefinitionProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ApplicationDefinitionProperties.

        The managed application definition display name.

        :param display_name: The display_name of this ApplicationDefinitionProperties.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def is_enabled(self):
        """Gets the is_enabled of this ApplicationDefinitionProperties.

        A value indicating whether the package is enabled or not.

        :return: The is_enabled of this ApplicationDefinitionProperties.
        :rtype: str
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this ApplicationDefinitionProperties.

        A value indicating whether the package is enabled or not.

        :param is_enabled: The is_enabled of this ApplicationDefinitionProperties.
        :type is_enabled: str
        """

        self._is_enabled = is_enabled

    @property
    def lock_level(self):
        """Gets the lock_level of this ApplicationDefinitionProperties.


        :return: The lock_level of this ApplicationDefinitionProperties.
        :rtype: ApplicationLockLevel
        """
        return self._lock_level

    @lock_level.setter
    def lock_level(self, lock_level):
        """Sets the lock_level of this ApplicationDefinitionProperties.


        :param lock_level: The lock_level of this ApplicationDefinitionProperties.
        :type lock_level: ApplicationLockLevel
        """
        if lock_level is None:
            raise ValueError("Invalid value for `lock_level`, must not be `None`")

        self._lock_level = lock_level

    @property
    def main_template(self):
        """Gets the main_template of this ApplicationDefinitionProperties.

        The inline main template json which has resources to be provisioned. It can be a JObject or well-formed JSON string.

        :return: The main_template of this ApplicationDefinitionProperties.
        :rtype: object
        """
        return self._main_template

    @main_template.setter
    def main_template(self, main_template):
        """Sets the main_template of this ApplicationDefinitionProperties.

        The inline main template json which has resources to be provisioned. It can be a JObject or well-formed JSON string.

        :param main_template: The main_template of this ApplicationDefinitionProperties.
        :type main_template: object
        """

        self._main_template = main_template

    @property
    def package_file_uri(self):
        """Gets the package_file_uri of this ApplicationDefinitionProperties.

        The managed application definition package file Uri. Use this element

        :return: The package_file_uri of this ApplicationDefinitionProperties.
        :rtype: str
        """
        return self._package_file_uri

    @package_file_uri.setter
    def package_file_uri(self, package_file_uri):
        """Sets the package_file_uri of this ApplicationDefinitionProperties.

        The managed application definition package file Uri. Use this element

        :param package_file_uri: The package_file_uri of this ApplicationDefinitionProperties.
        :type package_file_uri: str
        """

        self._package_file_uri = package_file_uri
