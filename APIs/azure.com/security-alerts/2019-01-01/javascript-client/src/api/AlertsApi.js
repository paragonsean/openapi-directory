/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Alert from '../model/Alert';
import AlertList from '../model/AlertList';
import AlertsListDefaultResponse from '../model/AlertsListDefaultResponse';

/**
* Alerts service.
* @module api/AlertsApi
* @version 2019-01-01
*/
export default class AlertsApi {

    /**
    * Constructs a new AlertsApi. 
    * @alias module:api/AlertsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the alertsGetResourceGroupLevelAlerts operation.
     * @callback module:api/AlertsApi~alertsGetResourceGroupLevelAlertsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Alert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an alert that is associated a resource group or a resource in a resource group
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {String} alertName Name of the alert object
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {module:api/AlertsApi~alertsGetResourceGroupLevelAlertsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Alert}
     */
    alertsGetResourceGroupLevelAlerts(apiVersion, subscriptionId, ascLocation, alertName, resourceGroupName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsGetResourceGroupLevelAlerts");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling alertsGetResourceGroupLevelAlerts");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling alertsGetResourceGroupLevelAlerts");
      }
      // verify the required parameter 'alertName' is set
      if (alertName === undefined || alertName === null) {
        throw new Error("Missing the required parameter 'alertName' when calling alertsGetResourceGroupLevelAlerts");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling alertsGetResourceGroupLevelAlerts");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'ascLocation': ascLocation,
        'alertName': alertName,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Alert;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsGetSubscriptionLevelAlert operation.
     * @callback module:api/AlertsApi~alertsGetSubscriptionLevelAlertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Alert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an alert that is associated with a subscription
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {String} alertName Name of the alert object
     * @param {module:api/AlertsApi~alertsGetSubscriptionLevelAlertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Alert}
     */
    alertsGetSubscriptionLevelAlert(apiVersion, subscriptionId, ascLocation, alertName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsGetSubscriptionLevelAlert");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling alertsGetSubscriptionLevelAlert");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling alertsGetSubscriptionLevelAlert");
      }
      // verify the required parameter 'alertName' is set
      if (alertName === undefined || alertName === null) {
        throw new Error("Missing the required parameter 'alertName' when calling alertsGetSubscriptionLevelAlert");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'ascLocation': ascLocation,
        'alertName': alertName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Alert;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsList operation.
     * @callback module:api/AlertsApi~alertsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the alerts that are associated with the subscription
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter. Optional.
     * @param {String} [select] OData select. Optional.
     * @param {String} [expand] OData expand. Optional.
     * @param {module:api/AlertsApi~alertsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertList}
     */
    alertsList(apiVersion, subscriptionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling alertsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$select': opts['select'],
        '$expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlertList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsListByResourceGroup operation.
     * @callback module:api/AlertsApi~alertsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the alerts that are associated with the resource group
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter. Optional.
     * @param {String} [select] OData select. Optional.
     * @param {String} [expand] OData expand. Optional.
     * @param {module:api/AlertsApi~alertsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertList}
     */
    alertsListByResourceGroup(apiVersion, subscriptionId, resourceGroupName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling alertsListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling alertsListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$select': opts['select'],
        '$expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlertList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsListResourceGroupLevelAlertsByRegion operation.
     * @callback module:api/AlertsApi~alertsListResourceGroupLevelAlertsByRegionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the alerts that are associated with the resource group that are stored in a specific location
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter. Optional.
     * @param {String} [select] OData select. Optional.
     * @param {String} [expand] OData expand. Optional.
     * @param {module:api/AlertsApi~alertsListResourceGroupLevelAlertsByRegionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertList}
     */
    alertsListResourceGroupLevelAlertsByRegion(apiVersion, subscriptionId, ascLocation, resourceGroupName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsListResourceGroupLevelAlertsByRegion");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling alertsListResourceGroupLevelAlertsByRegion");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling alertsListResourceGroupLevelAlertsByRegion");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling alertsListResourceGroupLevelAlertsByRegion");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'ascLocation': ascLocation,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$select': opts['select'],
        '$expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlertList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsListSubscriptionLevelAlertsByRegion operation.
     * @callback module:api/AlertsApi~alertsListSubscriptionLevelAlertsByRegionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the alerts that are associated with the subscription that are stored in a specific location
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter. Optional.
     * @param {String} [select] OData select. Optional.
     * @param {String} [expand] OData expand. Optional.
     * @param {module:api/AlertsApi~alertsListSubscriptionLevelAlertsByRegionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertList}
     */
    alertsListSubscriptionLevelAlertsByRegion(apiVersion, subscriptionId, ascLocation, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsListSubscriptionLevelAlertsByRegion");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling alertsListSubscriptionLevelAlertsByRegion");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling alertsListSubscriptionLevelAlertsByRegion");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'ascLocation': ascLocation
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$select': opts['select'],
        '$expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlertList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsUpdateResourceGroupLevelAlertStateToDismiss operation.
     * @callback module:api/AlertsApi~alertsUpdateResourceGroupLevelAlertStateToDismissCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the alert's state
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {String} alertName Name of the alert object
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {module:api/AlertsApi~alertsUpdateResourceGroupLevelAlertStateToDismissCallback} callback The callback function, accepting three arguments: error, data, response
     */
    alertsUpdateResourceGroupLevelAlertStateToDismiss(apiVersion, subscriptionId, ascLocation, alertName, resourceGroupName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsUpdateResourceGroupLevelAlertStateToDismiss");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling alertsUpdateResourceGroupLevelAlertStateToDismiss");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling alertsUpdateResourceGroupLevelAlertStateToDismiss");
      }
      // verify the required parameter 'alertName' is set
      if (alertName === undefined || alertName === null) {
        throw new Error("Missing the required parameter 'alertName' when calling alertsUpdateResourceGroupLevelAlertStateToDismiss");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling alertsUpdateResourceGroupLevelAlertStateToDismiss");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'ascLocation': ascLocation,
        'alertName': alertName,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/dismiss', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsUpdateResourceGroupLevelAlertStateToReactivate operation.
     * @callback module:api/AlertsApi~alertsUpdateResourceGroupLevelAlertStateToReactivateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the alert's state
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {String} alertName Name of the alert object
     * @param {String} resourceGroupName The name of the resource group within the user's subscription. The name is case insensitive.
     * @param {module:api/AlertsApi~alertsUpdateResourceGroupLevelAlertStateToReactivateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    alertsUpdateResourceGroupLevelAlertStateToReactivate(apiVersion, subscriptionId, ascLocation, alertName, resourceGroupName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsUpdateResourceGroupLevelAlertStateToReactivate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling alertsUpdateResourceGroupLevelAlertStateToReactivate");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling alertsUpdateResourceGroupLevelAlertStateToReactivate");
      }
      // verify the required parameter 'alertName' is set
      if (alertName === undefined || alertName === null) {
        throw new Error("Missing the required parameter 'alertName' when calling alertsUpdateResourceGroupLevelAlertStateToReactivate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling alertsUpdateResourceGroupLevelAlertStateToReactivate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'ascLocation': ascLocation,
        'alertName': alertName,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/reactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsUpdateSubscriptionLevelAlertStateToDismiss operation.
     * @callback module:api/AlertsApi~alertsUpdateSubscriptionLevelAlertStateToDismissCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the alert's state
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {String} alertName Name of the alert object
     * @param {module:api/AlertsApi~alertsUpdateSubscriptionLevelAlertStateToDismissCallback} callback The callback function, accepting three arguments: error, data, response
     */
    alertsUpdateSubscriptionLevelAlertStateToDismiss(apiVersion, subscriptionId, ascLocation, alertName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsUpdateSubscriptionLevelAlertStateToDismiss");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling alertsUpdateSubscriptionLevelAlertStateToDismiss");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling alertsUpdateSubscriptionLevelAlertStateToDismiss");
      }
      // verify the required parameter 'alertName' is set
      if (alertName === undefined || alertName === null) {
        throw new Error("Missing the required parameter 'alertName' when calling alertsUpdateSubscriptionLevelAlertStateToDismiss");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'ascLocation': ascLocation,
        'alertName': alertName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/dismiss', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsUpdateSubscriptionLevelAlertStateToReactivate operation.
     * @callback module:api/AlertsApi~alertsUpdateSubscriptionLevelAlertStateToReactivateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the alert's state
     * @param {String} apiVersion API version for the operation
     * @param {String} subscriptionId Azure subscription ID
     * @param {String} ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations
     * @param {String} alertName Name of the alert object
     * @param {module:api/AlertsApi~alertsUpdateSubscriptionLevelAlertStateToReactivateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    alertsUpdateSubscriptionLevelAlertStateToReactivate(apiVersion, subscriptionId, ascLocation, alertName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsUpdateSubscriptionLevelAlertStateToReactivate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling alertsUpdateSubscriptionLevelAlertStateToReactivate");
      }
      // verify the required parameter 'ascLocation' is set
      if (ascLocation === undefined || ascLocation === null) {
        throw new Error("Missing the required parameter 'ascLocation' when calling alertsUpdateSubscriptionLevelAlertStateToReactivate");
      }
      // verify the required parameter 'alertName' is set
      if (alertName === undefined || alertName === null) {
        throw new Error("Missing the required parameter 'alertName' when calling alertsUpdateSubscriptionLevelAlertStateToReactivate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'ascLocation': ascLocation,
        'alertName': alertName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/reactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
