/*
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AlertConfidenceReason;
import org.openapitools.client.model.AlertEntity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * describes security alert properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:51:20.034706-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlertProperties {
  public static final String SERIALIZED_NAME_ACTION_TAKEN = "actionTaken";
  @SerializedName(SERIALIZED_NAME_ACTION_TAKEN)
  private String actionTaken;

  public static final String SERIALIZED_NAME_ALERT_DISPLAY_NAME = "alertDisplayName";
  @SerializedName(SERIALIZED_NAME_ALERT_DISPLAY_NAME)
  private String alertDisplayName;

  public static final String SERIALIZED_NAME_ALERT_NAME = "alertName";
  @SerializedName(SERIALIZED_NAME_ALERT_NAME)
  private String alertName;

  public static final String SERIALIZED_NAME_ASSOCIATED_RESOURCE = "associatedResource";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_RESOURCE)
  private String associatedResource;

  public static final String SERIALIZED_NAME_CAN_BE_INVESTIGATED = "canBeInvestigated";
  @SerializedName(SERIALIZED_NAME_CAN_BE_INVESTIGATED)
  private Boolean canBeInvestigated;

  public static final String SERIALIZED_NAME_COMPROMISED_ENTITY = "compromisedEntity";
  @SerializedName(SERIALIZED_NAME_COMPROMISED_ENTITY)
  private String compromisedEntity;

  public static final String SERIALIZED_NAME_CONFIDENCE_REASONS = "confidenceReasons";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE_REASONS)
  private List<AlertConfidenceReason> confidenceReasons = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFIDENCE_SCORE = "confidenceScore";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE_SCORE)
  private Float confidenceScore;

  public static final String SERIALIZED_NAME_CORRELATION_KEY = "correlationKey";
  @SerializedName(SERIALIZED_NAME_CORRELATION_KEY)
  private String correlationKey;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DETECTED_TIME_UTC = "detectedTimeUtc";
  @SerializedName(SERIALIZED_NAME_DETECTED_TIME_UTC)
  private OffsetDateTime detectedTimeUtc;

  public static final String SERIALIZED_NAME_ENTITIES = "entities";
  @SerializedName(SERIALIZED_NAME_ENTITIES)
  private List<AlertEntity> entities = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTENDED_PROPERTIES = "extendedProperties";
  @SerializedName(SERIALIZED_NAME_EXTENDED_PROPERTIES)
  private Map<String, Object> extendedProperties = new HashMap<>();

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_IS_INCIDENT = "isIncident";
  @SerializedName(SERIALIZED_NAME_IS_INCIDENT)
  private Boolean isIncident;

  public static final String SERIALIZED_NAME_REMEDIATION_STEPS = "remediationSteps";
  @SerializedName(SERIALIZED_NAME_REMEDIATION_STEPS)
  private String remediationSteps;

  /**
   * Estimated severity of this alert
   */
  @JsonAdapter(ReportedSeverityEnum.Adapter.class)
  public enum ReportedSeverityEnum {
    INFORMATIONAL("Informational"),
    
    LOW("Low"),
    
    MEDIUM("Medium"),
    
    HIGH("High");

    private String value;

    ReportedSeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReportedSeverityEnum fromValue(String value) {
      for (ReportedSeverityEnum b : ReportedSeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReportedSeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReportedSeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReportedSeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReportedSeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReportedSeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPORTED_SEVERITY = "reportedSeverity";
  @SerializedName(SERIALIZED_NAME_REPORTED_SEVERITY)
  private ReportedSeverityEnum reportedSeverity;

  public static final String SERIALIZED_NAME_REPORTED_TIME_UTC = "reportedTimeUtc";
  @SerializedName(SERIALIZED_NAME_REPORTED_TIME_UTC)
  private OffsetDateTime reportedTimeUtc;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_SYSTEM_SOURCE = "systemSource";
  @SerializedName(SERIALIZED_NAME_SYSTEM_SOURCE)
  private String systemSource;

  public static final String SERIALIZED_NAME_VENDOR_NAME = "vendorName";
  @SerializedName(SERIALIZED_NAME_VENDOR_NAME)
  private String vendorName;

  public static final String SERIALIZED_NAME_WORKSPACE_ARM_ID = "workspaceArmId";
  @SerializedName(SERIALIZED_NAME_WORKSPACE_ARM_ID)
  private String workspaceArmId;

  public AlertProperties() {
  }

  public AlertProperties(
     String actionTaken, 
     String alertDisplayName, 
     String alertName, 
     String associatedResource, 
     Boolean canBeInvestigated, 
     String compromisedEntity, 
     Float confidenceScore, 
     String correlationKey, 
     String description, 
     OffsetDateTime detectedTimeUtc, 
     String instanceId, 
     Boolean isIncident, 
     String remediationSteps, 
     ReportedSeverityEnum reportedSeverity, 
     OffsetDateTime reportedTimeUtc, 
     String state, 
     String subscriptionId, 
     String systemSource, 
     String vendorName, 
     String workspaceArmId
  ) {
    this();
    this.actionTaken = actionTaken;
    this.alertDisplayName = alertDisplayName;
    this.alertName = alertName;
    this.associatedResource = associatedResource;
    this.canBeInvestigated = canBeInvestigated;
    this.compromisedEntity = compromisedEntity;
    this.confidenceScore = confidenceScore;
    this.correlationKey = correlationKey;
    this.description = description;
    this.detectedTimeUtc = detectedTimeUtc;
    this.instanceId = instanceId;
    this.isIncident = isIncident;
    this.remediationSteps = remediationSteps;
    this.reportedSeverity = reportedSeverity;
    this.reportedTimeUtc = reportedTimeUtc;
    this.state = state;
    this.subscriptionId = subscriptionId;
    this.systemSource = systemSource;
    this.vendorName = vendorName;
    this.workspaceArmId = workspaceArmId;
  }

  /**
   * The action that was taken as a response to the alert (Active, Blocked etc.)
   * @return actionTaken
   */
  @javax.annotation.Nullable
  public String getActionTaken() {
    return actionTaken;
  }



  /**
   * Display name of the alert type
   * @return alertDisplayName
   */
  @javax.annotation.Nullable
  public String getAlertDisplayName() {
    return alertDisplayName;
  }



  /**
   * Name of the alert type
   * @return alertName
   */
  @javax.annotation.Nullable
  public String getAlertName() {
    return alertName;
  }



  /**
   * Azure resource ID of the associated resource
   * @return associatedResource
   */
  @javax.annotation.Nullable
  public String getAssociatedResource() {
    return associatedResource;
  }



  /**
   * Whether this alert can be investigated with Azure Security Center
   * @return canBeInvestigated
   */
  @javax.annotation.Nullable
  public Boolean getCanBeInvestigated() {
    return canBeInvestigated;
  }



  /**
   * The entity that the incident happened on
   * @return compromisedEntity
   */
  @javax.annotation.Nullable
  public String getCompromisedEntity() {
    return compromisedEntity;
  }



  public AlertProperties confidenceReasons(List<AlertConfidenceReason> confidenceReasons) {
    this.confidenceReasons = confidenceReasons;
    return this;
  }

  public AlertProperties addConfidenceReasonsItem(AlertConfidenceReason confidenceReasonsItem) {
    if (this.confidenceReasons == null) {
      this.confidenceReasons = new ArrayList<>();
    }
    this.confidenceReasons.add(confidenceReasonsItem);
    return this;
  }

  /**
   * reasons the alert got the confidenceScore value
   * @return confidenceReasons
   */
  @javax.annotation.Nullable
  public List<AlertConfidenceReason> getConfidenceReasons() {
    return confidenceReasons;
  }

  public void setConfidenceReasons(List<AlertConfidenceReason> confidenceReasons) {
    this.confidenceReasons = confidenceReasons;
  }


  /**
   * level of confidence we have on the alert
   * minimum: 0
   * maximum: 1
   * @return confidenceScore
   */
  @javax.annotation.Nullable
  public Float getConfidenceScore() {
    return confidenceScore;
  }



  /**
   * Alerts with the same CorrelationKey will be grouped together in Ibiza.
   * @return correlationKey
   */
  @javax.annotation.Nullable
  public String getCorrelationKey() {
    return correlationKey;
  }



  /**
   * Description of the incident and what it means
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  /**
   * The time the incident was detected by the vendor
   * @return detectedTimeUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDetectedTimeUtc() {
    return detectedTimeUtc;
  }



  public AlertProperties entities(List<AlertEntity> entities) {
    this.entities = entities;
    return this;
  }

  public AlertProperties addEntitiesItem(AlertEntity entitiesItem) {
    if (this.entities == null) {
      this.entities = new ArrayList<>();
    }
    this.entities.add(entitiesItem);
    return this;
  }

  /**
   * objects that are related to this alerts
   * @return entities
   */
  @javax.annotation.Nullable
  public List<AlertEntity> getEntities() {
    return entities;
  }

  public void setEntities(List<AlertEntity> entities) {
    this.entities = entities;
  }


  public AlertProperties extendedProperties(Map<String, Object> extendedProperties) {
    this.extendedProperties = extendedProperties;
    return this;
  }

  public AlertProperties putExtendedPropertiesItem(String key, Object extendedPropertiesItem) {
    if (this.extendedProperties == null) {
      this.extendedProperties = new HashMap<>();
    }
    this.extendedProperties.put(key, extendedPropertiesItem);
    return this;
  }

  /**
   * Changing set of properties depending on the alert type.
   * @return extendedProperties
   */
  @javax.annotation.Nullable
  public Map<String, Object> getExtendedProperties() {
    return extendedProperties;
  }

  public void setExtendedProperties(Map<String, Object> extendedProperties) {
    this.extendedProperties = extendedProperties;
  }


  /**
   * Instance ID of the alert.
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }



  /**
   * Whether this alert is for incident type or not (otherwise - single alert)
   * @return isIncident
   */
  @javax.annotation.Nullable
  public Boolean getIsIncident() {
    return isIncident;
  }



  /**
   * Recommended steps to reradiate the incident
   * @return remediationSteps
   */
  @javax.annotation.Nullable
  public String getRemediationSteps() {
    return remediationSteps;
  }



  /**
   * Estimated severity of this alert
   * @return reportedSeverity
   */
  @javax.annotation.Nullable
  public ReportedSeverityEnum getReportedSeverity() {
    return reportedSeverity;
  }



  /**
   * The time the incident was reported to Microsoft.Security in UTC
   * @return reportedTimeUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReportedTimeUtc() {
    return reportedTimeUtc;
  }



  /**
   * State of the alert (Active, Dismissed etc.)
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }



  /**
   * Azure subscription ID of the resource that had the security alert or the subscription ID of the workspace that this resource reports to
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }



  /**
   * The type of the alerted resource (Azure, Non-Azure)
   * @return systemSource
   */
  @javax.annotation.Nullable
  public String getSystemSource() {
    return systemSource;
  }



  /**
   * Name of the vendor that discovered the incident
   * @return vendorName
   */
  @javax.annotation.Nullable
  public String getVendorName() {
    return vendorName;
  }



  /**
   * Azure resource ID of the workspace that the alert was reported to.
   * @return workspaceArmId
   */
  @javax.annotation.Nullable
  public String getWorkspaceArmId() {
    return workspaceArmId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertProperties alertProperties = (AlertProperties) o;
    return Objects.equals(this.actionTaken, alertProperties.actionTaken) &&
        Objects.equals(this.alertDisplayName, alertProperties.alertDisplayName) &&
        Objects.equals(this.alertName, alertProperties.alertName) &&
        Objects.equals(this.associatedResource, alertProperties.associatedResource) &&
        Objects.equals(this.canBeInvestigated, alertProperties.canBeInvestigated) &&
        Objects.equals(this.compromisedEntity, alertProperties.compromisedEntity) &&
        Objects.equals(this.confidenceReasons, alertProperties.confidenceReasons) &&
        Objects.equals(this.confidenceScore, alertProperties.confidenceScore) &&
        Objects.equals(this.correlationKey, alertProperties.correlationKey) &&
        Objects.equals(this.description, alertProperties.description) &&
        Objects.equals(this.detectedTimeUtc, alertProperties.detectedTimeUtc) &&
        Objects.equals(this.entities, alertProperties.entities) &&
        Objects.equals(this.extendedProperties, alertProperties.extendedProperties) &&
        Objects.equals(this.instanceId, alertProperties.instanceId) &&
        Objects.equals(this.isIncident, alertProperties.isIncident) &&
        Objects.equals(this.remediationSteps, alertProperties.remediationSteps) &&
        Objects.equals(this.reportedSeverity, alertProperties.reportedSeverity) &&
        Objects.equals(this.reportedTimeUtc, alertProperties.reportedTimeUtc) &&
        Objects.equals(this.state, alertProperties.state) &&
        Objects.equals(this.subscriptionId, alertProperties.subscriptionId) &&
        Objects.equals(this.systemSource, alertProperties.systemSource) &&
        Objects.equals(this.vendorName, alertProperties.vendorName) &&
        Objects.equals(this.workspaceArmId, alertProperties.workspaceArmId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionTaken, alertDisplayName, alertName, associatedResource, canBeInvestigated, compromisedEntity, confidenceReasons, confidenceScore, correlationKey, description, detectedTimeUtc, entities, extendedProperties, instanceId, isIncident, remediationSteps, reportedSeverity, reportedTimeUtc, state, subscriptionId, systemSource, vendorName, workspaceArmId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertProperties {\n");
    sb.append("    actionTaken: ").append(toIndentedString(actionTaken)).append("\n");
    sb.append("    alertDisplayName: ").append(toIndentedString(alertDisplayName)).append("\n");
    sb.append("    alertName: ").append(toIndentedString(alertName)).append("\n");
    sb.append("    associatedResource: ").append(toIndentedString(associatedResource)).append("\n");
    sb.append("    canBeInvestigated: ").append(toIndentedString(canBeInvestigated)).append("\n");
    sb.append("    compromisedEntity: ").append(toIndentedString(compromisedEntity)).append("\n");
    sb.append("    confidenceReasons: ").append(toIndentedString(confidenceReasons)).append("\n");
    sb.append("    confidenceScore: ").append(toIndentedString(confidenceScore)).append("\n");
    sb.append("    correlationKey: ").append(toIndentedString(correlationKey)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    detectedTimeUtc: ").append(toIndentedString(detectedTimeUtc)).append("\n");
    sb.append("    entities: ").append(toIndentedString(entities)).append("\n");
    sb.append("    extendedProperties: ").append(toIndentedString(extendedProperties)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    isIncident: ").append(toIndentedString(isIncident)).append("\n");
    sb.append("    remediationSteps: ").append(toIndentedString(remediationSteps)).append("\n");
    sb.append("    reportedSeverity: ").append(toIndentedString(reportedSeverity)).append("\n");
    sb.append("    reportedTimeUtc: ").append(toIndentedString(reportedTimeUtc)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    systemSource: ").append(toIndentedString(systemSource)).append("\n");
    sb.append("    vendorName: ").append(toIndentedString(vendorName)).append("\n");
    sb.append("    workspaceArmId: ").append(toIndentedString(workspaceArmId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionTaken");
    openapiFields.add("alertDisplayName");
    openapiFields.add("alertName");
    openapiFields.add("associatedResource");
    openapiFields.add("canBeInvestigated");
    openapiFields.add("compromisedEntity");
    openapiFields.add("confidenceReasons");
    openapiFields.add("confidenceScore");
    openapiFields.add("correlationKey");
    openapiFields.add("description");
    openapiFields.add("detectedTimeUtc");
    openapiFields.add("entities");
    openapiFields.add("extendedProperties");
    openapiFields.add("instanceId");
    openapiFields.add("isIncident");
    openapiFields.add("remediationSteps");
    openapiFields.add("reportedSeverity");
    openapiFields.add("reportedTimeUtc");
    openapiFields.add("state");
    openapiFields.add("subscriptionId");
    openapiFields.add("systemSource");
    openapiFields.add("vendorName");
    openapiFields.add("workspaceArmId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlertProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlertProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertProperties is not found in the empty JSON string", AlertProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AlertProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AlertProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actionTaken") != null && !jsonObj.get("actionTaken").isJsonNull()) && !jsonObj.get("actionTaken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionTaken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionTaken").toString()));
      }
      if ((jsonObj.get("alertDisplayName") != null && !jsonObj.get("alertDisplayName").isJsonNull()) && !jsonObj.get("alertDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertDisplayName").toString()));
      }
      if ((jsonObj.get("alertName") != null && !jsonObj.get("alertName").isJsonNull()) && !jsonObj.get("alertName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertName").toString()));
      }
      if ((jsonObj.get("associatedResource") != null && !jsonObj.get("associatedResource").isJsonNull()) && !jsonObj.get("associatedResource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `associatedResource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("associatedResource").toString()));
      }
      if ((jsonObj.get("compromisedEntity") != null && !jsonObj.get("compromisedEntity").isJsonNull()) && !jsonObj.get("compromisedEntity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compromisedEntity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compromisedEntity").toString()));
      }
      if (jsonObj.get("confidenceReasons") != null && !jsonObj.get("confidenceReasons").isJsonNull()) {
        JsonArray jsonArrayconfidenceReasons = jsonObj.getAsJsonArray("confidenceReasons");
        if (jsonArrayconfidenceReasons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("confidenceReasons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `confidenceReasons` to be an array in the JSON string but got `%s`", jsonObj.get("confidenceReasons").toString()));
          }

          // validate the optional field `confidenceReasons` (array)
          for (int i = 0; i < jsonArrayconfidenceReasons.size(); i++) {
            AlertConfidenceReason.validateJsonElement(jsonArrayconfidenceReasons.get(i));
          };
        }
      }
      if ((jsonObj.get("correlationKey") != null && !jsonObj.get("correlationKey").isJsonNull()) && !jsonObj.get("correlationKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correlationKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correlationKey").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("entities") != null && !jsonObj.get("entities").isJsonNull() && !jsonObj.get("entities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `entities` to be an array in the JSON string but got `%s`", jsonObj.get("entities").toString()));
      }
      if ((jsonObj.get("instanceId") != null && !jsonObj.get("instanceId").isJsonNull()) && !jsonObj.get("instanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceId").toString()));
      }
      if ((jsonObj.get("remediationSteps") != null && !jsonObj.get("remediationSteps").isJsonNull()) && !jsonObj.get("remediationSteps").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remediationSteps` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remediationSteps").toString()));
      }
      if ((jsonObj.get("reportedSeverity") != null && !jsonObj.get("reportedSeverity").isJsonNull()) && !jsonObj.get("reportedSeverity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportedSeverity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportedSeverity").toString()));
      }
      // validate the optional field `reportedSeverity`
      if (jsonObj.get("reportedSeverity") != null && !jsonObj.get("reportedSeverity").isJsonNull()) {
        ReportedSeverityEnum.validateJsonElement(jsonObj.get("reportedSeverity"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
      if ((jsonObj.get("systemSource") != null && !jsonObj.get("systemSource").isJsonNull()) && !jsonObj.get("systemSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemSource").toString()));
      }
      if ((jsonObj.get("vendorName") != null && !jsonObj.get("vendorName").isJsonNull()) && !jsonObj.get("vendorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vendorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vendorName").toString()));
      }
      if ((jsonObj.get("workspaceArmId") != null && !jsonObj.get("workspaceArmId").isJsonNull()) && !jsonObj.get("workspaceArmId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workspaceArmId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workspaceArmId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AlertProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AlertProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AlertProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AlertProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AlertProperties>() {
           @Override
           public void write(JsonWriter out, AlertProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AlertProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AlertProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlertProperties
   * @throws IOException if the JSON string is invalid with respect to AlertProperties
   */
  public static AlertProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertProperties.class);
  }

  /**
   * Convert an instance of AlertProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

