/**
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlertConfidenceReason from './AlertConfidenceReason';
import AlertEntity from './AlertEntity';

/**
 * The AlertProperties model module.
 * @module model/AlertProperties
 * @version 2015-06-01-preview
 */
class AlertProperties {
    /**
     * Constructs a new <code>AlertProperties</code>.
     * describes security alert properties.
     * @alias module:model/AlertProperties
     */
    constructor() { 
        
        AlertProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AlertProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlertProperties} obj Optional instance to populate.
     * @return {module:model/AlertProperties} The populated <code>AlertProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlertProperties();

            if (data.hasOwnProperty('actionTaken')) {
                obj['actionTaken'] = ApiClient.convertToType(data['actionTaken'], 'String');
            }
            if (data.hasOwnProperty('alertDisplayName')) {
                obj['alertDisplayName'] = ApiClient.convertToType(data['alertDisplayName'], 'String');
            }
            if (data.hasOwnProperty('alertName')) {
                obj['alertName'] = ApiClient.convertToType(data['alertName'], 'String');
            }
            if (data.hasOwnProperty('associatedResource')) {
                obj['associatedResource'] = ApiClient.convertToType(data['associatedResource'], 'String');
            }
            if (data.hasOwnProperty('canBeInvestigated')) {
                obj['canBeInvestigated'] = ApiClient.convertToType(data['canBeInvestigated'], 'Boolean');
            }
            if (data.hasOwnProperty('compromisedEntity')) {
                obj['compromisedEntity'] = ApiClient.convertToType(data['compromisedEntity'], 'String');
            }
            if (data.hasOwnProperty('confidenceReasons')) {
                obj['confidenceReasons'] = ApiClient.convertToType(data['confidenceReasons'], [AlertConfidenceReason]);
            }
            if (data.hasOwnProperty('confidenceScore')) {
                obj['confidenceScore'] = ApiClient.convertToType(data['confidenceScore'], 'Number');
            }
            if (data.hasOwnProperty('correlationKey')) {
                obj['correlationKey'] = ApiClient.convertToType(data['correlationKey'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('detectedTimeUtc')) {
                obj['detectedTimeUtc'] = ApiClient.convertToType(data['detectedTimeUtc'], 'Date');
            }
            if (data.hasOwnProperty('entities')) {
                obj['entities'] = ApiClient.convertToType(data['entities'], [AlertEntity]);
            }
            if (data.hasOwnProperty('extendedProperties')) {
                obj['extendedProperties'] = ApiClient.convertToType(data['extendedProperties'], {'String': Object});
            }
            if (data.hasOwnProperty('instanceId')) {
                obj['instanceId'] = ApiClient.convertToType(data['instanceId'], 'String');
            }
            if (data.hasOwnProperty('isIncident')) {
                obj['isIncident'] = ApiClient.convertToType(data['isIncident'], 'Boolean');
            }
            if (data.hasOwnProperty('remediationSteps')) {
                obj['remediationSteps'] = ApiClient.convertToType(data['remediationSteps'], 'String');
            }
            if (data.hasOwnProperty('reportedSeverity')) {
                obj['reportedSeverity'] = ApiClient.convertToType(data['reportedSeverity'], 'String');
            }
            if (data.hasOwnProperty('reportedTimeUtc')) {
                obj['reportedTimeUtc'] = ApiClient.convertToType(data['reportedTimeUtc'], 'Date');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
            if (data.hasOwnProperty('systemSource')) {
                obj['systemSource'] = ApiClient.convertToType(data['systemSource'], 'String');
            }
            if (data.hasOwnProperty('vendorName')) {
                obj['vendorName'] = ApiClient.convertToType(data['vendorName'], 'String');
            }
            if (data.hasOwnProperty('workspaceArmId')) {
                obj['workspaceArmId'] = ApiClient.convertToType(data['workspaceArmId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlertProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlertProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['actionTaken'] && !(typeof data['actionTaken'] === 'string' || data['actionTaken'] instanceof String)) {
            throw new Error("Expected the field `actionTaken` to be a primitive type in the JSON string but got " + data['actionTaken']);
        }
        // ensure the json data is a string
        if (data['alertDisplayName'] && !(typeof data['alertDisplayName'] === 'string' || data['alertDisplayName'] instanceof String)) {
            throw new Error("Expected the field `alertDisplayName` to be a primitive type in the JSON string but got " + data['alertDisplayName']);
        }
        // ensure the json data is a string
        if (data['alertName'] && !(typeof data['alertName'] === 'string' || data['alertName'] instanceof String)) {
            throw new Error("Expected the field `alertName` to be a primitive type in the JSON string but got " + data['alertName']);
        }
        // ensure the json data is a string
        if (data['associatedResource'] && !(typeof data['associatedResource'] === 'string' || data['associatedResource'] instanceof String)) {
            throw new Error("Expected the field `associatedResource` to be a primitive type in the JSON string but got " + data['associatedResource']);
        }
        // ensure the json data is a string
        if (data['compromisedEntity'] && !(typeof data['compromisedEntity'] === 'string' || data['compromisedEntity'] instanceof String)) {
            throw new Error("Expected the field `compromisedEntity` to be a primitive type in the JSON string but got " + data['compromisedEntity']);
        }
        if (data['confidenceReasons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['confidenceReasons'])) {
                throw new Error("Expected the field `confidenceReasons` to be an array in the JSON data but got " + data['confidenceReasons']);
            }
            // validate the optional field `confidenceReasons` (array)
            for (const item of data['confidenceReasons']) {
                AlertConfidenceReason.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['correlationKey'] && !(typeof data['correlationKey'] === 'string' || data['correlationKey'] instanceof String)) {
            throw new Error("Expected the field `correlationKey` to be a primitive type in the JSON string but got " + data['correlationKey']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['entities'])) {
            throw new Error("Expected the field `entities` to be an array in the JSON data but got " + data['entities']);
        }
        // ensure the json data is a string
        if (data['instanceId'] && !(typeof data['instanceId'] === 'string' || data['instanceId'] instanceof String)) {
            throw new Error("Expected the field `instanceId` to be a primitive type in the JSON string but got " + data['instanceId']);
        }
        // ensure the json data is a string
        if (data['remediationSteps'] && !(typeof data['remediationSteps'] === 'string' || data['remediationSteps'] instanceof String)) {
            throw new Error("Expected the field `remediationSteps` to be a primitive type in the JSON string but got " + data['remediationSteps']);
        }
        // ensure the json data is a string
        if (data['reportedSeverity'] && !(typeof data['reportedSeverity'] === 'string' || data['reportedSeverity'] instanceof String)) {
            throw new Error("Expected the field `reportedSeverity` to be a primitive type in the JSON string but got " + data['reportedSeverity']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }
        // ensure the json data is a string
        if (data['systemSource'] && !(typeof data['systemSource'] === 'string' || data['systemSource'] instanceof String)) {
            throw new Error("Expected the field `systemSource` to be a primitive type in the JSON string but got " + data['systemSource']);
        }
        // ensure the json data is a string
        if (data['vendorName'] && !(typeof data['vendorName'] === 'string' || data['vendorName'] instanceof String)) {
            throw new Error("Expected the field `vendorName` to be a primitive type in the JSON string but got " + data['vendorName']);
        }
        // ensure the json data is a string
        if (data['workspaceArmId'] && !(typeof data['workspaceArmId'] === 'string' || data['workspaceArmId'] instanceof String)) {
            throw new Error("Expected the field `workspaceArmId` to be a primitive type in the JSON string but got " + data['workspaceArmId']);
        }

        return true;
    }


}



/**
 * The action that was taken as a response to the alert (Active, Blocked etc.)
 * @member {String} actionTaken
 */
AlertProperties.prototype['actionTaken'] = undefined;

/**
 * Display name of the alert type
 * @member {String} alertDisplayName
 */
AlertProperties.prototype['alertDisplayName'] = undefined;

/**
 * Name of the alert type
 * @member {String} alertName
 */
AlertProperties.prototype['alertName'] = undefined;

/**
 * Azure resource ID of the associated resource
 * @member {String} associatedResource
 */
AlertProperties.prototype['associatedResource'] = undefined;

/**
 * Whether this alert can be investigated with Azure Security Center
 * @member {Boolean} canBeInvestigated
 */
AlertProperties.prototype['canBeInvestigated'] = undefined;

/**
 * The entity that the incident happened on
 * @member {String} compromisedEntity
 */
AlertProperties.prototype['compromisedEntity'] = undefined;

/**
 * reasons the alert got the confidenceScore value
 * @member {Array.<module:model/AlertConfidenceReason>} confidenceReasons
 */
AlertProperties.prototype['confidenceReasons'] = undefined;

/**
 * level of confidence we have on the alert
 * @member {Number} confidenceScore
 */
AlertProperties.prototype['confidenceScore'] = undefined;

/**
 * Alerts with the same CorrelationKey will be grouped together in Ibiza.
 * @member {String} correlationKey
 */
AlertProperties.prototype['correlationKey'] = undefined;

/**
 * Description of the incident and what it means
 * @member {String} description
 */
AlertProperties.prototype['description'] = undefined;

/**
 * The time the incident was detected by the vendor
 * @member {Date} detectedTimeUtc
 */
AlertProperties.prototype['detectedTimeUtc'] = undefined;

/**
 * objects that are related to this alerts
 * @member {Array.<module:model/AlertEntity>} entities
 */
AlertProperties.prototype['entities'] = undefined;

/**
 * Changing set of properties depending on the alert type.
 * @member {Object.<String, Object>} extendedProperties
 */
AlertProperties.prototype['extendedProperties'] = undefined;

/**
 * Instance ID of the alert.
 * @member {String} instanceId
 */
AlertProperties.prototype['instanceId'] = undefined;

/**
 * Whether this alert is for incident type or not (otherwise - single alert)
 * @member {Boolean} isIncident
 */
AlertProperties.prototype['isIncident'] = undefined;

/**
 * Recommended steps to reradiate the incident
 * @member {String} remediationSteps
 */
AlertProperties.prototype['remediationSteps'] = undefined;

/**
 * Estimated severity of this alert
 * @member {module:model/AlertProperties.ReportedSeverityEnum} reportedSeverity
 */
AlertProperties.prototype['reportedSeverity'] = undefined;

/**
 * The time the incident was reported to Microsoft.Security in UTC
 * @member {Date} reportedTimeUtc
 */
AlertProperties.prototype['reportedTimeUtc'] = undefined;

/**
 * State of the alert (Active, Dismissed etc.)
 * @member {String} state
 */
AlertProperties.prototype['state'] = undefined;

/**
 * Azure subscription ID of the resource that had the security alert or the subscription ID of the workspace that this resource reports to
 * @member {String} subscriptionId
 */
AlertProperties.prototype['subscriptionId'] = undefined;

/**
 * The type of the alerted resource (Azure, Non-Azure)
 * @member {String} systemSource
 */
AlertProperties.prototype['systemSource'] = undefined;

/**
 * Name of the vendor that discovered the incident
 * @member {String} vendorName
 */
AlertProperties.prototype['vendorName'] = undefined;

/**
 * Azure resource ID of the workspace that the alert was reported to.
 * @member {String} workspaceArmId
 */
AlertProperties.prototype['workspaceArmId'] = undefined;





/**
 * Allowed values for the <code>reportedSeverity</code> property.
 * @enum {String}
 * @readonly
 */
AlertProperties['ReportedSeverityEnum'] = {

    /**
     * value: "Silent"
     * @const
     */
    "Silent": "Silent",

    /**
     * value: "Information"
     * @const
     */
    "Information": "Information",

    /**
     * value: "Low"
     * @const
     */
    "Low": "Low",

    /**
     * value: "High"
     * @const
     */
    "High": "High"
};



export default AlertProperties;

