/*
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Alert;
import org.openapitools.client.model.AlertList;
import org.openapitools.client.model.AlertsListDefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlertsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AlertsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlertsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for alertsGetResourceGroupLevelAlerts
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetResourceGroupLevelAlertsCall(String apiVersion, String subscriptionId, String ascLocation, String alertName, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "ascLocation" + "}", localVarApiClient.escapeString(ascLocation.toString()))
            .replace("{" + "alertName" + "}", localVarApiClient.escapeString(alertName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsGetResourceGroupLevelAlertsValidateBeforeCall(String apiVersion, String subscriptionId, String ascLocation, String alertName, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsGetResourceGroupLevelAlerts(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsGetResourceGroupLevelAlerts(Async)");
        }

        // verify the required parameter 'ascLocation' is set
        if (ascLocation == null) {
            throw new ApiException("Missing the required parameter 'ascLocation' when calling alertsGetResourceGroupLevelAlerts(Async)");
        }

        // verify the required parameter 'alertName' is set
        if (alertName == null) {
            throw new ApiException("Missing the required parameter 'alertName' when calling alertsGetResourceGroupLevelAlerts(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling alertsGetResourceGroupLevelAlerts(Async)");
        }

        return alertsGetResourceGroupLevelAlertsCall(apiVersion, subscriptionId, ascLocation, alertName, resourceGroupName, _callback);

    }

    /**
     * 
     * Get an alert that is associated a resource group or a resource in a resource group
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @return Alert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Alert alertsGetResourceGroupLevelAlerts(String apiVersion, String subscriptionId, String ascLocation, String alertName, String resourceGroupName) throws ApiException {
        ApiResponse<Alert> localVarResp = alertsGetResourceGroupLevelAlertsWithHttpInfo(apiVersion, subscriptionId, ascLocation, alertName, resourceGroupName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get an alert that is associated a resource group or a resource in a resource group
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @return ApiResponse&lt;Alert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Alert> alertsGetResourceGroupLevelAlertsWithHttpInfo(String apiVersion, String subscriptionId, String ascLocation, String alertName, String resourceGroupName) throws ApiException {
        okhttp3.Call localVarCall = alertsGetResourceGroupLevelAlertsValidateBeforeCall(apiVersion, subscriptionId, ascLocation, alertName, resourceGroupName, null);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get an alert that is associated a resource group or a resource in a resource group
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetResourceGroupLevelAlertsAsync(String apiVersion, String subscriptionId, String ascLocation, String alertName, String resourceGroupName, final ApiCallback<Alert> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsGetResourceGroupLevelAlertsValidateBeforeCall(apiVersion, subscriptionId, ascLocation, alertName, resourceGroupName, _callback);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsGetSubscriptionLevelAlert
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetSubscriptionLevelAlertCall(String apiVersion, String subscriptionId, String ascLocation, String alertName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "ascLocation" + "}", localVarApiClient.escapeString(ascLocation.toString()))
            .replace("{" + "alertName" + "}", localVarApiClient.escapeString(alertName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsGetSubscriptionLevelAlertValidateBeforeCall(String apiVersion, String subscriptionId, String ascLocation, String alertName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsGetSubscriptionLevelAlert(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsGetSubscriptionLevelAlert(Async)");
        }

        // verify the required parameter 'ascLocation' is set
        if (ascLocation == null) {
            throw new ApiException("Missing the required parameter 'ascLocation' when calling alertsGetSubscriptionLevelAlert(Async)");
        }

        // verify the required parameter 'alertName' is set
        if (alertName == null) {
            throw new ApiException("Missing the required parameter 'alertName' when calling alertsGetSubscriptionLevelAlert(Async)");
        }

        return alertsGetSubscriptionLevelAlertCall(apiVersion, subscriptionId, ascLocation, alertName, _callback);

    }

    /**
     * 
     * Get an alert that is associated with a subscription
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @return Alert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Alert alertsGetSubscriptionLevelAlert(String apiVersion, String subscriptionId, String ascLocation, String alertName) throws ApiException {
        ApiResponse<Alert> localVarResp = alertsGetSubscriptionLevelAlertWithHttpInfo(apiVersion, subscriptionId, ascLocation, alertName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get an alert that is associated with a subscription
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @return ApiResponse&lt;Alert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Alert> alertsGetSubscriptionLevelAlertWithHttpInfo(String apiVersion, String subscriptionId, String ascLocation, String alertName) throws ApiException {
        okhttp3.Call localVarCall = alertsGetSubscriptionLevelAlertValidateBeforeCall(apiVersion, subscriptionId, ascLocation, alertName, null);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get an alert that is associated with a subscription
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetSubscriptionLevelAlertAsync(String apiVersion, String subscriptionId, String ascLocation, String alertName, final ApiCallback<Alert> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsGetSubscriptionLevelAlertValidateBeforeCall(apiVersion, subscriptionId, ascLocation, alertName, _callback);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsList
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $select OData select. Optional. (optional)
     * @param $expand OData expand. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsListCall(String apiVersion, String subscriptionId, String $filter, String $select, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/alerts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsListValidateBeforeCall(String apiVersion, String subscriptionId, String $filter, String $select, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsList(Async)");
        }

        return alertsListCall(apiVersion, subscriptionId, $filter, $select, $expand, _callback);

    }

    /**
     * 
     * List all the alerts that are associated with the subscription
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $select OData select. Optional. (optional)
     * @param $expand OData expand. Optional. (optional)
     * @return AlertList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertList alertsList(String apiVersion, String subscriptionId, String $filter, String $select, String $expand) throws ApiException {
        ApiResponse<AlertList> localVarResp = alertsListWithHttpInfo(apiVersion, subscriptionId, $filter, $select, $expand);
        return localVarResp.getData();
    }

    /**
     * 
     * List all the alerts that are associated with the subscription
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $select OData select. Optional. (optional)
     * @param $expand OData expand. Optional. (optional)
     * @return ApiResponse&lt;AlertList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertList> alertsListWithHttpInfo(String apiVersion, String subscriptionId, String $filter, String $select, String $expand) throws ApiException {
        okhttp3.Call localVarCall = alertsListValidateBeforeCall(apiVersion, subscriptionId, $filter, $select, $expand, null);
        Type localVarReturnType = new TypeToken<AlertList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all the alerts that are associated with the subscription
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $select OData select. Optional. (optional)
     * @param $expand OData expand. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsListAsync(String apiVersion, String subscriptionId, String $filter, String $select, String $expand, final ApiCallback<AlertList> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsListValidateBeforeCall(apiVersion, subscriptionId, $filter, $select, $expand, _callback);
        Type localVarReturnType = new TypeToken<AlertList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsListByResourceGroup
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $select OData select. Optional. (optional)
     * @param $expand OData expand. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsListByResourceGroupCall(String apiVersion, String subscriptionId, String resourceGroupName, String $filter, String $select, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/alerts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsListByResourceGroupValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String $filter, String $select, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling alertsListByResourceGroup(Async)");
        }

        return alertsListByResourceGroupCall(apiVersion, subscriptionId, resourceGroupName, $filter, $select, $expand, _callback);

    }

    /**
     * 
     * List all the alerts that are associated with the resource group
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $select OData select. Optional. (optional)
     * @param $expand OData expand. Optional. (optional)
     * @return AlertList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertList alertsListByResourceGroup(String apiVersion, String subscriptionId, String resourceGroupName, String $filter, String $select, String $expand) throws ApiException {
        ApiResponse<AlertList> localVarResp = alertsListByResourceGroupWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, $filter, $select, $expand);
        return localVarResp.getData();
    }

    /**
     * 
     * List all the alerts that are associated with the resource group
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $select OData select. Optional. (optional)
     * @param $expand OData expand. Optional. (optional)
     * @return ApiResponse&lt;AlertList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertList> alertsListByResourceGroupWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String $filter, String $select, String $expand) throws ApiException {
        okhttp3.Call localVarCall = alertsListByResourceGroupValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, $filter, $select, $expand, null);
        Type localVarReturnType = new TypeToken<AlertList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all the alerts that are associated with the resource group
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $select OData select. Optional. (optional)
     * @param $expand OData expand. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsListByResourceGroupAsync(String apiVersion, String subscriptionId, String resourceGroupName, String $filter, String $select, String $expand, final ApiCallback<AlertList> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsListByResourceGroupValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, $filter, $select, $expand, _callback);
        Type localVarReturnType = new TypeToken<AlertList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsListResourceGroupLevelAlertsByRegion
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $select OData select. Optional. (optional)
     * @param $expand OData expand. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsListResourceGroupLevelAlertsByRegionCall(String apiVersion, String subscriptionId, String ascLocation, String resourceGroupName, String $filter, String $select, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "ascLocation" + "}", localVarApiClient.escapeString(ascLocation.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsListResourceGroupLevelAlertsByRegionValidateBeforeCall(String apiVersion, String subscriptionId, String ascLocation, String resourceGroupName, String $filter, String $select, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsListResourceGroupLevelAlertsByRegion(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsListResourceGroupLevelAlertsByRegion(Async)");
        }

        // verify the required parameter 'ascLocation' is set
        if (ascLocation == null) {
            throw new ApiException("Missing the required parameter 'ascLocation' when calling alertsListResourceGroupLevelAlertsByRegion(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling alertsListResourceGroupLevelAlertsByRegion(Async)");
        }

        return alertsListResourceGroupLevelAlertsByRegionCall(apiVersion, subscriptionId, ascLocation, resourceGroupName, $filter, $select, $expand, _callback);

    }

    /**
     * 
     * List all the alerts that are associated with the resource group that are stored in a specific location
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $select OData select. Optional. (optional)
     * @param $expand OData expand. Optional. (optional)
     * @return AlertList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertList alertsListResourceGroupLevelAlertsByRegion(String apiVersion, String subscriptionId, String ascLocation, String resourceGroupName, String $filter, String $select, String $expand) throws ApiException {
        ApiResponse<AlertList> localVarResp = alertsListResourceGroupLevelAlertsByRegionWithHttpInfo(apiVersion, subscriptionId, ascLocation, resourceGroupName, $filter, $select, $expand);
        return localVarResp.getData();
    }

    /**
     * 
     * List all the alerts that are associated with the resource group that are stored in a specific location
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $select OData select. Optional. (optional)
     * @param $expand OData expand. Optional. (optional)
     * @return ApiResponse&lt;AlertList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertList> alertsListResourceGroupLevelAlertsByRegionWithHttpInfo(String apiVersion, String subscriptionId, String ascLocation, String resourceGroupName, String $filter, String $select, String $expand) throws ApiException {
        okhttp3.Call localVarCall = alertsListResourceGroupLevelAlertsByRegionValidateBeforeCall(apiVersion, subscriptionId, ascLocation, resourceGroupName, $filter, $select, $expand, null);
        Type localVarReturnType = new TypeToken<AlertList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all the alerts that are associated with the resource group that are stored in a specific location
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $select OData select. Optional. (optional)
     * @param $expand OData expand. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsListResourceGroupLevelAlertsByRegionAsync(String apiVersion, String subscriptionId, String ascLocation, String resourceGroupName, String $filter, String $select, String $expand, final ApiCallback<AlertList> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsListResourceGroupLevelAlertsByRegionValidateBeforeCall(apiVersion, subscriptionId, ascLocation, resourceGroupName, $filter, $select, $expand, _callback);
        Type localVarReturnType = new TypeToken<AlertList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsListSubscriptionLevelAlertsByRegion
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $select OData select. Optional. (optional)
     * @param $expand OData expand. Optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsListSubscriptionLevelAlertsByRegionCall(String apiVersion, String subscriptionId, String ascLocation, String $filter, String $select, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "ascLocation" + "}", localVarApiClient.escapeString(ascLocation.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsListSubscriptionLevelAlertsByRegionValidateBeforeCall(String apiVersion, String subscriptionId, String ascLocation, String $filter, String $select, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsListSubscriptionLevelAlertsByRegion(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsListSubscriptionLevelAlertsByRegion(Async)");
        }

        // verify the required parameter 'ascLocation' is set
        if (ascLocation == null) {
            throw new ApiException("Missing the required parameter 'ascLocation' when calling alertsListSubscriptionLevelAlertsByRegion(Async)");
        }

        return alertsListSubscriptionLevelAlertsByRegionCall(apiVersion, subscriptionId, ascLocation, $filter, $select, $expand, _callback);

    }

    /**
     * 
     * List all the alerts that are associated with the subscription that are stored in a specific location
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $select OData select. Optional. (optional)
     * @param $expand OData expand. Optional. (optional)
     * @return AlertList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertList alertsListSubscriptionLevelAlertsByRegion(String apiVersion, String subscriptionId, String ascLocation, String $filter, String $select, String $expand) throws ApiException {
        ApiResponse<AlertList> localVarResp = alertsListSubscriptionLevelAlertsByRegionWithHttpInfo(apiVersion, subscriptionId, ascLocation, $filter, $select, $expand);
        return localVarResp.getData();
    }

    /**
     * 
     * List all the alerts that are associated with the subscription that are stored in a specific location
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $select OData select. Optional. (optional)
     * @param $expand OData expand. Optional. (optional)
     * @return ApiResponse&lt;AlertList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertList> alertsListSubscriptionLevelAlertsByRegionWithHttpInfo(String apiVersion, String subscriptionId, String ascLocation, String $filter, String $select, String $expand) throws ApiException {
        okhttp3.Call localVarCall = alertsListSubscriptionLevelAlertsByRegionValidateBeforeCall(apiVersion, subscriptionId, ascLocation, $filter, $select, $expand, null);
        Type localVarReturnType = new TypeToken<AlertList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all the alerts that are associated with the subscription that are stored in a specific location
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param $filter OData filter. Optional. (optional)
     * @param $select OData select. Optional. (optional)
     * @param $expand OData expand. Optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsListSubscriptionLevelAlertsByRegionAsync(String apiVersion, String subscriptionId, String ascLocation, String $filter, String $select, String $expand, final ApiCallback<AlertList> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsListSubscriptionLevelAlertsByRegionValidateBeforeCall(apiVersion, subscriptionId, ascLocation, $filter, $select, $expand, _callback);
        Type localVarReturnType = new TypeToken<AlertList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsUpdateResourceGroupLevelAlertStateToDismiss
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUpdateResourceGroupLevelAlertStateToDismissCall(String apiVersion, String subscriptionId, String ascLocation, String alertName, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/dismiss"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "ascLocation" + "}", localVarApiClient.escapeString(ascLocation.toString()))
            .replace("{" + "alertName" + "}", localVarApiClient.escapeString(alertName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsUpdateResourceGroupLevelAlertStateToDismissValidateBeforeCall(String apiVersion, String subscriptionId, String ascLocation, String alertName, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsUpdateResourceGroupLevelAlertStateToDismiss(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsUpdateResourceGroupLevelAlertStateToDismiss(Async)");
        }

        // verify the required parameter 'ascLocation' is set
        if (ascLocation == null) {
            throw new ApiException("Missing the required parameter 'ascLocation' when calling alertsUpdateResourceGroupLevelAlertStateToDismiss(Async)");
        }

        // verify the required parameter 'alertName' is set
        if (alertName == null) {
            throw new ApiException("Missing the required parameter 'alertName' when calling alertsUpdateResourceGroupLevelAlertStateToDismiss(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling alertsUpdateResourceGroupLevelAlertStateToDismiss(Async)");
        }

        return alertsUpdateResourceGroupLevelAlertStateToDismissCall(apiVersion, subscriptionId, ascLocation, alertName, resourceGroupName, _callback);

    }

    /**
     * 
     * Update the alert&#39;s state
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void alertsUpdateResourceGroupLevelAlertStateToDismiss(String apiVersion, String subscriptionId, String ascLocation, String alertName, String resourceGroupName) throws ApiException {
        alertsUpdateResourceGroupLevelAlertStateToDismissWithHttpInfo(apiVersion, subscriptionId, ascLocation, alertName, resourceGroupName);
    }

    /**
     * 
     * Update the alert&#39;s state
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> alertsUpdateResourceGroupLevelAlertStateToDismissWithHttpInfo(String apiVersion, String subscriptionId, String ascLocation, String alertName, String resourceGroupName) throws ApiException {
        okhttp3.Call localVarCall = alertsUpdateResourceGroupLevelAlertStateToDismissValidateBeforeCall(apiVersion, subscriptionId, ascLocation, alertName, resourceGroupName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update the alert&#39;s state
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUpdateResourceGroupLevelAlertStateToDismissAsync(String apiVersion, String subscriptionId, String ascLocation, String alertName, String resourceGroupName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsUpdateResourceGroupLevelAlertStateToDismissValidateBeforeCall(apiVersion, subscriptionId, ascLocation, alertName, resourceGroupName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsUpdateResourceGroupLevelAlertStateToReactivate
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUpdateResourceGroupLevelAlertStateToReactivateCall(String apiVersion, String subscriptionId, String ascLocation, String alertName, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/reactivate"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "ascLocation" + "}", localVarApiClient.escapeString(ascLocation.toString()))
            .replace("{" + "alertName" + "}", localVarApiClient.escapeString(alertName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsUpdateResourceGroupLevelAlertStateToReactivateValidateBeforeCall(String apiVersion, String subscriptionId, String ascLocation, String alertName, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsUpdateResourceGroupLevelAlertStateToReactivate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsUpdateResourceGroupLevelAlertStateToReactivate(Async)");
        }

        // verify the required parameter 'ascLocation' is set
        if (ascLocation == null) {
            throw new ApiException("Missing the required parameter 'ascLocation' when calling alertsUpdateResourceGroupLevelAlertStateToReactivate(Async)");
        }

        // verify the required parameter 'alertName' is set
        if (alertName == null) {
            throw new ApiException("Missing the required parameter 'alertName' when calling alertsUpdateResourceGroupLevelAlertStateToReactivate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling alertsUpdateResourceGroupLevelAlertStateToReactivate(Async)");
        }

        return alertsUpdateResourceGroupLevelAlertStateToReactivateCall(apiVersion, subscriptionId, ascLocation, alertName, resourceGroupName, _callback);

    }

    /**
     * 
     * Update the alert&#39;s state
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void alertsUpdateResourceGroupLevelAlertStateToReactivate(String apiVersion, String subscriptionId, String ascLocation, String alertName, String resourceGroupName) throws ApiException {
        alertsUpdateResourceGroupLevelAlertStateToReactivateWithHttpInfo(apiVersion, subscriptionId, ascLocation, alertName, resourceGroupName);
    }

    /**
     * 
     * Update the alert&#39;s state
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> alertsUpdateResourceGroupLevelAlertStateToReactivateWithHttpInfo(String apiVersion, String subscriptionId, String ascLocation, String alertName, String resourceGroupName) throws ApiException {
        okhttp3.Call localVarCall = alertsUpdateResourceGroupLevelAlertStateToReactivateValidateBeforeCall(apiVersion, subscriptionId, ascLocation, alertName, resourceGroupName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update the alert&#39;s state
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @param resourceGroupName The name of the resource group within the user&#39;s subscription. The name is case insensitive. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUpdateResourceGroupLevelAlertStateToReactivateAsync(String apiVersion, String subscriptionId, String ascLocation, String alertName, String resourceGroupName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsUpdateResourceGroupLevelAlertStateToReactivateValidateBeforeCall(apiVersion, subscriptionId, ascLocation, alertName, resourceGroupName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsUpdateSubscriptionLevelAlertStateToDismiss
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUpdateSubscriptionLevelAlertStateToDismissCall(String apiVersion, String subscriptionId, String ascLocation, String alertName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/dismiss"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "ascLocation" + "}", localVarApiClient.escapeString(ascLocation.toString()))
            .replace("{" + "alertName" + "}", localVarApiClient.escapeString(alertName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsUpdateSubscriptionLevelAlertStateToDismissValidateBeforeCall(String apiVersion, String subscriptionId, String ascLocation, String alertName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsUpdateSubscriptionLevelAlertStateToDismiss(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsUpdateSubscriptionLevelAlertStateToDismiss(Async)");
        }

        // verify the required parameter 'ascLocation' is set
        if (ascLocation == null) {
            throw new ApiException("Missing the required parameter 'ascLocation' when calling alertsUpdateSubscriptionLevelAlertStateToDismiss(Async)");
        }

        // verify the required parameter 'alertName' is set
        if (alertName == null) {
            throw new ApiException("Missing the required parameter 'alertName' when calling alertsUpdateSubscriptionLevelAlertStateToDismiss(Async)");
        }

        return alertsUpdateSubscriptionLevelAlertStateToDismissCall(apiVersion, subscriptionId, ascLocation, alertName, _callback);

    }

    /**
     * 
     * Update the alert&#39;s state
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void alertsUpdateSubscriptionLevelAlertStateToDismiss(String apiVersion, String subscriptionId, String ascLocation, String alertName) throws ApiException {
        alertsUpdateSubscriptionLevelAlertStateToDismissWithHttpInfo(apiVersion, subscriptionId, ascLocation, alertName);
    }

    /**
     * 
     * Update the alert&#39;s state
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> alertsUpdateSubscriptionLevelAlertStateToDismissWithHttpInfo(String apiVersion, String subscriptionId, String ascLocation, String alertName) throws ApiException {
        okhttp3.Call localVarCall = alertsUpdateSubscriptionLevelAlertStateToDismissValidateBeforeCall(apiVersion, subscriptionId, ascLocation, alertName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update the alert&#39;s state
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUpdateSubscriptionLevelAlertStateToDismissAsync(String apiVersion, String subscriptionId, String ascLocation, String alertName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsUpdateSubscriptionLevelAlertStateToDismissValidateBeforeCall(apiVersion, subscriptionId, ascLocation, alertName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsUpdateSubscriptionLevelAlertStateToReactivate
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUpdateSubscriptionLevelAlertStateToReactivateCall(String apiVersion, String subscriptionId, String ascLocation, String alertName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Security/locations/{ascLocation}/alerts/{alertName}/reactivate"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "ascLocation" + "}", localVarApiClient.escapeString(ascLocation.toString()))
            .replace("{" + "alertName" + "}", localVarApiClient.escapeString(alertName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsUpdateSubscriptionLevelAlertStateToReactivateValidateBeforeCall(String apiVersion, String subscriptionId, String ascLocation, String alertName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsUpdateSubscriptionLevelAlertStateToReactivate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsUpdateSubscriptionLevelAlertStateToReactivate(Async)");
        }

        // verify the required parameter 'ascLocation' is set
        if (ascLocation == null) {
            throw new ApiException("Missing the required parameter 'ascLocation' when calling alertsUpdateSubscriptionLevelAlertStateToReactivate(Async)");
        }

        // verify the required parameter 'alertName' is set
        if (alertName == null) {
            throw new ApiException("Missing the required parameter 'alertName' when calling alertsUpdateSubscriptionLevelAlertStateToReactivate(Async)");
        }

        return alertsUpdateSubscriptionLevelAlertStateToReactivateCall(apiVersion, subscriptionId, ascLocation, alertName, _callback);

    }

    /**
     * 
     * Update the alert&#39;s state
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void alertsUpdateSubscriptionLevelAlertStateToReactivate(String apiVersion, String subscriptionId, String ascLocation, String alertName) throws ApiException {
        alertsUpdateSubscriptionLevelAlertStateToReactivateWithHttpInfo(apiVersion, subscriptionId, ascLocation, alertName);
    }

    /**
     * 
     * Update the alert&#39;s state
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> alertsUpdateSubscriptionLevelAlertStateToReactivateWithHttpInfo(String apiVersion, String subscriptionId, String ascLocation, String alertName) throws ApiException {
        okhttp3.Call localVarCall = alertsUpdateSubscriptionLevelAlertStateToReactivateValidateBeforeCall(apiVersion, subscriptionId, ascLocation, alertName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update the alert&#39;s state
     * @param apiVersion API version for the operation (required)
     * @param subscriptionId Azure subscription ID (required)
     * @param ascLocation The location where ASC stores the data of the subscription. can be retrieved from Get locations (required)
     * @param alertName Name of the alert object (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsUpdateSubscriptionLevelAlertStateToReactivateAsync(String apiVersion, String subscriptionId, String ascLocation, String alertName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsUpdateSubscriptionLevelAlertStateToReactivateValidateBeforeCall(apiVersion, subscriptionId, ascLocation, alertName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
