/*
 * Security Center
 * API spec for Microsoft.Security (Azure Security Center) resource provider
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Alert;
import org.openapitools.client.model.AlertList;
import org.openapitools.client.model.AlertsListDefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AlertsApi
 */
@Disabled
public class AlertsApiTest {

    private final AlertsApi api = new AlertsApi();

    /**
     * Get an alert that is associated a resource group or a resource in a resource group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsGetResourceGroupLevelAlertsTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String ascLocation = null;
        String alertName = null;
        String resourceGroupName = null;
        Alert response = api.alertsGetResourceGroupLevelAlerts(apiVersion, subscriptionId, ascLocation, alertName, resourceGroupName);
        // TODO: test validations
    }

    /**
     * Get an alert that is associated with a subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsGetSubscriptionLevelAlertTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String ascLocation = null;
        String alertName = null;
        Alert response = api.alertsGetSubscriptionLevelAlert(apiVersion, subscriptionId, ascLocation, alertName);
        // TODO: test validations
    }

    /**
     * List all the alerts that are associated with the subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        String $select = null;
        String $expand = null;
        AlertList response = api.alertsList(apiVersion, subscriptionId, $filter, $select, $expand);
        // TODO: test validations
    }

    /**
     * List all the alerts that are associated with the resource group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsListByResourceGroupTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String $filter = null;
        String $select = null;
        String $expand = null;
        AlertList response = api.alertsListByResourceGroup(apiVersion, subscriptionId, resourceGroupName, $filter, $select, $expand);
        // TODO: test validations
    }

    /**
     * List all the alerts that are associated with the resource group that are stored in a specific location
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsListResourceGroupLevelAlertsByRegionTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String ascLocation = null;
        String resourceGroupName = null;
        String $filter = null;
        String $select = null;
        String $expand = null;
        AlertList response = api.alertsListResourceGroupLevelAlertsByRegion(apiVersion, subscriptionId, ascLocation, resourceGroupName, $filter, $select, $expand);
        // TODO: test validations
    }

    /**
     * List all the alerts that are associated with the subscription that are stored in a specific location
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsListSubscriptionLevelAlertsByRegionTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String ascLocation = null;
        String $filter = null;
        String $select = null;
        String $expand = null;
        AlertList response = api.alertsListSubscriptionLevelAlertsByRegion(apiVersion, subscriptionId, ascLocation, $filter, $select, $expand);
        // TODO: test validations
    }

    /**
     * Update the alert&#39;s state
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsUpdateResourceGroupLevelAlertStateToDismissTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String ascLocation = null;
        String alertName = null;
        String resourceGroupName = null;
        api.alertsUpdateResourceGroupLevelAlertStateToDismiss(apiVersion, subscriptionId, ascLocation, alertName, resourceGroupName);
        // TODO: test validations
    }

    /**
     * Update the alert&#39;s state
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsUpdateResourceGroupLevelAlertStateToReactivateTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String ascLocation = null;
        String alertName = null;
        String resourceGroupName = null;
        api.alertsUpdateResourceGroupLevelAlertStateToReactivate(apiVersion, subscriptionId, ascLocation, alertName, resourceGroupName);
        // TODO: test validations
    }

    /**
     * Update the alert&#39;s state
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsUpdateSubscriptionLevelAlertStateToDismissTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String ascLocation = null;
        String alertName = null;
        api.alertsUpdateSubscriptionLevelAlertStateToDismiss(apiVersion, subscriptionId, ascLocation, alertName);
        // TODO: test validations
    }

    /**
     * Update the alert&#39;s state
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsUpdateSubscriptionLevelAlertStateToReactivateTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String ascLocation = null;
        String alertName = null;
        api.alertsUpdateSubscriptionLevelAlertStateToReactivate(apiVersion, subscriptionId, ascLocation, alertName);
        // TODO: test validations
    }

}
