/**
 * LogicAppsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConnectionGatewaysApi_H
#define OAI_OAIConnectionGatewaysApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConnectionGatewayDefinition.h"
#include "OAIConnectionGatewayDefinitionCollection.h"
#include "OAIConnectionGatewayInstallationDefinition.h"
#include "OAIConnectionGatewayInstallationDefinitionCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConnectionGatewaysApi : public QObject {
    Q_OBJECT

public:
    OAIConnectionGatewaysApi(const int timeOut = 0);
    ~OAIConnectionGatewaysApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  gateway_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void connectionGatewayInstallationsGet(const QString &subscription_id, const QString &location, const QString &gateway_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void connectionGatewayInstallationsList(const QString &subscription_id, const QString &location, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  connection_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_gateway OAIConnectionGatewayDefinition [required]
    */
    virtual void connectionGatewaysCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &connection_gateway_name, const QString &api_version, const OAIConnectionGatewayDefinition &connection_gateway);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  connection_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void connectionGatewaysDelete(const QString &subscription_id, const QString &resource_group_name, const QString &connection_gateway_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  connection_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void connectionGatewaysGet(const QString &subscription_id, const QString &resource_group_name, const QString &connection_gateway_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void connectionGatewaysList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void connectionGatewaysListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  connection_gateway_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection_gateway OAIConnectionGatewayDefinition [required]
    */
    virtual void connectionGatewaysUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &connection_gateway_name, const QString &api_version, const OAIConnectionGatewayDefinition &connection_gateway);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void connectionGatewayInstallationsGetCallback(OAIHttpRequestWorker *worker);
    void connectionGatewayInstallationsListCallback(OAIHttpRequestWorker *worker);
    void connectionGatewaysCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void connectionGatewaysDeleteCallback(OAIHttpRequestWorker *worker);
    void connectionGatewaysGetCallback(OAIHttpRequestWorker *worker);
    void connectionGatewaysListCallback(OAIHttpRequestWorker *worker);
    void connectionGatewaysListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void connectionGatewaysUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void connectionGatewayInstallationsGetSignal(OAIConnectionGatewayInstallationDefinition summary);
    void connectionGatewayInstallationsListSignal(OAIConnectionGatewayInstallationDefinitionCollection summary);
    void connectionGatewaysCreateOrUpdateSignal(OAIConnectionGatewayDefinition summary);
    void connectionGatewaysDeleteSignal();
    void connectionGatewaysGetSignal(OAIConnectionGatewayDefinition summary);
    void connectionGatewaysListSignal(OAIConnectionGatewayDefinitionCollection summary);
    void connectionGatewaysListByResourceGroupSignal(OAIConnectionGatewayDefinitionCollection summary);
    void connectionGatewaysUpdateSignal(OAIConnectionGatewayDefinition summary);


    void connectionGatewayInstallationsGetSignalFull(OAIHttpRequestWorker *worker, OAIConnectionGatewayInstallationDefinition summary);
    void connectionGatewayInstallationsListSignalFull(OAIHttpRequestWorker *worker, OAIConnectionGatewayInstallationDefinitionCollection summary);
    void connectionGatewaysCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConnectionGatewayDefinition summary);
    void connectionGatewaysDeleteSignalFull(OAIHttpRequestWorker *worker);
    void connectionGatewaysGetSignalFull(OAIHttpRequestWorker *worker, OAIConnectionGatewayDefinition summary);
    void connectionGatewaysListSignalFull(OAIHttpRequestWorker *worker, OAIConnectionGatewayDefinitionCollection summary);
    void connectionGatewaysListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIConnectionGatewayDefinitionCollection summary);
    void connectionGatewaysUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConnectionGatewayDefinition summary);

    Q_DECL_DEPRECATED_X("Use connectionGatewayInstallationsGetSignalError() instead")
    void connectionGatewayInstallationsGetSignalE(OAIConnectionGatewayInstallationDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionGatewayInstallationsGetSignalError(OAIConnectionGatewayInstallationDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionGatewayInstallationsListSignalError() instead")
    void connectionGatewayInstallationsListSignalE(OAIConnectionGatewayInstallationDefinitionCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionGatewayInstallationsListSignalError(OAIConnectionGatewayInstallationDefinitionCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionGatewaysCreateOrUpdateSignalError() instead")
    void connectionGatewaysCreateOrUpdateSignalE(OAIConnectionGatewayDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionGatewaysCreateOrUpdateSignalError(OAIConnectionGatewayDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionGatewaysDeleteSignalError() instead")
    void connectionGatewaysDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void connectionGatewaysDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionGatewaysGetSignalError() instead")
    void connectionGatewaysGetSignalE(OAIConnectionGatewayDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionGatewaysGetSignalError(OAIConnectionGatewayDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionGatewaysListSignalError() instead")
    void connectionGatewaysListSignalE(OAIConnectionGatewayDefinitionCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionGatewaysListSignalError(OAIConnectionGatewayDefinitionCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionGatewaysListByResourceGroupSignalError() instead")
    void connectionGatewaysListByResourceGroupSignalE(OAIConnectionGatewayDefinitionCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionGatewaysListByResourceGroupSignalError(OAIConnectionGatewayDefinitionCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionGatewaysUpdateSignalError() instead")
    void connectionGatewaysUpdateSignalE(OAIConnectionGatewayDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionGatewaysUpdateSignalError(OAIConnectionGatewayDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use connectionGatewayInstallationsGetSignalErrorFull() instead")
    void connectionGatewayInstallationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionGatewayInstallationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionGatewayInstallationsListSignalErrorFull() instead")
    void connectionGatewayInstallationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionGatewayInstallationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionGatewaysCreateOrUpdateSignalErrorFull() instead")
    void connectionGatewaysCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionGatewaysCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionGatewaysDeleteSignalErrorFull() instead")
    void connectionGatewaysDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionGatewaysDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionGatewaysGetSignalErrorFull() instead")
    void connectionGatewaysGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionGatewaysGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionGatewaysListSignalErrorFull() instead")
    void connectionGatewaysListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionGatewaysListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionGatewaysListByResourceGroupSignalErrorFull() instead")
    void connectionGatewaysListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionGatewaysListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionGatewaysUpdateSignalErrorFull() instead")
    void connectionGatewaysUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionGatewaysUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
