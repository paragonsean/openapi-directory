/**
 * LogicAppsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConnectionsApi_H
#define OAI_OAIConnectionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiConnectionDefinition.h"
#include "OAIApiConnectionDefinitionCollection.h"
#include "OAIConfirmConsentCodeDefinition.h"
#include "OAIConsentLinkCollection.h"
#include "OAIListConsentLinksDefinition.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConnectionsApi : public QObject {
    Q_OBJECT

public:
    OAIConnectionsApi(const int timeOut = 0);
    ~OAIConnectionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  confirm_consent_code OAIConfirmConsentCodeDefinition [required]
    */
    virtual void connectionsConfirmConsentCode(const QString &subscription_id, const QString &resource_group_name, const QString &connection_name, const QString &api_version, const OAIConfirmConsentCodeDefinition &confirm_consent_code);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection OAIApiConnectionDefinition [required]
    */
    virtual void connectionsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &connection_name, const QString &api_version, const OAIApiConnectionDefinition &connection);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  connection_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void connectionsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &connection_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  connection_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void connectionsGet(const QString &subscription_id, const QString &resource_group_name, const QString &connection_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void connectionsList(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  list_consent_link OAIListConsentLinksDefinition [required]
    */
    virtual void connectionsListConsentLinks(const QString &subscription_id, const QString &resource_group_name, const QString &connection_name, const QString &api_version, const OAIListConsentLinksDefinition &list_consent_link);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  connection_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  connection OAIApiConnectionDefinition [required]
    */
    virtual void connectionsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &connection_name, const QString &api_version, const OAIApiConnectionDefinition &connection);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void connectionsConfirmConsentCodeCallback(OAIHttpRequestWorker *worker);
    void connectionsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void connectionsDeleteCallback(OAIHttpRequestWorker *worker);
    void connectionsGetCallback(OAIHttpRequestWorker *worker);
    void connectionsListCallback(OAIHttpRequestWorker *worker);
    void connectionsListConsentLinksCallback(OAIHttpRequestWorker *worker);
    void connectionsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void connectionsConfirmConsentCodeSignal(OAIConfirmConsentCodeDefinition summary);
    void connectionsCreateOrUpdateSignal(OAIApiConnectionDefinition summary);
    void connectionsDeleteSignal();
    void connectionsGetSignal(OAIApiConnectionDefinition summary);
    void connectionsListSignal(OAIApiConnectionDefinitionCollection summary);
    void connectionsListConsentLinksSignal(OAIConsentLinkCollection summary);
    void connectionsUpdateSignal(OAIApiConnectionDefinition summary);


    void connectionsConfirmConsentCodeSignalFull(OAIHttpRequestWorker *worker, OAIConfirmConsentCodeDefinition summary);
    void connectionsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIApiConnectionDefinition summary);
    void connectionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void connectionsGetSignalFull(OAIHttpRequestWorker *worker, OAIApiConnectionDefinition summary);
    void connectionsListSignalFull(OAIHttpRequestWorker *worker, OAIApiConnectionDefinitionCollection summary);
    void connectionsListConsentLinksSignalFull(OAIHttpRequestWorker *worker, OAIConsentLinkCollection summary);
    void connectionsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIApiConnectionDefinition summary);

    Q_DECL_DEPRECATED_X("Use connectionsConfirmConsentCodeSignalError() instead")
    void connectionsConfirmConsentCodeSignalE(OAIConfirmConsentCodeDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionsConfirmConsentCodeSignalError(OAIConfirmConsentCodeDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionsCreateOrUpdateSignalError() instead")
    void connectionsCreateOrUpdateSignalE(OAIApiConnectionDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionsCreateOrUpdateSignalError(OAIApiConnectionDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionsDeleteSignalError() instead")
    void connectionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void connectionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionsGetSignalError() instead")
    void connectionsGetSignalE(OAIApiConnectionDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionsGetSignalError(OAIApiConnectionDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionsListSignalError() instead")
    void connectionsListSignalE(OAIApiConnectionDefinitionCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionsListSignalError(OAIApiConnectionDefinitionCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionsListConsentLinksSignalError() instead")
    void connectionsListConsentLinksSignalE(OAIConsentLinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionsListConsentLinksSignalError(OAIConsentLinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionsUpdateSignalError() instead")
    void connectionsUpdateSignalE(OAIApiConnectionDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionsUpdateSignalError(OAIApiConnectionDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use connectionsConfirmConsentCodeSignalErrorFull() instead")
    void connectionsConfirmConsentCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionsConfirmConsentCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionsCreateOrUpdateSignalErrorFull() instead")
    void connectionsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionsDeleteSignalErrorFull() instead")
    void connectionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionsGetSignalErrorFull() instead")
    void connectionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionsListSignalErrorFull() instead")
    void connectionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionsListConsentLinksSignalErrorFull() instead")
    void connectionsListConsentLinksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionsListConsentLinksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectionsUpdateSignalErrorFull() instead")
    void connectionsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectionsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
