/**
 * LogicAppsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomApiPropertiesDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomApiPropertiesDefinition::OAICustomApiPropertiesDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomApiPropertiesDefinition::OAICustomApiPropertiesDefinition() {
    this->initializeModel();
}

OAICustomApiPropertiesDefinition::~OAICustomApiPropertiesDefinition() {}

void OAICustomApiPropertiesDefinition::initializeModel() {

    m_api_definitions_isSet = false;
    m_api_definitions_isValid = false;

    m_api_type_isSet = false;
    m_api_type_isValid = false;

    m_backend_service_isSet = false;
    m_backend_service_isValid = false;

    m_brand_color_isSet = false;
    m_brand_color_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_connection_parameters_isSet = false;
    m_connection_parameters_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_icon_uri_isSet = false;
    m_icon_uri_isValid = false;

    m_runtime_urls_isSet = false;
    m_runtime_urls_isValid = false;

    m_swagger_isSet = false;
    m_swagger_isValid = false;

    m_wsdl_definition_isSet = false;
    m_wsdl_definition_isValid = false;
}

void OAICustomApiPropertiesDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomApiPropertiesDefinition::fromJsonObject(QJsonObject json) {

    m_api_definitions_isValid = ::OpenAPI::fromJsonValue(m_api_definitions, json[QString("apiDefinitions")]);
    m_api_definitions_isSet = !json[QString("apiDefinitions")].isNull() && m_api_definitions_isValid;

    m_api_type_isValid = ::OpenAPI::fromJsonValue(m_api_type, json[QString("apiType")]);
    m_api_type_isSet = !json[QString("apiType")].isNull() && m_api_type_isValid;

    m_backend_service_isValid = ::OpenAPI::fromJsonValue(m_backend_service, json[QString("backendService")]);
    m_backend_service_isSet = !json[QString("backendService")].isNull() && m_backend_service_isValid;

    m_brand_color_isValid = ::OpenAPI::fromJsonValue(m_brand_color, json[QString("brandColor")]);
    m_brand_color_isSet = !json[QString("brandColor")].isNull() && m_brand_color_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_connection_parameters_isValid = ::OpenAPI::fromJsonValue(m_connection_parameters, json[QString("connectionParameters")]);
    m_connection_parameters_isSet = !json[QString("connectionParameters")].isNull() && m_connection_parameters_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_icon_uri_isValid = ::OpenAPI::fromJsonValue(m_icon_uri, json[QString("iconUri")]);
    m_icon_uri_isSet = !json[QString("iconUri")].isNull() && m_icon_uri_isValid;

    m_runtime_urls_isValid = ::OpenAPI::fromJsonValue(m_runtime_urls, json[QString("runtimeUrls")]);
    m_runtime_urls_isSet = !json[QString("runtimeUrls")].isNull() && m_runtime_urls_isValid;

    m_swagger_isValid = ::OpenAPI::fromJsonValue(m_swagger, json[QString("swagger")]);
    m_swagger_isSet = !json[QString("swagger")].isNull() && m_swagger_isValid;

    m_wsdl_definition_isValid = ::OpenAPI::fromJsonValue(m_wsdl_definition, json[QString("wsdlDefinition")]);
    m_wsdl_definition_isSet = !json[QString("wsdlDefinition")].isNull() && m_wsdl_definition_isValid;
}

QString OAICustomApiPropertiesDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomApiPropertiesDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_api_definitions.isSet()) {
        obj.insert(QString("apiDefinitions"), ::OpenAPI::toJsonValue(m_api_definitions));
    }
    if (m_api_type.isSet()) {
        obj.insert(QString("apiType"), ::OpenAPI::toJsonValue(m_api_type));
    }
    if (m_backend_service.isSet()) {
        obj.insert(QString("backendService"), ::OpenAPI::toJsonValue(m_backend_service));
    }
    if (m_brand_color_isSet) {
        obj.insert(QString("brandColor"), ::OpenAPI::toJsonValue(m_brand_color));
    }
    if (m_capabilities.size() > 0) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_connection_parameters.size() > 0) {
        obj.insert(QString("connectionParameters"), ::OpenAPI::toJsonValue(m_connection_parameters));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_icon_uri_isSet) {
        obj.insert(QString("iconUri"), ::OpenAPI::toJsonValue(m_icon_uri));
    }
    if (m_runtime_urls.size() > 0) {
        obj.insert(QString("runtimeUrls"), ::OpenAPI::toJsonValue(m_runtime_urls));
    }
    if (m_swagger_isSet) {
        obj.insert(QString("swagger"), ::OpenAPI::toJsonValue(m_swagger));
    }
    if (m_wsdl_definition.isSet()) {
        obj.insert(QString("wsdlDefinition"), ::OpenAPI::toJsonValue(m_wsdl_definition));
    }
    return obj;
}

OAIApiResourceDefinitions OAICustomApiPropertiesDefinition::getApiDefinitions() const {
    return m_api_definitions;
}
void OAICustomApiPropertiesDefinition::setApiDefinitions(const OAIApiResourceDefinitions &api_definitions) {
    m_api_definitions = api_definitions;
    m_api_definitions_isSet = true;
}

bool OAICustomApiPropertiesDefinition::is_api_definitions_Set() const{
    return m_api_definitions_isSet;
}

bool OAICustomApiPropertiesDefinition::is_api_definitions_Valid() const{
    return m_api_definitions_isValid;
}

OAIApiType OAICustomApiPropertiesDefinition::getApiType() const {
    return m_api_type;
}
void OAICustomApiPropertiesDefinition::setApiType(const OAIApiType &api_type) {
    m_api_type = api_type;
    m_api_type_isSet = true;
}

bool OAICustomApiPropertiesDefinition::is_api_type_Set() const{
    return m_api_type_isSet;
}

bool OAICustomApiPropertiesDefinition::is_api_type_Valid() const{
    return m_api_type_isValid;
}

OAIApiResourceBackendService OAICustomApiPropertiesDefinition::getBackendService() const {
    return m_backend_service;
}
void OAICustomApiPropertiesDefinition::setBackendService(const OAIApiResourceBackendService &backend_service) {
    m_backend_service = backend_service;
    m_backend_service_isSet = true;
}

bool OAICustomApiPropertiesDefinition::is_backend_service_Set() const{
    return m_backend_service_isSet;
}

bool OAICustomApiPropertiesDefinition::is_backend_service_Valid() const{
    return m_backend_service_isValid;
}

QString OAICustomApiPropertiesDefinition::getBrandColor() const {
    return m_brand_color;
}
void OAICustomApiPropertiesDefinition::setBrandColor(const QString &brand_color) {
    m_brand_color = brand_color;
    m_brand_color_isSet = true;
}

bool OAICustomApiPropertiesDefinition::is_brand_color_Set() const{
    return m_brand_color_isSet;
}

bool OAICustomApiPropertiesDefinition::is_brand_color_Valid() const{
    return m_brand_color_isValid;
}

QList<QString> OAICustomApiPropertiesDefinition::getCapabilities() const {
    return m_capabilities;
}
void OAICustomApiPropertiesDefinition::setCapabilities(const QList<QString> &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAICustomApiPropertiesDefinition::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAICustomApiPropertiesDefinition::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QMap<QString, OAIConnectionParameter> OAICustomApiPropertiesDefinition::getConnectionParameters() const {
    return m_connection_parameters;
}
void OAICustomApiPropertiesDefinition::setConnectionParameters(const QMap<QString, OAIConnectionParameter> &connection_parameters) {
    m_connection_parameters = connection_parameters;
    m_connection_parameters_isSet = true;
}

bool OAICustomApiPropertiesDefinition::is_connection_parameters_Set() const{
    return m_connection_parameters_isSet;
}

bool OAICustomApiPropertiesDefinition::is_connection_parameters_Valid() const{
    return m_connection_parameters_isValid;
}

QString OAICustomApiPropertiesDefinition::getDescription() const {
    return m_description;
}
void OAICustomApiPropertiesDefinition::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICustomApiPropertiesDefinition::is_description_Set() const{
    return m_description_isSet;
}

bool OAICustomApiPropertiesDefinition::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICustomApiPropertiesDefinition::getDisplayName() const {
    return m_display_name;
}
void OAICustomApiPropertiesDefinition::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAICustomApiPropertiesDefinition::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAICustomApiPropertiesDefinition::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAICustomApiPropertiesDefinition::getIconUri() const {
    return m_icon_uri;
}
void OAICustomApiPropertiesDefinition::setIconUri(const QString &icon_uri) {
    m_icon_uri = icon_uri;
    m_icon_uri_isSet = true;
}

bool OAICustomApiPropertiesDefinition::is_icon_uri_Set() const{
    return m_icon_uri_isSet;
}

bool OAICustomApiPropertiesDefinition::is_icon_uri_Valid() const{
    return m_icon_uri_isValid;
}

QList<QString> OAICustomApiPropertiesDefinition::getRuntimeUrls() const {
    return m_runtime_urls;
}
void OAICustomApiPropertiesDefinition::setRuntimeUrls(const QList<QString> &runtime_urls) {
    m_runtime_urls = runtime_urls;
    m_runtime_urls_isSet = true;
}

bool OAICustomApiPropertiesDefinition::is_runtime_urls_Set() const{
    return m_runtime_urls_isSet;
}

bool OAICustomApiPropertiesDefinition::is_runtime_urls_Valid() const{
    return m_runtime_urls_isValid;
}

OAIObject OAICustomApiPropertiesDefinition::getSwagger() const {
    return m_swagger;
}
void OAICustomApiPropertiesDefinition::setSwagger(const OAIObject &swagger) {
    m_swagger = swagger;
    m_swagger_isSet = true;
}

bool OAICustomApiPropertiesDefinition::is_swagger_Set() const{
    return m_swagger_isSet;
}

bool OAICustomApiPropertiesDefinition::is_swagger_Valid() const{
    return m_swagger_isValid;
}

OAIWsdlDefinition OAICustomApiPropertiesDefinition::getWsdlDefinition() const {
    return m_wsdl_definition;
}
void OAICustomApiPropertiesDefinition::setWsdlDefinition(const OAIWsdlDefinition &wsdl_definition) {
    m_wsdl_definition = wsdl_definition;
    m_wsdl_definition_isSet = true;
}

bool OAICustomApiPropertiesDefinition::is_wsdl_definition_Set() const{
    return m_wsdl_definition_isSet;
}

bool OAICustomApiPropertiesDefinition::is_wsdl_definition_Valid() const{
    return m_wsdl_definition_isValid;
}

bool OAICustomApiPropertiesDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_definitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_swagger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wsdl_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomApiPropertiesDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
