/**
 * LogicAppsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiOAuthSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiOAuthSettings::OAIApiOAuthSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiOAuthSettings::OAIApiOAuthSettings() {
    this->initializeModel();
}

OAIApiOAuthSettings::~OAIApiOAuthSettings() {}

void OAIApiOAuthSettings::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_custom_parameters_isSet = false;
    m_custom_parameters_isValid = false;

    m_identity_provider_isSet = false;
    m_identity_provider_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_redirect_url_isSet = false;
    m_redirect_url_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;
}

void OAIApiOAuthSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiOAuthSettings::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;

    m_custom_parameters_isValid = ::OpenAPI::fromJsonValue(m_custom_parameters, json[QString("customParameters")]);
    m_custom_parameters_isSet = !json[QString("customParameters")].isNull() && m_custom_parameters_isValid;

    m_identity_provider_isValid = ::OpenAPI::fromJsonValue(m_identity_provider, json[QString("identityProvider")]);
    m_identity_provider_isSet = !json[QString("identityProvider")].isNull() && m_identity_provider_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_redirect_url_isValid = ::OpenAPI::fromJsonValue(m_redirect_url, json[QString("redirectUrl")]);
    m_redirect_url_isSet = !json[QString("redirectUrl")].isNull() && m_redirect_url_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;
}

QString OAIApiOAuthSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiOAuthSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_custom_parameters.size() > 0) {
        obj.insert(QString("customParameters"), ::OpenAPI::toJsonValue(m_custom_parameters));
    }
    if (m_identity_provider_isSet) {
        obj.insert(QString("identityProvider"), ::OpenAPI::toJsonValue(m_identity_provider));
    }
    if (m_properties_isSet) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_redirect_url_isSet) {
        obj.insert(QString("redirectUrl"), ::OpenAPI::toJsonValue(m_redirect_url));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    return obj;
}

QString OAIApiOAuthSettings::getClientId() const {
    return m_client_id;
}
void OAIApiOAuthSettings::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIApiOAuthSettings::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIApiOAuthSettings::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIApiOAuthSettings::getClientSecret() const {
    return m_client_secret;
}
void OAIApiOAuthSettings::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIApiOAuthSettings::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIApiOAuthSettings::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QMap<QString, OAIApiOAuthSettingsParameter> OAIApiOAuthSettings::getCustomParameters() const {
    return m_custom_parameters;
}
void OAIApiOAuthSettings::setCustomParameters(const QMap<QString, OAIApiOAuthSettingsParameter> &custom_parameters) {
    m_custom_parameters = custom_parameters;
    m_custom_parameters_isSet = true;
}

bool OAIApiOAuthSettings::is_custom_parameters_Set() const{
    return m_custom_parameters_isSet;
}

bool OAIApiOAuthSettings::is_custom_parameters_Valid() const{
    return m_custom_parameters_isValid;
}

QString OAIApiOAuthSettings::getIdentityProvider() const {
    return m_identity_provider;
}
void OAIApiOAuthSettings::setIdentityProvider(const QString &identity_provider) {
    m_identity_provider = identity_provider;
    m_identity_provider_isSet = true;
}

bool OAIApiOAuthSettings::is_identity_provider_Set() const{
    return m_identity_provider_isSet;
}

bool OAIApiOAuthSettings::is_identity_provider_Valid() const{
    return m_identity_provider_isValid;
}

OAIObject OAIApiOAuthSettings::getProperties() const {
    return m_properties;
}
void OAIApiOAuthSettings::setProperties(const OAIObject &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIApiOAuthSettings::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIApiOAuthSettings::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIApiOAuthSettings::getRedirectUrl() const {
    return m_redirect_url;
}
void OAIApiOAuthSettings::setRedirectUrl(const QString &redirect_url) {
    m_redirect_url = redirect_url;
    m_redirect_url_isSet = true;
}

bool OAIApiOAuthSettings::is_redirect_url_Set() const{
    return m_redirect_url_isSet;
}

bool OAIApiOAuthSettings::is_redirect_url_Valid() const{
    return m_redirect_url_isValid;
}

QList<QString> OAIApiOAuthSettings::getScopes() const {
    return m_scopes;
}
void OAIApiOAuthSettings::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIApiOAuthSettings::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIApiOAuthSettings::is_scopes_Valid() const{
    return m_scopes_isValid;
}

bool OAIApiOAuthSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiOAuthSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
