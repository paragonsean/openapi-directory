/**
 * LogicAppsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiResourceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiResourceProperties::OAIApiResourceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiResourceProperties::OAIApiResourceProperties() {
    this->initializeModel();
}

OAIApiResourceProperties::~OAIApiResourceProperties() {}

void OAIApiResourceProperties::initializeModel() {

    m_api_definition_url_isSet = false;
    m_api_definition_url_isValid = false;

    m_api_definitions_isSet = false;
    m_api_definitions_isValid = false;

    m_backend_service_isSet = false;
    m_backend_service_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_connection_parameters_isSet = false;
    m_connection_parameters_isValid = false;

    m_general_information_isSet = false;
    m_general_information_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_policies_isSet = false;
    m_policies_isValid = false;

    m_runtime_urls_isSet = false;
    m_runtime_urls_isValid = false;

    m_swagger_isSet = false;
    m_swagger_isValid = false;
}

void OAIApiResourceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiResourceProperties::fromJsonObject(QJsonObject json) {

    m_api_definition_url_isValid = ::OpenAPI::fromJsonValue(m_api_definition_url, json[QString("apiDefinitionUrl")]);
    m_api_definition_url_isSet = !json[QString("apiDefinitionUrl")].isNull() && m_api_definition_url_isValid;

    m_api_definitions_isValid = ::OpenAPI::fromJsonValue(m_api_definitions, json[QString("apiDefinitions")]);
    m_api_definitions_isSet = !json[QString("apiDefinitions")].isNull() && m_api_definitions_isValid;

    m_backend_service_isValid = ::OpenAPI::fromJsonValue(m_backend_service, json[QString("backendService")]);
    m_backend_service_isSet = !json[QString("backendService")].isNull() && m_backend_service_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_connection_parameters_isValid = ::OpenAPI::fromJsonValue(m_connection_parameters, json[QString("connectionParameters")]);
    m_connection_parameters_isSet = !json[QString("connectionParameters")].isNull() && m_connection_parameters_isValid;

    m_general_information_isValid = ::OpenAPI::fromJsonValue(m_general_information, json[QString("generalInformation")]);
    m_general_information_isSet = !json[QString("generalInformation")].isNull() && m_general_information_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_policies_isValid = ::OpenAPI::fromJsonValue(m_policies, json[QString("policies")]);
    m_policies_isSet = !json[QString("policies")].isNull() && m_policies_isValid;

    m_runtime_urls_isValid = ::OpenAPI::fromJsonValue(m_runtime_urls, json[QString("runtimeUrls")]);
    m_runtime_urls_isSet = !json[QString("runtimeUrls")].isNull() && m_runtime_urls_isValid;

    m_swagger_isValid = ::OpenAPI::fromJsonValue(m_swagger, json[QString("swagger")]);
    m_swagger_isSet = !json[QString("swagger")].isNull() && m_swagger_isValid;
}

QString OAIApiResourceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiResourceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_api_definition_url_isSet) {
        obj.insert(QString("apiDefinitionUrl"), ::OpenAPI::toJsonValue(m_api_definition_url));
    }
    if (m_api_definitions.isSet()) {
        obj.insert(QString("apiDefinitions"), ::OpenAPI::toJsonValue(m_api_definitions));
    }
    if (m_backend_service.isSet()) {
        obj.insert(QString("backendService"), ::OpenAPI::toJsonValue(m_backend_service));
    }
    if (m_capabilities.size() > 0) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_connection_parameters.size() > 0) {
        obj.insert(QString("connectionParameters"), ::OpenAPI::toJsonValue(m_connection_parameters));
    }
    if (m_general_information.isSet()) {
        obj.insert(QString("generalInformation"), ::OpenAPI::toJsonValue(m_general_information));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_policies.isSet()) {
        obj.insert(QString("policies"), ::OpenAPI::toJsonValue(m_policies));
    }
    if (m_runtime_urls.size() > 0) {
        obj.insert(QString("runtimeUrls"), ::OpenAPI::toJsonValue(m_runtime_urls));
    }
    if (m_swagger_isSet) {
        obj.insert(QString("swagger"), ::OpenAPI::toJsonValue(m_swagger));
    }
    return obj;
}

QString OAIApiResourceProperties::getApiDefinitionUrl() const {
    return m_api_definition_url;
}
void OAIApiResourceProperties::setApiDefinitionUrl(const QString &api_definition_url) {
    m_api_definition_url = api_definition_url;
    m_api_definition_url_isSet = true;
}

bool OAIApiResourceProperties::is_api_definition_url_Set() const{
    return m_api_definition_url_isSet;
}

bool OAIApiResourceProperties::is_api_definition_url_Valid() const{
    return m_api_definition_url_isValid;
}

OAIApiResourceDefinitions OAIApiResourceProperties::getApiDefinitions() const {
    return m_api_definitions;
}
void OAIApiResourceProperties::setApiDefinitions(const OAIApiResourceDefinitions &api_definitions) {
    m_api_definitions = api_definitions;
    m_api_definitions_isSet = true;
}

bool OAIApiResourceProperties::is_api_definitions_Set() const{
    return m_api_definitions_isSet;
}

bool OAIApiResourceProperties::is_api_definitions_Valid() const{
    return m_api_definitions_isValid;
}

OAIApiResourceBackendService OAIApiResourceProperties::getBackendService() const {
    return m_backend_service;
}
void OAIApiResourceProperties::setBackendService(const OAIApiResourceBackendService &backend_service) {
    m_backend_service = backend_service;
    m_backend_service_isSet = true;
}

bool OAIApiResourceProperties::is_backend_service_Set() const{
    return m_backend_service_isSet;
}

bool OAIApiResourceProperties::is_backend_service_Valid() const{
    return m_backend_service_isValid;
}

QList<QString> OAIApiResourceProperties::getCapabilities() const {
    return m_capabilities;
}
void OAIApiResourceProperties::setCapabilities(const QList<QString> &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIApiResourceProperties::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIApiResourceProperties::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QMap<QString, OAIConnectionParameter> OAIApiResourceProperties::getConnectionParameters() const {
    return m_connection_parameters;
}
void OAIApiResourceProperties::setConnectionParameters(const QMap<QString, OAIConnectionParameter> &connection_parameters) {
    m_connection_parameters = connection_parameters;
    m_connection_parameters_isSet = true;
}

bool OAIApiResourceProperties::is_connection_parameters_Set() const{
    return m_connection_parameters_isSet;
}

bool OAIApiResourceProperties::is_connection_parameters_Valid() const{
    return m_connection_parameters_isValid;
}

OAIApiResourceGeneralInformation OAIApiResourceProperties::getGeneralInformation() const {
    return m_general_information;
}
void OAIApiResourceProperties::setGeneralInformation(const OAIApiResourceGeneralInformation &general_information) {
    m_general_information = general_information;
    m_general_information_isSet = true;
}

bool OAIApiResourceProperties::is_general_information_Set() const{
    return m_general_information_isSet;
}

bool OAIApiResourceProperties::is_general_information_Valid() const{
    return m_general_information_isValid;
}

OAIApiResourceMetadata OAIApiResourceProperties::getMetadata() const {
    return m_metadata;
}
void OAIApiResourceProperties::setMetadata(const OAIApiResourceMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIApiResourceProperties::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIApiResourceProperties::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIApiResourceProperties::getName() const {
    return m_name;
}
void OAIApiResourceProperties::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApiResourceProperties::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApiResourceProperties::is_name_Valid() const{
    return m_name_isValid;
}

OAIApiResourcePolicies OAIApiResourceProperties::getPolicies() const {
    return m_policies;
}
void OAIApiResourceProperties::setPolicies(const OAIApiResourcePolicies &policies) {
    m_policies = policies;
    m_policies_isSet = true;
}

bool OAIApiResourceProperties::is_policies_Set() const{
    return m_policies_isSet;
}

bool OAIApiResourceProperties::is_policies_Valid() const{
    return m_policies_isValid;
}

QList<QString> OAIApiResourceProperties::getRuntimeUrls() const {
    return m_runtime_urls;
}
void OAIApiResourceProperties::setRuntimeUrls(const QList<QString> &runtime_urls) {
    m_runtime_urls = runtime_urls;
    m_runtime_urls_isSet = true;
}

bool OAIApiResourceProperties::is_runtime_urls_Set() const{
    return m_runtime_urls_isSet;
}

bool OAIApiResourceProperties::is_runtime_urls_Valid() const{
    return m_runtime_urls_isValid;
}

OAIObject OAIApiResourceProperties::getSwagger() const {
    return m_swagger;
}
void OAIApiResourceProperties::setSwagger(const OAIObject &swagger) {
    m_swagger = swagger;
    m_swagger_isSet = true;
}

bool OAIApiResourceProperties::is_swagger_Set() const{
    return m_swagger_isSet;
}

bool OAIApiResourceProperties::is_swagger_Valid() const{
    return m_swagger_isValid;
}

bool OAIApiResourceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_definition_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_definitions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_general_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_swagger_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiResourceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
