/**
 * LogicAppsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomAPIsApi_H
#define OAI_OAICustomAPIsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICustomApiDefinition.h"
#include "OAICustomApiDefinitionCollection.h"
#include "OAICustomApiReference.h"
#include "OAIObject.h"
#include "OAIWsdlDefinition.h"
#include "OAIWsdlServiceCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomAPIsApi : public QObject {
    Q_OBJECT

public:
    OAICustomAPIsApi(const int timeOut = 0);
    ~OAICustomAPIsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  custom_api OAICustomApiDefinition [required]
    */
    virtual void customApisCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &api_name, const QString &api_version, const OAICustomApiDefinition &custom_api);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void customApisDelete(const QString &subscription_id, const QString &resource_group_name, const QString &api_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  wsdl_definition OAIWsdlDefinition [required]
    */
    virtual void customApisExtractApiDefinitionFromWsdl(const QString &subscription_id, const QString &location, const QString &api_version, const OAIWsdlDefinition &wsdl_definition);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void customApisGet(const QString &subscription_id, const QString &resource_group_name, const QString &api_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  skiptoken QString [optional]
    */
    virtual void customApisList(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  skiptoken QString [optional]
    */
    virtual void customApisListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  wsdl_definition OAIWsdlDefinition [required]
    */
    virtual void customApisListWsdlInterfaces(const QString &subscription_id, const QString &location, const QString &api_version, const OAIWsdlDefinition &wsdl_definition);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  custom_api_reference OAICustomApiReference [required]
    */
    virtual void customApisMove(const QString &subscription_id, const QString &resource_group_name, const QString &api_name, const QString &api_version, const OAICustomApiReference &custom_api_reference);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  custom_api OAICustomApiDefinition [required]
    */
    virtual void customApisUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &api_name, const QString &api_version, const OAICustomApiDefinition &custom_api);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void customApisCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void customApisDeleteCallback(OAIHttpRequestWorker *worker);
    void customApisExtractApiDefinitionFromWsdlCallback(OAIHttpRequestWorker *worker);
    void customApisGetCallback(OAIHttpRequestWorker *worker);
    void customApisListCallback(OAIHttpRequestWorker *worker);
    void customApisListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void customApisListWsdlInterfacesCallback(OAIHttpRequestWorker *worker);
    void customApisMoveCallback(OAIHttpRequestWorker *worker);
    void customApisUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void customApisCreateOrUpdateSignal(OAICustomApiDefinition summary);
    void customApisDeleteSignal();
    void customApisExtractApiDefinitionFromWsdlSignal(OAIObject summary);
    void customApisGetSignal(OAICustomApiDefinition summary);
    void customApisListSignal(OAICustomApiDefinitionCollection summary);
    void customApisListByResourceGroupSignal(OAICustomApiDefinitionCollection summary);
    void customApisListWsdlInterfacesSignal(OAIWsdlServiceCollection summary);
    void customApisMoveSignal();
    void customApisUpdateSignal(OAICustomApiDefinition summary);


    void customApisCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAICustomApiDefinition summary);
    void customApisDeleteSignalFull(OAIHttpRequestWorker *worker);
    void customApisExtractApiDefinitionFromWsdlSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void customApisGetSignalFull(OAIHttpRequestWorker *worker, OAICustomApiDefinition summary);
    void customApisListSignalFull(OAIHttpRequestWorker *worker, OAICustomApiDefinitionCollection summary);
    void customApisListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAICustomApiDefinitionCollection summary);
    void customApisListWsdlInterfacesSignalFull(OAIHttpRequestWorker *worker, OAIWsdlServiceCollection summary);
    void customApisMoveSignalFull(OAIHttpRequestWorker *worker);
    void customApisUpdateSignalFull(OAIHttpRequestWorker *worker, OAICustomApiDefinition summary);

    Q_DECL_DEPRECATED_X("Use customApisCreateOrUpdateSignalError() instead")
    void customApisCreateOrUpdateSignalE(OAICustomApiDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customApisCreateOrUpdateSignalError(OAICustomApiDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customApisDeleteSignalError() instead")
    void customApisDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void customApisDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customApisExtractApiDefinitionFromWsdlSignalError() instead")
    void customApisExtractApiDefinitionFromWsdlSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customApisExtractApiDefinitionFromWsdlSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customApisGetSignalError() instead")
    void customApisGetSignalE(OAICustomApiDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customApisGetSignalError(OAICustomApiDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customApisListSignalError() instead")
    void customApisListSignalE(OAICustomApiDefinitionCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customApisListSignalError(OAICustomApiDefinitionCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customApisListByResourceGroupSignalError() instead")
    void customApisListByResourceGroupSignalE(OAICustomApiDefinitionCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customApisListByResourceGroupSignalError(OAICustomApiDefinitionCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customApisListWsdlInterfacesSignalError() instead")
    void customApisListWsdlInterfacesSignalE(OAIWsdlServiceCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customApisListWsdlInterfacesSignalError(OAIWsdlServiceCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customApisMoveSignalError() instead")
    void customApisMoveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void customApisMoveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customApisUpdateSignalError() instead")
    void customApisUpdateSignalE(OAICustomApiDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void customApisUpdateSignalError(OAICustomApiDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use customApisCreateOrUpdateSignalErrorFull() instead")
    void customApisCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customApisCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customApisDeleteSignalErrorFull() instead")
    void customApisDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customApisDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customApisExtractApiDefinitionFromWsdlSignalErrorFull() instead")
    void customApisExtractApiDefinitionFromWsdlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customApisExtractApiDefinitionFromWsdlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customApisGetSignalErrorFull() instead")
    void customApisGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customApisGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customApisListSignalErrorFull() instead")
    void customApisListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customApisListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customApisListByResourceGroupSignalErrorFull() instead")
    void customApisListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customApisListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customApisListWsdlInterfacesSignalErrorFull() instead")
    void customApisListWsdlInterfacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customApisListWsdlInterfacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customApisMoveSignalErrorFull() instead")
    void customApisMoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customApisMoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use customApisUpdateSignalErrorFull() instead")
    void customApisUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void customApisUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
