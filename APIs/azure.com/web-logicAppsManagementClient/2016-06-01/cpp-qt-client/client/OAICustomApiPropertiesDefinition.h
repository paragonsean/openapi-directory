/**
 * LogicAppsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICustomApiPropertiesDefinition.h
 *
 * Custom API properties
 */

#ifndef OAICustomApiPropertiesDefinition_H
#define OAICustomApiPropertiesDefinition_H

#include <QJsonObject>

#include "OAIApiResourceBackendService.h"
#include "OAIApiResourceDefinitions.h"
#include "OAIApiType.h"
#include "OAIConnectionParameter.h"
#include "OAIObject.h"
#include "OAIWsdlDefinition.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIApiResourceDefinitions;
class OAIApiResourceBackendService;
class OAIConnectionParameter;
class OAIWsdlDefinition;

class OAICustomApiPropertiesDefinition : public OAIObject {
public:
    OAICustomApiPropertiesDefinition();
    OAICustomApiPropertiesDefinition(QString json);
    ~OAICustomApiPropertiesDefinition() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIApiResourceDefinitions getApiDefinitions() const;
    void setApiDefinitions(const OAIApiResourceDefinitions &api_definitions);
    bool is_api_definitions_Set() const;
    bool is_api_definitions_Valid() const;

    OAIApiType getApiType() const;
    void setApiType(const OAIApiType &api_type);
    bool is_api_type_Set() const;
    bool is_api_type_Valid() const;

    OAIApiResourceBackendService getBackendService() const;
    void setBackendService(const OAIApiResourceBackendService &backend_service);
    bool is_backend_service_Set() const;
    bool is_backend_service_Valid() const;

    QString getBrandColor() const;
    void setBrandColor(const QString &brand_color);
    bool is_brand_color_Set() const;
    bool is_brand_color_Valid() const;

    QList<QString> getCapabilities() const;
    void setCapabilities(const QList<QString> &capabilities);
    bool is_capabilities_Set() const;
    bool is_capabilities_Valid() const;

    QMap<QString, OAIConnectionParameter> getConnectionParameters() const;
    void setConnectionParameters(const QMap<QString, OAIConnectionParameter> &connection_parameters);
    bool is_connection_parameters_Set() const;
    bool is_connection_parameters_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getIconUri() const;
    void setIconUri(const QString &icon_uri);
    bool is_icon_uri_Set() const;
    bool is_icon_uri_Valid() const;

    QList<QString> getRuntimeUrls() const;
    void setRuntimeUrls(const QList<QString> &runtime_urls);
    bool is_runtime_urls_Set() const;
    bool is_runtime_urls_Valid() const;

    OAIObject getSwagger() const;
    void setSwagger(const OAIObject &swagger);
    bool is_swagger_Set() const;
    bool is_swagger_Valid() const;

    OAIWsdlDefinition getWsdlDefinition() const;
    void setWsdlDefinition(const OAIWsdlDefinition &wsdl_definition);
    bool is_wsdl_definition_Set() const;
    bool is_wsdl_definition_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIApiResourceDefinitions m_api_definitions;
    bool m_api_definitions_isSet;
    bool m_api_definitions_isValid;

    OAIApiType m_api_type;
    bool m_api_type_isSet;
    bool m_api_type_isValid;

    OAIApiResourceBackendService m_backend_service;
    bool m_backend_service_isSet;
    bool m_backend_service_isValid;

    QString m_brand_color;
    bool m_brand_color_isSet;
    bool m_brand_color_isValid;

    QList<QString> m_capabilities;
    bool m_capabilities_isSet;
    bool m_capabilities_isValid;

    QMap<QString, OAIConnectionParameter> m_connection_parameters;
    bool m_connection_parameters_isSet;
    bool m_connection_parameters_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_icon_uri;
    bool m_icon_uri_isSet;
    bool m_icon_uri_isValid;

    QList<QString> m_runtime_urls;
    bool m_runtime_urls_isSet;
    bool m_runtime_urls_isValid;

    OAIObject m_swagger;
    bool m_swagger_isSet;
    bool m_swagger_isValid;

    OAIWsdlDefinition m_wsdl_definition;
    bool m_wsdl_definition_isSet;
    bool m_wsdl_definition_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICustomApiPropertiesDefinition)

#endif // OAICustomApiPropertiesDefinition_H
