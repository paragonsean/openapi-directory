/**
 * LogicAppsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiType from './ApiType';
import WsdlImportMethod from './WsdlImportMethod';
import WsdlService from './WsdlService';

/**
 * The ApiResourceMetadata model module.
 * @module model/ApiResourceMetadata
 * @version 2016-06-01
 */
class ApiResourceMetadata {
    /**
     * Constructs a new <code>ApiResourceMetadata</code>.
     * @alias module:model/ApiResourceMetadata
     */
    constructor() { 
        
        ApiResourceMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiResourceMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiResourceMetadata} obj Optional instance to populate.
     * @return {module:model/ApiResourceMetadata} The populated <code>ApiResourceMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiResourceMetadata();

            if (data.hasOwnProperty('apiType')) {
                obj['apiType'] = ApiType.constructFromObject(data['apiType']);
            }
            if (data.hasOwnProperty('brandColor')) {
                obj['brandColor'] = ApiClient.convertToType(data['brandColor'], 'String');
            }
            if (data.hasOwnProperty('connectionType')) {
                obj['connectionType'] = ApiClient.convertToType(data['connectionType'], 'String');
            }
            if (data.hasOwnProperty('hideKey')) {
                obj['hideKey'] = ApiClient.convertToType(data['hideKey'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('wsdlImportMethod')) {
                obj['wsdlImportMethod'] = WsdlImportMethod.constructFromObject(data['wsdlImportMethod']);
            }
            if (data.hasOwnProperty('wsdlService')) {
                obj['wsdlService'] = WsdlService.constructFromObject(data['wsdlService']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiResourceMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiResourceMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['brandColor'] && !(typeof data['brandColor'] === 'string' || data['brandColor'] instanceof String)) {
            throw new Error("Expected the field `brandColor` to be a primitive type in the JSON string but got " + data['brandColor']);
        }
        // ensure the json data is a string
        if (data['connectionType'] && !(typeof data['connectionType'] === 'string' || data['connectionType'] instanceof String)) {
            throw new Error("Expected the field `connectionType` to be a primitive type in the JSON string but got " + data['connectionType']);
        }
        // ensure the json data is a string
        if (data['hideKey'] && !(typeof data['hideKey'] === 'string' || data['hideKey'] instanceof String)) {
            throw new Error("Expected the field `hideKey` to be a primitive type in the JSON string but got " + data['hideKey']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // validate the optional field `wsdlService`
        if (data['wsdlService']) { // data not null
          WsdlService.validateJSON(data['wsdlService']);
        }

        return true;
    }


}



/**
 * @member {module:model/ApiType} apiType
 */
ApiResourceMetadata.prototype['apiType'] = undefined;

/**
 * Brand color
 * @member {String} brandColor
 */
ApiResourceMetadata.prototype['brandColor'] = undefined;

/**
 * The connection type
 * @member {String} connectionType
 */
ApiResourceMetadata.prototype['connectionType'] = undefined;

/**
 * Hide key
 * @member {String} hideKey
 */
ApiResourceMetadata.prototype['hideKey'] = undefined;

/**
 * The source
 * @member {String} source
 */
ApiResourceMetadata.prototype['source'] = undefined;

/**
 * Resource tags
 * @member {Object.<String, String>} tags
 */
ApiResourceMetadata.prototype['tags'] = undefined;

/**
 * @member {module:model/WsdlImportMethod} wsdlImportMethod
 */
ApiResourceMetadata.prototype['wsdlImportMethod'] = undefined;

/**
 * @member {module:model/WsdlService} wsdlService
 */
ApiResourceMetadata.prototype['wsdlService'] = undefined;






export default ApiResourceMetadata;

