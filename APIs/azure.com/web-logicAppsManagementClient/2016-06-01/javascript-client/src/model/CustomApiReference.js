/**
 * LogicAppsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiReference from './ApiReference';

/**
 * The CustomApiReference model module.
 * @module model/CustomApiReference
 * @version 2016-06-01
 */
class CustomApiReference {
    /**
     * Constructs a new <code>CustomApiReference</code>.
     * The custom API reference
     * @alias module:model/CustomApiReference
     * @implements module:model/ApiReference
     */
    constructor() { 
        ApiReference.initialize(this);
        CustomApiReference.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CustomApiReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomApiReference} obj Optional instance to populate.
     * @return {module:model/CustomApiReference} The populated <code>CustomApiReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomApiReference();
            ApiReference.constructFromObject(data, obj);

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('brandColor')) {
                obj['brandColor'] = ApiClient.convertToType(data['brandColor'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('iconUri')) {
                obj['iconUri'] = ApiClient.convertToType(data['iconUri'], 'String');
            }
            if (data.hasOwnProperty('swagger')) {
                obj['swagger'] = ApiClient.convertToType(data['swagger'], Object);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomApiReference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomApiReference</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['brandColor'] && !(typeof data['brandColor'] === 'string' || data['brandColor'] instanceof String)) {
            throw new Error("Expected the field `brandColor` to be a primitive type in the JSON string but got " + data['brandColor']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['iconUri'] && !(typeof data['iconUri'] === 'string' || data['iconUri'] instanceof String)) {
            throw new Error("Expected the field `iconUri` to be a primitive type in the JSON string but got " + data['iconUri']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {String} name
 */
CustomApiReference.prototype['name'] = undefined;

/**
 * Brand color
 * @member {String} brandColor
 */
CustomApiReference.prototype['brandColor'] = undefined;

/**
 * The custom API description
 * @member {String} description
 */
CustomApiReference.prototype['description'] = undefined;

/**
 * The display name
 * @member {String} displayName
 */
CustomApiReference.prototype['displayName'] = undefined;

/**
 * The icon URI
 * @member {String} iconUri
 */
CustomApiReference.prototype['iconUri'] = undefined;

/**
 * The JSON representation of the swagger
 * @member {Object} swagger
 */
CustomApiReference.prototype['swagger'] = undefined;

/**
 * Resource reference id
 * @member {String} id
 */
CustomApiReference.prototype['id'] = undefined;

/**
 * Resource reference type
 * @member {String} type
 */
CustomApiReference.prototype['type'] = undefined;


// Implement ApiReference interface:
/**
 * Resource reference id
 * @member {String} id
 */
ApiReference.prototype['id'] = undefined;
/**
 * Resource reference type
 * @member {String} type
 */
ApiReference.prototype['type'] = undefined;




export default CustomApiReference;

