/**
 * LogicAppsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConnectionGatewayDefinition from '../model/ConnectionGatewayDefinition';
import ConnectionGatewayDefinitionCollection from '../model/ConnectionGatewayDefinitionCollection';
import ConnectionGatewayInstallationDefinition from '../model/ConnectionGatewayInstallationDefinition';
import ConnectionGatewayInstallationDefinitionCollection from '../model/ConnectionGatewayInstallationDefinitionCollection';

/**
* ConnectionGateways service.
* @module api/ConnectionGatewaysApi
* @version 2016-06-01
*/
export default class ConnectionGatewaysApi {

    /**
    * Constructs a new ConnectionGatewaysApi. 
    * @alias module:api/ConnectionGatewaysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the connectionGatewayInstallationsGet operation.
     * @callback module:api/ConnectionGatewaysApi~connectionGatewayInstallationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionGatewayInstallationDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an installed gateway that the user is an admin of
     * Get a specific installed gateway that the user is an admin of, in a specific subscription and at a certain location
     * @param {String} subscriptionId Subscription Id
     * @param {String} location The location
     * @param {String} gatewayId Gateway ID
     * @param {String} apiVersion API Version
     * @param {module:api/ConnectionGatewaysApi~connectionGatewayInstallationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionGatewayInstallationDefinition}
     */
    connectionGatewayInstallationsGet(subscriptionId, location, gatewayId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionGatewayInstallationsGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling connectionGatewayInstallationsGet");
      }
      // verify the required parameter 'gatewayId' is set
      if (gatewayId === undefined || gatewayId === null) {
        throw new Error("Missing the required parameter 'gatewayId' when calling connectionGatewayInstallationsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionGatewayInstallationsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'location': location,
        'gatewayId': gatewayId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConnectionGatewayInstallationDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/connectionGatewayInstallations/{gatewayId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionGatewayInstallationsList operation.
     * @callback module:api/ConnectionGatewaysApi~connectionGatewayInstallationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionGatewayInstallationDefinitionCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of installed gateways that the user is an admin of
     * Gets a list of installed gateways that the user is an admin of, in a specific subscription and at a certain location
     * @param {String} subscriptionId Subscription Id
     * @param {String} location The location
     * @param {String} apiVersion API Version
     * @param {module:api/ConnectionGatewaysApi~connectionGatewayInstallationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionGatewayInstallationDefinitionCollection}
     */
    connectionGatewayInstallationsList(subscriptionId, location, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionGatewayInstallationsList");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling connectionGatewayInstallationsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionGatewayInstallationsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'location': location
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConnectionGatewayInstallationDefinitionCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/connectionGatewayInstallations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionGatewaysCreateOrUpdate operation.
     * @callback module:api/ConnectionGatewaysApi~connectionGatewaysCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionGatewayDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces a specific gateway
     * Creates or updates a specific gateway for under a subscription and in a specific resource group
     * @param {String} subscriptionId Subscription Id
     * @param {String} resourceGroupName The resource group
     * @param {String} connectionGatewayName The connection gateway name
     * @param {String} apiVersion API Version
     * @param {module:model/ConnectionGatewayDefinition} connectionGateway The connection gateway
     * @param {module:api/ConnectionGatewaysApi~connectionGatewaysCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionGatewayDefinition}
     */
    connectionGatewaysCreateOrUpdate(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion, connectionGateway, callback) {
      let postBody = connectionGateway;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionGatewaysCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionGatewaysCreateOrUpdate");
      }
      // verify the required parameter 'connectionGatewayName' is set
      if (connectionGatewayName === undefined || connectionGatewayName === null) {
        throw new Error("Missing the required parameter 'connectionGatewayName' when calling connectionGatewaysCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionGatewaysCreateOrUpdate");
      }
      // verify the required parameter 'connectionGateway' is set
      if (connectionGateway === undefined || connectionGateway === null) {
        throw new Error("Missing the required parameter 'connectionGateway' when calling connectionGatewaysCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'connectionGatewayName': connectionGatewayName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConnectionGatewayDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connectionGateways/{connectionGatewayName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionGatewaysDelete operation.
     * @callback module:api/ConnectionGatewaysApi~connectionGatewaysDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a specific gateway
     * Deletes a specific gateway for under a subscription and in a specific resource group
     * @param {String} subscriptionId Subscription Id
     * @param {String} resourceGroupName The resource group
     * @param {String} connectionGatewayName The connection gateway name
     * @param {String} apiVersion API Version
     * @param {module:api/ConnectionGatewaysApi~connectionGatewaysDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    connectionGatewaysDelete(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionGatewaysDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionGatewaysDelete");
      }
      // verify the required parameter 'connectionGatewayName' is set
      if (connectionGatewayName === undefined || connectionGatewayName === null) {
        throw new Error("Missing the required parameter 'connectionGatewayName' when calling connectionGatewaysDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionGatewaysDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'connectionGatewayName': connectionGatewayName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connectionGateways/{connectionGatewayName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionGatewaysGet operation.
     * @callback module:api/ConnectionGatewaysApi~connectionGatewaysGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionGatewayDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a specific gateway
     * Gets a specific gateway under a subscription and in a specific resource group
     * @param {String} subscriptionId Subscription Id
     * @param {String} resourceGroupName The resource group
     * @param {String} connectionGatewayName The connection gateway name
     * @param {String} apiVersion API Version
     * @param {module:api/ConnectionGatewaysApi~connectionGatewaysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionGatewayDefinition}
     */
    connectionGatewaysGet(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionGatewaysGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionGatewaysGet");
      }
      // verify the required parameter 'connectionGatewayName' is set
      if (connectionGatewayName === undefined || connectionGatewayName === null) {
        throw new Error("Missing the required parameter 'connectionGatewayName' when calling connectionGatewaysGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionGatewaysGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'connectionGatewayName': connectionGatewayName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConnectionGatewayDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connectionGateways/{connectionGatewayName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionGatewaysList operation.
     * @callback module:api/ConnectionGatewaysApi~connectionGatewaysListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionGatewayDefinitionCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the connection gateways
     * Gets a list of gateways under a subscription
     * @param {String} subscriptionId Subscription Id
     * @param {String} apiVersion API Version
     * @param {module:api/ConnectionGatewaysApi~connectionGatewaysListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionGatewayDefinitionCollection}
     */
    connectionGatewaysList(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionGatewaysList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionGatewaysList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConnectionGatewayDefinitionCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Web/connectionGateways', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionGatewaysListByResourceGroup operation.
     * @callback module:api/ConnectionGatewaysApi~connectionGatewaysListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionGatewayDefinitionCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the connection gateways
     * Gets a list of gateways under a subscription and in a specific resource group
     * @param {String} subscriptionId Subscription Id
     * @param {String} resourceGroupName The resource group
     * @param {String} apiVersion API Version
     * @param {module:api/ConnectionGatewaysApi~connectionGatewaysListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionGatewayDefinitionCollection}
     */
    connectionGatewaysListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionGatewaysListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionGatewaysListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionGatewaysListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConnectionGatewayDefinitionCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connectionGateways', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionGatewaysUpdate operation.
     * @callback module:api/ConnectionGatewaysApi~connectionGatewaysUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConnectionGatewayDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a specific gateway
     * Updates a connection gateway's tags
     * @param {String} subscriptionId Subscription Id
     * @param {String} resourceGroupName The resource group
     * @param {String} connectionGatewayName The connection gateway name
     * @param {String} apiVersion API Version
     * @param {module:model/ConnectionGatewayDefinition} connectionGateway The connection gateway
     * @param {module:api/ConnectionGatewaysApi~connectionGatewaysUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConnectionGatewayDefinition}
     */
    connectionGatewaysUpdate(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion, connectionGateway, callback) {
      let postBody = connectionGateway;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionGatewaysUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionGatewaysUpdate");
      }
      // verify the required parameter 'connectionGatewayName' is set
      if (connectionGatewayName === undefined || connectionGatewayName === null) {
        throw new Error("Missing the required parameter 'connectionGatewayName' when calling connectionGatewaysUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionGatewaysUpdate");
      }
      // verify the required parameter 'connectionGateway' is set
      if (connectionGateway === undefined || connectionGateway === null) {
        throw new Error("Missing the required parameter 'connectionGateway' when calling connectionGatewaysUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'connectionGatewayName': connectionGatewayName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConnectionGatewayDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connectionGateways/{connectionGatewayName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
