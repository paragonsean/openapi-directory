/**
 * LogicAppsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiConnectionDefinition from '../model/ApiConnectionDefinition';
import ApiConnectionDefinitionCollection from '../model/ApiConnectionDefinitionCollection';
import ConfirmConsentCodeDefinition from '../model/ConfirmConsentCodeDefinition';
import ConsentLinkCollection from '../model/ConsentLinkCollection';
import ListConsentLinksDefinition from '../model/ListConsentLinksDefinition';

/**
* Connections service.
* @module api/ConnectionsApi
* @version 2016-06-01
*/
export default class ConnectionsApi {

    /**
    * Constructs a new ConnectionsApi. 
    * @alias module:api/ConnectionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the connectionsConfirmConsentCode operation.
     * @callback module:api/ConnectionsApi~connectionsConfirmConsentCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfirmConsentCodeDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirms the consent code for a connection
     * Confirms consent code of a connection
     * @param {String} subscriptionId Subscription Id
     * @param {String} resourceGroupName The resource group
     * @param {String} connectionName Connection name
     * @param {String} apiVersion API Version
     * @param {module:model/ConfirmConsentCodeDefinition} confirmConsentCode The consent code confirmation
     * @param {module:api/ConnectionsApi~connectionsConfirmConsentCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfirmConsentCodeDefinition}
     */
    connectionsConfirmConsentCode(subscriptionId, resourceGroupName, connectionName, apiVersion, confirmConsentCode, callback) {
      let postBody = confirmConsentCode;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionsConfirmConsentCode");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionsConfirmConsentCode");
      }
      // verify the required parameter 'connectionName' is set
      if (connectionName === undefined || connectionName === null) {
        throw new Error("Missing the required parameter 'connectionName' when calling connectionsConfirmConsentCode");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionsConfirmConsentCode");
      }
      // verify the required parameter 'confirmConsentCode' is set
      if (confirmConsentCode === undefined || confirmConsentCode === null) {
        throw new Error("Missing the required parameter 'confirmConsentCode' when calling connectionsConfirmConsentCode");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'connectionName': connectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfirmConsentCodeDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections/{connectionName}/confirmConsentCode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionsCreateOrUpdate operation.
     * @callback module:api/ConnectionsApi~connectionsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiConnectionDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace an existing connection
     * Creates or updates a connection
     * @param {String} subscriptionId Subscription Id
     * @param {String} resourceGroupName The resource group
     * @param {String} connectionName Connection name
     * @param {String} apiVersion API Version
     * @param {module:model/ApiConnectionDefinition} connection The connection
     * @param {module:api/ConnectionsApi~connectionsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiConnectionDefinition}
     */
    connectionsCreateOrUpdate(subscriptionId, resourceGroupName, connectionName, apiVersion, connection, callback) {
      let postBody = connection;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionsCreateOrUpdate");
      }
      // verify the required parameter 'connectionName' is set
      if (connectionName === undefined || connectionName === null) {
        throw new Error("Missing the required parameter 'connectionName' when calling connectionsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionsCreateOrUpdate");
      }
      // verify the required parameter 'connection' is set
      if (connection === undefined || connection === null) {
        throw new Error("Missing the required parameter 'connection' when calling connectionsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'connectionName': connectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiConnectionDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections/{connectionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionsDelete operation.
     * @callback module:api/ConnectionsApi~connectionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing connection
     * Deletes a connection
     * @param {String} subscriptionId Subscription Id
     * @param {String} resourceGroupName The resource group
     * @param {String} connectionName Connection name
     * @param {String} apiVersion API Version
     * @param {module:api/ConnectionsApi~connectionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    connectionsDelete(subscriptionId, resourceGroupName, connectionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionsDelete");
      }
      // verify the required parameter 'connectionName' is set
      if (connectionName === undefined || connectionName === null) {
        throw new Error("Missing the required parameter 'connectionName' when calling connectionsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'connectionName': connectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections/{connectionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionsGet operation.
     * @callback module:api/ConnectionsApi~connectionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiConnectionDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a connection
     * Get a specific connection
     * @param {String} subscriptionId Subscription Id
     * @param {String} resourceGroupName The resource group
     * @param {String} connectionName Connection name
     * @param {String} apiVersion API Version
     * @param {module:api/ConnectionsApi~connectionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiConnectionDefinition}
     */
    connectionsGet(subscriptionId, resourceGroupName, connectionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionsGet");
      }
      // verify the required parameter 'connectionName' is set
      if (connectionName === undefined || connectionName === null) {
        throw new Error("Missing the required parameter 'connectionName' when calling connectionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'connectionName': connectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiConnectionDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections/{connectionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionsList operation.
     * @callback module:api/ConnectionsApi~connectionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiConnectionDefinitionCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all connections
     * Gets a list of connections
     * @param {String} subscriptionId Subscription Id
     * @param {String} resourceGroupName The resource group
     * @param {String} apiVersion API Version
     * @param {Object} opts Optional parameters
     * @param {Number} [top] The number of items to be included in the result
     * @param {String} [filter] The filter to apply on the operation
     * @param {module:api/ConnectionsApi~connectionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiConnectionDefinitionCollection}
     */
    connectionsList(subscriptionId, resourceGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        '$top': opts['top'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiConnectionDefinitionCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionsListConsentLinks operation.
     * @callback module:api/ConnectionsApi~connectionsListConsentLinksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsentLinkCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists consent links for a connection
     * Lists the consent links of a connection
     * @param {String} subscriptionId Subscription Id
     * @param {String} resourceGroupName The resource group
     * @param {String} connectionName Connection name
     * @param {String} apiVersion API Version
     * @param {module:model/ListConsentLinksDefinition} listConsentLink The consent links
     * @param {module:api/ConnectionsApi~connectionsListConsentLinksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsentLinkCollection}
     */
    connectionsListConsentLinks(subscriptionId, resourceGroupName, connectionName, apiVersion, listConsentLink, callback) {
      let postBody = listConsentLink;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionsListConsentLinks");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionsListConsentLinks");
      }
      // verify the required parameter 'connectionName' is set
      if (connectionName === undefined || connectionName === null) {
        throw new Error("Missing the required parameter 'connectionName' when calling connectionsListConsentLinks");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionsListConsentLinks");
      }
      // verify the required parameter 'listConsentLink' is set
      if (listConsentLink === undefined || listConsentLink === null) {
        throw new Error("Missing the required parameter 'listConsentLink' when calling connectionsListConsentLinks");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'connectionName': connectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConsentLinkCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections/{connectionName}/listConsentLinks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connectionsUpdate operation.
     * @callback module:api/ConnectionsApi~connectionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiConnectionDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing connection
     * Updates a connection's tags
     * @param {String} subscriptionId Subscription Id
     * @param {String} resourceGroupName The resource group
     * @param {String} connectionName Connection name
     * @param {String} apiVersion API Version
     * @param {module:model/ApiConnectionDefinition} connection The connection
     * @param {module:api/ConnectionsApi~connectionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiConnectionDefinition}
     */
    connectionsUpdate(subscriptionId, resourceGroupName, connectionName, apiVersion, connection, callback) {
      let postBody = connection;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling connectionsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling connectionsUpdate");
      }
      // verify the required parameter 'connectionName' is set
      if (connectionName === undefined || connectionName === null) {
        throw new Error("Missing the required parameter 'connectionName' when calling connectionsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling connectionsUpdate");
      }
      // verify the required parameter 'connection' is set
      if (connection === undefined || connection === null) {
        throw new Error("Missing the required parameter 'connection' when calling connectionsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'connectionName': connectionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiConnectionDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections/{connectionName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
