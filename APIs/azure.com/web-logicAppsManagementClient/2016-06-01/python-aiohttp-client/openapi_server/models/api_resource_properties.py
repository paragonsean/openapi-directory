# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_resource_backend_service import ApiResourceBackendService
from openapi_server.models.api_resource_definitions import ApiResourceDefinitions
from openapi_server.models.api_resource_general_information import ApiResourceGeneralInformation
from openapi_server.models.api_resource_metadata import ApiResourceMetadata
from openapi_server.models.api_resource_policies import ApiResourcePolicies
from openapi_server.models.connection_parameter import ConnectionParameter
from openapi_server import util


class ApiResourceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_definition_url: str=None, api_definitions: ApiResourceDefinitions=None, backend_service: ApiResourceBackendService=None, capabilities: List[str]=None, connection_parameters: Dict[str, ConnectionParameter]=None, general_information: ApiResourceGeneralInformation=None, metadata: ApiResourceMetadata=None, name: str=None, policies: ApiResourcePolicies=None, runtime_urls: List[str]=None, swagger: object=None):
        """ApiResourceProperties - a model defined in OpenAPI

        :param api_definition_url: The api_definition_url of this ApiResourceProperties.
        :param api_definitions: The api_definitions of this ApiResourceProperties.
        :param backend_service: The backend_service of this ApiResourceProperties.
        :param capabilities: The capabilities of this ApiResourceProperties.
        :param connection_parameters: The connection_parameters of this ApiResourceProperties.
        :param general_information: The general_information of this ApiResourceProperties.
        :param metadata: The metadata of this ApiResourceProperties.
        :param name: The name of this ApiResourceProperties.
        :param policies: The policies of this ApiResourceProperties.
        :param runtime_urls: The runtime_urls of this ApiResourceProperties.
        :param swagger: The swagger of this ApiResourceProperties.
        """
        self.openapi_types = {
            'api_definition_url': str,
            'api_definitions': ApiResourceDefinitions,
            'backend_service': ApiResourceBackendService,
            'capabilities': List[str],
            'connection_parameters': Dict[str, ConnectionParameter],
            'general_information': ApiResourceGeneralInformation,
            'metadata': ApiResourceMetadata,
            'name': str,
            'policies': ApiResourcePolicies,
            'runtime_urls': List[str],
            'swagger': object
        }

        self.attribute_map = {
            'api_definition_url': 'apiDefinitionUrl',
            'api_definitions': 'apiDefinitions',
            'backend_service': 'backendService',
            'capabilities': 'capabilities',
            'connection_parameters': 'connectionParameters',
            'general_information': 'generalInformation',
            'metadata': 'metadata',
            'name': 'name',
            'policies': 'policies',
            'runtime_urls': 'runtimeUrls',
            'swagger': 'swagger'
        }

        self._api_definition_url = api_definition_url
        self._api_definitions = api_definitions
        self._backend_service = backend_service
        self._capabilities = capabilities
        self._connection_parameters = connection_parameters
        self._general_information = general_information
        self._metadata = metadata
        self._name = name
        self._policies = policies
        self._runtime_urls = runtime_urls
        self._swagger = swagger

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiResourceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiResourceProperties of this ApiResourceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_definition_url(self):
        """Gets the api_definition_url of this ApiResourceProperties.

        URL where the swagger can be downloaded from

        :return: The api_definition_url of this ApiResourceProperties.
        :rtype: str
        """
        return self._api_definition_url

    @api_definition_url.setter
    def api_definition_url(self, api_definition_url):
        """Sets the api_definition_url of this ApiResourceProperties.

        URL where the swagger can be downloaded from

        :param api_definition_url: The api_definition_url of this ApiResourceProperties.
        :type api_definition_url: str
        """

        self._api_definition_url = api_definition_url

    @property
    def api_definitions(self):
        """Gets the api_definitions of this ApiResourceProperties.


        :return: The api_definitions of this ApiResourceProperties.
        :rtype: ApiResourceDefinitions
        """
        return self._api_definitions

    @api_definitions.setter
    def api_definitions(self, api_definitions):
        """Sets the api_definitions of this ApiResourceProperties.


        :param api_definitions: The api_definitions of this ApiResourceProperties.
        :type api_definitions: ApiResourceDefinitions
        """

        self._api_definitions = api_definitions

    @property
    def backend_service(self):
        """Gets the backend_service of this ApiResourceProperties.


        :return: The backend_service of this ApiResourceProperties.
        :rtype: ApiResourceBackendService
        """
        return self._backend_service

    @backend_service.setter
    def backend_service(self, backend_service):
        """Sets the backend_service of this ApiResourceProperties.


        :param backend_service: The backend_service of this ApiResourceProperties.
        :type backend_service: ApiResourceBackendService
        """

        self._backend_service = backend_service

    @property
    def capabilities(self):
        """Gets the capabilities of this ApiResourceProperties.

        The managed API capabilities

        :return: The capabilities of this ApiResourceProperties.
        :rtype: List[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this ApiResourceProperties.

        The managed API capabilities

        :param capabilities: The capabilities of this ApiResourceProperties.
        :type capabilities: List[str]
        """

        self._capabilities = capabilities

    @property
    def connection_parameters(self):
        """Gets the connection_parameters of this ApiResourceProperties.

        Connection parameters

        :return: The connection_parameters of this ApiResourceProperties.
        :rtype: Dict[str, ConnectionParameter]
        """
        return self._connection_parameters

    @connection_parameters.setter
    def connection_parameters(self, connection_parameters):
        """Sets the connection_parameters of this ApiResourceProperties.

        Connection parameters

        :param connection_parameters: The connection_parameters of this ApiResourceProperties.
        :type connection_parameters: Dict[str, ConnectionParameter]
        """

        self._connection_parameters = connection_parameters

    @property
    def general_information(self):
        """Gets the general_information of this ApiResourceProperties.


        :return: The general_information of this ApiResourceProperties.
        :rtype: ApiResourceGeneralInformation
        """
        return self._general_information

    @general_information.setter
    def general_information(self, general_information):
        """Sets the general_information of this ApiResourceProperties.


        :param general_information: The general_information of this ApiResourceProperties.
        :type general_information: ApiResourceGeneralInformation
        """

        self._general_information = general_information

    @property
    def metadata(self):
        """Gets the metadata of this ApiResourceProperties.


        :return: The metadata of this ApiResourceProperties.
        :rtype: ApiResourceMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ApiResourceProperties.


        :param metadata: The metadata of this ApiResourceProperties.
        :type metadata: ApiResourceMetadata
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this ApiResourceProperties.


        :return: The name of this ApiResourceProperties.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiResourceProperties.


        :param name: The name of this ApiResourceProperties.
        :type name: str
        """

        self._name = name

    @property
    def policies(self):
        """Gets the policies of this ApiResourceProperties.


        :return: The policies of this ApiResourceProperties.
        :rtype: ApiResourcePolicies
        """
        return self._policies

    @policies.setter
    def policies(self, policies):
        """Sets the policies of this ApiResourceProperties.


        :param policies: The policies of this ApiResourceProperties.
        :type policies: ApiResourcePolicies
        """

        self._policies = policies

    @property
    def runtime_urls(self):
        """Gets the runtime_urls of this ApiResourceProperties.

        Runtime URLs

        :return: The runtime_urls of this ApiResourceProperties.
        :rtype: List[str]
        """
        return self._runtime_urls

    @runtime_urls.setter
    def runtime_urls(self, runtime_urls):
        """Sets the runtime_urls of this ApiResourceProperties.

        Runtime URLs

        :param runtime_urls: The runtime_urls of this ApiResourceProperties.
        :type runtime_urls: List[str]
        """

        self._runtime_urls = runtime_urls

    @property
    def swagger(self):
        """Gets the swagger of this ApiResourceProperties.

        The JSON representation of the swagger

        :return: The swagger of this ApiResourceProperties.
        :rtype: object
        """
        return self._swagger

    @swagger.setter
    def swagger(self, swagger):
        """Sets the swagger of this ApiResourceProperties.

        The JSON representation of the swagger

        :param swagger: The swagger of this ApiResourceProperties.
        :type swagger: object
        """

        self._swagger = swagger
