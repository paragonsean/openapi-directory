# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand_color: str=None, description: str=None, display_name: str=None, icon_uri: str=None, name: str=None, swagger: object=None, id: str=None, type: str=None):
        """ApiReference - a model defined in OpenAPI

        :param brand_color: The brand_color of this ApiReference.
        :param description: The description of this ApiReference.
        :param display_name: The display_name of this ApiReference.
        :param icon_uri: The icon_uri of this ApiReference.
        :param name: The name of this ApiReference.
        :param swagger: The swagger of this ApiReference.
        :param id: The id of this ApiReference.
        :param type: The type of this ApiReference.
        """
        self.openapi_types = {
            'brand_color': str,
            'description': str,
            'display_name': str,
            'icon_uri': str,
            'name': str,
            'swagger': object,
            'id': str,
            'type': str
        }

        self.attribute_map = {
            'brand_color': 'brandColor',
            'description': 'description',
            'display_name': 'displayName',
            'icon_uri': 'iconUri',
            'name': 'name',
            'swagger': 'swagger',
            'id': 'id',
            'type': 'type'
        }

        self._brand_color = brand_color
        self._description = description
        self._display_name = display_name
        self._icon_uri = icon_uri
        self._name = name
        self._swagger = swagger
        self._id = id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiReference of this ApiReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand_color(self):
        """Gets the brand_color of this ApiReference.

        Brand color

        :return: The brand_color of this ApiReference.
        :rtype: str
        """
        return self._brand_color

    @brand_color.setter
    def brand_color(self, brand_color):
        """Sets the brand_color of this ApiReference.

        Brand color

        :param brand_color: The brand_color of this ApiReference.
        :type brand_color: str
        """

        self._brand_color = brand_color

    @property
    def description(self):
        """Gets the description of this ApiReference.

        The custom API description

        :return: The description of this ApiReference.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiReference.

        The custom API description

        :param description: The description of this ApiReference.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this ApiReference.

        The display name

        :return: The display_name of this ApiReference.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ApiReference.

        The display name

        :param display_name: The display_name of this ApiReference.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def icon_uri(self):
        """Gets the icon_uri of this ApiReference.

        The icon URI

        :return: The icon_uri of this ApiReference.
        :rtype: str
        """
        return self._icon_uri

    @icon_uri.setter
    def icon_uri(self, icon_uri):
        """Sets the icon_uri of this ApiReference.

        The icon URI

        :param icon_uri: The icon_uri of this ApiReference.
        :type icon_uri: str
        """

        self._icon_uri = icon_uri

    @property
    def name(self):
        """Gets the name of this ApiReference.

        The name of the API

        :return: The name of this ApiReference.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiReference.

        The name of the API

        :param name: The name of this ApiReference.
        :type name: str
        """

        self._name = name

    @property
    def swagger(self):
        """Gets the swagger of this ApiReference.

        The JSON representation of the swagger

        :return: The swagger of this ApiReference.
        :rtype: object
        """
        return self._swagger

    @swagger.setter
    def swagger(self, swagger):
        """Sets the swagger of this ApiReference.

        The JSON representation of the swagger

        :param swagger: The swagger of this ApiReference.
        :type swagger: object
        """

        self._swagger = swagger

    @property
    def id(self):
        """Gets the id of this ApiReference.

        Resource reference id

        :return: The id of this ApiReference.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiReference.

        Resource reference id

        :param id: The id of this ApiReference.
        :type id: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this ApiReference.

        Resource reference type

        :return: The type of this ApiReference.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApiReference.

        Resource reference type

        :param type: The type of this ApiReference.
        :type type: str
        """

        self._type = type
