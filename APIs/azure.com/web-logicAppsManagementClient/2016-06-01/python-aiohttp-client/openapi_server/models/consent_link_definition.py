# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConsentLinkDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, first_party_login_uri: str=None, link: str=None, status: str=None):
        """ConsentLinkDefinition - a model defined in OpenAPI

        :param display_name: The display_name of this ConsentLinkDefinition.
        :param first_party_login_uri: The first_party_login_uri of this ConsentLinkDefinition.
        :param link: The link of this ConsentLinkDefinition.
        :param status: The status of this ConsentLinkDefinition.
        """
        self.openapi_types = {
            'display_name': str,
            'first_party_login_uri': str,
            'link': str,
            'status': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'first_party_login_uri': 'firstPartyLoginUri',
            'link': 'link',
            'status': 'status'
        }

        self._display_name = display_name
        self._first_party_login_uri = first_party_login_uri
        self._link = link
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsentLinkDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsentLinkDefinition of this ConsentLinkDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this ConsentLinkDefinition.

        Display name of the parameter in the connection provider's OAuth settings

        :return: The display_name of this ConsentLinkDefinition.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ConsentLinkDefinition.

        Display name of the parameter in the connection provider's OAuth settings

        :param display_name: The display_name of this ConsentLinkDefinition.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def first_party_login_uri(self):
        """Gets the first_party_login_uri of this ConsentLinkDefinition.

        URI for first party login

        :return: The first_party_login_uri of this ConsentLinkDefinition.
        :rtype: str
        """
        return self._first_party_login_uri

    @first_party_login_uri.setter
    def first_party_login_uri(self, first_party_login_uri):
        """Sets the first_party_login_uri of this ConsentLinkDefinition.

        URI for first party login

        :param first_party_login_uri: The first_party_login_uri of this ConsentLinkDefinition.
        :type first_party_login_uri: str
        """

        self._first_party_login_uri = first_party_login_uri

    @property
    def link(self):
        """Gets the link of this ConsentLinkDefinition.

        URI for the consent link

        :return: The link of this ConsentLinkDefinition.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ConsentLinkDefinition.

        URI for the consent link

        :param link: The link of this ConsentLinkDefinition.
        :type link: str
        """

        self._link = link

    @property
    def status(self):
        """Gets the status of this ConsentLinkDefinition.

        Status of the link

        :return: The status of this ConsentLinkDefinition.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ConsentLinkDefinition.

        Status of the link

        :param status: The status of this ConsentLinkDefinition.
        :type status: str
        """
        allowed_values = ["Unauthenticated", "Authenticated", "Error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
