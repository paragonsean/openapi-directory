# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_o_auth_settings import ApiOAuthSettings
from openapi_server import util


class ConnectionParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, o_auth_settings: ApiOAuthSettings=None, type: str=None):
        """ConnectionParameter - a model defined in OpenAPI

        :param o_auth_settings: The o_auth_settings of this ConnectionParameter.
        :param type: The type of this ConnectionParameter.
        """
        self.openapi_types = {
            'o_auth_settings': ApiOAuthSettings,
            'type': str
        }

        self.attribute_map = {
            'o_auth_settings': 'oAuthSettings',
            'type': 'type'
        }

        self._o_auth_settings = o_auth_settings
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectionParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectionParameter of this ConnectionParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def o_auth_settings(self):
        """Gets the o_auth_settings of this ConnectionParameter.


        :return: The o_auth_settings of this ConnectionParameter.
        :rtype: ApiOAuthSettings
        """
        return self._o_auth_settings

    @o_auth_settings.setter
    def o_auth_settings(self, o_auth_settings):
        """Sets the o_auth_settings of this ConnectionParameter.


        :param o_auth_settings: The o_auth_settings of this ConnectionParameter.
        :type o_auth_settings: ApiOAuthSettings
        """

        self._o_auth_settings = o_auth_settings

    @property
    def type(self):
        """Gets the type of this ConnectionParameter.

        Type of the parameter

        :return: The type of this ConnectionParameter.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConnectionParameter.

        Type of the parameter

        :param type: The type of this ConnectionParameter.
        :type type: str
        """
        allowed_values = ["string", "securestring", "secureobject", "int", "bool", "object", "array", "oauthSetting", "connection"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
