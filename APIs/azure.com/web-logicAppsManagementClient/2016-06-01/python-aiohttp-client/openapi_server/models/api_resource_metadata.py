# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_type import ApiType
from openapi_server.models.wsdl_import_method import WsdlImportMethod
from openapi_server.models.wsdl_service import WsdlService
from openapi_server import util


class ApiResourceMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_type: ApiType=None, brand_color: str=None, connection_type: str=None, hide_key: str=None, source: str=None, tags: Dict[str, str]=None, wsdl_import_method: WsdlImportMethod=None, wsdl_service: WsdlService=None):
        """ApiResourceMetadata - a model defined in OpenAPI

        :param api_type: The api_type of this ApiResourceMetadata.
        :param brand_color: The brand_color of this ApiResourceMetadata.
        :param connection_type: The connection_type of this ApiResourceMetadata.
        :param hide_key: The hide_key of this ApiResourceMetadata.
        :param source: The source of this ApiResourceMetadata.
        :param tags: The tags of this ApiResourceMetadata.
        :param wsdl_import_method: The wsdl_import_method of this ApiResourceMetadata.
        :param wsdl_service: The wsdl_service of this ApiResourceMetadata.
        """
        self.openapi_types = {
            'api_type': ApiType,
            'brand_color': str,
            'connection_type': str,
            'hide_key': str,
            'source': str,
            'tags': Dict[str, str],
            'wsdl_import_method': WsdlImportMethod,
            'wsdl_service': WsdlService
        }

        self.attribute_map = {
            'api_type': 'apiType',
            'brand_color': 'brandColor',
            'connection_type': 'connectionType',
            'hide_key': 'hideKey',
            'source': 'source',
            'tags': 'tags',
            'wsdl_import_method': 'wsdlImportMethod',
            'wsdl_service': 'wsdlService'
        }

        self._api_type = api_type
        self._brand_color = brand_color
        self._connection_type = connection_type
        self._hide_key = hide_key
        self._source = source
        self._tags = tags
        self._wsdl_import_method = wsdl_import_method
        self._wsdl_service = wsdl_service

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiResourceMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiResourceMetadata of this ApiResourceMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_type(self):
        """Gets the api_type of this ApiResourceMetadata.


        :return: The api_type of this ApiResourceMetadata.
        :rtype: ApiType
        """
        return self._api_type

    @api_type.setter
    def api_type(self, api_type):
        """Sets the api_type of this ApiResourceMetadata.


        :param api_type: The api_type of this ApiResourceMetadata.
        :type api_type: ApiType
        """

        self._api_type = api_type

    @property
    def brand_color(self):
        """Gets the brand_color of this ApiResourceMetadata.

        Brand color

        :return: The brand_color of this ApiResourceMetadata.
        :rtype: str
        """
        return self._brand_color

    @brand_color.setter
    def brand_color(self, brand_color):
        """Sets the brand_color of this ApiResourceMetadata.

        Brand color

        :param brand_color: The brand_color of this ApiResourceMetadata.
        :type brand_color: str
        """

        self._brand_color = brand_color

    @property
    def connection_type(self):
        """Gets the connection_type of this ApiResourceMetadata.

        The connection type

        :return: The connection_type of this ApiResourceMetadata.
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this ApiResourceMetadata.

        The connection type

        :param connection_type: The connection_type of this ApiResourceMetadata.
        :type connection_type: str
        """

        self._connection_type = connection_type

    @property
    def hide_key(self):
        """Gets the hide_key of this ApiResourceMetadata.

        Hide key

        :return: The hide_key of this ApiResourceMetadata.
        :rtype: str
        """
        return self._hide_key

    @hide_key.setter
    def hide_key(self, hide_key):
        """Sets the hide_key of this ApiResourceMetadata.

        Hide key

        :param hide_key: The hide_key of this ApiResourceMetadata.
        :type hide_key: str
        """

        self._hide_key = hide_key

    @property
    def source(self):
        """Gets the source of this ApiResourceMetadata.

        The source

        :return: The source of this ApiResourceMetadata.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ApiResourceMetadata.

        The source

        :param source: The source of this ApiResourceMetadata.
        :type source: str
        """

        self._source = source

    @property
    def tags(self):
        """Gets the tags of this ApiResourceMetadata.

        Resource tags

        :return: The tags of this ApiResourceMetadata.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ApiResourceMetadata.

        Resource tags

        :param tags: The tags of this ApiResourceMetadata.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def wsdl_import_method(self):
        """Gets the wsdl_import_method of this ApiResourceMetadata.


        :return: The wsdl_import_method of this ApiResourceMetadata.
        :rtype: WsdlImportMethod
        """
        return self._wsdl_import_method

    @wsdl_import_method.setter
    def wsdl_import_method(self, wsdl_import_method):
        """Sets the wsdl_import_method of this ApiResourceMetadata.


        :param wsdl_import_method: The wsdl_import_method of this ApiResourceMetadata.
        :type wsdl_import_method: WsdlImportMethod
        """

        self._wsdl_import_method = wsdl_import_method

    @property
    def wsdl_service(self):
        """Gets the wsdl_service of this ApiResourceMetadata.


        :return: The wsdl_service of this ApiResourceMetadata.
        :rtype: WsdlService
        """
        return self._wsdl_service

    @wsdl_service.setter
    def wsdl_service(self, wsdl_service):
        """Sets the wsdl_service of this ApiResourceMetadata.


        :param wsdl_service: The wsdl_service of this ApiResourceMetadata.
        :type wsdl_service: WsdlService
        """

        self._wsdl_service = wsdl_service
