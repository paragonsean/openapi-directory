/*
 * LogicAppsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConnectionGatewayDefinition;
import org.openapitools.client.model.ConnectionGatewayDefinitionCollection;
import org.openapitools.client.model.ConnectionGatewayInstallationDefinition;
import org.openapitools.client.model.ConnectionGatewayInstallationDefinitionCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConnectionGatewaysApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConnectionGatewaysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConnectionGatewaysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for connectionGatewayInstallationsGet
     * @param subscriptionId Subscription Id (required)
     * @param location The location (required)
     * @param gatewayId Gateway ID (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway installation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionGatewayInstallationsGetCall(String subscriptionId, String location, String gatewayId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/connectionGatewayInstallations/{gatewayId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "gatewayId" + "}", localVarApiClient.escapeString(gatewayId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionGatewayInstallationsGetValidateBeforeCall(String subscriptionId, String location, String gatewayId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectionGatewayInstallationsGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling connectionGatewayInstallationsGet(Async)");
        }

        // verify the required parameter 'gatewayId' is set
        if (gatewayId == null) {
            throw new ApiException("Missing the required parameter 'gatewayId' when calling connectionGatewayInstallationsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectionGatewayInstallationsGet(Async)");
        }

        return connectionGatewayInstallationsGetCall(subscriptionId, location, gatewayId, apiVersion, _callback);

    }

    /**
     * Gets an installed gateway that the user is an admin of
     * Get a specific installed gateway that the user is an admin of, in a specific subscription and at a certain location
     * @param subscriptionId Subscription Id (required)
     * @param location The location (required)
     * @param gatewayId Gateway ID (required)
     * @param apiVersion API Version (required)
     * @return ConnectionGatewayInstallationDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway installation </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionGatewayInstallationDefinition connectionGatewayInstallationsGet(String subscriptionId, String location, String gatewayId, String apiVersion) throws ApiException {
        ApiResponse<ConnectionGatewayInstallationDefinition> localVarResp = connectionGatewayInstallationsGetWithHttpInfo(subscriptionId, location, gatewayId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets an installed gateway that the user is an admin of
     * Get a specific installed gateway that the user is an admin of, in a specific subscription and at a certain location
     * @param subscriptionId Subscription Id (required)
     * @param location The location (required)
     * @param gatewayId Gateway ID (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ConnectionGatewayInstallationDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway installation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionGatewayInstallationDefinition> connectionGatewayInstallationsGetWithHttpInfo(String subscriptionId, String location, String gatewayId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = connectionGatewayInstallationsGetValidateBeforeCall(subscriptionId, location, gatewayId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ConnectionGatewayInstallationDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets an installed gateway that the user is an admin of (asynchronously)
     * Get a specific installed gateway that the user is an admin of, in a specific subscription and at a certain location
     * @param subscriptionId Subscription Id (required)
     * @param location The location (required)
     * @param gatewayId Gateway ID (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway installation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionGatewayInstallationsGetAsync(String subscriptionId, String location, String gatewayId, String apiVersion, final ApiCallback<ConnectionGatewayInstallationDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionGatewayInstallationsGetValidateBeforeCall(subscriptionId, location, gatewayId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ConnectionGatewayInstallationDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionGatewayInstallationsList
     * @param subscriptionId Subscription Id (required)
     * @param location The location (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway installations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionGatewayInstallationsListCall(String subscriptionId, String location, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/connectionGatewayInstallations"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionGatewayInstallationsListValidateBeforeCall(String subscriptionId, String location, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectionGatewayInstallationsList(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling connectionGatewayInstallationsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectionGatewayInstallationsList(Async)");
        }

        return connectionGatewayInstallationsListCall(subscriptionId, location, apiVersion, _callback);

    }

    /**
     * Gets a list of installed gateways that the user is an admin of
     * Gets a list of installed gateways that the user is an admin of, in a specific subscription and at a certain location
     * @param subscriptionId Subscription Id (required)
     * @param location The location (required)
     * @param apiVersion API Version (required)
     * @return ConnectionGatewayInstallationDefinitionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway installations </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionGatewayInstallationDefinitionCollection connectionGatewayInstallationsList(String subscriptionId, String location, String apiVersion) throws ApiException {
        ApiResponse<ConnectionGatewayInstallationDefinitionCollection> localVarResp = connectionGatewayInstallationsListWithHttpInfo(subscriptionId, location, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a list of installed gateways that the user is an admin of
     * Gets a list of installed gateways that the user is an admin of, in a specific subscription and at a certain location
     * @param subscriptionId Subscription Id (required)
     * @param location The location (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ConnectionGatewayInstallationDefinitionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway installations </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionGatewayInstallationDefinitionCollection> connectionGatewayInstallationsListWithHttpInfo(String subscriptionId, String location, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = connectionGatewayInstallationsListValidateBeforeCall(subscriptionId, location, apiVersion, null);
        Type localVarReturnType = new TypeToken<ConnectionGatewayInstallationDefinitionCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of installed gateways that the user is an admin of (asynchronously)
     * Gets a list of installed gateways that the user is an admin of, in a specific subscription and at a certain location
     * @param subscriptionId Subscription Id (required)
     * @param location The location (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway installations </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionGatewayInstallationsListAsync(String subscriptionId, String location, String apiVersion, final ApiCallback<ConnectionGatewayInstallationDefinitionCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionGatewayInstallationsListValidateBeforeCall(subscriptionId, location, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ConnectionGatewayInstallationDefinitionCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionGatewaysCreateOrUpdate
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param connectionGatewayName The connection gateway name (required)
     * @param apiVersion API Version (required)
     * @param connectionGateway The connection gateway (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated gateway definition </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The newly created gateway definition </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionGatewaysCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String connectionGatewayName, String apiVersion, ConnectionGatewayDefinition connectionGateway, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionGateway;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connectionGateways/{connectionGatewayName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "connectionGatewayName" + "}", localVarApiClient.escapeString(connectionGatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionGatewaysCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String connectionGatewayName, String apiVersion, ConnectionGatewayDefinition connectionGateway, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectionGatewaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectionGatewaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'connectionGatewayName' is set
        if (connectionGatewayName == null) {
            throw new ApiException("Missing the required parameter 'connectionGatewayName' when calling connectionGatewaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectionGatewaysCreateOrUpdate(Async)");
        }

        // verify the required parameter 'connectionGateway' is set
        if (connectionGateway == null) {
            throw new ApiException("Missing the required parameter 'connectionGateway' when calling connectionGatewaysCreateOrUpdate(Async)");
        }

        return connectionGatewaysCreateOrUpdateCall(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion, connectionGateway, _callback);

    }

    /**
     * Replaces a specific gateway
     * Creates or updates a specific gateway for under a subscription and in a specific resource group
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param connectionGatewayName The connection gateway name (required)
     * @param apiVersion API Version (required)
     * @param connectionGateway The connection gateway (required)
     * @return ConnectionGatewayDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated gateway definition </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The newly created gateway definition </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionGatewayDefinition connectionGatewaysCreateOrUpdate(String subscriptionId, String resourceGroupName, String connectionGatewayName, String apiVersion, ConnectionGatewayDefinition connectionGateway) throws ApiException {
        ApiResponse<ConnectionGatewayDefinition> localVarResp = connectionGatewaysCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion, connectionGateway);
        return localVarResp.getData();
    }

    /**
     * Replaces a specific gateway
     * Creates or updates a specific gateway for under a subscription and in a specific resource group
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param connectionGatewayName The connection gateway name (required)
     * @param apiVersion API Version (required)
     * @param connectionGateway The connection gateway (required)
     * @return ApiResponse&lt;ConnectionGatewayDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated gateway definition </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The newly created gateway definition </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionGatewayDefinition> connectionGatewaysCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String connectionGatewayName, String apiVersion, ConnectionGatewayDefinition connectionGateway) throws ApiException {
        okhttp3.Call localVarCall = connectionGatewaysCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion, connectionGateway, null);
        Type localVarReturnType = new TypeToken<ConnectionGatewayDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replaces a specific gateway (asynchronously)
     * Creates or updates a specific gateway for under a subscription and in a specific resource group
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param connectionGatewayName The connection gateway name (required)
     * @param apiVersion API Version (required)
     * @param connectionGateway The connection gateway (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated gateway definition </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The newly created gateway definition </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionGatewaysCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String connectionGatewayName, String apiVersion, ConnectionGatewayDefinition connectionGateway, final ApiCallback<ConnectionGatewayDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionGatewaysCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion, connectionGateway, _callback);
        Type localVarReturnType = new TypeToken<ConnectionGatewayDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionGatewaysDelete
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param connectionGatewayName The connection gateway name (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the connection gateway </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No connection gateway to delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionGatewaysDeleteCall(String subscriptionId, String resourceGroupName, String connectionGatewayName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connectionGateways/{connectionGatewayName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "connectionGatewayName" + "}", localVarApiClient.escapeString(connectionGatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionGatewaysDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String connectionGatewayName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectionGatewaysDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectionGatewaysDelete(Async)");
        }

        // verify the required parameter 'connectionGatewayName' is set
        if (connectionGatewayName == null) {
            throw new ApiException("Missing the required parameter 'connectionGatewayName' when calling connectionGatewaysDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectionGatewaysDelete(Async)");
        }

        return connectionGatewaysDeleteCall(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion, _callback);

    }

    /**
     * Deletes a specific gateway
     * Deletes a specific gateway for under a subscription and in a specific resource group
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param connectionGatewayName The connection gateway name (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the connection gateway </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No connection gateway to delete </td><td>  -  </td></tr>
     </table>
     */
    public void connectionGatewaysDelete(String subscriptionId, String resourceGroupName, String connectionGatewayName, String apiVersion) throws ApiException {
        connectionGatewaysDeleteWithHttpInfo(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion);
    }

    /**
     * Deletes a specific gateway
     * Deletes a specific gateway for under a subscription and in a specific resource group
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param connectionGatewayName The connection gateway name (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the connection gateway </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No connection gateway to delete </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> connectionGatewaysDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String connectionGatewayName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = connectionGatewaysDeleteValidateBeforeCall(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a specific gateway (asynchronously)
     * Deletes a specific gateway for under a subscription and in a specific resource group
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param connectionGatewayName The connection gateway name (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the connection gateway </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No connection gateway to delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionGatewaysDeleteAsync(String subscriptionId, String resourceGroupName, String connectionGatewayName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionGatewaysDeleteValidateBeforeCall(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionGatewaysGet
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param connectionGatewayName The connection gateway name (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway definition </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionGatewaysGetCall(String subscriptionId, String resourceGroupName, String connectionGatewayName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connectionGateways/{connectionGatewayName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "connectionGatewayName" + "}", localVarApiClient.escapeString(connectionGatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionGatewaysGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String connectionGatewayName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectionGatewaysGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectionGatewaysGet(Async)");
        }

        // verify the required parameter 'connectionGatewayName' is set
        if (connectionGatewayName == null) {
            throw new ApiException("Missing the required parameter 'connectionGatewayName' when calling connectionGatewaysGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectionGatewaysGet(Async)");
        }

        return connectionGatewaysGetCall(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion, _callback);

    }

    /**
     * Gets a specific gateway
     * Gets a specific gateway under a subscription and in a specific resource group
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param connectionGatewayName The connection gateway name (required)
     * @param apiVersion API Version (required)
     * @return ConnectionGatewayDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway definition </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionGatewayDefinition connectionGatewaysGet(String subscriptionId, String resourceGroupName, String connectionGatewayName, String apiVersion) throws ApiException {
        ApiResponse<ConnectionGatewayDefinition> localVarResp = connectionGatewaysGetWithHttpInfo(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a specific gateway
     * Gets a specific gateway under a subscription and in a specific resource group
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param connectionGatewayName The connection gateway name (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ConnectionGatewayDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway definition </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionGatewayDefinition> connectionGatewaysGetWithHttpInfo(String subscriptionId, String resourceGroupName, String connectionGatewayName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = connectionGatewaysGetValidateBeforeCall(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ConnectionGatewayDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a specific gateway (asynchronously)
     * Gets a specific gateway under a subscription and in a specific resource group
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param connectionGatewayName The connection gateway name (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway definition </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionGatewaysGetAsync(String subscriptionId, String resourceGroupName, String connectionGatewayName, String apiVersion, final ApiCallback<ConnectionGatewayDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionGatewaysGetValidateBeforeCall(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ConnectionGatewayDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionGatewaysList
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway definitions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionGatewaysListCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Web/connectionGateways"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionGatewaysListValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectionGatewaysList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectionGatewaysList(Async)");
        }

        return connectionGatewaysListCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * Lists all of the connection gateways
     * Gets a list of gateways under a subscription
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ConnectionGatewayDefinitionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway definitions </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionGatewayDefinitionCollection connectionGatewaysList(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ConnectionGatewayDefinitionCollection> localVarResp = connectionGatewaysListWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Lists all of the connection gateways
     * Gets a list of gateways under a subscription
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ConnectionGatewayDefinitionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway definitions </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionGatewayDefinitionCollection> connectionGatewaysListWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = connectionGatewaysListValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ConnectionGatewayDefinitionCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all of the connection gateways (asynchronously)
     * Gets a list of gateways under a subscription
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway definitions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionGatewaysListAsync(String subscriptionId, String apiVersion, final ApiCallback<ConnectionGatewayDefinitionCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionGatewaysListValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ConnectionGatewayDefinitionCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionGatewaysListByResourceGroup
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway definitions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionGatewaysListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connectionGateways"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionGatewaysListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectionGatewaysListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectionGatewaysListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectionGatewaysListByResourceGroup(Async)");
        }

        return connectionGatewaysListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * Lists all of the connection gateways
     * Gets a list of gateways under a subscription and in a specific resource group
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiVersion API Version (required)
     * @return ConnectionGatewayDefinitionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway definitions </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionGatewayDefinitionCollection connectionGatewaysListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<ConnectionGatewayDefinitionCollection> localVarResp = connectionGatewaysListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Lists all of the connection gateways
     * Gets a list of gateways under a subscription and in a specific resource group
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;ConnectionGatewayDefinitionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway definitions </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionGatewayDefinitionCollection> connectionGatewaysListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = connectionGatewaysListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ConnectionGatewayDefinitionCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all of the connection gateways (asynchronously)
     * Gets a list of gateways under a subscription and in a specific resource group
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway definitions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionGatewaysListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<ConnectionGatewayDefinitionCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionGatewaysListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ConnectionGatewayDefinitionCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionGatewaysUpdate
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param connectionGatewayName The connection gateway name (required)
     * @param apiVersion API Version (required)
     * @param connectionGateway The connection gateway (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway definition </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionGatewaysUpdateCall(String subscriptionId, String resourceGroupName, String connectionGatewayName, String apiVersion, ConnectionGatewayDefinition connectionGateway, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionGateway;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connectionGateways/{connectionGatewayName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "connectionGatewayName" + "}", localVarApiClient.escapeString(connectionGatewayName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionGatewaysUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String connectionGatewayName, String apiVersion, ConnectionGatewayDefinition connectionGateway, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectionGatewaysUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectionGatewaysUpdate(Async)");
        }

        // verify the required parameter 'connectionGatewayName' is set
        if (connectionGatewayName == null) {
            throw new ApiException("Missing the required parameter 'connectionGatewayName' when calling connectionGatewaysUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectionGatewaysUpdate(Async)");
        }

        // verify the required parameter 'connectionGateway' is set
        if (connectionGateway == null) {
            throw new ApiException("Missing the required parameter 'connectionGateway' when calling connectionGatewaysUpdate(Async)");
        }

        return connectionGatewaysUpdateCall(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion, connectionGateway, _callback);

    }

    /**
     * Updates a specific gateway
     * Updates a connection gateway&#39;s tags
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param connectionGatewayName The connection gateway name (required)
     * @param apiVersion API Version (required)
     * @param connectionGateway The connection gateway (required)
     * @return ConnectionGatewayDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway definition </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionGatewayDefinition connectionGatewaysUpdate(String subscriptionId, String resourceGroupName, String connectionGatewayName, String apiVersion, ConnectionGatewayDefinition connectionGateway) throws ApiException {
        ApiResponse<ConnectionGatewayDefinition> localVarResp = connectionGatewaysUpdateWithHttpInfo(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion, connectionGateway);
        return localVarResp.getData();
    }

    /**
     * Updates a specific gateway
     * Updates a connection gateway&#39;s tags
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param connectionGatewayName The connection gateway name (required)
     * @param apiVersion API Version (required)
     * @param connectionGateway The connection gateway (required)
     * @return ApiResponse&lt;ConnectionGatewayDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway definition </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionGatewayDefinition> connectionGatewaysUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String connectionGatewayName, String apiVersion, ConnectionGatewayDefinition connectionGateway) throws ApiException {
        okhttp3.Call localVarCall = connectionGatewaysUpdateValidateBeforeCall(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion, connectionGateway, null);
        Type localVarReturnType = new TypeToken<ConnectionGatewayDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a specific gateway (asynchronously)
     * Updates a connection gateway&#39;s tags
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param connectionGatewayName The connection gateway name (required)
     * @param apiVersion API Version (required)
     * @param connectionGateway The connection gateway (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The gateway definition </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionGatewaysUpdateAsync(String subscriptionId, String resourceGroupName, String connectionGatewayName, String apiVersion, ConnectionGatewayDefinition connectionGateway, final ApiCallback<ConnectionGatewayDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionGatewaysUpdateValidateBeforeCall(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion, connectionGateway, _callback);
        Type localVarReturnType = new TypeToken<ConnectionGatewayDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
