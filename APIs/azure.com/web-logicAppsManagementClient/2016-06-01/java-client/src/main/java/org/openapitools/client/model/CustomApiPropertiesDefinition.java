/*
 * LogicAppsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ApiResourceBackendService;
import org.openapitools.client.model.ApiResourceDefinitions;
import org.openapitools.client.model.ApiType;
import org.openapitools.client.model.ConnectionParameter;
import org.openapitools.client.model.WsdlDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Custom API properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:30.991362-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomApiPropertiesDefinition {
  public static final String SERIALIZED_NAME_API_DEFINITIONS = "apiDefinitions";
  @SerializedName(SERIALIZED_NAME_API_DEFINITIONS)
  private ApiResourceDefinitions apiDefinitions;

  public static final String SERIALIZED_NAME_API_TYPE = "apiType";
  @SerializedName(SERIALIZED_NAME_API_TYPE)
  private ApiType apiType;

  public static final String SERIALIZED_NAME_BACKEND_SERVICE = "backendService";
  @SerializedName(SERIALIZED_NAME_BACKEND_SERVICE)
  private ApiResourceBackendService backendService;

  public static final String SERIALIZED_NAME_BRAND_COLOR = "brandColor";
  @SerializedName(SERIALIZED_NAME_BRAND_COLOR)
  private String brandColor;

  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private List<String> capabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONNECTION_PARAMETERS = "connectionParameters";
  @SerializedName(SERIALIZED_NAME_CONNECTION_PARAMETERS)
  private Map<String, ConnectionParameter> connectionParameters = new HashMap<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ICON_URI = "iconUri";
  @SerializedName(SERIALIZED_NAME_ICON_URI)
  private String iconUri;

  public static final String SERIALIZED_NAME_RUNTIME_URLS = "runtimeUrls";
  @SerializedName(SERIALIZED_NAME_RUNTIME_URLS)
  private List<String> runtimeUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_SWAGGER = "swagger";
  @SerializedName(SERIALIZED_NAME_SWAGGER)
  private Object swagger;

  public static final String SERIALIZED_NAME_WSDL_DEFINITION = "wsdlDefinition";
  @SerializedName(SERIALIZED_NAME_WSDL_DEFINITION)
  private WsdlDefinition wsdlDefinition;

  public CustomApiPropertiesDefinition() {
  }

  public CustomApiPropertiesDefinition apiDefinitions(ApiResourceDefinitions apiDefinitions) {
    this.apiDefinitions = apiDefinitions;
    return this;
  }

  /**
   * Get apiDefinitions
   * @return apiDefinitions
   */
  @javax.annotation.Nullable
  public ApiResourceDefinitions getApiDefinitions() {
    return apiDefinitions;
  }

  public void setApiDefinitions(ApiResourceDefinitions apiDefinitions) {
    this.apiDefinitions = apiDefinitions;
  }


  public CustomApiPropertiesDefinition apiType(ApiType apiType) {
    this.apiType = apiType;
    return this;
  }

  /**
   * Get apiType
   * @return apiType
   */
  @javax.annotation.Nullable
  public ApiType getApiType() {
    return apiType;
  }

  public void setApiType(ApiType apiType) {
    this.apiType = apiType;
  }


  public CustomApiPropertiesDefinition backendService(ApiResourceBackendService backendService) {
    this.backendService = backendService;
    return this;
  }

  /**
   * Get backendService
   * @return backendService
   */
  @javax.annotation.Nullable
  public ApiResourceBackendService getBackendService() {
    return backendService;
  }

  public void setBackendService(ApiResourceBackendService backendService) {
    this.backendService = backendService;
  }


  public CustomApiPropertiesDefinition brandColor(String brandColor) {
    this.brandColor = brandColor;
    return this;
  }

  /**
   * Brand color
   * @return brandColor
   */
  @javax.annotation.Nullable
  public String getBrandColor() {
    return brandColor;
  }

  public void setBrandColor(String brandColor) {
    this.brandColor = brandColor;
  }


  public CustomApiPropertiesDefinition capabilities(List<String> capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  public CustomApiPropertiesDefinition addCapabilitiesItem(String capabilitiesItem) {
    if (this.capabilities == null) {
      this.capabilities = new ArrayList<>();
    }
    this.capabilities.add(capabilitiesItem);
    return this;
  }

  /**
   * The custom API capabilities
   * @return capabilities
   */
  @javax.annotation.Nullable
  public List<String> getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(List<String> capabilities) {
    this.capabilities = capabilities;
  }


  public CustomApiPropertiesDefinition connectionParameters(Map<String, ConnectionParameter> connectionParameters) {
    this.connectionParameters = connectionParameters;
    return this;
  }

  public CustomApiPropertiesDefinition putConnectionParametersItem(String key, ConnectionParameter connectionParametersItem) {
    if (this.connectionParameters == null) {
      this.connectionParameters = new HashMap<>();
    }
    this.connectionParameters.put(key, connectionParametersItem);
    return this;
  }

  /**
   * Connection parameters
   * @return connectionParameters
   */
  @javax.annotation.Nullable
  public Map<String, ConnectionParameter> getConnectionParameters() {
    return connectionParameters;
  }

  public void setConnectionParameters(Map<String, ConnectionParameter> connectionParameters) {
    this.connectionParameters = connectionParameters;
  }


  public CustomApiPropertiesDefinition description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The custom API description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CustomApiPropertiesDefinition displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public CustomApiPropertiesDefinition iconUri(String iconUri) {
    this.iconUri = iconUri;
    return this;
  }

  /**
   * The icon URI
   * @return iconUri
   */
  @javax.annotation.Nullable
  public String getIconUri() {
    return iconUri;
  }

  public void setIconUri(String iconUri) {
    this.iconUri = iconUri;
  }


  public CustomApiPropertiesDefinition runtimeUrls(List<String> runtimeUrls) {
    this.runtimeUrls = runtimeUrls;
    return this;
  }

  public CustomApiPropertiesDefinition addRuntimeUrlsItem(String runtimeUrlsItem) {
    if (this.runtimeUrls == null) {
      this.runtimeUrls = new ArrayList<>();
    }
    this.runtimeUrls.add(runtimeUrlsItem);
    return this;
  }

  /**
   * Runtime URLs
   * @return runtimeUrls
   */
  @javax.annotation.Nullable
  public List<String> getRuntimeUrls() {
    return runtimeUrls;
  }

  public void setRuntimeUrls(List<String> runtimeUrls) {
    this.runtimeUrls = runtimeUrls;
  }


  public CustomApiPropertiesDefinition swagger(Object swagger) {
    this.swagger = swagger;
    return this;
  }

  /**
   * The JSON representation of the swagger
   * @return swagger
   */
  @javax.annotation.Nullable
  public Object getSwagger() {
    return swagger;
  }

  public void setSwagger(Object swagger) {
    this.swagger = swagger;
  }


  public CustomApiPropertiesDefinition wsdlDefinition(WsdlDefinition wsdlDefinition) {
    this.wsdlDefinition = wsdlDefinition;
    return this;
  }

  /**
   * Get wsdlDefinition
   * @return wsdlDefinition
   */
  @javax.annotation.Nullable
  public WsdlDefinition getWsdlDefinition() {
    return wsdlDefinition;
  }

  public void setWsdlDefinition(WsdlDefinition wsdlDefinition) {
    this.wsdlDefinition = wsdlDefinition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomApiPropertiesDefinition customApiPropertiesDefinition = (CustomApiPropertiesDefinition) o;
    return Objects.equals(this.apiDefinitions, customApiPropertiesDefinition.apiDefinitions) &&
        Objects.equals(this.apiType, customApiPropertiesDefinition.apiType) &&
        Objects.equals(this.backendService, customApiPropertiesDefinition.backendService) &&
        Objects.equals(this.brandColor, customApiPropertiesDefinition.brandColor) &&
        Objects.equals(this.capabilities, customApiPropertiesDefinition.capabilities) &&
        Objects.equals(this.connectionParameters, customApiPropertiesDefinition.connectionParameters) &&
        Objects.equals(this.description, customApiPropertiesDefinition.description) &&
        Objects.equals(this.displayName, customApiPropertiesDefinition.displayName) &&
        Objects.equals(this.iconUri, customApiPropertiesDefinition.iconUri) &&
        Objects.equals(this.runtimeUrls, customApiPropertiesDefinition.runtimeUrls) &&
        Objects.equals(this.swagger, customApiPropertiesDefinition.swagger) &&
        Objects.equals(this.wsdlDefinition, customApiPropertiesDefinition.wsdlDefinition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiDefinitions, apiType, backendService, brandColor, capabilities, connectionParameters, description, displayName, iconUri, runtimeUrls, swagger, wsdlDefinition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomApiPropertiesDefinition {\n");
    sb.append("    apiDefinitions: ").append(toIndentedString(apiDefinitions)).append("\n");
    sb.append("    apiType: ").append(toIndentedString(apiType)).append("\n");
    sb.append("    backendService: ").append(toIndentedString(backendService)).append("\n");
    sb.append("    brandColor: ").append(toIndentedString(brandColor)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    connectionParameters: ").append(toIndentedString(connectionParameters)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    iconUri: ").append(toIndentedString(iconUri)).append("\n");
    sb.append("    runtimeUrls: ").append(toIndentedString(runtimeUrls)).append("\n");
    sb.append("    swagger: ").append(toIndentedString(swagger)).append("\n");
    sb.append("    wsdlDefinition: ").append(toIndentedString(wsdlDefinition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiDefinitions");
    openapiFields.add("apiType");
    openapiFields.add("backendService");
    openapiFields.add("brandColor");
    openapiFields.add("capabilities");
    openapiFields.add("connectionParameters");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("iconUri");
    openapiFields.add("runtimeUrls");
    openapiFields.add("swagger");
    openapiFields.add("wsdlDefinition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomApiPropertiesDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomApiPropertiesDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomApiPropertiesDefinition is not found in the empty JSON string", CustomApiPropertiesDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomApiPropertiesDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomApiPropertiesDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `apiDefinitions`
      if (jsonObj.get("apiDefinitions") != null && !jsonObj.get("apiDefinitions").isJsonNull()) {
        ApiResourceDefinitions.validateJsonElement(jsonObj.get("apiDefinitions"));
      }
      // validate the optional field `apiType`
      if (jsonObj.get("apiType") != null && !jsonObj.get("apiType").isJsonNull()) {
        ApiType.validateJsonElement(jsonObj.get("apiType"));
      }
      // validate the optional field `backendService`
      if (jsonObj.get("backendService") != null && !jsonObj.get("backendService").isJsonNull()) {
        ApiResourceBackendService.validateJsonElement(jsonObj.get("backendService"));
      }
      if ((jsonObj.get("brandColor") != null && !jsonObj.get("brandColor").isJsonNull()) && !jsonObj.get("brandColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandColor").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("capabilities") != null && !jsonObj.get("capabilities").isJsonNull() && !jsonObj.get("capabilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `capabilities` to be an array in the JSON string but got `%s`", jsonObj.get("capabilities").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("iconUri") != null && !jsonObj.get("iconUri").isJsonNull()) && !jsonObj.get("iconUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconUri").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("runtimeUrls") != null && !jsonObj.get("runtimeUrls").isJsonNull() && !jsonObj.get("runtimeUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `runtimeUrls` to be an array in the JSON string but got `%s`", jsonObj.get("runtimeUrls").toString()));
      }
      // validate the optional field `wsdlDefinition`
      if (jsonObj.get("wsdlDefinition") != null && !jsonObj.get("wsdlDefinition").isJsonNull()) {
        WsdlDefinition.validateJsonElement(jsonObj.get("wsdlDefinition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomApiPropertiesDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomApiPropertiesDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomApiPropertiesDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomApiPropertiesDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomApiPropertiesDefinition>() {
           @Override
           public void write(JsonWriter out, CustomApiPropertiesDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomApiPropertiesDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomApiPropertiesDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomApiPropertiesDefinition
   * @throws IOException if the JSON string is invalid with respect to CustomApiPropertiesDefinition
   */
  public static CustomApiPropertiesDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomApiPropertiesDefinition.class);
  }

  /**
   * Convert an instance of CustomApiPropertiesDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

