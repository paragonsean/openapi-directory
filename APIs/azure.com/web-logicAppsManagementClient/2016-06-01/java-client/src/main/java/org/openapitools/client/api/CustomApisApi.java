/*
 * LogicAppsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CustomApiDefinition;
import org.openapitools.client.model.CustomApiDefinitionCollection;
import org.openapitools.client.model.CustomApiReference;
import org.openapitools.client.model.WsdlDefinition;
import org.openapitools.client.model.WsdlServiceCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomApisApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomApisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomApisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for customApisCreateOrUpdate
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiName API name (required)
     * @param apiVersion API Version (required)
     * @param customApi The custom API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replacing custom API </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customApisCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String apiName, String apiVersion, CustomApiDefinition customApi, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customApi;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/customApis/{apiName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "apiName" + "}", localVarApiClient.escapeString(apiName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customApisCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiName, String apiVersion, CustomApiDefinition customApi, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling customApisCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling customApisCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiName' is set
        if (apiName == null) {
            throw new ApiException("Missing the required parameter 'apiName' when calling customApisCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling customApisCreateOrUpdate(Async)");
        }

        // verify the required parameter 'customApi' is set
        if (customApi == null) {
            throw new ApiException("Missing the required parameter 'customApi' when calling customApisCreateOrUpdate(Async)");
        }

        return customApisCreateOrUpdateCall(subscriptionId, resourceGroupName, apiName, apiVersion, customApi, _callback);

    }

    /**
     * Replaces an existing custom API
     * Creates or updates an existing custom API
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiName API name (required)
     * @param apiVersion API Version (required)
     * @param customApi The custom API (required)
     * @return CustomApiDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replacing custom API </td><td>  -  </td></tr>
     </table>
     */
    public CustomApiDefinition customApisCreateOrUpdate(String subscriptionId, String resourceGroupName, String apiName, String apiVersion, CustomApiDefinition customApi) throws ApiException {
        ApiResponse<CustomApiDefinition> localVarResp = customApisCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, apiName, apiVersion, customApi);
        return localVarResp.getData();
    }

    /**
     * Replaces an existing custom API
     * Creates or updates an existing custom API
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiName API name (required)
     * @param apiVersion API Version (required)
     * @param customApi The custom API (required)
     * @return ApiResponse&lt;CustomApiDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replacing custom API </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomApiDefinition> customApisCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String apiName, String apiVersion, CustomApiDefinition customApi) throws ApiException {
        okhttp3.Call localVarCall = customApisCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, apiName, apiVersion, customApi, null);
        Type localVarReturnType = new TypeToken<CustomApiDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replaces an existing custom API (asynchronously)
     * Creates or updates an existing custom API
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiName API name (required)
     * @param apiVersion API Version (required)
     * @param customApi The custom API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The replacing custom API </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customApisCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String apiName, String apiVersion, CustomApiDefinition customApi, final ApiCallback<CustomApiDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = customApisCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, apiName, apiVersion, customApi, _callback);
        Type localVarReturnType = new TypeToken<CustomApiDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customApisDelete
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiName API name (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the custom API </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No custom API to delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customApisDeleteCall(String subscriptionId, String resourceGroupName, String apiName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/customApis/{apiName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "apiName" + "}", localVarApiClient.escapeString(apiName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customApisDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling customApisDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling customApisDelete(Async)");
        }

        // verify the required parameter 'apiName' is set
        if (apiName == null) {
            throw new ApiException("Missing the required parameter 'apiName' when calling customApisDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling customApisDelete(Async)");
        }

        return customApisDeleteCall(subscriptionId, resourceGroupName, apiName, apiVersion, _callback);

    }

    /**
     * Delete a custom API
     * Deletes a custom API from the resource group
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiName API name (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the custom API </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No custom API to delete </td><td>  -  </td></tr>
     </table>
     */
    public void customApisDelete(String subscriptionId, String resourceGroupName, String apiName, String apiVersion) throws ApiException {
        customApisDeleteWithHttpInfo(subscriptionId, resourceGroupName, apiName, apiVersion);
    }

    /**
     * Delete a custom API
     * Deletes a custom API from the resource group
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiName API name (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the custom API </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No custom API to delete </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> customApisDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String apiName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = customApisDeleteValidateBeforeCall(subscriptionId, resourceGroupName, apiName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a custom API (asynchronously)
     * Deletes a custom API from the resource group
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiName API name (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the custom API </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No custom API to delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customApisDeleteAsync(String subscriptionId, String resourceGroupName, String apiName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = customApisDeleteValidateBeforeCall(subscriptionId, resourceGroupName, apiName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for customApisExtractApiDefinitionFromWsdl
     * @param subscriptionId Subscription Id (required)
     * @param location The location (required)
     * @param apiVersion API Version (required)
     * @param wsdlDefinition WSDL definition (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Swagger of the API extracted from the WSDL </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customApisExtractApiDefinitionFromWsdlCall(String subscriptionId, String location, String apiVersion, WsdlDefinition wsdlDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wsdlDefinition;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/extractApiDefinitionFromWsdl"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customApisExtractApiDefinitionFromWsdlValidateBeforeCall(String subscriptionId, String location, String apiVersion, WsdlDefinition wsdlDefinition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling customApisExtractApiDefinitionFromWsdl(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling customApisExtractApiDefinitionFromWsdl(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling customApisExtractApiDefinitionFromWsdl(Async)");
        }

        // verify the required parameter 'wsdlDefinition' is set
        if (wsdlDefinition == null) {
            throw new ApiException("Missing the required parameter 'wsdlDefinition' when calling customApisExtractApiDefinitionFromWsdl(Async)");
        }

        return customApisExtractApiDefinitionFromWsdlCall(subscriptionId, location, apiVersion, wsdlDefinition, _callback);

    }

    /**
     * Returns API definition from WSDL
     * Parses the specified WSDL and extracts the API definition
     * @param subscriptionId Subscription Id (required)
     * @param location The location (required)
     * @param apiVersion API Version (required)
     * @param wsdlDefinition WSDL definition (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Swagger of the API extracted from the WSDL </td><td>  -  </td></tr>
     </table>
     */
    public Object customApisExtractApiDefinitionFromWsdl(String subscriptionId, String location, String apiVersion, WsdlDefinition wsdlDefinition) throws ApiException {
        ApiResponse<Object> localVarResp = customApisExtractApiDefinitionFromWsdlWithHttpInfo(subscriptionId, location, apiVersion, wsdlDefinition);
        return localVarResp.getData();
    }

    /**
     * Returns API definition from WSDL
     * Parses the specified WSDL and extracts the API definition
     * @param subscriptionId Subscription Id (required)
     * @param location The location (required)
     * @param apiVersion API Version (required)
     * @param wsdlDefinition WSDL definition (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Swagger of the API extracted from the WSDL </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> customApisExtractApiDefinitionFromWsdlWithHttpInfo(String subscriptionId, String location, String apiVersion, WsdlDefinition wsdlDefinition) throws ApiException {
        okhttp3.Call localVarCall = customApisExtractApiDefinitionFromWsdlValidateBeforeCall(subscriptionId, location, apiVersion, wsdlDefinition, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns API definition from WSDL (asynchronously)
     * Parses the specified WSDL and extracts the API definition
     * @param subscriptionId Subscription Id (required)
     * @param location The location (required)
     * @param apiVersion API Version (required)
     * @param wsdlDefinition WSDL definition (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Swagger of the API extracted from the WSDL </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customApisExtractApiDefinitionFromWsdlAsync(String subscriptionId, String location, String apiVersion, WsdlDefinition wsdlDefinition, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = customApisExtractApiDefinitionFromWsdlValidateBeforeCall(subscriptionId, location, apiVersion, wsdlDefinition, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customApisGet
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiName API name (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A custom API </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customApisGetCall(String subscriptionId, String resourceGroupName, String apiName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/customApis/{apiName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "apiName" + "}", localVarApiClient.escapeString(apiName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customApisGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling customApisGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling customApisGet(Async)");
        }

        // verify the required parameter 'apiName' is set
        if (apiName == null) {
            throw new ApiException("Missing the required parameter 'apiName' when calling customApisGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling customApisGet(Async)");
        }

        return customApisGetCall(subscriptionId, resourceGroupName, apiName, apiVersion, _callback);

    }

    /**
     * Get a custom API
     * Gets a custom API by name for a specific subscription and resource group
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiName API name (required)
     * @param apiVersion API Version (required)
     * @return CustomApiDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A custom API </td><td>  -  </td></tr>
     </table>
     */
    public CustomApiDefinition customApisGet(String subscriptionId, String resourceGroupName, String apiName, String apiVersion) throws ApiException {
        ApiResponse<CustomApiDefinition> localVarResp = customApisGetWithHttpInfo(subscriptionId, resourceGroupName, apiName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a custom API
     * Gets a custom API by name for a specific subscription and resource group
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiName API name (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;CustomApiDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A custom API </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomApiDefinition> customApisGetWithHttpInfo(String subscriptionId, String resourceGroupName, String apiName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = customApisGetValidateBeforeCall(subscriptionId, resourceGroupName, apiName, apiVersion, null);
        Type localVarReturnType = new TypeToken<CustomApiDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a custom API (asynchronously)
     * Gets a custom API by name for a specific subscription and resource group
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiName API name (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A custom API </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customApisGetAsync(String subscriptionId, String resourceGroupName, String apiName, String apiVersion, final ApiCallback<CustomApiDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = customApisGetValidateBeforeCall(subscriptionId, resourceGroupName, apiName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<CustomApiDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customApisList
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $top The number of items to be included in the result (optional)
     * @param skiptoken Skip Token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of custom APIs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customApisListCall(String subscriptionId, String apiVersion, Integer $top, String skiptoken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Web/customApis"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (skiptoken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skiptoken", skiptoken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customApisListValidateBeforeCall(String subscriptionId, String apiVersion, Integer $top, String skiptoken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling customApisList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling customApisList(Async)");
        }

        return customApisListCall(subscriptionId, apiVersion, $top, skiptoken, _callback);

    }

    /**
     * List of custom APIs
     * Gets a list of all custom APIs for a subscription id
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $top The number of items to be included in the result (optional)
     * @param skiptoken Skip Token (optional)
     * @return CustomApiDefinitionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of custom APIs </td><td>  -  </td></tr>
     </table>
     */
    public CustomApiDefinitionCollection customApisList(String subscriptionId, String apiVersion, Integer $top, String skiptoken) throws ApiException {
        ApiResponse<CustomApiDefinitionCollection> localVarResp = customApisListWithHttpInfo(subscriptionId, apiVersion, $top, skiptoken);
        return localVarResp.getData();
    }

    /**
     * List of custom APIs
     * Gets a list of all custom APIs for a subscription id
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $top The number of items to be included in the result (optional)
     * @param skiptoken Skip Token (optional)
     * @return ApiResponse&lt;CustomApiDefinitionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of custom APIs </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomApiDefinitionCollection> customApisListWithHttpInfo(String subscriptionId, String apiVersion, Integer $top, String skiptoken) throws ApiException {
        okhttp3.Call localVarCall = customApisListValidateBeforeCall(subscriptionId, apiVersion, $top, skiptoken, null);
        Type localVarReturnType = new TypeToken<CustomApiDefinitionCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of custom APIs (asynchronously)
     * Gets a list of all custom APIs for a subscription id
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $top The number of items to be included in the result (optional)
     * @param skiptoken Skip Token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of custom APIs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customApisListAsync(String subscriptionId, String apiVersion, Integer $top, String skiptoken, final ApiCallback<CustomApiDefinitionCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = customApisListValidateBeforeCall(subscriptionId, apiVersion, $top, skiptoken, _callback);
        Type localVarReturnType = new TypeToken<CustomApiDefinitionCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customApisListByResourceGroup
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiVersion API Version (required)
     * @param $top The number of items to be included in the result (optional)
     * @param skiptoken Skip Token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of custom APIs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customApisListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String skiptoken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/customApis"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if (skiptoken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skiptoken", skiptoken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customApisListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String skiptoken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling customApisListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling customApisListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling customApisListByResourceGroup(Async)");
        }

        return customApisListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, $top, skiptoken, _callback);

    }

    /**
     * List of custom APIs
     * Gets a list of all custom APIs in a subscription for a specific resource group
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiVersion API Version (required)
     * @param $top The number of items to be included in the result (optional)
     * @param skiptoken Skip Token (optional)
     * @return CustomApiDefinitionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of custom APIs </td><td>  -  </td></tr>
     </table>
     */
    public CustomApiDefinitionCollection customApisListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String skiptoken) throws ApiException {
        ApiResponse<CustomApiDefinitionCollection> localVarResp = customApisListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, $top, skiptoken);
        return localVarResp.getData();
    }

    /**
     * List of custom APIs
     * Gets a list of all custom APIs in a subscription for a specific resource group
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiVersion API Version (required)
     * @param $top The number of items to be included in the result (optional)
     * @param skiptoken Skip Token (optional)
     * @return ApiResponse&lt;CustomApiDefinitionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of custom APIs </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomApiDefinitionCollection> customApisListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String skiptoken) throws ApiException {
        okhttp3.Call localVarCall = customApisListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $top, skiptoken, null);
        Type localVarReturnType = new TypeToken<CustomApiDefinitionCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of custom APIs (asynchronously)
     * Gets a list of all custom APIs in a subscription for a specific resource group
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiVersion API Version (required)
     * @param $top The number of items to be included in the result (optional)
     * @param skiptoken Skip Token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of custom APIs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customApisListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String skiptoken, final ApiCallback<CustomApiDefinitionCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = customApisListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $top, skiptoken, _callback);
        Type localVarReturnType = new TypeToken<CustomApiDefinitionCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customApisListWsdlInterfaces
     * @param subscriptionId Subscription Id (required)
     * @param location The location (required)
     * @param apiVersion API Version (required)
     * @param wsdlDefinition WSDL definition (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of interfaces </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customApisListWsdlInterfacesCall(String subscriptionId, String location, String apiVersion, WsdlDefinition wsdlDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wsdlDefinition;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/listWsdlInterfaces"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customApisListWsdlInterfacesValidateBeforeCall(String subscriptionId, String location, String apiVersion, WsdlDefinition wsdlDefinition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling customApisListWsdlInterfaces(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling customApisListWsdlInterfaces(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling customApisListWsdlInterfaces(Async)");
        }

        // verify the required parameter 'wsdlDefinition' is set
        if (wsdlDefinition == null) {
            throw new ApiException("Missing the required parameter 'wsdlDefinition' when calling customApisListWsdlInterfaces(Async)");
        }

        return customApisListWsdlInterfacesCall(subscriptionId, location, apiVersion, wsdlDefinition, _callback);

    }

    /**
     * Lists WSDL interfaces
     * This returns the list of interfaces in the WSDL
     * @param subscriptionId Subscription Id (required)
     * @param location The location (required)
     * @param apiVersion API Version (required)
     * @param wsdlDefinition WSDL definition (required)
     * @return WsdlServiceCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of interfaces </td><td>  -  </td></tr>
     </table>
     */
    public WsdlServiceCollection customApisListWsdlInterfaces(String subscriptionId, String location, String apiVersion, WsdlDefinition wsdlDefinition) throws ApiException {
        ApiResponse<WsdlServiceCollection> localVarResp = customApisListWsdlInterfacesWithHttpInfo(subscriptionId, location, apiVersion, wsdlDefinition);
        return localVarResp.getData();
    }

    /**
     * Lists WSDL interfaces
     * This returns the list of interfaces in the WSDL
     * @param subscriptionId Subscription Id (required)
     * @param location The location (required)
     * @param apiVersion API Version (required)
     * @param wsdlDefinition WSDL definition (required)
     * @return ApiResponse&lt;WsdlServiceCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of interfaces </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WsdlServiceCollection> customApisListWsdlInterfacesWithHttpInfo(String subscriptionId, String location, String apiVersion, WsdlDefinition wsdlDefinition) throws ApiException {
        okhttp3.Call localVarCall = customApisListWsdlInterfacesValidateBeforeCall(subscriptionId, location, apiVersion, wsdlDefinition, null);
        Type localVarReturnType = new TypeToken<WsdlServiceCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists WSDL interfaces (asynchronously)
     * This returns the list of interfaces in the WSDL
     * @param subscriptionId Subscription Id (required)
     * @param location The location (required)
     * @param apiVersion API Version (required)
     * @param wsdlDefinition WSDL definition (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of interfaces </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customApisListWsdlInterfacesAsync(String subscriptionId, String location, String apiVersion, WsdlDefinition wsdlDefinition, final ApiCallback<WsdlServiceCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = customApisListWsdlInterfacesValidateBeforeCall(subscriptionId, location, apiVersion, wsdlDefinition, _callback);
        Type localVarReturnType = new TypeToken<WsdlServiceCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for customApisMove
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiName API name (required)
     * @param apiVersion API Version (required)
     * @param customApiReference The custom API reference (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> custom API successfully moved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customApisMoveCall(String subscriptionId, String resourceGroupName, String apiName, String apiVersion, CustomApiReference customApiReference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customApiReference;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/customApis/{apiName}/move"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "apiName" + "}", localVarApiClient.escapeString(apiName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customApisMoveValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiName, String apiVersion, CustomApiReference customApiReference, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling customApisMove(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling customApisMove(Async)");
        }

        // verify the required parameter 'apiName' is set
        if (apiName == null) {
            throw new ApiException("Missing the required parameter 'apiName' when calling customApisMove(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling customApisMove(Async)");
        }

        // verify the required parameter 'customApiReference' is set
        if (customApiReference == null) {
            throw new ApiException("Missing the required parameter 'customApiReference' when calling customApisMove(Async)");
        }

        return customApisMoveCall(subscriptionId, resourceGroupName, apiName, apiVersion, customApiReference, _callback);

    }

    /**
     * Moves the custom API
     * Moves a specific custom API
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiName API name (required)
     * @param apiVersion API Version (required)
     * @param customApiReference The custom API reference (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> custom API successfully moved </td><td>  -  </td></tr>
     </table>
     */
    public void customApisMove(String subscriptionId, String resourceGroupName, String apiName, String apiVersion, CustomApiReference customApiReference) throws ApiException {
        customApisMoveWithHttpInfo(subscriptionId, resourceGroupName, apiName, apiVersion, customApiReference);
    }

    /**
     * Moves the custom API
     * Moves a specific custom API
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiName API name (required)
     * @param apiVersion API Version (required)
     * @param customApiReference The custom API reference (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> custom API successfully moved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> customApisMoveWithHttpInfo(String subscriptionId, String resourceGroupName, String apiName, String apiVersion, CustomApiReference customApiReference) throws ApiException {
        okhttp3.Call localVarCall = customApisMoveValidateBeforeCall(subscriptionId, resourceGroupName, apiName, apiVersion, customApiReference, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Moves the custom API (asynchronously)
     * Moves a specific custom API
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiName API name (required)
     * @param apiVersion API Version (required)
     * @param customApiReference The custom API reference (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> custom API successfully moved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customApisMoveAsync(String subscriptionId, String resourceGroupName, String apiName, String apiVersion, CustomApiReference customApiReference, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = customApisMoveValidateBeforeCall(subscriptionId, resourceGroupName, apiName, apiVersion, customApiReference, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for customApisUpdate
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiName API name (required)
     * @param apiVersion API Version (required)
     * @param customApi The custom API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated custom API </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customApisUpdateCall(String subscriptionId, String resourceGroupName, String apiName, String apiVersion, CustomApiDefinition customApi, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = customApi;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/customApis/{apiName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "apiName" + "}", localVarApiClient.escapeString(apiName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call customApisUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiName, String apiVersion, CustomApiDefinition customApi, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling customApisUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling customApisUpdate(Async)");
        }

        // verify the required parameter 'apiName' is set
        if (apiName == null) {
            throw new ApiException("Missing the required parameter 'apiName' when calling customApisUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling customApisUpdate(Async)");
        }

        // verify the required parameter 'customApi' is set
        if (customApi == null) {
            throw new ApiException("Missing the required parameter 'customApi' when calling customApisUpdate(Async)");
        }

        return customApisUpdateCall(subscriptionId, resourceGroupName, apiName, apiVersion, customApi, _callback);

    }

    /**
     * Update an existing custom API
     * Updates an existing custom API&#39;s tags
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiName API name (required)
     * @param apiVersion API Version (required)
     * @param customApi The custom API (required)
     * @return CustomApiDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated custom API </td><td>  -  </td></tr>
     </table>
     */
    public CustomApiDefinition customApisUpdate(String subscriptionId, String resourceGroupName, String apiName, String apiVersion, CustomApiDefinition customApi) throws ApiException {
        ApiResponse<CustomApiDefinition> localVarResp = customApisUpdateWithHttpInfo(subscriptionId, resourceGroupName, apiName, apiVersion, customApi);
        return localVarResp.getData();
    }

    /**
     * Update an existing custom API
     * Updates an existing custom API&#39;s tags
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiName API name (required)
     * @param apiVersion API Version (required)
     * @param customApi The custom API (required)
     * @return ApiResponse&lt;CustomApiDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated custom API </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CustomApiDefinition> customApisUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String apiName, String apiVersion, CustomApiDefinition customApi) throws ApiException {
        okhttp3.Call localVarCall = customApisUpdateValidateBeforeCall(subscriptionId, resourceGroupName, apiName, apiVersion, customApi, null);
        Type localVarReturnType = new TypeToken<CustomApiDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an existing custom API (asynchronously)
     * Updates an existing custom API&#39;s tags
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group (required)
     * @param apiName API name (required)
     * @param apiVersion API Version (required)
     * @param customApi The custom API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated custom API </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call customApisUpdateAsync(String subscriptionId, String resourceGroupName, String apiName, String apiVersion, CustomApiDefinition customApi, final ApiCallback<CustomApiDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = customApisUpdateValidateBeforeCall(subscriptionId, resourceGroupName, apiName, apiVersion, customApi, _callback);
        Type localVarReturnType = new TypeToken<CustomApiDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
