/*
 * LogicAppsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConnectionGatewayDefinition;
import org.openapitools.client.model.ConnectionGatewayDefinitionCollection;
import org.openapitools.client.model.ConnectionGatewayInstallationDefinition;
import org.openapitools.client.model.ConnectionGatewayInstallationDefinitionCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConnectionGatewaysApi
 */
@Disabled
public class ConnectionGatewaysApiTest {

    private final ConnectionGatewaysApi api = new ConnectionGatewaysApi();

    /**
     * Gets an installed gateway that the user is an admin of
     *
     * Get a specific installed gateway that the user is an admin of, in a specific subscription and at a certain location
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionGatewayInstallationsGetTest() throws ApiException {
        String subscriptionId = null;
        String location = null;
        String gatewayId = null;
        String apiVersion = null;
        ConnectionGatewayInstallationDefinition response = api.connectionGatewayInstallationsGet(subscriptionId, location, gatewayId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a list of installed gateways that the user is an admin of
     *
     * Gets a list of installed gateways that the user is an admin of, in a specific subscription and at a certain location
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionGatewayInstallationsListTest() throws ApiException {
        String subscriptionId = null;
        String location = null;
        String apiVersion = null;
        ConnectionGatewayInstallationDefinitionCollection response = api.connectionGatewayInstallationsList(subscriptionId, location, apiVersion);
        // TODO: test validations
    }

    /**
     * Replaces a specific gateway
     *
     * Creates or updates a specific gateway for under a subscription and in a specific resource group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionGatewaysCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String connectionGatewayName = null;
        String apiVersion = null;
        ConnectionGatewayDefinition connectionGateway = null;
        ConnectionGatewayDefinition response = api.connectionGatewaysCreateOrUpdate(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion, connectionGateway);
        // TODO: test validations
    }

    /**
     * Deletes a specific gateway
     *
     * Deletes a specific gateway for under a subscription and in a specific resource group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionGatewaysDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String connectionGatewayName = null;
        String apiVersion = null;
        api.connectionGatewaysDelete(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a specific gateway
     *
     * Gets a specific gateway under a subscription and in a specific resource group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionGatewaysGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String connectionGatewayName = null;
        String apiVersion = null;
        ConnectionGatewayDefinition response = api.connectionGatewaysGet(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists all of the connection gateways
     *
     * Gets a list of gateways under a subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionGatewaysListTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        ConnectionGatewayDefinitionCollection response = api.connectionGatewaysList(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists all of the connection gateways
     *
     * Gets a list of gateways under a subscription and in a specific resource group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionGatewaysListByResourceGroupTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        ConnectionGatewayDefinitionCollection response = api.connectionGatewaysListByResourceGroup(subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

    /**
     * Updates a specific gateway
     *
     * Updates a connection gateway&#39;s tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionGatewaysUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String connectionGatewayName = null;
        String apiVersion = null;
        ConnectionGatewayDefinition connectionGateway = null;
        ConnectionGatewayDefinition response = api.connectionGatewaysUpdate(subscriptionId, resourceGroupName, connectionGatewayName, apiVersion, connectionGateway);
        // TODO: test validations
    }

}
