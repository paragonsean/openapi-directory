# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HostingEnvironmentServiceDescriptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host_id: str=None, hosting_environment_id: str=None, service_url: str=None, use_internal_routing: bool=None):
        """HostingEnvironmentServiceDescriptions - a model defined in OpenAPI

        :param host_id: The host_id of this HostingEnvironmentServiceDescriptions.
        :param hosting_environment_id: The hosting_environment_id of this HostingEnvironmentServiceDescriptions.
        :param service_url: The service_url of this HostingEnvironmentServiceDescriptions.
        :param use_internal_routing: The use_internal_routing of this HostingEnvironmentServiceDescriptions.
        """
        self.openapi_types = {
            'host_id': str,
            'hosting_environment_id': str,
            'service_url': str,
            'use_internal_routing': bool
        }

        self.attribute_map = {
            'host_id': 'hostId',
            'hosting_environment_id': 'hostingEnvironmentId',
            'service_url': 'serviceUrl',
            'use_internal_routing': 'useInternalRouting'
        }

        self._host_id = host_id
        self._hosting_environment_id = hosting_environment_id
        self._service_url = service_url
        self._use_internal_routing = use_internal_routing

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HostingEnvironmentServiceDescriptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HostingEnvironmentServiceDescriptions of this HostingEnvironmentServiceDescriptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host_id(self):
        """Gets the host_id of this HostingEnvironmentServiceDescriptions.

        Host Id

        :return: The host_id of this HostingEnvironmentServiceDescriptions.
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this HostingEnvironmentServiceDescriptions.

        Host Id

        :param host_id: The host_id of this HostingEnvironmentServiceDescriptions.
        :type host_id: str
        """

        self._host_id = host_id

    @property
    def hosting_environment_id(self):
        """Gets the hosting_environment_id of this HostingEnvironmentServiceDescriptions.

        Hosting environment Id

        :return: The hosting_environment_id of this HostingEnvironmentServiceDescriptions.
        :rtype: str
        """
        return self._hosting_environment_id

    @hosting_environment_id.setter
    def hosting_environment_id(self, hosting_environment_id):
        """Sets the hosting_environment_id of this HostingEnvironmentServiceDescriptions.

        Hosting environment Id

        :param hosting_environment_id: The hosting_environment_id of this HostingEnvironmentServiceDescriptions.
        :type hosting_environment_id: str
        """

        self._hosting_environment_id = hosting_environment_id

    @property
    def service_url(self):
        """Gets the service_url of this HostingEnvironmentServiceDescriptions.

        service url to use

        :return: The service_url of this HostingEnvironmentServiceDescriptions.
        :rtype: str
        """
        return self._service_url

    @service_url.setter
    def service_url(self, service_url):
        """Sets the service_url of this HostingEnvironmentServiceDescriptions.

        service url to use

        :param service_url: The service_url of this HostingEnvironmentServiceDescriptions.
        :type service_url: str
        """

        self._service_url = service_url

    @property
    def use_internal_routing(self):
        """Gets the use_internal_routing of this HostingEnvironmentServiceDescriptions.

        When the backend url is in same ASE, for performance reason this flag can be set to true              If WebApp.DisableHostNames is also set it improves the security by making the back end accessible only               via API calls              Note: calls will fail if this option is used but back end is not on the same ASE

        :return: The use_internal_routing of this HostingEnvironmentServiceDescriptions.
        :rtype: bool
        """
        return self._use_internal_routing

    @use_internal_routing.setter
    def use_internal_routing(self, use_internal_routing):
        """Sets the use_internal_routing of this HostingEnvironmentServiceDescriptions.

        When the backend url is in same ASE, for performance reason this flag can be set to true              If WebApp.DisableHostNames is also set it improves the security by making the back end accessible only               via API calls              Note: calls will fail if this option is used but back end is not on the same ASE

        :param use_internal_routing: The use_internal_routing of this HostingEnvironmentServiceDescriptions.
        :type use_internal_routing: bool
        """

        self._use_internal_routing = use_internal_routing
