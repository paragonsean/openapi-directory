# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConsentLinkInputParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, object_id: str=None, parameter_name: str=None, principal_type: str=None, redirect_url: str=None, tenant_id: str=None):
        """ConsentLinkInputParameter - a model defined in OpenAPI

        :param object_id: The object_id of this ConsentLinkInputParameter.
        :param parameter_name: The parameter_name of this ConsentLinkInputParameter.
        :param principal_type: The principal_type of this ConsentLinkInputParameter.
        :param redirect_url: The redirect_url of this ConsentLinkInputParameter.
        :param tenant_id: The tenant_id of this ConsentLinkInputParameter.
        """
        self.openapi_types = {
            'object_id': str,
            'parameter_name': str,
            'principal_type': str,
            'redirect_url': str,
            'tenant_id': str
        }

        self.attribute_map = {
            'object_id': 'objectId',
            'parameter_name': 'parameterName',
            'principal_type': 'principalType',
            'redirect_url': 'redirectUrl',
            'tenant_id': 'tenantId'
        }

        self._object_id = object_id
        self._parameter_name = parameter_name
        self._principal_type = principal_type
        self._redirect_url = redirect_url
        self._tenant_id = tenant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsentLinkInputParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsentLinkInputParameter of this ConsentLinkInputParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object_id(self):
        """Gets the object_id of this ConsentLinkInputParameter.

        AAD OID (user or group) if the principal type is ActiveDirectory.              MSA PUID if the principal type is MicrosoftAccount.

        :return: The object_id of this ConsentLinkInputParameter.
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this ConsentLinkInputParameter.

        AAD OID (user or group) if the principal type is ActiveDirectory.              MSA PUID if the principal type is MicrosoftAccount.

        :param object_id: The object_id of this ConsentLinkInputParameter.
        :type object_id: str
        """

        self._object_id = object_id

    @property
    def parameter_name(self):
        """Gets the parameter_name of this ConsentLinkInputParameter.

        Name of the parameter in the connection provider's oauthSettings

        :return: The parameter_name of this ConsentLinkInputParameter.
        :rtype: str
        """
        return self._parameter_name

    @parameter_name.setter
    def parameter_name(self, parameter_name):
        """Sets the parameter_name of this ConsentLinkInputParameter.

        Name of the parameter in the connection provider's oauthSettings

        :param parameter_name: The parameter_name of this ConsentLinkInputParameter.
        :type parameter_name: str
        """

        self._parameter_name = parameter_name

    @property
    def principal_type(self):
        """Gets the principal_type of this ConsentLinkInputParameter.

        Principal type

        :return: The principal_type of this ConsentLinkInputParameter.
        :rtype: str
        """
        return self._principal_type

    @principal_type.setter
    def principal_type(self, principal_type):
        """Sets the principal_type of this ConsentLinkInputParameter.

        Principal type

        :param principal_type: The principal_type of this ConsentLinkInputParameter.
        :type principal_type: str
        """
        allowed_values = ["ActiveDirectory", "Connection", "MicrosoftAccount"]  # noqa: E501
        if principal_type not in allowed_values:
            raise ValueError(
                "Invalid value for `principal_type` ({0}), must be one of {1}"
                .format(principal_type, allowed_values)
            )

        self._principal_type = principal_type

    @property
    def redirect_url(self):
        """Gets the redirect_url of this ConsentLinkInputParameter.

        Name of the parameter in the connection provider's oauthSettings

        :return: The redirect_url of this ConsentLinkInputParameter.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this ConsentLinkInputParameter.

        Name of the parameter in the connection provider's oauthSettings

        :param redirect_url: The redirect_url of this ConsentLinkInputParameter.
        :type redirect_url: str
        """

        self._redirect_url = redirect_url

    @property
    def tenant_id(self):
        """Gets the tenant_id of this ConsentLinkInputParameter.

        Tenant Id

        :return: The tenant_id of this ConsentLinkInputParameter.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this ConsentLinkInputParameter.

        Tenant Id

        :param tenant_id: The tenant_id of this ConsentLinkInputParameter.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id
