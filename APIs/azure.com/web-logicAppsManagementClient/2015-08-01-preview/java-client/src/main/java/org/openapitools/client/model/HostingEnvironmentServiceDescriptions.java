/*
 * LogicAppsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Back end service per ASE
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:20:32.928182-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HostingEnvironmentServiceDescriptions {
  public static final String SERIALIZED_NAME_HOST_ID = "hostId";
  @SerializedName(SERIALIZED_NAME_HOST_ID)
  private String hostId;

  public static final String SERIALIZED_NAME_HOSTING_ENVIRONMENT_ID = "hostingEnvironmentId";
  @SerializedName(SERIALIZED_NAME_HOSTING_ENVIRONMENT_ID)
  private String hostingEnvironmentId;

  public static final String SERIALIZED_NAME_SERVICE_URL = "serviceUrl";
  @SerializedName(SERIALIZED_NAME_SERVICE_URL)
  private String serviceUrl;

  public static final String SERIALIZED_NAME_USE_INTERNAL_ROUTING = "useInternalRouting";
  @SerializedName(SERIALIZED_NAME_USE_INTERNAL_ROUTING)
  private Boolean useInternalRouting;

  public HostingEnvironmentServiceDescriptions() {
  }

  public HostingEnvironmentServiceDescriptions hostId(String hostId) {
    this.hostId = hostId;
    return this;
  }

  /**
   * Host Id
   * @return hostId
   */
  @javax.annotation.Nullable
  public String getHostId() {
    return hostId;
  }

  public void setHostId(String hostId) {
    this.hostId = hostId;
  }


  public HostingEnvironmentServiceDescriptions hostingEnvironmentId(String hostingEnvironmentId) {
    this.hostingEnvironmentId = hostingEnvironmentId;
    return this;
  }

  /**
   * Hosting environment Id
   * @return hostingEnvironmentId
   */
  @javax.annotation.Nullable
  public String getHostingEnvironmentId() {
    return hostingEnvironmentId;
  }

  public void setHostingEnvironmentId(String hostingEnvironmentId) {
    this.hostingEnvironmentId = hostingEnvironmentId;
  }


  public HostingEnvironmentServiceDescriptions serviceUrl(String serviceUrl) {
    this.serviceUrl = serviceUrl;
    return this;
  }

  /**
   * service url to use
   * @return serviceUrl
   */
  @javax.annotation.Nullable
  public String getServiceUrl() {
    return serviceUrl;
  }

  public void setServiceUrl(String serviceUrl) {
    this.serviceUrl = serviceUrl;
  }


  public HostingEnvironmentServiceDescriptions useInternalRouting(Boolean useInternalRouting) {
    this.useInternalRouting = useInternalRouting;
    return this;
  }

  /**
   * When the backend url is in same ASE, for performance reason this flag can be set to true              If WebApp.DisableHostNames is also set it improves the security by making the back end accessible only               via API calls              Note: calls will fail if this option is used but back end is not on the same ASE
   * @return useInternalRouting
   */
  @javax.annotation.Nullable
  public Boolean getUseInternalRouting() {
    return useInternalRouting;
  }

  public void setUseInternalRouting(Boolean useInternalRouting) {
    this.useInternalRouting = useInternalRouting;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HostingEnvironmentServiceDescriptions hostingEnvironmentServiceDescriptions = (HostingEnvironmentServiceDescriptions) o;
    return Objects.equals(this.hostId, hostingEnvironmentServiceDescriptions.hostId) &&
        Objects.equals(this.hostingEnvironmentId, hostingEnvironmentServiceDescriptions.hostingEnvironmentId) &&
        Objects.equals(this.serviceUrl, hostingEnvironmentServiceDescriptions.serviceUrl) &&
        Objects.equals(this.useInternalRouting, hostingEnvironmentServiceDescriptions.useInternalRouting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostId, hostingEnvironmentId, serviceUrl, useInternalRouting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HostingEnvironmentServiceDescriptions {\n");
    sb.append("    hostId: ").append(toIndentedString(hostId)).append("\n");
    sb.append("    hostingEnvironmentId: ").append(toIndentedString(hostingEnvironmentId)).append("\n");
    sb.append("    serviceUrl: ").append(toIndentedString(serviceUrl)).append("\n");
    sb.append("    useInternalRouting: ").append(toIndentedString(useInternalRouting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hostId");
    openapiFields.add("hostingEnvironmentId");
    openapiFields.add("serviceUrl");
    openapiFields.add("useInternalRouting");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HostingEnvironmentServiceDescriptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HostingEnvironmentServiceDescriptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HostingEnvironmentServiceDescriptions is not found in the empty JSON string", HostingEnvironmentServiceDescriptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HostingEnvironmentServiceDescriptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HostingEnvironmentServiceDescriptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hostId") != null && !jsonObj.get("hostId").isJsonNull()) && !jsonObj.get("hostId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostId").toString()));
      }
      if ((jsonObj.get("hostingEnvironmentId") != null && !jsonObj.get("hostingEnvironmentId").isJsonNull()) && !jsonObj.get("hostingEnvironmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostingEnvironmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostingEnvironmentId").toString()));
      }
      if ((jsonObj.get("serviceUrl") != null && !jsonObj.get("serviceUrl").isJsonNull()) && !jsonObj.get("serviceUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HostingEnvironmentServiceDescriptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HostingEnvironmentServiceDescriptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HostingEnvironmentServiceDescriptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HostingEnvironmentServiceDescriptions.class));

       return (TypeAdapter<T>) new TypeAdapter<HostingEnvironmentServiceDescriptions>() {
           @Override
           public void write(JsonWriter out, HostingEnvironmentServiceDescriptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HostingEnvironmentServiceDescriptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HostingEnvironmentServiceDescriptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HostingEnvironmentServiceDescriptions
   * @throws IOException if the JSON string is invalid with respect to HostingEnvironmentServiceDescriptions
   */
  public static HostingEnvironmentServiceDescriptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HostingEnvironmentServiceDescriptions.class);
  }

  /**
   * Convert an instance of HostingEnvironmentServiceDescriptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

