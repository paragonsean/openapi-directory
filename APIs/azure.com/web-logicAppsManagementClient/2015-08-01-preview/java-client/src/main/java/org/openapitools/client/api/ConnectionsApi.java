/*
 * LogicAppsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConfirmConsentCodeInput;
import org.openapitools.client.model.Connection;
import org.openapitools.client.model.ConnectionCollection;
import org.openapitools.client.model.ConnectionSecrets;
import org.openapitools.client.model.ConsentLinkInput;
import org.openapitools.client.model.ConsentLinkPayload;
import org.openapitools.client.model.ListConnectionKeysInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConnectionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConnectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConnectionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for connectionsConfirmConsentCode
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @param content The content. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsConfirmConsentCodeCall(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, ConfirmConsentCodeInput content, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = content;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections/{connectionName}/confirmConsentCode"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "connectionName" + "}", localVarApiClient.escapeString(connectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsConfirmConsentCodeValidateBeforeCall(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, ConfirmConsentCodeInput content, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectionsConfirmConsentCode(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectionsConfirmConsentCode(Async)");
        }

        // verify the required parameter 'connectionName' is set
        if (connectionName == null) {
            throw new ApiException("Missing the required parameter 'connectionName' when calling connectionsConfirmConsentCode(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectionsConfirmConsentCode(Async)");
        }

        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling connectionsConfirmConsentCode(Async)");
        }

        return connectionsConfirmConsentCodeCall(subscriptionId, resourceGroupName, connectionName, apiVersion, content, _callback);

    }

    /**
     * 
     * Confirms consent code of a connection.
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @param content The content. (required)
     * @return Connection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Connection connectionsConfirmConsentCode(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, ConfirmConsentCodeInput content) throws ApiException {
        ApiResponse<Connection> localVarResp = connectionsConfirmConsentCodeWithHttpInfo(subscriptionId, resourceGroupName, connectionName, apiVersion, content);
        return localVarResp.getData();
    }

    /**
     * 
     * Confirms consent code of a connection.
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @param content The content. (required)
     * @return ApiResponse&lt;Connection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connection> connectionsConfirmConsentCodeWithHttpInfo(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, ConfirmConsentCodeInput content) throws ApiException {
        okhttp3.Call localVarCall = connectionsConfirmConsentCodeValidateBeforeCall(subscriptionId, resourceGroupName, connectionName, apiVersion, content, null);
        Type localVarReturnType = new TypeToken<Connection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Confirms consent code of a connection.
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @param content The content. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsConfirmConsentCodeAsync(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, ConfirmConsentCodeInput content, final ApiCallback<Connection> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsConfirmConsentCodeValidateBeforeCall(subscriptionId, resourceGroupName, connectionName, apiVersion, content, _callback);
        Type localVarReturnType = new TypeToken<Connection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsCreateOrUpdate
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @param connection The connection. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, Connection connection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connection;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections/{connectionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "connectionName" + "}", localVarApiClient.escapeString(connectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, Connection connection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'connectionName' is set
        if (connectionName == null) {
            throw new ApiException("Missing the required parameter 'connectionName' when calling connectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'connection' is set
        if (connection == null) {
            throw new ApiException("Missing the required parameter 'connection' when calling connectionsCreateOrUpdate(Async)");
        }

        return connectionsCreateOrUpdateCall(subscriptionId, resourceGroupName, connectionName, apiVersion, connection, _callback);

    }

    /**
     * 
     * Creates or updates a connection.
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @param connection The connection. (required)
     * @return Connection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public Connection connectionsCreateOrUpdate(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, Connection connection) throws ApiException {
        ApiResponse<Connection> localVarResp = connectionsCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, connectionName, apiVersion, connection);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a connection.
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @param connection The connection. (required)
     * @return ApiResponse&lt;Connection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connection> connectionsCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, Connection connection) throws ApiException {
        okhttp3.Call localVarCall = connectionsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, connectionName, apiVersion, connection, null);
        Type localVarReturnType = new TypeToken<Connection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a connection.
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @param connection The connection. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, Connection connection, final ApiCallback<Connection> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, connectionName, apiVersion, connection, _callback);
        Type localVarReturnType = new TypeToken<Connection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsDelete
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsDeleteCall(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections/{connectionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "connectionName" + "}", localVarApiClient.escapeString(connectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectionsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectionsDelete(Async)");
        }

        // verify the required parameter 'connectionName' is set
        if (connectionName == null) {
            throw new ApiException("Missing the required parameter 'connectionName' when calling connectionsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectionsDelete(Async)");
        }

        return connectionsDeleteCall(subscriptionId, resourceGroupName, connectionName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a connection.
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void connectionsDelete(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion) throws ApiException {
        connectionsDeleteWithHttpInfo(subscriptionId, resourceGroupName, connectionName, apiVersion);
    }

    /**
     * 
     * Deletes a connection.
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> connectionsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = connectionsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, connectionName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a connection.
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsDeleteAsync(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, connectionName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsGet
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsGetCall(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections/{connectionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "connectionName" + "}", localVarApiClient.escapeString(connectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectionsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectionsGet(Async)");
        }

        // verify the required parameter 'connectionName' is set
        if (connectionName == null) {
            throw new ApiException("Missing the required parameter 'connectionName' when calling connectionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectionsGet(Async)");
        }

        return connectionsGetCall(subscriptionId, resourceGroupName, connectionName, apiVersion, _callback);

    }

    /**
     * 
     * Gets a connection.
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @return Connection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Connection connectionsGet(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion) throws ApiException {
        ApiResponse<Connection> localVarResp = connectionsGetWithHttpInfo(subscriptionId, resourceGroupName, connectionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a connection.
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @return ApiResponse&lt;Connection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connection> connectionsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = connectionsGetValidateBeforeCall(subscriptionId, resourceGroupName, connectionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Connection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a connection.
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsGetAsync(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, final ApiCallback<Connection> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsGetValidateBeforeCall(subscriptionId, resourceGroupName, connectionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Connection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsList
     * @param resourceGroupName Resource Group Name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $top The number of items to be included in the result. (optional)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsListCall(String resourceGroupName, String subscriptionId, String apiVersion, Integer $top, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsListValidateBeforeCall(String resourceGroupName, String subscriptionId, String apiVersion, Integer $top, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectionsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectionsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectionsList(Async)");
        }

        return connectionsListCall(resourceGroupName, subscriptionId, apiVersion, $top, $filter, _callback);

    }

    /**
     * Get Connections
     * Gets a list of connections.
     * @param resourceGroupName Resource Group Name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $top The number of items to be included in the result. (optional)
     * @param $filter The filter to apply on the operation. (optional)
     * @return ConnectionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionCollection connectionsList(String resourceGroupName, String subscriptionId, String apiVersion, Integer $top, String $filter) throws ApiException {
        ApiResponse<ConnectionCollection> localVarResp = connectionsListWithHttpInfo(resourceGroupName, subscriptionId, apiVersion, $top, $filter);
        return localVarResp.getData();
    }

    /**
     * Get Connections
     * Gets a list of connections.
     * @param resourceGroupName Resource Group Name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $top The number of items to be included in the result. (optional)
     * @param $filter The filter to apply on the operation. (optional)
     * @return ApiResponse&lt;ConnectionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionCollection> connectionsListWithHttpInfo(String resourceGroupName, String subscriptionId, String apiVersion, Integer $top, String $filter) throws ApiException {
        okhttp3.Call localVarCall = connectionsListValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, $top, $filter, null);
        Type localVarReturnType = new TypeToken<ConnectionCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Connections (asynchronously)
     * Gets a list of connections.
     * @param resourceGroupName Resource Group Name (required)
     * @param subscriptionId Subscription Id (required)
     * @param apiVersion API Version (required)
     * @param $top The number of items to be included in the result. (optional)
     * @param $filter The filter to apply on the operation. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsListAsync(String resourceGroupName, String subscriptionId, String apiVersion, Integer $top, String $filter, final ApiCallback<ConnectionCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsListValidateBeforeCall(resourceGroupName, subscriptionId, apiVersion, $top, $filter, _callback);
        Type localVarReturnType = new TypeToken<ConnectionCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsListConnectionKeys
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @param content The content. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsListConnectionKeysCall(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, ListConnectionKeysInput content, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = content;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections/{connectionName}/listConnectionKeys"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "connectionName" + "}", localVarApiClient.escapeString(connectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsListConnectionKeysValidateBeforeCall(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, ListConnectionKeysInput content, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectionsListConnectionKeys(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectionsListConnectionKeys(Async)");
        }

        // verify the required parameter 'connectionName' is set
        if (connectionName == null) {
            throw new ApiException("Missing the required parameter 'connectionName' when calling connectionsListConnectionKeys(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectionsListConnectionKeys(Async)");
        }

        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling connectionsListConnectionKeys(Async)");
        }

        return connectionsListConnectionKeysCall(subscriptionId, resourceGroupName, connectionName, apiVersion, content, _callback);

    }

    /**
     * 
     * Lists connection keys.
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @param content The content. (required)
     * @return ConnectionSecrets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConnectionSecrets connectionsListConnectionKeys(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, ListConnectionKeysInput content) throws ApiException {
        ApiResponse<ConnectionSecrets> localVarResp = connectionsListConnectionKeysWithHttpInfo(subscriptionId, resourceGroupName, connectionName, apiVersion, content);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists connection keys.
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @param content The content. (required)
     * @return ApiResponse&lt;ConnectionSecrets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConnectionSecrets> connectionsListConnectionKeysWithHttpInfo(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, ListConnectionKeysInput content) throws ApiException {
        okhttp3.Call localVarCall = connectionsListConnectionKeysValidateBeforeCall(subscriptionId, resourceGroupName, connectionName, apiVersion, content, null);
        Type localVarReturnType = new TypeToken<ConnectionSecrets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists connection keys.
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @param content The content. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsListConnectionKeysAsync(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, ListConnectionKeysInput content, final ApiCallback<ConnectionSecrets> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsListConnectionKeysValidateBeforeCall(subscriptionId, resourceGroupName, connectionName, apiVersion, content, _callback);
        Type localVarReturnType = new TypeToken<ConnectionSecrets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsListConsentLinks
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @param content The content. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsListConsentLinksCall(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, ConsentLinkInput content, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = content;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/connections/{connectionName}/listConsentLinks"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "connectionName" + "}", localVarApiClient.escapeString(connectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsListConsentLinksValidateBeforeCall(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, ConsentLinkInput content, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling connectionsListConsentLinks(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling connectionsListConsentLinks(Async)");
        }

        // verify the required parameter 'connectionName' is set
        if (connectionName == null) {
            throw new ApiException("Missing the required parameter 'connectionName' when calling connectionsListConsentLinks(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling connectionsListConsentLinks(Async)");
        }

        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling connectionsListConsentLinks(Async)");
        }

        return connectionsListConsentLinksCall(subscriptionId, resourceGroupName, connectionName, apiVersion, content, _callback);

    }

    /**
     * 
     * Lists consent links of a connection.
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @param content The content. (required)
     * @return ConsentLinkPayload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ConsentLinkPayload connectionsListConsentLinks(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, ConsentLinkInput content) throws ApiException {
        ApiResponse<ConsentLinkPayload> localVarResp = connectionsListConsentLinksWithHttpInfo(subscriptionId, resourceGroupName, connectionName, apiVersion, content);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists consent links of a connection.
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @param content The content. (required)
     * @return ApiResponse&lt;ConsentLinkPayload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsentLinkPayload> connectionsListConsentLinksWithHttpInfo(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, ConsentLinkInput content) throws ApiException {
        okhttp3.Call localVarCall = connectionsListConsentLinksValidateBeforeCall(subscriptionId, resourceGroupName, connectionName, apiVersion, content, null);
        Type localVarReturnType = new TypeToken<ConsentLinkPayload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists consent links of a connection.
     * @param subscriptionId Subscription Id (required)
     * @param resourceGroupName The resource group name. (required)
     * @param connectionName The connection name. (required)
     * @param apiVersion API Version (required)
     * @param content The content. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsListConsentLinksAsync(String subscriptionId, String resourceGroupName, String connectionName, String apiVersion, ConsentLinkInput content, final ApiCallback<ConsentLinkPayload> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsListConsentLinksValidateBeforeCall(subscriptionId, resourceGroupName, connectionName, apiVersion, content, _callback);
        Type localVarReturnType = new TypeToken<ConsentLinkPayload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
