/*
 * LogicAppsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConfirmConsentCodeInput;
import org.openapitools.client.model.Connection;
import org.openapitools.client.model.ConnectionCollection;
import org.openapitools.client.model.ConnectionSecrets;
import org.openapitools.client.model.ConsentLinkInput;
import org.openapitools.client.model.ConsentLinkPayload;
import org.openapitools.client.model.ListConnectionKeysInput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConnectionsApi
 */
@Disabled
public class ConnectionsApiTest {

    private final ConnectionsApi api = new ConnectionsApi();

    /**
     * Confirms consent code of a connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsConfirmConsentCodeTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String connectionName = null;
        String apiVersion = null;
        ConfirmConsentCodeInput content = null;
        Connection response = api.connectionsConfirmConsentCode(subscriptionId, resourceGroupName, connectionName, apiVersion, content);
        // TODO: test validations
    }

    /**
     * Creates or updates a connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String connectionName = null;
        String apiVersion = null;
        Connection connection = null;
        Connection response = api.connectionsCreateOrUpdate(subscriptionId, resourceGroupName, connectionName, apiVersion, connection);
        // TODO: test validations
    }

    /**
     * Deletes a connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String connectionName = null;
        String apiVersion = null;
        api.connectionsDelete(subscriptionId, resourceGroupName, connectionName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String connectionName = null;
        String apiVersion = null;
        Connection response = api.connectionsGet(subscriptionId, resourceGroupName, connectionName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get Connections
     *
     * Gets a list of connections.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsListTest() throws ApiException {
        String resourceGroupName = null;
        String subscriptionId = null;
        String apiVersion = null;
        Integer $top = null;
        String $filter = null;
        ConnectionCollection response = api.connectionsList(resourceGroupName, subscriptionId, apiVersion, $top, $filter);
        // TODO: test validations
    }

    /**
     * Lists connection keys.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsListConnectionKeysTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String connectionName = null;
        String apiVersion = null;
        ListConnectionKeysInput content = null;
        ConnectionSecrets response = api.connectionsListConnectionKeys(subscriptionId, resourceGroupName, connectionName, apiVersion, content);
        // TODO: test validations
    }

    /**
     * Lists consent links of a connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsListConsentLinksTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String connectionName = null;
        String apiVersion = null;
        ConsentLinkInput content = null;
        ConsentLinkPayload response = api.connectionsListConsentLinks(subscriptionId, resourceGroupName, connectionName, apiVersion, content);
        // TODO: test validations
    }

}
