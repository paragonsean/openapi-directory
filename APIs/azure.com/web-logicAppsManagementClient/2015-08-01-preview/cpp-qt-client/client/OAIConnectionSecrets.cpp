/**
 * LogicAppsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectionSecrets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectionSecrets::OAIConnectionSecrets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectionSecrets::OAIConnectionSecrets() {
    this->initializeModel();
}

OAIConnectionSecrets::~OAIConnectionSecrets() {}

void OAIConnectionSecrets::initializeModel() {

    m_connection_key_isSet = false;
    m_connection_key_isValid = false;

    m_parameter_values_isSet = false;
    m_parameter_values_isValid = false;
}

void OAIConnectionSecrets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectionSecrets::fromJsonObject(QJsonObject json) {

    m_connection_key_isValid = ::OpenAPI::fromJsonValue(m_connection_key, json[QString("connectionKey")]);
    m_connection_key_isSet = !json[QString("connectionKey")].isNull() && m_connection_key_isValid;

    m_parameter_values_isValid = ::OpenAPI::fromJsonValue(m_parameter_values, json[QString("parameterValues")]);
    m_parameter_values_isSet = !json[QString("parameterValues")].isNull() && m_parameter_values_isValid;
}

QString OAIConnectionSecrets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectionSecrets::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_key_isSet) {
        obj.insert(QString("connectionKey"), ::OpenAPI::toJsonValue(m_connection_key));
    }
    if (m_parameter_values.size() > 0) {
        obj.insert(QString("parameterValues"), ::OpenAPI::toJsonValue(m_parameter_values));
    }
    return obj;
}

QString OAIConnectionSecrets::getConnectionKey() const {
    return m_connection_key;
}
void OAIConnectionSecrets::setConnectionKey(const QString &connection_key) {
    m_connection_key = connection_key;
    m_connection_key_isSet = true;
}

bool OAIConnectionSecrets::is_connection_key_Set() const{
    return m_connection_key_isSet;
}

bool OAIConnectionSecrets::is_connection_key_Valid() const{
    return m_connection_key_isValid;
}

QMap<QString, OAIObject> OAIConnectionSecrets::getParameterValues() const {
    return m_parameter_values;
}
void OAIConnectionSecrets::setParameterValues(const QMap<QString, OAIObject> &parameter_values) {
    m_parameter_values = parameter_values;
    m_parameter_values_isSet = true;
}

bool OAIConnectionSecrets::is_parameter_values_Set() const{
    return m_parameter_values_isSet;
}

bool OAIConnectionSecrets::is_parameter_values_Valid() const{
    return m_parameter_values_isValid;
}

bool OAIConnectionSecrets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectionSecrets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
