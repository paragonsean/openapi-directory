/**
 * LogicAppsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsentLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsentLink::OAIConsentLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsentLink::OAIConsentLink() {
    this->initializeModel();
}

OAIConsentLink::~OAIConsentLink() {}

void OAIConsentLink::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_first_party_login_uri_isSet = false;
    m_first_party_login_uri_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIConsentLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsentLink::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_first_party_login_uri_isValid = ::OpenAPI::fromJsonValue(m_first_party_login_uri, json[QString("firstPartyLoginUri")]);
    m_first_party_login_uri_isSet = !json[QString("firstPartyLoginUri")].isNull() && m_first_party_login_uri_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIConsentLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsentLink::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_first_party_login_uri_isSet) {
        obj.insert(QString("firstPartyLoginUri"), ::OpenAPI::toJsonValue(m_first_party_login_uri));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIConsentLink::getDisplayName() const {
    return m_display_name;
}
void OAIConsentLink::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIConsentLink::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIConsentLink::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIConsentLink::getFirstPartyLoginUri() const {
    return m_first_party_login_uri;
}
void OAIConsentLink::setFirstPartyLoginUri(const QString &first_party_login_uri) {
    m_first_party_login_uri = first_party_login_uri;
    m_first_party_login_uri_isSet = true;
}

bool OAIConsentLink::is_first_party_login_uri_Set() const{
    return m_first_party_login_uri_isSet;
}

bool OAIConsentLink::is_first_party_login_uri_Valid() const{
    return m_first_party_login_uri_isValid;
}

QString OAIConsentLink::getLink() const {
    return m_link;
}
void OAIConsentLink::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIConsentLink::is_link_Set() const{
    return m_link_isSet;
}

bool OAIConsentLink::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIConsentLink::getStatus() const {
    return m_status;
}
void OAIConsentLink::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIConsentLink::is_status_Set() const{
    return m_status_isSet;
}

bool OAIConsentLink::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIConsentLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_party_login_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsentLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
