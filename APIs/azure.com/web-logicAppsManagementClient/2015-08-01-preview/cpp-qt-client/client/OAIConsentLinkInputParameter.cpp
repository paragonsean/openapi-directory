/**
 * LogicAppsManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsentLinkInputParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsentLinkInputParameter::OAIConsentLinkInputParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsentLinkInputParameter::OAIConsentLinkInputParameter() {
    this->initializeModel();
}

OAIConsentLinkInputParameter::~OAIConsentLinkInputParameter() {}

void OAIConsentLinkInputParameter::initializeModel() {

    m_object_id_isSet = false;
    m_object_id_isValid = false;

    m_parameter_name_isSet = false;
    m_parameter_name_isValid = false;

    m_principal_type_isSet = false;
    m_principal_type_isValid = false;

    m_redirect_url_isSet = false;
    m_redirect_url_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIConsentLinkInputParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsentLinkInputParameter::fromJsonObject(QJsonObject json) {

    m_object_id_isValid = ::OpenAPI::fromJsonValue(m_object_id, json[QString("objectId")]);
    m_object_id_isSet = !json[QString("objectId")].isNull() && m_object_id_isValid;

    m_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_parameter_name, json[QString("parameterName")]);
    m_parameter_name_isSet = !json[QString("parameterName")].isNull() && m_parameter_name_isValid;

    m_principal_type_isValid = ::OpenAPI::fromJsonValue(m_principal_type, json[QString("principalType")]);
    m_principal_type_isSet = !json[QString("principalType")].isNull() && m_principal_type_isValid;

    m_redirect_url_isValid = ::OpenAPI::fromJsonValue(m_redirect_url, json[QString("redirectUrl")]);
    m_redirect_url_isSet = !json[QString("redirectUrl")].isNull() && m_redirect_url_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIConsentLinkInputParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsentLinkInputParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_object_id_isSet) {
        obj.insert(QString("objectId"), ::OpenAPI::toJsonValue(m_object_id));
    }
    if (m_parameter_name_isSet) {
        obj.insert(QString("parameterName"), ::OpenAPI::toJsonValue(m_parameter_name));
    }
    if (m_principal_type_isSet) {
        obj.insert(QString("principalType"), ::OpenAPI::toJsonValue(m_principal_type));
    }
    if (m_redirect_url_isSet) {
        obj.insert(QString("redirectUrl"), ::OpenAPI::toJsonValue(m_redirect_url));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

QString OAIConsentLinkInputParameter::getObjectId() const {
    return m_object_id;
}
void OAIConsentLinkInputParameter::setObjectId(const QString &object_id) {
    m_object_id = object_id;
    m_object_id_isSet = true;
}

bool OAIConsentLinkInputParameter::is_object_id_Set() const{
    return m_object_id_isSet;
}

bool OAIConsentLinkInputParameter::is_object_id_Valid() const{
    return m_object_id_isValid;
}

QString OAIConsentLinkInputParameter::getParameterName() const {
    return m_parameter_name;
}
void OAIConsentLinkInputParameter::setParameterName(const QString &parameter_name) {
    m_parameter_name = parameter_name;
    m_parameter_name_isSet = true;
}

bool OAIConsentLinkInputParameter::is_parameter_name_Set() const{
    return m_parameter_name_isSet;
}

bool OAIConsentLinkInputParameter::is_parameter_name_Valid() const{
    return m_parameter_name_isValid;
}

QString OAIConsentLinkInputParameter::getPrincipalType() const {
    return m_principal_type;
}
void OAIConsentLinkInputParameter::setPrincipalType(const QString &principal_type) {
    m_principal_type = principal_type;
    m_principal_type_isSet = true;
}

bool OAIConsentLinkInputParameter::is_principal_type_Set() const{
    return m_principal_type_isSet;
}

bool OAIConsentLinkInputParameter::is_principal_type_Valid() const{
    return m_principal_type_isValid;
}

QString OAIConsentLinkInputParameter::getRedirectUrl() const {
    return m_redirect_url;
}
void OAIConsentLinkInputParameter::setRedirectUrl(const QString &redirect_url) {
    m_redirect_url = redirect_url;
    m_redirect_url_isSet = true;
}

bool OAIConsentLinkInputParameter::is_redirect_url_Set() const{
    return m_redirect_url_isSet;
}

bool OAIConsentLinkInputParameter::is_redirect_url_Valid() const{
    return m_redirect_url_isValid;
}

QString OAIConsentLinkInputParameter::getTenantId() const {
    return m_tenant_id;
}
void OAIConsentLinkInputParameter::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIConsentLinkInputParameter::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIConsentLinkInputParameter::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIConsentLinkInputParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsentLinkInputParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
