/**
 * RecoveryServicesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVaultExtendedInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVaultExtendedInfo::OAIVaultExtendedInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVaultExtendedInfo::OAIVaultExtendedInfo() {
    this->initializeModel();
}

OAIVaultExtendedInfo::~OAIVaultExtendedInfo() {}

void OAIVaultExtendedInfo::initializeModel() {

    m_algorithm_isSet = false;
    m_algorithm_isValid = false;

    m_encryption_key_isSet = false;
    m_encryption_key_isValid = false;

    m_encryption_key_thumbprint_isSet = false;
    m_encryption_key_thumbprint_isValid = false;

    m_integrity_key_isSet = false;
    m_integrity_key_isValid = false;
}

void OAIVaultExtendedInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVaultExtendedInfo::fromJsonObject(QJsonObject json) {

    m_algorithm_isValid = ::OpenAPI::fromJsonValue(m_algorithm, json[QString("algorithm")]);
    m_algorithm_isSet = !json[QString("algorithm")].isNull() && m_algorithm_isValid;

    m_encryption_key_isValid = ::OpenAPI::fromJsonValue(m_encryption_key, json[QString("encryptionKey")]);
    m_encryption_key_isSet = !json[QString("encryptionKey")].isNull() && m_encryption_key_isValid;

    m_encryption_key_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_encryption_key_thumbprint, json[QString("encryptionKeyThumbprint")]);
    m_encryption_key_thumbprint_isSet = !json[QString("encryptionKeyThumbprint")].isNull() && m_encryption_key_thumbprint_isValid;

    m_integrity_key_isValid = ::OpenAPI::fromJsonValue(m_integrity_key, json[QString("integrityKey")]);
    m_integrity_key_isSet = !json[QString("integrityKey")].isNull() && m_integrity_key_isValid;
}

QString OAIVaultExtendedInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVaultExtendedInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithm_isSet) {
        obj.insert(QString("algorithm"), ::OpenAPI::toJsonValue(m_algorithm));
    }
    if (m_encryption_key_isSet) {
        obj.insert(QString("encryptionKey"), ::OpenAPI::toJsonValue(m_encryption_key));
    }
    if (m_encryption_key_thumbprint_isSet) {
        obj.insert(QString("encryptionKeyThumbprint"), ::OpenAPI::toJsonValue(m_encryption_key_thumbprint));
    }
    if (m_integrity_key_isSet) {
        obj.insert(QString("integrityKey"), ::OpenAPI::toJsonValue(m_integrity_key));
    }
    return obj;
}

QString OAIVaultExtendedInfo::getAlgorithm() const {
    return m_algorithm;
}
void OAIVaultExtendedInfo::setAlgorithm(const QString &algorithm) {
    m_algorithm = algorithm;
    m_algorithm_isSet = true;
}

bool OAIVaultExtendedInfo::is_algorithm_Set() const{
    return m_algorithm_isSet;
}

bool OAIVaultExtendedInfo::is_algorithm_Valid() const{
    return m_algorithm_isValid;
}

QString OAIVaultExtendedInfo::getEncryptionKey() const {
    return m_encryption_key;
}
void OAIVaultExtendedInfo::setEncryptionKey(const QString &encryption_key) {
    m_encryption_key = encryption_key;
    m_encryption_key_isSet = true;
}

bool OAIVaultExtendedInfo::is_encryption_key_Set() const{
    return m_encryption_key_isSet;
}

bool OAIVaultExtendedInfo::is_encryption_key_Valid() const{
    return m_encryption_key_isValid;
}

QString OAIVaultExtendedInfo::getEncryptionKeyThumbprint() const {
    return m_encryption_key_thumbprint;
}
void OAIVaultExtendedInfo::setEncryptionKeyThumbprint(const QString &encryption_key_thumbprint) {
    m_encryption_key_thumbprint = encryption_key_thumbprint;
    m_encryption_key_thumbprint_isSet = true;
}

bool OAIVaultExtendedInfo::is_encryption_key_thumbprint_Set() const{
    return m_encryption_key_thumbprint_isSet;
}

bool OAIVaultExtendedInfo::is_encryption_key_thumbprint_Valid() const{
    return m_encryption_key_thumbprint_isValid;
}

QString OAIVaultExtendedInfo::getIntegrityKey() const {
    return m_integrity_key;
}
void OAIVaultExtendedInfo::setIntegrityKey(const QString &integrity_key) {
    m_integrity_key = integrity_key;
    m_integrity_key_isSet = true;
}

bool OAIVaultExtendedInfo::is_integrity_key_Set() const{
    return m_integrity_key_isSet;
}

bool OAIVaultExtendedInfo::is_integrity_key_Valid() const{
    return m_integrity_key_isValid;
}

bool OAIVaultExtendedInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_key_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integrity_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVaultExtendedInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
