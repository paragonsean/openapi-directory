/**
 * RecoveryServicesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PatchVault from '../model/PatchVault';
import Vault from '../model/Vault';
import VaultList from '../model/VaultList';

/**
* Vaults service.
* @module api/VaultsApi
* @version 2016-06-01
*/
export default class VaultsApi {

    /**
    * Constructs a new VaultsApi. 
    * @alias module:api/VaultsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the vaultsCreateOrUpdate operation.
     * @callback module:api/VaultsApi~vaultsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vault} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a Recovery Services vault.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} vaultName The name of the recovery services vault.
     * @param {module:model/Vault} vault Recovery Services Vault to be created.
     * @param {module:api/VaultsApi~vaultsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vault}
     */
    vaultsCreateOrUpdate(subscriptionId, apiVersion, resourceGroupName, vaultName, vault, callback) {
      let postBody = vault;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vaultsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vaultsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vaultsCreateOrUpdate");
      }
      // verify the required parameter 'vaultName' is set
      if (vaultName === undefined || vaultName === null) {
        throw new Error("Missing the required parameter 'vaultName' when calling vaultsCreateOrUpdate");
      }
      // verify the required parameter 'vault' is set
      if (vault === undefined || vault === null) {
        throw new Error("Missing the required parameter 'vault' when calling vaultsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'vaultName': vaultName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Vault;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vaultsDelete operation.
     * @callback module:api/VaultsApi~vaultsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a vault.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} vaultName The name of the recovery services vault.
     * @param {module:api/VaultsApi~vaultsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vaultsDelete(subscriptionId, apiVersion, resourceGroupName, vaultName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vaultsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vaultsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vaultsDelete");
      }
      // verify the required parameter 'vaultName' is set
      if (vaultName === undefined || vaultName === null) {
        throw new Error("Missing the required parameter 'vaultName' when calling vaultsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'vaultName': vaultName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vaultsGet operation.
     * @callback module:api/VaultsApi~vaultsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vault} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Vault details.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} vaultName The name of the recovery services vault.
     * @param {module:api/VaultsApi~vaultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vault}
     */
    vaultsGet(subscriptionId, apiVersion, resourceGroupName, vaultName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vaultsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vaultsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vaultsGet");
      }
      // verify the required parameter 'vaultName' is set
      if (vaultName === undefined || vaultName === null) {
        throw new Error("Missing the required parameter 'vaultName' when calling vaultsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'vaultName': vaultName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Vault;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vaultsListByResourceGroup operation.
     * @callback module:api/VaultsApi~vaultsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VaultList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of Vaults.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {module:api/VaultsApi~vaultsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VaultList}
     */
    vaultsListByResourceGroup(subscriptionId, apiVersion, resourceGroupName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vaultsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vaultsListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vaultsListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VaultList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vaultsListBySubscriptionId operation.
     * @callback module:api/VaultsApi~vaultsListBySubscriptionIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VaultList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches all the resources of the specified type in the subscription.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/VaultsApi~vaultsListBySubscriptionIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VaultList}
     */
    vaultsListBySubscriptionId(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vaultsListBySubscriptionId");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vaultsListBySubscriptionId");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VaultList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/vaults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vaultsUpdate operation.
     * @callback module:api/VaultsApi~vaultsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Vault} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the vault.
     * @param {String} subscriptionId The subscription Id.
     * @param {String} apiVersion Client Api Version.
     * @param {String} resourceGroupName The name of the resource group where the recovery services vault is present.
     * @param {String} vaultName The name of the recovery services vault.
     * @param {module:model/PatchVault} vault Recovery Services Vault to be created.
     * @param {module:api/VaultsApi~vaultsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Vault}
     */
    vaultsUpdate(subscriptionId, apiVersion, resourceGroupName, vaultName, vault, callback) {
      let postBody = vault;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vaultsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vaultsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling vaultsUpdate");
      }
      // verify the required parameter 'vaultName' is set
      if (vaultName === undefined || vaultName === null) {
        throw new Error("Missing the required parameter 'vaultName' when calling vaultsUpdate");
      }
      // verify the required parameter 'vault' is set
      if (vault === undefined || vault === null) {
        throw new Error("Missing the required parameter 'vault' when calling vaultsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'vaultName': vaultName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Vault;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
