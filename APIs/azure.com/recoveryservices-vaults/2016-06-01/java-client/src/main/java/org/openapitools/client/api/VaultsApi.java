/*
 * RecoveryServicesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PatchVault;
import org.openapitools.client.model.Vault;
import org.openapitools.client.model.VaultList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VaultsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VaultsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VaultsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for vaultsCreateOrUpdate
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param vault Recovery Services Vault to be created. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsCreateOrUpdateCall(String subscriptionId, String apiVersion, String resourceGroupName, String vaultName, Vault vault, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vault;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vaultsCreateOrUpdateValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String vaultName, Vault vault, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vaultsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vaultsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vaultsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling vaultsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'vault' is set
        if (vault == null) {
            throw new ApiException("Missing the required parameter 'vault' when calling vaultsCreateOrUpdate(Async)");
        }

        return vaultsCreateOrUpdateCall(subscriptionId, apiVersion, resourceGroupName, vaultName, vault, _callback);

    }

    /**
     * 
     * Creates or updates a Recovery Services vault.
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param vault Recovery Services Vault to be created. (required)
     * @return Vault
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public Vault vaultsCreateOrUpdate(String subscriptionId, String apiVersion, String resourceGroupName, String vaultName, Vault vault) throws ApiException {
        ApiResponse<Vault> localVarResp = vaultsCreateOrUpdateWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, vaultName, vault);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a Recovery Services vault.
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param vault Recovery Services Vault to be created. (required)
     * @return ApiResponse&lt;Vault&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Vault> vaultsCreateOrUpdateWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String vaultName, Vault vault) throws ApiException {
        okhttp3.Call localVarCall = vaultsCreateOrUpdateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, vaultName, vault, null);
        Type localVarReturnType = new TypeToken<Vault>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a Recovery Services vault.
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param vault Recovery Services Vault to be created. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsCreateOrUpdateAsync(String subscriptionId, String apiVersion, String resourceGroupName, String vaultName, Vault vault, final ApiCallback<Vault> _callback) throws ApiException {

        okhttp3.Call localVarCall = vaultsCreateOrUpdateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, vaultName, vault, _callback);
        Type localVarReturnType = new TypeToken<Vault>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vaultsDelete
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsDeleteCall(String subscriptionId, String apiVersion, String resourceGroupName, String vaultName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vaultsDeleteValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String vaultName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vaultsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vaultsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vaultsDelete(Async)");
        }

        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling vaultsDelete(Async)");
        }

        return vaultsDeleteCall(subscriptionId, apiVersion, resourceGroupName, vaultName, _callback);

    }

    /**
     * 
     * Deletes a vault.
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void vaultsDelete(String subscriptionId, String apiVersion, String resourceGroupName, String vaultName) throws ApiException {
        vaultsDeleteWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, vaultName);
    }

    /**
     * 
     * Deletes a vault.
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> vaultsDeleteWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String vaultName) throws ApiException {
        okhttp3.Call localVarCall = vaultsDeleteValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, vaultName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a vault.
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsDeleteAsync(String subscriptionId, String apiVersion, String resourceGroupName, String vaultName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = vaultsDeleteValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, vaultName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for vaultsGet
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsGetCall(String subscriptionId, String apiVersion, String resourceGroupName, String vaultName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vaultsGetValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String vaultName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vaultsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vaultsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vaultsGet(Async)");
        }

        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling vaultsGet(Async)");
        }

        return vaultsGetCall(subscriptionId, apiVersion, resourceGroupName, vaultName, _callback);

    }

    /**
     * 
     * Get the Vault details.
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @return Vault
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Vault vaultsGet(String subscriptionId, String apiVersion, String resourceGroupName, String vaultName) throws ApiException {
        ApiResponse<Vault> localVarResp = vaultsGetWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, vaultName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the Vault details.
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @return ApiResponse&lt;Vault&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Vault> vaultsGetWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String vaultName) throws ApiException {
        okhttp3.Call localVarCall = vaultsGetValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, vaultName, null);
        Type localVarReturnType = new TypeToken<Vault>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the Vault details.
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsGetAsync(String subscriptionId, String apiVersion, String resourceGroupName, String vaultName, final ApiCallback<Vault> _callback) throws ApiException {

        okhttp3.Call localVarCall = vaultsGetValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, vaultName, _callback);
        Type localVarReturnType = new TypeToken<Vault>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vaultsListByResourceGroup
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsListByResourceGroupCall(String subscriptionId, String apiVersion, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vaultsListByResourceGroupValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vaultsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vaultsListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vaultsListByResourceGroup(Async)");
        }

        return vaultsListByResourceGroupCall(subscriptionId, apiVersion, resourceGroupName, _callback);

    }

    /**
     * 
     * Retrieve a list of Vaults.
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @return VaultList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VaultList vaultsListByResourceGroup(String subscriptionId, String apiVersion, String resourceGroupName) throws ApiException {
        ApiResponse<VaultList> localVarResp = vaultsListByResourceGroupWithHttpInfo(subscriptionId, apiVersion, resourceGroupName);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve a list of Vaults.
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @return ApiResponse&lt;VaultList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VaultList> vaultsListByResourceGroupWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName) throws ApiException {
        okhttp3.Call localVarCall = vaultsListByResourceGroupValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, null);
        Type localVarReturnType = new TypeToken<VaultList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve a list of Vaults.
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsListByResourceGroupAsync(String subscriptionId, String apiVersion, String resourceGroupName, final ApiCallback<VaultList> _callback) throws ApiException {

        okhttp3.Call localVarCall = vaultsListByResourceGroupValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, _callback);
        Type localVarReturnType = new TypeToken<VaultList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vaultsListBySubscriptionId
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsListBySubscriptionIdCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.RecoveryServices/vaults"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vaultsListBySubscriptionIdValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vaultsListBySubscriptionId(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vaultsListBySubscriptionId(Async)");
        }

        return vaultsListBySubscriptionIdCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Fetches all the resources of the specified type in the subscription.
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @return VaultList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public VaultList vaultsListBySubscriptionId(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<VaultList> localVarResp = vaultsListBySubscriptionIdWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Fetches all the resources of the specified type in the subscription.
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;VaultList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VaultList> vaultsListBySubscriptionIdWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = vaultsListBySubscriptionIdValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<VaultList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fetches all the resources of the specified type in the subscription.
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsListBySubscriptionIdAsync(String subscriptionId, String apiVersion, final ApiCallback<VaultList> _callback) throws ApiException {

        okhttp3.Call localVarCall = vaultsListBySubscriptionIdValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<VaultList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for vaultsUpdate
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param vault Recovery Services Vault to be created. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsUpdateCall(String subscriptionId, String apiVersion, String resourceGroupName, String vaultName, PatchVault vault, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vault;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{vaultName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "vaultName" + "}", localVarApiClient.escapeString(vaultName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vaultsUpdateValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String vaultName, PatchVault vault, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling vaultsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling vaultsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling vaultsUpdate(Async)");
        }

        // verify the required parameter 'vaultName' is set
        if (vaultName == null) {
            throw new ApiException("Missing the required parameter 'vaultName' when calling vaultsUpdate(Async)");
        }

        // verify the required parameter 'vault' is set
        if (vault == null) {
            throw new ApiException("Missing the required parameter 'vault' when calling vaultsUpdate(Async)");
        }

        return vaultsUpdateCall(subscriptionId, apiVersion, resourceGroupName, vaultName, vault, _callback);

    }

    /**
     * 
     * Updates the vault.
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param vault Recovery Services Vault to be created. (required)
     * @return Vault
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public Vault vaultsUpdate(String subscriptionId, String apiVersion, String resourceGroupName, String vaultName, PatchVault vault) throws ApiException {
        ApiResponse<Vault> localVarResp = vaultsUpdateWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, vaultName, vault);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the vault.
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param vault Recovery Services Vault to be created. (required)
     * @return ApiResponse&lt;Vault&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Vault> vaultsUpdateWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String vaultName, PatchVault vault) throws ApiException {
        okhttp3.Call localVarCall = vaultsUpdateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, vaultName, vault, null);
        Type localVarReturnType = new TypeToken<Vault>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the vault.
     * @param subscriptionId The subscription Id. (required)
     * @param apiVersion Client Api Version. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param vaultName The name of the recovery services vault. (required)
     * @param vault Recovery Services Vault to be created. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call vaultsUpdateAsync(String subscriptionId, String apiVersion, String resourceGroupName, String vaultName, PatchVault vault, final ApiCallback<Vault> _callback) throws ApiException {

        okhttp3.Call localVarCall = vaultsUpdateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, vaultName, vault, _callback);
        Type localVarReturnType = new TypeToken<Vault>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
