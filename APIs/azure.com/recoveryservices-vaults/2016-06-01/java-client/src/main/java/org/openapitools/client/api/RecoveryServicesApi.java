/*
 * RecoveryServicesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CheckNameAvailabilityParameters;
import org.openapitools.client.model.CheckNameAvailabilityResultResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RecoveryServicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RecoveryServicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecoveryServicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for recoveryServicesCheckNameAvailability
     * @param subscriptionId The subscription Id. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param apiVersion Client Api Version. (required)
     * @param location Location of the resource (required)
     * @param input Contains information about Resource type and Resource name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recoveryServicesCheckNameAvailabilityCall(String subscriptionId, String resourceGroupName, String apiVersion, String location, CheckNameAvailabilityParameters input, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/locations/{location}/checkNameAvailability"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recoveryServicesCheckNameAvailabilityValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String location, CheckNameAvailabilityParameters input, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling recoveryServicesCheckNameAvailability(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling recoveryServicesCheckNameAvailability(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling recoveryServicesCheckNameAvailability(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling recoveryServicesCheckNameAvailability(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling recoveryServicesCheckNameAvailability(Async)");
        }

        return recoveryServicesCheckNameAvailabilityCall(subscriptionId, resourceGroupName, apiVersion, location, input, _callback);

    }

    /**
     * API to check for resource name availability.  A name is available if no other resource exists that has the same SubscriptionId, Resource Name and Type  or if one or more such resources exist, each of these must be GC&#39;d and their time of deletion be more than 24 Hours Ago
     * 
     * @param subscriptionId The subscription Id. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param apiVersion Client Api Version. (required)
     * @param location Location of the resource (required)
     * @param input Contains information about Resource type and Resource name (required)
     * @return CheckNameAvailabilityResultResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CheckNameAvailabilityResultResource recoveryServicesCheckNameAvailability(String subscriptionId, String resourceGroupName, String apiVersion, String location, CheckNameAvailabilityParameters input) throws ApiException {
        ApiResponse<CheckNameAvailabilityResultResource> localVarResp = recoveryServicesCheckNameAvailabilityWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, location, input);
        return localVarResp.getData();
    }

    /**
     * API to check for resource name availability.  A name is available if no other resource exists that has the same SubscriptionId, Resource Name and Type  or if one or more such resources exist, each of these must be GC&#39;d and their time of deletion be more than 24 Hours Ago
     * 
     * @param subscriptionId The subscription Id. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param apiVersion Client Api Version. (required)
     * @param location Location of the resource (required)
     * @param input Contains information about Resource type and Resource name (required)
     * @return ApiResponse&lt;CheckNameAvailabilityResultResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckNameAvailabilityResultResource> recoveryServicesCheckNameAvailabilityWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String location, CheckNameAvailabilityParameters input) throws ApiException {
        okhttp3.Call localVarCall = recoveryServicesCheckNameAvailabilityValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, location, input, null);
        Type localVarReturnType = new TypeToken<CheckNameAvailabilityResultResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * API to check for resource name availability.  A name is available if no other resource exists that has the same SubscriptionId, Resource Name and Type  or if one or more such resources exist, each of these must be GC&#39;d and their time of deletion be more than 24 Hours Ago (asynchronously)
     * 
     * @param subscriptionId The subscription Id. (required)
     * @param resourceGroupName The name of the resource group where the recovery services vault is present. (required)
     * @param apiVersion Client Api Version. (required)
     * @param location Location of the resource (required)
     * @param input Contains information about Resource type and Resource name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recoveryServicesCheckNameAvailabilityAsync(String subscriptionId, String resourceGroupName, String apiVersion, String location, CheckNameAvailabilityParameters input, final ApiCallback<CheckNameAvailabilityResultResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = recoveryServicesCheckNameAvailabilityValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, location, input, _callback);
        Type localVarReturnType = new TypeToken<CheckNameAvailabilityResultResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
