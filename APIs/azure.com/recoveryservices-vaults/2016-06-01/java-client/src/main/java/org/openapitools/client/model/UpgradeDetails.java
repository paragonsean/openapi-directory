/*
 * RecoveryServicesClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details for upgrading vault.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:27:33.807475-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpgradeDetails {
  public static final String SERIALIZED_NAME_END_TIME_UTC = "endTimeUtc";
  @SerializedName(SERIALIZED_NAME_END_TIME_UTC)
  private OffsetDateTime endTimeUtc;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME_UTC = "lastUpdatedTimeUtc";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME_UTC)
  private OffsetDateTime lastUpdatedTimeUtc;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_OPERATION_ID = "operationId";
  @SerializedName(SERIALIZED_NAME_OPERATION_ID)
  private String operationId;

  public static final String SERIALIZED_NAME_PREVIOUS_RESOURCE_ID = "previousResourceId";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_RESOURCE_ID)
  private String previousResourceId;

  public static final String SERIALIZED_NAME_START_TIME_UTC = "startTimeUtc";
  @SerializedName(SERIALIZED_NAME_START_TIME_UTC)
  private OffsetDateTime startTimeUtc;

  /**
   * Status of the vault upgrade operation.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    UNKNOWN("Unknown"),
    
    IN_PROGRESS("InProgress"),
    
    UPGRADED("Upgraded"),
    
    FAILED("Failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * The way the vault upgrade was triggered.
   */
  @JsonAdapter(TriggerTypeEnum.Adapter.class)
  public enum TriggerTypeEnum {
    USER_TRIGGERED("UserTriggered"),
    
    FORCED_UPGRADE("ForcedUpgrade");

    private String value;

    TriggerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TriggerTypeEnum fromValue(String value) {
      for (TriggerTypeEnum b : TriggerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TriggerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TriggerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TriggerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TriggerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TriggerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRIGGER_TYPE = "triggerType";
  @SerializedName(SERIALIZED_NAME_TRIGGER_TYPE)
  private TriggerTypeEnum triggerType;

  public static final String SERIALIZED_NAME_UPGRADED_RESOURCE_ID = "upgradedResourceId";
  @SerializedName(SERIALIZED_NAME_UPGRADED_RESOURCE_ID)
  private String upgradedResourceId;

  public UpgradeDetails() {
  }

  public UpgradeDetails(
     OffsetDateTime endTimeUtc, 
     OffsetDateTime lastUpdatedTimeUtc, 
     String message, 
     String operationId, 
     String previousResourceId, 
     OffsetDateTime startTimeUtc, 
     StatusEnum status, 
     TriggerTypeEnum triggerType, 
     String upgradedResourceId
  ) {
    this();
    this.endTimeUtc = endTimeUtc;
    this.lastUpdatedTimeUtc = lastUpdatedTimeUtc;
    this.message = message;
    this.operationId = operationId;
    this.previousResourceId = previousResourceId;
    this.startTimeUtc = startTimeUtc;
    this.status = status;
    this.triggerType = triggerType;
    this.upgradedResourceId = upgradedResourceId;
  }

  /**
   * UTC time at which the upgrade operation has ended.
   * @return endTimeUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTimeUtc() {
    return endTimeUtc;
  }



  /**
   * UTC time at which the upgrade operation status was last updated.
   * @return lastUpdatedTimeUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTimeUtc() {
    return lastUpdatedTimeUtc;
  }



  /**
   * Message to the user containing information about the upgrade operation.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }



  /**
   * ID of the vault upgrade operation.
   * @return operationId
   */
  @javax.annotation.Nullable
  public String getOperationId() {
    return operationId;
  }



  /**
   * Resource ID of the vault before the upgrade.
   * @return previousResourceId
   */
  @javax.annotation.Nullable
  public String getPreviousResourceId() {
    return previousResourceId;
  }



  /**
   * UTC time at which the upgrade operation has started.
   * @return startTimeUtc
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTimeUtc() {
    return startTimeUtc;
  }



  /**
   * Status of the vault upgrade operation.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }



  /**
   * The way the vault upgrade was triggered.
   * @return triggerType
   */
  @javax.annotation.Nullable
  public TriggerTypeEnum getTriggerType() {
    return triggerType;
  }



  /**
   * Resource ID of the upgraded vault.
   * @return upgradedResourceId
   */
  @javax.annotation.Nullable
  public String getUpgradedResourceId() {
    return upgradedResourceId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpgradeDetails upgradeDetails = (UpgradeDetails) o;
    return Objects.equals(this.endTimeUtc, upgradeDetails.endTimeUtc) &&
        Objects.equals(this.lastUpdatedTimeUtc, upgradeDetails.lastUpdatedTimeUtc) &&
        Objects.equals(this.message, upgradeDetails.message) &&
        Objects.equals(this.operationId, upgradeDetails.operationId) &&
        Objects.equals(this.previousResourceId, upgradeDetails.previousResourceId) &&
        Objects.equals(this.startTimeUtc, upgradeDetails.startTimeUtc) &&
        Objects.equals(this.status, upgradeDetails.status) &&
        Objects.equals(this.triggerType, upgradeDetails.triggerType) &&
        Objects.equals(this.upgradedResourceId, upgradeDetails.upgradedResourceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTimeUtc, lastUpdatedTimeUtc, message, operationId, previousResourceId, startTimeUtc, status, triggerType, upgradedResourceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpgradeDetails {\n");
    sb.append("    endTimeUtc: ").append(toIndentedString(endTimeUtc)).append("\n");
    sb.append("    lastUpdatedTimeUtc: ").append(toIndentedString(lastUpdatedTimeUtc)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    previousResourceId: ").append(toIndentedString(previousResourceId)).append("\n");
    sb.append("    startTimeUtc: ").append(toIndentedString(startTimeUtc)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    triggerType: ").append(toIndentedString(triggerType)).append("\n");
    sb.append("    upgradedResourceId: ").append(toIndentedString(upgradedResourceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endTimeUtc");
    openapiFields.add("lastUpdatedTimeUtc");
    openapiFields.add("message");
    openapiFields.add("operationId");
    openapiFields.add("previousResourceId");
    openapiFields.add("startTimeUtc");
    openapiFields.add("status");
    openapiFields.add("triggerType");
    openapiFields.add("upgradedResourceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpgradeDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpgradeDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpgradeDetails is not found in the empty JSON string", UpgradeDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpgradeDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpgradeDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("operationId") != null && !jsonObj.get("operationId").isJsonNull()) && !jsonObj.get("operationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationId").toString()));
      }
      if ((jsonObj.get("previousResourceId") != null && !jsonObj.get("previousResourceId").isJsonNull()) && !jsonObj.get("previousResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previousResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previousResourceId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("triggerType") != null && !jsonObj.get("triggerType").isJsonNull()) && !jsonObj.get("triggerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggerType").toString()));
      }
      // validate the optional field `triggerType`
      if (jsonObj.get("triggerType") != null && !jsonObj.get("triggerType").isJsonNull()) {
        TriggerTypeEnum.validateJsonElement(jsonObj.get("triggerType"));
      }
      if ((jsonObj.get("upgradedResourceId") != null && !jsonObj.get("upgradedResourceId").isJsonNull()) && !jsonObj.get("upgradedResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upgradedResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upgradedResourceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpgradeDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpgradeDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpgradeDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpgradeDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<UpgradeDetails>() {
           @Override
           public void write(JsonWriter out, UpgradeDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpgradeDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpgradeDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpgradeDetails
   * @throws IOException if the JSON string is invalid with respect to UpgradeDetails
   */
  public static UpgradeDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpgradeDetails.class);
  }

  /**
   * Convert an instance of UpgradeDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

