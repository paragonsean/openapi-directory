# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpgradeDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time_utc: datetime=None, last_updated_time_utc: datetime=None, message: str=None, operation_id: str=None, previous_resource_id: str=None, start_time_utc: datetime=None, status: str=None, trigger_type: str=None, upgraded_resource_id: str=None):
        """UpgradeDetails - a model defined in OpenAPI

        :param end_time_utc: The end_time_utc of this UpgradeDetails.
        :param last_updated_time_utc: The last_updated_time_utc of this UpgradeDetails.
        :param message: The message of this UpgradeDetails.
        :param operation_id: The operation_id of this UpgradeDetails.
        :param previous_resource_id: The previous_resource_id of this UpgradeDetails.
        :param start_time_utc: The start_time_utc of this UpgradeDetails.
        :param status: The status of this UpgradeDetails.
        :param trigger_type: The trigger_type of this UpgradeDetails.
        :param upgraded_resource_id: The upgraded_resource_id of this UpgradeDetails.
        """
        self.openapi_types = {
            'end_time_utc': datetime,
            'last_updated_time_utc': datetime,
            'message': str,
            'operation_id': str,
            'previous_resource_id': str,
            'start_time_utc': datetime,
            'status': str,
            'trigger_type': str,
            'upgraded_resource_id': str
        }

        self.attribute_map = {
            'end_time_utc': 'endTimeUtc',
            'last_updated_time_utc': 'lastUpdatedTimeUtc',
            'message': 'message',
            'operation_id': 'operationId',
            'previous_resource_id': 'previousResourceId',
            'start_time_utc': 'startTimeUtc',
            'status': 'status',
            'trigger_type': 'triggerType',
            'upgraded_resource_id': 'upgradedResourceId'
        }

        self._end_time_utc = end_time_utc
        self._last_updated_time_utc = last_updated_time_utc
        self._message = message
        self._operation_id = operation_id
        self._previous_resource_id = previous_resource_id
        self._start_time_utc = start_time_utc
        self._status = status
        self._trigger_type = trigger_type
        self._upgraded_resource_id = upgraded_resource_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpgradeDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpgradeDetails of this UpgradeDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time_utc(self):
        """Gets the end_time_utc of this UpgradeDetails.

        UTC time at which the upgrade operation has ended.

        :return: The end_time_utc of this UpgradeDetails.
        :rtype: datetime
        """
        return self._end_time_utc

    @end_time_utc.setter
    def end_time_utc(self, end_time_utc):
        """Sets the end_time_utc of this UpgradeDetails.

        UTC time at which the upgrade operation has ended.

        :param end_time_utc: The end_time_utc of this UpgradeDetails.
        :type end_time_utc: datetime
        """

        self._end_time_utc = end_time_utc

    @property
    def last_updated_time_utc(self):
        """Gets the last_updated_time_utc of this UpgradeDetails.

        UTC time at which the upgrade operation status was last updated.

        :return: The last_updated_time_utc of this UpgradeDetails.
        :rtype: datetime
        """
        return self._last_updated_time_utc

    @last_updated_time_utc.setter
    def last_updated_time_utc(self, last_updated_time_utc):
        """Sets the last_updated_time_utc of this UpgradeDetails.

        UTC time at which the upgrade operation status was last updated.

        :param last_updated_time_utc: The last_updated_time_utc of this UpgradeDetails.
        :type last_updated_time_utc: datetime
        """

        self._last_updated_time_utc = last_updated_time_utc

    @property
    def message(self):
        """Gets the message of this UpgradeDetails.

        Message to the user containing information about the upgrade operation.

        :return: The message of this UpgradeDetails.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this UpgradeDetails.

        Message to the user containing information about the upgrade operation.

        :param message: The message of this UpgradeDetails.
        :type message: str
        """

        self._message = message

    @property
    def operation_id(self):
        """Gets the operation_id of this UpgradeDetails.

        ID of the vault upgrade operation.

        :return: The operation_id of this UpgradeDetails.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this UpgradeDetails.

        ID of the vault upgrade operation.

        :param operation_id: The operation_id of this UpgradeDetails.
        :type operation_id: str
        """

        self._operation_id = operation_id

    @property
    def previous_resource_id(self):
        """Gets the previous_resource_id of this UpgradeDetails.

        Resource ID of the vault before the upgrade.

        :return: The previous_resource_id of this UpgradeDetails.
        :rtype: str
        """
        return self._previous_resource_id

    @previous_resource_id.setter
    def previous_resource_id(self, previous_resource_id):
        """Sets the previous_resource_id of this UpgradeDetails.

        Resource ID of the vault before the upgrade.

        :param previous_resource_id: The previous_resource_id of this UpgradeDetails.
        :type previous_resource_id: str
        """

        self._previous_resource_id = previous_resource_id

    @property
    def start_time_utc(self):
        """Gets the start_time_utc of this UpgradeDetails.

        UTC time at which the upgrade operation has started.

        :return: The start_time_utc of this UpgradeDetails.
        :rtype: datetime
        """
        return self._start_time_utc

    @start_time_utc.setter
    def start_time_utc(self, start_time_utc):
        """Sets the start_time_utc of this UpgradeDetails.

        UTC time at which the upgrade operation has started.

        :param start_time_utc: The start_time_utc of this UpgradeDetails.
        :type start_time_utc: datetime
        """

        self._start_time_utc = start_time_utc

    @property
    def status(self):
        """Gets the status of this UpgradeDetails.

        Status of the vault upgrade operation.

        :return: The status of this UpgradeDetails.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpgradeDetails.

        Status of the vault upgrade operation.

        :param status: The status of this UpgradeDetails.
        :type status: str
        """
        allowed_values = ["Unknown", "InProgress", "Upgraded", "Failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def trigger_type(self):
        """Gets the trigger_type of this UpgradeDetails.

        The way the vault upgrade was triggered.

        :return: The trigger_type of this UpgradeDetails.
        :rtype: str
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this UpgradeDetails.

        The way the vault upgrade was triggered.

        :param trigger_type: The trigger_type of this UpgradeDetails.
        :type trigger_type: str
        """
        allowed_values = ["UserTriggered", "ForcedUpgrade"]  # noqa: E501
        if trigger_type not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger_type` ({0}), must be one of {1}"
                .format(trigger_type, allowed_values)
            )

        self._trigger_type = trigger_type

    @property
    def upgraded_resource_id(self):
        """Gets the upgraded_resource_id of this UpgradeDetails.

        Resource ID of the upgraded vault.

        :return: The upgraded_resource_id of this UpgradeDetails.
        :rtype: str
        """
        return self._upgraded_resource_id

    @upgraded_resource_id.setter
    def upgraded_resource_id(self, upgraded_resource_id):
        """Sets the upgraded_resource_id of this UpgradeDetails.

        Resource ID of the upgraded vault.

        :param upgraded_resource_id: The upgraded_resource_id of this UpgradeDetails.
        :type upgraded_resource_id: str
        """

        self._upgraded_resource_id = upgraded_resource_id
