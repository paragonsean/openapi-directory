# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VaultExtendedInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: str=None, encryption_key: str=None, encryption_key_thumbprint: str=None, integrity_key: str=None):
        """VaultExtendedInfo - a model defined in OpenAPI

        :param algorithm: The algorithm of this VaultExtendedInfo.
        :param encryption_key: The encryption_key of this VaultExtendedInfo.
        :param encryption_key_thumbprint: The encryption_key_thumbprint of this VaultExtendedInfo.
        :param integrity_key: The integrity_key of this VaultExtendedInfo.
        """
        self.openapi_types = {
            'algorithm': str,
            'encryption_key': str,
            'encryption_key_thumbprint': str,
            'integrity_key': str
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'encryption_key': 'encryptionKey',
            'encryption_key_thumbprint': 'encryptionKeyThumbprint',
            'integrity_key': 'integrityKey'
        }

        self._algorithm = algorithm
        self._encryption_key = encryption_key
        self._encryption_key_thumbprint = encryption_key_thumbprint
        self._integrity_key = integrity_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VaultExtendedInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VaultExtendedInfo of this VaultExtendedInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this VaultExtendedInfo.

        Algorithm for Vault ExtendedInfo

        :return: The algorithm of this VaultExtendedInfo.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this VaultExtendedInfo.

        Algorithm for Vault ExtendedInfo

        :param algorithm: The algorithm of this VaultExtendedInfo.
        :type algorithm: str
        """

        self._algorithm = algorithm

    @property
    def encryption_key(self):
        """Gets the encryption_key of this VaultExtendedInfo.

        Encryption key.

        :return: The encryption_key of this VaultExtendedInfo.
        :rtype: str
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """Sets the encryption_key of this VaultExtendedInfo.

        Encryption key.

        :param encryption_key: The encryption_key of this VaultExtendedInfo.
        :type encryption_key: str
        """

        self._encryption_key = encryption_key

    @property
    def encryption_key_thumbprint(self):
        """Gets the encryption_key_thumbprint of this VaultExtendedInfo.

        Encryption key thumbprint.

        :return: The encryption_key_thumbprint of this VaultExtendedInfo.
        :rtype: str
        """
        return self._encryption_key_thumbprint

    @encryption_key_thumbprint.setter
    def encryption_key_thumbprint(self, encryption_key_thumbprint):
        """Sets the encryption_key_thumbprint of this VaultExtendedInfo.

        Encryption key thumbprint.

        :param encryption_key_thumbprint: The encryption_key_thumbprint of this VaultExtendedInfo.
        :type encryption_key_thumbprint: str
        """

        self._encryption_key_thumbprint = encryption_key_thumbprint

    @property
    def integrity_key(self):
        """Gets the integrity_key of this VaultExtendedInfo.

        Integrity key.

        :return: The integrity_key of this VaultExtendedInfo.
        :rtype: str
        """
        return self._integrity_key

    @integrity_key.setter
    def integrity_key(self, integrity_key):
        """Sets the integrity_key of this VaultExtendedInfo.

        Integrity key.

        :param integrity_key: The integrity_key of this VaultExtendedInfo.
        :type integrity_key: str
        """

        self._integrity_key = integrity_key
