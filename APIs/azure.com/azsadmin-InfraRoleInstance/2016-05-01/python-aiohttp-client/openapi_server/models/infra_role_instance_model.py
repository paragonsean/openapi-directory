# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.infra_role_instance_size import InfraRoleInstanceSize
from openapi_server import util


class InfraRoleInstanceModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scale_unit: str=None, scale_unit_node: str=None, size: InfraRoleInstanceSize=None, state: str=None):
        """InfraRoleInstanceModel - a model defined in OpenAPI

        :param scale_unit: The scale_unit of this InfraRoleInstanceModel.
        :param scale_unit_node: The scale_unit_node of this InfraRoleInstanceModel.
        :param size: The size of this InfraRoleInstanceModel.
        :param state: The state of this InfraRoleInstanceModel.
        """
        self.openapi_types = {
            'scale_unit': str,
            'scale_unit_node': str,
            'size': InfraRoleInstanceSize,
            'state': str
        }

        self.attribute_map = {
            'scale_unit': 'scaleUnit',
            'scale_unit_node': 'scaleUnitNode',
            'size': 'size',
            'state': 'state'
        }

        self._scale_unit = scale_unit
        self._scale_unit_node = scale_unit_node
        self._size = size
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InfraRoleInstanceModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InfraRoleInstanceModel of this InfraRoleInstanceModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scale_unit(self):
        """Gets the scale_unit of this InfraRoleInstanceModel.

        The cluster that the virtual machine's host is part of.

        :return: The scale_unit of this InfraRoleInstanceModel.
        :rtype: str
        """
        return self._scale_unit

    @scale_unit.setter
    def scale_unit(self, scale_unit):
        """Sets the scale_unit of this InfraRoleInstanceModel.

        The cluster that the virtual machine's host is part of.

        :param scale_unit: The scale_unit of this InfraRoleInstanceModel.
        :type scale_unit: str
        """

        self._scale_unit = scale_unit

    @property
    def scale_unit_node(self):
        """Gets the scale_unit_node of this InfraRoleInstanceModel.

        URI to the scale unit node.

        :return: The scale_unit_node of this InfraRoleInstanceModel.
        :rtype: str
        """
        return self._scale_unit_node

    @scale_unit_node.setter
    def scale_unit_node(self, scale_unit_node):
        """Sets the scale_unit_node of this InfraRoleInstanceModel.

        URI to the scale unit node.

        :param scale_unit_node: The scale_unit_node of this InfraRoleInstanceModel.
        :type scale_unit_node: str
        """

        self._scale_unit_node = scale_unit_node

    @property
    def size(self):
        """Gets the size of this InfraRoleInstanceModel.


        :return: The size of this InfraRoleInstanceModel.
        :rtype: InfraRoleInstanceSize
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this InfraRoleInstanceModel.


        :param size: The size of this InfraRoleInstanceModel.
        :type size: InfraRoleInstanceSize
        """

        self._size = size

    @property
    def state(self):
        """Gets the state of this InfraRoleInstanceModel.

        The current state of the virtual machine.

        :return: The state of this InfraRoleInstanceModel.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this InfraRoleInstanceModel.

        The current state of the virtual machine.

        :param state: The state of this InfraRoleInstanceModel.
        :type state: str
        """
        allowed_values = ["Stopped", "Starting", "Running", "Stopping"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
