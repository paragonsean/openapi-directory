/*
 * FabricAdminClient
 * Infrastructure role instance operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2016-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.InfraRoleInstance;
import org.openapitools.client.model.InfraRoleInstanceList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InfraRoleInstancesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InfraRoleInstancesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InfraRoleInstancesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for infraRoleInstancesGet
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param infraRoleInstance Name of an infrastructure role instance. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infraRoleInstancesGetCall(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/infraRoleInstances/{infraRoleInstance}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "infraRoleInstance" + "}", localVarApiClient.escapeString(infraRoleInstance.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infraRoleInstancesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling infraRoleInstancesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling infraRoleInstancesGet(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling infraRoleInstancesGet(Async)");
        }

        // verify the required parameter 'infraRoleInstance' is set
        if (infraRoleInstance == null) {
            throw new ApiException("Missing the required parameter 'infraRoleInstance' when calling infraRoleInstancesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling infraRoleInstancesGet(Async)");
        }

        return infraRoleInstancesGetCall(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion, _callback);

    }

    /**
     * 
     * Return the requested infrastructure role instance.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param infraRoleInstance Name of an infrastructure role instance. (required)
     * @param apiVersion Client API Version. (required)
     * @return InfraRoleInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND </td><td>  -  </td></tr>
     </table>
     */
    public InfraRoleInstance infraRoleInstancesGet(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion) throws ApiException {
        ApiResponse<InfraRoleInstance> localVarResp = infraRoleInstancesGetWithHttpInfo(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Return the requested infrastructure role instance.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param infraRoleInstance Name of an infrastructure role instance. (required)
     * @param apiVersion Client API Version. (required)
     * @return ApiResponse&lt;InfraRoleInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InfraRoleInstance> infraRoleInstancesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = infraRoleInstancesGetValidateBeforeCall(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion, null);
        Type localVarReturnType = new TypeToken<InfraRoleInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return the requested infrastructure role instance.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param infraRoleInstance Name of an infrastructure role instance. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infraRoleInstancesGetAsync(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion, final ApiCallback<InfraRoleInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = infraRoleInstancesGetValidateBeforeCall(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<InfraRoleInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infraRoleInstancesList
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @param $filter OData filter parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infraRoleInstancesListCall(String subscriptionId, String resourceGroupName, String location, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/infraRoleInstances"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infraRoleInstancesListValidateBeforeCall(String subscriptionId, String resourceGroupName, String location, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling infraRoleInstancesList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling infraRoleInstancesList(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling infraRoleInstancesList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling infraRoleInstancesList(Async)");
        }

        return infraRoleInstancesListCall(subscriptionId, resourceGroupName, location, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Returns a list of all infrastructure role instances at a location.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @param $filter OData filter parameter. (optional)
     * @return InfraRoleInstanceList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND </td><td>  -  </td></tr>
     </table>
     */
    public InfraRoleInstanceList infraRoleInstancesList(String subscriptionId, String resourceGroupName, String location, String apiVersion, String $filter) throws ApiException {
        ApiResponse<InfraRoleInstanceList> localVarResp = infraRoleInstancesListWithHttpInfo(subscriptionId, resourceGroupName, location, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of all infrastructure role instances at a location.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @param $filter OData filter parameter. (optional)
     * @return ApiResponse&lt;InfraRoleInstanceList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InfraRoleInstanceList> infraRoleInstancesListWithHttpInfo(String subscriptionId, String resourceGroupName, String location, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = infraRoleInstancesListValidateBeforeCall(subscriptionId, resourceGroupName, location, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<InfraRoleInstanceList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of all infrastructure role instances at a location.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param apiVersion Client API Version. (required)
     * @param $filter OData filter parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infraRoleInstancesListAsync(String subscriptionId, String resourceGroupName, String location, String apiVersion, String $filter, final ApiCallback<InfraRoleInstanceList> _callback) throws ApiException {

        okhttp3.Call localVarCall = infraRoleInstancesListValidateBeforeCall(subscriptionId, resourceGroupName, location, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<InfraRoleInstanceList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for infraRoleInstancesPowerOff
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param infraRoleInstance Name of an infrastructure role instance. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infraRoleInstancesPowerOffCall(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/infraRoleInstances/{infraRoleInstance}/PowerOff"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "infraRoleInstance" + "}", localVarApiClient.escapeString(infraRoleInstance.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infraRoleInstancesPowerOffValidateBeforeCall(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling infraRoleInstancesPowerOff(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling infraRoleInstancesPowerOff(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling infraRoleInstancesPowerOff(Async)");
        }

        // verify the required parameter 'infraRoleInstance' is set
        if (infraRoleInstance == null) {
            throw new ApiException("Missing the required parameter 'infraRoleInstance' when calling infraRoleInstancesPowerOff(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling infraRoleInstancesPowerOff(Async)");
        }

        return infraRoleInstancesPowerOffCall(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion, _callback);

    }

    /**
     * 
     * Power off an infrastructure role instance.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param infraRoleInstance Name of an infrastructure role instance. (required)
     * @param apiVersion Client API Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public void infraRoleInstancesPowerOff(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion) throws ApiException {
        infraRoleInstancesPowerOffWithHttpInfo(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion);
    }

    /**
     * 
     * Power off an infrastructure role instance.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param infraRoleInstance Name of an infrastructure role instance. (required)
     * @param apiVersion Client API Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> infraRoleInstancesPowerOffWithHttpInfo(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = infraRoleInstancesPowerOffValidateBeforeCall(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Power off an infrastructure role instance.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param infraRoleInstance Name of an infrastructure role instance. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infraRoleInstancesPowerOffAsync(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = infraRoleInstancesPowerOffValidateBeforeCall(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for infraRoleInstancesPowerOn
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param infraRoleInstance Name of an infrastructure role instance. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infraRoleInstancesPowerOnCall(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/infraRoleInstances/{infraRoleInstance}/PowerOn"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "infraRoleInstance" + "}", localVarApiClient.escapeString(infraRoleInstance.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infraRoleInstancesPowerOnValidateBeforeCall(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling infraRoleInstancesPowerOn(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling infraRoleInstancesPowerOn(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling infraRoleInstancesPowerOn(Async)");
        }

        // verify the required parameter 'infraRoleInstance' is set
        if (infraRoleInstance == null) {
            throw new ApiException("Missing the required parameter 'infraRoleInstance' when calling infraRoleInstancesPowerOn(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling infraRoleInstancesPowerOn(Async)");
        }

        return infraRoleInstancesPowerOnCall(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion, _callback);

    }

    /**
     * 
     * Power on an infrastructure role instance.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param infraRoleInstance Name of an infrastructure role instance. (required)
     * @param apiVersion Client API Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public void infraRoleInstancesPowerOn(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion) throws ApiException {
        infraRoleInstancesPowerOnWithHttpInfo(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion);
    }

    /**
     * 
     * Power on an infrastructure role instance.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param infraRoleInstance Name of an infrastructure role instance. (required)
     * @param apiVersion Client API Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> infraRoleInstancesPowerOnWithHttpInfo(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = infraRoleInstancesPowerOnValidateBeforeCall(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Power on an infrastructure role instance.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param infraRoleInstance Name of an infrastructure role instance. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infraRoleInstancesPowerOnAsync(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = infraRoleInstancesPowerOnValidateBeforeCall(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for infraRoleInstancesReboot
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param infraRoleInstance Name of an infrastructure role instance. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infraRoleInstancesRebootCall(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/infraRoleInstances/{infraRoleInstance}/Reboot"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "infraRoleInstance" + "}", localVarApiClient.escapeString(infraRoleInstance.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infraRoleInstancesRebootValidateBeforeCall(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling infraRoleInstancesReboot(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling infraRoleInstancesReboot(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling infraRoleInstancesReboot(Async)");
        }

        // verify the required parameter 'infraRoleInstance' is set
        if (infraRoleInstance == null) {
            throw new ApiException("Missing the required parameter 'infraRoleInstance' when calling infraRoleInstancesReboot(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling infraRoleInstancesReboot(Async)");
        }

        return infraRoleInstancesRebootCall(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion, _callback);

    }

    /**
     * 
     * Reboot an infrastructure role instance.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param infraRoleInstance Name of an infrastructure role instance. (required)
     * @param apiVersion Client API Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public void infraRoleInstancesReboot(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion) throws ApiException {
        infraRoleInstancesRebootWithHttpInfo(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion);
    }

    /**
     * 
     * Reboot an infrastructure role instance.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param infraRoleInstance Name of an infrastructure role instance. (required)
     * @param apiVersion Client API Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> infraRoleInstancesRebootWithHttpInfo(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = infraRoleInstancesRebootValidateBeforeCall(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Reboot an infrastructure role instance.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param infraRoleInstance Name of an infrastructure role instance. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infraRoleInstancesRebootAsync(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = infraRoleInstancesRebootValidateBeforeCall(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for infraRoleInstancesShutdown
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param infraRoleInstance Name of an infrastructure role instance. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infraRoleInstancesShutdownCall(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/infraRoleInstances/{infraRoleInstance}/Shutdown"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "infraRoleInstance" + "}", localVarApiClient.escapeString(infraRoleInstance.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call infraRoleInstancesShutdownValidateBeforeCall(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling infraRoleInstancesShutdown(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling infraRoleInstancesShutdown(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling infraRoleInstancesShutdown(Async)");
        }

        // verify the required parameter 'infraRoleInstance' is set
        if (infraRoleInstance == null) {
            throw new ApiException("Missing the required parameter 'infraRoleInstance' when calling infraRoleInstancesShutdown(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling infraRoleInstancesShutdown(Async)");
        }

        return infraRoleInstancesShutdownCall(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion, _callback);

    }

    /**
     * 
     * Shut down an infrastructure role instance.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param infraRoleInstance Name of an infrastructure role instance. (required)
     * @param apiVersion Client API Version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public void infraRoleInstancesShutdown(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion) throws ApiException {
        infraRoleInstancesShutdownWithHttpInfo(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion);
    }

    /**
     * 
     * Shut down an infrastructure role instance.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param infraRoleInstance Name of an infrastructure role instance. (required)
     * @param apiVersion Client API Version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> infraRoleInstancesShutdownWithHttpInfo(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = infraRoleInstancesShutdownValidateBeforeCall(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Shut down an infrastructure role instance.
     * @param subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param location Location of the resource. (required)
     * @param infraRoleInstance Name of an infrastructure role instance. (required)
     * @param apiVersion Client API Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> ACCEPTED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call infraRoleInstancesShutdownAsync(String subscriptionId, String resourceGroupName, String location, String infraRoleInstance, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = infraRoleInstancesShutdownValidateBeforeCall(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
