/**
 * FabricAdminClient
 * Infrastructure role instance operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2016-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInfraRoleInstancesApi_H
#define OAI_OAIInfraRoleInstancesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIInfraRoleInstance.h"
#include "OAIInfraRoleInstanceList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInfraRoleInstancesApi : public QObject {
    Q_OBJECT

public:
    OAIInfraRoleInstancesApi(const int timeOut = 0);
    ~OAIInfraRoleInstancesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  location QString [required]
    * @param[in]  infra_role_instance QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void infraRoleInstancesGet(const QString &subscription_id, const QString &resource_group_name, const QString &location, const QString &infra_role_instance, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  location QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void infraRoleInstancesList(const QString &subscription_id, const QString &resource_group_name, const QString &location, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  location QString [required]
    * @param[in]  infra_role_instance QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void infraRoleInstancesPowerOff(const QString &subscription_id, const QString &resource_group_name, const QString &location, const QString &infra_role_instance, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  location QString [required]
    * @param[in]  infra_role_instance QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void infraRoleInstancesPowerOn(const QString &subscription_id, const QString &resource_group_name, const QString &location, const QString &infra_role_instance, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  location QString [required]
    * @param[in]  infra_role_instance QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void infraRoleInstancesReboot(const QString &subscription_id, const QString &resource_group_name, const QString &location, const QString &infra_role_instance, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  location QString [required]
    * @param[in]  infra_role_instance QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void infraRoleInstancesShutdown(const QString &subscription_id, const QString &resource_group_name, const QString &location, const QString &infra_role_instance, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void infraRoleInstancesGetCallback(OAIHttpRequestWorker *worker);
    void infraRoleInstancesListCallback(OAIHttpRequestWorker *worker);
    void infraRoleInstancesPowerOffCallback(OAIHttpRequestWorker *worker);
    void infraRoleInstancesPowerOnCallback(OAIHttpRequestWorker *worker);
    void infraRoleInstancesRebootCallback(OAIHttpRequestWorker *worker);
    void infraRoleInstancesShutdownCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void infraRoleInstancesGetSignal(OAIInfraRoleInstance summary);
    void infraRoleInstancesListSignal(OAIInfraRoleInstanceList summary);
    void infraRoleInstancesPowerOffSignal();
    void infraRoleInstancesPowerOnSignal();
    void infraRoleInstancesRebootSignal();
    void infraRoleInstancesShutdownSignal();


    void infraRoleInstancesGetSignalFull(OAIHttpRequestWorker *worker, OAIInfraRoleInstance summary);
    void infraRoleInstancesListSignalFull(OAIHttpRequestWorker *worker, OAIInfraRoleInstanceList summary);
    void infraRoleInstancesPowerOffSignalFull(OAIHttpRequestWorker *worker);
    void infraRoleInstancesPowerOnSignalFull(OAIHttpRequestWorker *worker);
    void infraRoleInstancesRebootSignalFull(OAIHttpRequestWorker *worker);
    void infraRoleInstancesShutdownSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use infraRoleInstancesGetSignalError() instead")
    void infraRoleInstancesGetSignalE(OAIInfraRoleInstance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void infraRoleInstancesGetSignalError(OAIInfraRoleInstance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use infraRoleInstancesListSignalError() instead")
    void infraRoleInstancesListSignalE(OAIInfraRoleInstanceList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void infraRoleInstancesListSignalError(OAIInfraRoleInstanceList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use infraRoleInstancesPowerOffSignalError() instead")
    void infraRoleInstancesPowerOffSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void infraRoleInstancesPowerOffSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use infraRoleInstancesPowerOnSignalError() instead")
    void infraRoleInstancesPowerOnSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void infraRoleInstancesPowerOnSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use infraRoleInstancesRebootSignalError() instead")
    void infraRoleInstancesRebootSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void infraRoleInstancesRebootSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use infraRoleInstancesShutdownSignalError() instead")
    void infraRoleInstancesShutdownSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void infraRoleInstancesShutdownSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use infraRoleInstancesGetSignalErrorFull() instead")
    void infraRoleInstancesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void infraRoleInstancesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use infraRoleInstancesListSignalErrorFull() instead")
    void infraRoleInstancesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void infraRoleInstancesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use infraRoleInstancesPowerOffSignalErrorFull() instead")
    void infraRoleInstancesPowerOffSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void infraRoleInstancesPowerOffSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use infraRoleInstancesPowerOnSignalErrorFull() instead")
    void infraRoleInstancesPowerOnSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void infraRoleInstancesPowerOnSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use infraRoleInstancesRebootSignalErrorFull() instead")
    void infraRoleInstancesRebootSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void infraRoleInstancesRebootSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use infraRoleInstancesShutdownSignalErrorFull() instead")
    void infraRoleInstancesShutdownSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void infraRoleInstancesShutdownSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
