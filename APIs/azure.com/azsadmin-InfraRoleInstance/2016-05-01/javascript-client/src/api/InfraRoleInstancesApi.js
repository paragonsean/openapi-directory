/**
 * FabricAdminClient
 * Infrastructure role instance operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2016-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InfraRoleInstance from '../model/InfraRoleInstance';
import InfraRoleInstanceList from '../model/InfraRoleInstanceList';

/**
* InfraRoleInstances service.
* @module api/InfraRoleInstancesApi
* @version 2016-05-01
*/
export default class InfraRoleInstancesApi {

    /**
    * Constructs a new InfraRoleInstancesApi. 
    * @alias module:api/InfraRoleInstancesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the infraRoleInstancesGet operation.
     * @callback module:api/InfraRoleInstancesApi~infraRoleInstancesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InfraRoleInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the requested infrastructure role instance.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group.
     * @param {String} location Location of the resource.
     * @param {String} infraRoleInstance Name of an infrastructure role instance.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/InfraRoleInstancesApi~infraRoleInstancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InfraRoleInstance}
     */
    infraRoleInstancesGet(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling infraRoleInstancesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling infraRoleInstancesGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling infraRoleInstancesGet");
      }
      // verify the required parameter 'infraRoleInstance' is set
      if (infraRoleInstance === undefined || infraRoleInstance === null) {
        throw new Error("Missing the required parameter 'infraRoleInstance' when calling infraRoleInstancesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling infraRoleInstancesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'location': location,
        'infraRoleInstance': infraRoleInstance
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InfraRoleInstance;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/infraRoleInstances/{infraRoleInstance}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the infraRoleInstancesList operation.
     * @callback module:api/InfraRoleInstancesApi~infraRoleInstancesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InfraRoleInstanceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all infrastructure role instances at a location.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group.
     * @param {String} location Location of the resource.
     * @param {String} apiVersion Client API Version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData filter parameter.
     * @param {module:api/InfraRoleInstancesApi~infraRoleInstancesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InfraRoleInstanceList}
     */
    infraRoleInstancesList(subscriptionId, resourceGroupName, location, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling infraRoleInstancesList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling infraRoleInstancesList");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling infraRoleInstancesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling infraRoleInstancesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'location': location
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InfraRoleInstanceList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/infraRoleInstances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the infraRoleInstancesPowerOff operation.
     * @callback module:api/InfraRoleInstancesApi~infraRoleInstancesPowerOffCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Power off an infrastructure role instance.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group.
     * @param {String} location Location of the resource.
     * @param {String} infraRoleInstance Name of an infrastructure role instance.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/InfraRoleInstancesApi~infraRoleInstancesPowerOffCallback} callback The callback function, accepting three arguments: error, data, response
     */
    infraRoleInstancesPowerOff(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling infraRoleInstancesPowerOff");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling infraRoleInstancesPowerOff");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling infraRoleInstancesPowerOff");
      }
      // verify the required parameter 'infraRoleInstance' is set
      if (infraRoleInstance === undefined || infraRoleInstance === null) {
        throw new Error("Missing the required parameter 'infraRoleInstance' when calling infraRoleInstancesPowerOff");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling infraRoleInstancesPowerOff");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'location': location,
        'infraRoleInstance': infraRoleInstance
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/infraRoleInstances/{infraRoleInstance}/PowerOff', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the infraRoleInstancesPowerOn operation.
     * @callback module:api/InfraRoleInstancesApi~infraRoleInstancesPowerOnCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Power on an infrastructure role instance.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group.
     * @param {String} location Location of the resource.
     * @param {String} infraRoleInstance Name of an infrastructure role instance.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/InfraRoleInstancesApi~infraRoleInstancesPowerOnCallback} callback The callback function, accepting three arguments: error, data, response
     */
    infraRoleInstancesPowerOn(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling infraRoleInstancesPowerOn");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling infraRoleInstancesPowerOn");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling infraRoleInstancesPowerOn");
      }
      // verify the required parameter 'infraRoleInstance' is set
      if (infraRoleInstance === undefined || infraRoleInstance === null) {
        throw new Error("Missing the required parameter 'infraRoleInstance' when calling infraRoleInstancesPowerOn");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling infraRoleInstancesPowerOn");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'location': location,
        'infraRoleInstance': infraRoleInstance
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/infraRoleInstances/{infraRoleInstance}/PowerOn', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the infraRoleInstancesReboot operation.
     * @callback module:api/InfraRoleInstancesApi~infraRoleInstancesRebootCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reboot an infrastructure role instance.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group.
     * @param {String} location Location of the resource.
     * @param {String} infraRoleInstance Name of an infrastructure role instance.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/InfraRoleInstancesApi~infraRoleInstancesRebootCallback} callback The callback function, accepting three arguments: error, data, response
     */
    infraRoleInstancesReboot(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling infraRoleInstancesReboot");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling infraRoleInstancesReboot");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling infraRoleInstancesReboot");
      }
      // verify the required parameter 'infraRoleInstance' is set
      if (infraRoleInstance === undefined || infraRoleInstance === null) {
        throw new Error("Missing the required parameter 'infraRoleInstance' when calling infraRoleInstancesReboot");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling infraRoleInstancesReboot");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'location': location,
        'infraRoleInstance': infraRoleInstance
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/infraRoleInstances/{infraRoleInstance}/Reboot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the infraRoleInstancesShutdown operation.
     * @callback module:api/InfraRoleInstancesApi~infraRoleInstancesShutdownCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Shut down an infrastructure role instance.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group.
     * @param {String} location Location of the resource.
     * @param {String} infraRoleInstance Name of an infrastructure role instance.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/InfraRoleInstancesApi~infraRoleInstancesShutdownCallback} callback The callback function, accepting three arguments: error, data, response
     */
    infraRoleInstancesShutdown(subscriptionId, resourceGroupName, location, infraRoleInstance, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling infraRoleInstancesShutdown");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling infraRoleInstancesShutdown");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling infraRoleInstancesShutdown");
      }
      // verify the required parameter 'infraRoleInstance' is set
      if (infraRoleInstance === undefined || infraRoleInstance === null) {
        throw new Error("Missing the required parameter 'infraRoleInstance' when calling infraRoleInstancesShutdown");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling infraRoleInstancesShutdown");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'location': location,
        'infraRoleInstance': infraRoleInstance
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Fabric.Admin/fabricLocations/{location}/infraRoleInstances/{infraRoleInstance}/Shutdown', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
