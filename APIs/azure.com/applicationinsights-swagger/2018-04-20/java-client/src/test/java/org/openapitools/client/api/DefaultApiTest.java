/*
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.EventsResults;
import org.openapitools.client.model.MetricsResult;
import org.openapitools.client.model.QueryBody;
import org.openapitools.client.model.QueryResults;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Get an event
     *
     * Gets the data for a single event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String applicationName = null;
        String eventType = null;
        String eventId = null;
        String apiVersion = null;
        String timespan = null;
        EventsResults response = api.eventsGet(subscriptionId, resourceGroupName, applicationName, eventType, eventId, apiVersion, timespan);
        // TODO: test validations
    }

    /**
     * Execute OData query
     *
     * Executes an OData query for events
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsGetByTypeTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String applicationName = null;
        String eventType = null;
        String apiVersion = null;
        String timespan = null;
        String $filter = null;
        String $search = null;
        String $orderby = null;
        String $select = null;
        Integer $skip = null;
        Integer $top = null;
        String $format = null;
        Boolean $count = null;
        String $apply = null;
        EventsResults response = api.eventsGetByType(subscriptionId, resourceGroupName, applicationName, eventType, apiVersion, timespan, $filter, $search, $orderby, $select, $skip, $top, $format, $count, $apply);
        // TODO: test validations
    }

    /**
     * Get OData metadata
     *
     * Gets OData EDMX metadata describing the event data model
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsGetOdataMetadataTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String applicationName = null;
        String apiVersion = null;
        Object response = api.eventsGetOdataMetadata(subscriptionId, resourceGroupName, applicationName, apiVersion);
        // TODO: test validations
    }

    /**
     * Retrieve metric data
     *
     * Gets metric values for a single metric
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void metricsGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String applicationName = null;
        String metricId = null;
        String apiVersion = null;
        String timespan = null;
        String interval = null;
        List<String> aggregation = null;
        List<String> segment = null;
        Integer top = null;
        String orderby = null;
        String filter = null;
        MetricsResult response = api.metricsGet(subscriptionId, resourceGroupName, applicationName, metricId, apiVersion, timespan, interval, aggregation, segment, top, orderby, filter);
        // TODO: test validations
    }

    /**
     * Retrieve metric metadata
     *
     * Gets metadata describing the available metrics
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void metricsGetMetadataTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String applicationName = null;
        String apiVersion = null;
        Object response = api.metricsGetMetadata(subscriptionId, resourceGroupName, applicationName, apiVersion);
        // TODO: test validations
    }

    /**
     * Execute an Analytics query
     *
     * Executes an Analytics query for data. [Here](https://dev.applicationinsights.io/documentation/Using-the-API/Query) is an example for using POST with an Analytics query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryExecuteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String applicationName = null;
        String apiVersion = null;
        QueryBody body = null;
        QueryResults response = api.queryExecute(subscriptionId, resourceGroupName, applicationName, apiVersion, body);
        // TODO: test validations
    }

    /**
     * Execute an Analytics query
     *
     * Executes an Analytics query for data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String applicationName = null;
        String query = null;
        String apiVersion = null;
        String timespan = null;
        QueryResults response = api.queryGet(subscriptionId, resourceGroupName, applicationName, query, apiVersion, timespan);
        // TODO: test validations
    }

}
