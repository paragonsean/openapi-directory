/*
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EventsExceptionDetailsParsedStack;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Exception details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:24:10.535800-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventsExceptionDetail {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_OUTER_ID = "outerId";
  @SerializedName(SERIALIZED_NAME_OUTER_ID)
  private String outerId;

  public static final String SERIALIZED_NAME_PARSED_STACK = "parsedStack";
  @SerializedName(SERIALIZED_NAME_PARSED_STACK)
  private List<EventsExceptionDetailsParsedStack> parsedStack = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEVERITY_LEVEL = "severityLevel";
  @SerializedName(SERIALIZED_NAME_SEVERITY_LEVEL)
  private String severityLevel;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public EventsExceptionDetail() {
  }

  public EventsExceptionDetail id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the exception detail
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public EventsExceptionDetail message(String message) {
    this.message = message;
    return this;
  }

  /**
   * The message of the exception detail
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public EventsExceptionDetail outerId(String outerId) {
    this.outerId = outerId;
    return this;
  }

  /**
   * The outer ID of the exception detail
   * @return outerId
   */
  @javax.annotation.Nullable
  public String getOuterId() {
    return outerId;
  }

  public void setOuterId(String outerId) {
    this.outerId = outerId;
  }


  public EventsExceptionDetail parsedStack(List<EventsExceptionDetailsParsedStack> parsedStack) {
    this.parsedStack = parsedStack;
    return this;
  }

  public EventsExceptionDetail addParsedStackItem(EventsExceptionDetailsParsedStack parsedStackItem) {
    if (this.parsedStack == null) {
      this.parsedStack = new ArrayList<>();
    }
    this.parsedStack.add(parsedStackItem);
    return this;
  }

  /**
   * The parsed stack
   * @return parsedStack
   */
  @javax.annotation.Nullable
  public List<EventsExceptionDetailsParsedStack> getParsedStack() {
    return parsedStack;
  }

  public void setParsedStack(List<EventsExceptionDetailsParsedStack> parsedStack) {
    this.parsedStack = parsedStack;
  }


  public EventsExceptionDetail severityLevel(String severityLevel) {
    this.severityLevel = severityLevel;
    return this;
  }

  /**
   * The severity level of the exception detail
   * @return severityLevel
   */
  @javax.annotation.Nullable
  public String getSeverityLevel() {
    return severityLevel;
  }

  public void setSeverityLevel(String severityLevel) {
    this.severityLevel = severityLevel;
  }


  public EventsExceptionDetail type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the exception detail
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventsExceptionDetail eventsExceptionDetail = (EventsExceptionDetail) o;
    return Objects.equals(this.id, eventsExceptionDetail.id) &&
        Objects.equals(this.message, eventsExceptionDetail.message) &&
        Objects.equals(this.outerId, eventsExceptionDetail.outerId) &&
        Objects.equals(this.parsedStack, eventsExceptionDetail.parsedStack) &&
        Objects.equals(this.severityLevel, eventsExceptionDetail.severityLevel) &&
        Objects.equals(this.type, eventsExceptionDetail.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, message, outerId, parsedStack, severityLevel, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventsExceptionDetail {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    outerId: ").append(toIndentedString(outerId)).append("\n");
    sb.append("    parsedStack: ").append(toIndentedString(parsedStack)).append("\n");
    sb.append("    severityLevel: ").append(toIndentedString(severityLevel)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("message");
    openapiFields.add("outerId");
    openapiFields.add("parsedStack");
    openapiFields.add("severityLevel");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventsExceptionDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventsExceptionDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventsExceptionDetail is not found in the empty JSON string", EventsExceptionDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventsExceptionDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventsExceptionDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("outerId") != null && !jsonObj.get("outerId").isJsonNull()) && !jsonObj.get("outerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outerId").toString()));
      }
      if (jsonObj.get("parsedStack") != null && !jsonObj.get("parsedStack").isJsonNull()) {
        JsonArray jsonArrayparsedStack = jsonObj.getAsJsonArray("parsedStack");
        if (jsonArrayparsedStack != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parsedStack").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parsedStack` to be an array in the JSON string but got `%s`", jsonObj.get("parsedStack").toString()));
          }

          // validate the optional field `parsedStack` (array)
          for (int i = 0; i < jsonArrayparsedStack.size(); i++) {
            EventsExceptionDetailsParsedStack.validateJsonElement(jsonArrayparsedStack.get(i));
          };
        }
      }
      if ((jsonObj.get("severityLevel") != null && !jsonObj.get("severityLevel").isJsonNull()) && !jsonObj.get("severityLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severityLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severityLevel").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventsExceptionDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventsExceptionDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventsExceptionDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventsExceptionDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<EventsExceptionDetail>() {
           @Override
           public void write(JsonWriter out, EventsExceptionDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventsExceptionDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventsExceptionDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventsExceptionDetail
   * @throws IOException if the JSON string is invalid with respect to EventsExceptionDetail
   */
  public static EventsExceptionDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventsExceptionDetail.class);
  }

  /**
   * Convert an instance of EventsExceptionDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

