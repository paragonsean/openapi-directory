/*
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * ID of the metric. This is either a standard AI metric, or an application-specific custom metric.
 */
@JsonAdapter(MetricId.Adapter.class)
public enum MetricId {
  
  REQUESTS_COUNT("requests/count"),
  
  REQUESTS_DURATION("requests/duration"),
  
  REQUESTS_FAILED("requests/failed"),
  
  USERS_COUNT("users/count"),
  
  USERS_AUTHENTICATED("users/authenticated"),
  
  PAGE_VIEWS_COUNT("pageViews/count"),
  
  PAGE_VIEWS_DURATION("pageViews/duration"),
  
  CLIENT_PROCESSING_DURATION("client/processingDuration"),
  
  CLIENT_RECEIVE_DURATION("client/receiveDuration"),
  
  CLIENT_NETWORK_DURATION("client/networkDuration"),
  
  CLIENT_SEND_DURATION("client/sendDuration"),
  
  CLIENT_TOTAL_DURATION("client/totalDuration"),
  
  DEPENDENCIES_COUNT("dependencies/count"),
  
  DEPENDENCIES_FAILED("dependencies/failed"),
  
  DEPENDENCIES_DURATION("dependencies/duration"),
  
  EXCEPTIONS_COUNT("exceptions/count"),
  
  EXCEPTIONS_BROWSER("exceptions/browser"),
  
  EXCEPTIONS_SERVER("exceptions/server"),
  
  SESSIONS_COUNT("sessions/count"),
  
  PERFORMANCE_COUNTERS_REQUEST_EXECUTION_TIME("performanceCounters/requestExecutionTime"),
  
  PERFORMANCE_COUNTERS_REQUESTS_PER_SECOND("performanceCounters/requestsPerSecond"),
  
  PERFORMANCE_COUNTERS_REQUESTS_IN_QUEUE("performanceCounters/requestsInQueue"),
  
  PERFORMANCE_COUNTERS_MEMORY_AVAILABLE_BYTES("performanceCounters/memoryAvailableBytes"),
  
  PERFORMANCE_COUNTERS_EXCEPTIONS_PER_SECOND("performanceCounters/exceptionsPerSecond"),
  
  PERFORMANCE_COUNTERS_PROCESS_CPU_PERCENTAGE("performanceCounters/processCpuPercentage"),
  
  PERFORMANCE_COUNTERS_PROCESS_IO_BYTES_PER_SECOND("performanceCounters/processIOBytesPerSecond"),
  
  PERFORMANCE_COUNTERS_PROCESS_PRIVATE_BYTES("performanceCounters/processPrivateBytes"),
  
  PERFORMANCE_COUNTERS_PROCESSOR_CPU_PERCENTAGE("performanceCounters/processorCpuPercentage"),
  
  AVAILABILITY_RESULTS_AVAILABILITY_PERCENTAGE("availabilityResults/availabilityPercentage"),
  
  AVAILABILITY_RESULTS_DURATION("availabilityResults/duration"),
  
  BILLING_TELEMETRY_COUNT("billing/telemetryCount"),
  
  CUSTOM_EVENTS_COUNT("customEvents/count");

  private String value;

  MetricId(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static MetricId fromValue(String value) {
    for (MetricId b : MetricId.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<MetricId> {
    @Override
    public void write(final JsonWriter jsonWriter, final MetricId enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public MetricId read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return MetricId.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    MetricId.fromValue(value);
  }
}

