/*
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EventsExceptionDetail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The exception info
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:24:10.535800-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventsExceptionInfo {
  public static final String SERIALIZED_NAME_ASSEMBLY = "assembly";
  @SerializedName(SERIALIZED_NAME_ASSEMBLY)
  private String assembly;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private List<EventsExceptionDetail> details = new ArrayList<>();

  public static final String SERIALIZED_NAME_HANDLED_AT = "handledAt";
  @SerializedName(SERIALIZED_NAME_HANDLED_AT)
  private String handledAt;

  public static final String SERIALIZED_NAME_INNERMOST_ASSEMBLY = "innermostAssembly";
  @SerializedName(SERIALIZED_NAME_INNERMOST_ASSEMBLY)
  private String innermostAssembly;

  public static final String SERIALIZED_NAME_INNERMOST_MESSAGE = "innermostMessage";
  @SerializedName(SERIALIZED_NAME_INNERMOST_MESSAGE)
  private String innermostMessage;

  public static final String SERIALIZED_NAME_INNERMOST_METHOD = "innermostMethod";
  @SerializedName(SERIALIZED_NAME_INNERMOST_METHOD)
  private String innermostMethod;

  public static final String SERIALIZED_NAME_INNERMOST_TYPE = "innermostType";
  @SerializedName(SERIALIZED_NAME_INNERMOST_TYPE)
  private String innermostType;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_OUTER_ASSEMBLY = "outerAssembly";
  @SerializedName(SERIALIZED_NAME_OUTER_ASSEMBLY)
  private String outerAssembly;

  public static final String SERIALIZED_NAME_OUTER_MESSAGE = "outerMessage";
  @SerializedName(SERIALIZED_NAME_OUTER_MESSAGE)
  private String outerMessage;

  public static final String SERIALIZED_NAME_OUTER_METHOD = "outerMethod";
  @SerializedName(SERIALIZED_NAME_OUTER_METHOD)
  private String outerMethod;

  public static final String SERIALIZED_NAME_OUTER_TYPE = "outerType";
  @SerializedName(SERIALIZED_NAME_OUTER_TYPE)
  private String outerType;

  public static final String SERIALIZED_NAME_PROBLEM_ID = "problemId";
  @SerializedName(SERIALIZED_NAME_PROBLEM_ID)
  private String problemId;

  public static final String SERIALIZED_NAME_SEVERITY_LEVEL = "severityLevel";
  @SerializedName(SERIALIZED_NAME_SEVERITY_LEVEL)
  private Integer severityLevel;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public EventsExceptionInfo() {
  }

  public EventsExceptionInfo assembly(String assembly) {
    this.assembly = assembly;
    return this;
  }

  /**
   * The assembly which threw the exception
   * @return assembly
   */
  @javax.annotation.Nullable
  public String getAssembly() {
    return assembly;
  }

  public void setAssembly(String assembly) {
    this.assembly = assembly;
  }


  public EventsExceptionInfo details(List<EventsExceptionDetail> details) {
    this.details = details;
    return this;
  }

  public EventsExceptionInfo addDetailsItem(EventsExceptionDetail detailsItem) {
    if (this.details == null) {
      this.details = new ArrayList<>();
    }
    this.details.add(detailsItem);
    return this;
  }

  /**
   * The details of the exception
   * @return details
   */
  @javax.annotation.Nullable
  public List<EventsExceptionDetail> getDetails() {
    return details;
  }

  public void setDetails(List<EventsExceptionDetail> details) {
    this.details = details;
  }


  public EventsExceptionInfo handledAt(String handledAt) {
    this.handledAt = handledAt;
    return this;
  }

  /**
   * Indicates where the exception was handled at
   * @return handledAt
   */
  @javax.annotation.Nullable
  public String getHandledAt() {
    return handledAt;
  }

  public void setHandledAt(String handledAt) {
    this.handledAt = handledAt;
  }


  public EventsExceptionInfo innermostAssembly(String innermostAssembly) {
    this.innermostAssembly = innermostAssembly;
    return this;
  }

  /**
   * The inner most assembly of the exception
   * @return innermostAssembly
   */
  @javax.annotation.Nullable
  public String getInnermostAssembly() {
    return innermostAssembly;
  }

  public void setInnermostAssembly(String innermostAssembly) {
    this.innermostAssembly = innermostAssembly;
  }


  public EventsExceptionInfo innermostMessage(String innermostMessage) {
    this.innermostMessage = innermostMessage;
    return this;
  }

  /**
   * The inner most message of the exception
   * @return innermostMessage
   */
  @javax.annotation.Nullable
  public String getInnermostMessage() {
    return innermostMessage;
  }

  public void setInnermostMessage(String innermostMessage) {
    this.innermostMessage = innermostMessage;
  }


  public EventsExceptionInfo innermostMethod(String innermostMethod) {
    this.innermostMethod = innermostMethod;
    return this;
  }

  /**
   * The inner most method of the exception
   * @return innermostMethod
   */
  @javax.annotation.Nullable
  public String getInnermostMethod() {
    return innermostMethod;
  }

  public void setInnermostMethod(String innermostMethod) {
    this.innermostMethod = innermostMethod;
  }


  public EventsExceptionInfo innermostType(String innermostType) {
    this.innermostType = innermostType;
    return this;
  }

  /**
   * The inner most type of the exception
   * @return innermostType
   */
  @javax.annotation.Nullable
  public String getInnermostType() {
    return innermostType;
  }

  public void setInnermostType(String innermostType) {
    this.innermostType = innermostType;
  }


  public EventsExceptionInfo message(String message) {
    this.message = message;
    return this;
  }

  /**
   * The message of the exception
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public EventsExceptionInfo method(String method) {
    this.method = method;
    return this;
  }

  /**
   * The method that threw the exception
   * @return method
   */
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }

  public void setMethod(String method) {
    this.method = method;
  }


  public EventsExceptionInfo outerAssembly(String outerAssembly) {
    this.outerAssembly = outerAssembly;
    return this;
  }

  /**
   * The outer assembly of the exception
   * @return outerAssembly
   */
  @javax.annotation.Nullable
  public String getOuterAssembly() {
    return outerAssembly;
  }

  public void setOuterAssembly(String outerAssembly) {
    this.outerAssembly = outerAssembly;
  }


  public EventsExceptionInfo outerMessage(String outerMessage) {
    this.outerMessage = outerMessage;
    return this;
  }

  /**
   * The outer message of the exception
   * @return outerMessage
   */
  @javax.annotation.Nullable
  public String getOuterMessage() {
    return outerMessage;
  }

  public void setOuterMessage(String outerMessage) {
    this.outerMessage = outerMessage;
  }


  public EventsExceptionInfo outerMethod(String outerMethod) {
    this.outerMethod = outerMethod;
    return this;
  }

  /**
   * The outer method of the exception
   * @return outerMethod
   */
  @javax.annotation.Nullable
  public String getOuterMethod() {
    return outerMethod;
  }

  public void setOuterMethod(String outerMethod) {
    this.outerMethod = outerMethod;
  }


  public EventsExceptionInfo outerType(String outerType) {
    this.outerType = outerType;
    return this;
  }

  /**
   * The outer type of the exception
   * @return outerType
   */
  @javax.annotation.Nullable
  public String getOuterType() {
    return outerType;
  }

  public void setOuterType(String outerType) {
    this.outerType = outerType;
  }


  public EventsExceptionInfo problemId(String problemId) {
    this.problemId = problemId;
    return this;
  }

  /**
   * The problem ID of the exception
   * @return problemId
   */
  @javax.annotation.Nullable
  public String getProblemId() {
    return problemId;
  }

  public void setProblemId(String problemId) {
    this.problemId = problemId;
  }


  public EventsExceptionInfo severityLevel(Integer severityLevel) {
    this.severityLevel = severityLevel;
    return this;
  }

  /**
   * The severity level of the exception
   * @return severityLevel
   */
  @javax.annotation.Nullable
  public Integer getSeverityLevel() {
    return severityLevel;
  }

  public void setSeverityLevel(Integer severityLevel) {
    this.severityLevel = severityLevel;
  }


  public EventsExceptionInfo type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the exception
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventsExceptionInfo eventsExceptionInfo = (EventsExceptionInfo) o;
    return Objects.equals(this.assembly, eventsExceptionInfo.assembly) &&
        Objects.equals(this.details, eventsExceptionInfo.details) &&
        Objects.equals(this.handledAt, eventsExceptionInfo.handledAt) &&
        Objects.equals(this.innermostAssembly, eventsExceptionInfo.innermostAssembly) &&
        Objects.equals(this.innermostMessage, eventsExceptionInfo.innermostMessage) &&
        Objects.equals(this.innermostMethod, eventsExceptionInfo.innermostMethod) &&
        Objects.equals(this.innermostType, eventsExceptionInfo.innermostType) &&
        Objects.equals(this.message, eventsExceptionInfo.message) &&
        Objects.equals(this.method, eventsExceptionInfo.method) &&
        Objects.equals(this.outerAssembly, eventsExceptionInfo.outerAssembly) &&
        Objects.equals(this.outerMessage, eventsExceptionInfo.outerMessage) &&
        Objects.equals(this.outerMethod, eventsExceptionInfo.outerMethod) &&
        Objects.equals(this.outerType, eventsExceptionInfo.outerType) &&
        Objects.equals(this.problemId, eventsExceptionInfo.problemId) &&
        Objects.equals(this.severityLevel, eventsExceptionInfo.severityLevel) &&
        Objects.equals(this.type, eventsExceptionInfo.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assembly, details, handledAt, innermostAssembly, innermostMessage, innermostMethod, innermostType, message, method, outerAssembly, outerMessage, outerMethod, outerType, problemId, severityLevel, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventsExceptionInfo {\n");
    sb.append("    assembly: ").append(toIndentedString(assembly)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    handledAt: ").append(toIndentedString(handledAt)).append("\n");
    sb.append("    innermostAssembly: ").append(toIndentedString(innermostAssembly)).append("\n");
    sb.append("    innermostMessage: ").append(toIndentedString(innermostMessage)).append("\n");
    sb.append("    innermostMethod: ").append(toIndentedString(innermostMethod)).append("\n");
    sb.append("    innermostType: ").append(toIndentedString(innermostType)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    outerAssembly: ").append(toIndentedString(outerAssembly)).append("\n");
    sb.append("    outerMessage: ").append(toIndentedString(outerMessage)).append("\n");
    sb.append("    outerMethod: ").append(toIndentedString(outerMethod)).append("\n");
    sb.append("    outerType: ").append(toIndentedString(outerType)).append("\n");
    sb.append("    problemId: ").append(toIndentedString(problemId)).append("\n");
    sb.append("    severityLevel: ").append(toIndentedString(severityLevel)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assembly");
    openapiFields.add("details");
    openapiFields.add("handledAt");
    openapiFields.add("innermostAssembly");
    openapiFields.add("innermostMessage");
    openapiFields.add("innermostMethod");
    openapiFields.add("innermostType");
    openapiFields.add("message");
    openapiFields.add("method");
    openapiFields.add("outerAssembly");
    openapiFields.add("outerMessage");
    openapiFields.add("outerMethod");
    openapiFields.add("outerType");
    openapiFields.add("problemId");
    openapiFields.add("severityLevel");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventsExceptionInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventsExceptionInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventsExceptionInfo is not found in the empty JSON string", EventsExceptionInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventsExceptionInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventsExceptionInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("assembly") != null && !jsonObj.get("assembly").isJsonNull()) && !jsonObj.get("assembly").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assembly` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assembly").toString()));
      }
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        JsonArray jsonArraydetails = jsonObj.getAsJsonArray("details");
        if (jsonArraydetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("details").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `details` to be an array in the JSON string but got `%s`", jsonObj.get("details").toString()));
          }

          // validate the optional field `details` (array)
          for (int i = 0; i < jsonArraydetails.size(); i++) {
            EventsExceptionDetail.validateJsonElement(jsonArraydetails.get(i));
          };
        }
      }
      if ((jsonObj.get("handledAt") != null && !jsonObj.get("handledAt").isJsonNull()) && !jsonObj.get("handledAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `handledAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("handledAt").toString()));
      }
      if ((jsonObj.get("innermostAssembly") != null && !jsonObj.get("innermostAssembly").isJsonNull()) && !jsonObj.get("innermostAssembly").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `innermostAssembly` to be a primitive type in the JSON string but got `%s`", jsonObj.get("innermostAssembly").toString()));
      }
      if ((jsonObj.get("innermostMessage") != null && !jsonObj.get("innermostMessage").isJsonNull()) && !jsonObj.get("innermostMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `innermostMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("innermostMessage").toString()));
      }
      if ((jsonObj.get("innermostMethod") != null && !jsonObj.get("innermostMethod").isJsonNull()) && !jsonObj.get("innermostMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `innermostMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("innermostMethod").toString()));
      }
      if ((jsonObj.get("innermostType") != null && !jsonObj.get("innermostType").isJsonNull()) && !jsonObj.get("innermostType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `innermostType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("innermostType").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if ((jsonObj.get("outerAssembly") != null && !jsonObj.get("outerAssembly").isJsonNull()) && !jsonObj.get("outerAssembly").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outerAssembly` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outerAssembly").toString()));
      }
      if ((jsonObj.get("outerMessage") != null && !jsonObj.get("outerMessage").isJsonNull()) && !jsonObj.get("outerMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outerMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outerMessage").toString()));
      }
      if ((jsonObj.get("outerMethod") != null && !jsonObj.get("outerMethod").isJsonNull()) && !jsonObj.get("outerMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outerMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outerMethod").toString()));
      }
      if ((jsonObj.get("outerType") != null && !jsonObj.get("outerType").isJsonNull()) && !jsonObj.get("outerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outerType").toString()));
      }
      if ((jsonObj.get("problemId") != null && !jsonObj.get("problemId").isJsonNull()) && !jsonObj.get("problemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `problemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("problemId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventsExceptionInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventsExceptionInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventsExceptionInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventsExceptionInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<EventsExceptionInfo>() {
           @Override
           public void write(JsonWriter out, EventsExceptionInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventsExceptionInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventsExceptionInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventsExceptionInfo
   * @throws IOException if the JSON string is invalid with respect to EventsExceptionInfo
   */
  public static EventsExceptionInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventsExceptionInfo.class);
  }

  /**
   * Convert an instance of EventsExceptionInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

