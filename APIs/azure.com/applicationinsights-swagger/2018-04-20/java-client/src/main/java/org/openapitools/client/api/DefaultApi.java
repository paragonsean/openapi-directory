/*
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.EventsResults;
import org.openapitools.client.model.MetricsResult;
import org.openapitools.client.model.QueryBody;
import org.openapitools.client.model.QueryResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for eventsGet
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param eventType The type of events to query; either a standard event type (&#x60;traces&#x60;, &#x60;customEvents&#x60;, &#x60;pageViews&#x60;, &#x60;requests&#x60;, &#x60;dependencies&#x60;, &#x60;exceptions&#x60;, &#x60;availabilityResults&#x60;) or &#x60;$all&#x60; to query across all event types. (required)
     * @param eventId ID of event. (required)
     * @param apiVersion Client API version. (required)
     * @param timespan Optional. The timespan over which to retrieve events. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the Odata expression. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsGetCall(String subscriptionId, String resourceGroupName, String applicationName, String eventType, String eventId, String apiVersion, String timespan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/components/{applicationName}/events/{eventType}/{eventId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()))
            .replace("{" + "eventType" + "}", localVarApiClient.escapeString(eventType.toString()))
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiVersion", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String applicationName, String eventType, String eventId, String apiVersion, String timespan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventsGet(Async)");
        }

        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling eventsGet(Async)");
        }

        // verify the required parameter 'eventType' is set
        if (eventType == null) {
            throw new ApiException("Missing the required parameter 'eventType' when calling eventsGet(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling eventsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventsGet(Async)");
        }

        return eventsGetCall(subscriptionId, resourceGroupName, applicationName, eventType, eventId, apiVersion, timespan, _callback);

    }

    /**
     * Get an event
     * Gets the data for a single event
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param eventType The type of events to query; either a standard event type (&#x60;traces&#x60;, &#x60;customEvents&#x60;, &#x60;pageViews&#x60;, &#x60;requests&#x60;, &#x60;dependencies&#x60;, &#x60;exceptions&#x60;, &#x60;availabilityResults&#x60;) or &#x60;$all&#x60; to query across all event types. (required)
     * @param eventId ID of event. (required)
     * @param apiVersion Client API version. (required)
     * @param timespan Optional. The timespan over which to retrieve events. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the Odata expression. (optional)
     * @return EventsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public EventsResults eventsGet(String subscriptionId, String resourceGroupName, String applicationName, String eventType, String eventId, String apiVersion, String timespan) throws ApiException {
        ApiResponse<EventsResults> localVarResp = eventsGetWithHttpInfo(subscriptionId, resourceGroupName, applicationName, eventType, eventId, apiVersion, timespan);
        return localVarResp.getData();
    }

    /**
     * Get an event
     * Gets the data for a single event
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param eventType The type of events to query; either a standard event type (&#x60;traces&#x60;, &#x60;customEvents&#x60;, &#x60;pageViews&#x60;, &#x60;requests&#x60;, &#x60;dependencies&#x60;, &#x60;exceptions&#x60;, &#x60;availabilityResults&#x60;) or &#x60;$all&#x60; to query across all event types. (required)
     * @param eventId ID of event. (required)
     * @param apiVersion Client API version. (required)
     * @param timespan Optional. The timespan over which to retrieve events. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the Odata expression. (optional)
     * @return ApiResponse&lt;EventsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventsResults> eventsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String applicationName, String eventType, String eventId, String apiVersion, String timespan) throws ApiException {
        okhttp3.Call localVarCall = eventsGetValidateBeforeCall(subscriptionId, resourceGroupName, applicationName, eventType, eventId, apiVersion, timespan, null);
        Type localVarReturnType = new TypeToken<EventsResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get an event (asynchronously)
     * Gets the data for a single event
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param eventType The type of events to query; either a standard event type (&#x60;traces&#x60;, &#x60;customEvents&#x60;, &#x60;pageViews&#x60;, &#x60;requests&#x60;, &#x60;dependencies&#x60;, &#x60;exceptions&#x60;, &#x60;availabilityResults&#x60;) or &#x60;$all&#x60; to query across all event types. (required)
     * @param eventId ID of event. (required)
     * @param apiVersion Client API version. (required)
     * @param timespan Optional. The timespan over which to retrieve events. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the Odata expression. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsGetAsync(String subscriptionId, String resourceGroupName, String applicationName, String eventType, String eventId, String apiVersion, String timespan, final ApiCallback<EventsResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsGetValidateBeforeCall(subscriptionId, resourceGroupName, applicationName, eventType, eventId, apiVersion, timespan, _callback);
        Type localVarReturnType = new TypeToken<EventsResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventsGetByType
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param eventType The type of events to query; either a standard event type (&#x60;traces&#x60;, &#x60;customEvents&#x60;, &#x60;pageViews&#x60;, &#x60;requests&#x60;, &#x60;dependencies&#x60;, &#x60;exceptions&#x60;, &#x60;availabilityResults&#x60;) or &#x60;$all&#x60; to query across all event types. (required)
     * @param apiVersion Client API version. (required)
     * @param timespan Optional. The timespan over which to retrieve events. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the Odata expression. (optional)
     * @param $filter An expression used to filter the returned events (optional)
     * @param $search A free-text search expression to match for whether a particular event should be returned (optional)
     * @param $orderby A comma-separated list of properties with \\\&quot;asc\\\&quot; (the default) or \\\&quot;desc\\\&quot; to control the order of returned events (optional)
     * @param $select Limits the properties to just those requested on each returned event (optional)
     * @param $skip The number of items to skip over before returning events (optional)
     * @param $top The number of events to return (optional)
     * @param $format Format for the returned events (optional)
     * @param $count Request a count of matching items included with the returned events (optional)
     * @param $apply An expression used for aggregation over returned events (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsGetByTypeCall(String subscriptionId, String resourceGroupName, String applicationName, String eventType, String apiVersion, String timespan, String $filter, String $search, String $orderby, String $select, Integer $skip, Integer $top, String $format, Boolean $count, String $apply, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/components/{applicationName}/events/{eventType}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()))
            .replace("{" + "eventType" + "}", localVarApiClient.escapeString(eventType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$search", $search));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skip", $skip));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$format", $format));
        }

        if ($count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$count", $count));
        }

        if ($apply != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$apply", $apply));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiVersion", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsGetByTypeValidateBeforeCall(String subscriptionId, String resourceGroupName, String applicationName, String eventType, String apiVersion, String timespan, String $filter, String $search, String $orderby, String $select, Integer $skip, Integer $top, String $format, Boolean $count, String $apply, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventsGetByType(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventsGetByType(Async)");
        }

        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling eventsGetByType(Async)");
        }

        // verify the required parameter 'eventType' is set
        if (eventType == null) {
            throw new ApiException("Missing the required parameter 'eventType' when calling eventsGetByType(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventsGetByType(Async)");
        }

        return eventsGetByTypeCall(subscriptionId, resourceGroupName, applicationName, eventType, apiVersion, timespan, $filter, $search, $orderby, $select, $skip, $top, $format, $count, $apply, _callback);

    }

    /**
     * Execute OData query
     * Executes an OData query for events
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param eventType The type of events to query; either a standard event type (&#x60;traces&#x60;, &#x60;customEvents&#x60;, &#x60;pageViews&#x60;, &#x60;requests&#x60;, &#x60;dependencies&#x60;, &#x60;exceptions&#x60;, &#x60;availabilityResults&#x60;) or &#x60;$all&#x60; to query across all event types. (required)
     * @param apiVersion Client API version. (required)
     * @param timespan Optional. The timespan over which to retrieve events. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the Odata expression. (optional)
     * @param $filter An expression used to filter the returned events (optional)
     * @param $search A free-text search expression to match for whether a particular event should be returned (optional)
     * @param $orderby A comma-separated list of properties with \\\&quot;asc\\\&quot; (the default) or \\\&quot;desc\\\&quot; to control the order of returned events (optional)
     * @param $select Limits the properties to just those requested on each returned event (optional)
     * @param $skip The number of items to skip over before returning events (optional)
     * @param $top The number of events to return (optional)
     * @param $format Format for the returned events (optional)
     * @param $count Request a count of matching items included with the returned events (optional)
     * @param $apply An expression used for aggregation over returned events (optional)
     * @return EventsResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public EventsResults eventsGetByType(String subscriptionId, String resourceGroupName, String applicationName, String eventType, String apiVersion, String timespan, String $filter, String $search, String $orderby, String $select, Integer $skip, Integer $top, String $format, Boolean $count, String $apply) throws ApiException {
        ApiResponse<EventsResults> localVarResp = eventsGetByTypeWithHttpInfo(subscriptionId, resourceGroupName, applicationName, eventType, apiVersion, timespan, $filter, $search, $orderby, $select, $skip, $top, $format, $count, $apply);
        return localVarResp.getData();
    }

    /**
     * Execute OData query
     * Executes an OData query for events
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param eventType The type of events to query; either a standard event type (&#x60;traces&#x60;, &#x60;customEvents&#x60;, &#x60;pageViews&#x60;, &#x60;requests&#x60;, &#x60;dependencies&#x60;, &#x60;exceptions&#x60;, &#x60;availabilityResults&#x60;) or &#x60;$all&#x60; to query across all event types. (required)
     * @param apiVersion Client API version. (required)
     * @param timespan Optional. The timespan over which to retrieve events. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the Odata expression. (optional)
     * @param $filter An expression used to filter the returned events (optional)
     * @param $search A free-text search expression to match for whether a particular event should be returned (optional)
     * @param $orderby A comma-separated list of properties with \\\&quot;asc\\\&quot; (the default) or \\\&quot;desc\\\&quot; to control the order of returned events (optional)
     * @param $select Limits the properties to just those requested on each returned event (optional)
     * @param $skip The number of items to skip over before returning events (optional)
     * @param $top The number of events to return (optional)
     * @param $format Format for the returned events (optional)
     * @param $count Request a count of matching items included with the returned events (optional)
     * @param $apply An expression used for aggregation over returned events (optional)
     * @return ApiResponse&lt;EventsResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventsResults> eventsGetByTypeWithHttpInfo(String subscriptionId, String resourceGroupName, String applicationName, String eventType, String apiVersion, String timespan, String $filter, String $search, String $orderby, String $select, Integer $skip, Integer $top, String $format, Boolean $count, String $apply) throws ApiException {
        okhttp3.Call localVarCall = eventsGetByTypeValidateBeforeCall(subscriptionId, resourceGroupName, applicationName, eventType, apiVersion, timespan, $filter, $search, $orderby, $select, $skip, $top, $format, $count, $apply, null);
        Type localVarReturnType = new TypeToken<EventsResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute OData query (asynchronously)
     * Executes an OData query for events
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param eventType The type of events to query; either a standard event type (&#x60;traces&#x60;, &#x60;customEvents&#x60;, &#x60;pageViews&#x60;, &#x60;requests&#x60;, &#x60;dependencies&#x60;, &#x60;exceptions&#x60;, &#x60;availabilityResults&#x60;) or &#x60;$all&#x60; to query across all event types. (required)
     * @param apiVersion Client API version. (required)
     * @param timespan Optional. The timespan over which to retrieve events. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the Odata expression. (optional)
     * @param $filter An expression used to filter the returned events (optional)
     * @param $search A free-text search expression to match for whether a particular event should be returned (optional)
     * @param $orderby A comma-separated list of properties with \\\&quot;asc\\\&quot; (the default) or \\\&quot;desc\\\&quot; to control the order of returned events (optional)
     * @param $select Limits the properties to just those requested on each returned event (optional)
     * @param $skip The number of items to skip over before returning events (optional)
     * @param $top The number of events to return (optional)
     * @param $format Format for the returned events (optional)
     * @param $count Request a count of matching items included with the returned events (optional)
     * @param $apply An expression used for aggregation over returned events (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsGetByTypeAsync(String subscriptionId, String resourceGroupName, String applicationName, String eventType, String apiVersion, String timespan, String $filter, String $search, String $orderby, String $select, Integer $skip, Integer $top, String $format, Boolean $count, String $apply, final ApiCallback<EventsResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsGetByTypeValidateBeforeCall(subscriptionId, resourceGroupName, applicationName, eventType, apiVersion, timespan, $filter, $search, $orderby, $select, $skip, $top, $format, $count, $apply, _callback);
        Type localVarReturnType = new TypeToken<EventsResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventsGetOdataMetadata
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsGetOdataMetadataCall(String subscriptionId, String resourceGroupName, String applicationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/components/{applicationName}/events/$metadata"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiVersion", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/xml;charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsGetOdataMetadataValidateBeforeCall(String subscriptionId, String resourceGroupName, String applicationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling eventsGetOdataMetadata(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling eventsGetOdataMetadata(Async)");
        }

        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling eventsGetOdataMetadata(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling eventsGetOdataMetadata(Async)");
        }

        return eventsGetOdataMetadataCall(subscriptionId, resourceGroupName, applicationName, apiVersion, _callback);

    }

    /**
     * Get OData metadata
     * Gets OData EDMX metadata describing the event data model
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param apiVersion Client API version. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public Object eventsGetOdataMetadata(String subscriptionId, String resourceGroupName, String applicationName, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = eventsGetOdataMetadataWithHttpInfo(subscriptionId, resourceGroupName, applicationName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get OData metadata
     * Gets OData EDMX metadata describing the event data model
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> eventsGetOdataMetadataWithHttpInfo(String subscriptionId, String resourceGroupName, String applicationName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = eventsGetOdataMetadataValidateBeforeCall(subscriptionId, resourceGroupName, applicationName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get OData metadata (asynchronously)
     * Gets OData EDMX metadata describing the event data model
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsGetOdataMetadataAsync(String subscriptionId, String resourceGroupName, String applicationName, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsGetOdataMetadataValidateBeforeCall(subscriptionId, resourceGroupName, applicationName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metricsGet
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param metricId ID of the metric. This is either a standard AI metric, or an application-specific custom metric. (required)
     * @param apiVersion Client API version. (required)
     * @param timespan The timespan over which to retrieve metric values. This is an ISO8601 time period value. If timespan is omitted, a default time range of &#x60;PT12H&#x60; (\&quot;last 12 hours\&quot;) is used. The actual timespan that is queried may be adjusted by the server based. In all cases, the actual time span used for the query is included in the response. (optional)
     * @param interval The time interval to use when retrieving metric values. This is an ISO8601 duration. If interval is omitted, the metric value is aggregated across the entire timespan. If interval is supplied, the server may adjust the interval to a more appropriate size based on the timespan used for the query. In all cases, the actual interval used for the query is included in the response. (optional)
     * @param aggregation The aggregation to use when computing the metric values. To retrieve more than one aggregation at a time, separate them with a comma. If no aggregation is specified, then the default aggregation for the metric is used. (optional)
     * @param segment The name of the dimension to segment the metric values by. This dimension must be applicable to the metric you are retrieving. To segment by more than one dimension at a time, separate them with a comma (,). In this case, the metric data will be segmented in the order the dimensions are listed in the parameter. (optional)
     * @param top The number of segments to return.  This value is only valid when segment is specified. (optional)
     * @param orderby The aggregation function and direction to sort the segments by.  This value is only valid when segment is specified. (optional)
     * @param filter An expression used to filter the results.  This value should be a valid OData filter expression where the keys of each clause should be applicable dimensions for the metric you are retrieving. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metricsGetCall(String subscriptionId, String resourceGroupName, String applicationName, String metricId, String apiVersion, String timespan, String interval, List<String> aggregation, List<String> segment, Integer top, String orderby, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/components/{applicationName}/metrics/{metricId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()))
            .replace("{" + "metricId" + "}", localVarApiClient.escapeString(metricId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (aggregation != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "aggregation", aggregation));
        }

        if (segment != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "segment", segment));
        }

        if (top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("top", top));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiVersion", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metricsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String applicationName, String metricId, String apiVersion, String timespan, String interval, List<String> aggregation, List<String> segment, Integer top, String orderby, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling metricsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling metricsGet(Async)");
        }

        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling metricsGet(Async)");
        }

        // verify the required parameter 'metricId' is set
        if (metricId == null) {
            throw new ApiException("Missing the required parameter 'metricId' when calling metricsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling metricsGet(Async)");
        }

        return metricsGetCall(subscriptionId, resourceGroupName, applicationName, metricId, apiVersion, timespan, interval, aggregation, segment, top, orderby, filter, _callback);

    }

    /**
     * Retrieve metric data
     * Gets metric values for a single metric
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param metricId ID of the metric. This is either a standard AI metric, or an application-specific custom metric. (required)
     * @param apiVersion Client API version. (required)
     * @param timespan The timespan over which to retrieve metric values. This is an ISO8601 time period value. If timespan is omitted, a default time range of &#x60;PT12H&#x60; (\&quot;last 12 hours\&quot;) is used. The actual timespan that is queried may be adjusted by the server based. In all cases, the actual time span used for the query is included in the response. (optional)
     * @param interval The time interval to use when retrieving metric values. This is an ISO8601 duration. If interval is omitted, the metric value is aggregated across the entire timespan. If interval is supplied, the server may adjust the interval to a more appropriate size based on the timespan used for the query. In all cases, the actual interval used for the query is included in the response. (optional)
     * @param aggregation The aggregation to use when computing the metric values. To retrieve more than one aggregation at a time, separate them with a comma. If no aggregation is specified, then the default aggregation for the metric is used. (optional)
     * @param segment The name of the dimension to segment the metric values by. This dimension must be applicable to the metric you are retrieving. To segment by more than one dimension at a time, separate them with a comma (,). In this case, the metric data will be segmented in the order the dimensions are listed in the parameter. (optional)
     * @param top The number of segments to return.  This value is only valid when segment is specified. (optional)
     * @param orderby The aggregation function and direction to sort the segments by.  This value is only valid when segment is specified. (optional)
     * @param filter An expression used to filter the results.  This value should be a valid OData filter expression where the keys of each clause should be applicable dimensions for the metric you are retrieving. (optional)
     * @return MetricsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public MetricsResult metricsGet(String subscriptionId, String resourceGroupName, String applicationName, String metricId, String apiVersion, String timespan, String interval, List<String> aggregation, List<String> segment, Integer top, String orderby, String filter) throws ApiException {
        ApiResponse<MetricsResult> localVarResp = metricsGetWithHttpInfo(subscriptionId, resourceGroupName, applicationName, metricId, apiVersion, timespan, interval, aggregation, segment, top, orderby, filter);
        return localVarResp.getData();
    }

    /**
     * Retrieve metric data
     * Gets metric values for a single metric
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param metricId ID of the metric. This is either a standard AI metric, or an application-specific custom metric. (required)
     * @param apiVersion Client API version. (required)
     * @param timespan The timespan over which to retrieve metric values. This is an ISO8601 time period value. If timespan is omitted, a default time range of &#x60;PT12H&#x60; (\&quot;last 12 hours\&quot;) is used. The actual timespan that is queried may be adjusted by the server based. In all cases, the actual time span used for the query is included in the response. (optional)
     * @param interval The time interval to use when retrieving metric values. This is an ISO8601 duration. If interval is omitted, the metric value is aggregated across the entire timespan. If interval is supplied, the server may adjust the interval to a more appropriate size based on the timespan used for the query. In all cases, the actual interval used for the query is included in the response. (optional)
     * @param aggregation The aggregation to use when computing the metric values. To retrieve more than one aggregation at a time, separate them with a comma. If no aggregation is specified, then the default aggregation for the metric is used. (optional)
     * @param segment The name of the dimension to segment the metric values by. This dimension must be applicable to the metric you are retrieving. To segment by more than one dimension at a time, separate them with a comma (,). In this case, the metric data will be segmented in the order the dimensions are listed in the parameter. (optional)
     * @param top The number of segments to return.  This value is only valid when segment is specified. (optional)
     * @param orderby The aggregation function and direction to sort the segments by.  This value is only valid when segment is specified. (optional)
     * @param filter An expression used to filter the results.  This value should be a valid OData filter expression where the keys of each clause should be applicable dimensions for the metric you are retrieving. (optional)
     * @return ApiResponse&lt;MetricsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MetricsResult> metricsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String applicationName, String metricId, String apiVersion, String timespan, String interval, List<String> aggregation, List<String> segment, Integer top, String orderby, String filter) throws ApiException {
        okhttp3.Call localVarCall = metricsGetValidateBeforeCall(subscriptionId, resourceGroupName, applicationName, metricId, apiVersion, timespan, interval, aggregation, segment, top, orderby, filter, null);
        Type localVarReturnType = new TypeToken<MetricsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve metric data (asynchronously)
     * Gets metric values for a single metric
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param metricId ID of the metric. This is either a standard AI metric, or an application-specific custom metric. (required)
     * @param apiVersion Client API version. (required)
     * @param timespan The timespan over which to retrieve metric values. This is an ISO8601 time period value. If timespan is omitted, a default time range of &#x60;PT12H&#x60; (\&quot;last 12 hours\&quot;) is used. The actual timespan that is queried may be adjusted by the server based. In all cases, the actual time span used for the query is included in the response. (optional)
     * @param interval The time interval to use when retrieving metric values. This is an ISO8601 duration. If interval is omitted, the metric value is aggregated across the entire timespan. If interval is supplied, the server may adjust the interval to a more appropriate size based on the timespan used for the query. In all cases, the actual interval used for the query is included in the response. (optional)
     * @param aggregation The aggregation to use when computing the metric values. To retrieve more than one aggregation at a time, separate them with a comma. If no aggregation is specified, then the default aggregation for the metric is used. (optional)
     * @param segment The name of the dimension to segment the metric values by. This dimension must be applicable to the metric you are retrieving. To segment by more than one dimension at a time, separate them with a comma (,). In this case, the metric data will be segmented in the order the dimensions are listed in the parameter. (optional)
     * @param top The number of segments to return.  This value is only valid when segment is specified. (optional)
     * @param orderby The aggregation function and direction to sort the segments by.  This value is only valid when segment is specified. (optional)
     * @param filter An expression used to filter the results.  This value should be a valid OData filter expression where the keys of each clause should be applicable dimensions for the metric you are retrieving. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metricsGetAsync(String subscriptionId, String resourceGroupName, String applicationName, String metricId, String apiVersion, String timespan, String interval, List<String> aggregation, List<String> segment, Integer top, String orderby, String filter, final ApiCallback<MetricsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = metricsGetValidateBeforeCall(subscriptionId, resourceGroupName, applicationName, metricId, apiVersion, timespan, interval, aggregation, segment, top, orderby, filter, _callback);
        Type localVarReturnType = new TypeToken<MetricsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metricsGetMetadata
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful responses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metricsGetMetadataCall(String subscriptionId, String resourceGroupName, String applicationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/components/{applicationName}/metrics/metadata"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiVersion", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metricsGetMetadataValidateBeforeCall(String subscriptionId, String resourceGroupName, String applicationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling metricsGetMetadata(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling metricsGetMetadata(Async)");
        }

        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling metricsGetMetadata(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling metricsGetMetadata(Async)");
        }

        return metricsGetMetadataCall(subscriptionId, resourceGroupName, applicationName, apiVersion, _callback);

    }

    /**
     * Retrieve metric metadata
     * Gets metadata describing the available metrics
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param apiVersion Client API version. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful responses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public Object metricsGetMetadata(String subscriptionId, String resourceGroupName, String applicationName, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = metricsGetMetadataWithHttpInfo(subscriptionId, resourceGroupName, applicationName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Retrieve metric metadata
     * Gets metadata describing the available metrics
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful responses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> metricsGetMetadataWithHttpInfo(String subscriptionId, String resourceGroupName, String applicationName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = metricsGetMetadataValidateBeforeCall(subscriptionId, resourceGroupName, applicationName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve metric metadata (asynchronously)
     * Gets metadata describing the available metrics
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful responses </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metricsGetMetadataAsync(String subscriptionId, String resourceGroupName, String applicationName, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = metricsGetMetadataValidateBeforeCall(subscriptionId, resourceGroupName, applicationName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryExecute
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param apiVersion Client API version. (required)
     * @param body The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryExecuteCall(String subscriptionId, String resourceGroupName, String applicationName, String apiVersion, QueryBody body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/components/{applicationName}/query"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiVersion", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryExecuteValidateBeforeCall(String subscriptionId, String resourceGroupName, String applicationName, String apiVersion, QueryBody body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling queryExecute(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling queryExecute(Async)");
        }

        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling queryExecute(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queryExecute(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling queryExecute(Async)");
        }

        return queryExecuteCall(subscriptionId, resourceGroupName, applicationName, apiVersion, body, _callback);

    }

    /**
     * Execute an Analytics query
     * Executes an Analytics query for data. [Here](https://dev.applicationinsights.io/documentation/Using-the-API/Query) is an example for using POST with an Analytics query.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param apiVersion Client API version. (required)
     * @param body The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/) (required)
     * @return QueryResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public QueryResults queryExecute(String subscriptionId, String resourceGroupName, String applicationName, String apiVersion, QueryBody body) throws ApiException {
        ApiResponse<QueryResults> localVarResp = queryExecuteWithHttpInfo(subscriptionId, resourceGroupName, applicationName, apiVersion, body);
        return localVarResp.getData();
    }

    /**
     * Execute an Analytics query
     * Executes an Analytics query for data. [Here](https://dev.applicationinsights.io/documentation/Using-the-API/Query) is an example for using POST with an Analytics query.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param apiVersion Client API version. (required)
     * @param body The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/) (required)
     * @return ApiResponse&lt;QueryResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryResults> queryExecuteWithHttpInfo(String subscriptionId, String resourceGroupName, String applicationName, String apiVersion, QueryBody body) throws ApiException {
        okhttp3.Call localVarCall = queryExecuteValidateBeforeCall(subscriptionId, resourceGroupName, applicationName, apiVersion, body, null);
        Type localVarReturnType = new TypeToken<QueryResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute an Analytics query (asynchronously)
     * Executes an Analytics query for data. [Here](https://dev.applicationinsights.io/documentation/Using-the-API/Query) is an example for using POST with an Analytics query.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param apiVersion Client API version. (required)
     * @param body The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryExecuteAsync(String subscriptionId, String resourceGroupName, String applicationName, String apiVersion, QueryBody body, final ApiCallback<QueryResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryExecuteValidateBeforeCall(subscriptionId, resourceGroupName, applicationName, apiVersion, body, _callback);
        Type localVarReturnType = new TypeToken<QueryResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for queryGet
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param query The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/) (required)
     * @param apiVersion Client API version. (required)
     * @param timespan Optional. The timespan over which to query data. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the query expression. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryGetCall(String subscriptionId, String resourceGroupName, String applicationName, String query, String apiVersion, String timespan, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Insights/components/{applicationName}/query"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "applicationName" + "}", localVarApiClient.escapeString(applicationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (timespan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timespan", timespan));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiVersion", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String applicationName, String query, String apiVersion, String timespan, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling queryGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling queryGet(Async)");
        }

        // verify the required parameter 'applicationName' is set
        if (applicationName == null) {
            throw new ApiException("Missing the required parameter 'applicationName' when calling queryGet(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling queryGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling queryGet(Async)");
        }

        return queryGetCall(subscriptionId, resourceGroupName, applicationName, query, apiVersion, timespan, _callback);

    }

    /**
     * Execute an Analytics query
     * Executes an Analytics query for data
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param query The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/) (required)
     * @param apiVersion Client API version. (required)
     * @param timespan Optional. The timespan over which to query data. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the query expression. (optional)
     * @return QueryResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public QueryResults queryGet(String subscriptionId, String resourceGroupName, String applicationName, String query, String apiVersion, String timespan) throws ApiException {
        ApiResponse<QueryResults> localVarResp = queryGetWithHttpInfo(subscriptionId, resourceGroupName, applicationName, query, apiVersion, timespan);
        return localVarResp.getData();
    }

    /**
     * Execute an Analytics query
     * Executes an Analytics query for data
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param query The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/) (required)
     * @param apiVersion Client API version. (required)
     * @param timespan Optional. The timespan over which to query data. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the query expression. (optional)
     * @return ApiResponse&lt;QueryResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueryResults> queryGetWithHttpInfo(String subscriptionId, String resourceGroupName, String applicationName, String query, String apiVersion, String timespan) throws ApiException {
        okhttp3.Call localVarCall = queryGetValidateBeforeCall(subscriptionId, resourceGroupName, applicationName, query, apiVersion, timespan, null);
        Type localVarReturnType = new TypeToken<QueryResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Execute an Analytics query (asynchronously)
     * Executes an Analytics query for data
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group to get. The name is case insensitive. (required)
     * @param applicationName Name of the Application Insights application. (required)
     * @param query The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/) (required)
     * @param apiVersion Client API version. (required)
     * @param timespan Optional. The timespan over which to query data. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the query expression. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call queryGetAsync(String subscriptionId, String resourceGroupName, String applicationName, String query, String apiVersion, String timespan, final ApiCallback<QueryResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = queryGetValidateBeforeCall(subscriptionId, resourceGroupName, applicationName, query, apiVersion, timespan, _callback);
        Type localVarReturnType = new TypeToken<QueryResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
