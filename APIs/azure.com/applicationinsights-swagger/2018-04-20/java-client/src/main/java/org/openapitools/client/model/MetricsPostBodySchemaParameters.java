/*
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MetricId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The parameters for a single metrics query
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:24:10.535800-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricsPostBodySchemaParameters {
  /**
   * Gets or Sets aggregation
   */
  @JsonAdapter(AggregationEnum.Adapter.class)
  public enum AggregationEnum {
    MIN("min"),
    
    MAX("max"),
    
    AVG("avg"),
    
    SUM("sum"),
    
    COUNT("count"),
    
    UNIQUE("unique");

    private String value;

    AggregationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AggregationEnum fromValue(String value) {
      for (AggregationEnum b : AggregationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AggregationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AggregationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AggregationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AggregationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AggregationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AGGREGATION = "aggregation";
  @SerializedName(SERIALIZED_NAME_AGGREGATION)
  private List<AggregationEnum> aggregation = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private String interval;

  public static final String SERIALIZED_NAME_METRIC_ID = "metricId";
  @SerializedName(SERIALIZED_NAME_METRIC_ID)
  private MetricId metricId;

  public static final String SERIALIZED_NAME_ORDERBY = "orderby";
  @SerializedName(SERIALIZED_NAME_ORDERBY)
  private String orderby;

  /**
   * Gets or Sets segment
   */
  @JsonAdapter(SegmentEnum.Adapter.class)
  public enum SegmentEnum {
    APPLICATION_BUILD("applicationBuild"),
    
    APPLICATION_VERSION("applicationVersion"),
    
    AUTHENTICATED_OR_ANONYMOUS_TRAFFIC("authenticatedOrAnonymousTraffic"),
    
    BROWSER("browser"),
    
    BROWSER_VERSION("browserVersion"),
    
    CITY("city"),
    
    CLOUD_ROLE_NAME("cloudRoleName"),
    
    CLOUD_SERVICE_NAME("cloudServiceName"),
    
    CONTINENT("continent"),
    
    COUNTRY_OR_REGION("countryOrRegion"),
    
    DEPLOYMENT_ID("deploymentId"),
    
    DEPLOYMENT_UNIT("deploymentUnit"),
    
    DEVICE_TYPE("deviceType"),
    
    ENVIRONMENT("environment"),
    
    HOSTING_LOCATION("hostingLocation"),
    
    INSTANCE_NAME("instanceName");

    private String value;

    SegmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SegmentEnum fromValue(String value) {
      for (SegmentEnum b : SegmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SegmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SegmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SegmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SegmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SegmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEGMENT = "segment";
  @SerializedName(SERIALIZED_NAME_SEGMENT)
  private List<SegmentEnum> segment = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMESPAN = "timespan";
  @SerializedName(SERIALIZED_NAME_TIMESPAN)
  private String timespan;

  public static final String SERIALIZED_NAME_TOP = "top";
  @SerializedName(SERIALIZED_NAME_TOP)
  private Integer top;

  public MetricsPostBodySchemaParameters() {
  }

  public MetricsPostBodySchemaParameters aggregation(List<AggregationEnum> aggregation) {
    this.aggregation = aggregation;
    return this;
  }

  public MetricsPostBodySchemaParameters addAggregationItem(AggregationEnum aggregationItem) {
    if (this.aggregation == null) {
      this.aggregation = new ArrayList<>();
    }
    this.aggregation.add(aggregationItem);
    return this;
  }

  /**
   * The aggregation to use when computing the metric values. To retrieve more than one aggregation at a time, separate them with a comma. If no aggregation is specified, then the default aggregation for the metric is used.
   * @return aggregation
   */
  @javax.annotation.Nullable
  public List<AggregationEnum> getAggregation() {
    return aggregation;
  }

  public void setAggregation(List<AggregationEnum> aggregation) {
    this.aggregation = aggregation;
  }


  public MetricsPostBodySchemaParameters filter(String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * An expression used to filter the results.  This value should be a valid OData filter expression where the keys of each clause should be applicable dimensions for the metric you are retrieving.
   * @return filter
   */
  @javax.annotation.Nullable
  public String getFilter() {
    return filter;
  }

  public void setFilter(String filter) {
    this.filter = filter;
  }


  public MetricsPostBodySchemaParameters interval(String interval) {
    this.interval = interval;
    return this;
  }

  /**
   * The time interval to use when retrieving metric values. This is an ISO8601 duration. If interval is omitted, the metric value is aggregated across the entire timespan. If interval is supplied, the server may adjust the interval to a more appropriate size based on the timespan used for the query. In all cases, the actual interval used for the query is included in the response.
   * @return interval
   */
  @javax.annotation.Nullable
  public String getInterval() {
    return interval;
  }

  public void setInterval(String interval) {
    this.interval = interval;
  }


  public MetricsPostBodySchemaParameters metricId(MetricId metricId) {
    this.metricId = metricId;
    return this;
  }

  /**
   * Get metricId
   * @return metricId
   */
  @javax.annotation.Nonnull
  public MetricId getMetricId() {
    return metricId;
  }

  public void setMetricId(MetricId metricId) {
    this.metricId = metricId;
  }


  public MetricsPostBodySchemaParameters orderby(String orderby) {
    this.orderby = orderby;
    return this;
  }

  /**
   * The aggregation function and direction to sort the segments by.  This value is only valid when segment is specified.
   * @return orderby
   */
  @javax.annotation.Nullable
  public String getOrderby() {
    return orderby;
  }

  public void setOrderby(String orderby) {
    this.orderby = orderby;
  }


  public MetricsPostBodySchemaParameters segment(List<SegmentEnum> segment) {
    this.segment = segment;
    return this;
  }

  public MetricsPostBodySchemaParameters addSegmentItem(SegmentEnum segmentItem) {
    if (this.segment == null) {
      this.segment = new ArrayList<>();
    }
    this.segment.add(segmentItem);
    return this;
  }

  /**
   * The name of the dimension to segment the metric values by. This dimension must be applicable to the metric you are retrieving. To segment by more than one dimension at a time, separate them with a comma (,). In this case, the metric data will be segmented in the order the dimensions are listed in the parameter.
   * @return segment
   */
  @javax.annotation.Nullable
  public List<SegmentEnum> getSegment() {
    return segment;
  }

  public void setSegment(List<SegmentEnum> segment) {
    this.segment = segment;
  }


  public MetricsPostBodySchemaParameters timespan(String timespan) {
    this.timespan = timespan;
    return this;
  }

  /**
   * The timespan over which to retrieve metric values. This is an ISO8601 time period value. If timespan is omitted, a default time range of &#x60;PT12H&#x60; (\&quot;last 12 hours\&quot;) is used. The actual timespan that is queried may be adjusted by the server based. In all cases, the actual time span used for the query is included in the response.
   * @return timespan
   */
  @javax.annotation.Nullable
  public String getTimespan() {
    return timespan;
  }

  public void setTimespan(String timespan) {
    this.timespan = timespan;
  }


  public MetricsPostBodySchemaParameters top(Integer top) {
    this.top = top;
    return this;
  }

  /**
   * The number of segments to return.  This value is only valid when segment is specified.
   * @return top
   */
  @javax.annotation.Nullable
  public Integer getTop() {
    return top;
  }

  public void setTop(Integer top) {
    this.top = top;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricsPostBodySchemaParameters metricsPostBodySchemaParameters = (MetricsPostBodySchemaParameters) o;
    return Objects.equals(this.aggregation, metricsPostBodySchemaParameters.aggregation) &&
        Objects.equals(this.filter, metricsPostBodySchemaParameters.filter) &&
        Objects.equals(this.interval, metricsPostBodySchemaParameters.interval) &&
        Objects.equals(this.metricId, metricsPostBodySchemaParameters.metricId) &&
        Objects.equals(this.orderby, metricsPostBodySchemaParameters.orderby) &&
        Objects.equals(this.segment, metricsPostBodySchemaParameters.segment) &&
        Objects.equals(this.timespan, metricsPostBodySchemaParameters.timespan) &&
        Objects.equals(this.top, metricsPostBodySchemaParameters.top);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregation, filter, interval, metricId, orderby, segment, timespan, top);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricsPostBodySchemaParameters {\n");
    sb.append("    aggregation: ").append(toIndentedString(aggregation)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    metricId: ").append(toIndentedString(metricId)).append("\n");
    sb.append("    orderby: ").append(toIndentedString(orderby)).append("\n");
    sb.append("    segment: ").append(toIndentedString(segment)).append("\n");
    sb.append("    timespan: ").append(toIndentedString(timespan)).append("\n");
    sb.append("    top: ").append(toIndentedString(top)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregation");
    openapiFields.add("filter");
    openapiFields.add("interval");
    openapiFields.add("metricId");
    openapiFields.add("orderby");
    openapiFields.add("segment");
    openapiFields.add("timespan");
    openapiFields.add("top");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("metricId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricsPostBodySchemaParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricsPostBodySchemaParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricsPostBodySchemaParameters is not found in the empty JSON string", MetricsPostBodySchemaParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricsPostBodySchemaParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricsPostBodySchemaParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MetricsPostBodySchemaParameters.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("aggregation") != null && !jsonObj.get("aggregation").isJsonNull() && !jsonObj.get("aggregation").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregation` to be an array in the JSON string but got `%s`", jsonObj.get("aggregation").toString()));
      }
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      if ((jsonObj.get("interval") != null && !jsonObj.get("interval").isJsonNull()) && !jsonObj.get("interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval").toString()));
      }
      // validate the required field `metricId`
      MetricId.validateJsonElement(jsonObj.get("metricId"));
      if ((jsonObj.get("orderby") != null && !jsonObj.get("orderby").isJsonNull()) && !jsonObj.get("orderby").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderby` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderby").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("segment") != null && !jsonObj.get("segment").isJsonNull() && !jsonObj.get("segment").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `segment` to be an array in the JSON string but got `%s`", jsonObj.get("segment").toString()));
      }
      if ((jsonObj.get("timespan") != null && !jsonObj.get("timespan").isJsonNull()) && !jsonObj.get("timespan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timespan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timespan").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricsPostBodySchemaParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricsPostBodySchemaParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricsPostBodySchemaParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricsPostBodySchemaParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricsPostBodySchemaParameters>() {
           @Override
           public void write(JsonWriter out, MetricsPostBodySchemaParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricsPostBodySchemaParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricsPostBodySchemaParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricsPostBodySchemaParameters
   * @throws IOException if the JSON string is invalid with respect to MetricsPostBodySchemaParameters
   */
  public static MetricsPostBodySchemaParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricsPostBodySchemaParameters.class);
  }

  /**
   * Convert an instance of MetricsPostBodySchemaParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

