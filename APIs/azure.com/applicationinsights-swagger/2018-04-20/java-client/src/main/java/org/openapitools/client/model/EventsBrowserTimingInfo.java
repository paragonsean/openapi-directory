/*
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The browser timing information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:24:10.535800-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventsBrowserTimingInfo {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK_DURATION = "networkDuration";
  @SerializedName(SERIALIZED_NAME_NETWORK_DURATION)
  private Long networkDuration;

  public static final String SERIALIZED_NAME_PERFORMANCE_BUCKET = "performanceBucket";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_BUCKET)
  private String performanceBucket;

  public static final String SERIALIZED_NAME_PROCESSING_DURATION = "processingDuration";
  @SerializedName(SERIALIZED_NAME_PROCESSING_DURATION)
  private Long processingDuration;

  public static final String SERIALIZED_NAME_RECEIVE_DURATION = "receiveDuration";
  @SerializedName(SERIALIZED_NAME_RECEIVE_DURATION)
  private Long receiveDuration;

  public static final String SERIALIZED_NAME_SEND_DURATION = "sendDuration";
  @SerializedName(SERIALIZED_NAME_SEND_DURATION)
  private Long sendDuration;

  public static final String SERIALIZED_NAME_TOTAL_DURATION = "totalDuration";
  @SerializedName(SERIALIZED_NAME_TOTAL_DURATION)
  private Long totalDuration;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_URL_HOST = "urlHost";
  @SerializedName(SERIALIZED_NAME_URL_HOST)
  private String urlHost;

  public static final String SERIALIZED_NAME_URL_PATH = "urlPath";
  @SerializedName(SERIALIZED_NAME_URL_PATH)
  private String urlPath;

  public EventsBrowserTimingInfo() {
  }

  public EventsBrowserTimingInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the page
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EventsBrowserTimingInfo networkDuration(Long networkDuration) {
    this.networkDuration = networkDuration;
    return this;
  }

  /**
   * The network duration of the load
   * @return networkDuration
   */
  @javax.annotation.Nullable
  public Long getNetworkDuration() {
    return networkDuration;
  }

  public void setNetworkDuration(Long networkDuration) {
    this.networkDuration = networkDuration;
  }


  public EventsBrowserTimingInfo performanceBucket(String performanceBucket) {
    this.performanceBucket = performanceBucket;
    return this;
  }

  /**
   * The performance bucket of the load
   * @return performanceBucket
   */
  @javax.annotation.Nullable
  public String getPerformanceBucket() {
    return performanceBucket;
  }

  public void setPerformanceBucket(String performanceBucket) {
    this.performanceBucket = performanceBucket;
  }


  public EventsBrowserTimingInfo processingDuration(Long processingDuration) {
    this.processingDuration = processingDuration;
    return this;
  }

  /**
   * The processing duration of the load
   * @return processingDuration
   */
  @javax.annotation.Nullable
  public Long getProcessingDuration() {
    return processingDuration;
  }

  public void setProcessingDuration(Long processingDuration) {
    this.processingDuration = processingDuration;
  }


  public EventsBrowserTimingInfo receiveDuration(Long receiveDuration) {
    this.receiveDuration = receiveDuration;
    return this;
  }

  /**
   * The receive duration of the load
   * @return receiveDuration
   */
  @javax.annotation.Nullable
  public Long getReceiveDuration() {
    return receiveDuration;
  }

  public void setReceiveDuration(Long receiveDuration) {
    this.receiveDuration = receiveDuration;
  }


  public EventsBrowserTimingInfo sendDuration(Long sendDuration) {
    this.sendDuration = sendDuration;
    return this;
  }

  /**
   * The send duration of the load
   * @return sendDuration
   */
  @javax.annotation.Nullable
  public Long getSendDuration() {
    return sendDuration;
  }

  public void setSendDuration(Long sendDuration) {
    this.sendDuration = sendDuration;
  }


  public EventsBrowserTimingInfo totalDuration(Long totalDuration) {
    this.totalDuration = totalDuration;
    return this;
  }

  /**
   * The total duration of the load
   * @return totalDuration
   */
  @javax.annotation.Nullable
  public Long getTotalDuration() {
    return totalDuration;
  }

  public void setTotalDuration(Long totalDuration) {
    this.totalDuration = totalDuration;
  }


  public EventsBrowserTimingInfo url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The url of the page
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public EventsBrowserTimingInfo urlHost(String urlHost) {
    this.urlHost = urlHost;
    return this;
  }

  /**
   * The host of the URL
   * @return urlHost
   */
  @javax.annotation.Nullable
  public String getUrlHost() {
    return urlHost;
  }

  public void setUrlHost(String urlHost) {
    this.urlHost = urlHost;
  }


  public EventsBrowserTimingInfo urlPath(String urlPath) {
    this.urlPath = urlPath;
    return this;
  }

  /**
   * The path of the URL
   * @return urlPath
   */
  @javax.annotation.Nullable
  public String getUrlPath() {
    return urlPath;
  }

  public void setUrlPath(String urlPath) {
    this.urlPath = urlPath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventsBrowserTimingInfo eventsBrowserTimingInfo = (EventsBrowserTimingInfo) o;
    return Objects.equals(this.name, eventsBrowserTimingInfo.name) &&
        Objects.equals(this.networkDuration, eventsBrowserTimingInfo.networkDuration) &&
        Objects.equals(this.performanceBucket, eventsBrowserTimingInfo.performanceBucket) &&
        Objects.equals(this.processingDuration, eventsBrowserTimingInfo.processingDuration) &&
        Objects.equals(this.receiveDuration, eventsBrowserTimingInfo.receiveDuration) &&
        Objects.equals(this.sendDuration, eventsBrowserTimingInfo.sendDuration) &&
        Objects.equals(this.totalDuration, eventsBrowserTimingInfo.totalDuration) &&
        Objects.equals(this.url, eventsBrowserTimingInfo.url) &&
        Objects.equals(this.urlHost, eventsBrowserTimingInfo.urlHost) &&
        Objects.equals(this.urlPath, eventsBrowserTimingInfo.urlPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, networkDuration, performanceBucket, processingDuration, receiveDuration, sendDuration, totalDuration, url, urlHost, urlPath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventsBrowserTimingInfo {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkDuration: ").append(toIndentedString(networkDuration)).append("\n");
    sb.append("    performanceBucket: ").append(toIndentedString(performanceBucket)).append("\n");
    sb.append("    processingDuration: ").append(toIndentedString(processingDuration)).append("\n");
    sb.append("    receiveDuration: ").append(toIndentedString(receiveDuration)).append("\n");
    sb.append("    sendDuration: ").append(toIndentedString(sendDuration)).append("\n");
    sb.append("    totalDuration: ").append(toIndentedString(totalDuration)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    urlHost: ").append(toIndentedString(urlHost)).append("\n");
    sb.append("    urlPath: ").append(toIndentedString(urlPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("networkDuration");
    openapiFields.add("performanceBucket");
    openapiFields.add("processingDuration");
    openapiFields.add("receiveDuration");
    openapiFields.add("sendDuration");
    openapiFields.add("totalDuration");
    openapiFields.add("url");
    openapiFields.add("urlHost");
    openapiFields.add("urlPath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventsBrowserTimingInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventsBrowserTimingInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventsBrowserTimingInfo is not found in the empty JSON string", EventsBrowserTimingInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventsBrowserTimingInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventsBrowserTimingInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("performanceBucket") != null && !jsonObj.get("performanceBucket").isJsonNull()) && !jsonObj.get("performanceBucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `performanceBucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("performanceBucket").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("urlHost") != null && !jsonObj.get("urlHost").isJsonNull()) && !jsonObj.get("urlHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlHost").toString()));
      }
      if ((jsonObj.get("urlPath") != null && !jsonObj.get("urlPath").isJsonNull()) && !jsonObj.get("urlPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlPath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventsBrowserTimingInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventsBrowserTimingInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventsBrowserTimingInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventsBrowserTimingInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<EventsBrowserTimingInfo>() {
           @Override
           public void write(JsonWriter out, EventsBrowserTimingInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventsBrowserTimingInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventsBrowserTimingInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventsBrowserTimingInfo
   * @throws IOException if the JSON string is invalid with respect to EventsBrowserTimingInfo
   */
  public static EventsBrowserTimingInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventsBrowserTimingInfo.class);
  }

  /**
   * Convert an instance of EventsBrowserTimingInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

