/*
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EventType;
import org.openapitools.client.model.EventsAiInfo;
import org.openapitools.client.model.EventsApplicationInfo;
import org.openapitools.client.model.EventsClientInfo;
import org.openapitools.client.model.EventsCloudInfo;
import org.openapitools.client.model.EventsOperationInfo;
import org.openapitools.client.model.EventsResultDataCustomDimensions;
import org.openapitools.client.model.EventsResultDataCustomMeasurements;
import org.openapitools.client.model.EventsSessionInfo;
import org.openapitools.client.model.EventsUserInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Events query result data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:24:10.535800-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventsResultData {
  public static final String SERIALIZED_NAME_AI = "ai";
  @SerializedName(SERIALIZED_NAME_AI)
  private EventsAiInfo ai;

  public static final String SERIALIZED_NAME_APPLICATION = "application";
  @SerializedName(SERIALIZED_NAME_APPLICATION)
  private EventsApplicationInfo application;

  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private EventsClientInfo client;

  public static final String SERIALIZED_NAME_CLOUD = "cloud";
  @SerializedName(SERIALIZED_NAME_CLOUD)
  private EventsCloudInfo cloud;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Long count;

  public static final String SERIALIZED_NAME_CUSTOM_DIMENSIONS = "customDimensions";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DIMENSIONS)
  private EventsResultDataCustomDimensions customDimensions;

  public static final String SERIALIZED_NAME_CUSTOM_MEASUREMENTS = "customMeasurements";
  @SerializedName(SERIALIZED_NAME_CUSTOM_MEASUREMENTS)
  private EventsResultDataCustomMeasurements customMeasurements;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private EventsOperationInfo operation;

  public static final String SERIALIZED_NAME_SESSION = "session";
  @SerializedName(SERIALIZED_NAME_SESSION)
  private EventsSessionInfo session;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  protected EventType type;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private EventsUserInfo user;

  public EventsResultData() {
    this.type = this.getClass().getSimpleName();
  }

  public EventsResultData ai(EventsAiInfo ai) {
    this.ai = ai;
    return this;
  }

  /**
   * Get ai
   * @return ai
   */
  @javax.annotation.Nullable
  public EventsAiInfo getAi() {
    return ai;
  }

  public void setAi(EventsAiInfo ai) {
    this.ai = ai;
  }


  public EventsResultData application(EventsApplicationInfo application) {
    this.application = application;
    return this;
  }

  /**
   * Get application
   * @return application
   */
  @javax.annotation.Nullable
  public EventsApplicationInfo getApplication() {
    return application;
  }

  public void setApplication(EventsApplicationInfo application) {
    this.application = application;
  }


  public EventsResultData client(EventsClientInfo client) {
    this.client = client;
    return this;
  }

  /**
   * Get client
   * @return client
   */
  @javax.annotation.Nullable
  public EventsClientInfo getClient() {
    return client;
  }

  public void setClient(EventsClientInfo client) {
    this.client = client;
  }


  public EventsResultData cloud(EventsCloudInfo cloud) {
    this.cloud = cloud;
    return this;
  }

  /**
   * Get cloud
   * @return cloud
   */
  @javax.annotation.Nullable
  public EventsCloudInfo getCloud() {
    return cloud;
  }

  public void setCloud(EventsCloudInfo cloud) {
    this.cloud = cloud;
  }


  public EventsResultData count(Long count) {
    this.count = count;
    return this;
  }

  /**
   * Count of the event
   * @return count
   */
  @javax.annotation.Nullable
  public Long getCount() {
    return count;
  }

  public void setCount(Long count) {
    this.count = count;
  }


  public EventsResultData customDimensions(EventsResultDataCustomDimensions customDimensions) {
    this.customDimensions = customDimensions;
    return this;
  }

  /**
   * Get customDimensions
   * @return customDimensions
   */
  @javax.annotation.Nullable
  public EventsResultDataCustomDimensions getCustomDimensions() {
    return customDimensions;
  }

  public void setCustomDimensions(EventsResultDataCustomDimensions customDimensions) {
    this.customDimensions = customDimensions;
  }


  public EventsResultData customMeasurements(EventsResultDataCustomMeasurements customMeasurements) {
    this.customMeasurements = customMeasurements;
    return this;
  }

  /**
   * Get customMeasurements
   * @return customMeasurements
   */
  @javax.annotation.Nullable
  public EventsResultDataCustomMeasurements getCustomMeasurements() {
    return customMeasurements;
  }

  public void setCustomMeasurements(EventsResultDataCustomMeasurements customMeasurements) {
    this.customMeasurements = customMeasurements;
  }


  public EventsResultData id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique ID for this event.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public EventsResultData operation(EventsOperationInfo operation) {
    this.operation = operation;
    return this;
  }

  /**
   * Get operation
   * @return operation
   */
  @javax.annotation.Nullable
  public EventsOperationInfo getOperation() {
    return operation;
  }

  public void setOperation(EventsOperationInfo operation) {
    this.operation = operation;
  }


  public EventsResultData session(EventsSessionInfo session) {
    this.session = session;
    return this;
  }

  /**
   * Get session
   * @return session
   */
  @javax.annotation.Nullable
  public EventsSessionInfo getSession() {
    return session;
  }

  public void setSession(EventsSessionInfo session) {
    this.session = session;
  }


  public EventsResultData timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Timestamp of the event
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public EventsResultData type(EventType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public EventType getType() {
    return type;
  }

  public void setType(EventType type) {
    this.type = type;
  }


  public EventsResultData user(EventsUserInfo user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public EventsUserInfo getUser() {
    return user;
  }

  public void setUser(EventsUserInfo user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventsResultData eventsResultData = (EventsResultData) o;
    return Objects.equals(this.ai, eventsResultData.ai) &&
        Objects.equals(this.application, eventsResultData.application) &&
        Objects.equals(this.client, eventsResultData.client) &&
        Objects.equals(this.cloud, eventsResultData.cloud) &&
        Objects.equals(this.count, eventsResultData.count) &&
        Objects.equals(this.customDimensions, eventsResultData.customDimensions) &&
        Objects.equals(this.customMeasurements, eventsResultData.customMeasurements) &&
        Objects.equals(this.id, eventsResultData.id) &&
        Objects.equals(this.operation, eventsResultData.operation) &&
        Objects.equals(this.session, eventsResultData.session) &&
        Objects.equals(this.timestamp, eventsResultData.timestamp) &&
        Objects.equals(this.type, eventsResultData.type) &&
        Objects.equals(this.user, eventsResultData.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ai, application, client, cloud, count, customDimensions, customMeasurements, id, operation, session, timestamp, type, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventsResultData {\n");
    sb.append("    ai: ").append(toIndentedString(ai)).append("\n");
    sb.append("    application: ").append(toIndentedString(application)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    cloud: ").append(toIndentedString(cloud)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    customDimensions: ").append(toIndentedString(customDimensions)).append("\n");
    sb.append("    customMeasurements: ").append(toIndentedString(customMeasurements)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ai");
    openapiFields.add("application");
    openapiFields.add("client");
    openapiFields.add("cloud");
    openapiFields.add("count");
    openapiFields.add("customDimensions");
    openapiFields.add("customMeasurements");
    openapiFields.add("id");
    openapiFields.add("operation");
    openapiFields.add("session");
    openapiFields.add("timestamp");
    openapiFields.add("type");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventsResultData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventsResultData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventsResultData is not found in the empty JSON string", EventsResultData.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("type").getAsString();
      switch (discriminatorValue) {
        case "eventsAvailabilityResultResult":
          EventsAvailabilityResultResult.validateJsonElement(jsonElement);
          break;
        case "eventsBrowserTimingResult":
          EventsBrowserTimingResult.validateJsonElement(jsonElement);
          break;
        case "eventsCustomEventResult":
          EventsCustomEventResult.validateJsonElement(jsonElement);
          break;
        case "eventsCustomMetricResult":
          EventsCustomMetricResult.validateJsonElement(jsonElement);
          break;
        case "eventsDependencyResult":
          EventsDependencyResult.validateJsonElement(jsonElement);
          break;
        case "eventsExceptionResult":
          EventsExceptionResult.validateJsonElement(jsonElement);
          break;
        case "eventsPageViewResult":
          EventsPageViewResult.validateJsonElement(jsonElement);
          break;
        case "eventsPerformanceCounterResult":
          EventsPerformanceCounterResult.validateJsonElement(jsonElement);
          break;
        case "eventsRequestResult":
          EventsRequestResult.validateJsonElement(jsonElement);
          break;
        case "eventsTraceResult":
          EventsTraceResult.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of EventsResultData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventsResultData
   * @throws IOException if the JSON string is invalid with respect to EventsResultData
   */
  public static EventsResultData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventsResultData.class);
  }

  /**
   * Convert an instance of EventsResultData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

