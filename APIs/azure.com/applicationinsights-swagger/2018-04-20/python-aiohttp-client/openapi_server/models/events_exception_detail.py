# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.events_exception_details_parsed_stack import EventsExceptionDetailsParsedStack
from openapi_server import util


class EventsExceptionDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, message: str=None, outer_id: str=None, parsed_stack: List[EventsExceptionDetailsParsedStack]=None, severity_level: str=None, type: str=None):
        """EventsExceptionDetail - a model defined in OpenAPI

        :param id: The id of this EventsExceptionDetail.
        :param message: The message of this EventsExceptionDetail.
        :param outer_id: The outer_id of this EventsExceptionDetail.
        :param parsed_stack: The parsed_stack of this EventsExceptionDetail.
        :param severity_level: The severity_level of this EventsExceptionDetail.
        :param type: The type of this EventsExceptionDetail.
        """
        self.openapi_types = {
            'id': str,
            'message': str,
            'outer_id': str,
            'parsed_stack': List[EventsExceptionDetailsParsedStack],
            'severity_level': str,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'message': 'message',
            'outer_id': 'outerId',
            'parsed_stack': 'parsedStack',
            'severity_level': 'severityLevel',
            'type': 'type'
        }

        self._id = id
        self._message = message
        self._outer_id = outer_id
        self._parsed_stack = parsed_stack
        self._severity_level = severity_level
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsExceptionDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The eventsExceptionDetail of this EventsExceptionDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this EventsExceptionDetail.

        The ID of the exception detail

        :return: The id of this EventsExceptionDetail.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventsExceptionDetail.

        The ID of the exception detail

        :param id: The id of this EventsExceptionDetail.
        :type id: str
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this EventsExceptionDetail.

        The message of the exception detail

        :return: The message of this EventsExceptionDetail.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this EventsExceptionDetail.

        The message of the exception detail

        :param message: The message of this EventsExceptionDetail.
        :type message: str
        """

        self._message = message

    @property
    def outer_id(self):
        """Gets the outer_id of this EventsExceptionDetail.

        The outer ID of the exception detail

        :return: The outer_id of this EventsExceptionDetail.
        :rtype: str
        """
        return self._outer_id

    @outer_id.setter
    def outer_id(self, outer_id):
        """Sets the outer_id of this EventsExceptionDetail.

        The outer ID of the exception detail

        :param outer_id: The outer_id of this EventsExceptionDetail.
        :type outer_id: str
        """

        self._outer_id = outer_id

    @property
    def parsed_stack(self):
        """Gets the parsed_stack of this EventsExceptionDetail.

        The parsed stack

        :return: The parsed_stack of this EventsExceptionDetail.
        :rtype: List[EventsExceptionDetailsParsedStack]
        """
        return self._parsed_stack

    @parsed_stack.setter
    def parsed_stack(self, parsed_stack):
        """Sets the parsed_stack of this EventsExceptionDetail.

        The parsed stack

        :param parsed_stack: The parsed_stack of this EventsExceptionDetail.
        :type parsed_stack: List[EventsExceptionDetailsParsedStack]
        """

        self._parsed_stack = parsed_stack

    @property
    def severity_level(self):
        """Gets the severity_level of this EventsExceptionDetail.

        The severity level of the exception detail

        :return: The severity_level of this EventsExceptionDetail.
        :rtype: str
        """
        return self._severity_level

    @severity_level.setter
    def severity_level(self, severity_level):
        """Sets the severity_level of this EventsExceptionDetail.

        The severity level of the exception detail

        :param severity_level: The severity_level of this EventsExceptionDetail.
        :type severity_level: str
        """

        self._severity_level = severity_level

    @property
    def type(self):
        """Gets the type of this EventsExceptionDetail.

        The type of the exception detail

        :return: The type of this EventsExceptionDetail.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventsExceptionDetail.

        The type of the exception detail

        :param type: The type of this EventsExceptionDetail.
        :type type: str
        """

        self._type = type
