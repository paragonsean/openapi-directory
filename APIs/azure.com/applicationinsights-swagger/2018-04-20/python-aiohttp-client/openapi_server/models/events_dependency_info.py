# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventsDependencyInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: str=None, duration: int=None, id: str=None, name: str=None, performance_bucket: str=None, result_code: str=None, success: str=None, target: str=None, type: str=None):
        """EventsDependencyInfo - a model defined in OpenAPI

        :param data: The data of this EventsDependencyInfo.
        :param duration: The duration of this EventsDependencyInfo.
        :param id: The id of this EventsDependencyInfo.
        :param name: The name of this EventsDependencyInfo.
        :param performance_bucket: The performance_bucket of this EventsDependencyInfo.
        :param result_code: The result_code of this EventsDependencyInfo.
        :param success: The success of this EventsDependencyInfo.
        :param target: The target of this EventsDependencyInfo.
        :param type: The type of this EventsDependencyInfo.
        """
        self.openapi_types = {
            'data': str,
            'duration': int,
            'id': str,
            'name': str,
            'performance_bucket': str,
            'result_code': str,
            'success': str,
            'target': str,
            'type': str
        }

        self.attribute_map = {
            'data': 'data',
            'duration': 'duration',
            'id': 'id',
            'name': 'name',
            'performance_bucket': 'performanceBucket',
            'result_code': 'resultCode',
            'success': 'success',
            'target': 'target',
            'type': 'type'
        }

        self._data = data
        self._duration = duration
        self._id = id
        self._name = name
        self._performance_bucket = performance_bucket
        self._result_code = result_code
        self._success = success
        self._target = target
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsDependencyInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The eventsDependencyInfo of this EventsDependencyInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this EventsDependencyInfo.

        The data of the dependency

        :return: The data of this EventsDependencyInfo.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this EventsDependencyInfo.

        The data of the dependency

        :param data: The data of this EventsDependencyInfo.
        :type data: str
        """

        self._data = data

    @property
    def duration(self):
        """Gets the duration of this EventsDependencyInfo.

        The duration of the dependency

        :return: The duration of this EventsDependencyInfo.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this EventsDependencyInfo.

        The duration of the dependency

        :param duration: The duration of this EventsDependencyInfo.
        :type duration: int
        """

        self._duration = duration

    @property
    def id(self):
        """Gets the id of this EventsDependencyInfo.

        The ID of the dependency

        :return: The id of this EventsDependencyInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventsDependencyInfo.

        The ID of the dependency

        :param id: The id of this EventsDependencyInfo.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EventsDependencyInfo.

        The name of the dependency

        :return: The name of this EventsDependencyInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventsDependencyInfo.

        The name of the dependency

        :param name: The name of this EventsDependencyInfo.
        :type name: str
        """

        self._name = name

    @property
    def performance_bucket(self):
        """Gets the performance_bucket of this EventsDependencyInfo.

        The performance bucket of the dependency

        :return: The performance_bucket of this EventsDependencyInfo.
        :rtype: str
        """
        return self._performance_bucket

    @performance_bucket.setter
    def performance_bucket(self, performance_bucket):
        """Sets the performance_bucket of this EventsDependencyInfo.

        The performance bucket of the dependency

        :param performance_bucket: The performance_bucket of this EventsDependencyInfo.
        :type performance_bucket: str
        """

        self._performance_bucket = performance_bucket

    @property
    def result_code(self):
        """Gets the result_code of this EventsDependencyInfo.

        The result code of the dependency

        :return: The result_code of this EventsDependencyInfo.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this EventsDependencyInfo.

        The result code of the dependency

        :param result_code: The result_code of this EventsDependencyInfo.
        :type result_code: str
        """

        self._result_code = result_code

    @property
    def success(self):
        """Gets the success of this EventsDependencyInfo.

        Indicates if the dependency was successful

        :return: The success of this EventsDependencyInfo.
        :rtype: str
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this EventsDependencyInfo.

        Indicates if the dependency was successful

        :param success: The success of this EventsDependencyInfo.
        :type success: str
        """

        self._success = success

    @property
    def target(self):
        """Gets the target of this EventsDependencyInfo.

        The target of the dependency

        :return: The target of this EventsDependencyInfo.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this EventsDependencyInfo.

        The target of the dependency

        :param target: The target of this EventsDependencyInfo.
        :type target: str
        """

        self._target = target

    @property
    def type(self):
        """Gets the type of this EventsDependencyInfo.

        The type of the dependency

        :return: The type of this EventsDependencyInfo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventsDependencyInfo.

        The type of the dependency

        :param type: The type of this EventsDependencyInfo.
        :type type: str
        """

        self._type = type
