# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventsAiInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, app_name: str=None, i_key: str=None, sdk_version: str=None):
        """EventsAiInfo - a model defined in OpenAPI

        :param app_id: The app_id of this EventsAiInfo.
        :param app_name: The app_name of this EventsAiInfo.
        :param i_key: The i_key of this EventsAiInfo.
        :param sdk_version: The sdk_version of this EventsAiInfo.
        """
        self.openapi_types = {
            'app_id': str,
            'app_name': str,
            'i_key': str,
            'sdk_version': str
        }

        self.attribute_map = {
            'app_id': 'appId',
            'app_name': 'appName',
            'i_key': 'iKey',
            'sdk_version': 'sdkVersion'
        }

        self._app_id = app_id
        self._app_name = app_name
        self._i_key = i_key
        self._sdk_version = sdk_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsAiInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The eventsAiInfo of this EventsAiInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this EventsAiInfo.

        ID of the application

        :return: The app_id of this EventsAiInfo.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this EventsAiInfo.

        ID of the application

        :param app_id: The app_id of this EventsAiInfo.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def app_name(self):
        """Gets the app_name of this EventsAiInfo.

        Name of the application

        :return: The app_name of this EventsAiInfo.
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this EventsAiInfo.

        Name of the application

        :param app_name: The app_name of this EventsAiInfo.
        :type app_name: str
        """

        self._app_name = app_name

    @property
    def i_key(self):
        """Gets the i_key of this EventsAiInfo.

        iKey of the app

        :return: The i_key of this EventsAiInfo.
        :rtype: str
        """
        return self._i_key

    @i_key.setter
    def i_key(self, i_key):
        """Sets the i_key of this EventsAiInfo.

        iKey of the app

        :param i_key: The i_key of this EventsAiInfo.
        :type i_key: str
        """

        self._i_key = i_key

    @property
    def sdk_version(self):
        """Gets the sdk_version of this EventsAiInfo.

        SDK version of the application

        :return: The sdk_version of this EventsAiInfo.
        :rtype: str
        """
        return self._sdk_version

    @sdk_version.setter
    def sdk_version(self, sdk_version):
        """Sets the sdk_version of this EventsAiInfo.

        SDK version of the application

        :param sdk_version: The sdk_version of this EventsAiInfo.
        :type sdk_version: str
        """

        self._sdk_version = sdk_version
