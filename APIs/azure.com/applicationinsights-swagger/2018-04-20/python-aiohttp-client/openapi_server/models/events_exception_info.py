# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.events_exception_detail import EventsExceptionDetail
from openapi_server import util


class EventsExceptionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assembly: str=None, details: List[EventsExceptionDetail]=None, handled_at: str=None, innermost_assembly: str=None, innermost_message: str=None, innermost_method: str=None, innermost_type: str=None, message: str=None, method: str=None, outer_assembly: str=None, outer_message: str=None, outer_method: str=None, outer_type: str=None, problem_id: str=None, severity_level: int=None, type: str=None):
        """EventsExceptionInfo - a model defined in OpenAPI

        :param assembly: The assembly of this EventsExceptionInfo.
        :param details: The details of this EventsExceptionInfo.
        :param handled_at: The handled_at of this EventsExceptionInfo.
        :param innermost_assembly: The innermost_assembly of this EventsExceptionInfo.
        :param innermost_message: The innermost_message of this EventsExceptionInfo.
        :param innermost_method: The innermost_method of this EventsExceptionInfo.
        :param innermost_type: The innermost_type of this EventsExceptionInfo.
        :param message: The message of this EventsExceptionInfo.
        :param method: The method of this EventsExceptionInfo.
        :param outer_assembly: The outer_assembly of this EventsExceptionInfo.
        :param outer_message: The outer_message of this EventsExceptionInfo.
        :param outer_method: The outer_method of this EventsExceptionInfo.
        :param outer_type: The outer_type of this EventsExceptionInfo.
        :param problem_id: The problem_id of this EventsExceptionInfo.
        :param severity_level: The severity_level of this EventsExceptionInfo.
        :param type: The type of this EventsExceptionInfo.
        """
        self.openapi_types = {
            'assembly': str,
            'details': List[EventsExceptionDetail],
            'handled_at': str,
            'innermost_assembly': str,
            'innermost_message': str,
            'innermost_method': str,
            'innermost_type': str,
            'message': str,
            'method': str,
            'outer_assembly': str,
            'outer_message': str,
            'outer_method': str,
            'outer_type': str,
            'problem_id': str,
            'severity_level': int,
            'type': str
        }

        self.attribute_map = {
            'assembly': 'assembly',
            'details': 'details',
            'handled_at': 'handledAt',
            'innermost_assembly': 'innermostAssembly',
            'innermost_message': 'innermostMessage',
            'innermost_method': 'innermostMethod',
            'innermost_type': 'innermostType',
            'message': 'message',
            'method': 'method',
            'outer_assembly': 'outerAssembly',
            'outer_message': 'outerMessage',
            'outer_method': 'outerMethod',
            'outer_type': 'outerType',
            'problem_id': 'problemId',
            'severity_level': 'severityLevel',
            'type': 'type'
        }

        self._assembly = assembly
        self._details = details
        self._handled_at = handled_at
        self._innermost_assembly = innermost_assembly
        self._innermost_message = innermost_message
        self._innermost_method = innermost_method
        self._innermost_type = innermost_type
        self._message = message
        self._method = method
        self._outer_assembly = outer_assembly
        self._outer_message = outer_message
        self._outer_method = outer_method
        self._outer_type = outer_type
        self._problem_id = problem_id
        self._severity_level = severity_level
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsExceptionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The eventsExceptionInfo of this EventsExceptionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assembly(self):
        """Gets the assembly of this EventsExceptionInfo.

        The assembly which threw the exception

        :return: The assembly of this EventsExceptionInfo.
        :rtype: str
        """
        return self._assembly

    @assembly.setter
    def assembly(self, assembly):
        """Sets the assembly of this EventsExceptionInfo.

        The assembly which threw the exception

        :param assembly: The assembly of this EventsExceptionInfo.
        :type assembly: str
        """

        self._assembly = assembly

    @property
    def details(self):
        """Gets the details of this EventsExceptionInfo.

        The details of the exception

        :return: The details of this EventsExceptionInfo.
        :rtype: List[EventsExceptionDetail]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this EventsExceptionInfo.

        The details of the exception

        :param details: The details of this EventsExceptionInfo.
        :type details: List[EventsExceptionDetail]
        """

        self._details = details

    @property
    def handled_at(self):
        """Gets the handled_at of this EventsExceptionInfo.

        Indicates where the exception was handled at

        :return: The handled_at of this EventsExceptionInfo.
        :rtype: str
        """
        return self._handled_at

    @handled_at.setter
    def handled_at(self, handled_at):
        """Sets the handled_at of this EventsExceptionInfo.

        Indicates where the exception was handled at

        :param handled_at: The handled_at of this EventsExceptionInfo.
        :type handled_at: str
        """

        self._handled_at = handled_at

    @property
    def innermost_assembly(self):
        """Gets the innermost_assembly of this EventsExceptionInfo.

        The inner most assembly of the exception

        :return: The innermost_assembly of this EventsExceptionInfo.
        :rtype: str
        """
        return self._innermost_assembly

    @innermost_assembly.setter
    def innermost_assembly(self, innermost_assembly):
        """Sets the innermost_assembly of this EventsExceptionInfo.

        The inner most assembly of the exception

        :param innermost_assembly: The innermost_assembly of this EventsExceptionInfo.
        :type innermost_assembly: str
        """

        self._innermost_assembly = innermost_assembly

    @property
    def innermost_message(self):
        """Gets the innermost_message of this EventsExceptionInfo.

        The inner most message of the exception

        :return: The innermost_message of this EventsExceptionInfo.
        :rtype: str
        """
        return self._innermost_message

    @innermost_message.setter
    def innermost_message(self, innermost_message):
        """Sets the innermost_message of this EventsExceptionInfo.

        The inner most message of the exception

        :param innermost_message: The innermost_message of this EventsExceptionInfo.
        :type innermost_message: str
        """

        self._innermost_message = innermost_message

    @property
    def innermost_method(self):
        """Gets the innermost_method of this EventsExceptionInfo.

        The inner most method of the exception

        :return: The innermost_method of this EventsExceptionInfo.
        :rtype: str
        """
        return self._innermost_method

    @innermost_method.setter
    def innermost_method(self, innermost_method):
        """Sets the innermost_method of this EventsExceptionInfo.

        The inner most method of the exception

        :param innermost_method: The innermost_method of this EventsExceptionInfo.
        :type innermost_method: str
        """

        self._innermost_method = innermost_method

    @property
    def innermost_type(self):
        """Gets the innermost_type of this EventsExceptionInfo.

        The inner most type of the exception

        :return: The innermost_type of this EventsExceptionInfo.
        :rtype: str
        """
        return self._innermost_type

    @innermost_type.setter
    def innermost_type(self, innermost_type):
        """Sets the innermost_type of this EventsExceptionInfo.

        The inner most type of the exception

        :param innermost_type: The innermost_type of this EventsExceptionInfo.
        :type innermost_type: str
        """

        self._innermost_type = innermost_type

    @property
    def message(self):
        """Gets the message of this EventsExceptionInfo.

        The message of the exception

        :return: The message of this EventsExceptionInfo.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this EventsExceptionInfo.

        The message of the exception

        :param message: The message of this EventsExceptionInfo.
        :type message: str
        """

        self._message = message

    @property
    def method(self):
        """Gets the method of this EventsExceptionInfo.

        The method that threw the exception

        :return: The method of this EventsExceptionInfo.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this EventsExceptionInfo.

        The method that threw the exception

        :param method: The method of this EventsExceptionInfo.
        :type method: str
        """

        self._method = method

    @property
    def outer_assembly(self):
        """Gets the outer_assembly of this EventsExceptionInfo.

        The outer assembly of the exception

        :return: The outer_assembly of this EventsExceptionInfo.
        :rtype: str
        """
        return self._outer_assembly

    @outer_assembly.setter
    def outer_assembly(self, outer_assembly):
        """Sets the outer_assembly of this EventsExceptionInfo.

        The outer assembly of the exception

        :param outer_assembly: The outer_assembly of this EventsExceptionInfo.
        :type outer_assembly: str
        """

        self._outer_assembly = outer_assembly

    @property
    def outer_message(self):
        """Gets the outer_message of this EventsExceptionInfo.

        The outer message of the exception

        :return: The outer_message of this EventsExceptionInfo.
        :rtype: str
        """
        return self._outer_message

    @outer_message.setter
    def outer_message(self, outer_message):
        """Sets the outer_message of this EventsExceptionInfo.

        The outer message of the exception

        :param outer_message: The outer_message of this EventsExceptionInfo.
        :type outer_message: str
        """

        self._outer_message = outer_message

    @property
    def outer_method(self):
        """Gets the outer_method of this EventsExceptionInfo.

        The outer method of the exception

        :return: The outer_method of this EventsExceptionInfo.
        :rtype: str
        """
        return self._outer_method

    @outer_method.setter
    def outer_method(self, outer_method):
        """Sets the outer_method of this EventsExceptionInfo.

        The outer method of the exception

        :param outer_method: The outer_method of this EventsExceptionInfo.
        :type outer_method: str
        """

        self._outer_method = outer_method

    @property
    def outer_type(self):
        """Gets the outer_type of this EventsExceptionInfo.

        The outer type of the exception

        :return: The outer_type of this EventsExceptionInfo.
        :rtype: str
        """
        return self._outer_type

    @outer_type.setter
    def outer_type(self, outer_type):
        """Sets the outer_type of this EventsExceptionInfo.

        The outer type of the exception

        :param outer_type: The outer_type of this EventsExceptionInfo.
        :type outer_type: str
        """

        self._outer_type = outer_type

    @property
    def problem_id(self):
        """Gets the problem_id of this EventsExceptionInfo.

        The problem ID of the exception

        :return: The problem_id of this EventsExceptionInfo.
        :rtype: str
        """
        return self._problem_id

    @problem_id.setter
    def problem_id(self, problem_id):
        """Sets the problem_id of this EventsExceptionInfo.

        The problem ID of the exception

        :param problem_id: The problem_id of this EventsExceptionInfo.
        :type problem_id: str
        """

        self._problem_id = problem_id

    @property
    def severity_level(self):
        """Gets the severity_level of this EventsExceptionInfo.

        The severity level of the exception

        :return: The severity_level of this EventsExceptionInfo.
        :rtype: int
        """
        return self._severity_level

    @severity_level.setter
    def severity_level(self, severity_level):
        """Sets the severity_level of this EventsExceptionInfo.

        The severity level of the exception

        :param severity_level: The severity_level of this EventsExceptionInfo.
        :type severity_level: int
        """

        self._severity_level = severity_level

    @property
    def type(self):
        """Gets the type of this EventsExceptionInfo.

        The type of the exception

        :return: The type of this EventsExceptionInfo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventsExceptionInfo.

        The type of the exception

        :param type: The type of this EventsExceptionInfo.
        :type type: str
        """

        self._type = type
