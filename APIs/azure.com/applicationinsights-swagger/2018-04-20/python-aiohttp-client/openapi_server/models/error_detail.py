# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ErrorDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_properties: object=None, code: str=None, message: str=None, resources: List[str]=None, target: str=None, value: str=None):
        """ErrorDetail - a model defined in OpenAPI

        :param additional_properties: The additional_properties of this ErrorDetail.
        :param code: The code of this ErrorDetail.
        :param message: The message of this ErrorDetail.
        :param resources: The resources of this ErrorDetail.
        :param target: The target of this ErrorDetail.
        :param value: The value of this ErrorDetail.
        """
        self.openapi_types = {
            'additional_properties': object,
            'code': str,
            'message': str,
            'resources': List[str],
            'target': str,
            'value': str
        }

        self.attribute_map = {
            'additional_properties': 'additionalProperties',
            'code': 'code',
            'message': 'message',
            'resources': 'resources',
            'target': 'target',
            'value': 'value'
        }

        self._additional_properties = additional_properties
        self._code = code
        self._message = message
        self._resources = resources
        self._target = target
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The errorDetail of this ErrorDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_properties(self):
        """Gets the additional_properties of this ErrorDetail.


        :return: The additional_properties of this ErrorDetail.
        :rtype: object
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """Sets the additional_properties of this ErrorDetail.


        :param additional_properties: The additional_properties of this ErrorDetail.
        :type additional_properties: object
        """

        self._additional_properties = additional_properties

    @property
    def code(self):
        """Gets the code of this ErrorDetail.

        The error's code.

        :return: The code of this ErrorDetail.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ErrorDetail.

        The error's code.

        :param code: The code of this ErrorDetail.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def message(self):
        """Gets the message of this ErrorDetail.

        A human readable error message.

        :return: The message of this ErrorDetail.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorDetail.

        A human readable error message.

        :param message: The message of this ErrorDetail.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def resources(self):
        """Gets the resources of this ErrorDetail.

        Indicates resources which were responsible for the error.

        :return: The resources of this ErrorDetail.
        :rtype: List[str]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this ErrorDetail.

        Indicates resources which were responsible for the error.

        :param resources: The resources of this ErrorDetail.
        :type resources: List[str]
        """

        self._resources = resources

    @property
    def target(self):
        """Gets the target of this ErrorDetail.

        Indicates which property in the request is responsible for the error.

        :return: The target of this ErrorDetail.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this ErrorDetail.

        Indicates which property in the request is responsible for the error.

        :param target: The target of this ErrorDetail.
        :type target: str
        """

        self._target = target

    @property
    def value(self):
        """Gets the value of this ErrorDetail.

        Indicates which value in 'target' is responsible for the error.

        :return: The value of this ErrorDetail.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ErrorDetail.

        Indicates which value in 'target' is responsible for the error.

        :param value: The value of this ErrorDetail.
        :type value: str
        """

        self._value = value
