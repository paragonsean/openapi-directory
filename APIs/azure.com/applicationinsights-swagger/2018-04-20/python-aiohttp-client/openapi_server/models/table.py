# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.column import Column
from openapi_server import util


class Table(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, columns: List[Column]=None, name: str=None, rows: List[List[str]]=None):
        """Table - a model defined in OpenAPI

        :param columns: The columns of this Table.
        :param name: The name of this Table.
        :param rows: The rows of this Table.
        """
        self.openapi_types = {
            'columns': List[Column],
            'name': str,
            'rows': List[List[str]]
        }

        self.attribute_map = {
            'columns': 'columns',
            'name': 'name',
            'rows': 'rows'
        }

        self._columns = columns
        self._name = name
        self._rows = rows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Table':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The table of this Table.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def columns(self):
        """Gets the columns of this Table.

        The list of columns in this table.

        :return: The columns of this Table.
        :rtype: List[Column]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this Table.

        The list of columns in this table.

        :param columns: The columns of this Table.
        :type columns: List[Column]
        """
        if columns is None:
            raise ValueError("Invalid value for `columns`, must not be `None`")

        self._columns = columns

    @property
    def name(self):
        """Gets the name of this Table.

        The name of the table.

        :return: The name of this Table.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Table.

        The name of the table.

        :param name: The name of this Table.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def rows(self):
        """Gets the rows of this Table.

        The resulting rows from this query.

        :return: The rows of this Table.
        :rtype: List[List[str]]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this Table.

        The resulting rows from this query.

        :param rows: The rows of this Table.
        :type rows: List[List[str]]
        """
        if rows is None:
            raise ValueError("Invalid value for `rows`, must not be `None`")

        self._rows = rows
