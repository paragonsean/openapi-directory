# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventsClientInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, browser: str=None, city: str=None, country_or_region: str=None, ip: str=None, model: str=None, os: str=None, state_or_province: str=None, type: str=None):
        """EventsClientInfo - a model defined in OpenAPI

        :param browser: The browser of this EventsClientInfo.
        :param city: The city of this EventsClientInfo.
        :param country_or_region: The country_or_region of this EventsClientInfo.
        :param ip: The ip of this EventsClientInfo.
        :param model: The model of this EventsClientInfo.
        :param os: The os of this EventsClientInfo.
        :param state_or_province: The state_or_province of this EventsClientInfo.
        :param type: The type of this EventsClientInfo.
        """
        self.openapi_types = {
            'browser': str,
            'city': str,
            'country_or_region': str,
            'ip': str,
            'model': str,
            'os': str,
            'state_or_province': str,
            'type': str
        }

        self.attribute_map = {
            'browser': 'browser',
            'city': 'city',
            'country_or_region': 'countryOrRegion',
            'ip': 'ip',
            'model': 'model',
            'os': 'os',
            'state_or_province': 'stateOrProvince',
            'type': 'type'
        }

        self._browser = browser
        self._city = city
        self._country_or_region = country_or_region
        self._ip = ip
        self._model = model
        self._os = os
        self._state_or_province = state_or_province
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsClientInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The eventsClientInfo of this EventsClientInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def browser(self):
        """Gets the browser of this EventsClientInfo.

        Browser of the client

        :return: The browser of this EventsClientInfo.
        :rtype: str
        """
        return self._browser

    @browser.setter
    def browser(self, browser):
        """Sets the browser of this EventsClientInfo.

        Browser of the client

        :param browser: The browser of this EventsClientInfo.
        :type browser: str
        """

        self._browser = browser

    @property
    def city(self):
        """Gets the city of this EventsClientInfo.

        City of the client

        :return: The city of this EventsClientInfo.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this EventsClientInfo.

        City of the client

        :param city: The city of this EventsClientInfo.
        :type city: str
        """

        self._city = city

    @property
    def country_or_region(self):
        """Gets the country_or_region of this EventsClientInfo.

        Country or region of the client

        :return: The country_or_region of this EventsClientInfo.
        :rtype: str
        """
        return self._country_or_region

    @country_or_region.setter
    def country_or_region(self, country_or_region):
        """Sets the country_or_region of this EventsClientInfo.

        Country or region of the client

        :param country_or_region: The country_or_region of this EventsClientInfo.
        :type country_or_region: str
        """

        self._country_or_region = country_or_region

    @property
    def ip(self):
        """Gets the ip of this EventsClientInfo.

        IP address of the client

        :return: The ip of this EventsClientInfo.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this EventsClientInfo.

        IP address of the client

        :param ip: The ip of this EventsClientInfo.
        :type ip: str
        """

        self._ip = ip

    @property
    def model(self):
        """Gets the model of this EventsClientInfo.

        Model of the client

        :return: The model of this EventsClientInfo.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this EventsClientInfo.

        Model of the client

        :param model: The model of this EventsClientInfo.
        :type model: str
        """

        self._model = model

    @property
    def os(self):
        """Gets the os of this EventsClientInfo.

        Operating system of the client

        :return: The os of this EventsClientInfo.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this EventsClientInfo.

        Operating system of the client

        :param os: The os of this EventsClientInfo.
        :type os: str
        """

        self._os = os

    @property
    def state_or_province(self):
        """Gets the state_or_province of this EventsClientInfo.

        State or province of the client

        :return: The state_or_province of this EventsClientInfo.
        :rtype: str
        """
        return self._state_or_province

    @state_or_province.setter
    def state_or_province(self, state_or_province):
        """Sets the state_or_province of this EventsClientInfo.

        State or province of the client

        :param state_or_province: The state_or_province of this EventsClientInfo.
        :type state_or_province: str
        """

        self._state_or_province = state_or_province

    @property
    def type(self):
        """Gets the type of this EventsClientInfo.

        Type of the client

        :return: The type of this EventsClientInfo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventsClientInfo.

        Type of the client

        :param type: The type of this EventsClientInfo.
        :type type: str
        """

        self._type = type
