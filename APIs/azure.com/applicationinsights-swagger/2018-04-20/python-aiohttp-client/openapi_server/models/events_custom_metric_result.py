# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_type import EventType
from openapi_server.models.events_ai_info import EventsAiInfo
from openapi_server.models.events_application_info import EventsApplicationInfo
from openapi_server.models.events_client_info import EventsClientInfo
from openapi_server.models.events_cloud_info import EventsCloudInfo
from openapi_server.models.events_custom_metric_info import EventsCustomMetricInfo
from openapi_server.models.events_operation_info import EventsOperationInfo
from openapi_server.models.events_result_data import EventsResultData
from openapi_server.models.events_result_data_custom_dimensions import EventsResultDataCustomDimensions
from openapi_server.models.events_result_data_custom_measurements import EventsResultDataCustomMeasurements
from openapi_server.models.events_session_info import EventsSessionInfo
from openapi_server.models.events_user_info import EventsUserInfo
from openapi_server import util


class EventsCustomMetricResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ai: EventsAiInfo=None, application: EventsApplicationInfo=None, client: EventsClientInfo=None, cloud: EventsCloudInfo=None, count: int=None, custom_dimensions: EventsResultDataCustomDimensions=None, custom_measurements: EventsResultDataCustomMeasurements=None, id: str=None, operation: EventsOperationInfo=None, session: EventsSessionInfo=None, timestamp: datetime=None, type: EventType=None, user: EventsUserInfo=None, custom_metric: EventsCustomMetricInfo=None):
        """EventsCustomMetricResult - a model defined in OpenAPI

        :param ai: The ai of this EventsCustomMetricResult.
        :param application: The application of this EventsCustomMetricResult.
        :param client: The client of this EventsCustomMetricResult.
        :param cloud: The cloud of this EventsCustomMetricResult.
        :param count: The count of this EventsCustomMetricResult.
        :param custom_dimensions: The custom_dimensions of this EventsCustomMetricResult.
        :param custom_measurements: The custom_measurements of this EventsCustomMetricResult.
        :param id: The id of this EventsCustomMetricResult.
        :param operation: The operation of this EventsCustomMetricResult.
        :param session: The session of this EventsCustomMetricResult.
        :param timestamp: The timestamp of this EventsCustomMetricResult.
        :param type: The type of this EventsCustomMetricResult.
        :param user: The user of this EventsCustomMetricResult.
        :param custom_metric: The custom_metric of this EventsCustomMetricResult.
        """
        self.openapi_types = {
            'ai': EventsAiInfo,
            'application': EventsApplicationInfo,
            'client': EventsClientInfo,
            'cloud': EventsCloudInfo,
            'count': int,
            'custom_dimensions': EventsResultDataCustomDimensions,
            'custom_measurements': EventsResultDataCustomMeasurements,
            'id': str,
            'operation': EventsOperationInfo,
            'session': EventsSessionInfo,
            'timestamp': datetime,
            'type': EventType,
            'user': EventsUserInfo,
            'custom_metric': EventsCustomMetricInfo
        }

        self.attribute_map = {
            'ai': 'ai',
            'application': 'application',
            'client': 'client',
            'cloud': 'cloud',
            'count': 'count',
            'custom_dimensions': 'customDimensions',
            'custom_measurements': 'customMeasurements',
            'id': 'id',
            'operation': 'operation',
            'session': 'session',
            'timestamp': 'timestamp',
            'type': 'type',
            'user': 'user',
            'custom_metric': 'customMetric'
        }

        self._ai = ai
        self._application = application
        self._client = client
        self._cloud = cloud
        self._count = count
        self._custom_dimensions = custom_dimensions
        self._custom_measurements = custom_measurements
        self._id = id
        self._operation = operation
        self._session = session
        self._timestamp = timestamp
        self._type = type
        self._user = user
        self._custom_metric = custom_metric

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsCustomMetricResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The eventsCustomMetricResult of this EventsCustomMetricResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ai(self):
        """Gets the ai of this EventsCustomMetricResult.


        :return: The ai of this EventsCustomMetricResult.
        :rtype: EventsAiInfo
        """
        return self._ai

    @ai.setter
    def ai(self, ai):
        """Sets the ai of this EventsCustomMetricResult.


        :param ai: The ai of this EventsCustomMetricResult.
        :type ai: EventsAiInfo
        """

        self._ai = ai

    @property
    def application(self):
        """Gets the application of this EventsCustomMetricResult.


        :return: The application of this EventsCustomMetricResult.
        :rtype: EventsApplicationInfo
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this EventsCustomMetricResult.


        :param application: The application of this EventsCustomMetricResult.
        :type application: EventsApplicationInfo
        """

        self._application = application

    @property
    def client(self):
        """Gets the client of this EventsCustomMetricResult.


        :return: The client of this EventsCustomMetricResult.
        :rtype: EventsClientInfo
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this EventsCustomMetricResult.


        :param client: The client of this EventsCustomMetricResult.
        :type client: EventsClientInfo
        """

        self._client = client

    @property
    def cloud(self):
        """Gets the cloud of this EventsCustomMetricResult.


        :return: The cloud of this EventsCustomMetricResult.
        :rtype: EventsCloudInfo
        """
        return self._cloud

    @cloud.setter
    def cloud(self, cloud):
        """Sets the cloud of this EventsCustomMetricResult.


        :param cloud: The cloud of this EventsCustomMetricResult.
        :type cloud: EventsCloudInfo
        """

        self._cloud = cloud

    @property
    def count(self):
        """Gets the count of this EventsCustomMetricResult.

        Count of the event

        :return: The count of this EventsCustomMetricResult.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this EventsCustomMetricResult.

        Count of the event

        :param count: The count of this EventsCustomMetricResult.
        :type count: int
        """

        self._count = count

    @property
    def custom_dimensions(self):
        """Gets the custom_dimensions of this EventsCustomMetricResult.


        :return: The custom_dimensions of this EventsCustomMetricResult.
        :rtype: EventsResultDataCustomDimensions
        """
        return self._custom_dimensions

    @custom_dimensions.setter
    def custom_dimensions(self, custom_dimensions):
        """Sets the custom_dimensions of this EventsCustomMetricResult.


        :param custom_dimensions: The custom_dimensions of this EventsCustomMetricResult.
        :type custom_dimensions: EventsResultDataCustomDimensions
        """

        self._custom_dimensions = custom_dimensions

    @property
    def custom_measurements(self):
        """Gets the custom_measurements of this EventsCustomMetricResult.


        :return: The custom_measurements of this EventsCustomMetricResult.
        :rtype: EventsResultDataCustomMeasurements
        """
        return self._custom_measurements

    @custom_measurements.setter
    def custom_measurements(self, custom_measurements):
        """Sets the custom_measurements of this EventsCustomMetricResult.


        :param custom_measurements: The custom_measurements of this EventsCustomMetricResult.
        :type custom_measurements: EventsResultDataCustomMeasurements
        """

        self._custom_measurements = custom_measurements

    @property
    def id(self):
        """Gets the id of this EventsCustomMetricResult.

        The unique ID for this event.

        :return: The id of this EventsCustomMetricResult.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventsCustomMetricResult.

        The unique ID for this event.

        :param id: The id of this EventsCustomMetricResult.
        :type id: str
        """

        self._id = id

    @property
    def operation(self):
        """Gets the operation of this EventsCustomMetricResult.


        :return: The operation of this EventsCustomMetricResult.
        :rtype: EventsOperationInfo
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this EventsCustomMetricResult.


        :param operation: The operation of this EventsCustomMetricResult.
        :type operation: EventsOperationInfo
        """

        self._operation = operation

    @property
    def session(self):
        """Gets the session of this EventsCustomMetricResult.


        :return: The session of this EventsCustomMetricResult.
        :rtype: EventsSessionInfo
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this EventsCustomMetricResult.


        :param session: The session of this EventsCustomMetricResult.
        :type session: EventsSessionInfo
        """

        self._session = session

    @property
    def timestamp(self):
        """Gets the timestamp of this EventsCustomMetricResult.

        Timestamp of the event

        :return: The timestamp of this EventsCustomMetricResult.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this EventsCustomMetricResult.

        Timestamp of the event

        :param timestamp: The timestamp of this EventsCustomMetricResult.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this EventsCustomMetricResult.


        :return: The type of this EventsCustomMetricResult.
        :rtype: EventType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EventsCustomMetricResult.


        :param type: The type of this EventsCustomMetricResult.
        :type type: EventType
        """

        self._type = type

    @property
    def user(self):
        """Gets the user of this EventsCustomMetricResult.


        :return: The user of this EventsCustomMetricResult.
        :rtype: EventsUserInfo
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this EventsCustomMetricResult.


        :param user: The user of this EventsCustomMetricResult.
        :type user: EventsUserInfo
        """

        self._user = user

    @property
    def custom_metric(self):
        """Gets the custom_metric of this EventsCustomMetricResult.


        :return: The custom_metric of this EventsCustomMetricResult.
        :rtype: EventsCustomMetricInfo
        """
        return self._custom_metric

    @custom_metric.setter
    def custom_metric(self, custom_metric):
        """Sets the custom_metric of this EventsCustomMetricResult.


        :param custom_metric: The custom_metric of this EventsCustomMetricResult.
        :type custom_metric: EventsCustomMetricInfo
        """

        self._custom_metric = custom_metric
