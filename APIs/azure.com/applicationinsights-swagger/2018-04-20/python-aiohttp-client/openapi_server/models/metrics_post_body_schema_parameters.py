# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_id import MetricId
from openapi_server import util


class MetricsPostBodySchemaParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation: List[str]=None, filter: str=None, interval: str=None, metric_id: MetricId=None, orderby: str=None, segment: List[str]=None, timespan: str=None, top: int=None):
        """MetricsPostBodySchemaParameters - a model defined in OpenAPI

        :param aggregation: The aggregation of this MetricsPostBodySchemaParameters.
        :param filter: The filter of this MetricsPostBodySchemaParameters.
        :param interval: The interval of this MetricsPostBodySchemaParameters.
        :param metric_id: The metric_id of this MetricsPostBodySchemaParameters.
        :param orderby: The orderby of this MetricsPostBodySchemaParameters.
        :param segment: The segment of this MetricsPostBodySchemaParameters.
        :param timespan: The timespan of this MetricsPostBodySchemaParameters.
        :param top: The top of this MetricsPostBodySchemaParameters.
        """
        self.openapi_types = {
            'aggregation': List[str],
            'filter': str,
            'interval': str,
            'metric_id': MetricId,
            'orderby': str,
            'segment': List[str],
            'timespan': str,
            'top': int
        }

        self.attribute_map = {
            'aggregation': 'aggregation',
            'filter': 'filter',
            'interval': 'interval',
            'metric_id': 'metricId',
            'orderby': 'orderby',
            'segment': 'segment',
            'timespan': 'timespan',
            'top': 'top'
        }

        self._aggregation = aggregation
        self._filter = filter
        self._interval = interval
        self._metric_id = metric_id
        self._orderby = orderby
        self._segment = segment
        self._timespan = timespan
        self._top = top

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricsPostBodySchemaParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The metricsPostBodySchema_parameters of this MetricsPostBodySchemaParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation(self):
        """Gets the aggregation of this MetricsPostBodySchemaParameters.

        The aggregation to use when computing the metric values. To retrieve more than one aggregation at a time, separate them with a comma. If no aggregation is specified, then the default aggregation for the metric is used.

        :return: The aggregation of this MetricsPostBodySchemaParameters.
        :rtype: List[str]
        """
        return self._aggregation

    @aggregation.setter
    def aggregation(self, aggregation):
        """Sets the aggregation of this MetricsPostBodySchemaParameters.

        The aggregation to use when computing the metric values. To retrieve more than one aggregation at a time, separate them with a comma. If no aggregation is specified, then the default aggregation for the metric is used.

        :param aggregation: The aggregation of this MetricsPostBodySchemaParameters.
        :type aggregation: List[str]
        """
        allowed_values = ["min", "max", "avg", "sum", "count", "unique"]  # noqa: E501
        if not set(aggregation).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `aggregation` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(aggregation) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._aggregation = aggregation

    @property
    def filter(self):
        """Gets the filter of this MetricsPostBodySchemaParameters.

        An expression used to filter the results.  This value should be a valid OData filter expression where the keys of each clause should be applicable dimensions for the metric you are retrieving.

        :return: The filter of this MetricsPostBodySchemaParameters.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this MetricsPostBodySchemaParameters.

        An expression used to filter the results.  This value should be a valid OData filter expression where the keys of each clause should be applicable dimensions for the metric you are retrieving.

        :param filter: The filter of this MetricsPostBodySchemaParameters.
        :type filter: str
        """

        self._filter = filter

    @property
    def interval(self):
        """Gets the interval of this MetricsPostBodySchemaParameters.

        The time interval to use when retrieving metric values. This is an ISO8601 duration. If interval is omitted, the metric value is aggregated across the entire timespan. If interval is supplied, the server may adjust the interval to a more appropriate size based on the timespan used for the query. In all cases, the actual interval used for the query is included in the response.

        :return: The interval of this MetricsPostBodySchemaParameters.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this MetricsPostBodySchemaParameters.

        The time interval to use when retrieving metric values. This is an ISO8601 duration. If interval is omitted, the metric value is aggregated across the entire timespan. If interval is supplied, the server may adjust the interval to a more appropriate size based on the timespan used for the query. In all cases, the actual interval used for the query is included in the response.

        :param interval: The interval of this MetricsPostBodySchemaParameters.
        :type interval: str
        """

        self._interval = interval

    @property
    def metric_id(self):
        """Gets the metric_id of this MetricsPostBodySchemaParameters.


        :return: The metric_id of this MetricsPostBodySchemaParameters.
        :rtype: MetricId
        """
        return self._metric_id

    @metric_id.setter
    def metric_id(self, metric_id):
        """Sets the metric_id of this MetricsPostBodySchemaParameters.


        :param metric_id: The metric_id of this MetricsPostBodySchemaParameters.
        :type metric_id: MetricId
        """
        if metric_id is None:
            raise ValueError("Invalid value for `metric_id`, must not be `None`")

        self._metric_id = metric_id

    @property
    def orderby(self):
        """Gets the orderby of this MetricsPostBodySchemaParameters.

        The aggregation function and direction to sort the segments by.  This value is only valid when segment is specified.

        :return: The orderby of this MetricsPostBodySchemaParameters.
        :rtype: str
        """
        return self._orderby

    @orderby.setter
    def orderby(self, orderby):
        """Sets the orderby of this MetricsPostBodySchemaParameters.

        The aggregation function and direction to sort the segments by.  This value is only valid when segment is specified.

        :param orderby: The orderby of this MetricsPostBodySchemaParameters.
        :type orderby: str
        """

        self._orderby = orderby

    @property
    def segment(self):
        """Gets the segment of this MetricsPostBodySchemaParameters.

        The name of the dimension to segment the metric values by. This dimension must be applicable to the metric you are retrieving. To segment by more than one dimension at a time, separate them with a comma (,). In this case, the metric data will be segmented in the order the dimensions are listed in the parameter.

        :return: The segment of this MetricsPostBodySchemaParameters.
        :rtype: List[str]
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this MetricsPostBodySchemaParameters.

        The name of the dimension to segment the metric values by. This dimension must be applicable to the metric you are retrieving. To segment by more than one dimension at a time, separate them with a comma (,). In this case, the metric data will be segmented in the order the dimensions are listed in the parameter.

        :param segment: The segment of this MetricsPostBodySchemaParameters.
        :type segment: List[str]
        """
        allowed_values = ["applicationBuild", "applicationVersion", "authenticatedOrAnonymousTraffic", "browser", "browserVersion", "city", "cloudRoleName", "cloudServiceName", "continent", "countryOrRegion", "deploymentId", "deploymentUnit", "deviceType", "environment", "hostingLocation", "instanceName"]  # noqa: E501
        if not set(segment).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `segment` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(segment) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._segment = segment

    @property
    def timespan(self):
        """Gets the timespan of this MetricsPostBodySchemaParameters.

        The timespan over which to retrieve metric values. This is an ISO8601 time period value. If timespan is omitted, a default time range of `PT12H` (\"last 12 hours\") is used. The actual timespan that is queried may be adjusted by the server based. In all cases, the actual time span used for the query is included in the response.

        :return: The timespan of this MetricsPostBodySchemaParameters.
        :rtype: str
        """
        return self._timespan

    @timespan.setter
    def timespan(self, timespan):
        """Sets the timespan of this MetricsPostBodySchemaParameters.

        The timespan over which to retrieve metric values. This is an ISO8601 time period value. If timespan is omitted, a default time range of `PT12H` (\"last 12 hours\") is used. The actual timespan that is queried may be adjusted by the server based. In all cases, the actual time span used for the query is included in the response.

        :param timespan: The timespan of this MetricsPostBodySchemaParameters.
        :type timespan: str
        """

        self._timespan = timespan

    @property
    def top(self):
        """Gets the top of this MetricsPostBodySchemaParameters.

        The number of segments to return.  This value is only valid when segment is specified.

        :return: The top of this MetricsPostBodySchemaParameters.
        :rtype: int
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this MetricsPostBodySchemaParameters.

        The number of segments to return.  This value is only valid when segment is specified.

        :param top: The top of this MetricsPostBodySchemaParameters.
        :type top: int
        """

        self._top = top
