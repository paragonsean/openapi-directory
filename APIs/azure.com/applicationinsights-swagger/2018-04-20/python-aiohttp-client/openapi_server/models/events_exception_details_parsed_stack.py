# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventsExceptionDetailsParsedStack(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assembly: str=None, level: int=None, line: int=None, method: str=None):
        """EventsExceptionDetailsParsedStack - a model defined in OpenAPI

        :param assembly: The assembly of this EventsExceptionDetailsParsedStack.
        :param level: The level of this EventsExceptionDetailsParsedStack.
        :param line: The line of this EventsExceptionDetailsParsedStack.
        :param method: The method of this EventsExceptionDetailsParsedStack.
        """
        self.openapi_types = {
            'assembly': str,
            'level': int,
            'line': int,
            'method': str
        }

        self.attribute_map = {
            'assembly': 'assembly',
            'level': 'level',
            'line': 'line',
            'method': 'method'
        }

        self._assembly = assembly
        self._level = level
        self._line = line
        self._method = method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsExceptionDetailsParsedStack':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The eventsExceptionDetailsParsedStack of this EventsExceptionDetailsParsedStack.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assembly(self):
        """Gets the assembly of this EventsExceptionDetailsParsedStack.

        The assembly of the stack entry

        :return: The assembly of this EventsExceptionDetailsParsedStack.
        :rtype: str
        """
        return self._assembly

    @assembly.setter
    def assembly(self, assembly):
        """Sets the assembly of this EventsExceptionDetailsParsedStack.

        The assembly of the stack entry

        :param assembly: The assembly of this EventsExceptionDetailsParsedStack.
        :type assembly: str
        """

        self._assembly = assembly

    @property
    def level(self):
        """Gets the level of this EventsExceptionDetailsParsedStack.

        The level of the stack entry

        :return: The level of this EventsExceptionDetailsParsedStack.
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this EventsExceptionDetailsParsedStack.

        The level of the stack entry

        :param level: The level of this EventsExceptionDetailsParsedStack.
        :type level: int
        """

        self._level = level

    @property
    def line(self):
        """Gets the line of this EventsExceptionDetailsParsedStack.

        The line of the stack entry

        :return: The line of this EventsExceptionDetailsParsedStack.
        :rtype: int
        """
        return self._line

    @line.setter
    def line(self, line):
        """Sets the line of this EventsExceptionDetailsParsedStack.

        The line of the stack entry

        :param line: The line of this EventsExceptionDetailsParsedStack.
        :type line: int
        """

        self._line = line

    @property
    def method(self):
        """Gets the method of this EventsExceptionDetailsParsedStack.

        The method of the stack entry

        :return: The method of this EventsExceptionDetailsParsedStack.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this EventsExceptionDetailsParsedStack.

        The method of the stack entry

        :param method: The method of this EventsExceptionDetailsParsedStack.
        :type method: str
        """

        self._method = method
