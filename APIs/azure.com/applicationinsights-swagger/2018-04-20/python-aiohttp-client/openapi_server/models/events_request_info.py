# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventsRequestInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: float=None, id: str=None, name: str=None, performance_bucket: str=None, result_code: str=None, source: str=None, success: str=None, url: str=None):
        """EventsRequestInfo - a model defined in OpenAPI

        :param duration: The duration of this EventsRequestInfo.
        :param id: The id of this EventsRequestInfo.
        :param name: The name of this EventsRequestInfo.
        :param performance_bucket: The performance_bucket of this EventsRequestInfo.
        :param result_code: The result_code of this EventsRequestInfo.
        :param source: The source of this EventsRequestInfo.
        :param success: The success of this EventsRequestInfo.
        :param url: The url of this EventsRequestInfo.
        """
        self.openapi_types = {
            'duration': float,
            'id': str,
            'name': str,
            'performance_bucket': str,
            'result_code': str,
            'source': str,
            'success': str,
            'url': str
        }

        self.attribute_map = {
            'duration': 'duration',
            'id': 'id',
            'name': 'name',
            'performance_bucket': 'performanceBucket',
            'result_code': 'resultCode',
            'source': 'source',
            'success': 'success',
            'url': 'url'
        }

        self._duration = duration
        self._id = id
        self._name = name
        self._performance_bucket = performance_bucket
        self._result_code = result_code
        self._source = source
        self._success = success
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsRequestInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The eventsRequestInfo of this EventsRequestInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this EventsRequestInfo.

        The duration of the request

        :return: The duration of this EventsRequestInfo.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this EventsRequestInfo.

        The duration of the request

        :param duration: The duration of this EventsRequestInfo.
        :type duration: float
        """

        self._duration = duration

    @property
    def id(self):
        """Gets the id of this EventsRequestInfo.

        The ID of the request

        :return: The id of this EventsRequestInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventsRequestInfo.

        The ID of the request

        :param id: The id of this EventsRequestInfo.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EventsRequestInfo.

        The name of the request

        :return: The name of this EventsRequestInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventsRequestInfo.

        The name of the request

        :param name: The name of this EventsRequestInfo.
        :type name: str
        """

        self._name = name

    @property
    def performance_bucket(self):
        """Gets the performance_bucket of this EventsRequestInfo.

        The performance bucket of the request

        :return: The performance_bucket of this EventsRequestInfo.
        :rtype: str
        """
        return self._performance_bucket

    @performance_bucket.setter
    def performance_bucket(self, performance_bucket):
        """Sets the performance_bucket of this EventsRequestInfo.

        The performance bucket of the request

        :param performance_bucket: The performance_bucket of this EventsRequestInfo.
        :type performance_bucket: str
        """

        self._performance_bucket = performance_bucket

    @property
    def result_code(self):
        """Gets the result_code of this EventsRequestInfo.

        The result code of the request

        :return: The result_code of this EventsRequestInfo.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this EventsRequestInfo.

        The result code of the request

        :param result_code: The result_code of this EventsRequestInfo.
        :type result_code: str
        """

        self._result_code = result_code

    @property
    def source(self):
        """Gets the source of this EventsRequestInfo.

        The source of the request

        :return: The source of this EventsRequestInfo.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this EventsRequestInfo.

        The source of the request

        :param source: The source of this EventsRequestInfo.
        :type source: str
        """

        self._source = source

    @property
    def success(self):
        """Gets the success of this EventsRequestInfo.

        Indicates if the request was successful

        :return: The success of this EventsRequestInfo.
        :rtype: str
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this EventsRequestInfo.

        Indicates if the request was successful

        :param success: The success of this EventsRequestInfo.
        :type success: str
        """

        self._success = success

    @property
    def url(self):
        """Gets the url of this EventsRequestInfo.

        The URL of the request

        :return: The url of this EventsRequestInfo.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this EventsRequestInfo.

        The URL of the request

        :param url: The url of this EventsRequestInfo.
        :type url: str
        """

        self._url = url
