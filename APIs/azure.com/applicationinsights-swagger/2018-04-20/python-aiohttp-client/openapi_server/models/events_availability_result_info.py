# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventsAvailabilityResultInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: int=None, id: str=None, location: str=None, message: str=None, name: str=None, performance_bucket: str=None, size: str=None, success: str=None):
        """EventsAvailabilityResultInfo - a model defined in OpenAPI

        :param duration: The duration of this EventsAvailabilityResultInfo.
        :param id: The id of this EventsAvailabilityResultInfo.
        :param location: The location of this EventsAvailabilityResultInfo.
        :param message: The message of this EventsAvailabilityResultInfo.
        :param name: The name of this EventsAvailabilityResultInfo.
        :param performance_bucket: The performance_bucket of this EventsAvailabilityResultInfo.
        :param size: The size of this EventsAvailabilityResultInfo.
        :param success: The success of this EventsAvailabilityResultInfo.
        """
        self.openapi_types = {
            'duration': int,
            'id': str,
            'location': str,
            'message': str,
            'name': str,
            'performance_bucket': str,
            'size': str,
            'success': str
        }

        self.attribute_map = {
            'duration': 'duration',
            'id': 'id',
            'location': 'location',
            'message': 'message',
            'name': 'name',
            'performance_bucket': 'performanceBucket',
            'size': 'size',
            'success': 'success'
        }

        self._duration = duration
        self._id = id
        self._location = location
        self._message = message
        self._name = name
        self._performance_bucket = performance_bucket
        self._size = size
        self._success = success

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsAvailabilityResultInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The eventsAvailabilityResultInfo of this EventsAvailabilityResultInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this EventsAvailabilityResultInfo.

        The duration of the availability result

        :return: The duration of this EventsAvailabilityResultInfo.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this EventsAvailabilityResultInfo.

        The duration of the availability result

        :param duration: The duration of this EventsAvailabilityResultInfo.
        :type duration: int
        """

        self._duration = duration

    @property
    def id(self):
        """Gets the id of this EventsAvailabilityResultInfo.

        The ID of the availability result

        :return: The id of this EventsAvailabilityResultInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventsAvailabilityResultInfo.

        The ID of the availability result

        :param id: The id of this EventsAvailabilityResultInfo.
        :type id: str
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this EventsAvailabilityResultInfo.

        The location of the availability result

        :return: The location of this EventsAvailabilityResultInfo.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this EventsAvailabilityResultInfo.

        The location of the availability result

        :param location: The location of this EventsAvailabilityResultInfo.
        :type location: str
        """

        self._location = location

    @property
    def message(self):
        """Gets the message of this EventsAvailabilityResultInfo.

        The message of the availability result

        :return: The message of this EventsAvailabilityResultInfo.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this EventsAvailabilityResultInfo.

        The message of the availability result

        :param message: The message of this EventsAvailabilityResultInfo.
        :type message: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this EventsAvailabilityResultInfo.

        The name of the availability result

        :return: The name of this EventsAvailabilityResultInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventsAvailabilityResultInfo.

        The name of the availability result

        :param name: The name of this EventsAvailabilityResultInfo.
        :type name: str
        """

        self._name = name

    @property
    def performance_bucket(self):
        """Gets the performance_bucket of this EventsAvailabilityResultInfo.

        The performance bucket of the availability result

        :return: The performance_bucket of this EventsAvailabilityResultInfo.
        :rtype: str
        """
        return self._performance_bucket

    @performance_bucket.setter
    def performance_bucket(self, performance_bucket):
        """Sets the performance_bucket of this EventsAvailabilityResultInfo.

        The performance bucket of the availability result

        :param performance_bucket: The performance_bucket of this EventsAvailabilityResultInfo.
        :type performance_bucket: str
        """

        self._performance_bucket = performance_bucket

    @property
    def size(self):
        """Gets the size of this EventsAvailabilityResultInfo.

        The size of the availability result

        :return: The size of this EventsAvailabilityResultInfo.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this EventsAvailabilityResultInfo.

        The size of the availability result

        :param size: The size of this EventsAvailabilityResultInfo.
        :type size: str
        """

        self._size = size

    @property
    def success(self):
        """Gets the success of this EventsAvailabilityResultInfo.

        Indicates if the availability result was successful

        :return: The success of this EventsAvailabilityResultInfo.
        :rtype: str
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this EventsAvailabilityResultInfo.

        Indicates if the availability result was successful

        :param success: The success of this EventsAvailabilityResultInfo.
        :type success: str
        """

        self._success = success
