# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.table import Table
from openapi_server import util


class QueryResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tables: List[Table]=None):
        """QueryResults - a model defined in OpenAPI

        :param tables: The tables of this QueryResults.
        """
        self.openapi_types = {
            'tables': List[Table]
        }

        self.attribute_map = {
            'tables': 'tables'
        }

        self._tables = tables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The queryResults of this QueryResults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tables(self):
        """Gets the tables of this QueryResults.

        The list of tables, columns and rows.

        :return: The tables of this QueryResults.
        :rtype: List[Table]
        """
        return self._tables

    @tables.setter
    def tables(self, tables):
        """Sets the tables of this QueryResults.

        The list of tables, columns and rows.

        :param tables: The tables of this QueryResults.
        :type tables: List[Table]
        """
        if tables is None:
            raise ValueError("Invalid value for `tables`, must not be `None`")

        self._tables = tables
