# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventsPerformanceCounterInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, counter: str=None, instance: str=None, instance_name: str=None, name: str=None, value: float=None):
        """EventsPerformanceCounterInfo - a model defined in OpenAPI

        :param category: The category of this EventsPerformanceCounterInfo.
        :param counter: The counter of this EventsPerformanceCounterInfo.
        :param instance: The instance of this EventsPerformanceCounterInfo.
        :param instance_name: The instance_name of this EventsPerformanceCounterInfo.
        :param name: The name of this EventsPerformanceCounterInfo.
        :param value: The value of this EventsPerformanceCounterInfo.
        """
        self.openapi_types = {
            'category': str,
            'counter': str,
            'instance': str,
            'instance_name': str,
            'name': str,
            'value': float
        }

        self.attribute_map = {
            'category': 'category',
            'counter': 'counter',
            'instance': 'instance',
            'instance_name': 'instanceName',
            'name': 'name',
            'value': 'value'
        }

        self._category = category
        self._counter = counter
        self._instance = instance
        self._instance_name = instance_name
        self._name = name
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsPerformanceCounterInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The eventsPerformanceCounterInfo of this EventsPerformanceCounterInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this EventsPerformanceCounterInfo.

        The category of the performance counter

        :return: The category of this EventsPerformanceCounterInfo.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EventsPerformanceCounterInfo.

        The category of the performance counter

        :param category: The category of this EventsPerformanceCounterInfo.
        :type category: str
        """

        self._category = category

    @property
    def counter(self):
        """Gets the counter of this EventsPerformanceCounterInfo.

        The counter of the performance counter

        :return: The counter of this EventsPerformanceCounterInfo.
        :rtype: str
        """
        return self._counter

    @counter.setter
    def counter(self, counter):
        """Sets the counter of this EventsPerformanceCounterInfo.

        The counter of the performance counter

        :param counter: The counter of this EventsPerformanceCounterInfo.
        :type counter: str
        """

        self._counter = counter

    @property
    def instance(self):
        """Gets the instance of this EventsPerformanceCounterInfo.

        The instance of the performance counter

        :return: The instance of this EventsPerformanceCounterInfo.
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this EventsPerformanceCounterInfo.

        The instance of the performance counter

        :param instance: The instance of this EventsPerformanceCounterInfo.
        :type instance: str
        """

        self._instance = instance

    @property
    def instance_name(self):
        """Gets the instance_name of this EventsPerformanceCounterInfo.

        The instance name of the performance counter

        :return: The instance_name of this EventsPerformanceCounterInfo.
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """Sets the instance_name of this EventsPerformanceCounterInfo.

        The instance name of the performance counter

        :param instance_name: The instance_name of this EventsPerformanceCounterInfo.
        :type instance_name: str
        """

        self._instance_name = instance_name

    @property
    def name(self):
        """Gets the name of this EventsPerformanceCounterInfo.

        The name of the performance counter

        :return: The name of this EventsPerformanceCounterInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventsPerformanceCounterInfo.

        The name of the performance counter

        :param name: The name of this EventsPerformanceCounterInfo.
        :type name: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this EventsPerformanceCounterInfo.

        The value of the performance counter

        :return: The value of this EventsPerformanceCounterInfo.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this EventsPerformanceCounterInfo.

        The value of the performance counter

        :param value: The value of this EventsPerformanceCounterInfo.
        :type value: float
        """

        self._value = value
