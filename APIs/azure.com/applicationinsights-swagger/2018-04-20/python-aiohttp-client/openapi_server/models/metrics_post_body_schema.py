# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metrics_post_body_schema_parameters import MetricsPostBodySchemaParameters
from openapi_server import util


class MetricsPostBodySchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, parameters: MetricsPostBodySchemaParameters=None):
        """MetricsPostBodySchema - a model defined in OpenAPI

        :param id: The id of this MetricsPostBodySchema.
        :param parameters: The parameters of this MetricsPostBodySchema.
        """
        self.openapi_types = {
            'id': str,
            'parameters': MetricsPostBodySchemaParameters
        }

        self.attribute_map = {
            'id': 'id',
            'parameters': 'parameters'
        }

        self._id = id
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricsPostBodySchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The metricsPostBodySchema of this MetricsPostBodySchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MetricsPostBodySchema.

        An identifier for this query.  Must be unique within the post body of the request.  This identifier will be the 'id' property of the response object representing this query.

        :return: The id of this MetricsPostBodySchema.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetricsPostBodySchema.

        An identifier for this query.  Must be unique within the post body of the request.  This identifier will be the 'id' property of the response object representing this query.

        :param id: The id of this MetricsPostBodySchema.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def parameters(self):
        """Gets the parameters of this MetricsPostBodySchema.


        :return: The parameters of this MetricsPostBodySchema.
        :rtype: MetricsPostBodySchemaParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this MetricsPostBodySchema.


        :param parameters: The parameters of this MetricsPostBodySchema.
        :type parameters: MetricsPostBodySchemaParameters
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters
