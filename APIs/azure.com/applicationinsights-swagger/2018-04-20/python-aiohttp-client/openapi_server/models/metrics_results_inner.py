# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metrics_result import MetricsResult
from openapi_server import util


class MetricsResultsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: MetricsResult=None, id: str=None, status: int=None):
        """MetricsResultsInner - a model defined in OpenAPI

        :param body: The body of this MetricsResultsInner.
        :param id: The id of this MetricsResultsInner.
        :param status: The status of this MetricsResultsInner.
        """
        self.openapi_types = {
            'body': MetricsResult,
            'id': str,
            'status': int
        }

        self.attribute_map = {
            'body': 'body',
            'id': 'id',
            'status': 'status'
        }

        self._body = body
        self._id = id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricsResultsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The metricsResults_inner of this MetricsResultsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this MetricsResultsInner.


        :return: The body of this MetricsResultsInner.
        :rtype: MetricsResult
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this MetricsResultsInner.


        :param body: The body of this MetricsResultsInner.
        :type body: MetricsResult
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body

    @property
    def id(self):
        """Gets the id of this MetricsResultsInner.

        The specified ID for this metric.

        :return: The id of this MetricsResultsInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetricsResultsInner.

        The specified ID for this metric.

        :param id: The id of this MetricsResultsInner.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def status(self):
        """Gets the status of this MetricsResultsInner.

        The HTTP status code of this metric query.

        :return: The status of this MetricsResultsInner.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MetricsResultsInner.

        The HTTP status code of this metric query.

        :param status: The status of this MetricsResultsInner.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
