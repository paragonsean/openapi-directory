/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricsSegmentInfo from './MetricsSegmentInfo';

/**
 * The MetricsResultInfo model module.
 * @module model/MetricsResultInfo
 * @version 2018-04-20
 */
class MetricsResultInfo {
    /**
     * Constructs a new <code>MetricsResultInfo</code>.
     * A metric result data.
     * @alias module:model/MetricsResultInfo
     * @extends Object
     */
    constructor() { 
        
        MetricsResultInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetricsResultInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricsResultInfo} obj Optional instance to populate.
     * @return {module:model/MetricsResultInfo} The populated <code>MetricsResultInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricsResultInfo();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('end')) {
                obj['end'] = ApiClient.convertToType(data['end'], 'String');
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = ApiClient.convertToType(data['interval'], 'String');
            }
            if (data.hasOwnProperty('segments')) {
                obj['segments'] = ApiClient.convertToType(data['segments'], [MetricsSegmentInfo]);
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricsResultInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricsResultInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['end'] && !(typeof data['end'] === 'string' || data['end'] instanceof String)) {
            throw new Error("Expected the field `end` to be a primitive type in the JSON string but got " + data['end']);
        }
        // ensure the json data is a string
        if (data['interval'] && !(typeof data['interval'] === 'string' || data['interval'] instanceof String)) {
            throw new Error("Expected the field `interval` to be a primitive type in the JSON string but got " + data['interval']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['segments'])) {
            throw new Error("Expected the field `segments` to be an array in the JSON data but got " + data['segments']);
        }
        // ensure the json data is a string
        if (data['start'] && !(typeof data['start'] === 'string' || data['start'] instanceof String)) {
            throw new Error("Expected the field `start` to be a primitive type in the JSON string but got " + data['start']);
        }

        return true;
    }


}



/**
 * Start time of the metric.
 * @member {String} end
 */
MetricsResultInfo.prototype['end'] = undefined;

/**
 * The interval used to segment the metric data.
 * @member {String} interval
 */
MetricsResultInfo.prototype['interval'] = undefined;

/**
 * Segmented metric data (if segmented).
 * @member {Array.<module:model/MetricsSegmentInfo>} segments
 */
MetricsResultInfo.prototype['segments'] = undefined;

/**
 * Start time of the metric.
 * @member {String} start
 */
MetricsResultInfo.prototype['start'] = undefined;






export default MetricsResultInfo;

