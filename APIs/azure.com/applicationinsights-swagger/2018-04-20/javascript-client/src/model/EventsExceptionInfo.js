/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventsExceptionDetail from './EventsExceptionDetail';

/**
 * The EventsExceptionInfo model module.
 * @module model/EventsExceptionInfo
 * @version 2018-04-20
 */
class EventsExceptionInfo {
    /**
     * Constructs a new <code>EventsExceptionInfo</code>.
     * The exception info
     * @alias module:model/EventsExceptionInfo
     */
    constructor() { 
        
        EventsExceptionInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventsExceptionInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventsExceptionInfo} obj Optional instance to populate.
     * @return {module:model/EventsExceptionInfo} The populated <code>EventsExceptionInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventsExceptionInfo();

            if (data.hasOwnProperty('assembly')) {
                obj['assembly'] = ApiClient.convertToType(data['assembly'], 'String');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], [EventsExceptionDetail]);
            }
            if (data.hasOwnProperty('handledAt')) {
                obj['handledAt'] = ApiClient.convertToType(data['handledAt'], 'String');
            }
            if (data.hasOwnProperty('innermostAssembly')) {
                obj['innermostAssembly'] = ApiClient.convertToType(data['innermostAssembly'], 'String');
            }
            if (data.hasOwnProperty('innermostMessage')) {
                obj['innermostMessage'] = ApiClient.convertToType(data['innermostMessage'], 'String');
            }
            if (data.hasOwnProperty('innermostMethod')) {
                obj['innermostMethod'] = ApiClient.convertToType(data['innermostMethod'], 'String');
            }
            if (data.hasOwnProperty('innermostType')) {
                obj['innermostType'] = ApiClient.convertToType(data['innermostType'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('outerAssembly')) {
                obj['outerAssembly'] = ApiClient.convertToType(data['outerAssembly'], 'String');
            }
            if (data.hasOwnProperty('outerMessage')) {
                obj['outerMessage'] = ApiClient.convertToType(data['outerMessage'], 'String');
            }
            if (data.hasOwnProperty('outerMethod')) {
                obj['outerMethod'] = ApiClient.convertToType(data['outerMethod'], 'String');
            }
            if (data.hasOwnProperty('outerType')) {
                obj['outerType'] = ApiClient.convertToType(data['outerType'], 'String');
            }
            if (data.hasOwnProperty('problemId')) {
                obj['problemId'] = ApiClient.convertToType(data['problemId'], 'String');
            }
            if (data.hasOwnProperty('severityLevel')) {
                obj['severityLevel'] = ApiClient.convertToType(data['severityLevel'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventsExceptionInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventsExceptionInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['assembly'] && !(typeof data['assembly'] === 'string' || data['assembly'] instanceof String)) {
            throw new Error("Expected the field `assembly` to be a primitive type in the JSON string but got " + data['assembly']);
        }
        if (data['details']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['details'])) {
                throw new Error("Expected the field `details` to be an array in the JSON data but got " + data['details']);
            }
            // validate the optional field `details` (array)
            for (const item of data['details']) {
                EventsExceptionDetail.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['handledAt'] && !(typeof data['handledAt'] === 'string' || data['handledAt'] instanceof String)) {
            throw new Error("Expected the field `handledAt` to be a primitive type in the JSON string but got " + data['handledAt']);
        }
        // ensure the json data is a string
        if (data['innermostAssembly'] && !(typeof data['innermostAssembly'] === 'string' || data['innermostAssembly'] instanceof String)) {
            throw new Error("Expected the field `innermostAssembly` to be a primitive type in the JSON string but got " + data['innermostAssembly']);
        }
        // ensure the json data is a string
        if (data['innermostMessage'] && !(typeof data['innermostMessage'] === 'string' || data['innermostMessage'] instanceof String)) {
            throw new Error("Expected the field `innermostMessage` to be a primitive type in the JSON string but got " + data['innermostMessage']);
        }
        // ensure the json data is a string
        if (data['innermostMethod'] && !(typeof data['innermostMethod'] === 'string' || data['innermostMethod'] instanceof String)) {
            throw new Error("Expected the field `innermostMethod` to be a primitive type in the JSON string but got " + data['innermostMethod']);
        }
        // ensure the json data is a string
        if (data['innermostType'] && !(typeof data['innermostType'] === 'string' || data['innermostType'] instanceof String)) {
            throw new Error("Expected the field `innermostType` to be a primitive type in the JSON string but got " + data['innermostType']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // ensure the json data is a string
        if (data['outerAssembly'] && !(typeof data['outerAssembly'] === 'string' || data['outerAssembly'] instanceof String)) {
            throw new Error("Expected the field `outerAssembly` to be a primitive type in the JSON string but got " + data['outerAssembly']);
        }
        // ensure the json data is a string
        if (data['outerMessage'] && !(typeof data['outerMessage'] === 'string' || data['outerMessage'] instanceof String)) {
            throw new Error("Expected the field `outerMessage` to be a primitive type in the JSON string but got " + data['outerMessage']);
        }
        // ensure the json data is a string
        if (data['outerMethod'] && !(typeof data['outerMethod'] === 'string' || data['outerMethod'] instanceof String)) {
            throw new Error("Expected the field `outerMethod` to be a primitive type in the JSON string but got " + data['outerMethod']);
        }
        // ensure the json data is a string
        if (data['outerType'] && !(typeof data['outerType'] === 'string' || data['outerType'] instanceof String)) {
            throw new Error("Expected the field `outerType` to be a primitive type in the JSON string but got " + data['outerType']);
        }
        // ensure the json data is a string
        if (data['problemId'] && !(typeof data['problemId'] === 'string' || data['problemId'] instanceof String)) {
            throw new Error("Expected the field `problemId` to be a primitive type in the JSON string but got " + data['problemId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The assembly which threw the exception
 * @member {String} assembly
 */
EventsExceptionInfo.prototype['assembly'] = undefined;

/**
 * The details of the exception
 * @member {Array.<module:model/EventsExceptionDetail>} details
 */
EventsExceptionInfo.prototype['details'] = undefined;

/**
 * Indicates where the exception was handled at
 * @member {String} handledAt
 */
EventsExceptionInfo.prototype['handledAt'] = undefined;

/**
 * The inner most assembly of the exception
 * @member {String} innermostAssembly
 */
EventsExceptionInfo.prototype['innermostAssembly'] = undefined;

/**
 * The inner most message of the exception
 * @member {String} innermostMessage
 */
EventsExceptionInfo.prototype['innermostMessage'] = undefined;

/**
 * The inner most method of the exception
 * @member {String} innermostMethod
 */
EventsExceptionInfo.prototype['innermostMethod'] = undefined;

/**
 * The inner most type of the exception
 * @member {String} innermostType
 */
EventsExceptionInfo.prototype['innermostType'] = undefined;

/**
 * The message of the exception
 * @member {String} message
 */
EventsExceptionInfo.prototype['message'] = undefined;

/**
 * The method that threw the exception
 * @member {String} method
 */
EventsExceptionInfo.prototype['method'] = undefined;

/**
 * The outer assembly of the exception
 * @member {String} outerAssembly
 */
EventsExceptionInfo.prototype['outerAssembly'] = undefined;

/**
 * The outer message of the exception
 * @member {String} outerMessage
 */
EventsExceptionInfo.prototype['outerMessage'] = undefined;

/**
 * The outer method of the exception
 * @member {String} outerMethod
 */
EventsExceptionInfo.prototype['outerMethod'] = undefined;

/**
 * The outer type of the exception
 * @member {String} outerType
 */
EventsExceptionInfo.prototype['outerType'] = undefined;

/**
 * The problem ID of the exception
 * @member {String} problemId
 */
EventsExceptionInfo.prototype['problemId'] = undefined;

/**
 * The severity level of the exception
 * @member {Number} severityLevel
 */
EventsExceptionInfo.prototype['severityLevel'] = undefined;

/**
 * The type of the exception
 * @member {String} type
 */
EventsExceptionInfo.prototype['type'] = undefined;






export default EventsExceptionInfo;

