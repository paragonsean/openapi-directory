/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventsExceptionDetailsParsedStack from './EventsExceptionDetailsParsedStack';

/**
 * The EventsExceptionDetail model module.
 * @module model/EventsExceptionDetail
 * @version 2018-04-20
 */
class EventsExceptionDetail {
    /**
     * Constructs a new <code>EventsExceptionDetail</code>.
     * Exception details
     * @alias module:model/EventsExceptionDetail
     */
    constructor() { 
        
        EventsExceptionDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventsExceptionDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventsExceptionDetail} obj Optional instance to populate.
     * @return {module:model/EventsExceptionDetail} The populated <code>EventsExceptionDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventsExceptionDetail();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('outerId')) {
                obj['outerId'] = ApiClient.convertToType(data['outerId'], 'String');
            }
            if (data.hasOwnProperty('parsedStack')) {
                obj['parsedStack'] = ApiClient.convertToType(data['parsedStack'], [EventsExceptionDetailsParsedStack]);
            }
            if (data.hasOwnProperty('severityLevel')) {
                obj['severityLevel'] = ApiClient.convertToType(data['severityLevel'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventsExceptionDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventsExceptionDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['outerId'] && !(typeof data['outerId'] === 'string' || data['outerId'] instanceof String)) {
            throw new Error("Expected the field `outerId` to be a primitive type in the JSON string but got " + data['outerId']);
        }
        if (data['parsedStack']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parsedStack'])) {
                throw new Error("Expected the field `parsedStack` to be an array in the JSON data but got " + data['parsedStack']);
            }
            // validate the optional field `parsedStack` (array)
            for (const item of data['parsedStack']) {
                EventsExceptionDetailsParsedStack.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['severityLevel'] && !(typeof data['severityLevel'] === 'string' || data['severityLevel'] instanceof String)) {
            throw new Error("Expected the field `severityLevel` to be a primitive type in the JSON string but got " + data['severityLevel']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The ID of the exception detail
 * @member {String} id
 */
EventsExceptionDetail.prototype['id'] = undefined;

/**
 * The message of the exception detail
 * @member {String} message
 */
EventsExceptionDetail.prototype['message'] = undefined;

/**
 * The outer ID of the exception detail
 * @member {String} outerId
 */
EventsExceptionDetail.prototype['outerId'] = undefined;

/**
 * The parsed stack
 * @member {Array.<module:model/EventsExceptionDetailsParsedStack>} parsedStack
 */
EventsExceptionDetail.prototype['parsedStack'] = undefined;

/**
 * The severity level of the exception detail
 * @member {String} severityLevel
 */
EventsExceptionDetail.prototype['severityLevel'] = undefined;

/**
 * The type of the exception detail
 * @member {String} type
 */
EventsExceptionDetail.prototype['type'] = undefined;






export default EventsExceptionDetail;

