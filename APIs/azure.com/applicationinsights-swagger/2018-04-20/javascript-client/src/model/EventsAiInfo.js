/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventsAiInfo model module.
 * @module model/EventsAiInfo
 * @version 2018-04-20
 */
class EventsAiInfo {
    /**
     * Constructs a new <code>EventsAiInfo</code>.
     * AI related application info for an event result
     * @alias module:model/EventsAiInfo
     */
    constructor() { 
        
        EventsAiInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventsAiInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventsAiInfo} obj Optional instance to populate.
     * @return {module:model/EventsAiInfo} The populated <code>EventsAiInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventsAiInfo();

            if (data.hasOwnProperty('appId')) {
                obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
            }
            if (data.hasOwnProperty('appName')) {
                obj['appName'] = ApiClient.convertToType(data['appName'], 'String');
            }
            if (data.hasOwnProperty('iKey')) {
                obj['iKey'] = ApiClient.convertToType(data['iKey'], 'String');
            }
            if (data.hasOwnProperty('sdkVersion')) {
                obj['sdkVersion'] = ApiClient.convertToType(data['sdkVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventsAiInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventsAiInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['appId'] && !(typeof data['appId'] === 'string' || data['appId'] instanceof String)) {
            throw new Error("Expected the field `appId` to be a primitive type in the JSON string but got " + data['appId']);
        }
        // ensure the json data is a string
        if (data['appName'] && !(typeof data['appName'] === 'string' || data['appName'] instanceof String)) {
            throw new Error("Expected the field `appName` to be a primitive type in the JSON string but got " + data['appName']);
        }
        // ensure the json data is a string
        if (data['iKey'] && !(typeof data['iKey'] === 'string' || data['iKey'] instanceof String)) {
            throw new Error("Expected the field `iKey` to be a primitive type in the JSON string but got " + data['iKey']);
        }
        // ensure the json data is a string
        if (data['sdkVersion'] && !(typeof data['sdkVersion'] === 'string' || data['sdkVersion'] instanceof String)) {
            throw new Error("Expected the field `sdkVersion` to be a primitive type in the JSON string but got " + data['sdkVersion']);
        }

        return true;
    }


}



/**
 * ID of the application
 * @member {String} appId
 */
EventsAiInfo.prototype['appId'] = undefined;

/**
 * Name of the application
 * @member {String} appName
 */
EventsAiInfo.prototype['appName'] = undefined;

/**
 * iKey of the app
 * @member {String} iKey
 */
EventsAiInfo.prototype['iKey'] = undefined;

/**
 * SDK version of the application
 * @member {String} sdkVersion
 */
EventsAiInfo.prototype['sdkVersion'] = undefined;






export default EventsAiInfo;

