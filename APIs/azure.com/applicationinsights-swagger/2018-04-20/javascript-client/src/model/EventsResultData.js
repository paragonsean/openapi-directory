/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventType from './EventType';
import EventsAiInfo from './EventsAiInfo';
import EventsApplicationInfo from './EventsApplicationInfo';
import EventsClientInfo from './EventsClientInfo';
import EventsCloudInfo from './EventsCloudInfo';
import EventsOperationInfo from './EventsOperationInfo';
import EventsResultDataCustomDimensions from './EventsResultDataCustomDimensions';
import EventsResultDataCustomMeasurements from './EventsResultDataCustomMeasurements';
import EventsSessionInfo from './EventsSessionInfo';
import EventsUserInfo from './EventsUserInfo';

/**
 * The EventsResultData model module.
 * @module model/EventsResultData
 * @version 2018-04-20
 */
class EventsResultData {
    /**
     * Constructs a new <code>EventsResultData</code>.
     * Events query result data.
     * @alias module:model/EventsResultData
     */
    constructor() { 
        
        EventsResultData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventsResultData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventsResultData} obj Optional instance to populate.
     * @return {module:model/EventsResultData} The populated <code>EventsResultData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventsResultData();

            if (data.hasOwnProperty('ai')) {
                obj['ai'] = EventsAiInfo.constructFromObject(data['ai']);
            }
            if (data.hasOwnProperty('application')) {
                obj['application'] = EventsApplicationInfo.constructFromObject(data['application']);
            }
            if (data.hasOwnProperty('client')) {
                obj['client'] = EventsClientInfo.constructFromObject(data['client']);
            }
            if (data.hasOwnProperty('cloud')) {
                obj['cloud'] = EventsCloudInfo.constructFromObject(data['cloud']);
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('customDimensions')) {
                obj['customDimensions'] = EventsResultDataCustomDimensions.constructFromObject(data['customDimensions']);
            }
            if (data.hasOwnProperty('customMeasurements')) {
                obj['customMeasurements'] = EventsResultDataCustomMeasurements.constructFromObject(data['customMeasurements']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('operation')) {
                obj['operation'] = EventsOperationInfo.constructFromObject(data['operation']);
            }
            if (data.hasOwnProperty('session')) {
                obj['session'] = EventsSessionInfo.constructFromObject(data['session']);
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = EventType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = EventsUserInfo.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventsResultData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventsResultData</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ai`
        if (data['ai']) { // data not null
          EventsAiInfo.validateJSON(data['ai']);
        }
        // validate the optional field `application`
        if (data['application']) { // data not null
          EventsApplicationInfo.validateJSON(data['application']);
        }
        // validate the optional field `client`
        if (data['client']) { // data not null
          EventsClientInfo.validateJSON(data['client']);
        }
        // validate the optional field `cloud`
        if (data['cloud']) { // data not null
          EventsCloudInfo.validateJSON(data['cloud']);
        }
        // validate the optional field `customDimensions`
        if (data['customDimensions']) { // data not null
          EventsResultDataCustomDimensions.validateJSON(data['customDimensions']);
        }
        // validate the optional field `customMeasurements`
        if (data['customMeasurements']) { // data not null
          EventsResultDataCustomMeasurements.validateJSON(data['customMeasurements']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `operation`
        if (data['operation']) { // data not null
          EventsOperationInfo.validateJSON(data['operation']);
        }
        // validate the optional field `session`
        if (data['session']) { // data not null
          EventsSessionInfo.validateJSON(data['session']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          EventsUserInfo.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * @member {module:model/EventsAiInfo} ai
 */
EventsResultData.prototype['ai'] = undefined;

/**
 * @member {module:model/EventsApplicationInfo} application
 */
EventsResultData.prototype['application'] = undefined;

/**
 * @member {module:model/EventsClientInfo} client
 */
EventsResultData.prototype['client'] = undefined;

/**
 * @member {module:model/EventsCloudInfo} cloud
 */
EventsResultData.prototype['cloud'] = undefined;

/**
 * Count of the event
 * @member {Number} count
 */
EventsResultData.prototype['count'] = undefined;

/**
 * @member {module:model/EventsResultDataCustomDimensions} customDimensions
 */
EventsResultData.prototype['customDimensions'] = undefined;

/**
 * @member {module:model/EventsResultDataCustomMeasurements} customMeasurements
 */
EventsResultData.prototype['customMeasurements'] = undefined;

/**
 * The unique ID for this event.
 * @member {String} id
 */
EventsResultData.prototype['id'] = undefined;

/**
 * @member {module:model/EventsOperationInfo} operation
 */
EventsResultData.prototype['operation'] = undefined;

/**
 * @member {module:model/EventsSessionInfo} session
 */
EventsResultData.prototype['session'] = undefined;

/**
 * Timestamp of the event
 * @member {Date} timestamp
 */
EventsResultData.prototype['timestamp'] = undefined;

/**
 * @member {module:model/EventType} type
 */
EventsResultData.prototype['type'] = undefined;

/**
 * @member {module:model/EventsUserInfo} user
 */
EventsResultData.prototype['user'] = undefined;






export default EventsResultData;

