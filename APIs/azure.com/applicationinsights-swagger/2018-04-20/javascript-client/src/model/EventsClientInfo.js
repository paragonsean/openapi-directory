/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventsClientInfo model module.
 * @module model/EventsClientInfo
 * @version 2018-04-20
 */
class EventsClientInfo {
    /**
     * Constructs a new <code>EventsClientInfo</code>.
     * Client info for an event result
     * @alias module:model/EventsClientInfo
     */
    constructor() { 
        
        EventsClientInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventsClientInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventsClientInfo} obj Optional instance to populate.
     * @return {module:model/EventsClientInfo} The populated <code>EventsClientInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventsClientInfo();

            if (data.hasOwnProperty('browser')) {
                obj['browser'] = ApiClient.convertToType(data['browser'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('countryOrRegion')) {
                obj['countryOrRegion'] = ApiClient.convertToType(data['countryOrRegion'], 'String');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('os')) {
                obj['os'] = ApiClient.convertToType(data['os'], 'String');
            }
            if (data.hasOwnProperty('stateOrProvince')) {
                obj['stateOrProvince'] = ApiClient.convertToType(data['stateOrProvince'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventsClientInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventsClientInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['browser'] && !(typeof data['browser'] === 'string' || data['browser'] instanceof String)) {
            throw new Error("Expected the field `browser` to be a primitive type in the JSON string but got " + data['browser']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['countryOrRegion'] && !(typeof data['countryOrRegion'] === 'string' || data['countryOrRegion'] instanceof String)) {
            throw new Error("Expected the field `countryOrRegion` to be a primitive type in the JSON string but got " + data['countryOrRegion']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['os'] && !(typeof data['os'] === 'string' || data['os'] instanceof String)) {
            throw new Error("Expected the field `os` to be a primitive type in the JSON string but got " + data['os']);
        }
        // ensure the json data is a string
        if (data['stateOrProvince'] && !(typeof data['stateOrProvince'] === 'string' || data['stateOrProvince'] instanceof String)) {
            throw new Error("Expected the field `stateOrProvince` to be a primitive type in the JSON string but got " + data['stateOrProvince']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Browser of the client
 * @member {String} browser
 */
EventsClientInfo.prototype['browser'] = undefined;

/**
 * City of the client
 * @member {String} city
 */
EventsClientInfo.prototype['city'] = undefined;

/**
 * Country or region of the client
 * @member {String} countryOrRegion
 */
EventsClientInfo.prototype['countryOrRegion'] = undefined;

/**
 * IP address of the client
 * @member {String} ip
 */
EventsClientInfo.prototype['ip'] = undefined;

/**
 * Model of the client
 * @member {String} model
 */
EventsClientInfo.prototype['model'] = undefined;

/**
 * Operating system of the client
 * @member {String} os
 */
EventsClientInfo.prototype['os'] = undefined;

/**
 * State or province of the client
 * @member {String} stateOrProvince
 */
EventsClientInfo.prototype['stateOrProvince'] = undefined;

/**
 * Type of the client
 * @member {String} type
 */
EventsClientInfo.prototype['type'] = undefined;






export default EventsClientInfo;

