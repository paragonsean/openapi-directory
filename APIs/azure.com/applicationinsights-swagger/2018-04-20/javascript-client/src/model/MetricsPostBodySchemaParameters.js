/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricId from './MetricId';

/**
 * The MetricsPostBodySchemaParameters model module.
 * @module model/MetricsPostBodySchemaParameters
 * @version 2018-04-20
 */
class MetricsPostBodySchemaParameters {
    /**
     * Constructs a new <code>MetricsPostBodySchemaParameters</code>.
     * The parameters for a single metrics query
     * @alias module:model/MetricsPostBodySchemaParameters
     * @param metricId {module:model/MetricId} 
     */
    constructor(metricId) { 
        
        MetricsPostBodySchemaParameters.initialize(this, metricId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, metricId) { 
        obj['metricId'] = metricId;
    }

    /**
     * Constructs a <code>MetricsPostBodySchemaParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricsPostBodySchemaParameters} obj Optional instance to populate.
     * @return {module:model/MetricsPostBodySchemaParameters} The populated <code>MetricsPostBodySchemaParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricsPostBodySchemaParameters();

            if (data.hasOwnProperty('aggregation')) {
                obj['aggregation'] = ApiClient.convertToType(data['aggregation'], ['String']);
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
            if (data.hasOwnProperty('interval')) {
                obj['interval'] = ApiClient.convertToType(data['interval'], 'String');
            }
            if (data.hasOwnProperty('metricId')) {
                obj['metricId'] = MetricId.constructFromObject(data['metricId']);
            }
            if (data.hasOwnProperty('orderby')) {
                obj['orderby'] = ApiClient.convertToType(data['orderby'], 'String');
            }
            if (data.hasOwnProperty('segment')) {
                obj['segment'] = ApiClient.convertToType(data['segment'], ['String']);
            }
            if (data.hasOwnProperty('timespan')) {
                obj['timespan'] = ApiClient.convertToType(data['timespan'], 'String');
            }
            if (data.hasOwnProperty('top')) {
                obj['top'] = ApiClient.convertToType(data['top'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricsPostBodySchemaParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricsPostBodySchemaParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MetricsPostBodySchemaParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['aggregation'])) {
            throw new Error("Expected the field `aggregation` to be an array in the JSON data but got " + data['aggregation']);
        }
        // ensure the json data is a string
        if (data['filter'] && !(typeof data['filter'] === 'string' || data['filter'] instanceof String)) {
            throw new Error("Expected the field `filter` to be a primitive type in the JSON string but got " + data['filter']);
        }
        // ensure the json data is a string
        if (data['interval'] && !(typeof data['interval'] === 'string' || data['interval'] instanceof String)) {
            throw new Error("Expected the field `interval` to be a primitive type in the JSON string but got " + data['interval']);
        }
        // ensure the json data is a string
        if (data['orderby'] && !(typeof data['orderby'] === 'string' || data['orderby'] instanceof String)) {
            throw new Error("Expected the field `orderby` to be a primitive type in the JSON string but got " + data['orderby']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['segment'])) {
            throw new Error("Expected the field `segment` to be an array in the JSON data but got " + data['segment']);
        }
        // ensure the json data is a string
        if (data['timespan'] && !(typeof data['timespan'] === 'string' || data['timespan'] instanceof String)) {
            throw new Error("Expected the field `timespan` to be a primitive type in the JSON string but got " + data['timespan']);
        }

        return true;
    }


}

MetricsPostBodySchemaParameters.RequiredProperties = ["metricId"];

/**
 * The aggregation to use when computing the metric values. To retrieve more than one aggregation at a time, separate them with a comma. If no aggregation is specified, then the default aggregation for the metric is used.
 * @member {Array.<module:model/MetricsPostBodySchemaParameters.AggregationEnum>} aggregation
 */
MetricsPostBodySchemaParameters.prototype['aggregation'] = undefined;

/**
 * An expression used to filter the results.  This value should be a valid OData filter expression where the keys of each clause should be applicable dimensions for the metric you are retrieving.
 * @member {String} filter
 */
MetricsPostBodySchemaParameters.prototype['filter'] = undefined;

/**
 * The time interval to use when retrieving metric values. This is an ISO8601 duration. If interval is omitted, the metric value is aggregated across the entire timespan. If interval is supplied, the server may adjust the interval to a more appropriate size based on the timespan used for the query. In all cases, the actual interval used for the query is included in the response.
 * @member {String} interval
 */
MetricsPostBodySchemaParameters.prototype['interval'] = undefined;

/**
 * @member {module:model/MetricId} metricId
 */
MetricsPostBodySchemaParameters.prototype['metricId'] = undefined;

/**
 * The aggregation function and direction to sort the segments by.  This value is only valid when segment is specified.
 * @member {String} orderby
 */
MetricsPostBodySchemaParameters.prototype['orderby'] = undefined;

/**
 * The name of the dimension to segment the metric values by. This dimension must be applicable to the metric you are retrieving. To segment by more than one dimension at a time, separate them with a comma (,). In this case, the metric data will be segmented in the order the dimensions are listed in the parameter.
 * @member {Array.<module:model/MetricsPostBodySchemaParameters.SegmentEnum>} segment
 */
MetricsPostBodySchemaParameters.prototype['segment'] = undefined;

/**
 * The timespan over which to retrieve metric values. This is an ISO8601 time period value. If timespan is omitted, a default time range of `PT12H` (\"last 12 hours\") is used. The actual timespan that is queried may be adjusted by the server based. In all cases, the actual time span used for the query is included in the response.
 * @member {String} timespan
 */
MetricsPostBodySchemaParameters.prototype['timespan'] = undefined;

/**
 * The number of segments to return.  This value is only valid when segment is specified.
 * @member {Number} top
 */
MetricsPostBodySchemaParameters.prototype['top'] = undefined;





/**
 * Allowed values for the <code>aggregation</code> property.
 * @enum {String}
 * @readonly
 */
MetricsPostBodySchemaParameters['AggregationEnum'] = {

    /**
     * value: "min"
     * @const
     */
    "min": "min",

    /**
     * value: "max"
     * @const
     */
    "max": "max",

    /**
     * value: "avg"
     * @const
     */
    "avg": "avg",

    /**
     * value: "sum"
     * @const
     */
    "sum": "sum",

    /**
     * value: "count"
     * @const
     */
    "count": "count",

    /**
     * value: "unique"
     * @const
     */
    "unique": "unique"
};


/**
 * Allowed values for the <code>segment</code> property.
 * @enum {String}
 * @readonly
 */
MetricsPostBodySchemaParameters['SegmentEnum'] = {

    /**
     * value: "applicationBuild"
     * @const
     */
    "applicationBuild": "applicationBuild",

    /**
     * value: "applicationVersion"
     * @const
     */
    "applicationVersion": "applicationVersion",

    /**
     * value: "authenticatedOrAnonymousTraffic"
     * @const
     */
    "authenticatedOrAnonymousTraffic": "authenticatedOrAnonymousTraffic",

    /**
     * value: "browser"
     * @const
     */
    "browser": "browser",

    /**
     * value: "browserVersion"
     * @const
     */
    "browserVersion": "browserVersion",

    /**
     * value: "city"
     * @const
     */
    "city": "city",

    /**
     * value: "cloudRoleName"
     * @const
     */
    "cloudRoleName": "cloudRoleName",

    /**
     * value: "cloudServiceName"
     * @const
     */
    "cloudServiceName": "cloudServiceName",

    /**
     * value: "continent"
     * @const
     */
    "continent": "continent",

    /**
     * value: "countryOrRegion"
     * @const
     */
    "countryOrRegion": "countryOrRegion",

    /**
     * value: "deploymentId"
     * @const
     */
    "deploymentId": "deploymentId",

    /**
     * value: "deploymentUnit"
     * @const
     */
    "deploymentUnit": "deploymentUnit",

    /**
     * value: "deviceType"
     * @const
     */
    "deviceType": "deviceType",

    /**
     * value: "environment"
     * @const
     */
    "environment": "environment",

    /**
     * value: "hostingLocation"
     * @const
     */
    "hostingLocation": "hostingLocation",

    /**
     * value: "instanceName"
     * @const
     */
    "instanceName": "instanceName"
};



export default MetricsPostBodySchemaParameters;

