/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventsDependencyInfo model module.
 * @module model/EventsDependencyInfo
 * @version 2018-04-20
 */
class EventsDependencyInfo {
    /**
     * Constructs a new <code>EventsDependencyInfo</code>.
     * The dependency info
     * @alias module:model/EventsDependencyInfo
     */
    constructor() { 
        
        EventsDependencyInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventsDependencyInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventsDependencyInfo} obj Optional instance to populate.
     * @return {module:model/EventsDependencyInfo} The populated <code>EventsDependencyInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventsDependencyInfo();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('performanceBucket')) {
                obj['performanceBucket'] = ApiClient.convertToType(data['performanceBucket'], 'String');
            }
            if (data.hasOwnProperty('resultCode')) {
                obj['resultCode'] = ApiClient.convertToType(data['resultCode'], 'String');
            }
            if (data.hasOwnProperty('success')) {
                obj['success'] = ApiClient.convertToType(data['success'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventsDependencyInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventsDependencyInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['data'] && !(typeof data['data'] === 'string' || data['data'] instanceof String)) {
            throw new Error("Expected the field `data` to be a primitive type in the JSON string but got " + data['data']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['performanceBucket'] && !(typeof data['performanceBucket'] === 'string' || data['performanceBucket'] instanceof String)) {
            throw new Error("Expected the field `performanceBucket` to be a primitive type in the JSON string but got " + data['performanceBucket']);
        }
        // ensure the json data is a string
        if (data['resultCode'] && !(typeof data['resultCode'] === 'string' || data['resultCode'] instanceof String)) {
            throw new Error("Expected the field `resultCode` to be a primitive type in the JSON string but got " + data['resultCode']);
        }
        // ensure the json data is a string
        if (data['success'] && !(typeof data['success'] === 'string' || data['success'] instanceof String)) {
            throw new Error("Expected the field `success` to be a primitive type in the JSON string but got " + data['success']);
        }
        // ensure the json data is a string
        if (data['target'] && !(typeof data['target'] === 'string' || data['target'] instanceof String)) {
            throw new Error("Expected the field `target` to be a primitive type in the JSON string but got " + data['target']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The data of the dependency
 * @member {String} data
 */
EventsDependencyInfo.prototype['data'] = undefined;

/**
 * The duration of the dependency
 * @member {Number} duration
 */
EventsDependencyInfo.prototype['duration'] = undefined;

/**
 * The ID of the dependency
 * @member {String} id
 */
EventsDependencyInfo.prototype['id'] = undefined;

/**
 * The name of the dependency
 * @member {String} name
 */
EventsDependencyInfo.prototype['name'] = undefined;

/**
 * The performance bucket of the dependency
 * @member {String} performanceBucket
 */
EventsDependencyInfo.prototype['performanceBucket'] = undefined;

/**
 * The result code of the dependency
 * @member {String} resultCode
 */
EventsDependencyInfo.prototype['resultCode'] = undefined;

/**
 * Indicates if the dependency was successful
 * @member {String} success
 */
EventsDependencyInfo.prototype['success'] = undefined;

/**
 * The target of the dependency
 * @member {String} target
 */
EventsDependencyInfo.prototype['target'] = undefined;

/**
 * The type of the dependency
 * @member {String} type
 */
EventsDependencyInfo.prototype['type'] = undefined;






export default EventsDependencyInfo;

