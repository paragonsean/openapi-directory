/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
/**
* Enum class MetricId.
* @enum {}
* @readonly
*/
export default class MetricId {
    
        /**
         * value: "requests/count"
         * @const
         */
        "requests/count" = "requests/count";

    
        /**
         * value: "requests/duration"
         * @const
         */
        "requests/duration" = "requests/duration";

    
        /**
         * value: "requests/failed"
         * @const
         */
        "requests/failed" = "requests/failed";

    
        /**
         * value: "users/count"
         * @const
         */
        "users/count" = "users/count";

    
        /**
         * value: "users/authenticated"
         * @const
         */
        "users/authenticated" = "users/authenticated";

    
        /**
         * value: "pageViews/count"
         * @const
         */
        "pageViews/count" = "pageViews/count";

    
        /**
         * value: "pageViews/duration"
         * @const
         */
        "pageViews/duration" = "pageViews/duration";

    
        /**
         * value: "client/processingDuration"
         * @const
         */
        "client/processingDuration" = "client/processingDuration";

    
        /**
         * value: "client/receiveDuration"
         * @const
         */
        "client/receiveDuration" = "client/receiveDuration";

    
        /**
         * value: "client/networkDuration"
         * @const
         */
        "client/networkDuration" = "client/networkDuration";

    
        /**
         * value: "client/sendDuration"
         * @const
         */
        "client/sendDuration" = "client/sendDuration";

    
        /**
         * value: "client/totalDuration"
         * @const
         */
        "client/totalDuration" = "client/totalDuration";

    
        /**
         * value: "dependencies/count"
         * @const
         */
        "dependencies/count" = "dependencies/count";

    
        /**
         * value: "dependencies/failed"
         * @const
         */
        "dependencies/failed" = "dependencies/failed";

    
        /**
         * value: "dependencies/duration"
         * @const
         */
        "dependencies/duration" = "dependencies/duration";

    
        /**
         * value: "exceptions/count"
         * @const
         */
        "exceptions/count" = "exceptions/count";

    
        /**
         * value: "exceptions/browser"
         * @const
         */
        "exceptions/browser" = "exceptions/browser";

    
        /**
         * value: "exceptions/server"
         * @const
         */
        "exceptions/server" = "exceptions/server";

    
        /**
         * value: "sessions/count"
         * @const
         */
        "sessions/count" = "sessions/count";

    
        /**
         * value: "performanceCounters/requestExecutionTime"
         * @const
         */
        "performanceCounters/requestExecutionTime" = "performanceCounters/requestExecutionTime";

    
        /**
         * value: "performanceCounters/requestsPerSecond"
         * @const
         */
        "performanceCounters/requestsPerSecond" = "performanceCounters/requestsPerSecond";

    
        /**
         * value: "performanceCounters/requestsInQueue"
         * @const
         */
        "performanceCounters/requestsInQueue" = "performanceCounters/requestsInQueue";

    
        /**
         * value: "performanceCounters/memoryAvailableBytes"
         * @const
         */
        "performanceCounters/memoryAvailableBytes" = "performanceCounters/memoryAvailableBytes";

    
        /**
         * value: "performanceCounters/exceptionsPerSecond"
         * @const
         */
        "performanceCounters/exceptionsPerSecond" = "performanceCounters/exceptionsPerSecond";

    
        /**
         * value: "performanceCounters/processCpuPercentage"
         * @const
         */
        "performanceCounters/processCpuPercentage" = "performanceCounters/processCpuPercentage";

    
        /**
         * value: "performanceCounters/processIOBytesPerSecond"
         * @const
         */
        "performanceCounters/processIOBytesPerSecond" = "performanceCounters/processIOBytesPerSecond";

    
        /**
         * value: "performanceCounters/processPrivateBytes"
         * @const
         */
        "performanceCounters/processPrivateBytes" = "performanceCounters/processPrivateBytes";

    
        /**
         * value: "performanceCounters/processorCpuPercentage"
         * @const
         */
        "performanceCounters/processorCpuPercentage" = "performanceCounters/processorCpuPercentage";

    
        /**
         * value: "availabilityResults/availabilityPercentage"
         * @const
         */
        "availabilityResults/availabilityPercentage" = "availabilityResults/availabilityPercentage";

    
        /**
         * value: "availabilityResults/duration"
         * @const
         */
        "availabilityResults/duration" = "availabilityResults/duration";

    
        /**
         * value: "billing/telemetryCount"
         * @const
         */
        "billing/telemetryCount" = "billing/telemetryCount";

    
        /**
         * value: "customEvents/count"
         * @const
         */
        "customEvents/count" = "customEvents/count";

    

    /**
    * Returns a <code>MetricId</code> enum value from a Javascript object name.
    * @param {Object} data The plain JavaScript object containing the name of the enum value.
    * @return {module:model/MetricId} The enum <code>MetricId</code> value.
    */
    static constructFromObject(object) {
        return object;
    }
}

