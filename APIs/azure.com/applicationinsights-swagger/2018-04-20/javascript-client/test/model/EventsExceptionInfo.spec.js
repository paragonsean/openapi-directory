/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApplicationInsightsDataPlane);
  }
}(this, function(expect, ApplicationInsightsDataPlane) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApplicationInsightsDataPlane.EventsExceptionInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('EventsExceptionInfo', function() {
    it('should create an instance of EventsExceptionInfo', function() {
      // uncomment below and update the code to test EventsExceptionInfo
      //var instance = new ApplicationInsightsDataPlane.EventsExceptionInfo();
      //expect(instance).to.be.a(ApplicationInsightsDataPlane.EventsExceptionInfo);
    });

    it('should have the property assembly (base name: "assembly")', function() {
      // uncomment below and update the code to test the property assembly
      //var instance = new ApplicationInsightsDataPlane.EventsExceptionInfo();
      //expect(instance).to.be();
    });

    it('should have the property details (base name: "details")', function() {
      // uncomment below and update the code to test the property details
      //var instance = new ApplicationInsightsDataPlane.EventsExceptionInfo();
      //expect(instance).to.be();
    });

    it('should have the property handledAt (base name: "handledAt")', function() {
      // uncomment below and update the code to test the property handledAt
      //var instance = new ApplicationInsightsDataPlane.EventsExceptionInfo();
      //expect(instance).to.be();
    });

    it('should have the property innermostAssembly (base name: "innermostAssembly")', function() {
      // uncomment below and update the code to test the property innermostAssembly
      //var instance = new ApplicationInsightsDataPlane.EventsExceptionInfo();
      //expect(instance).to.be();
    });

    it('should have the property innermostMessage (base name: "innermostMessage")', function() {
      // uncomment below and update the code to test the property innermostMessage
      //var instance = new ApplicationInsightsDataPlane.EventsExceptionInfo();
      //expect(instance).to.be();
    });

    it('should have the property innermostMethod (base name: "innermostMethod")', function() {
      // uncomment below and update the code to test the property innermostMethod
      //var instance = new ApplicationInsightsDataPlane.EventsExceptionInfo();
      //expect(instance).to.be();
    });

    it('should have the property innermostType (base name: "innermostType")', function() {
      // uncomment below and update the code to test the property innermostType
      //var instance = new ApplicationInsightsDataPlane.EventsExceptionInfo();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "message")', function() {
      // uncomment below and update the code to test the property message
      //var instance = new ApplicationInsightsDataPlane.EventsExceptionInfo();
      //expect(instance).to.be();
    });

    it('should have the property method (base name: "method")', function() {
      // uncomment below and update the code to test the property method
      //var instance = new ApplicationInsightsDataPlane.EventsExceptionInfo();
      //expect(instance).to.be();
    });

    it('should have the property outerAssembly (base name: "outerAssembly")', function() {
      // uncomment below and update the code to test the property outerAssembly
      //var instance = new ApplicationInsightsDataPlane.EventsExceptionInfo();
      //expect(instance).to.be();
    });

    it('should have the property outerMessage (base name: "outerMessage")', function() {
      // uncomment below and update the code to test the property outerMessage
      //var instance = new ApplicationInsightsDataPlane.EventsExceptionInfo();
      //expect(instance).to.be();
    });

    it('should have the property outerMethod (base name: "outerMethod")', function() {
      // uncomment below and update the code to test the property outerMethod
      //var instance = new ApplicationInsightsDataPlane.EventsExceptionInfo();
      //expect(instance).to.be();
    });

    it('should have the property outerType (base name: "outerType")', function() {
      // uncomment below and update the code to test the property outerType
      //var instance = new ApplicationInsightsDataPlane.EventsExceptionInfo();
      //expect(instance).to.be();
    });

    it('should have the property problemId (base name: "problemId")', function() {
      // uncomment below and update the code to test the property problemId
      //var instance = new ApplicationInsightsDataPlane.EventsExceptionInfo();
      //expect(instance).to.be();
    });

    it('should have the property severityLevel (base name: "severityLevel")', function() {
      // uncomment below and update the code to test the property severityLevel
      //var instance = new ApplicationInsightsDataPlane.EventsExceptionInfo();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new ApplicationInsightsDataPlane.EventsExceptionInfo();
      //expect(instance).to.be();
    });

  });

}));
