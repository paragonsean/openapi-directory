/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventsRequestInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventsRequestInfo::OAIEventsRequestInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventsRequestInfo::OAIEventsRequestInfo() {
    this->initializeModel();
}

OAIEventsRequestInfo::~OAIEventsRequestInfo() {}

void OAIEventsRequestInfo::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_performance_bucket_isSet = false;
    m_performance_bucket_isValid = false;

    m_result_code_isSet = false;
    m_result_code_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIEventsRequestInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventsRequestInfo::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_performance_bucket_isValid = ::OpenAPI::fromJsonValue(m_performance_bucket, json[QString("performanceBucket")]);
    m_performance_bucket_isSet = !json[QString("performanceBucket")].isNull() && m_performance_bucket_isValid;

    m_result_code_isValid = ::OpenAPI::fromJsonValue(m_result_code, json[QString("resultCode")]);
    m_result_code_isSet = !json[QString("resultCode")].isNull() && m_result_code_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIEventsRequestInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventsRequestInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_performance_bucket_isSet) {
        obj.insert(QString("performanceBucket"), ::OpenAPI::toJsonValue(m_performance_bucket));
    }
    if (m_result_code_isSet) {
        obj.insert(QString("resultCode"), ::OpenAPI::toJsonValue(m_result_code));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

double OAIEventsRequestInfo::getDuration() const {
    return m_duration;
}
void OAIEventsRequestInfo::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIEventsRequestInfo::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIEventsRequestInfo::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIEventsRequestInfo::getId() const {
    return m_id;
}
void OAIEventsRequestInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEventsRequestInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEventsRequestInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEventsRequestInfo::getName() const {
    return m_name;
}
void OAIEventsRequestInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEventsRequestInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEventsRequestInfo::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEventsRequestInfo::getPerformanceBucket() const {
    return m_performance_bucket;
}
void OAIEventsRequestInfo::setPerformanceBucket(const QString &performance_bucket) {
    m_performance_bucket = performance_bucket;
    m_performance_bucket_isSet = true;
}

bool OAIEventsRequestInfo::is_performance_bucket_Set() const{
    return m_performance_bucket_isSet;
}

bool OAIEventsRequestInfo::is_performance_bucket_Valid() const{
    return m_performance_bucket_isValid;
}

QString OAIEventsRequestInfo::getResultCode() const {
    return m_result_code;
}
void OAIEventsRequestInfo::setResultCode(const QString &result_code) {
    m_result_code = result_code;
    m_result_code_isSet = true;
}

bool OAIEventsRequestInfo::is_result_code_Set() const{
    return m_result_code_isSet;
}

bool OAIEventsRequestInfo::is_result_code_Valid() const{
    return m_result_code_isValid;
}

QString OAIEventsRequestInfo::getSource() const {
    return m_source;
}
void OAIEventsRequestInfo::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIEventsRequestInfo::is_source_Set() const{
    return m_source_isSet;
}

bool OAIEventsRequestInfo::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIEventsRequestInfo::getSuccess() const {
    return m_success;
}
void OAIEventsRequestInfo::setSuccess(const QString &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIEventsRequestInfo::is_success_Set() const{
    return m_success_isSet;
}

bool OAIEventsRequestInfo::is_success_Valid() const{
    return m_success_isValid;
}

QString OAIEventsRequestInfo::getUrl() const {
    return m_url;
}
void OAIEventsRequestInfo::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIEventsRequestInfo::is_url_Set() const{
    return m_url_isSet;
}

bool OAIEventsRequestInfo::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIEventsRequestInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventsRequestInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
