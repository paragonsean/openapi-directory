/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventsAvailabilityResultResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventsAvailabilityResultResult::OAIEventsAvailabilityResultResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventsAvailabilityResultResult::OAIEventsAvailabilityResultResult() {
    this->initializeModel();
}

OAIEventsAvailabilityResultResult::~OAIEventsAvailabilityResultResult() {}

void OAIEventsAvailabilityResultResult::initializeModel() {

    m_ai_isSet = false;
    m_ai_isValid = false;

    m_application_isSet = false;
    m_application_isValid = false;

    m_client_isSet = false;
    m_client_isValid = false;

    m_cloud_isSet = false;
    m_cloud_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_custom_dimensions_isSet = false;
    m_custom_dimensions_isValid = false;

    m_custom_measurements_isSet = false;
    m_custom_measurements_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_session_isSet = false;
    m_session_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_availability_result_isSet = false;
    m_availability_result_isValid = false;
}

void OAIEventsAvailabilityResultResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventsAvailabilityResultResult::fromJsonObject(QJsonObject json) {

    m_ai_isValid = ::OpenAPI::fromJsonValue(m_ai, json[QString("ai")]);
    m_ai_isSet = !json[QString("ai")].isNull() && m_ai_isValid;

    m_application_isValid = ::OpenAPI::fromJsonValue(m_application, json[QString("application")]);
    m_application_isSet = !json[QString("application")].isNull() && m_application_isValid;

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;

    m_cloud_isValid = ::OpenAPI::fromJsonValue(m_cloud, json[QString("cloud")]);
    m_cloud_isSet = !json[QString("cloud")].isNull() && m_cloud_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_custom_dimensions_isValid = ::OpenAPI::fromJsonValue(m_custom_dimensions, json[QString("customDimensions")]);
    m_custom_dimensions_isSet = !json[QString("customDimensions")].isNull() && m_custom_dimensions_isValid;

    m_custom_measurements_isValid = ::OpenAPI::fromJsonValue(m_custom_measurements, json[QString("customMeasurements")]);
    m_custom_measurements_isSet = !json[QString("customMeasurements")].isNull() && m_custom_measurements_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_session_isValid = ::OpenAPI::fromJsonValue(m_session, json[QString("session")]);
    m_session_isSet = !json[QString("session")].isNull() && m_session_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_availability_result_isValid = ::OpenAPI::fromJsonValue(m_availability_result, json[QString("availabilityResult")]);
    m_availability_result_isSet = !json[QString("availabilityResult")].isNull() && m_availability_result_isValid;
}

QString OAIEventsAvailabilityResultResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventsAvailabilityResultResult::asJsonObject() const {
    QJsonObject obj;
    if (m_ai.isSet()) {
        obj.insert(QString("ai"), ::OpenAPI::toJsonValue(m_ai));
    }
    if (m_application.isSet()) {
        obj.insert(QString("application"), ::OpenAPI::toJsonValue(m_application));
    }
    if (m_client.isSet()) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_cloud.isSet()) {
        obj.insert(QString("cloud"), ::OpenAPI::toJsonValue(m_cloud));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_custom_dimensions.isSet()) {
        obj.insert(QString("customDimensions"), ::OpenAPI::toJsonValue(m_custom_dimensions));
    }
    if (m_custom_measurements.isSet()) {
        obj.insert(QString("customMeasurements"), ::OpenAPI::toJsonValue(m_custom_measurements));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_operation.isSet()) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_session.isSet()) {
        obj.insert(QString("session"), ::OpenAPI::toJsonValue(m_session));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_availability_result.isSet()) {
        obj.insert(QString("availabilityResult"), ::OpenAPI::toJsonValue(m_availability_result));
    }
    return obj;
}

OAIEventsAiInfo OAIEventsAvailabilityResultResult::getAi() const {
    return m_ai;
}
void OAIEventsAvailabilityResultResult::setAi(const OAIEventsAiInfo &ai) {
    m_ai = ai;
    m_ai_isSet = true;
}

bool OAIEventsAvailabilityResultResult::is_ai_Set() const{
    return m_ai_isSet;
}

bool OAIEventsAvailabilityResultResult::is_ai_Valid() const{
    return m_ai_isValid;
}

OAIEventsApplicationInfo OAIEventsAvailabilityResultResult::getApplication() const {
    return m_application;
}
void OAIEventsAvailabilityResultResult::setApplication(const OAIEventsApplicationInfo &application) {
    m_application = application;
    m_application_isSet = true;
}

bool OAIEventsAvailabilityResultResult::is_application_Set() const{
    return m_application_isSet;
}

bool OAIEventsAvailabilityResultResult::is_application_Valid() const{
    return m_application_isValid;
}

OAIEventsClientInfo OAIEventsAvailabilityResultResult::getClient() const {
    return m_client;
}
void OAIEventsAvailabilityResultResult::setClient(const OAIEventsClientInfo &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAIEventsAvailabilityResultResult::is_client_Set() const{
    return m_client_isSet;
}

bool OAIEventsAvailabilityResultResult::is_client_Valid() const{
    return m_client_isValid;
}

OAIEventsCloudInfo OAIEventsAvailabilityResultResult::getCloud() const {
    return m_cloud;
}
void OAIEventsAvailabilityResultResult::setCloud(const OAIEventsCloudInfo &cloud) {
    m_cloud = cloud;
    m_cloud_isSet = true;
}

bool OAIEventsAvailabilityResultResult::is_cloud_Set() const{
    return m_cloud_isSet;
}

bool OAIEventsAvailabilityResultResult::is_cloud_Valid() const{
    return m_cloud_isValid;
}

qint64 OAIEventsAvailabilityResultResult::getCount() const {
    return m_count;
}
void OAIEventsAvailabilityResultResult::setCount(const qint64 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIEventsAvailabilityResultResult::is_count_Set() const{
    return m_count_isSet;
}

bool OAIEventsAvailabilityResultResult::is_count_Valid() const{
    return m_count_isValid;
}

OAIEventsResultData_customDimensions OAIEventsAvailabilityResultResult::getCustomDimensions() const {
    return m_custom_dimensions;
}
void OAIEventsAvailabilityResultResult::setCustomDimensions(const OAIEventsResultData_customDimensions &custom_dimensions) {
    m_custom_dimensions = custom_dimensions;
    m_custom_dimensions_isSet = true;
}

bool OAIEventsAvailabilityResultResult::is_custom_dimensions_Set() const{
    return m_custom_dimensions_isSet;
}

bool OAIEventsAvailabilityResultResult::is_custom_dimensions_Valid() const{
    return m_custom_dimensions_isValid;
}

OAIEventsResultData_customMeasurements OAIEventsAvailabilityResultResult::getCustomMeasurements() const {
    return m_custom_measurements;
}
void OAIEventsAvailabilityResultResult::setCustomMeasurements(const OAIEventsResultData_customMeasurements &custom_measurements) {
    m_custom_measurements = custom_measurements;
    m_custom_measurements_isSet = true;
}

bool OAIEventsAvailabilityResultResult::is_custom_measurements_Set() const{
    return m_custom_measurements_isSet;
}

bool OAIEventsAvailabilityResultResult::is_custom_measurements_Valid() const{
    return m_custom_measurements_isValid;
}

QString OAIEventsAvailabilityResultResult::getId() const {
    return m_id;
}
void OAIEventsAvailabilityResultResult::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEventsAvailabilityResultResult::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEventsAvailabilityResultResult::is_id_Valid() const{
    return m_id_isValid;
}

OAIEventsOperationInfo OAIEventsAvailabilityResultResult::getOperation() const {
    return m_operation;
}
void OAIEventsAvailabilityResultResult::setOperation(const OAIEventsOperationInfo &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIEventsAvailabilityResultResult::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIEventsAvailabilityResultResult::is_operation_Valid() const{
    return m_operation_isValid;
}

OAIEventsSessionInfo OAIEventsAvailabilityResultResult::getSession() const {
    return m_session;
}
void OAIEventsAvailabilityResultResult::setSession(const OAIEventsSessionInfo &session) {
    m_session = session;
    m_session_isSet = true;
}

bool OAIEventsAvailabilityResultResult::is_session_Set() const{
    return m_session_isSet;
}

bool OAIEventsAvailabilityResultResult::is_session_Valid() const{
    return m_session_isValid;
}

QDateTime OAIEventsAvailabilityResultResult::getTimestamp() const {
    return m_timestamp;
}
void OAIEventsAvailabilityResultResult::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIEventsAvailabilityResultResult::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIEventsAvailabilityResultResult::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

OAIEventType OAIEventsAvailabilityResultResult::getType() const {
    return m_type;
}
void OAIEventsAvailabilityResultResult::setType(const OAIEventType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEventsAvailabilityResultResult::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEventsAvailabilityResultResult::is_type_Valid() const{
    return m_type_isValid;
}

OAIEventsUserInfo OAIEventsAvailabilityResultResult::getUser() const {
    return m_user;
}
void OAIEventsAvailabilityResultResult::setUser(const OAIEventsUserInfo &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIEventsAvailabilityResultResult::is_user_Set() const{
    return m_user_isSet;
}

bool OAIEventsAvailabilityResultResult::is_user_Valid() const{
    return m_user_isValid;
}

OAIEventsAvailabilityResultInfo OAIEventsAvailabilityResultResult::getAvailabilityResult() const {
    return m_availability_result;
}
void OAIEventsAvailabilityResultResult::setAvailabilityResult(const OAIEventsAvailabilityResultInfo &availability_result) {
    m_availability_result = availability_result;
    m_availability_result_isSet = true;
}

bool OAIEventsAvailabilityResultResult::is_availability_result_Set() const{
    return m_availability_result_isSet;
}

bool OAIEventsAvailabilityResultResult::is_availability_result_Valid() const{
    return m_availability_result_isValid;
}

bool OAIEventsAvailabilityResultResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ai.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_measurements.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_result.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventsAvailabilityResultResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
