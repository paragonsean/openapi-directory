/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventsOperationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventsOperationInfo::OAIEventsOperationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventsOperationInfo::OAIEventsOperationInfo() {
    this->initializeModel();
}

OAIEventsOperationInfo::~OAIEventsOperationInfo() {}

void OAIEventsOperationInfo::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_synthetic_source_isSet = false;
    m_synthetic_source_isValid = false;
}

void OAIEventsOperationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventsOperationInfo::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parentId")]);
    m_parent_id_isSet = !json[QString("parentId")].isNull() && m_parent_id_isValid;

    m_synthetic_source_isValid = ::OpenAPI::fromJsonValue(m_synthetic_source, json[QString("syntheticSource")]);
    m_synthetic_source_isSet = !json[QString("syntheticSource")].isNull() && m_synthetic_source_isValid;
}

QString OAIEventsOperationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventsOperationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parentId"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_synthetic_source_isSet) {
        obj.insert(QString("syntheticSource"), ::OpenAPI::toJsonValue(m_synthetic_source));
    }
    return obj;
}

QString OAIEventsOperationInfo::getId() const {
    return m_id;
}
void OAIEventsOperationInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEventsOperationInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEventsOperationInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEventsOperationInfo::getName() const {
    return m_name;
}
void OAIEventsOperationInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEventsOperationInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEventsOperationInfo::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEventsOperationInfo::getParentId() const {
    return m_parent_id;
}
void OAIEventsOperationInfo::setParentId(const QString &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIEventsOperationInfo::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIEventsOperationInfo::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QString OAIEventsOperationInfo::getSyntheticSource() const {
    return m_synthetic_source;
}
void OAIEventsOperationInfo::setSyntheticSource(const QString &synthetic_source) {
    m_synthetic_source = synthetic_source;
    m_synthetic_source_isSet = true;
}

bool OAIEventsOperationInfo::is_synthetic_source_Set() const{
    return m_synthetic_source_isSet;
}

bool OAIEventsOperationInfo::is_synthetic_source_Valid() const{
    return m_synthetic_source_isValid;
}

bool OAIEventsOperationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synthetic_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventsOperationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
