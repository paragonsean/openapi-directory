/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIEventsResults.h"
#include "OAIMetricsResult.h"
#include "OAIObject.h"
#include "OAIQueryBody.h"
#include "OAIQueryResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  application_name QString [required]
    * @param[in]  event_type QString [required]
    * @param[in]  event_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timespan QString [optional]
    */
    virtual void eventsGet(const QString &subscription_id, const QString &resource_group_name, const QString &application_name, const QString &event_type, const QString &event_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &timespan = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  application_name QString [required]
    * @param[in]  event_type QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timespan QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  search QString [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  format QString [optional]
    * @param[in]  count bool [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void eventsGetByType(const QString &subscription_id, const QString &resource_group_name, const QString &application_name, const QString &event_type, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &timespan = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void eventsGetOdataMetadata(const QString &subscription_id, const QString &resource_group_name, const QString &application_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  application_name QString [required]
    * @param[in]  metric_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timespan QString [optional]
    * @param[in]  interval QString [optional]
    * @param[in]  aggregation QList<QString> [optional]
    * @param[in]  segment QList<QString> [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void metricsGet(const QString &subscription_id, const QString &resource_group_name, const QString &application_name, const QString &metric_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &timespan = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &interval = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &aggregation = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &segment = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void metricsGetMetadata(const QString &subscription_id, const QString &resource_group_name, const QString &application_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  application_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  body OAIQueryBody [required]
    */
    virtual void queryExecute(const QString &subscription_id, const QString &resource_group_name, const QString &application_name, const QString &api_version, const OAIQueryBody &body);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  application_name QString [required]
    * @param[in]  query QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  timespan QString [optional]
    */
    virtual void queryGet(const QString &subscription_id, const QString &resource_group_name, const QString &application_name, const QString &query, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &timespan = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void eventsGetCallback(OAIHttpRequestWorker *worker);
    void eventsGetByTypeCallback(OAIHttpRequestWorker *worker);
    void eventsGetOdataMetadataCallback(OAIHttpRequestWorker *worker);
    void metricsGetCallback(OAIHttpRequestWorker *worker);
    void metricsGetMetadataCallback(OAIHttpRequestWorker *worker);
    void queryExecuteCallback(OAIHttpRequestWorker *worker);
    void queryGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void eventsGetSignal(OAIEventsResults summary);
    void eventsGetByTypeSignal(OAIEventsResults summary);
    void eventsGetOdataMetadataSignal(OAIObject summary);
    void metricsGetSignal(OAIMetricsResult summary);
    void metricsGetMetadataSignal(OAIObject summary);
    void queryExecuteSignal(OAIQueryResults summary);
    void queryGetSignal(OAIQueryResults summary);


    void eventsGetSignalFull(OAIHttpRequestWorker *worker, OAIEventsResults summary);
    void eventsGetByTypeSignalFull(OAIHttpRequestWorker *worker, OAIEventsResults summary);
    void eventsGetOdataMetadataSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void metricsGetSignalFull(OAIHttpRequestWorker *worker, OAIMetricsResult summary);
    void metricsGetMetadataSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void queryExecuteSignalFull(OAIHttpRequestWorker *worker, OAIQueryResults summary);
    void queryGetSignalFull(OAIHttpRequestWorker *worker, OAIQueryResults summary);

    Q_DECL_DEPRECATED_X("Use eventsGetSignalError() instead")
    void eventsGetSignalE(OAIEventsResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsGetSignalError(OAIEventsResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsGetByTypeSignalError() instead")
    void eventsGetByTypeSignalE(OAIEventsResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsGetByTypeSignalError(OAIEventsResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsGetOdataMetadataSignalError() instead")
    void eventsGetOdataMetadataSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsGetOdataMetadataSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metricsGetSignalError() instead")
    void metricsGetSignalE(OAIMetricsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metricsGetSignalError(OAIMetricsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metricsGetMetadataSignalError() instead")
    void metricsGetMetadataSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metricsGetMetadataSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryExecuteSignalError() instead")
    void queryExecuteSignalE(OAIQueryResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryExecuteSignalError(OAIQueryResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryGetSignalError() instead")
    void queryGetSignalE(OAIQueryResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryGetSignalError(OAIQueryResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use eventsGetSignalErrorFull() instead")
    void eventsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsGetByTypeSignalErrorFull() instead")
    void eventsGetByTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsGetByTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsGetOdataMetadataSignalErrorFull() instead")
    void eventsGetOdataMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsGetOdataMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metricsGetSignalErrorFull() instead")
    void metricsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metricsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metricsGetMetadataSignalErrorFull() instead")
    void metricsGetMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metricsGetMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryExecuteSignalErrorFull() instead")
    void queryExecuteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryExecuteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryGetSignalErrorFull() instead")
    void queryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
