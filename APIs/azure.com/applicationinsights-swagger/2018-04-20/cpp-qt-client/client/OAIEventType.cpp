/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventType::OAIEventType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventType::OAIEventType() {
    this->initializeModel();
}

OAIEventType::~OAIEventType() {}

void OAIEventType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEventType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEventType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("$all", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::_ALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("traces", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::TRACES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("customEvents", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::CUSTOMEVENTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pageViews", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::PAGEVIEWS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("browserTimings", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::BROWSERTIMINGS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("requests", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::REQUESTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("dependencies", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::DEPENDENCIES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("exceptions", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::EXCEPTIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("availabilityResults", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::AVAILABILITYRESULTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("performanceCounters", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::PERFORMANCECOUNTERS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("customMetrics", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventType::CUSTOMMETRICS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEventType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEventType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEventType::_ALL:
            val = "$all";
            break;
        case eOAIEventType::TRACES:
            val = "traces";
            break;
        case eOAIEventType::CUSTOMEVENTS:
            val = "customEvents";
            break;
        case eOAIEventType::PAGEVIEWS:
            val = "pageViews";
            break;
        case eOAIEventType::BROWSERTIMINGS:
            val = "browserTimings";
            break;
        case eOAIEventType::REQUESTS:
            val = "requests";
            break;
        case eOAIEventType::DEPENDENCIES:
            val = "dependencies";
            break;
        case eOAIEventType::EXCEPTIONS:
            val = "exceptions";
            break;
        case eOAIEventType::AVAILABILITYRESULTS:
            val = "availabilityResults";
            break;
        case eOAIEventType::PERFORMANCECOUNTERS:
            val = "performanceCounters";
            break;
        case eOAIEventType::CUSTOMMETRICS:
            val = "customMetrics";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEventType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEventType::eOAIEventType OAIEventType::getValue() const {
    return m_value;
}

void OAIEventType::setValue(const OAIEventType::eOAIEventType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEventType::isSet() const {
    
    return m_value_isSet;
}

bool OAIEventType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
