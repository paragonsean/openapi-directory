/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventsExceptionDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventsExceptionDetail::OAIEventsExceptionDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventsExceptionDetail::OAIEventsExceptionDetail() {
    this->initializeModel();
}

OAIEventsExceptionDetail::~OAIEventsExceptionDetail() {}

void OAIEventsExceptionDetail::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_outer_id_isSet = false;
    m_outer_id_isValid = false;

    m_parsed_stack_isSet = false;
    m_parsed_stack_isValid = false;

    m_severity_level_isSet = false;
    m_severity_level_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEventsExceptionDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventsExceptionDetail::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_outer_id_isValid = ::OpenAPI::fromJsonValue(m_outer_id, json[QString("outerId")]);
    m_outer_id_isSet = !json[QString("outerId")].isNull() && m_outer_id_isValid;

    m_parsed_stack_isValid = ::OpenAPI::fromJsonValue(m_parsed_stack, json[QString("parsedStack")]);
    m_parsed_stack_isSet = !json[QString("parsedStack")].isNull() && m_parsed_stack_isValid;

    m_severity_level_isValid = ::OpenAPI::fromJsonValue(m_severity_level, json[QString("severityLevel")]);
    m_severity_level_isSet = !json[QString("severityLevel")].isNull() && m_severity_level_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEventsExceptionDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventsExceptionDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_outer_id_isSet) {
        obj.insert(QString("outerId"), ::OpenAPI::toJsonValue(m_outer_id));
    }
    if (m_parsed_stack.size() > 0) {
        obj.insert(QString("parsedStack"), ::OpenAPI::toJsonValue(m_parsed_stack));
    }
    if (m_severity_level_isSet) {
        obj.insert(QString("severityLevel"), ::OpenAPI::toJsonValue(m_severity_level));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIEventsExceptionDetail::getId() const {
    return m_id;
}
void OAIEventsExceptionDetail::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEventsExceptionDetail::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEventsExceptionDetail::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEventsExceptionDetail::getMessage() const {
    return m_message;
}
void OAIEventsExceptionDetail::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIEventsExceptionDetail::is_message_Set() const{
    return m_message_isSet;
}

bool OAIEventsExceptionDetail::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIEventsExceptionDetail::getOuterId() const {
    return m_outer_id;
}
void OAIEventsExceptionDetail::setOuterId(const QString &outer_id) {
    m_outer_id = outer_id;
    m_outer_id_isSet = true;
}

bool OAIEventsExceptionDetail::is_outer_id_Set() const{
    return m_outer_id_isSet;
}

bool OAIEventsExceptionDetail::is_outer_id_Valid() const{
    return m_outer_id_isValid;
}

QList<OAIEventsExceptionDetailsParsedStack> OAIEventsExceptionDetail::getParsedStack() const {
    return m_parsed_stack;
}
void OAIEventsExceptionDetail::setParsedStack(const QList<OAIEventsExceptionDetailsParsedStack> &parsed_stack) {
    m_parsed_stack = parsed_stack;
    m_parsed_stack_isSet = true;
}

bool OAIEventsExceptionDetail::is_parsed_stack_Set() const{
    return m_parsed_stack_isSet;
}

bool OAIEventsExceptionDetail::is_parsed_stack_Valid() const{
    return m_parsed_stack_isValid;
}

QString OAIEventsExceptionDetail::getSeverityLevel() const {
    return m_severity_level;
}
void OAIEventsExceptionDetail::setSeverityLevel(const QString &severity_level) {
    m_severity_level = severity_level;
    m_severity_level_isSet = true;
}

bool OAIEventsExceptionDetail::is_severity_level_Set() const{
    return m_severity_level_isSet;
}

bool OAIEventsExceptionDetail::is_severity_level_Valid() const{
    return m_severity_level_isValid;
}

QString OAIEventsExceptionDetail::getType() const {
    return m_type;
}
void OAIEventsExceptionDetail::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEventsExceptionDetail::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEventsExceptionDetail::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEventsExceptionDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parsed_stack.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventsExceptionDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
