/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricId.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricId::OAIMetricId(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricId::OAIMetricId() {
    this->initializeModel();
}

OAIMetricId::~OAIMetricId() {}

void OAIMetricId::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMetricId::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMetricId::fromJson(QString jsonString) {
    
    if ( jsonString.compare("requests/count", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::REQUESTS_COUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("requests/duration", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::REQUESTS_DURATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("requests/failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::REQUESTS_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("users/count", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::USERS_COUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("users/authenticated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::USERS_AUTHENTICATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pageViews/count", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::PAGEVIEWS_COUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pageViews/duration", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::PAGEVIEWS_DURATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("client/processingDuration", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::CLIENT_PROCESSINGDURATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("client/receiveDuration", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::CLIENT_RECEIVEDURATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("client/networkDuration", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::CLIENT_NETWORKDURATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("client/sendDuration", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::CLIENT_SENDDURATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("client/totalDuration", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::CLIENT_TOTALDURATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("dependencies/count", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::DEPENDENCIES_COUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("dependencies/failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::DEPENDENCIES_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("dependencies/duration", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::DEPENDENCIES_DURATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("exceptions/count", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::EXCEPTIONS_COUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("exceptions/browser", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::EXCEPTIONS_BROWSER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("exceptions/server", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::EXCEPTIONS_SERVER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sessions/count", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::SESSIONS_COUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("performanceCounters/requestExecutionTime", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::PERFORMANCECOUNTERS_REQUESTEXECUTIONTIME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("performanceCounters/requestsPerSecond", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::PERFORMANCECOUNTERS_REQUESTSPERSECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("performanceCounters/requestsInQueue", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::PERFORMANCECOUNTERS_REQUESTSINQUEUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("performanceCounters/memoryAvailableBytes", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::PERFORMANCECOUNTERS_MEMORYAVAILABLEBYTES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("performanceCounters/exceptionsPerSecond", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::PERFORMANCECOUNTERS_EXCEPTIONSPERSECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("performanceCounters/processCpuPercentage", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::PERFORMANCECOUNTERS_PROCESSCPUPERCENTAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("performanceCounters/processIOBytesPerSecond", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::PERFORMANCECOUNTERS_PROCESSIOBYTESPERSECOND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("performanceCounters/processPrivateBytes", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::PERFORMANCECOUNTERS_PROCESSPRIVATEBYTES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("performanceCounters/processorCpuPercentage", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::PERFORMANCECOUNTERS_PROCESSORCPUPERCENTAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("availabilityResults/availabilityPercentage", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::AVAILABILITYRESULTS_AVAILABILITYPERCENTAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("availabilityResults/duration", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::AVAILABILITYRESULTS_DURATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("billing/telemetryCount", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::BILLING_TELEMETRYCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("customEvents/count", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMetricId::CUSTOMEVENTS_COUNT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMetricId::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMetricId::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMetricId::REQUESTS_COUNT:
            val = "requests/count";
            break;
        case eOAIMetricId::REQUESTS_DURATION:
            val = "requests/duration";
            break;
        case eOAIMetricId::REQUESTS_FAILED:
            val = "requests/failed";
            break;
        case eOAIMetricId::USERS_COUNT:
            val = "users/count";
            break;
        case eOAIMetricId::USERS_AUTHENTICATED:
            val = "users/authenticated";
            break;
        case eOAIMetricId::PAGEVIEWS_COUNT:
            val = "pageViews/count";
            break;
        case eOAIMetricId::PAGEVIEWS_DURATION:
            val = "pageViews/duration";
            break;
        case eOAIMetricId::CLIENT_PROCESSINGDURATION:
            val = "client/processingDuration";
            break;
        case eOAIMetricId::CLIENT_RECEIVEDURATION:
            val = "client/receiveDuration";
            break;
        case eOAIMetricId::CLIENT_NETWORKDURATION:
            val = "client/networkDuration";
            break;
        case eOAIMetricId::CLIENT_SENDDURATION:
            val = "client/sendDuration";
            break;
        case eOAIMetricId::CLIENT_TOTALDURATION:
            val = "client/totalDuration";
            break;
        case eOAIMetricId::DEPENDENCIES_COUNT:
            val = "dependencies/count";
            break;
        case eOAIMetricId::DEPENDENCIES_FAILED:
            val = "dependencies/failed";
            break;
        case eOAIMetricId::DEPENDENCIES_DURATION:
            val = "dependencies/duration";
            break;
        case eOAIMetricId::EXCEPTIONS_COUNT:
            val = "exceptions/count";
            break;
        case eOAIMetricId::EXCEPTIONS_BROWSER:
            val = "exceptions/browser";
            break;
        case eOAIMetricId::EXCEPTIONS_SERVER:
            val = "exceptions/server";
            break;
        case eOAIMetricId::SESSIONS_COUNT:
            val = "sessions/count";
            break;
        case eOAIMetricId::PERFORMANCECOUNTERS_REQUESTEXECUTIONTIME:
            val = "performanceCounters/requestExecutionTime";
            break;
        case eOAIMetricId::PERFORMANCECOUNTERS_REQUESTSPERSECOND:
            val = "performanceCounters/requestsPerSecond";
            break;
        case eOAIMetricId::PERFORMANCECOUNTERS_REQUESTSINQUEUE:
            val = "performanceCounters/requestsInQueue";
            break;
        case eOAIMetricId::PERFORMANCECOUNTERS_MEMORYAVAILABLEBYTES:
            val = "performanceCounters/memoryAvailableBytes";
            break;
        case eOAIMetricId::PERFORMANCECOUNTERS_EXCEPTIONSPERSECOND:
            val = "performanceCounters/exceptionsPerSecond";
            break;
        case eOAIMetricId::PERFORMANCECOUNTERS_PROCESSCPUPERCENTAGE:
            val = "performanceCounters/processCpuPercentage";
            break;
        case eOAIMetricId::PERFORMANCECOUNTERS_PROCESSIOBYTESPERSECOND:
            val = "performanceCounters/processIOBytesPerSecond";
            break;
        case eOAIMetricId::PERFORMANCECOUNTERS_PROCESSPRIVATEBYTES:
            val = "performanceCounters/processPrivateBytes";
            break;
        case eOAIMetricId::PERFORMANCECOUNTERS_PROCESSORCPUPERCENTAGE:
            val = "performanceCounters/processorCpuPercentage";
            break;
        case eOAIMetricId::AVAILABILITYRESULTS_AVAILABILITYPERCENTAGE:
            val = "availabilityResults/availabilityPercentage";
            break;
        case eOAIMetricId::AVAILABILITYRESULTS_DURATION:
            val = "availabilityResults/duration";
            break;
        case eOAIMetricId::BILLING_TELEMETRYCOUNT:
            val = "billing/telemetryCount";
            break;
        case eOAIMetricId::CUSTOMEVENTS_COUNT:
            val = "customEvents/count";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMetricId::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMetricId::eOAIMetricId OAIMetricId::getValue() const {
    return m_value;
}

void OAIMetricId::setValue(const OAIMetricId::eOAIMetricId& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMetricId::isSet() const {
    
    return m_value_isSet;
}

bool OAIMetricId::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
