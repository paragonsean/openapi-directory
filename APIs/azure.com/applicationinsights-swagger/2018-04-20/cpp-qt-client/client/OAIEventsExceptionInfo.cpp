/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventsExceptionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventsExceptionInfo::OAIEventsExceptionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventsExceptionInfo::OAIEventsExceptionInfo() {
    this->initializeModel();
}

OAIEventsExceptionInfo::~OAIEventsExceptionInfo() {}

void OAIEventsExceptionInfo::initializeModel() {

    m_assembly_isSet = false;
    m_assembly_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_handled_at_isSet = false;
    m_handled_at_isValid = false;

    m_innermost_assembly_isSet = false;
    m_innermost_assembly_isValid = false;

    m_innermost_message_isSet = false;
    m_innermost_message_isValid = false;

    m_innermost_method_isSet = false;
    m_innermost_method_isValid = false;

    m_innermost_type_isSet = false;
    m_innermost_type_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_outer_assembly_isSet = false;
    m_outer_assembly_isValid = false;

    m_outer_message_isSet = false;
    m_outer_message_isValid = false;

    m_outer_method_isSet = false;
    m_outer_method_isValid = false;

    m_outer_type_isSet = false;
    m_outer_type_isValid = false;

    m_problem_id_isSet = false;
    m_problem_id_isValid = false;

    m_severity_level_isSet = false;
    m_severity_level_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEventsExceptionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventsExceptionInfo::fromJsonObject(QJsonObject json) {

    m_assembly_isValid = ::OpenAPI::fromJsonValue(m_assembly, json[QString("assembly")]);
    m_assembly_isSet = !json[QString("assembly")].isNull() && m_assembly_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_handled_at_isValid = ::OpenAPI::fromJsonValue(m_handled_at, json[QString("handledAt")]);
    m_handled_at_isSet = !json[QString("handledAt")].isNull() && m_handled_at_isValid;

    m_innermost_assembly_isValid = ::OpenAPI::fromJsonValue(m_innermost_assembly, json[QString("innermostAssembly")]);
    m_innermost_assembly_isSet = !json[QString("innermostAssembly")].isNull() && m_innermost_assembly_isValid;

    m_innermost_message_isValid = ::OpenAPI::fromJsonValue(m_innermost_message, json[QString("innermostMessage")]);
    m_innermost_message_isSet = !json[QString("innermostMessage")].isNull() && m_innermost_message_isValid;

    m_innermost_method_isValid = ::OpenAPI::fromJsonValue(m_innermost_method, json[QString("innermostMethod")]);
    m_innermost_method_isSet = !json[QString("innermostMethod")].isNull() && m_innermost_method_isValid;

    m_innermost_type_isValid = ::OpenAPI::fromJsonValue(m_innermost_type, json[QString("innermostType")]);
    m_innermost_type_isSet = !json[QString("innermostType")].isNull() && m_innermost_type_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_outer_assembly_isValid = ::OpenAPI::fromJsonValue(m_outer_assembly, json[QString("outerAssembly")]);
    m_outer_assembly_isSet = !json[QString("outerAssembly")].isNull() && m_outer_assembly_isValid;

    m_outer_message_isValid = ::OpenAPI::fromJsonValue(m_outer_message, json[QString("outerMessage")]);
    m_outer_message_isSet = !json[QString("outerMessage")].isNull() && m_outer_message_isValid;

    m_outer_method_isValid = ::OpenAPI::fromJsonValue(m_outer_method, json[QString("outerMethod")]);
    m_outer_method_isSet = !json[QString("outerMethod")].isNull() && m_outer_method_isValid;

    m_outer_type_isValid = ::OpenAPI::fromJsonValue(m_outer_type, json[QString("outerType")]);
    m_outer_type_isSet = !json[QString("outerType")].isNull() && m_outer_type_isValid;

    m_problem_id_isValid = ::OpenAPI::fromJsonValue(m_problem_id, json[QString("problemId")]);
    m_problem_id_isSet = !json[QString("problemId")].isNull() && m_problem_id_isValid;

    m_severity_level_isValid = ::OpenAPI::fromJsonValue(m_severity_level, json[QString("severityLevel")]);
    m_severity_level_isSet = !json[QString("severityLevel")].isNull() && m_severity_level_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEventsExceptionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventsExceptionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_assembly_isSet) {
        obj.insert(QString("assembly"), ::OpenAPI::toJsonValue(m_assembly));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_handled_at_isSet) {
        obj.insert(QString("handledAt"), ::OpenAPI::toJsonValue(m_handled_at));
    }
    if (m_innermost_assembly_isSet) {
        obj.insert(QString("innermostAssembly"), ::OpenAPI::toJsonValue(m_innermost_assembly));
    }
    if (m_innermost_message_isSet) {
        obj.insert(QString("innermostMessage"), ::OpenAPI::toJsonValue(m_innermost_message));
    }
    if (m_innermost_method_isSet) {
        obj.insert(QString("innermostMethod"), ::OpenAPI::toJsonValue(m_innermost_method));
    }
    if (m_innermost_type_isSet) {
        obj.insert(QString("innermostType"), ::OpenAPI::toJsonValue(m_innermost_type));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_outer_assembly_isSet) {
        obj.insert(QString("outerAssembly"), ::OpenAPI::toJsonValue(m_outer_assembly));
    }
    if (m_outer_message_isSet) {
        obj.insert(QString("outerMessage"), ::OpenAPI::toJsonValue(m_outer_message));
    }
    if (m_outer_method_isSet) {
        obj.insert(QString("outerMethod"), ::OpenAPI::toJsonValue(m_outer_method));
    }
    if (m_outer_type_isSet) {
        obj.insert(QString("outerType"), ::OpenAPI::toJsonValue(m_outer_type));
    }
    if (m_problem_id_isSet) {
        obj.insert(QString("problemId"), ::OpenAPI::toJsonValue(m_problem_id));
    }
    if (m_severity_level_isSet) {
        obj.insert(QString("severityLevel"), ::OpenAPI::toJsonValue(m_severity_level));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIEventsExceptionInfo::getAssembly() const {
    return m_assembly;
}
void OAIEventsExceptionInfo::setAssembly(const QString &assembly) {
    m_assembly = assembly;
    m_assembly_isSet = true;
}

bool OAIEventsExceptionInfo::is_assembly_Set() const{
    return m_assembly_isSet;
}

bool OAIEventsExceptionInfo::is_assembly_Valid() const{
    return m_assembly_isValid;
}

QList<OAIEventsExceptionDetail> OAIEventsExceptionInfo::getDetails() const {
    return m_details;
}
void OAIEventsExceptionInfo::setDetails(const QList<OAIEventsExceptionDetail> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIEventsExceptionInfo::is_details_Set() const{
    return m_details_isSet;
}

bool OAIEventsExceptionInfo::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIEventsExceptionInfo::getHandledAt() const {
    return m_handled_at;
}
void OAIEventsExceptionInfo::setHandledAt(const QString &handled_at) {
    m_handled_at = handled_at;
    m_handled_at_isSet = true;
}

bool OAIEventsExceptionInfo::is_handled_at_Set() const{
    return m_handled_at_isSet;
}

bool OAIEventsExceptionInfo::is_handled_at_Valid() const{
    return m_handled_at_isValid;
}

QString OAIEventsExceptionInfo::getInnermostAssembly() const {
    return m_innermost_assembly;
}
void OAIEventsExceptionInfo::setInnermostAssembly(const QString &innermost_assembly) {
    m_innermost_assembly = innermost_assembly;
    m_innermost_assembly_isSet = true;
}

bool OAIEventsExceptionInfo::is_innermost_assembly_Set() const{
    return m_innermost_assembly_isSet;
}

bool OAIEventsExceptionInfo::is_innermost_assembly_Valid() const{
    return m_innermost_assembly_isValid;
}

QString OAIEventsExceptionInfo::getInnermostMessage() const {
    return m_innermost_message;
}
void OAIEventsExceptionInfo::setInnermostMessage(const QString &innermost_message) {
    m_innermost_message = innermost_message;
    m_innermost_message_isSet = true;
}

bool OAIEventsExceptionInfo::is_innermost_message_Set() const{
    return m_innermost_message_isSet;
}

bool OAIEventsExceptionInfo::is_innermost_message_Valid() const{
    return m_innermost_message_isValid;
}

QString OAIEventsExceptionInfo::getInnermostMethod() const {
    return m_innermost_method;
}
void OAIEventsExceptionInfo::setInnermostMethod(const QString &innermost_method) {
    m_innermost_method = innermost_method;
    m_innermost_method_isSet = true;
}

bool OAIEventsExceptionInfo::is_innermost_method_Set() const{
    return m_innermost_method_isSet;
}

bool OAIEventsExceptionInfo::is_innermost_method_Valid() const{
    return m_innermost_method_isValid;
}

QString OAIEventsExceptionInfo::getInnermostType() const {
    return m_innermost_type;
}
void OAIEventsExceptionInfo::setInnermostType(const QString &innermost_type) {
    m_innermost_type = innermost_type;
    m_innermost_type_isSet = true;
}

bool OAIEventsExceptionInfo::is_innermost_type_Set() const{
    return m_innermost_type_isSet;
}

bool OAIEventsExceptionInfo::is_innermost_type_Valid() const{
    return m_innermost_type_isValid;
}

QString OAIEventsExceptionInfo::getMessage() const {
    return m_message;
}
void OAIEventsExceptionInfo::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIEventsExceptionInfo::is_message_Set() const{
    return m_message_isSet;
}

bool OAIEventsExceptionInfo::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIEventsExceptionInfo::getMethod() const {
    return m_method;
}
void OAIEventsExceptionInfo::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIEventsExceptionInfo::is_method_Set() const{
    return m_method_isSet;
}

bool OAIEventsExceptionInfo::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIEventsExceptionInfo::getOuterAssembly() const {
    return m_outer_assembly;
}
void OAIEventsExceptionInfo::setOuterAssembly(const QString &outer_assembly) {
    m_outer_assembly = outer_assembly;
    m_outer_assembly_isSet = true;
}

bool OAIEventsExceptionInfo::is_outer_assembly_Set() const{
    return m_outer_assembly_isSet;
}

bool OAIEventsExceptionInfo::is_outer_assembly_Valid() const{
    return m_outer_assembly_isValid;
}

QString OAIEventsExceptionInfo::getOuterMessage() const {
    return m_outer_message;
}
void OAIEventsExceptionInfo::setOuterMessage(const QString &outer_message) {
    m_outer_message = outer_message;
    m_outer_message_isSet = true;
}

bool OAIEventsExceptionInfo::is_outer_message_Set() const{
    return m_outer_message_isSet;
}

bool OAIEventsExceptionInfo::is_outer_message_Valid() const{
    return m_outer_message_isValid;
}

QString OAIEventsExceptionInfo::getOuterMethod() const {
    return m_outer_method;
}
void OAIEventsExceptionInfo::setOuterMethod(const QString &outer_method) {
    m_outer_method = outer_method;
    m_outer_method_isSet = true;
}

bool OAIEventsExceptionInfo::is_outer_method_Set() const{
    return m_outer_method_isSet;
}

bool OAIEventsExceptionInfo::is_outer_method_Valid() const{
    return m_outer_method_isValid;
}

QString OAIEventsExceptionInfo::getOuterType() const {
    return m_outer_type;
}
void OAIEventsExceptionInfo::setOuterType(const QString &outer_type) {
    m_outer_type = outer_type;
    m_outer_type_isSet = true;
}

bool OAIEventsExceptionInfo::is_outer_type_Set() const{
    return m_outer_type_isSet;
}

bool OAIEventsExceptionInfo::is_outer_type_Valid() const{
    return m_outer_type_isValid;
}

QString OAIEventsExceptionInfo::getProblemId() const {
    return m_problem_id;
}
void OAIEventsExceptionInfo::setProblemId(const QString &problem_id) {
    m_problem_id = problem_id;
    m_problem_id_isSet = true;
}

bool OAIEventsExceptionInfo::is_problem_id_Set() const{
    return m_problem_id_isSet;
}

bool OAIEventsExceptionInfo::is_problem_id_Valid() const{
    return m_problem_id_isValid;
}

qint32 OAIEventsExceptionInfo::getSeverityLevel() const {
    return m_severity_level;
}
void OAIEventsExceptionInfo::setSeverityLevel(const qint32 &severity_level) {
    m_severity_level = severity_level;
    m_severity_level_isSet = true;
}

bool OAIEventsExceptionInfo::is_severity_level_Set() const{
    return m_severity_level_isSet;
}

bool OAIEventsExceptionInfo::is_severity_level_Valid() const{
    return m_severity_level_isValid;
}

QString OAIEventsExceptionInfo::getType() const {
    return m_type;
}
void OAIEventsExceptionInfo::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEventsExceptionInfo::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEventsExceptionInfo::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEventsExceptionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assembly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_handled_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_innermost_assembly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_innermost_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_innermost_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_innermost_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outer_assembly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outer_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outer_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outer_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_problem_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventsExceptionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
