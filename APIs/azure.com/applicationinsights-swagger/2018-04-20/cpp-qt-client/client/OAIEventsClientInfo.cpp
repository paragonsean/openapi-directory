/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventsClientInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventsClientInfo::OAIEventsClientInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventsClientInfo::OAIEventsClientInfo() {
    this->initializeModel();
}

OAIEventsClientInfo::~OAIEventsClientInfo() {}

void OAIEventsClientInfo::initializeModel() {

    m_browser_isSet = false;
    m_browser_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_or_region_isSet = false;
    m_country_or_region_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_os_isSet = false;
    m_os_isValid = false;

    m_state_or_province_isSet = false;
    m_state_or_province_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIEventsClientInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventsClientInfo::fromJsonObject(QJsonObject json) {

    m_browser_isValid = ::OpenAPI::fromJsonValue(m_browser, json[QString("browser")]);
    m_browser_isSet = !json[QString("browser")].isNull() && m_browser_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_or_region_isValid = ::OpenAPI::fromJsonValue(m_country_or_region, json[QString("countryOrRegion")]);
    m_country_or_region_isSet = !json[QString("countryOrRegion")].isNull() && m_country_or_region_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("os")]);
    m_os_isSet = !json[QString("os")].isNull() && m_os_isValid;

    m_state_or_province_isValid = ::OpenAPI::fromJsonValue(m_state_or_province, json[QString("stateOrProvince")]);
    m_state_or_province_isSet = !json[QString("stateOrProvince")].isNull() && m_state_or_province_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIEventsClientInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventsClientInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_browser_isSet) {
        obj.insert(QString("browser"), ::OpenAPI::toJsonValue(m_browser));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_or_region_isSet) {
        obj.insert(QString("countryOrRegion"), ::OpenAPI::toJsonValue(m_country_or_region));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_os_isSet) {
        obj.insert(QString("os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_state_or_province_isSet) {
        obj.insert(QString("stateOrProvince"), ::OpenAPI::toJsonValue(m_state_or_province));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIEventsClientInfo::getBrowser() const {
    return m_browser;
}
void OAIEventsClientInfo::setBrowser(const QString &browser) {
    m_browser = browser;
    m_browser_isSet = true;
}

bool OAIEventsClientInfo::is_browser_Set() const{
    return m_browser_isSet;
}

bool OAIEventsClientInfo::is_browser_Valid() const{
    return m_browser_isValid;
}

QString OAIEventsClientInfo::getCity() const {
    return m_city;
}
void OAIEventsClientInfo::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIEventsClientInfo::is_city_Set() const{
    return m_city_isSet;
}

bool OAIEventsClientInfo::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIEventsClientInfo::getCountryOrRegion() const {
    return m_country_or_region;
}
void OAIEventsClientInfo::setCountryOrRegion(const QString &country_or_region) {
    m_country_or_region = country_or_region;
    m_country_or_region_isSet = true;
}

bool OAIEventsClientInfo::is_country_or_region_Set() const{
    return m_country_or_region_isSet;
}

bool OAIEventsClientInfo::is_country_or_region_Valid() const{
    return m_country_or_region_isValid;
}

QString OAIEventsClientInfo::getIp() const {
    return m_ip;
}
void OAIEventsClientInfo::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIEventsClientInfo::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIEventsClientInfo::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAIEventsClientInfo::getModel() const {
    return m_model;
}
void OAIEventsClientInfo::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIEventsClientInfo::is_model_Set() const{
    return m_model_isSet;
}

bool OAIEventsClientInfo::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIEventsClientInfo::getOs() const {
    return m_os;
}
void OAIEventsClientInfo::setOs(const QString &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAIEventsClientInfo::is_os_Set() const{
    return m_os_isSet;
}

bool OAIEventsClientInfo::is_os_Valid() const{
    return m_os_isValid;
}

QString OAIEventsClientInfo::getStateOrProvince() const {
    return m_state_or_province;
}
void OAIEventsClientInfo::setStateOrProvince(const QString &state_or_province) {
    m_state_or_province = state_or_province;
    m_state_or_province_isSet = true;
}

bool OAIEventsClientInfo::is_state_or_province_Set() const{
    return m_state_or_province_isSet;
}

bool OAIEventsClientInfo::is_state_or_province_Valid() const{
    return m_state_or_province_isValid;
}

QString OAIEventsClientInfo::getType() const {
    return m_type;
}
void OAIEventsClientInfo::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEventsClientInfo::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEventsClientInfo::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIEventsClientInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_browser_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_or_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_or_province_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventsClientInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
