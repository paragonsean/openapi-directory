/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricsPostBodySchema_parameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricsPostBodySchema_parameters::OAIMetricsPostBodySchema_parameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricsPostBodySchema_parameters::OAIMetricsPostBodySchema_parameters() {
    this->initializeModel();
}

OAIMetricsPostBodySchema_parameters::~OAIMetricsPostBodySchema_parameters() {}

void OAIMetricsPostBodySchema_parameters::initializeModel() {

    m_aggregation_isSet = false;
    m_aggregation_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_metric_id_isSet = false;
    m_metric_id_isValid = false;

    m_orderby_isSet = false;
    m_orderby_isValid = false;

    m_segment_isSet = false;
    m_segment_isValid = false;

    m_timespan_isSet = false;
    m_timespan_isValid = false;

    m_top_isSet = false;
    m_top_isValid = false;
}

void OAIMetricsPostBodySchema_parameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricsPostBodySchema_parameters::fromJsonObject(QJsonObject json) {

    m_aggregation_isValid = ::OpenAPI::fromJsonValue(m_aggregation, json[QString("aggregation")]);
    m_aggregation_isSet = !json[QString("aggregation")].isNull() && m_aggregation_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_metric_id_isValid = ::OpenAPI::fromJsonValue(m_metric_id, json[QString("metricId")]);
    m_metric_id_isSet = !json[QString("metricId")].isNull() && m_metric_id_isValid;

    m_orderby_isValid = ::OpenAPI::fromJsonValue(m_orderby, json[QString("orderby")]);
    m_orderby_isSet = !json[QString("orderby")].isNull() && m_orderby_isValid;

    m_segment_isValid = ::OpenAPI::fromJsonValue(m_segment, json[QString("segment")]);
    m_segment_isSet = !json[QString("segment")].isNull() && m_segment_isValid;

    m_timespan_isValid = ::OpenAPI::fromJsonValue(m_timespan, json[QString("timespan")]);
    m_timespan_isSet = !json[QString("timespan")].isNull() && m_timespan_isValid;

    m_top_isValid = ::OpenAPI::fromJsonValue(m_top, json[QString("top")]);
    m_top_isSet = !json[QString("top")].isNull() && m_top_isValid;
}

QString OAIMetricsPostBodySchema_parameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricsPostBodySchema_parameters::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation.size() > 0) {
        obj.insert(QString("aggregation"), ::OpenAPI::toJsonValue(m_aggregation));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_metric_id.isSet()) {
        obj.insert(QString("metricId"), ::OpenAPI::toJsonValue(m_metric_id));
    }
    if (m_orderby_isSet) {
        obj.insert(QString("orderby"), ::OpenAPI::toJsonValue(m_orderby));
    }
    if (m_segment.size() > 0) {
        obj.insert(QString("segment"), ::OpenAPI::toJsonValue(m_segment));
    }
    if (m_timespan_isSet) {
        obj.insert(QString("timespan"), ::OpenAPI::toJsonValue(m_timespan));
    }
    if (m_top_isSet) {
        obj.insert(QString("top"), ::OpenAPI::toJsonValue(m_top));
    }
    return obj;
}

QList<QString> OAIMetricsPostBodySchema_parameters::getAggregation() const {
    return m_aggregation;
}
void OAIMetricsPostBodySchema_parameters::setAggregation(const QList<QString> &aggregation) {
    m_aggregation = aggregation;
    m_aggregation_isSet = true;
}

bool OAIMetricsPostBodySchema_parameters::is_aggregation_Set() const{
    return m_aggregation_isSet;
}

bool OAIMetricsPostBodySchema_parameters::is_aggregation_Valid() const{
    return m_aggregation_isValid;
}

QString OAIMetricsPostBodySchema_parameters::getFilter() const {
    return m_filter;
}
void OAIMetricsPostBodySchema_parameters::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIMetricsPostBodySchema_parameters::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIMetricsPostBodySchema_parameters::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAIMetricsPostBodySchema_parameters::getInterval() const {
    return m_interval;
}
void OAIMetricsPostBodySchema_parameters::setInterval(const QString &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIMetricsPostBodySchema_parameters::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIMetricsPostBodySchema_parameters::is_interval_Valid() const{
    return m_interval_isValid;
}

OAIMetricId OAIMetricsPostBodySchema_parameters::getMetricId() const {
    return m_metric_id;
}
void OAIMetricsPostBodySchema_parameters::setMetricId(const OAIMetricId &metric_id) {
    m_metric_id = metric_id;
    m_metric_id_isSet = true;
}

bool OAIMetricsPostBodySchema_parameters::is_metric_id_Set() const{
    return m_metric_id_isSet;
}

bool OAIMetricsPostBodySchema_parameters::is_metric_id_Valid() const{
    return m_metric_id_isValid;
}

QString OAIMetricsPostBodySchema_parameters::getOrderby() const {
    return m_orderby;
}
void OAIMetricsPostBodySchema_parameters::setOrderby(const QString &orderby) {
    m_orderby = orderby;
    m_orderby_isSet = true;
}

bool OAIMetricsPostBodySchema_parameters::is_orderby_Set() const{
    return m_orderby_isSet;
}

bool OAIMetricsPostBodySchema_parameters::is_orderby_Valid() const{
    return m_orderby_isValid;
}

QList<QString> OAIMetricsPostBodySchema_parameters::getSegment() const {
    return m_segment;
}
void OAIMetricsPostBodySchema_parameters::setSegment(const QList<QString> &segment) {
    m_segment = segment;
    m_segment_isSet = true;
}

bool OAIMetricsPostBodySchema_parameters::is_segment_Set() const{
    return m_segment_isSet;
}

bool OAIMetricsPostBodySchema_parameters::is_segment_Valid() const{
    return m_segment_isValid;
}

QString OAIMetricsPostBodySchema_parameters::getTimespan() const {
    return m_timespan;
}
void OAIMetricsPostBodySchema_parameters::setTimespan(const QString &timespan) {
    m_timespan = timespan;
    m_timespan_isSet = true;
}

bool OAIMetricsPostBodySchema_parameters::is_timespan_Set() const{
    return m_timespan_isSet;
}

bool OAIMetricsPostBodySchema_parameters::is_timespan_Valid() const{
    return m_timespan_isValid;
}

qint32 OAIMetricsPostBodySchema_parameters::getTop() const {
    return m_top;
}
void OAIMetricsPostBodySchema_parameters::setTop(const qint32 &top) {
    m_top = top;
    m_top_isSet = true;
}

bool OAIMetricsPostBodySchema_parameters::is_top_Set() const{
    return m_top_isSet;
}

bool OAIMetricsPostBodySchema_parameters::is_top_Valid() const{
    return m_top_isValid;
}

bool OAIMetricsPostBodySchema_parameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_orderby_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timespan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricsPostBodySchema_parameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_metric_id_isValid && true;
}

} // namespace OpenAPI
