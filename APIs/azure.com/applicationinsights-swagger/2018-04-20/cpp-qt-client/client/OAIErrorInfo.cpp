/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorInfo::OAIErrorInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorInfo::OAIErrorInfo() {
    this->initializeModel();
}

OAIErrorInfo::~OAIErrorInfo() {}

void OAIErrorInfo::initializeModel() {

    m_additional_properties_isSet = false;
    m_additional_properties_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_innererror_isSet = false;
    m_innererror_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIErrorInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorInfo::fromJsonObject(QJsonObject json) {

    m_additional_properties_isValid = ::OpenAPI::fromJsonValue(m_additional_properties, json[QString("additionalProperties")]);
    m_additional_properties_isSet = !json[QString("additionalProperties")].isNull() && m_additional_properties_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_innererror_isValid = ::OpenAPI::fromJsonValue(m_innererror, json[QString("innererror")]);
    m_innererror_isSet = !json[QString("innererror")].isNull() && m_innererror_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIErrorInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_properties_isSet) {
        obj.insert(QString("additionalProperties"), ::OpenAPI::toJsonValue(m_additional_properties));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_innererror.isSet()) {
        obj.insert(QString("innererror"), ::OpenAPI::toJsonValue(m_innererror));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

OAIObject OAIErrorInfo::getAdditionalProperties() const {
    return m_additional_properties;
}
void OAIErrorInfo::setAdditionalProperties(const OAIObject &additional_properties) {
    m_additional_properties = additional_properties;
    m_additional_properties_isSet = true;
}

bool OAIErrorInfo::is_additional_properties_Set() const{
    return m_additional_properties_isSet;
}

bool OAIErrorInfo::is_additional_properties_Valid() const{
    return m_additional_properties_isValid;
}

QString OAIErrorInfo::getCode() const {
    return m_code;
}
void OAIErrorInfo::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIErrorInfo::is_code_Set() const{
    return m_code_isSet;
}

bool OAIErrorInfo::is_code_Valid() const{
    return m_code_isValid;
}

QList<OAIErrorDetail> OAIErrorInfo::getDetails() const {
    return m_details;
}
void OAIErrorInfo::setDetails(const QList<OAIErrorDetail> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIErrorInfo::is_details_Set() const{
    return m_details_isSet;
}

bool OAIErrorInfo::is_details_Valid() const{
    return m_details_isValid;
}

OAIErrorInfo OAIErrorInfo::getInnererror() const {
    return m_innererror;
}
void OAIErrorInfo::setInnererror(const OAIErrorInfo &innererror) {
    m_innererror = innererror;
    m_innererror_isSet = true;
}

bool OAIErrorInfo::is_innererror_Set() const{
    return m_innererror_isSet;
}

bool OAIErrorInfo::is_innererror_Valid() const{
    return m_innererror_isValid;
}

QString OAIErrorInfo::getMessage() const {
    return m_message;
}
void OAIErrorInfo::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIErrorInfo::is_message_Set() const{
    return m_message_isSet;
}

bool OAIErrorInfo::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIErrorInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_innererror.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_message_isValid && true;
}

} // namespace OpenAPI
