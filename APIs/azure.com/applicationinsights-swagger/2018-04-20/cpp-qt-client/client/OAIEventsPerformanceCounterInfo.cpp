/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventsPerformanceCounterInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventsPerformanceCounterInfo::OAIEventsPerformanceCounterInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventsPerformanceCounterInfo::OAIEventsPerformanceCounterInfo() {
    this->initializeModel();
}

OAIEventsPerformanceCounterInfo::~OAIEventsPerformanceCounterInfo() {}

void OAIEventsPerformanceCounterInfo::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_counter_isSet = false;
    m_counter_isValid = false;

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_instance_name_isSet = false;
    m_instance_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIEventsPerformanceCounterInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventsPerformanceCounterInfo::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_counter_isValid = ::OpenAPI::fromJsonValue(m_counter, json[QString("counter")]);
    m_counter_isSet = !json[QString("counter")].isNull() && m_counter_isValid;

    m_instance_isValid = ::OpenAPI::fromJsonValue(m_instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_instance_name_isValid = ::OpenAPI::fromJsonValue(m_instance_name, json[QString("instanceName")]);
    m_instance_name_isSet = !json[QString("instanceName")].isNull() && m_instance_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIEventsPerformanceCounterInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventsPerformanceCounterInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_counter_isSet) {
        obj.insert(QString("counter"), ::OpenAPI::toJsonValue(m_counter));
    }
    if (m_instance_isSet) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(m_instance));
    }
    if (m_instance_name_isSet) {
        obj.insert(QString("instanceName"), ::OpenAPI::toJsonValue(m_instance_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIEventsPerformanceCounterInfo::getCategory() const {
    return m_category;
}
void OAIEventsPerformanceCounterInfo::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIEventsPerformanceCounterInfo::is_category_Set() const{
    return m_category_isSet;
}

bool OAIEventsPerformanceCounterInfo::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIEventsPerformanceCounterInfo::getCounter() const {
    return m_counter;
}
void OAIEventsPerformanceCounterInfo::setCounter(const QString &counter) {
    m_counter = counter;
    m_counter_isSet = true;
}

bool OAIEventsPerformanceCounterInfo::is_counter_Set() const{
    return m_counter_isSet;
}

bool OAIEventsPerformanceCounterInfo::is_counter_Valid() const{
    return m_counter_isValid;
}

QString OAIEventsPerformanceCounterInfo::getInstance() const {
    return m_instance;
}
void OAIEventsPerformanceCounterInfo::setInstance(const QString &instance) {
    m_instance = instance;
    m_instance_isSet = true;
}

bool OAIEventsPerformanceCounterInfo::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAIEventsPerformanceCounterInfo::is_instance_Valid() const{
    return m_instance_isValid;
}

QString OAIEventsPerformanceCounterInfo::getInstanceName() const {
    return m_instance_name;
}
void OAIEventsPerformanceCounterInfo::setInstanceName(const QString &instance_name) {
    m_instance_name = instance_name;
    m_instance_name_isSet = true;
}

bool OAIEventsPerformanceCounterInfo::is_instance_name_Set() const{
    return m_instance_name_isSet;
}

bool OAIEventsPerformanceCounterInfo::is_instance_name_Valid() const{
    return m_instance_name_isValid;
}

QString OAIEventsPerformanceCounterInfo::getName() const {
    return m_name;
}
void OAIEventsPerformanceCounterInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEventsPerformanceCounterInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEventsPerformanceCounterInfo::is_name_Valid() const{
    return m_name_isValid;
}

double OAIEventsPerformanceCounterInfo::getValue() const {
    return m_value;
}
void OAIEventsPerformanceCounterInfo::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIEventsPerformanceCounterInfo::is_value_Set() const{
    return m_value_isSet;
}

bool OAIEventsPerformanceCounterInfo::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIEventsPerformanceCounterInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventsPerformanceCounterInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
