/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventsBrowserTimingInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventsBrowserTimingInfo::OAIEventsBrowserTimingInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventsBrowserTimingInfo::OAIEventsBrowserTimingInfo() {
    this->initializeModel();
}

OAIEventsBrowserTimingInfo::~OAIEventsBrowserTimingInfo() {}

void OAIEventsBrowserTimingInfo::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_duration_isSet = false;
    m_network_duration_isValid = false;

    m_performance_bucket_isSet = false;
    m_performance_bucket_isValid = false;

    m_processing_duration_isSet = false;
    m_processing_duration_isValid = false;

    m_receive_duration_isSet = false;
    m_receive_duration_isValid = false;

    m_send_duration_isSet = false;
    m_send_duration_isValid = false;

    m_total_duration_isSet = false;
    m_total_duration_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_url_host_isSet = false;
    m_url_host_isValid = false;

    m_url_path_isSet = false;
    m_url_path_isValid = false;
}

void OAIEventsBrowserTimingInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventsBrowserTimingInfo::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_duration_isValid = ::OpenAPI::fromJsonValue(m_network_duration, json[QString("networkDuration")]);
    m_network_duration_isSet = !json[QString("networkDuration")].isNull() && m_network_duration_isValid;

    m_performance_bucket_isValid = ::OpenAPI::fromJsonValue(m_performance_bucket, json[QString("performanceBucket")]);
    m_performance_bucket_isSet = !json[QString("performanceBucket")].isNull() && m_performance_bucket_isValid;

    m_processing_duration_isValid = ::OpenAPI::fromJsonValue(m_processing_duration, json[QString("processingDuration")]);
    m_processing_duration_isSet = !json[QString("processingDuration")].isNull() && m_processing_duration_isValid;

    m_receive_duration_isValid = ::OpenAPI::fromJsonValue(m_receive_duration, json[QString("receiveDuration")]);
    m_receive_duration_isSet = !json[QString("receiveDuration")].isNull() && m_receive_duration_isValid;

    m_send_duration_isValid = ::OpenAPI::fromJsonValue(m_send_duration, json[QString("sendDuration")]);
    m_send_duration_isSet = !json[QString("sendDuration")].isNull() && m_send_duration_isValid;

    m_total_duration_isValid = ::OpenAPI::fromJsonValue(m_total_duration, json[QString("totalDuration")]);
    m_total_duration_isSet = !json[QString("totalDuration")].isNull() && m_total_duration_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_url_host_isValid = ::OpenAPI::fromJsonValue(m_url_host, json[QString("urlHost")]);
    m_url_host_isSet = !json[QString("urlHost")].isNull() && m_url_host_isValid;

    m_url_path_isValid = ::OpenAPI::fromJsonValue(m_url_path, json[QString("urlPath")]);
    m_url_path_isSet = !json[QString("urlPath")].isNull() && m_url_path_isValid;
}

QString OAIEventsBrowserTimingInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventsBrowserTimingInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_duration_isSet) {
        obj.insert(QString("networkDuration"), ::OpenAPI::toJsonValue(m_network_duration));
    }
    if (m_performance_bucket_isSet) {
        obj.insert(QString("performanceBucket"), ::OpenAPI::toJsonValue(m_performance_bucket));
    }
    if (m_processing_duration_isSet) {
        obj.insert(QString("processingDuration"), ::OpenAPI::toJsonValue(m_processing_duration));
    }
    if (m_receive_duration_isSet) {
        obj.insert(QString("receiveDuration"), ::OpenAPI::toJsonValue(m_receive_duration));
    }
    if (m_send_duration_isSet) {
        obj.insert(QString("sendDuration"), ::OpenAPI::toJsonValue(m_send_duration));
    }
    if (m_total_duration_isSet) {
        obj.insert(QString("totalDuration"), ::OpenAPI::toJsonValue(m_total_duration));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_url_host_isSet) {
        obj.insert(QString("urlHost"), ::OpenAPI::toJsonValue(m_url_host));
    }
    if (m_url_path_isSet) {
        obj.insert(QString("urlPath"), ::OpenAPI::toJsonValue(m_url_path));
    }
    return obj;
}

QString OAIEventsBrowserTimingInfo::getName() const {
    return m_name;
}
void OAIEventsBrowserTimingInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEventsBrowserTimingInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEventsBrowserTimingInfo::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIEventsBrowserTimingInfo::getNetworkDuration() const {
    return m_network_duration;
}
void OAIEventsBrowserTimingInfo::setNetworkDuration(const qint64 &network_duration) {
    m_network_duration = network_duration;
    m_network_duration_isSet = true;
}

bool OAIEventsBrowserTimingInfo::is_network_duration_Set() const{
    return m_network_duration_isSet;
}

bool OAIEventsBrowserTimingInfo::is_network_duration_Valid() const{
    return m_network_duration_isValid;
}

QString OAIEventsBrowserTimingInfo::getPerformanceBucket() const {
    return m_performance_bucket;
}
void OAIEventsBrowserTimingInfo::setPerformanceBucket(const QString &performance_bucket) {
    m_performance_bucket = performance_bucket;
    m_performance_bucket_isSet = true;
}

bool OAIEventsBrowserTimingInfo::is_performance_bucket_Set() const{
    return m_performance_bucket_isSet;
}

bool OAIEventsBrowserTimingInfo::is_performance_bucket_Valid() const{
    return m_performance_bucket_isValid;
}

qint64 OAIEventsBrowserTimingInfo::getProcessingDuration() const {
    return m_processing_duration;
}
void OAIEventsBrowserTimingInfo::setProcessingDuration(const qint64 &processing_duration) {
    m_processing_duration = processing_duration;
    m_processing_duration_isSet = true;
}

bool OAIEventsBrowserTimingInfo::is_processing_duration_Set() const{
    return m_processing_duration_isSet;
}

bool OAIEventsBrowserTimingInfo::is_processing_duration_Valid() const{
    return m_processing_duration_isValid;
}

qint64 OAIEventsBrowserTimingInfo::getReceiveDuration() const {
    return m_receive_duration;
}
void OAIEventsBrowserTimingInfo::setReceiveDuration(const qint64 &receive_duration) {
    m_receive_duration = receive_duration;
    m_receive_duration_isSet = true;
}

bool OAIEventsBrowserTimingInfo::is_receive_duration_Set() const{
    return m_receive_duration_isSet;
}

bool OAIEventsBrowserTimingInfo::is_receive_duration_Valid() const{
    return m_receive_duration_isValid;
}

qint64 OAIEventsBrowserTimingInfo::getSendDuration() const {
    return m_send_duration;
}
void OAIEventsBrowserTimingInfo::setSendDuration(const qint64 &send_duration) {
    m_send_duration = send_duration;
    m_send_duration_isSet = true;
}

bool OAIEventsBrowserTimingInfo::is_send_duration_Set() const{
    return m_send_duration_isSet;
}

bool OAIEventsBrowserTimingInfo::is_send_duration_Valid() const{
    return m_send_duration_isValid;
}

qint64 OAIEventsBrowserTimingInfo::getTotalDuration() const {
    return m_total_duration;
}
void OAIEventsBrowserTimingInfo::setTotalDuration(const qint64 &total_duration) {
    m_total_duration = total_duration;
    m_total_duration_isSet = true;
}

bool OAIEventsBrowserTimingInfo::is_total_duration_Set() const{
    return m_total_duration_isSet;
}

bool OAIEventsBrowserTimingInfo::is_total_duration_Valid() const{
    return m_total_duration_isValid;
}

QString OAIEventsBrowserTimingInfo::getUrl() const {
    return m_url;
}
void OAIEventsBrowserTimingInfo::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIEventsBrowserTimingInfo::is_url_Set() const{
    return m_url_isSet;
}

bool OAIEventsBrowserTimingInfo::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIEventsBrowserTimingInfo::getUrlHost() const {
    return m_url_host;
}
void OAIEventsBrowserTimingInfo::setUrlHost(const QString &url_host) {
    m_url_host = url_host;
    m_url_host_isSet = true;
}

bool OAIEventsBrowserTimingInfo::is_url_host_Set() const{
    return m_url_host_isSet;
}

bool OAIEventsBrowserTimingInfo::is_url_host_Valid() const{
    return m_url_host_isValid;
}

QString OAIEventsBrowserTimingInfo::getUrlPath() const {
    return m_url_path;
}
void OAIEventsBrowserTimingInfo::setUrlPath(const QString &url_path) {
    m_url_path = url_path;
    m_url_path_isSet = true;
}

bool OAIEventsBrowserTimingInfo::is_url_path_Set() const{
    return m_url_path_isSet;
}

bool OAIEventsBrowserTimingInfo::is_url_path_Valid() const{
    return m_url_path_isValid;
}

bool OAIEventsBrowserTimingInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receive_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventsBrowserTimingInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
