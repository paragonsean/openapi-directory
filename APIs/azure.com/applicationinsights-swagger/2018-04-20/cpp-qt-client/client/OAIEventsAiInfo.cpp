/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventsAiInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventsAiInfo::OAIEventsAiInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventsAiInfo::OAIEventsAiInfo() {
    this->initializeModel();
}

OAIEventsAiInfo::~OAIEventsAiInfo() {}

void OAIEventsAiInfo::initializeModel() {

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_app_name_isSet = false;
    m_app_name_isValid = false;

    m_i_key_isSet = false;
    m_i_key_isValid = false;

    m_sdk_version_isSet = false;
    m_sdk_version_isValid = false;
}

void OAIEventsAiInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventsAiInfo::fromJsonObject(QJsonObject json) {

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_app_name_isValid = ::OpenAPI::fromJsonValue(m_app_name, json[QString("appName")]);
    m_app_name_isSet = !json[QString("appName")].isNull() && m_app_name_isValid;

    m_i_key_isValid = ::OpenAPI::fromJsonValue(m_i_key, json[QString("iKey")]);
    m_i_key_isSet = !json[QString("iKey")].isNull() && m_i_key_isValid;

    m_sdk_version_isValid = ::OpenAPI::fromJsonValue(m_sdk_version, json[QString("sdkVersion")]);
    m_sdk_version_isSet = !json[QString("sdkVersion")].isNull() && m_sdk_version_isValid;
}

QString OAIEventsAiInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventsAiInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_app_name_isSet) {
        obj.insert(QString("appName"), ::OpenAPI::toJsonValue(m_app_name));
    }
    if (m_i_key_isSet) {
        obj.insert(QString("iKey"), ::OpenAPI::toJsonValue(m_i_key));
    }
    if (m_sdk_version_isSet) {
        obj.insert(QString("sdkVersion"), ::OpenAPI::toJsonValue(m_sdk_version));
    }
    return obj;
}

QString OAIEventsAiInfo::getAppId() const {
    return m_app_id;
}
void OAIEventsAiInfo::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIEventsAiInfo::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIEventsAiInfo::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIEventsAiInfo::getAppName() const {
    return m_app_name;
}
void OAIEventsAiInfo::setAppName(const QString &app_name) {
    m_app_name = app_name;
    m_app_name_isSet = true;
}

bool OAIEventsAiInfo::is_app_name_Set() const{
    return m_app_name_isSet;
}

bool OAIEventsAiInfo::is_app_name_Valid() const{
    return m_app_name_isValid;
}

QString OAIEventsAiInfo::getIKey() const {
    return m_i_key;
}
void OAIEventsAiInfo::setIKey(const QString &i_key) {
    m_i_key = i_key;
    m_i_key_isSet = true;
}

bool OAIEventsAiInfo::is_i_key_Set() const{
    return m_i_key_isSet;
}

bool OAIEventsAiInfo::is_i_key_Valid() const{
    return m_i_key_isValid;
}

QString OAIEventsAiInfo::getSdkVersion() const {
    return m_sdk_version;
}
void OAIEventsAiInfo::setSdkVersion(const QString &sdk_version) {
    m_sdk_version = sdk_version;
    m_sdk_version_isSet = true;
}

bool OAIEventsAiInfo::is_sdk_version_Set() const{
    return m_sdk_version_isSet;
}

bool OAIEventsAiInfo::is_sdk_version_Valid() const{
    return m_sdk_version_isValid;
}

bool OAIEventsAiInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdk_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventsAiInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
