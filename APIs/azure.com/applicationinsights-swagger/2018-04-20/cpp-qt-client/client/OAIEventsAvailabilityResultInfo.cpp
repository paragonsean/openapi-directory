/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventsAvailabilityResultInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventsAvailabilityResultInfo::OAIEventsAvailabilityResultInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventsAvailabilityResultInfo::OAIEventsAvailabilityResultInfo() {
    this->initializeModel();
}

OAIEventsAvailabilityResultInfo::~OAIEventsAvailabilityResultInfo() {}

void OAIEventsAvailabilityResultInfo::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_performance_bucket_isSet = false;
    m_performance_bucket_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;
}

void OAIEventsAvailabilityResultInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventsAvailabilityResultInfo::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_performance_bucket_isValid = ::OpenAPI::fromJsonValue(m_performance_bucket, json[QString("performanceBucket")]);
    m_performance_bucket_isSet = !json[QString("performanceBucket")].isNull() && m_performance_bucket_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;
}

QString OAIEventsAvailabilityResultInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventsAvailabilityResultInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_performance_bucket_isSet) {
        obj.insert(QString("performanceBucket"), ::OpenAPI::toJsonValue(m_performance_bucket));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    return obj;
}

qint64 OAIEventsAvailabilityResultInfo::getDuration() const {
    return m_duration;
}
void OAIEventsAvailabilityResultInfo::setDuration(const qint64 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIEventsAvailabilityResultInfo::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIEventsAvailabilityResultInfo::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIEventsAvailabilityResultInfo::getId() const {
    return m_id;
}
void OAIEventsAvailabilityResultInfo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEventsAvailabilityResultInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEventsAvailabilityResultInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEventsAvailabilityResultInfo::getLocation() const {
    return m_location;
}
void OAIEventsAvailabilityResultInfo::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIEventsAvailabilityResultInfo::is_location_Set() const{
    return m_location_isSet;
}

bool OAIEventsAvailabilityResultInfo::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIEventsAvailabilityResultInfo::getMessage() const {
    return m_message;
}
void OAIEventsAvailabilityResultInfo::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIEventsAvailabilityResultInfo::is_message_Set() const{
    return m_message_isSet;
}

bool OAIEventsAvailabilityResultInfo::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIEventsAvailabilityResultInfo::getName() const {
    return m_name;
}
void OAIEventsAvailabilityResultInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEventsAvailabilityResultInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEventsAvailabilityResultInfo::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEventsAvailabilityResultInfo::getPerformanceBucket() const {
    return m_performance_bucket;
}
void OAIEventsAvailabilityResultInfo::setPerformanceBucket(const QString &performance_bucket) {
    m_performance_bucket = performance_bucket;
    m_performance_bucket_isSet = true;
}

bool OAIEventsAvailabilityResultInfo::is_performance_bucket_Set() const{
    return m_performance_bucket_isSet;
}

bool OAIEventsAvailabilityResultInfo::is_performance_bucket_Valid() const{
    return m_performance_bucket_isValid;
}

QString OAIEventsAvailabilityResultInfo::getSize() const {
    return m_size;
}
void OAIEventsAvailabilityResultInfo::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIEventsAvailabilityResultInfo::is_size_Set() const{
    return m_size_isSet;
}

bool OAIEventsAvailabilityResultInfo::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIEventsAvailabilityResultInfo::getSuccess() const {
    return m_success;
}
void OAIEventsAvailabilityResultInfo::setSuccess(const QString &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIEventsAvailabilityResultInfo::is_success_Set() const{
    return m_success_isSet;
}

bool OAIEventsAvailabilityResultInfo::is_success_Valid() const{
    return m_success_isValid;
}

bool OAIEventsAvailabilityResultInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventsAvailabilityResultInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
