/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorDetail::OAIErrorDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorDetail::OAIErrorDetail() {
    this->initializeModel();
}

OAIErrorDetail::~OAIErrorDetail() {}

void OAIErrorDetail::initializeModel() {

    m_additional_properties_isSet = false;
    m_additional_properties_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIErrorDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorDetail::fromJsonObject(QJsonObject json) {

    m_additional_properties_isValid = ::OpenAPI::fromJsonValue(m_additional_properties, json[QString("additionalProperties")]);
    m_additional_properties_isSet = !json[QString("additionalProperties")].isNull() && m_additional_properties_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIErrorDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_properties_isSet) {
        obj.insert(QString("additionalProperties"), ::OpenAPI::toJsonValue(m_additional_properties));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAIObject OAIErrorDetail::getAdditionalProperties() const {
    return m_additional_properties;
}
void OAIErrorDetail::setAdditionalProperties(const OAIObject &additional_properties) {
    m_additional_properties = additional_properties;
    m_additional_properties_isSet = true;
}

bool OAIErrorDetail::is_additional_properties_Set() const{
    return m_additional_properties_isSet;
}

bool OAIErrorDetail::is_additional_properties_Valid() const{
    return m_additional_properties_isValid;
}

QString OAIErrorDetail::getCode() const {
    return m_code;
}
void OAIErrorDetail::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIErrorDetail::is_code_Set() const{
    return m_code_isSet;
}

bool OAIErrorDetail::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIErrorDetail::getMessage() const {
    return m_message;
}
void OAIErrorDetail::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIErrorDetail::is_message_Set() const{
    return m_message_isSet;
}

bool OAIErrorDetail::is_message_Valid() const{
    return m_message_isValid;
}

QList<QString> OAIErrorDetail::getResources() const {
    return m_resources;
}
void OAIErrorDetail::setResources(const QList<QString> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIErrorDetail::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIErrorDetail::is_resources_Valid() const{
    return m_resources_isValid;
}

QString OAIErrorDetail::getTarget() const {
    return m_target;
}
void OAIErrorDetail::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIErrorDetail::is_target_Set() const{
    return m_target_isSet;
}

bool OAIErrorDetail::is_target_Valid() const{
    return m_target_isValid;
}

QString OAIErrorDetail::getValue() const {
    return m_value;
}
void OAIErrorDetail::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIErrorDetail::is_value_Set() const{
    return m_value_isSet;
}

bool OAIErrorDetail::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIErrorDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_code_isValid && m_message_isValid && true;
}

} // namespace OpenAPI
