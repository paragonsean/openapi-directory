/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventsExceptionDetailsParsedStack.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventsExceptionDetailsParsedStack::OAIEventsExceptionDetailsParsedStack(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventsExceptionDetailsParsedStack::OAIEventsExceptionDetailsParsedStack() {
    this->initializeModel();
}

OAIEventsExceptionDetailsParsedStack::~OAIEventsExceptionDetailsParsedStack() {}

void OAIEventsExceptionDetailsParsedStack::initializeModel() {

    m_assembly_isSet = false;
    m_assembly_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_line_isSet = false;
    m_line_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;
}

void OAIEventsExceptionDetailsParsedStack::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventsExceptionDetailsParsedStack::fromJsonObject(QJsonObject json) {

    m_assembly_isValid = ::OpenAPI::fromJsonValue(m_assembly, json[QString("assembly")]);
    m_assembly_isSet = !json[QString("assembly")].isNull() && m_assembly_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_line_isValid = ::OpenAPI::fromJsonValue(m_line, json[QString("line")]);
    m_line_isSet = !json[QString("line")].isNull() && m_line_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;
}

QString OAIEventsExceptionDetailsParsedStack::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventsExceptionDetailsParsedStack::asJsonObject() const {
    QJsonObject obj;
    if (m_assembly_isSet) {
        obj.insert(QString("assembly"), ::OpenAPI::toJsonValue(m_assembly));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_line_isSet) {
        obj.insert(QString("line"), ::OpenAPI::toJsonValue(m_line));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    return obj;
}

QString OAIEventsExceptionDetailsParsedStack::getAssembly() const {
    return m_assembly;
}
void OAIEventsExceptionDetailsParsedStack::setAssembly(const QString &assembly) {
    m_assembly = assembly;
    m_assembly_isSet = true;
}

bool OAIEventsExceptionDetailsParsedStack::is_assembly_Set() const{
    return m_assembly_isSet;
}

bool OAIEventsExceptionDetailsParsedStack::is_assembly_Valid() const{
    return m_assembly_isValid;
}

qint64 OAIEventsExceptionDetailsParsedStack::getLevel() const {
    return m_level;
}
void OAIEventsExceptionDetailsParsedStack::setLevel(const qint64 &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIEventsExceptionDetailsParsedStack::is_level_Set() const{
    return m_level_isSet;
}

bool OAIEventsExceptionDetailsParsedStack::is_level_Valid() const{
    return m_level_isValid;
}

qint64 OAIEventsExceptionDetailsParsedStack::getLine() const {
    return m_line;
}
void OAIEventsExceptionDetailsParsedStack::setLine(const qint64 &line) {
    m_line = line;
    m_line_isSet = true;
}

bool OAIEventsExceptionDetailsParsedStack::is_line_Set() const{
    return m_line_isSet;
}

bool OAIEventsExceptionDetailsParsedStack::is_line_Valid() const{
    return m_line_isValid;
}

QString OAIEventsExceptionDetailsParsedStack::getMethod() const {
    return m_method;
}
void OAIEventsExceptionDetailsParsedStack::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIEventsExceptionDetailsParsedStack::is_method_Set() const{
    return m_method_isSet;
}

bool OAIEventsExceptionDetailsParsedStack::is_method_Valid() const{
    return m_method_isValid;
}

bool OAIEventsExceptionDetailsParsedStack::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assembly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventsExceptionDetailsParsedStack::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
