/**
 * Application Insights Data Plane
 * This API exposes AI metric & event information and associated metadata
 *
 * The version of the OpenAPI document: 2018-04-20
 * Contact: aiapi@microsoft.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventsCustomMetricInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventsCustomMetricInfo::OAIEventsCustomMetricInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventsCustomMetricInfo::OAIEventsCustomMetricInfo() {
    this->initializeModel();
}

OAIEventsCustomMetricInfo::~OAIEventsCustomMetricInfo() {}

void OAIEventsCustomMetricInfo::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_value_count_isSet = false;
    m_value_count_isValid = false;

    m_value_max_isSet = false;
    m_value_max_isValid = false;

    m_value_min_isSet = false;
    m_value_min_isValid = false;

    m_value_std_dev_isSet = false;
    m_value_std_dev_isValid = false;

    m_value_sum_isSet = false;
    m_value_sum_isValid = false;
}

void OAIEventsCustomMetricInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventsCustomMetricInfo::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_value_count_isValid = ::OpenAPI::fromJsonValue(m_value_count, json[QString("valueCount")]);
    m_value_count_isSet = !json[QString("valueCount")].isNull() && m_value_count_isValid;

    m_value_max_isValid = ::OpenAPI::fromJsonValue(m_value_max, json[QString("valueMax")]);
    m_value_max_isSet = !json[QString("valueMax")].isNull() && m_value_max_isValid;

    m_value_min_isValid = ::OpenAPI::fromJsonValue(m_value_min, json[QString("valueMin")]);
    m_value_min_isSet = !json[QString("valueMin")].isNull() && m_value_min_isValid;

    m_value_std_dev_isValid = ::OpenAPI::fromJsonValue(m_value_std_dev, json[QString("valueStdDev")]);
    m_value_std_dev_isSet = !json[QString("valueStdDev")].isNull() && m_value_std_dev_isValid;

    m_value_sum_isValid = ::OpenAPI::fromJsonValue(m_value_sum, json[QString("valueSum")]);
    m_value_sum_isSet = !json[QString("valueSum")].isNull() && m_value_sum_isValid;
}

QString OAIEventsCustomMetricInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventsCustomMetricInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_value_count_isSet) {
        obj.insert(QString("valueCount"), ::OpenAPI::toJsonValue(m_value_count));
    }
    if (m_value_max_isSet) {
        obj.insert(QString("valueMax"), ::OpenAPI::toJsonValue(m_value_max));
    }
    if (m_value_min_isSet) {
        obj.insert(QString("valueMin"), ::OpenAPI::toJsonValue(m_value_min));
    }
    if (m_value_std_dev_isSet) {
        obj.insert(QString("valueStdDev"), ::OpenAPI::toJsonValue(m_value_std_dev));
    }
    if (m_value_sum_isSet) {
        obj.insert(QString("valueSum"), ::OpenAPI::toJsonValue(m_value_sum));
    }
    return obj;
}

QString OAIEventsCustomMetricInfo::getName() const {
    return m_name;
}
void OAIEventsCustomMetricInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEventsCustomMetricInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEventsCustomMetricInfo::is_name_Valid() const{
    return m_name_isValid;
}

double OAIEventsCustomMetricInfo::getValue() const {
    return m_value;
}
void OAIEventsCustomMetricInfo::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIEventsCustomMetricInfo::is_value_Set() const{
    return m_value_isSet;
}

bool OAIEventsCustomMetricInfo::is_value_Valid() const{
    return m_value_isValid;
}

qint32 OAIEventsCustomMetricInfo::getValueCount() const {
    return m_value_count;
}
void OAIEventsCustomMetricInfo::setValueCount(const qint32 &value_count) {
    m_value_count = value_count;
    m_value_count_isSet = true;
}

bool OAIEventsCustomMetricInfo::is_value_count_Set() const{
    return m_value_count_isSet;
}

bool OAIEventsCustomMetricInfo::is_value_count_Valid() const{
    return m_value_count_isValid;
}

double OAIEventsCustomMetricInfo::getValueMax() const {
    return m_value_max;
}
void OAIEventsCustomMetricInfo::setValueMax(const double &value_max) {
    m_value_max = value_max;
    m_value_max_isSet = true;
}

bool OAIEventsCustomMetricInfo::is_value_max_Set() const{
    return m_value_max_isSet;
}

bool OAIEventsCustomMetricInfo::is_value_max_Valid() const{
    return m_value_max_isValid;
}

double OAIEventsCustomMetricInfo::getValueMin() const {
    return m_value_min;
}
void OAIEventsCustomMetricInfo::setValueMin(const double &value_min) {
    m_value_min = value_min;
    m_value_min_isSet = true;
}

bool OAIEventsCustomMetricInfo::is_value_min_Set() const{
    return m_value_min_isSet;
}

bool OAIEventsCustomMetricInfo::is_value_min_Valid() const{
    return m_value_min_isValid;
}

double OAIEventsCustomMetricInfo::getValueStdDev() const {
    return m_value_std_dev;
}
void OAIEventsCustomMetricInfo::setValueStdDev(const double &value_std_dev) {
    m_value_std_dev = value_std_dev;
    m_value_std_dev_isSet = true;
}

bool OAIEventsCustomMetricInfo::is_value_std_dev_Set() const{
    return m_value_std_dev_isSet;
}

bool OAIEventsCustomMetricInfo::is_value_std_dev_Valid() const{
    return m_value_std_dev_isValid;
}

double OAIEventsCustomMetricInfo::getValueSum() const {
    return m_value_sum;
}
void OAIEventsCustomMetricInfo::setValueSum(const double &value_sum) {
    m_value_sum = value_sum;
    m_value_sum_isSet = true;
}

bool OAIEventsCustomMetricInfo::is_value_sum_Set() const{
    return m_value_sum_isSet;
}

bool OAIEventsCustomMetricInfo::is_value_sum_Valid() const{
    return m_value_sum_isValid;
}

bool OAIEventsCustomMetricInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_std_dev_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_sum_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventsCustomMetricInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
