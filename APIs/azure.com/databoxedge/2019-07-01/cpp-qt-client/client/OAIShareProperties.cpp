/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShareProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShareProperties::OAIShareProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShareProperties::OAIShareProperties() {
    this->initializeModel();
}

OAIShareProperties::~OAIShareProperties() {}

void OAIShareProperties::initializeModel() {

    m_access_protocol_isSet = false;
    m_access_protocol_isValid = false;

    m_azure_container_info_isSet = false;
    m_azure_container_info_isValid = false;

    m_client_access_rights_isSet = false;
    m_client_access_rights_isValid = false;

    m_data_policy_isSet = false;
    m_data_policy_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_monitoring_status_isSet = false;
    m_monitoring_status_isValid = false;

    m_refresh_details_isSet = false;
    m_refresh_details_isValid = false;

    m_share_mappings_isSet = false;
    m_share_mappings_isValid = false;

    m_share_status_isSet = false;
    m_share_status_isValid = false;

    m_user_access_rights_isSet = false;
    m_user_access_rights_isValid = false;
}

void OAIShareProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShareProperties::fromJsonObject(QJsonObject json) {

    m_access_protocol_isValid = ::OpenAPI::fromJsonValue(m_access_protocol, json[QString("accessProtocol")]);
    m_access_protocol_isSet = !json[QString("accessProtocol")].isNull() && m_access_protocol_isValid;

    m_azure_container_info_isValid = ::OpenAPI::fromJsonValue(m_azure_container_info, json[QString("azureContainerInfo")]);
    m_azure_container_info_isSet = !json[QString("azureContainerInfo")].isNull() && m_azure_container_info_isValid;

    m_client_access_rights_isValid = ::OpenAPI::fromJsonValue(m_client_access_rights, json[QString("clientAccessRights")]);
    m_client_access_rights_isSet = !json[QString("clientAccessRights")].isNull() && m_client_access_rights_isValid;

    m_data_policy_isValid = ::OpenAPI::fromJsonValue(m_data_policy, json[QString("dataPolicy")]);
    m_data_policy_isSet = !json[QString("dataPolicy")].isNull() && m_data_policy_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_monitoring_status_isValid = ::OpenAPI::fromJsonValue(m_monitoring_status, json[QString("monitoringStatus")]);
    m_monitoring_status_isSet = !json[QString("monitoringStatus")].isNull() && m_monitoring_status_isValid;

    m_refresh_details_isValid = ::OpenAPI::fromJsonValue(m_refresh_details, json[QString("refreshDetails")]);
    m_refresh_details_isSet = !json[QString("refreshDetails")].isNull() && m_refresh_details_isValid;

    m_share_mappings_isValid = ::OpenAPI::fromJsonValue(m_share_mappings, json[QString("shareMappings")]);
    m_share_mappings_isSet = !json[QString("shareMappings")].isNull() && m_share_mappings_isValid;

    m_share_status_isValid = ::OpenAPI::fromJsonValue(m_share_status, json[QString("shareStatus")]);
    m_share_status_isSet = !json[QString("shareStatus")].isNull() && m_share_status_isValid;

    m_user_access_rights_isValid = ::OpenAPI::fromJsonValue(m_user_access_rights, json[QString("userAccessRights")]);
    m_user_access_rights_isSet = !json[QString("userAccessRights")].isNull() && m_user_access_rights_isValid;
}

QString OAIShareProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShareProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_access_protocol_isSet) {
        obj.insert(QString("accessProtocol"), ::OpenAPI::toJsonValue(m_access_protocol));
    }
    if (m_azure_container_info.isSet()) {
        obj.insert(QString("azureContainerInfo"), ::OpenAPI::toJsonValue(m_azure_container_info));
    }
    if (m_client_access_rights.size() > 0) {
        obj.insert(QString("clientAccessRights"), ::OpenAPI::toJsonValue(m_client_access_rights));
    }
    if (m_data_policy_isSet) {
        obj.insert(QString("dataPolicy"), ::OpenAPI::toJsonValue(m_data_policy));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_monitoring_status_isSet) {
        obj.insert(QString("monitoringStatus"), ::OpenAPI::toJsonValue(m_monitoring_status));
    }
    if (m_refresh_details.isSet()) {
        obj.insert(QString("refreshDetails"), ::OpenAPI::toJsonValue(m_refresh_details));
    }
    if (m_share_mappings.size() > 0) {
        obj.insert(QString("shareMappings"), ::OpenAPI::toJsonValue(m_share_mappings));
    }
    if (m_share_status_isSet) {
        obj.insert(QString("shareStatus"), ::OpenAPI::toJsonValue(m_share_status));
    }
    if (m_user_access_rights.size() > 0) {
        obj.insert(QString("userAccessRights"), ::OpenAPI::toJsonValue(m_user_access_rights));
    }
    return obj;
}

QString OAIShareProperties::getAccessProtocol() const {
    return m_access_protocol;
}
void OAIShareProperties::setAccessProtocol(const QString &access_protocol) {
    m_access_protocol = access_protocol;
    m_access_protocol_isSet = true;
}

bool OAIShareProperties::is_access_protocol_Set() const{
    return m_access_protocol_isSet;
}

bool OAIShareProperties::is_access_protocol_Valid() const{
    return m_access_protocol_isValid;
}

OAIAzureContainerInfo OAIShareProperties::getAzureContainerInfo() const {
    return m_azure_container_info;
}
void OAIShareProperties::setAzureContainerInfo(const OAIAzureContainerInfo &azure_container_info) {
    m_azure_container_info = azure_container_info;
    m_azure_container_info_isSet = true;
}

bool OAIShareProperties::is_azure_container_info_Set() const{
    return m_azure_container_info_isSet;
}

bool OAIShareProperties::is_azure_container_info_Valid() const{
    return m_azure_container_info_isValid;
}

QList<OAIClientAccessRight> OAIShareProperties::getClientAccessRights() const {
    return m_client_access_rights;
}
void OAIShareProperties::setClientAccessRights(const QList<OAIClientAccessRight> &client_access_rights) {
    m_client_access_rights = client_access_rights;
    m_client_access_rights_isSet = true;
}

bool OAIShareProperties::is_client_access_rights_Set() const{
    return m_client_access_rights_isSet;
}

bool OAIShareProperties::is_client_access_rights_Valid() const{
    return m_client_access_rights_isValid;
}

QString OAIShareProperties::getDataPolicy() const {
    return m_data_policy;
}
void OAIShareProperties::setDataPolicy(const QString &data_policy) {
    m_data_policy = data_policy;
    m_data_policy_isSet = true;
}

bool OAIShareProperties::is_data_policy_Set() const{
    return m_data_policy_isSet;
}

bool OAIShareProperties::is_data_policy_Valid() const{
    return m_data_policy_isValid;
}

QString OAIShareProperties::getDescription() const {
    return m_description;
}
void OAIShareProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIShareProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIShareProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIShareProperties::getMonitoringStatus() const {
    return m_monitoring_status;
}
void OAIShareProperties::setMonitoringStatus(const QString &monitoring_status) {
    m_monitoring_status = monitoring_status;
    m_monitoring_status_isSet = true;
}

bool OAIShareProperties::is_monitoring_status_Set() const{
    return m_monitoring_status_isSet;
}

bool OAIShareProperties::is_monitoring_status_Valid() const{
    return m_monitoring_status_isValid;
}

OAIRefreshDetails OAIShareProperties::getRefreshDetails() const {
    return m_refresh_details;
}
void OAIShareProperties::setRefreshDetails(const OAIRefreshDetails &refresh_details) {
    m_refresh_details = refresh_details;
    m_refresh_details_isSet = true;
}

bool OAIShareProperties::is_refresh_details_Set() const{
    return m_refresh_details_isSet;
}

bool OAIShareProperties::is_refresh_details_Valid() const{
    return m_refresh_details_isValid;
}

QList<OAIMountPointMap> OAIShareProperties::getShareMappings() const {
    return m_share_mappings;
}
void OAIShareProperties::setShareMappings(const QList<OAIMountPointMap> &share_mappings) {
    m_share_mappings = share_mappings;
    m_share_mappings_isSet = true;
}

bool OAIShareProperties::is_share_mappings_Set() const{
    return m_share_mappings_isSet;
}

bool OAIShareProperties::is_share_mappings_Valid() const{
    return m_share_mappings_isValid;
}

QString OAIShareProperties::getShareStatus() const {
    return m_share_status;
}
void OAIShareProperties::setShareStatus(const QString &share_status) {
    m_share_status = share_status;
    m_share_status_isSet = true;
}

bool OAIShareProperties::is_share_status_Set() const{
    return m_share_status_isSet;
}

bool OAIShareProperties::is_share_status_Valid() const{
    return m_share_status_isValid;
}

QList<OAIUserAccessRight> OAIShareProperties::getUserAccessRights() const {
    return m_user_access_rights;
}
void OAIShareProperties::setUserAccessRights(const QList<OAIUserAccessRight> &user_access_rights) {
    m_user_access_rights = user_access_rights;
    m_user_access_rights_isSet = true;
}

bool OAIShareProperties::is_user_access_rights_Set() const{
    return m_user_access_rights_isSet;
}

bool OAIShareProperties::is_user_access_rights_Valid() const{
    return m_user_access_rights_isValid;
}

bool OAIShareProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_container_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_access_rights.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_access_rights.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShareProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_protocol_isValid && m_monitoring_status_isValid && m_share_status_isValid && true;
}

} // namespace OpenAPI
