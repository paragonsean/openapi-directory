/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDevicesApi_H
#define OAI_OAIDevicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIDataBoxEdgeDevice.h"
#include "OAIDataBoxEdgeDeviceExtendedInfo.h"
#include "OAIDataBoxEdgeDeviceList.h"
#include "OAIDataBoxEdgeDevicePatch.h"
#include "OAINetworkSettings.h"
#include "OAISecuritySettings.h"
#include "OAIUpdateSummary.h"
#include "OAIUploadCertificateRequest.h"
#include "OAIUploadCertificateResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDevicesApi : public QObject {
    Q_OBJECT

public:
    OAIDevicesApi(const int timeOut = 0);
    ~OAIDevicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  data_box_edge_device OAIDataBoxEdgeDevice [required]
    */
    virtual void devicesCreateOrUpdate(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const OAIDataBoxEdgeDevice &data_box_edge_device);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  security_settings OAISecuritySettings [required]
    */
    virtual void devicesCreateOrUpdateSecuritySettings(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const OAISecuritySettings &security_settings);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesDelete(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesDownloadUpdates(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesGet(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesGetExtendedInformation(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesGetNetworkSettings(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesGetUpdateSummary(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesInstallUpdates(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void devicesListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void devicesListBySubscription(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void devicesScanForUpdates(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIDataBoxEdgeDevicePatch [required]
    */
    virtual void devicesUpdate(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const OAIDataBoxEdgeDevicePatch &parameters);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIUploadCertificateRequest [required]
    */
    virtual void devicesUploadCertificate(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const OAIUploadCertificateRequest &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void devicesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void devicesCreateOrUpdateSecuritySettingsCallback(OAIHttpRequestWorker *worker);
    void devicesDeleteCallback(OAIHttpRequestWorker *worker);
    void devicesDownloadUpdatesCallback(OAIHttpRequestWorker *worker);
    void devicesGetCallback(OAIHttpRequestWorker *worker);
    void devicesGetExtendedInformationCallback(OAIHttpRequestWorker *worker);
    void devicesGetNetworkSettingsCallback(OAIHttpRequestWorker *worker);
    void devicesGetUpdateSummaryCallback(OAIHttpRequestWorker *worker);
    void devicesInstallUpdatesCallback(OAIHttpRequestWorker *worker);
    void devicesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void devicesListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void devicesScanForUpdatesCallback(OAIHttpRequestWorker *worker);
    void devicesUpdateCallback(OAIHttpRequestWorker *worker);
    void devicesUploadCertificateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void devicesCreateOrUpdateSignal(OAIDataBoxEdgeDevice summary);
    void devicesCreateOrUpdateSecuritySettingsSignal();
    void devicesDeleteSignal();
    void devicesDownloadUpdatesSignal();
    void devicesGetSignal(OAIDataBoxEdgeDevice summary);
    void devicesGetExtendedInformationSignal(OAIDataBoxEdgeDeviceExtendedInfo summary);
    void devicesGetNetworkSettingsSignal(OAINetworkSettings summary);
    void devicesGetUpdateSummarySignal(OAIUpdateSummary summary);
    void devicesInstallUpdatesSignal();
    void devicesListByResourceGroupSignal(OAIDataBoxEdgeDeviceList summary);
    void devicesListBySubscriptionSignal(OAIDataBoxEdgeDeviceList summary);
    void devicesScanForUpdatesSignal();
    void devicesUpdateSignal(OAIDataBoxEdgeDevice summary);
    void devicesUploadCertificateSignal(OAIUploadCertificateResponse summary);


    void devicesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDataBoxEdgeDevice summary);
    void devicesCreateOrUpdateSecuritySettingsSignalFull(OAIHttpRequestWorker *worker);
    void devicesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void devicesDownloadUpdatesSignalFull(OAIHttpRequestWorker *worker);
    void devicesGetSignalFull(OAIHttpRequestWorker *worker, OAIDataBoxEdgeDevice summary);
    void devicesGetExtendedInformationSignalFull(OAIHttpRequestWorker *worker, OAIDataBoxEdgeDeviceExtendedInfo summary);
    void devicesGetNetworkSettingsSignalFull(OAIHttpRequestWorker *worker, OAINetworkSettings summary);
    void devicesGetUpdateSummarySignalFull(OAIHttpRequestWorker *worker, OAIUpdateSummary summary);
    void devicesInstallUpdatesSignalFull(OAIHttpRequestWorker *worker);
    void devicesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIDataBoxEdgeDeviceList summary);
    void devicesListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIDataBoxEdgeDeviceList summary);
    void devicesScanForUpdatesSignalFull(OAIHttpRequestWorker *worker);
    void devicesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDataBoxEdgeDevice summary);
    void devicesUploadCertificateSignalFull(OAIHttpRequestWorker *worker, OAIUploadCertificateResponse summary);

    Q_DECL_DEPRECATED_X("Use devicesCreateOrUpdateSignalError() instead")
    void devicesCreateOrUpdateSignalE(OAIDataBoxEdgeDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesCreateOrUpdateSignalError(OAIDataBoxEdgeDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesCreateOrUpdateSecuritySettingsSignalError() instead")
    void devicesCreateOrUpdateSecuritySettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesCreateOrUpdateSecuritySettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesDeleteSignalError() instead")
    void devicesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesDownloadUpdatesSignalError() instead")
    void devicesDownloadUpdatesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesDownloadUpdatesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetSignalError() instead")
    void devicesGetSignalE(OAIDataBoxEdgeDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetSignalError(OAIDataBoxEdgeDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetExtendedInformationSignalError() instead")
    void devicesGetExtendedInformationSignalE(OAIDataBoxEdgeDeviceExtendedInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetExtendedInformationSignalError(OAIDataBoxEdgeDeviceExtendedInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetNetworkSettingsSignalError() instead")
    void devicesGetNetworkSettingsSignalE(OAINetworkSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetNetworkSettingsSignalError(OAINetworkSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetUpdateSummarySignalError() instead")
    void devicesGetUpdateSummarySignalE(OAIUpdateSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetUpdateSummarySignalError(OAIUpdateSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesInstallUpdatesSignalError() instead")
    void devicesInstallUpdatesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesInstallUpdatesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListByResourceGroupSignalError() instead")
    void devicesListByResourceGroupSignalE(OAIDataBoxEdgeDeviceList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListByResourceGroupSignalError(OAIDataBoxEdgeDeviceList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListBySubscriptionSignalError() instead")
    void devicesListBySubscriptionSignalE(OAIDataBoxEdgeDeviceList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListBySubscriptionSignalError(OAIDataBoxEdgeDeviceList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesScanForUpdatesSignalError() instead")
    void devicesScanForUpdatesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void devicesScanForUpdatesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesUpdateSignalError() instead")
    void devicesUpdateSignalE(OAIDataBoxEdgeDevice summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesUpdateSignalError(OAIDataBoxEdgeDevice summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesUploadCertificateSignalError() instead")
    void devicesUploadCertificateSignalE(OAIUploadCertificateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesUploadCertificateSignalError(OAIUploadCertificateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use devicesCreateOrUpdateSignalErrorFull() instead")
    void devicesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesCreateOrUpdateSecuritySettingsSignalErrorFull() instead")
    void devicesCreateOrUpdateSecuritySettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesCreateOrUpdateSecuritySettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesDeleteSignalErrorFull() instead")
    void devicesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesDownloadUpdatesSignalErrorFull() instead")
    void devicesDownloadUpdatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesDownloadUpdatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetSignalErrorFull() instead")
    void devicesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetExtendedInformationSignalErrorFull() instead")
    void devicesGetExtendedInformationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetExtendedInformationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetNetworkSettingsSignalErrorFull() instead")
    void devicesGetNetworkSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetNetworkSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesGetUpdateSummarySignalErrorFull() instead")
    void devicesGetUpdateSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesGetUpdateSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesInstallUpdatesSignalErrorFull() instead")
    void devicesInstallUpdatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesInstallUpdatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListByResourceGroupSignalErrorFull() instead")
    void devicesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesListBySubscriptionSignalErrorFull() instead")
    void devicesListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesScanForUpdatesSignalErrorFull() instead")
    void devicesScanForUpdatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesScanForUpdatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesUpdateSignalErrorFull() instead")
    void devicesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use devicesUploadCertificateSignalErrorFull() instead")
    void devicesUploadCertificateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void devicesUploadCertificateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
