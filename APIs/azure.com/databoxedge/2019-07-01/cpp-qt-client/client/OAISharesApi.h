/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISharesApi_H
#define OAI_OAISharesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIShare.h"
#include "OAIShareList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISharesApi : public QObject {
    Q_OBJECT

public:
    OAISharesApi(const int timeOut = 0);
    ~OAISharesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  share OAIShare [required]
    */
    virtual void sharesCreateOrUpdate(const QString &device_name, const QString &name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const OAIShare &share);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sharesDelete(const QString &device_name, const QString &name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sharesGet(const QString &device_name, const QString &name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sharesListByDataBoxEdgeDevice(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sharesRefresh(const QString &device_name, const QString &name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void sharesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void sharesDeleteCallback(OAIHttpRequestWorker *worker);
    void sharesGetCallback(OAIHttpRequestWorker *worker);
    void sharesListByDataBoxEdgeDeviceCallback(OAIHttpRequestWorker *worker);
    void sharesRefreshCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void sharesCreateOrUpdateSignal(OAIShare summary);
    void sharesDeleteSignal();
    void sharesGetSignal(OAIShare summary);
    void sharesListByDataBoxEdgeDeviceSignal(OAIShareList summary);
    void sharesRefreshSignal();


    void sharesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIShare summary);
    void sharesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void sharesGetSignalFull(OAIHttpRequestWorker *worker, OAIShare summary);
    void sharesListByDataBoxEdgeDeviceSignalFull(OAIHttpRequestWorker *worker, OAIShareList summary);
    void sharesRefreshSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use sharesCreateOrUpdateSignalError() instead")
    void sharesCreateOrUpdateSignalE(OAIShare summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sharesCreateOrUpdateSignalError(OAIShare summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharesDeleteSignalError() instead")
    void sharesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sharesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharesGetSignalError() instead")
    void sharesGetSignalE(OAIShare summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sharesGetSignalError(OAIShare summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharesListByDataBoxEdgeDeviceSignalError() instead")
    void sharesListByDataBoxEdgeDeviceSignalE(OAIShareList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sharesListByDataBoxEdgeDeviceSignalError(OAIShareList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharesRefreshSignalError() instead")
    void sharesRefreshSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sharesRefreshSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use sharesCreateOrUpdateSignalErrorFull() instead")
    void sharesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sharesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharesDeleteSignalErrorFull() instead")
    void sharesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sharesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharesGetSignalErrorFull() instead")
    void sharesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sharesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharesListByDataBoxEdgeDeviceSignalErrorFull() instead")
    void sharesListByDataBoxEdgeDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sharesListByDataBoxEdgeDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharesRefreshSignalErrorFull() instead")
    void sharesRefreshSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sharesRefreshSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
