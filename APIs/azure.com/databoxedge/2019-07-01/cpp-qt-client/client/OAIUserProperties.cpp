/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserProperties::OAIUserProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserProperties::OAIUserProperties() {
    this->initializeModel();
}

OAIUserProperties::~OAIUserProperties() {}

void OAIUserProperties::initializeModel() {

    m_encrypted_password_isSet = false;
    m_encrypted_password_isValid = false;

    m_share_access_rights_isSet = false;
    m_share_access_rights_isValid = false;
}

void OAIUserProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserProperties::fromJsonObject(QJsonObject json) {

    m_encrypted_password_isValid = ::OpenAPI::fromJsonValue(m_encrypted_password, json[QString("encryptedPassword")]);
    m_encrypted_password_isSet = !json[QString("encryptedPassword")].isNull() && m_encrypted_password_isValid;

    m_share_access_rights_isValid = ::OpenAPI::fromJsonValue(m_share_access_rights, json[QString("shareAccessRights")]);
    m_share_access_rights_isSet = !json[QString("shareAccessRights")].isNull() && m_share_access_rights_isValid;
}

QString OAIUserProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_encrypted_password.isSet()) {
        obj.insert(QString("encryptedPassword"), ::OpenAPI::toJsonValue(m_encrypted_password));
    }
    if (m_share_access_rights.size() > 0) {
        obj.insert(QString("shareAccessRights"), ::OpenAPI::toJsonValue(m_share_access_rights));
    }
    return obj;
}

OAIAsymmetricEncryptedSecret OAIUserProperties::getEncryptedPassword() const {
    return m_encrypted_password;
}
void OAIUserProperties::setEncryptedPassword(const OAIAsymmetricEncryptedSecret &encrypted_password) {
    m_encrypted_password = encrypted_password;
    m_encrypted_password_isSet = true;
}

bool OAIUserProperties::is_encrypted_password_Set() const{
    return m_encrypted_password_isSet;
}

bool OAIUserProperties::is_encrypted_password_Valid() const{
    return m_encrypted_password_isValid;
}

QList<OAIShareAccessRight> OAIUserProperties::getShareAccessRights() const {
    return m_share_access_rights;
}
void OAIUserProperties::setShareAccessRights(const QList<OAIShareAccessRight> &share_access_rights) {
    m_share_access_rights = share_access_rights;
    m_share_access_rights_isSet = true;
}

bool OAIUserProperties::is_share_access_rights_Set() const{
    return m_share_access_rights_isSet;
}

bool OAIUserProperties::is_share_access_rights_Valid() const{
    return m_share_access_rights_isValid;
}

bool OAIUserProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encrypted_password.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_access_rights.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
