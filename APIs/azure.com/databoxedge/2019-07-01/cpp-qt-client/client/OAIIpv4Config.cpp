/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIpv4Config.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIpv4Config::OAIIpv4Config(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIpv4Config::OAIIpv4Config() {
    this->initializeModel();
}

OAIIpv4Config::~OAIIpv4Config() {}

void OAIIpv4Config::initializeModel() {

    m_gateway_isSet = false;
    m_gateway_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_subnet_isSet = false;
    m_subnet_isValid = false;
}

void OAIIpv4Config::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIpv4Config::fromJsonObject(QJsonObject json) {

    m_gateway_isValid = ::OpenAPI::fromJsonValue(m_gateway, json[QString("gateway")]);
    m_gateway_isSet = !json[QString("gateway")].isNull() && m_gateway_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_subnet_isValid = ::OpenAPI::fromJsonValue(m_subnet, json[QString("subnet")]);
    m_subnet_isSet = !json[QString("subnet")].isNull() && m_subnet_isValid;
}

QString OAIIpv4Config::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIpv4Config::asJsonObject() const {
    QJsonObject obj;
    if (m_gateway_isSet) {
        obj.insert(QString("gateway"), ::OpenAPI::toJsonValue(m_gateway));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_subnet_isSet) {
        obj.insert(QString("subnet"), ::OpenAPI::toJsonValue(m_subnet));
    }
    return obj;
}

QString OAIIpv4Config::getGateway() const {
    return m_gateway;
}
void OAIIpv4Config::setGateway(const QString &gateway) {
    m_gateway = gateway;
    m_gateway_isSet = true;
}

bool OAIIpv4Config::is_gateway_Set() const{
    return m_gateway_isSet;
}

bool OAIIpv4Config::is_gateway_Valid() const{
    return m_gateway_isValid;
}

QString OAIIpv4Config::getIpAddress() const {
    return m_ip_address;
}
void OAIIpv4Config::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIIpv4Config::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIIpv4Config::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIIpv4Config::getSubnet() const {
    return m_subnet;
}
void OAIIpv4Config::setSubnet(const QString &subnet) {
    m_subnet = subnet;
    m_subnet_isSet = true;
}

bool OAIIpv4Config::is_subnet_Set() const{
    return m_subnet_isSet;
}

bool OAIIpv4Config::is_subnet_Valid() const{
    return m_subnet_isValid;
}

bool OAIIpv4Config::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gateway_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIpv4Config::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
