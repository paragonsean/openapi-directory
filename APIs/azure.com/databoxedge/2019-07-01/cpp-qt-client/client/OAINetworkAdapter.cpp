/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkAdapter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkAdapter::OAINetworkAdapter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkAdapter::OAINetworkAdapter() {
    this->initializeModel();
}

OAINetworkAdapter::~OAINetworkAdapter() {}

void OAINetworkAdapter::initializeModel() {

    m_adapter_id_isSet = false;
    m_adapter_id_isValid = false;

    m_adapter_position_isSet = false;
    m_adapter_position_isValid = false;

    m_dhcp_status_isSet = false;
    m_dhcp_status_isValid = false;

    m_dns_servers_isSet = false;
    m_dns_servers_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_ipv4_configuration_isSet = false;
    m_ipv4_configuration_isValid = false;

    m_ipv6_configuration_isSet = false;
    m_ipv6_configuration_isValid = false;

    m_ipv6_link_local_address_isSet = false;
    m_ipv6_link_local_address_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_link_speed_isSet = false;
    m_link_speed_isValid = false;

    m_mac_address_isSet = false;
    m_mac_address_isValid = false;

    m_network_adapter_name_isSet = false;
    m_network_adapter_name_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_rdma_status_isSet = false;
    m_rdma_status_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAINetworkAdapter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkAdapter::fromJsonObject(QJsonObject json) {

    m_adapter_id_isValid = ::OpenAPI::fromJsonValue(m_adapter_id, json[QString("adapterId")]);
    m_adapter_id_isSet = !json[QString("adapterId")].isNull() && m_adapter_id_isValid;

    m_adapter_position_isValid = ::OpenAPI::fromJsonValue(m_adapter_position, json[QString("adapterPosition")]);
    m_adapter_position_isSet = !json[QString("adapterPosition")].isNull() && m_adapter_position_isValid;

    m_dhcp_status_isValid = ::OpenAPI::fromJsonValue(m_dhcp_status, json[QString("dhcpStatus")]);
    m_dhcp_status_isSet = !json[QString("dhcpStatus")].isNull() && m_dhcp_status_isValid;

    m_dns_servers_isValid = ::OpenAPI::fromJsonValue(m_dns_servers, json[QString("dnsServers")]);
    m_dns_servers_isSet = !json[QString("dnsServers")].isNull() && m_dns_servers_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("index")]);
    m_index_isSet = !json[QString("index")].isNull() && m_index_isValid;

    m_ipv4_configuration_isValid = ::OpenAPI::fromJsonValue(m_ipv4_configuration, json[QString("ipv4Configuration")]);
    m_ipv4_configuration_isSet = !json[QString("ipv4Configuration")].isNull() && m_ipv4_configuration_isValid;

    m_ipv6_configuration_isValid = ::OpenAPI::fromJsonValue(m_ipv6_configuration, json[QString("ipv6Configuration")]);
    m_ipv6_configuration_isSet = !json[QString("ipv6Configuration")].isNull() && m_ipv6_configuration_isValid;

    m_ipv6_link_local_address_isValid = ::OpenAPI::fromJsonValue(m_ipv6_link_local_address, json[QString("ipv6LinkLocalAddress")]);
    m_ipv6_link_local_address_isSet = !json[QString("ipv6LinkLocalAddress")].isNull() && m_ipv6_link_local_address_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_link_speed_isValid = ::OpenAPI::fromJsonValue(m_link_speed, json[QString("linkSpeed")]);
    m_link_speed_isSet = !json[QString("linkSpeed")].isNull() && m_link_speed_isValid;

    m_mac_address_isValid = ::OpenAPI::fromJsonValue(m_mac_address, json[QString("macAddress")]);
    m_mac_address_isSet = !json[QString("macAddress")].isNull() && m_mac_address_isValid;

    m_network_adapter_name_isValid = ::OpenAPI::fromJsonValue(m_network_adapter_name, json[QString("networkAdapterName")]);
    m_network_adapter_name_isSet = !json[QString("networkAdapterName")].isNull() && m_network_adapter_name_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("nodeId")]);
    m_node_id_isSet = !json[QString("nodeId")].isNull() && m_node_id_isValid;

    m_rdma_status_isValid = ::OpenAPI::fromJsonValue(m_rdma_status, json[QString("rdmaStatus")]);
    m_rdma_status_isSet = !json[QString("rdmaStatus")].isNull() && m_rdma_status_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAINetworkAdapter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkAdapter::asJsonObject() const {
    QJsonObject obj;
    if (m_adapter_id_isSet) {
        obj.insert(QString("adapterId"), ::OpenAPI::toJsonValue(m_adapter_id));
    }
    if (m_adapter_position.isSet()) {
        obj.insert(QString("adapterPosition"), ::OpenAPI::toJsonValue(m_adapter_position));
    }
    if (m_dhcp_status_isSet) {
        obj.insert(QString("dhcpStatus"), ::OpenAPI::toJsonValue(m_dhcp_status));
    }
    if (m_dns_servers.size() > 0) {
        obj.insert(QString("dnsServers"), ::OpenAPI::toJsonValue(m_dns_servers));
    }
    if (m_index_isSet) {
        obj.insert(QString("index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_ipv4_configuration.isSet()) {
        obj.insert(QString("ipv4Configuration"), ::OpenAPI::toJsonValue(m_ipv4_configuration));
    }
    if (m_ipv6_configuration.isSet()) {
        obj.insert(QString("ipv6Configuration"), ::OpenAPI::toJsonValue(m_ipv6_configuration));
    }
    if (m_ipv6_link_local_address_isSet) {
        obj.insert(QString("ipv6LinkLocalAddress"), ::OpenAPI::toJsonValue(m_ipv6_link_local_address));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_link_speed_isSet) {
        obj.insert(QString("linkSpeed"), ::OpenAPI::toJsonValue(m_link_speed));
    }
    if (m_mac_address_isSet) {
        obj.insert(QString("macAddress"), ::OpenAPI::toJsonValue(m_mac_address));
    }
    if (m_network_adapter_name_isSet) {
        obj.insert(QString("networkAdapterName"), ::OpenAPI::toJsonValue(m_network_adapter_name));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("nodeId"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_rdma_status_isSet) {
        obj.insert(QString("rdmaStatus"), ::OpenAPI::toJsonValue(m_rdma_status));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAINetworkAdapter::getAdapterId() const {
    return m_adapter_id;
}
void OAINetworkAdapter::setAdapterId(const QString &adapter_id) {
    m_adapter_id = adapter_id;
    m_adapter_id_isSet = true;
}

bool OAINetworkAdapter::is_adapter_id_Set() const{
    return m_adapter_id_isSet;
}

bool OAINetworkAdapter::is_adapter_id_Valid() const{
    return m_adapter_id_isValid;
}

OAINetworkAdapterPosition OAINetworkAdapter::getAdapterPosition() const {
    return m_adapter_position;
}
void OAINetworkAdapter::setAdapterPosition(const OAINetworkAdapterPosition &adapter_position) {
    m_adapter_position = adapter_position;
    m_adapter_position_isSet = true;
}

bool OAINetworkAdapter::is_adapter_position_Set() const{
    return m_adapter_position_isSet;
}

bool OAINetworkAdapter::is_adapter_position_Valid() const{
    return m_adapter_position_isValid;
}

QString OAINetworkAdapter::getDhcpStatus() const {
    return m_dhcp_status;
}
void OAINetworkAdapter::setDhcpStatus(const QString &dhcp_status) {
    m_dhcp_status = dhcp_status;
    m_dhcp_status_isSet = true;
}

bool OAINetworkAdapter::is_dhcp_status_Set() const{
    return m_dhcp_status_isSet;
}

bool OAINetworkAdapter::is_dhcp_status_Valid() const{
    return m_dhcp_status_isValid;
}

QList<QString> OAINetworkAdapter::getDnsServers() const {
    return m_dns_servers;
}
void OAINetworkAdapter::setDnsServers(const QList<QString> &dns_servers) {
    m_dns_servers = dns_servers;
    m_dns_servers_isSet = true;
}

bool OAINetworkAdapter::is_dns_servers_Set() const{
    return m_dns_servers_isSet;
}

bool OAINetworkAdapter::is_dns_servers_Valid() const{
    return m_dns_servers_isValid;
}

qint32 OAINetworkAdapter::getIndex() const {
    return m_index;
}
void OAINetworkAdapter::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAINetworkAdapter::is_index_Set() const{
    return m_index_isSet;
}

bool OAINetworkAdapter::is_index_Valid() const{
    return m_index_isValid;
}

OAIIpv4Config OAINetworkAdapter::getIpv4Configuration() const {
    return m_ipv4_configuration;
}
void OAINetworkAdapter::setIpv4Configuration(const OAIIpv4Config &ipv4_configuration) {
    m_ipv4_configuration = ipv4_configuration;
    m_ipv4_configuration_isSet = true;
}

bool OAINetworkAdapter::is_ipv4_configuration_Set() const{
    return m_ipv4_configuration_isSet;
}

bool OAINetworkAdapter::is_ipv4_configuration_Valid() const{
    return m_ipv4_configuration_isValid;
}

OAIIpv6Config OAINetworkAdapter::getIpv6Configuration() const {
    return m_ipv6_configuration;
}
void OAINetworkAdapter::setIpv6Configuration(const OAIIpv6Config &ipv6_configuration) {
    m_ipv6_configuration = ipv6_configuration;
    m_ipv6_configuration_isSet = true;
}

bool OAINetworkAdapter::is_ipv6_configuration_Set() const{
    return m_ipv6_configuration_isSet;
}

bool OAINetworkAdapter::is_ipv6_configuration_Valid() const{
    return m_ipv6_configuration_isValid;
}

QString OAINetworkAdapter::getIpv6LinkLocalAddress() const {
    return m_ipv6_link_local_address;
}
void OAINetworkAdapter::setIpv6LinkLocalAddress(const QString &ipv6_link_local_address) {
    m_ipv6_link_local_address = ipv6_link_local_address;
    m_ipv6_link_local_address_isSet = true;
}

bool OAINetworkAdapter::is_ipv6_link_local_address_Set() const{
    return m_ipv6_link_local_address_isSet;
}

bool OAINetworkAdapter::is_ipv6_link_local_address_Valid() const{
    return m_ipv6_link_local_address_isValid;
}

QString OAINetworkAdapter::getLabel() const {
    return m_label;
}
void OAINetworkAdapter::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAINetworkAdapter::is_label_Set() const{
    return m_label_isSet;
}

bool OAINetworkAdapter::is_label_Valid() const{
    return m_label_isValid;
}

qint64 OAINetworkAdapter::getLinkSpeed() const {
    return m_link_speed;
}
void OAINetworkAdapter::setLinkSpeed(const qint64 &link_speed) {
    m_link_speed = link_speed;
    m_link_speed_isSet = true;
}

bool OAINetworkAdapter::is_link_speed_Set() const{
    return m_link_speed_isSet;
}

bool OAINetworkAdapter::is_link_speed_Valid() const{
    return m_link_speed_isValid;
}

QString OAINetworkAdapter::getMacAddress() const {
    return m_mac_address;
}
void OAINetworkAdapter::setMacAddress(const QString &mac_address) {
    m_mac_address = mac_address;
    m_mac_address_isSet = true;
}

bool OAINetworkAdapter::is_mac_address_Set() const{
    return m_mac_address_isSet;
}

bool OAINetworkAdapter::is_mac_address_Valid() const{
    return m_mac_address_isValid;
}

QString OAINetworkAdapter::getNetworkAdapterName() const {
    return m_network_adapter_name;
}
void OAINetworkAdapter::setNetworkAdapterName(const QString &network_adapter_name) {
    m_network_adapter_name = network_adapter_name;
    m_network_adapter_name_isSet = true;
}

bool OAINetworkAdapter::is_network_adapter_name_Set() const{
    return m_network_adapter_name_isSet;
}

bool OAINetworkAdapter::is_network_adapter_name_Valid() const{
    return m_network_adapter_name_isValid;
}

QString OAINetworkAdapter::getNodeId() const {
    return m_node_id;
}
void OAINetworkAdapter::setNodeId(const QString &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAINetworkAdapter::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAINetworkAdapter::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QString OAINetworkAdapter::getRdmaStatus() const {
    return m_rdma_status;
}
void OAINetworkAdapter::setRdmaStatus(const QString &rdma_status) {
    m_rdma_status = rdma_status;
    m_rdma_status_isSet = true;
}

bool OAINetworkAdapter::is_rdma_status_Set() const{
    return m_rdma_status_isSet;
}

bool OAINetworkAdapter::is_rdma_status_Valid() const{
    return m_rdma_status_isValid;
}

QString OAINetworkAdapter::getStatus() const {
    return m_status;
}
void OAINetworkAdapter::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINetworkAdapter::is_status_Set() const{
    return m_status_isSet;
}

bool OAINetworkAdapter::is_status_Valid() const{
    return m_status_isValid;
}

bool OAINetworkAdapter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adapter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adapter_position.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dhcp_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv4_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv6_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv6_link_local_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_adapter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rdma_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkAdapter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
