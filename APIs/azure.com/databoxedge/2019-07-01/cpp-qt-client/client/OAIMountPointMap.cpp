/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMountPointMap.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMountPointMap::OAIMountPointMap(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMountPointMap::OAIMountPointMap() {
    this->initializeModel();
}

OAIMountPointMap::~OAIMountPointMap() {}

void OAIMountPointMap::initializeModel() {

    m_mount_point_isSet = false;
    m_mount_point_isValid = false;

    m_role_id_isSet = false;
    m_role_id_isValid = false;

    m_role_type_isSet = false;
    m_role_type_isValid = false;

    m_share_id_isSet = false;
    m_share_id_isValid = false;
}

void OAIMountPointMap::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMountPointMap::fromJsonObject(QJsonObject json) {

    m_mount_point_isValid = ::OpenAPI::fromJsonValue(m_mount_point, json[QString("mountPoint")]);
    m_mount_point_isSet = !json[QString("mountPoint")].isNull() && m_mount_point_isValid;

    m_role_id_isValid = ::OpenAPI::fromJsonValue(m_role_id, json[QString("roleId")]);
    m_role_id_isSet = !json[QString("roleId")].isNull() && m_role_id_isValid;

    m_role_type_isValid = ::OpenAPI::fromJsonValue(m_role_type, json[QString("roleType")]);
    m_role_type_isSet = !json[QString("roleType")].isNull() && m_role_type_isValid;

    m_share_id_isValid = ::OpenAPI::fromJsonValue(m_share_id, json[QString("shareId")]);
    m_share_id_isSet = !json[QString("shareId")].isNull() && m_share_id_isValid;
}

QString OAIMountPointMap::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMountPointMap::asJsonObject() const {
    QJsonObject obj;
    if (m_mount_point_isSet) {
        obj.insert(QString("mountPoint"), ::OpenAPI::toJsonValue(m_mount_point));
    }
    if (m_role_id_isSet) {
        obj.insert(QString("roleId"), ::OpenAPI::toJsonValue(m_role_id));
    }
    if (m_role_type_isSet) {
        obj.insert(QString("roleType"), ::OpenAPI::toJsonValue(m_role_type));
    }
    if (m_share_id_isSet) {
        obj.insert(QString("shareId"), ::OpenAPI::toJsonValue(m_share_id));
    }
    return obj;
}

QString OAIMountPointMap::getMountPoint() const {
    return m_mount_point;
}
void OAIMountPointMap::setMountPoint(const QString &mount_point) {
    m_mount_point = mount_point;
    m_mount_point_isSet = true;
}

bool OAIMountPointMap::is_mount_point_Set() const{
    return m_mount_point_isSet;
}

bool OAIMountPointMap::is_mount_point_Valid() const{
    return m_mount_point_isValid;
}

QString OAIMountPointMap::getRoleId() const {
    return m_role_id;
}
void OAIMountPointMap::setRoleId(const QString &role_id) {
    m_role_id = role_id;
    m_role_id_isSet = true;
}

bool OAIMountPointMap::is_role_id_Set() const{
    return m_role_id_isSet;
}

bool OAIMountPointMap::is_role_id_Valid() const{
    return m_role_id_isValid;
}

QString OAIMountPointMap::getRoleType() const {
    return m_role_type;
}
void OAIMountPointMap::setRoleType(const QString &role_type) {
    m_role_type = role_type;
    m_role_type_isSet = true;
}

bool OAIMountPointMap::is_role_type_Set() const{
    return m_role_type_isSet;
}

bool OAIMountPointMap::is_role_type_Valid() const{
    return m_role_type_isValid;
}

QString OAIMountPointMap::getShareId() const {
    return m_share_id;
}
void OAIMountPointMap::setShareId(const QString &share_id) {
    m_share_id = share_id;
    m_share_id_isSet = true;
}

bool OAIMountPointMap::is_share_id_Set() const{
    return m_share_id_isSet;
}

bool OAIMountPointMap::is_share_id_Valid() const{
    return m_share_id_isValid;
}

bool OAIMountPointMap::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mount_point_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMountPointMap::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_share_id_isValid && true;
}

} // namespace OpenAPI
