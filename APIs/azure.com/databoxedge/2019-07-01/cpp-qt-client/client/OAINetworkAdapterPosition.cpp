/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkAdapterPosition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkAdapterPosition::OAINetworkAdapterPosition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkAdapterPosition::OAINetworkAdapterPosition() {
    this->initializeModel();
}

OAINetworkAdapterPosition::~OAINetworkAdapterPosition() {}

void OAINetworkAdapterPosition::initializeModel() {

    m_network_group_isSet = false;
    m_network_group_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;
}

void OAINetworkAdapterPosition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkAdapterPosition::fromJsonObject(QJsonObject json) {

    m_network_group_isValid = ::OpenAPI::fromJsonValue(m_network_group, json[QString("networkGroup")]);
    m_network_group_isSet = !json[QString("networkGroup")].isNull() && m_network_group_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;
}

QString OAINetworkAdapterPosition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkAdapterPosition::asJsonObject() const {
    QJsonObject obj;
    if (m_network_group_isSet) {
        obj.insert(QString("networkGroup"), ::OpenAPI::toJsonValue(m_network_group));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    return obj;
}

QString OAINetworkAdapterPosition::getNetworkGroup() const {
    return m_network_group;
}
void OAINetworkAdapterPosition::setNetworkGroup(const QString &network_group) {
    m_network_group = network_group;
    m_network_group_isSet = true;
}

bool OAINetworkAdapterPosition::is_network_group_Set() const{
    return m_network_group_isSet;
}

bool OAINetworkAdapterPosition::is_network_group_Valid() const{
    return m_network_group_isValid;
}

qint32 OAINetworkAdapterPosition::getPort() const {
    return m_port;
}
void OAINetworkAdapterPosition::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAINetworkAdapterPosition::is_port_Set() const{
    return m_port_isSet;
}

bool OAINetworkAdapterPosition::is_port_Valid() const{
    return m_port_isValid;
}

bool OAINetworkAdapterPosition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_network_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkAdapterPosition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
