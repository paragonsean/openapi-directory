/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINetworkAdapter.h
 *
 * Represents the networkAdapter on a device.
 */

#ifndef OAINetworkAdapter_H
#define OAINetworkAdapter_H

#include <QJsonObject>

#include "OAIIpv4Config.h"
#include "OAIIpv6Config.h"
#include "OAINetworkAdapterPosition.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINetworkAdapterPosition;
class OAIIpv4Config;
class OAIIpv6Config;

class OAINetworkAdapter : public OAIObject {
public:
    OAINetworkAdapter();
    OAINetworkAdapter(QString json);
    ~OAINetworkAdapter() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAdapterId() const;
    void setAdapterId(const QString &adapter_id);
    bool is_adapter_id_Set() const;
    bool is_adapter_id_Valid() const;

    OAINetworkAdapterPosition getAdapterPosition() const;
    void setAdapterPosition(const OAINetworkAdapterPosition &adapter_position);
    bool is_adapter_position_Set() const;
    bool is_adapter_position_Valid() const;

    QString getDhcpStatus() const;
    void setDhcpStatus(const QString &dhcp_status);
    bool is_dhcp_status_Set() const;
    bool is_dhcp_status_Valid() const;

    QList<QString> getDnsServers() const;
    void setDnsServers(const QList<QString> &dns_servers);
    bool is_dns_servers_Set() const;
    bool is_dns_servers_Valid() const;

    qint32 getIndex() const;
    void setIndex(const qint32 &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    OAIIpv4Config getIpv4Configuration() const;
    void setIpv4Configuration(const OAIIpv4Config &ipv4_configuration);
    bool is_ipv4_configuration_Set() const;
    bool is_ipv4_configuration_Valid() const;

    OAIIpv6Config getIpv6Configuration() const;
    void setIpv6Configuration(const OAIIpv6Config &ipv6_configuration);
    bool is_ipv6_configuration_Set() const;
    bool is_ipv6_configuration_Valid() const;

    QString getIpv6LinkLocalAddress() const;
    void setIpv6LinkLocalAddress(const QString &ipv6_link_local_address);
    bool is_ipv6_link_local_address_Set() const;
    bool is_ipv6_link_local_address_Valid() const;

    QString getLabel() const;
    void setLabel(const QString &label);
    bool is_label_Set() const;
    bool is_label_Valid() const;

    qint64 getLinkSpeed() const;
    void setLinkSpeed(const qint64 &link_speed);
    bool is_link_speed_Set() const;
    bool is_link_speed_Valid() const;

    QString getMacAddress() const;
    void setMacAddress(const QString &mac_address);
    bool is_mac_address_Set() const;
    bool is_mac_address_Valid() const;

    QString getNetworkAdapterName() const;
    void setNetworkAdapterName(const QString &network_adapter_name);
    bool is_network_adapter_name_Set() const;
    bool is_network_adapter_name_Valid() const;

    QString getNodeId() const;
    void setNodeId(const QString &node_id);
    bool is_node_id_Set() const;
    bool is_node_id_Valid() const;

    QString getRdmaStatus() const;
    void setRdmaStatus(const QString &rdma_status);
    bool is_rdma_status_Set() const;
    bool is_rdma_status_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_adapter_id;
    bool m_adapter_id_isSet;
    bool m_adapter_id_isValid;

    OAINetworkAdapterPosition m_adapter_position;
    bool m_adapter_position_isSet;
    bool m_adapter_position_isValid;

    QString m_dhcp_status;
    bool m_dhcp_status_isSet;
    bool m_dhcp_status_isValid;

    QList<QString> m_dns_servers;
    bool m_dns_servers_isSet;
    bool m_dns_servers_isValid;

    qint32 m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    OAIIpv4Config m_ipv4_configuration;
    bool m_ipv4_configuration_isSet;
    bool m_ipv4_configuration_isValid;

    OAIIpv6Config m_ipv6_configuration;
    bool m_ipv6_configuration_isSet;
    bool m_ipv6_configuration_isValid;

    QString m_ipv6_link_local_address;
    bool m_ipv6_link_local_address_isSet;
    bool m_ipv6_link_local_address_isValid;

    QString m_label;
    bool m_label_isSet;
    bool m_label_isValid;

    qint64 m_link_speed;
    bool m_link_speed_isSet;
    bool m_link_speed_isValid;

    QString m_mac_address;
    bool m_mac_address_isSet;
    bool m_mac_address_isValid;

    QString m_network_adapter_name;
    bool m_network_adapter_name_isSet;
    bool m_network_adapter_name_isValid;

    QString m_node_id;
    bool m_node_id_isSet;
    bool m_node_id_isValid;

    QString m_rdma_status;
    bool m_rdma_status_isSet;
    bool m_rdma_status_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINetworkAdapter)

#endif // OAINetworkAdapter_H
