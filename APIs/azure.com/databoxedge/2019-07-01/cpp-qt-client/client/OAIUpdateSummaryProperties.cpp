/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSummaryProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSummaryProperties::OAIUpdateSummaryProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSummaryProperties::OAIUpdateSummaryProperties() {
    this->initializeModel();
}

OAIUpdateSummaryProperties::~OAIUpdateSummaryProperties() {}

void OAIUpdateSummaryProperties::initializeModel() {

    m_device_last_scanned_date_time_isSet = false;
    m_device_last_scanned_date_time_isValid = false;

    m_device_version_number_isSet = false;
    m_device_version_number_isValid = false;

    m_friendly_device_version_name_isSet = false;
    m_friendly_device_version_name_isValid = false;

    m_in_progress_download_job_id_isSet = false;
    m_in_progress_download_job_id_isValid = false;

    m_in_progress_download_job_started_date_time_isSet = false;
    m_in_progress_download_job_started_date_time_isValid = false;

    m_in_progress_install_job_id_isSet = false;
    m_in_progress_install_job_id_isValid = false;

    m_in_progress_install_job_started_date_time_isSet = false;
    m_in_progress_install_job_started_date_time_isValid = false;

    m_last_completed_download_job_date_time_isSet = false;
    m_last_completed_download_job_date_time_isValid = false;

    m_last_completed_install_job_date_time_isSet = false;
    m_last_completed_install_job_date_time_isValid = false;

    m_last_completed_scan_job_date_time_isSet = false;
    m_last_completed_scan_job_date_time_isValid = false;

    m_ongoing_update_operation_isSet = false;
    m_ongoing_update_operation_isValid = false;

    m_reboot_behavior_isSet = false;
    m_reboot_behavior_isValid = false;

    m_total_number_of_updates_available_isSet = false;
    m_total_number_of_updates_available_isValid = false;

    m_total_number_of_updates_pending_download_isSet = false;
    m_total_number_of_updates_pending_download_isValid = false;

    m_total_number_of_updates_pending_install_isSet = false;
    m_total_number_of_updates_pending_install_isValid = false;

    m_total_update_size_in_bytes_isSet = false;
    m_total_update_size_in_bytes_isValid = false;

    m_update_titles_isSet = false;
    m_update_titles_isValid = false;
}

void OAIUpdateSummaryProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSummaryProperties::fromJsonObject(QJsonObject json) {

    m_device_last_scanned_date_time_isValid = ::OpenAPI::fromJsonValue(m_device_last_scanned_date_time, json[QString("deviceLastScannedDateTime")]);
    m_device_last_scanned_date_time_isSet = !json[QString("deviceLastScannedDateTime")].isNull() && m_device_last_scanned_date_time_isValid;

    m_device_version_number_isValid = ::OpenAPI::fromJsonValue(m_device_version_number, json[QString("deviceVersionNumber")]);
    m_device_version_number_isSet = !json[QString("deviceVersionNumber")].isNull() && m_device_version_number_isValid;

    m_friendly_device_version_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_device_version_name, json[QString("friendlyDeviceVersionName")]);
    m_friendly_device_version_name_isSet = !json[QString("friendlyDeviceVersionName")].isNull() && m_friendly_device_version_name_isValid;

    m_in_progress_download_job_id_isValid = ::OpenAPI::fromJsonValue(m_in_progress_download_job_id, json[QString("inProgressDownloadJobId")]);
    m_in_progress_download_job_id_isSet = !json[QString("inProgressDownloadJobId")].isNull() && m_in_progress_download_job_id_isValid;

    m_in_progress_download_job_started_date_time_isValid = ::OpenAPI::fromJsonValue(m_in_progress_download_job_started_date_time, json[QString("inProgressDownloadJobStartedDateTime")]);
    m_in_progress_download_job_started_date_time_isSet = !json[QString("inProgressDownloadJobStartedDateTime")].isNull() && m_in_progress_download_job_started_date_time_isValid;

    m_in_progress_install_job_id_isValid = ::OpenAPI::fromJsonValue(m_in_progress_install_job_id, json[QString("inProgressInstallJobId")]);
    m_in_progress_install_job_id_isSet = !json[QString("inProgressInstallJobId")].isNull() && m_in_progress_install_job_id_isValid;

    m_in_progress_install_job_started_date_time_isValid = ::OpenAPI::fromJsonValue(m_in_progress_install_job_started_date_time, json[QString("inProgressInstallJobStartedDateTime")]);
    m_in_progress_install_job_started_date_time_isSet = !json[QString("inProgressInstallJobStartedDateTime")].isNull() && m_in_progress_install_job_started_date_time_isValid;

    m_last_completed_download_job_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_completed_download_job_date_time, json[QString("lastCompletedDownloadJobDateTime")]);
    m_last_completed_download_job_date_time_isSet = !json[QString("lastCompletedDownloadJobDateTime")].isNull() && m_last_completed_download_job_date_time_isValid;

    m_last_completed_install_job_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_completed_install_job_date_time, json[QString("lastCompletedInstallJobDateTime")]);
    m_last_completed_install_job_date_time_isSet = !json[QString("lastCompletedInstallJobDateTime")].isNull() && m_last_completed_install_job_date_time_isValid;

    m_last_completed_scan_job_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_completed_scan_job_date_time, json[QString("lastCompletedScanJobDateTime")]);
    m_last_completed_scan_job_date_time_isSet = !json[QString("lastCompletedScanJobDateTime")].isNull() && m_last_completed_scan_job_date_time_isValid;

    m_ongoing_update_operation_isValid = ::OpenAPI::fromJsonValue(m_ongoing_update_operation, json[QString("ongoingUpdateOperation")]);
    m_ongoing_update_operation_isSet = !json[QString("ongoingUpdateOperation")].isNull() && m_ongoing_update_operation_isValid;

    m_reboot_behavior_isValid = ::OpenAPI::fromJsonValue(m_reboot_behavior, json[QString("rebootBehavior")]);
    m_reboot_behavior_isSet = !json[QString("rebootBehavior")].isNull() && m_reboot_behavior_isValid;

    m_total_number_of_updates_available_isValid = ::OpenAPI::fromJsonValue(m_total_number_of_updates_available, json[QString("totalNumberOfUpdatesAvailable")]);
    m_total_number_of_updates_available_isSet = !json[QString("totalNumberOfUpdatesAvailable")].isNull() && m_total_number_of_updates_available_isValid;

    m_total_number_of_updates_pending_download_isValid = ::OpenAPI::fromJsonValue(m_total_number_of_updates_pending_download, json[QString("totalNumberOfUpdatesPendingDownload")]);
    m_total_number_of_updates_pending_download_isSet = !json[QString("totalNumberOfUpdatesPendingDownload")].isNull() && m_total_number_of_updates_pending_download_isValid;

    m_total_number_of_updates_pending_install_isValid = ::OpenAPI::fromJsonValue(m_total_number_of_updates_pending_install, json[QString("totalNumberOfUpdatesPendingInstall")]);
    m_total_number_of_updates_pending_install_isSet = !json[QString("totalNumberOfUpdatesPendingInstall")].isNull() && m_total_number_of_updates_pending_install_isValid;

    m_total_update_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_update_size_in_bytes, json[QString("totalUpdateSizeInBytes")]);
    m_total_update_size_in_bytes_isSet = !json[QString("totalUpdateSizeInBytes")].isNull() && m_total_update_size_in_bytes_isValid;

    m_update_titles_isValid = ::OpenAPI::fromJsonValue(m_update_titles, json[QString("updateTitles")]);
    m_update_titles_isSet = !json[QString("updateTitles")].isNull() && m_update_titles_isValid;
}

QString OAIUpdateSummaryProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSummaryProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_device_last_scanned_date_time_isSet) {
        obj.insert(QString("deviceLastScannedDateTime"), ::OpenAPI::toJsonValue(m_device_last_scanned_date_time));
    }
    if (m_device_version_number_isSet) {
        obj.insert(QString("deviceVersionNumber"), ::OpenAPI::toJsonValue(m_device_version_number));
    }
    if (m_friendly_device_version_name_isSet) {
        obj.insert(QString("friendlyDeviceVersionName"), ::OpenAPI::toJsonValue(m_friendly_device_version_name));
    }
    if (m_in_progress_download_job_id_isSet) {
        obj.insert(QString("inProgressDownloadJobId"), ::OpenAPI::toJsonValue(m_in_progress_download_job_id));
    }
    if (m_in_progress_download_job_started_date_time_isSet) {
        obj.insert(QString("inProgressDownloadJobStartedDateTime"), ::OpenAPI::toJsonValue(m_in_progress_download_job_started_date_time));
    }
    if (m_in_progress_install_job_id_isSet) {
        obj.insert(QString("inProgressInstallJobId"), ::OpenAPI::toJsonValue(m_in_progress_install_job_id));
    }
    if (m_in_progress_install_job_started_date_time_isSet) {
        obj.insert(QString("inProgressInstallJobStartedDateTime"), ::OpenAPI::toJsonValue(m_in_progress_install_job_started_date_time));
    }
    if (m_last_completed_download_job_date_time_isSet) {
        obj.insert(QString("lastCompletedDownloadJobDateTime"), ::OpenAPI::toJsonValue(m_last_completed_download_job_date_time));
    }
    if (m_last_completed_install_job_date_time_isSet) {
        obj.insert(QString("lastCompletedInstallJobDateTime"), ::OpenAPI::toJsonValue(m_last_completed_install_job_date_time));
    }
    if (m_last_completed_scan_job_date_time_isSet) {
        obj.insert(QString("lastCompletedScanJobDateTime"), ::OpenAPI::toJsonValue(m_last_completed_scan_job_date_time));
    }
    if (m_ongoing_update_operation_isSet) {
        obj.insert(QString("ongoingUpdateOperation"), ::OpenAPI::toJsonValue(m_ongoing_update_operation));
    }
    if (m_reboot_behavior_isSet) {
        obj.insert(QString("rebootBehavior"), ::OpenAPI::toJsonValue(m_reboot_behavior));
    }
    if (m_total_number_of_updates_available_isSet) {
        obj.insert(QString("totalNumberOfUpdatesAvailable"), ::OpenAPI::toJsonValue(m_total_number_of_updates_available));
    }
    if (m_total_number_of_updates_pending_download_isSet) {
        obj.insert(QString("totalNumberOfUpdatesPendingDownload"), ::OpenAPI::toJsonValue(m_total_number_of_updates_pending_download));
    }
    if (m_total_number_of_updates_pending_install_isSet) {
        obj.insert(QString("totalNumberOfUpdatesPendingInstall"), ::OpenAPI::toJsonValue(m_total_number_of_updates_pending_install));
    }
    if (m_total_update_size_in_bytes_isSet) {
        obj.insert(QString("totalUpdateSizeInBytes"), ::OpenAPI::toJsonValue(m_total_update_size_in_bytes));
    }
    if (m_update_titles.size() > 0) {
        obj.insert(QString("updateTitles"), ::OpenAPI::toJsonValue(m_update_titles));
    }
    return obj;
}

QDateTime OAIUpdateSummaryProperties::getDeviceLastScannedDateTime() const {
    return m_device_last_scanned_date_time;
}
void OAIUpdateSummaryProperties::setDeviceLastScannedDateTime(const QDateTime &device_last_scanned_date_time) {
    m_device_last_scanned_date_time = device_last_scanned_date_time;
    m_device_last_scanned_date_time_isSet = true;
}

bool OAIUpdateSummaryProperties::is_device_last_scanned_date_time_Set() const{
    return m_device_last_scanned_date_time_isSet;
}

bool OAIUpdateSummaryProperties::is_device_last_scanned_date_time_Valid() const{
    return m_device_last_scanned_date_time_isValid;
}

QString OAIUpdateSummaryProperties::getDeviceVersionNumber() const {
    return m_device_version_number;
}
void OAIUpdateSummaryProperties::setDeviceVersionNumber(const QString &device_version_number) {
    m_device_version_number = device_version_number;
    m_device_version_number_isSet = true;
}

bool OAIUpdateSummaryProperties::is_device_version_number_Set() const{
    return m_device_version_number_isSet;
}

bool OAIUpdateSummaryProperties::is_device_version_number_Valid() const{
    return m_device_version_number_isValid;
}

QString OAIUpdateSummaryProperties::getFriendlyDeviceVersionName() const {
    return m_friendly_device_version_name;
}
void OAIUpdateSummaryProperties::setFriendlyDeviceVersionName(const QString &friendly_device_version_name) {
    m_friendly_device_version_name = friendly_device_version_name;
    m_friendly_device_version_name_isSet = true;
}

bool OAIUpdateSummaryProperties::is_friendly_device_version_name_Set() const{
    return m_friendly_device_version_name_isSet;
}

bool OAIUpdateSummaryProperties::is_friendly_device_version_name_Valid() const{
    return m_friendly_device_version_name_isValid;
}

QString OAIUpdateSummaryProperties::getInProgressDownloadJobId() const {
    return m_in_progress_download_job_id;
}
void OAIUpdateSummaryProperties::setInProgressDownloadJobId(const QString &in_progress_download_job_id) {
    m_in_progress_download_job_id = in_progress_download_job_id;
    m_in_progress_download_job_id_isSet = true;
}

bool OAIUpdateSummaryProperties::is_in_progress_download_job_id_Set() const{
    return m_in_progress_download_job_id_isSet;
}

bool OAIUpdateSummaryProperties::is_in_progress_download_job_id_Valid() const{
    return m_in_progress_download_job_id_isValid;
}

QDateTime OAIUpdateSummaryProperties::getInProgressDownloadJobStartedDateTime() const {
    return m_in_progress_download_job_started_date_time;
}
void OAIUpdateSummaryProperties::setInProgressDownloadJobStartedDateTime(const QDateTime &in_progress_download_job_started_date_time) {
    m_in_progress_download_job_started_date_time = in_progress_download_job_started_date_time;
    m_in_progress_download_job_started_date_time_isSet = true;
}

bool OAIUpdateSummaryProperties::is_in_progress_download_job_started_date_time_Set() const{
    return m_in_progress_download_job_started_date_time_isSet;
}

bool OAIUpdateSummaryProperties::is_in_progress_download_job_started_date_time_Valid() const{
    return m_in_progress_download_job_started_date_time_isValid;
}

QString OAIUpdateSummaryProperties::getInProgressInstallJobId() const {
    return m_in_progress_install_job_id;
}
void OAIUpdateSummaryProperties::setInProgressInstallJobId(const QString &in_progress_install_job_id) {
    m_in_progress_install_job_id = in_progress_install_job_id;
    m_in_progress_install_job_id_isSet = true;
}

bool OAIUpdateSummaryProperties::is_in_progress_install_job_id_Set() const{
    return m_in_progress_install_job_id_isSet;
}

bool OAIUpdateSummaryProperties::is_in_progress_install_job_id_Valid() const{
    return m_in_progress_install_job_id_isValid;
}

QDateTime OAIUpdateSummaryProperties::getInProgressInstallJobStartedDateTime() const {
    return m_in_progress_install_job_started_date_time;
}
void OAIUpdateSummaryProperties::setInProgressInstallJobStartedDateTime(const QDateTime &in_progress_install_job_started_date_time) {
    m_in_progress_install_job_started_date_time = in_progress_install_job_started_date_time;
    m_in_progress_install_job_started_date_time_isSet = true;
}

bool OAIUpdateSummaryProperties::is_in_progress_install_job_started_date_time_Set() const{
    return m_in_progress_install_job_started_date_time_isSet;
}

bool OAIUpdateSummaryProperties::is_in_progress_install_job_started_date_time_Valid() const{
    return m_in_progress_install_job_started_date_time_isValid;
}

QDateTime OAIUpdateSummaryProperties::getLastCompletedDownloadJobDateTime() const {
    return m_last_completed_download_job_date_time;
}
void OAIUpdateSummaryProperties::setLastCompletedDownloadJobDateTime(const QDateTime &last_completed_download_job_date_time) {
    m_last_completed_download_job_date_time = last_completed_download_job_date_time;
    m_last_completed_download_job_date_time_isSet = true;
}

bool OAIUpdateSummaryProperties::is_last_completed_download_job_date_time_Set() const{
    return m_last_completed_download_job_date_time_isSet;
}

bool OAIUpdateSummaryProperties::is_last_completed_download_job_date_time_Valid() const{
    return m_last_completed_download_job_date_time_isValid;
}

QDateTime OAIUpdateSummaryProperties::getLastCompletedInstallJobDateTime() const {
    return m_last_completed_install_job_date_time;
}
void OAIUpdateSummaryProperties::setLastCompletedInstallJobDateTime(const QDateTime &last_completed_install_job_date_time) {
    m_last_completed_install_job_date_time = last_completed_install_job_date_time;
    m_last_completed_install_job_date_time_isSet = true;
}

bool OAIUpdateSummaryProperties::is_last_completed_install_job_date_time_Set() const{
    return m_last_completed_install_job_date_time_isSet;
}

bool OAIUpdateSummaryProperties::is_last_completed_install_job_date_time_Valid() const{
    return m_last_completed_install_job_date_time_isValid;
}

QDateTime OAIUpdateSummaryProperties::getLastCompletedScanJobDateTime() const {
    return m_last_completed_scan_job_date_time;
}
void OAIUpdateSummaryProperties::setLastCompletedScanJobDateTime(const QDateTime &last_completed_scan_job_date_time) {
    m_last_completed_scan_job_date_time = last_completed_scan_job_date_time;
    m_last_completed_scan_job_date_time_isSet = true;
}

bool OAIUpdateSummaryProperties::is_last_completed_scan_job_date_time_Set() const{
    return m_last_completed_scan_job_date_time_isSet;
}

bool OAIUpdateSummaryProperties::is_last_completed_scan_job_date_time_Valid() const{
    return m_last_completed_scan_job_date_time_isValid;
}

QString OAIUpdateSummaryProperties::getOngoingUpdateOperation() const {
    return m_ongoing_update_operation;
}
void OAIUpdateSummaryProperties::setOngoingUpdateOperation(const QString &ongoing_update_operation) {
    m_ongoing_update_operation = ongoing_update_operation;
    m_ongoing_update_operation_isSet = true;
}

bool OAIUpdateSummaryProperties::is_ongoing_update_operation_Set() const{
    return m_ongoing_update_operation_isSet;
}

bool OAIUpdateSummaryProperties::is_ongoing_update_operation_Valid() const{
    return m_ongoing_update_operation_isValid;
}

QString OAIUpdateSummaryProperties::getRebootBehavior() const {
    return m_reboot_behavior;
}
void OAIUpdateSummaryProperties::setRebootBehavior(const QString &reboot_behavior) {
    m_reboot_behavior = reboot_behavior;
    m_reboot_behavior_isSet = true;
}

bool OAIUpdateSummaryProperties::is_reboot_behavior_Set() const{
    return m_reboot_behavior_isSet;
}

bool OAIUpdateSummaryProperties::is_reboot_behavior_Valid() const{
    return m_reboot_behavior_isValid;
}

qint32 OAIUpdateSummaryProperties::getTotalNumberOfUpdatesAvailable() const {
    return m_total_number_of_updates_available;
}
void OAIUpdateSummaryProperties::setTotalNumberOfUpdatesAvailable(const qint32 &total_number_of_updates_available) {
    m_total_number_of_updates_available = total_number_of_updates_available;
    m_total_number_of_updates_available_isSet = true;
}

bool OAIUpdateSummaryProperties::is_total_number_of_updates_available_Set() const{
    return m_total_number_of_updates_available_isSet;
}

bool OAIUpdateSummaryProperties::is_total_number_of_updates_available_Valid() const{
    return m_total_number_of_updates_available_isValid;
}

qint32 OAIUpdateSummaryProperties::getTotalNumberOfUpdatesPendingDownload() const {
    return m_total_number_of_updates_pending_download;
}
void OAIUpdateSummaryProperties::setTotalNumberOfUpdatesPendingDownload(const qint32 &total_number_of_updates_pending_download) {
    m_total_number_of_updates_pending_download = total_number_of_updates_pending_download;
    m_total_number_of_updates_pending_download_isSet = true;
}

bool OAIUpdateSummaryProperties::is_total_number_of_updates_pending_download_Set() const{
    return m_total_number_of_updates_pending_download_isSet;
}

bool OAIUpdateSummaryProperties::is_total_number_of_updates_pending_download_Valid() const{
    return m_total_number_of_updates_pending_download_isValid;
}

qint32 OAIUpdateSummaryProperties::getTotalNumberOfUpdatesPendingInstall() const {
    return m_total_number_of_updates_pending_install;
}
void OAIUpdateSummaryProperties::setTotalNumberOfUpdatesPendingInstall(const qint32 &total_number_of_updates_pending_install) {
    m_total_number_of_updates_pending_install = total_number_of_updates_pending_install;
    m_total_number_of_updates_pending_install_isSet = true;
}

bool OAIUpdateSummaryProperties::is_total_number_of_updates_pending_install_Set() const{
    return m_total_number_of_updates_pending_install_isSet;
}

bool OAIUpdateSummaryProperties::is_total_number_of_updates_pending_install_Valid() const{
    return m_total_number_of_updates_pending_install_isValid;
}

double OAIUpdateSummaryProperties::getTotalUpdateSizeInBytes() const {
    return m_total_update_size_in_bytes;
}
void OAIUpdateSummaryProperties::setTotalUpdateSizeInBytes(const double &total_update_size_in_bytes) {
    m_total_update_size_in_bytes = total_update_size_in_bytes;
    m_total_update_size_in_bytes_isSet = true;
}

bool OAIUpdateSummaryProperties::is_total_update_size_in_bytes_Set() const{
    return m_total_update_size_in_bytes_isSet;
}

bool OAIUpdateSummaryProperties::is_total_update_size_in_bytes_Valid() const{
    return m_total_update_size_in_bytes_isValid;
}

QList<QString> OAIUpdateSummaryProperties::getUpdateTitles() const {
    return m_update_titles;
}
void OAIUpdateSummaryProperties::setUpdateTitles(const QList<QString> &update_titles) {
    m_update_titles = update_titles;
    m_update_titles_isSet = true;
}

bool OAIUpdateSummaryProperties::is_update_titles_Set() const{
    return m_update_titles_isSet;
}

bool OAIUpdateSummaryProperties::is_update_titles_Valid() const{
    return m_update_titles_isValid;
}

bool OAIUpdateSummaryProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_last_scanned_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_device_version_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_progress_download_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_progress_download_job_started_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_progress_install_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_progress_install_job_started_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_completed_download_job_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_completed_install_job_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_completed_scan_job_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ongoing_update_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reboot_behavior_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_number_of_updates_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_number_of_updates_pending_download_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_number_of_updates_pending_install_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_update_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_titles.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSummaryProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
