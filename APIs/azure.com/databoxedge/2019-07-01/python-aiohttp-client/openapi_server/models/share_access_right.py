# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShareAccessRight(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_type: str=None, share_id: str=None):
        """ShareAccessRight - a model defined in OpenAPI

        :param access_type: The access_type of this ShareAccessRight.
        :param share_id: The share_id of this ShareAccessRight.
        """
        self.openapi_types = {
            'access_type': str,
            'share_id': str
        }

        self.attribute_map = {
            'access_type': 'accessType',
            'share_id': 'shareId'
        }

        self._access_type = access_type
        self._share_id = share_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShareAccessRight':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShareAccessRight of this ShareAccessRight.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_type(self):
        """Gets the access_type of this ShareAccessRight.

        Type of access to be allowed on the share for this user.

        :return: The access_type of this ShareAccessRight.
        :rtype: str
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this ShareAccessRight.

        Type of access to be allowed on the share for this user.

        :param access_type: The access_type of this ShareAccessRight.
        :type access_type: str
        """
        allowed_values = ["Change", "Read", "Custom"]  # noqa: E501
        if access_type not in allowed_values:
            raise ValueError(
                "Invalid value for `access_type` ({0}), must be one of {1}"
                .format(access_type, allowed_values)
            )

        self._access_type = access_type

    @property
    def share_id(self):
        """Gets the share_id of this ShareAccessRight.

        The share ID.

        :return: The share_id of this ShareAccessRight.
        :rtype: str
        """
        return self._share_id

    @share_id.setter
    def share_id(self, share_id):
        """Sets the share_id of this ShareAccessRight.

        The share ID.

        :param share_id: The share_id of this ShareAccessRight.
        :type share_id: str
        """
        if share_id is None:
            raise ValueError("Invalid value for `share_id`, must not be `None`")

        self._share_id = share_id
