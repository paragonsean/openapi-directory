# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.periodic_timer_source_info import PeriodicTimerSourceInfo
from openapi_server.models.role_sink_info import RoleSinkInfo
from openapi_server import util


class PeriodicTimerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_context_tag: str=None, sink_info: RoleSinkInfo=None, source_info: PeriodicTimerSourceInfo=None):
        """PeriodicTimerProperties - a model defined in OpenAPI

        :param custom_context_tag: The custom_context_tag of this PeriodicTimerProperties.
        :param sink_info: The sink_info of this PeriodicTimerProperties.
        :param source_info: The source_info of this PeriodicTimerProperties.
        """
        self.openapi_types = {
            'custom_context_tag': str,
            'sink_info': RoleSinkInfo,
            'source_info': PeriodicTimerSourceInfo
        }

        self.attribute_map = {
            'custom_context_tag': 'customContextTag',
            'sink_info': 'sinkInfo',
            'source_info': 'sourceInfo'
        }

        self._custom_context_tag = custom_context_tag
        self._sink_info = sink_info
        self._source_info = source_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PeriodicTimerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PeriodicTimerProperties of this PeriodicTimerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_context_tag(self):
        """Gets the custom_context_tag of this PeriodicTimerProperties.

        A custom context tag typically used to correlate the trigger against its usage. For example, if a periodic timer trigger is intended for certain specific IoT modules in the device, the tag can be the name or the image URL of the module.

        :return: The custom_context_tag of this PeriodicTimerProperties.
        :rtype: str
        """
        return self._custom_context_tag

    @custom_context_tag.setter
    def custom_context_tag(self, custom_context_tag):
        """Sets the custom_context_tag of this PeriodicTimerProperties.

        A custom context tag typically used to correlate the trigger against its usage. For example, if a periodic timer trigger is intended for certain specific IoT modules in the device, the tag can be the name or the image URL of the module.

        :param custom_context_tag: The custom_context_tag of this PeriodicTimerProperties.
        :type custom_context_tag: str
        """

        self._custom_context_tag = custom_context_tag

    @property
    def sink_info(self):
        """Gets the sink_info of this PeriodicTimerProperties.


        :return: The sink_info of this PeriodicTimerProperties.
        :rtype: RoleSinkInfo
        """
        return self._sink_info

    @sink_info.setter
    def sink_info(self, sink_info):
        """Sets the sink_info of this PeriodicTimerProperties.


        :param sink_info: The sink_info of this PeriodicTimerProperties.
        :type sink_info: RoleSinkInfo
        """
        if sink_info is None:
            raise ValueError("Invalid value for `sink_info`, must not be `None`")

        self._sink_info = sink_info

    @property
    def source_info(self):
        """Gets the source_info of this PeriodicTimerProperties.


        :return: The source_info of this PeriodicTimerProperties.
        :rtype: PeriodicTimerSourceInfo
        """
        return self._source_info

    @source_info.setter
    def source_info(self, source_info):
        """Sets the source_info of this PeriodicTimerProperties.


        :param source_info: The source_info of this PeriodicTimerProperties.
        :type source_info: PeriodicTimerSourceInfo
        """
        if source_info is None:
            raise ValueError("Invalid value for `source_info`, must not be `None`")

        self._source_info = source_info
