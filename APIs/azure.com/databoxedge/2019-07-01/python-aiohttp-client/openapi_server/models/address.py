# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_line1: str=None, address_line2: str=None, address_line3: str=None, city: str=None, country: str=None, postal_code: str=None, state: str=None):
        """Address - a model defined in OpenAPI

        :param address_line1: The address_line1 of this Address.
        :param address_line2: The address_line2 of this Address.
        :param address_line3: The address_line3 of this Address.
        :param city: The city of this Address.
        :param country: The country of this Address.
        :param postal_code: The postal_code of this Address.
        :param state: The state of this Address.
        """
        self.openapi_types = {
            'address_line1': str,
            'address_line2': str,
            'address_line3': str,
            'city': str,
            'country': str,
            'postal_code': str,
            'state': str
        }

        self.attribute_map = {
            'address_line1': 'addressLine1',
            'address_line2': 'addressLine2',
            'address_line3': 'addressLine3',
            'city': 'city',
            'country': 'country',
            'postal_code': 'postalCode',
            'state': 'state'
        }

        self._address_line1 = address_line1
        self._address_line2 = address_line2
        self._address_line3 = address_line3
        self._city = city
        self._country = country
        self._postal_code = postal_code
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_line1(self):
        """Gets the address_line1 of this Address.

        The address line1.

        :return: The address_line1 of this Address.
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this Address.

        The address line1.

        :param address_line1: The address_line1 of this Address.
        :type address_line1: str
        """
        if address_line1 is None:
            raise ValueError("Invalid value for `address_line1`, must not be `None`")

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this Address.

        The address line2.

        :return: The address_line2 of this Address.
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this Address.

        The address line2.

        :param address_line2: The address_line2 of this Address.
        :type address_line2: str
        """

        self._address_line2 = address_line2

    @property
    def address_line3(self):
        """Gets the address_line3 of this Address.

        The address line3.

        :return: The address_line3 of this Address.
        :rtype: str
        """
        return self._address_line3

    @address_line3.setter
    def address_line3(self, address_line3):
        """Sets the address_line3 of this Address.

        The address line3.

        :param address_line3: The address_line3 of this Address.
        :type address_line3: str
        """

        self._address_line3 = address_line3

    @property
    def city(self):
        """Gets the city of this Address.

        The city name.

        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.

        The city name.

        :param city: The city of this Address.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def country(self):
        """Gets the country of this Address.

        The country name.

        :return: The country of this Address.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.

        The country name.

        :param country: The country of this Address.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.

        The postal code.

        :return: The postal_code of this Address.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.

        The postal code.

        :param postal_code: The postal_code of this Address.
        :type postal_code: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")

        self._postal_code = postal_code

    @property
    def state(self):
        """Gets the state of this Address.

        The state name.

        :return: The state of this Address.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Address.

        The state name.

        :param state: The state of this Address.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state
