# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.contact_details import ContactDetails
from openapi_server.models.order_status import OrderStatus
from openapi_server.models.tracking_info import TrackingInfo
from openapi_server import util


class OrderProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contact_information: ContactDetails=None, current_status: OrderStatus=None, delivery_tracking_info: List[TrackingInfo]=None, order_history: List[OrderStatus]=None, return_tracking_info: List[TrackingInfo]=None, serial_number: str=None, shipping_address: Address=None):
        """OrderProperties - a model defined in OpenAPI

        :param contact_information: The contact_information of this OrderProperties.
        :param current_status: The current_status of this OrderProperties.
        :param delivery_tracking_info: The delivery_tracking_info of this OrderProperties.
        :param order_history: The order_history of this OrderProperties.
        :param return_tracking_info: The return_tracking_info of this OrderProperties.
        :param serial_number: The serial_number of this OrderProperties.
        :param shipping_address: The shipping_address of this OrderProperties.
        """
        self.openapi_types = {
            'contact_information': ContactDetails,
            'current_status': OrderStatus,
            'delivery_tracking_info': List[TrackingInfo],
            'order_history': List[OrderStatus],
            'return_tracking_info': List[TrackingInfo],
            'serial_number': str,
            'shipping_address': Address
        }

        self.attribute_map = {
            'contact_information': 'contactInformation',
            'current_status': 'currentStatus',
            'delivery_tracking_info': 'deliveryTrackingInfo',
            'order_history': 'orderHistory',
            'return_tracking_info': 'returnTrackingInfo',
            'serial_number': 'serialNumber',
            'shipping_address': 'shippingAddress'
        }

        self._contact_information = contact_information
        self._current_status = current_status
        self._delivery_tracking_info = delivery_tracking_info
        self._order_history = order_history
        self._return_tracking_info = return_tracking_info
        self._serial_number = serial_number
        self._shipping_address = shipping_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrderProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrderProperties of this OrderProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contact_information(self):
        """Gets the contact_information of this OrderProperties.


        :return: The contact_information of this OrderProperties.
        :rtype: ContactDetails
        """
        return self._contact_information

    @contact_information.setter
    def contact_information(self, contact_information):
        """Sets the contact_information of this OrderProperties.


        :param contact_information: The contact_information of this OrderProperties.
        :type contact_information: ContactDetails
        """
        if contact_information is None:
            raise ValueError("Invalid value for `contact_information`, must not be `None`")

        self._contact_information = contact_information

    @property
    def current_status(self):
        """Gets the current_status of this OrderProperties.


        :return: The current_status of this OrderProperties.
        :rtype: OrderStatus
        """
        return self._current_status

    @current_status.setter
    def current_status(self, current_status):
        """Sets the current_status of this OrderProperties.


        :param current_status: The current_status of this OrderProperties.
        :type current_status: OrderStatus
        """

        self._current_status = current_status

    @property
    def delivery_tracking_info(self):
        """Gets the delivery_tracking_info of this OrderProperties.

        Tracking information for the package delivered to the customer whether it has an original or a replacement device.

        :return: The delivery_tracking_info of this OrderProperties.
        :rtype: List[TrackingInfo]
        """
        return self._delivery_tracking_info

    @delivery_tracking_info.setter
    def delivery_tracking_info(self, delivery_tracking_info):
        """Sets the delivery_tracking_info of this OrderProperties.

        Tracking information for the package delivered to the customer whether it has an original or a replacement device.

        :param delivery_tracking_info: The delivery_tracking_info of this OrderProperties.
        :type delivery_tracking_info: List[TrackingInfo]
        """

        self._delivery_tracking_info = delivery_tracking_info

    @property
    def order_history(self):
        """Gets the order_history of this OrderProperties.

        List of status changes in the order.

        :return: The order_history of this OrderProperties.
        :rtype: List[OrderStatus]
        """
        return self._order_history

    @order_history.setter
    def order_history(self, order_history):
        """Sets the order_history of this OrderProperties.

        List of status changes in the order.

        :param order_history: The order_history of this OrderProperties.
        :type order_history: List[OrderStatus]
        """

        self._order_history = order_history

    @property
    def return_tracking_info(self):
        """Gets the return_tracking_info of this OrderProperties.

        Tracking information for the package returned from the customer whether it has an original or a replacement device.

        :return: The return_tracking_info of this OrderProperties.
        :rtype: List[TrackingInfo]
        """
        return self._return_tracking_info

    @return_tracking_info.setter
    def return_tracking_info(self, return_tracking_info):
        """Sets the return_tracking_info of this OrderProperties.

        Tracking information for the package returned from the customer whether it has an original or a replacement device.

        :param return_tracking_info: The return_tracking_info of this OrderProperties.
        :type return_tracking_info: List[TrackingInfo]
        """

        self._return_tracking_info = return_tracking_info

    @property
    def serial_number(self):
        """Gets the serial_number of this OrderProperties.

        Serial number of the device.

        :return: The serial_number of this OrderProperties.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this OrderProperties.

        Serial number of the device.

        :param serial_number: The serial_number of this OrderProperties.
        :type serial_number: str
        """

        self._serial_number = serial_number

    @property
    def shipping_address(self):
        """Gets the shipping_address of this OrderProperties.


        :return: The shipping_address of this OrderProperties.
        :rtype: Address
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this OrderProperties.


        :param shipping_address: The shipping_address of this OrderProperties.
        :type shipping_address: Address
        """
        if shipping_address is None:
            raise ValueError("Invalid value for `shipping_address`, must not be `None`")

        self._shipping_address = shipping_address
