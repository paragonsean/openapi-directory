# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alert_error_details import AlertErrorDetails
from openapi_server import util


class AlertProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_type: str=None, appeared_at_date_time: datetime=None, detailed_information: Dict[str, str]=None, error_details: AlertErrorDetails=None, recommendation: str=None, severity: str=None, title: str=None):
        """AlertProperties - a model defined in OpenAPI

        :param alert_type: The alert_type of this AlertProperties.
        :param appeared_at_date_time: The appeared_at_date_time of this AlertProperties.
        :param detailed_information: The detailed_information of this AlertProperties.
        :param error_details: The error_details of this AlertProperties.
        :param recommendation: The recommendation of this AlertProperties.
        :param severity: The severity of this AlertProperties.
        :param title: The title of this AlertProperties.
        """
        self.openapi_types = {
            'alert_type': str,
            'appeared_at_date_time': datetime,
            'detailed_information': Dict[str, str],
            'error_details': AlertErrorDetails,
            'recommendation': str,
            'severity': str,
            'title': str
        }

        self.attribute_map = {
            'alert_type': 'alertType',
            'appeared_at_date_time': 'appearedAtDateTime',
            'detailed_information': 'detailedInformation',
            'error_details': 'errorDetails',
            'recommendation': 'recommendation',
            'severity': 'severity',
            'title': 'title'
        }

        self._alert_type = alert_type
        self._appeared_at_date_time = appeared_at_date_time
        self._detailed_information = detailed_information
        self._error_details = error_details
        self._recommendation = recommendation
        self._severity = severity
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlertProperties of this AlertProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_type(self):
        """Gets the alert_type of this AlertProperties.

        Alert type.

        :return: The alert_type of this AlertProperties.
        :rtype: str
        """
        return self._alert_type

    @alert_type.setter
    def alert_type(self, alert_type):
        """Sets the alert_type of this AlertProperties.

        Alert type.

        :param alert_type: The alert_type of this AlertProperties.
        :type alert_type: str
        """

        self._alert_type = alert_type

    @property
    def appeared_at_date_time(self):
        """Gets the appeared_at_date_time of this AlertProperties.

        UTC time when the alert appeared.

        :return: The appeared_at_date_time of this AlertProperties.
        :rtype: datetime
        """
        return self._appeared_at_date_time

    @appeared_at_date_time.setter
    def appeared_at_date_time(self, appeared_at_date_time):
        """Sets the appeared_at_date_time of this AlertProperties.

        UTC time when the alert appeared.

        :param appeared_at_date_time: The appeared_at_date_time of this AlertProperties.
        :type appeared_at_date_time: datetime
        """

        self._appeared_at_date_time = appeared_at_date_time

    @property
    def detailed_information(self):
        """Gets the detailed_information of this AlertProperties.

        Alert details.

        :return: The detailed_information of this AlertProperties.
        :rtype: Dict[str, str]
        """
        return self._detailed_information

    @detailed_information.setter
    def detailed_information(self, detailed_information):
        """Sets the detailed_information of this AlertProperties.

        Alert details.

        :param detailed_information: The detailed_information of this AlertProperties.
        :type detailed_information: Dict[str, str]
        """

        self._detailed_information = detailed_information

    @property
    def error_details(self):
        """Gets the error_details of this AlertProperties.


        :return: The error_details of this AlertProperties.
        :rtype: AlertErrorDetails
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this AlertProperties.


        :param error_details: The error_details of this AlertProperties.
        :type error_details: AlertErrorDetails
        """

        self._error_details = error_details

    @property
    def recommendation(self):
        """Gets the recommendation of this AlertProperties.

        Alert recommendation.

        :return: The recommendation of this AlertProperties.
        :rtype: str
        """
        return self._recommendation

    @recommendation.setter
    def recommendation(self, recommendation):
        """Sets the recommendation of this AlertProperties.

        Alert recommendation.

        :param recommendation: The recommendation of this AlertProperties.
        :type recommendation: str
        """

        self._recommendation = recommendation

    @property
    def severity(self):
        """Gets the severity of this AlertProperties.

        Severity of the alert.

        :return: The severity of this AlertProperties.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this AlertProperties.

        Severity of the alert.

        :param severity: The severity of this AlertProperties.
        :type severity: str
        """
        allowed_values = ["Informational", "Warning", "Critical"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def title(self):
        """Gets the title of this AlertProperties.

        Alert title.

        :return: The title of this AlertProperties.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AlertProperties.

        Alert title.

        :param title: The title of this AlertProperties.
        :type title: str
        """

        self._title = title
