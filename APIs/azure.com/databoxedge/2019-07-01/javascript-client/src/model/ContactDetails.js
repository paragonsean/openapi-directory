/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContactDetails model module.
 * @module model/ContactDetails
 * @version 2019-07-01
 */
class ContactDetails {
    /**
     * Constructs a new <code>ContactDetails</code>.
     * Contains all the contact details of the customer.
     * @alias module:model/ContactDetails
     * @param companyName {String} The name of the company.
     * @param contactPerson {String} The contact person name.
     * @param emailList {Array.<String>} The email list.
     * @param phone {String} The phone number.
     */
    constructor(companyName, contactPerson, emailList, phone) { 
        
        ContactDetails.initialize(this, companyName, contactPerson, emailList, phone);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, companyName, contactPerson, emailList, phone) { 
        obj['companyName'] = companyName;
        obj['contactPerson'] = contactPerson;
        obj['emailList'] = emailList;
        obj['phone'] = phone;
    }

    /**
     * Constructs a <code>ContactDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContactDetails} obj Optional instance to populate.
     * @return {module:model/ContactDetails} The populated <code>ContactDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContactDetails();

            if (data.hasOwnProperty('companyName')) {
                obj['companyName'] = ApiClient.convertToType(data['companyName'], 'String');
            }
            if (data.hasOwnProperty('contactPerson')) {
                obj['contactPerson'] = ApiClient.convertToType(data['contactPerson'], 'String');
            }
            if (data.hasOwnProperty('emailList')) {
                obj['emailList'] = ApiClient.convertToType(data['emailList'], ['String']);
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContactDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContactDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContactDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['companyName'] && !(typeof data['companyName'] === 'string' || data['companyName'] instanceof String)) {
            throw new Error("Expected the field `companyName` to be a primitive type in the JSON string but got " + data['companyName']);
        }
        // ensure the json data is a string
        if (data['contactPerson'] && !(typeof data['contactPerson'] === 'string' || data['contactPerson'] instanceof String)) {
            throw new Error("Expected the field `contactPerson` to be a primitive type in the JSON string but got " + data['contactPerson']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['emailList'])) {
            throw new Error("Expected the field `emailList` to be an array in the JSON data but got " + data['emailList']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }

        return true;
    }


}

ContactDetails.RequiredProperties = ["companyName", "contactPerson", "emailList", "phone"];

/**
 * The name of the company.
 * @member {String} companyName
 */
ContactDetails.prototype['companyName'] = undefined;

/**
 * The contact person name.
 * @member {String} contactPerson
 */
ContactDetails.prototype['contactPerson'] = undefined;

/**
 * The email list.
 * @member {Array.<String>} emailList
 */
ContactDetails.prototype['emailList'] = undefined;

/**
 * The phone number.
 * @member {String} phone
 */
ContactDetails.prototype['phone'] = undefined;






export default ContactDetails;

