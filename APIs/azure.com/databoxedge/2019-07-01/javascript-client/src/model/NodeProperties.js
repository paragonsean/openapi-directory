/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NodeProperties model module.
 * @module model/NodeProperties
 * @version 2019-07-01
 */
class NodeProperties {
    /**
     * Constructs a new <code>NodeProperties</code>.
     * This class represents the nodes in a highly available cluster
     * @alias module:model/NodeProperties
     */
    constructor() { 
        
        NodeProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NodeProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodeProperties} obj Optional instance to populate.
     * @return {module:model/NodeProperties} The populated <code>NodeProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodeProperties();

            if (data.hasOwnProperty('nodeChassisSerialNumber')) {
                obj['nodeChassisSerialNumber'] = ApiClient.convertToType(data['nodeChassisSerialNumber'], 'String');
            }
            if (data.hasOwnProperty('nodeDisplayName')) {
                obj['nodeDisplayName'] = ApiClient.convertToType(data['nodeDisplayName'], 'String');
            }
            if (data.hasOwnProperty('nodeFriendlySoftwareVersion')) {
                obj['nodeFriendlySoftwareVersion'] = ApiClient.convertToType(data['nodeFriendlySoftwareVersion'], 'String');
            }
            if (data.hasOwnProperty('nodeHcsVersion')) {
                obj['nodeHcsVersion'] = ApiClient.convertToType(data['nodeHcsVersion'], 'String');
            }
            if (data.hasOwnProperty('nodeInstanceId')) {
                obj['nodeInstanceId'] = ApiClient.convertToType(data['nodeInstanceId'], 'String');
            }
            if (data.hasOwnProperty('nodeSerialNumber')) {
                obj['nodeSerialNumber'] = ApiClient.convertToType(data['nodeSerialNumber'], 'String');
            }
            if (data.hasOwnProperty('nodeStatus')) {
                obj['nodeStatus'] = ApiClient.convertToType(data['nodeStatus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodeProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodeProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['nodeChassisSerialNumber'] && !(typeof data['nodeChassisSerialNumber'] === 'string' || data['nodeChassisSerialNumber'] instanceof String)) {
            throw new Error("Expected the field `nodeChassisSerialNumber` to be a primitive type in the JSON string but got " + data['nodeChassisSerialNumber']);
        }
        // ensure the json data is a string
        if (data['nodeDisplayName'] && !(typeof data['nodeDisplayName'] === 'string' || data['nodeDisplayName'] instanceof String)) {
            throw new Error("Expected the field `nodeDisplayName` to be a primitive type in the JSON string but got " + data['nodeDisplayName']);
        }
        // ensure the json data is a string
        if (data['nodeFriendlySoftwareVersion'] && !(typeof data['nodeFriendlySoftwareVersion'] === 'string' || data['nodeFriendlySoftwareVersion'] instanceof String)) {
            throw new Error("Expected the field `nodeFriendlySoftwareVersion` to be a primitive type in the JSON string but got " + data['nodeFriendlySoftwareVersion']);
        }
        // ensure the json data is a string
        if (data['nodeHcsVersion'] && !(typeof data['nodeHcsVersion'] === 'string' || data['nodeHcsVersion'] instanceof String)) {
            throw new Error("Expected the field `nodeHcsVersion` to be a primitive type in the JSON string but got " + data['nodeHcsVersion']);
        }
        // ensure the json data is a string
        if (data['nodeInstanceId'] && !(typeof data['nodeInstanceId'] === 'string' || data['nodeInstanceId'] instanceof String)) {
            throw new Error("Expected the field `nodeInstanceId` to be a primitive type in the JSON string but got " + data['nodeInstanceId']);
        }
        // ensure the json data is a string
        if (data['nodeSerialNumber'] && !(typeof data['nodeSerialNumber'] === 'string' || data['nodeSerialNumber'] instanceof String)) {
            throw new Error("Expected the field `nodeSerialNumber` to be a primitive type in the JSON string but got " + data['nodeSerialNumber']);
        }
        // ensure the json data is a string
        if (data['nodeStatus'] && !(typeof data['nodeStatus'] === 'string' || data['nodeStatus'] instanceof String)) {
            throw new Error("Expected the field `nodeStatus` to be a primitive type in the JSON string but got " + data['nodeStatus']);
        }

        return true;
    }


}



/**
 * Serial number of the Chassis
 * @member {String} nodeChassisSerialNumber
 */
NodeProperties.prototype['nodeChassisSerialNumber'] = undefined;

/**
 * Display Name of the individual node
 * @member {String} nodeDisplayName
 */
NodeProperties.prototype['nodeDisplayName'] = undefined;

/**
 * Friendly software version name that is currently installed on the node
 * @member {String} nodeFriendlySoftwareVersion
 */
NodeProperties.prototype['nodeFriendlySoftwareVersion'] = undefined;

/**
 * HCS version that is currently installed on the node
 * @member {String} nodeHcsVersion
 */
NodeProperties.prototype['nodeHcsVersion'] = undefined;

/**
 * Guid instance id of the node
 * @member {String} nodeInstanceId
 */
NodeProperties.prototype['nodeInstanceId'] = undefined;

/**
 * Serial number of the individual node
 * @member {String} nodeSerialNumber
 */
NodeProperties.prototype['nodeSerialNumber'] = undefined;

/**
 * The current status of the individual node
 * @member {module:model/NodeProperties.NodeStatusEnum} nodeStatus
 */
NodeProperties.prototype['nodeStatus'] = undefined;





/**
 * Allowed values for the <code>nodeStatus</code> property.
 * @enum {String}
 * @readonly
 */
NodeProperties['NodeStatusEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "Up"
     * @const
     */
    "Up": "Up",

    /**
     * value: "Down"
     * @const
     */
    "Down": "Down",

    /**
     * value: "Rebooting"
     * @const
     */
    "Rebooting": "Rebooting",

    /**
     * value: "ShuttingDown"
     * @const
     */
    "ShuttingDown": "ShuttingDown"
};



export default NodeProperties;

