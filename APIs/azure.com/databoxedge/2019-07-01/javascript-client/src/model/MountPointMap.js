/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MountPointMap model module.
 * @module model/MountPointMap
 * @version 2019-07-01
 */
class MountPointMap {
    /**
     * Constructs a new <code>MountPointMap</code>.
     * The share mount point.
     * @alias module:model/MountPointMap
     * @param shareId {String} ID of the share mounted to the role VM.
     */
    constructor(shareId) { 
        
        MountPointMap.initialize(this, shareId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, shareId) { 
        obj['shareId'] = shareId;
    }

    /**
     * Constructs a <code>MountPointMap</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MountPointMap} obj Optional instance to populate.
     * @return {module:model/MountPointMap} The populated <code>MountPointMap</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MountPointMap();

            if (data.hasOwnProperty('mountPoint')) {
                obj['mountPoint'] = ApiClient.convertToType(data['mountPoint'], 'String');
            }
            if (data.hasOwnProperty('roleId')) {
                obj['roleId'] = ApiClient.convertToType(data['roleId'], 'String');
            }
            if (data.hasOwnProperty('roleType')) {
                obj['roleType'] = ApiClient.convertToType(data['roleType'], 'String');
            }
            if (data.hasOwnProperty('shareId')) {
                obj['shareId'] = ApiClient.convertToType(data['shareId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MountPointMap</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MountPointMap</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MountPointMap.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['mountPoint'] && !(typeof data['mountPoint'] === 'string' || data['mountPoint'] instanceof String)) {
            throw new Error("Expected the field `mountPoint` to be a primitive type in the JSON string but got " + data['mountPoint']);
        }
        // ensure the json data is a string
        if (data['roleId'] && !(typeof data['roleId'] === 'string' || data['roleId'] instanceof String)) {
            throw new Error("Expected the field `roleId` to be a primitive type in the JSON string but got " + data['roleId']);
        }
        // ensure the json data is a string
        if (data['roleType'] && !(typeof data['roleType'] === 'string' || data['roleType'] instanceof String)) {
            throw new Error("Expected the field `roleType` to be a primitive type in the JSON string but got " + data['roleType']);
        }
        // ensure the json data is a string
        if (data['shareId'] && !(typeof data['shareId'] === 'string' || data['shareId'] instanceof String)) {
            throw new Error("Expected the field `shareId` to be a primitive type in the JSON string but got " + data['shareId']);
        }

        return true;
    }


}

MountPointMap.RequiredProperties = ["shareId"];

/**
 * Mount point for the share.
 * @member {String} mountPoint
 */
MountPointMap.prototype['mountPoint'] = undefined;

/**
 * ID of the role to which share is mounted.
 * @member {String} roleId
 */
MountPointMap.prototype['roleId'] = undefined;

/**
 * Role type.
 * @member {module:model/MountPointMap.RoleTypeEnum} roleType
 */
MountPointMap.prototype['roleType'] = undefined;

/**
 * ID of the share mounted to the role VM.
 * @member {String} shareId
 */
MountPointMap.prototype['shareId'] = undefined;





/**
 * Allowed values for the <code>roleType</code> property.
 * @enum {String}
 * @readonly
 */
MountPointMap['RoleTypeEnum'] = {

    /**
     * value: "IOT"
     * @const
     */
    "IOT": "IOT",

    /**
     * value: "ASA"
     * @const
     */
    "ASA": "ASA",

    /**
     * value: "Functions"
     * @const
     */
    "Functions": "Functions",

    /**
     * value: "Cognitive"
     * @const
     */
    "Cognitive": "Cognitive"
};



export default MountPointMap;

