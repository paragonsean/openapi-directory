/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Ipv4Config from './Ipv4Config';
import Ipv6Config from './Ipv6Config';
import NetworkAdapterPosition from './NetworkAdapterPosition';

/**
 * The NetworkAdapter model module.
 * @module model/NetworkAdapter
 * @version 2019-07-01
 */
class NetworkAdapter {
    /**
     * Constructs a new <code>NetworkAdapter</code>.
     * Represents the networkAdapter on a device.
     * @alias module:model/NetworkAdapter
     */
    constructor() { 
        
        NetworkAdapter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NetworkAdapter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkAdapter} obj Optional instance to populate.
     * @return {module:model/NetworkAdapter} The populated <code>NetworkAdapter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkAdapter();

            if (data.hasOwnProperty('adapterId')) {
                obj['adapterId'] = ApiClient.convertToType(data['adapterId'], 'String');
            }
            if (data.hasOwnProperty('adapterPosition')) {
                obj['adapterPosition'] = NetworkAdapterPosition.constructFromObject(data['adapterPosition']);
            }
            if (data.hasOwnProperty('dhcpStatus')) {
                obj['dhcpStatus'] = ApiClient.convertToType(data['dhcpStatus'], 'String');
            }
            if (data.hasOwnProperty('dnsServers')) {
                obj['dnsServers'] = ApiClient.convertToType(data['dnsServers'], ['String']);
            }
            if (data.hasOwnProperty('index')) {
                obj['index'] = ApiClient.convertToType(data['index'], 'Number');
            }
            if (data.hasOwnProperty('ipv4Configuration')) {
                obj['ipv4Configuration'] = Ipv4Config.constructFromObject(data['ipv4Configuration']);
            }
            if (data.hasOwnProperty('ipv6Configuration')) {
                obj['ipv6Configuration'] = Ipv6Config.constructFromObject(data['ipv6Configuration']);
            }
            if (data.hasOwnProperty('ipv6LinkLocalAddress')) {
                obj['ipv6LinkLocalAddress'] = ApiClient.convertToType(data['ipv6LinkLocalAddress'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('linkSpeed')) {
                obj['linkSpeed'] = ApiClient.convertToType(data['linkSpeed'], 'Number');
            }
            if (data.hasOwnProperty('macAddress')) {
                obj['macAddress'] = ApiClient.convertToType(data['macAddress'], 'String');
            }
            if (data.hasOwnProperty('networkAdapterName')) {
                obj['networkAdapterName'] = ApiClient.convertToType(data['networkAdapterName'], 'String');
            }
            if (data.hasOwnProperty('nodeId')) {
                obj['nodeId'] = ApiClient.convertToType(data['nodeId'], 'String');
            }
            if (data.hasOwnProperty('rdmaStatus')) {
                obj['rdmaStatus'] = ApiClient.convertToType(data['rdmaStatus'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NetworkAdapter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NetworkAdapter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['adapterId'] && !(typeof data['adapterId'] === 'string' || data['adapterId'] instanceof String)) {
            throw new Error("Expected the field `adapterId` to be a primitive type in the JSON string but got " + data['adapterId']);
        }
        // validate the optional field `adapterPosition`
        if (data['adapterPosition']) { // data not null
          NetworkAdapterPosition.validateJSON(data['adapterPosition']);
        }
        // ensure the json data is a string
        if (data['dhcpStatus'] && !(typeof data['dhcpStatus'] === 'string' || data['dhcpStatus'] instanceof String)) {
            throw new Error("Expected the field `dhcpStatus` to be a primitive type in the JSON string but got " + data['dhcpStatus']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['dnsServers'])) {
            throw new Error("Expected the field `dnsServers` to be an array in the JSON data but got " + data['dnsServers']);
        }
        // validate the optional field `ipv4Configuration`
        if (data['ipv4Configuration']) { // data not null
          Ipv4Config.validateJSON(data['ipv4Configuration']);
        }
        // validate the optional field `ipv6Configuration`
        if (data['ipv6Configuration']) { // data not null
          Ipv6Config.validateJSON(data['ipv6Configuration']);
        }
        // ensure the json data is a string
        if (data['ipv6LinkLocalAddress'] && !(typeof data['ipv6LinkLocalAddress'] === 'string' || data['ipv6LinkLocalAddress'] instanceof String)) {
            throw new Error("Expected the field `ipv6LinkLocalAddress` to be a primitive type in the JSON string but got " + data['ipv6LinkLocalAddress']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['macAddress'] && !(typeof data['macAddress'] === 'string' || data['macAddress'] instanceof String)) {
            throw new Error("Expected the field `macAddress` to be a primitive type in the JSON string but got " + data['macAddress']);
        }
        // ensure the json data is a string
        if (data['networkAdapterName'] && !(typeof data['networkAdapterName'] === 'string' || data['networkAdapterName'] instanceof String)) {
            throw new Error("Expected the field `networkAdapterName` to be a primitive type in the JSON string but got " + data['networkAdapterName']);
        }
        // ensure the json data is a string
        if (data['nodeId'] && !(typeof data['nodeId'] === 'string' || data['nodeId'] instanceof String)) {
            throw new Error("Expected the field `nodeId` to be a primitive type in the JSON string but got " + data['nodeId']);
        }
        // ensure the json data is a string
        if (data['rdmaStatus'] && !(typeof data['rdmaStatus'] === 'string' || data['rdmaStatus'] instanceof String)) {
            throw new Error("Expected the field `rdmaStatus` to be a primitive type in the JSON string but got " + data['rdmaStatus']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * Instance ID of network adapter.
 * @member {String} adapterId
 */
NetworkAdapter.prototype['adapterId'] = undefined;

/**
 * @member {module:model/NetworkAdapterPosition} adapterPosition
 */
NetworkAdapter.prototype['adapterPosition'] = undefined;

/**
 * Value indicating whether this adapter has DHCP enabled.
 * @member {module:model/NetworkAdapter.DhcpStatusEnum} dhcpStatus
 */
NetworkAdapter.prototype['dhcpStatus'] = undefined;

/**
 * The list of DNS Servers of the device.
 * @member {Array.<String>} dnsServers
 */
NetworkAdapter.prototype['dnsServers'] = undefined;

/**
 * Logical index of the adapter.
 * @member {Number} index
 */
NetworkAdapter.prototype['index'] = undefined;

/**
 * @member {module:model/Ipv4Config} ipv4Configuration
 */
NetworkAdapter.prototype['ipv4Configuration'] = undefined;

/**
 * @member {module:model/Ipv6Config} ipv6Configuration
 */
NetworkAdapter.prototype['ipv6Configuration'] = undefined;

/**
 * The IPv6 local address.
 * @member {String} ipv6LinkLocalAddress
 */
NetworkAdapter.prototype['ipv6LinkLocalAddress'] = undefined;

/**
 * Hardware label for the adapter.
 * @member {String} label
 */
NetworkAdapter.prototype['label'] = undefined;

/**
 * Link speed.
 * @member {Number} linkSpeed
 */
NetworkAdapter.prototype['linkSpeed'] = undefined;

/**
 * MAC address.
 * @member {String} macAddress
 */
NetworkAdapter.prototype['macAddress'] = undefined;

/**
 * Network adapter name.
 * @member {String} networkAdapterName
 */
NetworkAdapter.prototype['networkAdapterName'] = undefined;

/**
 * Node ID of the network adapter.
 * @member {String} nodeId
 */
NetworkAdapter.prototype['nodeId'] = undefined;

/**
 * Value indicating whether this adapter is RDMA capable.
 * @member {module:model/NetworkAdapter.RdmaStatusEnum} rdmaStatus
 */
NetworkAdapter.prototype['rdmaStatus'] = undefined;

/**
 * Value indicating whether this adapter is valid.
 * @member {module:model/NetworkAdapter.StatusEnum} status
 */
NetworkAdapter.prototype['status'] = undefined;





/**
 * Allowed values for the <code>dhcpStatus</code> property.
 * @enum {String}
 * @readonly
 */
NetworkAdapter['DhcpStatusEnum'] = {

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled"
};


/**
 * Allowed values for the <code>rdmaStatus</code> property.
 * @enum {String}
 * @readonly
 */
NetworkAdapter['RdmaStatusEnum'] = {

    /**
     * value: "Incapable"
     * @const
     */
    "Incapable": "Incapable",

    /**
     * value: "Capable"
     * @const
     */
    "Capable": "Capable"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
NetworkAdapter['StatusEnum'] = {

    /**
     * value: "Inactive"
     * @const
     */
    "Inactive": "Inactive",

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active"
};



export default NetworkAdapter;

