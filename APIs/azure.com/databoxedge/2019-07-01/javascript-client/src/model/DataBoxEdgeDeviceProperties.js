/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataBoxEdgeDeviceProperties model module.
 * @module model/DataBoxEdgeDeviceProperties
 * @version 2019-07-01
 */
class DataBoxEdgeDeviceProperties {
    /**
     * Constructs a new <code>DataBoxEdgeDeviceProperties</code>.
     * The properties of the Data Box Edge/Gateway device.
     * @alias module:model/DataBoxEdgeDeviceProperties
     */
    constructor() { 
        
        DataBoxEdgeDeviceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataBoxEdgeDeviceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataBoxEdgeDeviceProperties} obj Optional instance to populate.
     * @return {module:model/DataBoxEdgeDeviceProperties} The populated <code>DataBoxEdgeDeviceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataBoxEdgeDeviceProperties();

            if (data.hasOwnProperty('configuredRoleTypes')) {
                obj['configuredRoleTypes'] = ApiClient.convertToType(data['configuredRoleTypes'], ['String']);
            }
            if (data.hasOwnProperty('culture')) {
                obj['culture'] = ApiClient.convertToType(data['culture'], 'String');
            }
            if (data.hasOwnProperty('dataBoxEdgeDeviceStatus')) {
                obj['dataBoxEdgeDeviceStatus'] = ApiClient.convertToType(data['dataBoxEdgeDeviceStatus'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('deviceHcsVersion')) {
                obj['deviceHcsVersion'] = ApiClient.convertToType(data['deviceHcsVersion'], 'String');
            }
            if (data.hasOwnProperty('deviceLocalCapacity')) {
                obj['deviceLocalCapacity'] = ApiClient.convertToType(data['deviceLocalCapacity'], 'Number');
            }
            if (data.hasOwnProperty('deviceModel')) {
                obj['deviceModel'] = ApiClient.convertToType(data['deviceModel'], 'String');
            }
            if (data.hasOwnProperty('deviceSoftwareVersion')) {
                obj['deviceSoftwareVersion'] = ApiClient.convertToType(data['deviceSoftwareVersion'], 'String');
            }
            if (data.hasOwnProperty('deviceType')) {
                obj['deviceType'] = ApiClient.convertToType(data['deviceType'], 'String');
            }
            if (data.hasOwnProperty('friendlyName')) {
                obj['friendlyName'] = ApiClient.convertToType(data['friendlyName'], 'String');
            }
            if (data.hasOwnProperty('modelDescription')) {
                obj['modelDescription'] = ApiClient.convertToType(data['modelDescription'], 'String');
            }
            if (data.hasOwnProperty('nodeCount')) {
                obj['nodeCount'] = ApiClient.convertToType(data['nodeCount'], 'Number');
            }
            if (data.hasOwnProperty('serialNumber')) {
                obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataBoxEdgeDeviceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataBoxEdgeDeviceProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['configuredRoleTypes'])) {
            throw new Error("Expected the field `configuredRoleTypes` to be an array in the JSON data but got " + data['configuredRoleTypes']);
        }
        // ensure the json data is a string
        if (data['culture'] && !(typeof data['culture'] === 'string' || data['culture'] instanceof String)) {
            throw new Error("Expected the field `culture` to be a primitive type in the JSON string but got " + data['culture']);
        }
        // ensure the json data is a string
        if (data['dataBoxEdgeDeviceStatus'] && !(typeof data['dataBoxEdgeDeviceStatus'] === 'string' || data['dataBoxEdgeDeviceStatus'] instanceof String)) {
            throw new Error("Expected the field `dataBoxEdgeDeviceStatus` to be a primitive type in the JSON string but got " + data['dataBoxEdgeDeviceStatus']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['deviceHcsVersion'] && !(typeof data['deviceHcsVersion'] === 'string' || data['deviceHcsVersion'] instanceof String)) {
            throw new Error("Expected the field `deviceHcsVersion` to be a primitive type in the JSON string but got " + data['deviceHcsVersion']);
        }
        // ensure the json data is a string
        if (data['deviceModel'] && !(typeof data['deviceModel'] === 'string' || data['deviceModel'] instanceof String)) {
            throw new Error("Expected the field `deviceModel` to be a primitive type in the JSON string but got " + data['deviceModel']);
        }
        // ensure the json data is a string
        if (data['deviceSoftwareVersion'] && !(typeof data['deviceSoftwareVersion'] === 'string' || data['deviceSoftwareVersion'] instanceof String)) {
            throw new Error("Expected the field `deviceSoftwareVersion` to be a primitive type in the JSON string but got " + data['deviceSoftwareVersion']);
        }
        // ensure the json data is a string
        if (data['deviceType'] && !(typeof data['deviceType'] === 'string' || data['deviceType'] instanceof String)) {
            throw new Error("Expected the field `deviceType` to be a primitive type in the JSON string but got " + data['deviceType']);
        }
        // ensure the json data is a string
        if (data['friendlyName'] && !(typeof data['friendlyName'] === 'string' || data['friendlyName'] instanceof String)) {
            throw new Error("Expected the field `friendlyName` to be a primitive type in the JSON string but got " + data['friendlyName']);
        }
        // ensure the json data is a string
        if (data['modelDescription'] && !(typeof data['modelDescription'] === 'string' || data['modelDescription'] instanceof String)) {
            throw new Error("Expected the field `modelDescription` to be a primitive type in the JSON string but got " + data['modelDescription']);
        }
        // ensure the json data is a string
        if (data['serialNumber'] && !(typeof data['serialNumber'] === 'string' || data['serialNumber'] instanceof String)) {
            throw new Error("Expected the field `serialNumber` to be a primitive type in the JSON string but got " + data['serialNumber']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }

        return true;
    }


}



/**
 * Type of compute roles configured.
 * @member {Array.<module:model/DataBoxEdgeDeviceProperties.ConfiguredRoleTypesEnum>} configuredRoleTypes
 */
DataBoxEdgeDeviceProperties.prototype['configuredRoleTypes'] = undefined;

/**
 * The Data Box Edge/Gateway device culture.
 * @member {String} culture
 */
DataBoxEdgeDeviceProperties.prototype['culture'] = undefined;

/**
 * The status of the Data Box Edge/Gateway device.
 * @member {module:model/DataBoxEdgeDeviceProperties.DataBoxEdgeDeviceStatusEnum} dataBoxEdgeDeviceStatus
 */
DataBoxEdgeDeviceProperties.prototype['dataBoxEdgeDeviceStatus'] = undefined;

/**
 * The Description of the Data Box Edge/Gateway device.
 * @member {String} description
 */
DataBoxEdgeDeviceProperties.prototype['description'] = undefined;

/**
 * The device software version number of the device (eg: 1.2.18105.6).
 * @member {String} deviceHcsVersion
 */
DataBoxEdgeDeviceProperties.prototype['deviceHcsVersion'] = undefined;

/**
 * The Data Box Edge/Gateway device local capacity in MB.
 * @member {Number} deviceLocalCapacity
 */
DataBoxEdgeDeviceProperties.prototype['deviceLocalCapacity'] = undefined;

/**
 * The Data Box Edge/Gateway device model.
 * @member {String} deviceModel
 */
DataBoxEdgeDeviceProperties.prototype['deviceModel'] = undefined;

/**
 * The Data Box Edge/Gateway device software version.
 * @member {String} deviceSoftwareVersion
 */
DataBoxEdgeDeviceProperties.prototype['deviceSoftwareVersion'] = undefined;

/**
 * The type of the Data Box Edge/Gateway device.
 * @member {module:model/DataBoxEdgeDeviceProperties.DeviceTypeEnum} deviceType
 */
DataBoxEdgeDeviceProperties.prototype['deviceType'] = undefined;

/**
 * The Data Box Edge/Gateway device name.
 * @member {String} friendlyName
 */
DataBoxEdgeDeviceProperties.prototype['friendlyName'] = undefined;

/**
 * The description of the Data Box Edge/Gateway device model.
 * @member {String} modelDescription
 */
DataBoxEdgeDeviceProperties.prototype['modelDescription'] = undefined;

/**
 * The number of nodes in the cluster.
 * @member {Number} nodeCount
 */
DataBoxEdgeDeviceProperties.prototype['nodeCount'] = undefined;

/**
 * The Serial Number of Data Box Edge/Gateway device.
 * @member {String} serialNumber
 */
DataBoxEdgeDeviceProperties.prototype['serialNumber'] = undefined;

/**
 * The Data Box Edge/Gateway device timezone.
 * @member {String} timeZone
 */
DataBoxEdgeDeviceProperties.prototype['timeZone'] = undefined;





/**
 * Allowed values for the <code>configuredRoleTypes</code> property.
 * @enum {String}
 * @readonly
 */
DataBoxEdgeDeviceProperties['ConfiguredRoleTypesEnum'] = {

    /**
     * value: "IOT"
     * @const
     */
    "IOT": "IOT",

    /**
     * value: "ASA"
     * @const
     */
    "ASA": "ASA",

    /**
     * value: "Functions"
     * @const
     */
    "Functions": "Functions",

    /**
     * value: "Cognitive"
     * @const
     */
    "Cognitive": "Cognitive"
};


/**
 * Allowed values for the <code>dataBoxEdgeDeviceStatus</code> property.
 * @enum {String}
 * @readonly
 */
DataBoxEdgeDeviceProperties['DataBoxEdgeDeviceStatusEnum'] = {

    /**
     * value: "ReadyToSetup"
     * @const
     */
    "ReadyToSetup": "ReadyToSetup",

    /**
     * value: "Online"
     * @const
     */
    "Online": "Online",

    /**
     * value: "Offline"
     * @const
     */
    "Offline": "Offline",

    /**
     * value: "NeedsAttention"
     * @const
     */
    "NeedsAttention": "NeedsAttention",

    /**
     * value: "Disconnected"
     * @const
     */
    "Disconnected": "Disconnected",

    /**
     * value: "PartiallyDisconnected"
     * @const
     */
    "PartiallyDisconnected": "PartiallyDisconnected",

    /**
     * value: "Maintenance"
     * @const
     */
    "Maintenance": "Maintenance"
};


/**
 * Allowed values for the <code>deviceType</code> property.
 * @enum {String}
 * @readonly
 */
DataBoxEdgeDeviceProperties['DeviceTypeEnum'] = {

    /**
     * value: "DataBoxEdgeDevice"
     * @const
     */
    "DataBoxEdgeDevice": "DataBoxEdgeDevice"
};



export default DataBoxEdgeDeviceProperties;

