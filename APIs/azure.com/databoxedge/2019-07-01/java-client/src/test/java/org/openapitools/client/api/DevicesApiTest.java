/*
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.DataBoxEdgeDevice;
import org.openapitools.client.model.DataBoxEdgeDeviceExtendedInfo;
import org.openapitools.client.model.DataBoxEdgeDeviceList;
import org.openapitools.client.model.DataBoxEdgeDevicePatch;
import org.openapitools.client.model.NetworkSettings;
import org.openapitools.client.model.SecuritySettings;
import org.openapitools.client.model.UpdateSummary;
import org.openapitools.client.model.UploadCertificateRequest;
import org.openapitools.client.model.UploadCertificateResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DevicesApi
 */
@Disabled
public class DevicesApiTest {

    private final DevicesApi api = new DevicesApi();

    /**
     * Creates or updates a Data Box Edge/Data Box Gateway resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesCreateOrUpdateTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        DataBoxEdgeDevice dataBoxEdgeDevice = null;
        DataBoxEdgeDevice response = api.devicesCreateOrUpdate(deviceName, subscriptionId, resourceGroupName, apiVersion, dataBoxEdgeDevice);
        // TODO: test validations
    }

    /**
     * Updates the security settings on a Data Box Edge/Data Box Gateway device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesCreateOrUpdateSecuritySettingsTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        SecuritySettings securitySettings = null;
        api.devicesCreateOrUpdateSecuritySettings(deviceName, subscriptionId, resourceGroupName, apiVersion, securitySettings);
        // TODO: test validations
    }

    /**
     * Deletes the Data Box Edge/Data Box Gateway device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesDeleteTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        api.devicesDelete(deviceName, subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

    /**
     * Downloads the updates on a Data Box Edge/Data Box Gateway device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesDownloadUpdatesTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        api.devicesDownloadUpdates(deviceName, subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the properties of the Data Box Edge/Data Box Gateway device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        DataBoxEdgeDevice response = api.devicesGet(deviceName, subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets additional information for the specified Data Box Edge/Data Box Gateway device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetExtendedInformationTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        DataBoxEdgeDeviceExtendedInfo response = api.devicesGetExtendedInformation(deviceName, subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the network settings of the specified Data Box Edge/Data Box Gateway device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetNetworkSettingsTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        NetworkSettings response = api.devicesGetNetworkSettings(deviceName, subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets information about the availability of updates based on the last scan of the device. It also gets information about any ongoing download or install jobs on the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesGetUpdateSummaryTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        UpdateSummary response = api.devicesGetUpdateSummary(deviceName, subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

    /**
     * Installs the updates on the Data Box Edge/Data Box Gateway device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesInstallUpdatesTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        api.devicesInstallUpdates(deviceName, subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesListByResourceGroupTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        String $expand = null;
        DataBoxEdgeDeviceList response = api.devicesListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, $expand);
        // TODO: test validations
    }

    /**
     * Gets all the Data Box Edge/Data Box Gateway devices in a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesListBySubscriptionTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String $expand = null;
        DataBoxEdgeDeviceList response = api.devicesListBySubscription(subscriptionId, apiVersion, $expand);
        // TODO: test validations
    }

    /**
     * Scans for updates on a Data Box Edge/Data Box Gateway device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesScanForUpdatesTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        api.devicesScanForUpdates(deviceName, subscriptionId, resourceGroupName, apiVersion);
        // TODO: test validations
    }

    /**
     * Modifies a Data Box Edge/Data Box Gateway resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesUpdateTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        DataBoxEdgeDevicePatch parameters = null;
        DataBoxEdgeDevice response = api.devicesUpdate(deviceName, subscriptionId, resourceGroupName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Uploads registration certificate for the device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void devicesUploadCertificateTest() throws ApiException {
        String deviceName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        UploadCertificateRequest parameters = null;
        UploadCertificateResponse response = api.devicesUploadCertificate(deviceName, subscriptionId, resourceGroupName, apiVersion, parameters);
        // TODO: test validations
    }

}
