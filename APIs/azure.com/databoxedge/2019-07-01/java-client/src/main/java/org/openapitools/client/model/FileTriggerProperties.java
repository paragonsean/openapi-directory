/*
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FileSourceInfo;
import org.openapitools.client.model.RoleSinkInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * File trigger properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:19.551782-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FileTriggerProperties {
  public static final String SERIALIZED_NAME_CUSTOM_CONTEXT_TAG = "customContextTag";
  @SerializedName(SERIALIZED_NAME_CUSTOM_CONTEXT_TAG)
  private String customContextTag;

  public static final String SERIALIZED_NAME_SINK_INFO = "sinkInfo";
  @SerializedName(SERIALIZED_NAME_SINK_INFO)
  private RoleSinkInfo sinkInfo;

  public static final String SERIALIZED_NAME_SOURCE_INFO = "sourceInfo";
  @SerializedName(SERIALIZED_NAME_SOURCE_INFO)
  private FileSourceInfo sourceInfo;

  public FileTriggerProperties() {
  }

  public FileTriggerProperties customContextTag(String customContextTag) {
    this.customContextTag = customContextTag;
    return this;
  }

  /**
   * A custom context tag typically used to correlate the trigger against its usage. For example, if a periodic timer trigger is intended for certain specific IoT modules in the device, the tag can be the name or the image URL of the module.
   * @return customContextTag
   */
  @javax.annotation.Nullable
  public String getCustomContextTag() {
    return customContextTag;
  }

  public void setCustomContextTag(String customContextTag) {
    this.customContextTag = customContextTag;
  }


  public FileTriggerProperties sinkInfo(RoleSinkInfo sinkInfo) {
    this.sinkInfo = sinkInfo;
    return this;
  }

  /**
   * Get sinkInfo
   * @return sinkInfo
   */
  @javax.annotation.Nonnull
  public RoleSinkInfo getSinkInfo() {
    return sinkInfo;
  }

  public void setSinkInfo(RoleSinkInfo sinkInfo) {
    this.sinkInfo = sinkInfo;
  }


  public FileTriggerProperties sourceInfo(FileSourceInfo sourceInfo) {
    this.sourceInfo = sourceInfo;
    return this;
  }

  /**
   * Get sourceInfo
   * @return sourceInfo
   */
  @javax.annotation.Nonnull
  public FileSourceInfo getSourceInfo() {
    return sourceInfo;
  }

  public void setSourceInfo(FileSourceInfo sourceInfo) {
    this.sourceInfo = sourceInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileTriggerProperties fileTriggerProperties = (FileTriggerProperties) o;
    return Objects.equals(this.customContextTag, fileTriggerProperties.customContextTag) &&
        Objects.equals(this.sinkInfo, fileTriggerProperties.sinkInfo) &&
        Objects.equals(this.sourceInfo, fileTriggerProperties.sourceInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customContextTag, sinkInfo, sourceInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileTriggerProperties {\n");
    sb.append("    customContextTag: ").append(toIndentedString(customContextTag)).append("\n");
    sb.append("    sinkInfo: ").append(toIndentedString(sinkInfo)).append("\n");
    sb.append("    sourceInfo: ").append(toIndentedString(sourceInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customContextTag");
    openapiFields.add("sinkInfo");
    openapiFields.add("sourceInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sinkInfo");
    openapiRequiredFields.add("sourceInfo");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FileTriggerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FileTriggerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileTriggerProperties is not found in the empty JSON string", FileTriggerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FileTriggerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileTriggerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FileTriggerProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("customContextTag") != null && !jsonObj.get("customContextTag").isJsonNull()) && !jsonObj.get("customContextTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customContextTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customContextTag").toString()));
      }
      // validate the required field `sinkInfo`
      RoleSinkInfo.validateJsonElement(jsonObj.get("sinkInfo"));
      // validate the required field `sourceInfo`
      FileSourceInfo.validateJsonElement(jsonObj.get("sourceInfo"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileTriggerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileTriggerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileTriggerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileTriggerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<FileTriggerProperties>() {
           @Override
           public void write(JsonWriter out, FileTriggerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileTriggerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FileTriggerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FileTriggerProperties
   * @throws IOException if the JSON string is invalid with respect to FileTriggerProperties
   */
  public static FileTriggerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileTriggerProperties.class);
  }

  /**
   * Convert an instance of FileTriggerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

