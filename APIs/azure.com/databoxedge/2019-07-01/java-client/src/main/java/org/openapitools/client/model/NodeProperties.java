/*
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This class represents the nodes in a highly available cluster
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:19.551782-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NodeProperties {
  public static final String SERIALIZED_NAME_NODE_CHASSIS_SERIAL_NUMBER = "nodeChassisSerialNumber";
  @SerializedName(SERIALIZED_NAME_NODE_CHASSIS_SERIAL_NUMBER)
  private String nodeChassisSerialNumber;

  public static final String SERIALIZED_NAME_NODE_DISPLAY_NAME = "nodeDisplayName";
  @SerializedName(SERIALIZED_NAME_NODE_DISPLAY_NAME)
  private String nodeDisplayName;

  public static final String SERIALIZED_NAME_NODE_FRIENDLY_SOFTWARE_VERSION = "nodeFriendlySoftwareVersion";
  @SerializedName(SERIALIZED_NAME_NODE_FRIENDLY_SOFTWARE_VERSION)
  private String nodeFriendlySoftwareVersion;

  public static final String SERIALIZED_NAME_NODE_HCS_VERSION = "nodeHcsVersion";
  @SerializedName(SERIALIZED_NAME_NODE_HCS_VERSION)
  private String nodeHcsVersion;

  public static final String SERIALIZED_NAME_NODE_INSTANCE_ID = "nodeInstanceId";
  @SerializedName(SERIALIZED_NAME_NODE_INSTANCE_ID)
  private String nodeInstanceId;

  public static final String SERIALIZED_NAME_NODE_SERIAL_NUMBER = "nodeSerialNumber";
  @SerializedName(SERIALIZED_NAME_NODE_SERIAL_NUMBER)
  private String nodeSerialNumber;

  /**
   * The current status of the individual node
   */
  @JsonAdapter(NodeStatusEnum.Adapter.class)
  public enum NodeStatusEnum {
    UNKNOWN("Unknown"),
    
    UP("Up"),
    
    DOWN("Down"),
    
    REBOOTING("Rebooting"),
    
    SHUTTING_DOWN("ShuttingDown");

    private String value;

    NodeStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NodeStatusEnum fromValue(String value) {
      for (NodeStatusEnum b : NodeStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NodeStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NodeStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NodeStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NodeStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NodeStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NODE_STATUS = "nodeStatus";
  @SerializedName(SERIALIZED_NAME_NODE_STATUS)
  private NodeStatusEnum nodeStatus;

  public NodeProperties() {
  }

  public NodeProperties(
     String nodeChassisSerialNumber, 
     String nodeDisplayName, 
     String nodeFriendlySoftwareVersion, 
     String nodeHcsVersion, 
     String nodeInstanceId, 
     String nodeSerialNumber, 
     NodeStatusEnum nodeStatus
  ) {
    this();
    this.nodeChassisSerialNumber = nodeChassisSerialNumber;
    this.nodeDisplayName = nodeDisplayName;
    this.nodeFriendlySoftwareVersion = nodeFriendlySoftwareVersion;
    this.nodeHcsVersion = nodeHcsVersion;
    this.nodeInstanceId = nodeInstanceId;
    this.nodeSerialNumber = nodeSerialNumber;
    this.nodeStatus = nodeStatus;
  }

  /**
   * Serial number of the Chassis
   * @return nodeChassisSerialNumber
   */
  @javax.annotation.Nullable
  public String getNodeChassisSerialNumber() {
    return nodeChassisSerialNumber;
  }



  /**
   * Display Name of the individual node
   * @return nodeDisplayName
   */
  @javax.annotation.Nullable
  public String getNodeDisplayName() {
    return nodeDisplayName;
  }



  /**
   * Friendly software version name that is currently installed on the node
   * @return nodeFriendlySoftwareVersion
   */
  @javax.annotation.Nullable
  public String getNodeFriendlySoftwareVersion() {
    return nodeFriendlySoftwareVersion;
  }



  /**
   * HCS version that is currently installed on the node
   * @return nodeHcsVersion
   */
  @javax.annotation.Nullable
  public String getNodeHcsVersion() {
    return nodeHcsVersion;
  }



  /**
   * Guid instance id of the node
   * @return nodeInstanceId
   */
  @javax.annotation.Nullable
  public String getNodeInstanceId() {
    return nodeInstanceId;
  }



  /**
   * Serial number of the individual node
   * @return nodeSerialNumber
   */
  @javax.annotation.Nullable
  public String getNodeSerialNumber() {
    return nodeSerialNumber;
  }



  /**
   * The current status of the individual node
   * @return nodeStatus
   */
  @javax.annotation.Nullable
  public NodeStatusEnum getNodeStatus() {
    return nodeStatus;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeProperties nodeProperties = (NodeProperties) o;
    return Objects.equals(this.nodeChassisSerialNumber, nodeProperties.nodeChassisSerialNumber) &&
        Objects.equals(this.nodeDisplayName, nodeProperties.nodeDisplayName) &&
        Objects.equals(this.nodeFriendlySoftwareVersion, nodeProperties.nodeFriendlySoftwareVersion) &&
        Objects.equals(this.nodeHcsVersion, nodeProperties.nodeHcsVersion) &&
        Objects.equals(this.nodeInstanceId, nodeProperties.nodeInstanceId) &&
        Objects.equals(this.nodeSerialNumber, nodeProperties.nodeSerialNumber) &&
        Objects.equals(this.nodeStatus, nodeProperties.nodeStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodeChassisSerialNumber, nodeDisplayName, nodeFriendlySoftwareVersion, nodeHcsVersion, nodeInstanceId, nodeSerialNumber, nodeStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeProperties {\n");
    sb.append("    nodeChassisSerialNumber: ").append(toIndentedString(nodeChassisSerialNumber)).append("\n");
    sb.append("    nodeDisplayName: ").append(toIndentedString(nodeDisplayName)).append("\n");
    sb.append("    nodeFriendlySoftwareVersion: ").append(toIndentedString(nodeFriendlySoftwareVersion)).append("\n");
    sb.append("    nodeHcsVersion: ").append(toIndentedString(nodeHcsVersion)).append("\n");
    sb.append("    nodeInstanceId: ").append(toIndentedString(nodeInstanceId)).append("\n");
    sb.append("    nodeSerialNumber: ").append(toIndentedString(nodeSerialNumber)).append("\n");
    sb.append("    nodeStatus: ").append(toIndentedString(nodeStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nodeChassisSerialNumber");
    openapiFields.add("nodeDisplayName");
    openapiFields.add("nodeFriendlySoftwareVersion");
    openapiFields.add("nodeHcsVersion");
    openapiFields.add("nodeInstanceId");
    openapiFields.add("nodeSerialNumber");
    openapiFields.add("nodeStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NodeProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NodeProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NodeProperties is not found in the empty JSON string", NodeProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NodeProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NodeProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nodeChassisSerialNumber") != null && !jsonObj.get("nodeChassisSerialNumber").isJsonNull()) && !jsonObj.get("nodeChassisSerialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeChassisSerialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeChassisSerialNumber").toString()));
      }
      if ((jsonObj.get("nodeDisplayName") != null && !jsonObj.get("nodeDisplayName").isJsonNull()) && !jsonObj.get("nodeDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeDisplayName").toString()));
      }
      if ((jsonObj.get("nodeFriendlySoftwareVersion") != null && !jsonObj.get("nodeFriendlySoftwareVersion").isJsonNull()) && !jsonObj.get("nodeFriendlySoftwareVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeFriendlySoftwareVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeFriendlySoftwareVersion").toString()));
      }
      if ((jsonObj.get("nodeHcsVersion") != null && !jsonObj.get("nodeHcsVersion").isJsonNull()) && !jsonObj.get("nodeHcsVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeHcsVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeHcsVersion").toString()));
      }
      if ((jsonObj.get("nodeInstanceId") != null && !jsonObj.get("nodeInstanceId").isJsonNull()) && !jsonObj.get("nodeInstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeInstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeInstanceId").toString()));
      }
      if ((jsonObj.get("nodeSerialNumber") != null && !jsonObj.get("nodeSerialNumber").isJsonNull()) && !jsonObj.get("nodeSerialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeSerialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeSerialNumber").toString()));
      }
      if ((jsonObj.get("nodeStatus") != null && !jsonObj.get("nodeStatus").isJsonNull()) && !jsonObj.get("nodeStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeStatus").toString()));
      }
      // validate the optional field `nodeStatus`
      if (jsonObj.get("nodeStatus") != null && !jsonObj.get("nodeStatus").isJsonNull()) {
        NodeStatusEnum.validateJsonElement(jsonObj.get("nodeStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NodeProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NodeProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NodeProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NodeProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<NodeProperties>() {
           @Override
           public void write(JsonWriter out, NodeProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NodeProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NodeProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NodeProperties
   * @throws IOException if the JSON string is invalid with respect to NodeProperties
   */
  public static NodeProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NodeProperties.class);
  }

  /**
   * Convert an instance of NodeProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

