/*
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about the download progress of update.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:19.551782-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateDownloadProgress {
  /**
   * The download phase.
   */
  @JsonAdapter(DownloadPhaseEnum.Adapter.class)
  public enum DownloadPhaseEnum {
    UNKNOWN("Unknown"),
    
    INITIALIZING("Initializing"),
    
    DOWNLOADING("Downloading"),
    
    VERIFYING("Verifying");

    private String value;

    DownloadPhaseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DownloadPhaseEnum fromValue(String value) {
      for (DownloadPhaseEnum b : DownloadPhaseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DownloadPhaseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DownloadPhaseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DownloadPhaseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DownloadPhaseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DownloadPhaseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOWNLOAD_PHASE = "downloadPhase";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_PHASE)
  private DownloadPhaseEnum downloadPhase;

  public static final String SERIALIZED_NAME_NUMBER_OF_UPDATES_DOWNLOADED = "numberOfUpdatesDownloaded";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_UPDATES_DOWNLOADED)
  private Integer numberOfUpdatesDownloaded;

  public static final String SERIALIZED_NAME_NUMBER_OF_UPDATES_TO_DOWNLOAD = "numberOfUpdatesToDownload";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_UPDATES_TO_DOWNLOAD)
  private Integer numberOfUpdatesToDownload;

  public static final String SERIALIZED_NAME_PERCENT_COMPLETE = "percentComplete";
  @SerializedName(SERIALIZED_NAME_PERCENT_COMPLETE)
  private Integer percentComplete;

  public static final String SERIALIZED_NAME_TOTAL_BYTES_DOWNLOADED = "totalBytesDownloaded";
  @SerializedName(SERIALIZED_NAME_TOTAL_BYTES_DOWNLOADED)
  private Double totalBytesDownloaded;

  public static final String SERIALIZED_NAME_TOTAL_BYTES_TO_DOWNLOAD = "totalBytesToDownload";
  @SerializedName(SERIALIZED_NAME_TOTAL_BYTES_TO_DOWNLOAD)
  private Double totalBytesToDownload;

  public UpdateDownloadProgress() {
  }

  public UpdateDownloadProgress(
     DownloadPhaseEnum downloadPhase, 
     Integer numberOfUpdatesDownloaded, 
     Integer numberOfUpdatesToDownload, 
     Integer percentComplete, 
     Double totalBytesDownloaded, 
     Double totalBytesToDownload
  ) {
    this();
    this.downloadPhase = downloadPhase;
    this.numberOfUpdatesDownloaded = numberOfUpdatesDownloaded;
    this.numberOfUpdatesToDownload = numberOfUpdatesToDownload;
    this.percentComplete = percentComplete;
    this.totalBytesDownloaded = totalBytesDownloaded;
    this.totalBytesToDownload = totalBytesToDownload;
  }

  /**
   * The download phase.
   * @return downloadPhase
   */
  @javax.annotation.Nullable
  public DownloadPhaseEnum getDownloadPhase() {
    return downloadPhase;
  }



  /**
   * Number of updates downloaded.
   * @return numberOfUpdatesDownloaded
   */
  @javax.annotation.Nullable
  public Integer getNumberOfUpdatesDownloaded() {
    return numberOfUpdatesDownloaded;
  }



  /**
   * Number of updates to download.
   * @return numberOfUpdatesToDownload
   */
  @javax.annotation.Nullable
  public Integer getNumberOfUpdatesToDownload() {
    return numberOfUpdatesToDownload;
  }



  /**
   * Percentage of completion.
   * @return percentComplete
   */
  @javax.annotation.Nullable
  public Integer getPercentComplete() {
    return percentComplete;
  }



  /**
   * Total bytes downloaded.
   * @return totalBytesDownloaded
   */
  @javax.annotation.Nullable
  public Double getTotalBytesDownloaded() {
    return totalBytesDownloaded;
  }



  /**
   * Total bytes to download.
   * @return totalBytesToDownload
   */
  @javax.annotation.Nullable
  public Double getTotalBytesToDownload() {
    return totalBytesToDownload;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDownloadProgress updateDownloadProgress = (UpdateDownloadProgress) o;
    return Objects.equals(this.downloadPhase, updateDownloadProgress.downloadPhase) &&
        Objects.equals(this.numberOfUpdatesDownloaded, updateDownloadProgress.numberOfUpdatesDownloaded) &&
        Objects.equals(this.numberOfUpdatesToDownload, updateDownloadProgress.numberOfUpdatesToDownload) &&
        Objects.equals(this.percentComplete, updateDownloadProgress.percentComplete) &&
        Objects.equals(this.totalBytesDownloaded, updateDownloadProgress.totalBytesDownloaded) &&
        Objects.equals(this.totalBytesToDownload, updateDownloadProgress.totalBytesToDownload);
  }

  @Override
  public int hashCode() {
    return Objects.hash(downloadPhase, numberOfUpdatesDownloaded, numberOfUpdatesToDownload, percentComplete, totalBytesDownloaded, totalBytesToDownload);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDownloadProgress {\n");
    sb.append("    downloadPhase: ").append(toIndentedString(downloadPhase)).append("\n");
    sb.append("    numberOfUpdatesDownloaded: ").append(toIndentedString(numberOfUpdatesDownloaded)).append("\n");
    sb.append("    numberOfUpdatesToDownload: ").append(toIndentedString(numberOfUpdatesToDownload)).append("\n");
    sb.append("    percentComplete: ").append(toIndentedString(percentComplete)).append("\n");
    sb.append("    totalBytesDownloaded: ").append(toIndentedString(totalBytesDownloaded)).append("\n");
    sb.append("    totalBytesToDownload: ").append(toIndentedString(totalBytesToDownload)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("downloadPhase");
    openapiFields.add("numberOfUpdatesDownloaded");
    openapiFields.add("numberOfUpdatesToDownload");
    openapiFields.add("percentComplete");
    openapiFields.add("totalBytesDownloaded");
    openapiFields.add("totalBytesToDownload");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateDownloadProgress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDownloadProgress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDownloadProgress is not found in the empty JSON string", UpdateDownloadProgress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDownloadProgress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDownloadProgress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("downloadPhase") != null && !jsonObj.get("downloadPhase").isJsonNull()) && !jsonObj.get("downloadPhase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloadPhase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloadPhase").toString()));
      }
      // validate the optional field `downloadPhase`
      if (jsonObj.get("downloadPhase") != null && !jsonObj.get("downloadPhase").isJsonNull()) {
        DownloadPhaseEnum.validateJsonElement(jsonObj.get("downloadPhase"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDownloadProgress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDownloadProgress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDownloadProgress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDownloadProgress.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDownloadProgress>() {
           @Override
           public void write(JsonWriter out, UpdateDownloadProgress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDownloadProgress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateDownloadProgress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateDownloadProgress
   * @throws IOException if the JSON string is invalid with respect to UpdateDownloadProgress
   */
  public static UpdateDownloadProgress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDownloadProgress.class);
  }

  /**
   * Convert an instance of UpdateDownloadProgress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

