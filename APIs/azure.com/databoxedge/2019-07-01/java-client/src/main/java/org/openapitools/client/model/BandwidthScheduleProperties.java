/*
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the bandwidth schedule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:19.551782-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BandwidthScheduleProperties {
  /**
   * Gets or Sets days
   */
  @JsonAdapter(DaysEnum.Adapter.class)
  public enum DaysEnum {
    SUNDAY("Sunday"),
    
    MONDAY("Monday"),
    
    TUESDAY("Tuesday"),
    
    WEDNESDAY("Wednesday"),
    
    THURSDAY("Thursday"),
    
    FRIDAY("Friday"),
    
    SATURDAY("Saturday");

    private String value;

    DaysEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DaysEnum fromValue(String value) {
      for (DaysEnum b : DaysEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DaysEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DaysEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DaysEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DaysEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DaysEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DAYS = "days";
  @SerializedName(SERIALIZED_NAME_DAYS)
  private List<DaysEnum> days = new ArrayList<>();

  public static final String SERIALIZED_NAME_RATE_IN_MBPS = "rateInMbps";
  @SerializedName(SERIALIZED_NAME_RATE_IN_MBPS)
  private Integer rateInMbps;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private String start;

  public static final String SERIALIZED_NAME_STOP = "stop";
  @SerializedName(SERIALIZED_NAME_STOP)
  private String stop;

  public BandwidthScheduleProperties() {
  }

  public BandwidthScheduleProperties days(List<DaysEnum> days) {
    this.days = days;
    return this;
  }

  public BandwidthScheduleProperties addDaysItem(DaysEnum daysItem) {
    if (this.days == null) {
      this.days = new ArrayList<>();
    }
    this.days.add(daysItem);
    return this;
  }

  /**
   * The days of the week when this schedule is applicable.
   * @return days
   */
  @javax.annotation.Nonnull
  public List<DaysEnum> getDays() {
    return days;
  }

  public void setDays(List<DaysEnum> days) {
    this.days = days;
  }


  public BandwidthScheduleProperties rateInMbps(Integer rateInMbps) {
    this.rateInMbps = rateInMbps;
    return this;
  }

  /**
   * The bandwidth rate in Mbps.
   * @return rateInMbps
   */
  @javax.annotation.Nonnull
  public Integer getRateInMbps() {
    return rateInMbps;
  }

  public void setRateInMbps(Integer rateInMbps) {
    this.rateInMbps = rateInMbps;
  }


  public BandwidthScheduleProperties start(String start) {
    this.start = start;
    return this;
  }

  /**
   * The start time of the schedule in UTC.
   * @return start
   */
  @javax.annotation.Nonnull
  public String getStart() {
    return start;
  }

  public void setStart(String start) {
    this.start = start;
  }


  public BandwidthScheduleProperties stop(String stop) {
    this.stop = stop;
    return this;
  }

  /**
   * The stop time of the schedule in UTC.
   * @return stop
   */
  @javax.annotation.Nonnull
  public String getStop() {
    return stop;
  }

  public void setStop(String stop) {
    this.stop = stop;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BandwidthScheduleProperties bandwidthScheduleProperties = (BandwidthScheduleProperties) o;
    return Objects.equals(this.days, bandwidthScheduleProperties.days) &&
        Objects.equals(this.rateInMbps, bandwidthScheduleProperties.rateInMbps) &&
        Objects.equals(this.start, bandwidthScheduleProperties.start) &&
        Objects.equals(this.stop, bandwidthScheduleProperties.stop);
  }

  @Override
  public int hashCode() {
    return Objects.hash(days, rateInMbps, start, stop);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BandwidthScheduleProperties {\n");
    sb.append("    days: ").append(toIndentedString(days)).append("\n");
    sb.append("    rateInMbps: ").append(toIndentedString(rateInMbps)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    stop: ").append(toIndentedString(stop)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("days");
    openapiFields.add("rateInMbps");
    openapiFields.add("start");
    openapiFields.add("stop");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("days");
    openapiRequiredFields.add("rateInMbps");
    openapiRequiredFields.add("start");
    openapiRequiredFields.add("stop");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BandwidthScheduleProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BandwidthScheduleProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BandwidthScheduleProperties is not found in the empty JSON string", BandwidthScheduleProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BandwidthScheduleProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BandwidthScheduleProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BandwidthScheduleProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("days") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("days").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `days` to be an array in the JSON string but got `%s`", jsonObj.get("days").toString()));
      }
      if (!jsonObj.get("start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start").toString()));
      }
      if (!jsonObj.get("stop").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stop` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stop").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BandwidthScheduleProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BandwidthScheduleProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BandwidthScheduleProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BandwidthScheduleProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<BandwidthScheduleProperties>() {
           @Override
           public void write(JsonWriter out, BandwidthScheduleProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BandwidthScheduleProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BandwidthScheduleProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BandwidthScheduleProperties
   * @throws IOException if the JSON string is invalid with respect to BandwidthScheduleProperties
   */
  public static BandwidthScheduleProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BandwidthScheduleProperties.class);
  }

  /**
   * Convert an instance of BandwidthScheduleProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

