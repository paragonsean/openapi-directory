# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateDownloadProgress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, download_phase: str=None, number_of_updates_downloaded: int=None, number_of_updates_to_download: int=None, percent_complete: int=None, total_bytes_downloaded: float=None, total_bytes_to_download: float=None):
        """UpdateDownloadProgress - a model defined in OpenAPI

        :param download_phase: The download_phase of this UpdateDownloadProgress.
        :param number_of_updates_downloaded: The number_of_updates_downloaded of this UpdateDownloadProgress.
        :param number_of_updates_to_download: The number_of_updates_to_download of this UpdateDownloadProgress.
        :param percent_complete: The percent_complete of this UpdateDownloadProgress.
        :param total_bytes_downloaded: The total_bytes_downloaded of this UpdateDownloadProgress.
        :param total_bytes_to_download: The total_bytes_to_download of this UpdateDownloadProgress.
        """
        self.openapi_types = {
            'download_phase': str,
            'number_of_updates_downloaded': int,
            'number_of_updates_to_download': int,
            'percent_complete': int,
            'total_bytes_downloaded': float,
            'total_bytes_to_download': float
        }

        self.attribute_map = {
            'download_phase': 'downloadPhase',
            'number_of_updates_downloaded': 'numberOfUpdatesDownloaded',
            'number_of_updates_to_download': 'numberOfUpdatesToDownload',
            'percent_complete': 'percentComplete',
            'total_bytes_downloaded': 'totalBytesDownloaded',
            'total_bytes_to_download': 'totalBytesToDownload'
        }

        self._download_phase = download_phase
        self._number_of_updates_downloaded = number_of_updates_downloaded
        self._number_of_updates_to_download = number_of_updates_to_download
        self._percent_complete = percent_complete
        self._total_bytes_downloaded = total_bytes_downloaded
        self._total_bytes_to_download = total_bytes_to_download

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDownloadProgress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDownloadProgress of this UpdateDownloadProgress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def download_phase(self):
        """Gets the download_phase of this UpdateDownloadProgress.

        The download phase.

        :return: The download_phase of this UpdateDownloadProgress.
        :rtype: str
        """
        return self._download_phase

    @download_phase.setter
    def download_phase(self, download_phase):
        """Sets the download_phase of this UpdateDownloadProgress.

        The download phase.

        :param download_phase: The download_phase of this UpdateDownloadProgress.
        :type download_phase: str
        """
        allowed_values = ["Unknown", "Initializing", "Downloading", "Verifying"]  # noqa: E501
        if download_phase not in allowed_values:
            raise ValueError(
                "Invalid value for `download_phase` ({0}), must be one of {1}"
                .format(download_phase, allowed_values)
            )

        self._download_phase = download_phase

    @property
    def number_of_updates_downloaded(self):
        """Gets the number_of_updates_downloaded of this UpdateDownloadProgress.

        Number of updates downloaded.

        :return: The number_of_updates_downloaded of this UpdateDownloadProgress.
        :rtype: int
        """
        return self._number_of_updates_downloaded

    @number_of_updates_downloaded.setter
    def number_of_updates_downloaded(self, number_of_updates_downloaded):
        """Sets the number_of_updates_downloaded of this UpdateDownloadProgress.

        Number of updates downloaded.

        :param number_of_updates_downloaded: The number_of_updates_downloaded of this UpdateDownloadProgress.
        :type number_of_updates_downloaded: int
        """

        self._number_of_updates_downloaded = number_of_updates_downloaded

    @property
    def number_of_updates_to_download(self):
        """Gets the number_of_updates_to_download of this UpdateDownloadProgress.

        Number of updates to download.

        :return: The number_of_updates_to_download of this UpdateDownloadProgress.
        :rtype: int
        """
        return self._number_of_updates_to_download

    @number_of_updates_to_download.setter
    def number_of_updates_to_download(self, number_of_updates_to_download):
        """Sets the number_of_updates_to_download of this UpdateDownloadProgress.

        Number of updates to download.

        :param number_of_updates_to_download: The number_of_updates_to_download of this UpdateDownloadProgress.
        :type number_of_updates_to_download: int
        """

        self._number_of_updates_to_download = number_of_updates_to_download

    @property
    def percent_complete(self):
        """Gets the percent_complete of this UpdateDownloadProgress.

        Percentage of completion.

        :return: The percent_complete of this UpdateDownloadProgress.
        :rtype: int
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this UpdateDownloadProgress.

        Percentage of completion.

        :param percent_complete: The percent_complete of this UpdateDownloadProgress.
        :type percent_complete: int
        """

        self._percent_complete = percent_complete

    @property
    def total_bytes_downloaded(self):
        """Gets the total_bytes_downloaded of this UpdateDownloadProgress.

        Total bytes downloaded.

        :return: The total_bytes_downloaded of this UpdateDownloadProgress.
        :rtype: float
        """
        return self._total_bytes_downloaded

    @total_bytes_downloaded.setter
    def total_bytes_downloaded(self, total_bytes_downloaded):
        """Sets the total_bytes_downloaded of this UpdateDownloadProgress.

        Total bytes downloaded.

        :param total_bytes_downloaded: The total_bytes_downloaded of this UpdateDownloadProgress.
        :type total_bytes_downloaded: float
        """

        self._total_bytes_downloaded = total_bytes_downloaded

    @property
    def total_bytes_to_download(self):
        """Gets the total_bytes_to_download of this UpdateDownloadProgress.

        Total bytes to download.

        :return: The total_bytes_to_download of this UpdateDownloadProgress.
        :rtype: float
        """
        return self._total_bytes_to_download

    @total_bytes_to_download.setter
    def total_bytes_to_download(self, total_bytes_to_download):
        """Sets the total_bytes_to_download of this UpdateDownloadProgress.

        Total bytes to download.

        :param total_bytes_to_download: The total_bytes_to_download of this UpdateDownloadProgress.
        :type total_bytes_to_download: float
        """

        self._total_bytes_to_download = total_bytes_to_download
