# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_dimension_v1 import MetricDimensionV1
from openapi_server import util


class MetricSpecificationV1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_type: str=None, category: str=None, dimensions: List[MetricDimensionV1]=None, display_description: str=None, display_name: str=None, fill_gap_with_zero: bool=None, name: str=None, resource_id_dimension_name_override: str=None, supported_aggregation_types: List[str]=None, supported_time_grain_types: List[str]=None, unit: str=None):
        """MetricSpecificationV1 - a model defined in OpenAPI

        :param aggregation_type: The aggregation_type of this MetricSpecificationV1.
        :param category: The category of this MetricSpecificationV1.
        :param dimensions: The dimensions of this MetricSpecificationV1.
        :param display_description: The display_description of this MetricSpecificationV1.
        :param display_name: The display_name of this MetricSpecificationV1.
        :param fill_gap_with_zero: The fill_gap_with_zero of this MetricSpecificationV1.
        :param name: The name of this MetricSpecificationV1.
        :param resource_id_dimension_name_override: The resource_id_dimension_name_override of this MetricSpecificationV1.
        :param supported_aggregation_types: The supported_aggregation_types of this MetricSpecificationV1.
        :param supported_time_grain_types: The supported_time_grain_types of this MetricSpecificationV1.
        :param unit: The unit of this MetricSpecificationV1.
        """
        self.openapi_types = {
            'aggregation_type': str,
            'category': str,
            'dimensions': List[MetricDimensionV1],
            'display_description': str,
            'display_name': str,
            'fill_gap_with_zero': bool,
            'name': str,
            'resource_id_dimension_name_override': str,
            'supported_aggregation_types': List[str],
            'supported_time_grain_types': List[str],
            'unit': str
        }

        self.attribute_map = {
            'aggregation_type': 'aggregationType',
            'category': 'category',
            'dimensions': 'dimensions',
            'display_description': 'displayDescription',
            'display_name': 'displayName',
            'fill_gap_with_zero': 'fillGapWithZero',
            'name': 'name',
            'resource_id_dimension_name_override': 'resourceIdDimensionNameOverride',
            'supported_aggregation_types': 'supportedAggregationTypes',
            'supported_time_grain_types': 'supportedTimeGrainTypes',
            'unit': 'unit'
        }

        self._aggregation_type = aggregation_type
        self._category = category
        self._dimensions = dimensions
        self._display_description = display_description
        self._display_name = display_name
        self._fill_gap_with_zero = fill_gap_with_zero
        self._name = name
        self._resource_id_dimension_name_override = resource_id_dimension_name_override
        self._supported_aggregation_types = supported_aggregation_types
        self._supported_time_grain_types = supported_time_grain_types
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricSpecificationV1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricSpecification_V1 of this MetricSpecificationV1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_type(self):
        """Gets the aggregation_type of this MetricSpecificationV1.

        Metric aggregation type.

        :return: The aggregation_type of this MetricSpecificationV1.
        :rtype: str
        """
        return self._aggregation_type

    @aggregation_type.setter
    def aggregation_type(self, aggregation_type):
        """Sets the aggregation_type of this MetricSpecificationV1.

        Metric aggregation type.

        :param aggregation_type: The aggregation_type of this MetricSpecificationV1.
        :type aggregation_type: str
        """
        allowed_values = ["NotSpecified", "None", "Average", "Minimum", "Maximum", "Total", "Count"]  # noqa: E501
        if aggregation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation_type` ({0}), must be one of {1}"
                .format(aggregation_type, allowed_values)
            )

        self._aggregation_type = aggregation_type

    @property
    def category(self):
        """Gets the category of this MetricSpecificationV1.

        Metric category.

        :return: The category of this MetricSpecificationV1.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this MetricSpecificationV1.

        Metric category.

        :param category: The category of this MetricSpecificationV1.
        :type category: str
        """
        allowed_values = ["Capacity", "Transaction"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def dimensions(self):
        """Gets the dimensions of this MetricSpecificationV1.

        Metric dimensions, other than default dimension which is resource.

        :return: The dimensions of this MetricSpecificationV1.
        :rtype: List[MetricDimensionV1]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this MetricSpecificationV1.

        Metric dimensions, other than default dimension which is resource.

        :param dimensions: The dimensions of this MetricSpecificationV1.
        :type dimensions: List[MetricDimensionV1]
        """

        self._dimensions = dimensions

    @property
    def display_description(self):
        """Gets the display_description of this MetricSpecificationV1.

        Description of the metric to be displayed.

        :return: The display_description of this MetricSpecificationV1.
        :rtype: str
        """
        return self._display_description

    @display_description.setter
    def display_description(self, display_description):
        """Sets the display_description of this MetricSpecificationV1.

        Description of the metric to be displayed.

        :param display_description: The display_description of this MetricSpecificationV1.
        :type display_description: str
        """

        self._display_description = display_description

    @property
    def display_name(self):
        """Gets the display_name of this MetricSpecificationV1.

        Display name of the metric.

        :return: The display_name of this MetricSpecificationV1.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MetricSpecificationV1.

        Display name of the metric.

        :param display_name: The display_name of this MetricSpecificationV1.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def fill_gap_with_zero(self):
        """Gets the fill_gap_with_zero of this MetricSpecificationV1.

        Set true to fill the gaps with zero.

        :return: The fill_gap_with_zero of this MetricSpecificationV1.
        :rtype: bool
        """
        return self._fill_gap_with_zero

    @fill_gap_with_zero.setter
    def fill_gap_with_zero(self, fill_gap_with_zero):
        """Sets the fill_gap_with_zero of this MetricSpecificationV1.

        Set true to fill the gaps with zero.

        :param fill_gap_with_zero: The fill_gap_with_zero of this MetricSpecificationV1.
        :type fill_gap_with_zero: bool
        """

        self._fill_gap_with_zero = fill_gap_with_zero

    @property
    def name(self):
        """Gets the name of this MetricSpecificationV1.

        Name of the metric.

        :return: The name of this MetricSpecificationV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetricSpecificationV1.

        Name of the metric.

        :param name: The name of this MetricSpecificationV1.
        :type name: str
        """

        self._name = name

    @property
    def resource_id_dimension_name_override(self):
        """Gets the resource_id_dimension_name_override of this MetricSpecificationV1.

        Resource name override.

        :return: The resource_id_dimension_name_override of this MetricSpecificationV1.
        :rtype: str
        """
        return self._resource_id_dimension_name_override

    @resource_id_dimension_name_override.setter
    def resource_id_dimension_name_override(self, resource_id_dimension_name_override):
        """Sets the resource_id_dimension_name_override of this MetricSpecificationV1.

        Resource name override.

        :param resource_id_dimension_name_override: The resource_id_dimension_name_override of this MetricSpecificationV1.
        :type resource_id_dimension_name_override: str
        """

        self._resource_id_dimension_name_override = resource_id_dimension_name_override

    @property
    def supported_aggregation_types(self):
        """Gets the supported_aggregation_types of this MetricSpecificationV1.

        Support metric aggregation type.

        :return: The supported_aggregation_types of this MetricSpecificationV1.
        :rtype: List[str]
        """
        return self._supported_aggregation_types

    @supported_aggregation_types.setter
    def supported_aggregation_types(self, supported_aggregation_types):
        """Sets the supported_aggregation_types of this MetricSpecificationV1.

        Support metric aggregation type.

        :param supported_aggregation_types: The supported_aggregation_types of this MetricSpecificationV1.
        :type supported_aggregation_types: List[str]
        """
        allowed_values = ["NotSpecified", "None", "Average", "Minimum", "Maximum", "Total", "Count"]  # noqa: E501
        if not set(supported_aggregation_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `supported_aggregation_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(supported_aggregation_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._supported_aggregation_types = supported_aggregation_types

    @property
    def supported_time_grain_types(self):
        """Gets the supported_time_grain_types of this MetricSpecificationV1.

        Support granularity of metrics.

        :return: The supported_time_grain_types of this MetricSpecificationV1.
        :rtype: List[str]
        """
        return self._supported_time_grain_types

    @supported_time_grain_types.setter
    def supported_time_grain_types(self, supported_time_grain_types):
        """Sets the supported_time_grain_types of this MetricSpecificationV1.

        Support granularity of metrics.

        :param supported_time_grain_types: The supported_time_grain_types of this MetricSpecificationV1.
        :type supported_time_grain_types: List[str]
        """
        allowed_values = ["PT1M", "PT5M", "PT15M", "PT30M", "PT1H", "PT6H", "PT12H", "PT1D"]  # noqa: E501
        if not set(supported_time_grain_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `supported_time_grain_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(supported_time_grain_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._supported_time_grain_types = supported_time_grain_types

    @property
    def unit(self):
        """Gets the unit of this MetricSpecificationV1.

        Metric units.

        :return: The unit of this MetricSpecificationV1.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this MetricSpecificationV1.

        Metric units.

        :param unit: The unit of this MetricSpecificationV1.
        :type unit: str
        """
        allowed_values = ["NotSpecified", "Percent", "Count", "Seconds", "Milliseconds", "Bytes", "BytesPerSecond", "CountPerSecond"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit
