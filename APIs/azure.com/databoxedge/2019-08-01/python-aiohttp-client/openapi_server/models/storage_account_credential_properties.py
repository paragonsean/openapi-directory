# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asymmetric_encrypted_secret import AsymmetricEncryptedSecret
from openapi_server import util


class StorageAccountCredentialProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_key: AsymmetricEncryptedSecret=None, account_type: str=None, alias: str=None, blob_domain_name: str=None, connection_string: str=None, ssl_status: str=None, storage_account_id: str=None, user_name: str=None):
        """StorageAccountCredentialProperties - a model defined in OpenAPI

        :param account_key: The account_key of this StorageAccountCredentialProperties.
        :param account_type: The account_type of this StorageAccountCredentialProperties.
        :param alias: The alias of this StorageAccountCredentialProperties.
        :param blob_domain_name: The blob_domain_name of this StorageAccountCredentialProperties.
        :param connection_string: The connection_string of this StorageAccountCredentialProperties.
        :param ssl_status: The ssl_status of this StorageAccountCredentialProperties.
        :param storage_account_id: The storage_account_id of this StorageAccountCredentialProperties.
        :param user_name: The user_name of this StorageAccountCredentialProperties.
        """
        self.openapi_types = {
            'account_key': AsymmetricEncryptedSecret,
            'account_type': str,
            'alias': str,
            'blob_domain_name': str,
            'connection_string': str,
            'ssl_status': str,
            'storage_account_id': str,
            'user_name': str
        }

        self.attribute_map = {
            'account_key': 'accountKey',
            'account_type': 'accountType',
            'alias': 'alias',
            'blob_domain_name': 'blobDomainName',
            'connection_string': 'connectionString',
            'ssl_status': 'sslStatus',
            'storage_account_id': 'storageAccountId',
            'user_name': 'userName'
        }

        self._account_key = account_key
        self._account_type = account_type
        self._alias = alias
        self._blob_domain_name = blob_domain_name
        self._connection_string = connection_string
        self._ssl_status = ssl_status
        self._storage_account_id = storage_account_id
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageAccountCredentialProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageAccountCredentialProperties of this StorageAccountCredentialProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_key(self):
        """Gets the account_key of this StorageAccountCredentialProperties.


        :return: The account_key of this StorageAccountCredentialProperties.
        :rtype: AsymmetricEncryptedSecret
        """
        return self._account_key

    @account_key.setter
    def account_key(self, account_key):
        """Sets the account_key of this StorageAccountCredentialProperties.


        :param account_key: The account_key of this StorageAccountCredentialProperties.
        :type account_key: AsymmetricEncryptedSecret
        """

        self._account_key = account_key

    @property
    def account_type(self):
        """Gets the account_type of this StorageAccountCredentialProperties.

        Type of storage accessed on the storage account.

        :return: The account_type of this StorageAccountCredentialProperties.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this StorageAccountCredentialProperties.

        Type of storage accessed on the storage account.

        :param account_type: The account_type of this StorageAccountCredentialProperties.
        :type account_type: str
        """
        allowed_values = ["GeneralPurposeStorage", "BlobStorage"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def alias(self):
        """Gets the alias of this StorageAccountCredentialProperties.

        Alias for the storage account.

        :return: The alias of this StorageAccountCredentialProperties.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this StorageAccountCredentialProperties.

        Alias for the storage account.

        :param alias: The alias of this StorageAccountCredentialProperties.
        :type alias: str
        """
        if alias is None:
            raise ValueError("Invalid value for `alias`, must not be `None`")

        self._alias = alias

    @property
    def blob_domain_name(self):
        """Gets the blob_domain_name of this StorageAccountCredentialProperties.

        Blob end point for private clouds.

        :return: The blob_domain_name of this StorageAccountCredentialProperties.
        :rtype: str
        """
        return self._blob_domain_name

    @blob_domain_name.setter
    def blob_domain_name(self, blob_domain_name):
        """Sets the blob_domain_name of this StorageAccountCredentialProperties.

        Blob end point for private clouds.

        :param blob_domain_name: The blob_domain_name of this StorageAccountCredentialProperties.
        :type blob_domain_name: str
        """

        self._blob_domain_name = blob_domain_name

    @property
    def connection_string(self):
        """Gets the connection_string of this StorageAccountCredentialProperties.

        Connection string for the storage account. Use this string if username and account key are not specified.

        :return: The connection_string of this StorageAccountCredentialProperties.
        :rtype: str
        """
        return self._connection_string

    @connection_string.setter
    def connection_string(self, connection_string):
        """Sets the connection_string of this StorageAccountCredentialProperties.

        Connection string for the storage account. Use this string if username and account key are not specified.

        :param connection_string: The connection_string of this StorageAccountCredentialProperties.
        :type connection_string: str
        """

        self._connection_string = connection_string

    @property
    def ssl_status(self):
        """Gets the ssl_status of this StorageAccountCredentialProperties.

        Signifies whether SSL needs to be enabled or not.

        :return: The ssl_status of this StorageAccountCredentialProperties.
        :rtype: str
        """
        return self._ssl_status

    @ssl_status.setter
    def ssl_status(self, ssl_status):
        """Sets the ssl_status of this StorageAccountCredentialProperties.

        Signifies whether SSL needs to be enabled or not.

        :param ssl_status: The ssl_status of this StorageAccountCredentialProperties.
        :type ssl_status: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if ssl_status not in allowed_values:
            raise ValueError(
                "Invalid value for `ssl_status` ({0}), must be one of {1}"
                .format(ssl_status, allowed_values)
            )

        self._ssl_status = ssl_status

    @property
    def storage_account_id(self):
        """Gets the storage_account_id of this StorageAccountCredentialProperties.

        Id of the storage account.

        :return: The storage_account_id of this StorageAccountCredentialProperties.
        :rtype: str
        """
        return self._storage_account_id

    @storage_account_id.setter
    def storage_account_id(self, storage_account_id):
        """Sets the storage_account_id of this StorageAccountCredentialProperties.

        Id of the storage account.

        :param storage_account_id: The storage_account_id of this StorageAccountCredentialProperties.
        :type storage_account_id: str
        """

        self._storage_account_id = storage_account_id

    @property
    def user_name(self):
        """Gets the user_name of this StorageAccountCredentialProperties.

        Username for the storage account.

        :return: The user_name of this StorageAccountCredentialProperties.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this StorageAccountCredentialProperties.

        Username for the storage account.

        :param user_name: The user_name of this StorageAccountCredentialProperties.
        :type user_name: str
        """

        self._user_name = user_name
