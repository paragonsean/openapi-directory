# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, node_chassis_serial_number: str=None, node_display_name: str=None, node_friendly_software_version: str=None, node_hcs_version: str=None, node_instance_id: str=None, node_serial_number: str=None, node_status: str=None):
        """NodeProperties - a model defined in OpenAPI

        :param node_chassis_serial_number: The node_chassis_serial_number of this NodeProperties.
        :param node_display_name: The node_display_name of this NodeProperties.
        :param node_friendly_software_version: The node_friendly_software_version of this NodeProperties.
        :param node_hcs_version: The node_hcs_version of this NodeProperties.
        :param node_instance_id: The node_instance_id of this NodeProperties.
        :param node_serial_number: The node_serial_number of this NodeProperties.
        :param node_status: The node_status of this NodeProperties.
        """
        self.openapi_types = {
            'node_chassis_serial_number': str,
            'node_display_name': str,
            'node_friendly_software_version': str,
            'node_hcs_version': str,
            'node_instance_id': str,
            'node_serial_number': str,
            'node_status': str
        }

        self.attribute_map = {
            'node_chassis_serial_number': 'nodeChassisSerialNumber',
            'node_display_name': 'nodeDisplayName',
            'node_friendly_software_version': 'nodeFriendlySoftwareVersion',
            'node_hcs_version': 'nodeHcsVersion',
            'node_instance_id': 'nodeInstanceId',
            'node_serial_number': 'nodeSerialNumber',
            'node_status': 'nodeStatus'
        }

        self._node_chassis_serial_number = node_chassis_serial_number
        self._node_display_name = node_display_name
        self._node_friendly_software_version = node_friendly_software_version
        self._node_hcs_version = node_hcs_version
        self._node_instance_id = node_instance_id
        self._node_serial_number = node_serial_number
        self._node_status = node_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeProperties of this NodeProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_chassis_serial_number(self):
        """Gets the node_chassis_serial_number of this NodeProperties.

        Serial number of the Chassis

        :return: The node_chassis_serial_number of this NodeProperties.
        :rtype: str
        """
        return self._node_chassis_serial_number

    @node_chassis_serial_number.setter
    def node_chassis_serial_number(self, node_chassis_serial_number):
        """Sets the node_chassis_serial_number of this NodeProperties.

        Serial number of the Chassis

        :param node_chassis_serial_number: The node_chassis_serial_number of this NodeProperties.
        :type node_chassis_serial_number: str
        """

        self._node_chassis_serial_number = node_chassis_serial_number

    @property
    def node_display_name(self):
        """Gets the node_display_name of this NodeProperties.

        Display Name of the individual node

        :return: The node_display_name of this NodeProperties.
        :rtype: str
        """
        return self._node_display_name

    @node_display_name.setter
    def node_display_name(self, node_display_name):
        """Sets the node_display_name of this NodeProperties.

        Display Name of the individual node

        :param node_display_name: The node_display_name of this NodeProperties.
        :type node_display_name: str
        """

        self._node_display_name = node_display_name

    @property
    def node_friendly_software_version(self):
        """Gets the node_friendly_software_version of this NodeProperties.

        Friendly software version name that is currently installed on the node

        :return: The node_friendly_software_version of this NodeProperties.
        :rtype: str
        """
        return self._node_friendly_software_version

    @node_friendly_software_version.setter
    def node_friendly_software_version(self, node_friendly_software_version):
        """Sets the node_friendly_software_version of this NodeProperties.

        Friendly software version name that is currently installed on the node

        :param node_friendly_software_version: The node_friendly_software_version of this NodeProperties.
        :type node_friendly_software_version: str
        """

        self._node_friendly_software_version = node_friendly_software_version

    @property
    def node_hcs_version(self):
        """Gets the node_hcs_version of this NodeProperties.

        HCS version that is currently installed on the node

        :return: The node_hcs_version of this NodeProperties.
        :rtype: str
        """
        return self._node_hcs_version

    @node_hcs_version.setter
    def node_hcs_version(self, node_hcs_version):
        """Sets the node_hcs_version of this NodeProperties.

        HCS version that is currently installed on the node

        :param node_hcs_version: The node_hcs_version of this NodeProperties.
        :type node_hcs_version: str
        """

        self._node_hcs_version = node_hcs_version

    @property
    def node_instance_id(self):
        """Gets the node_instance_id of this NodeProperties.

        Guid instance id of the node

        :return: The node_instance_id of this NodeProperties.
        :rtype: str
        """
        return self._node_instance_id

    @node_instance_id.setter
    def node_instance_id(self, node_instance_id):
        """Sets the node_instance_id of this NodeProperties.

        Guid instance id of the node

        :param node_instance_id: The node_instance_id of this NodeProperties.
        :type node_instance_id: str
        """

        self._node_instance_id = node_instance_id

    @property
    def node_serial_number(self):
        """Gets the node_serial_number of this NodeProperties.

        Serial number of the individual node

        :return: The node_serial_number of this NodeProperties.
        :rtype: str
        """
        return self._node_serial_number

    @node_serial_number.setter
    def node_serial_number(self, node_serial_number):
        """Sets the node_serial_number of this NodeProperties.

        Serial number of the individual node

        :param node_serial_number: The node_serial_number of this NodeProperties.
        :type node_serial_number: str
        """

        self._node_serial_number = node_serial_number

    @property
    def node_status(self):
        """Gets the node_status of this NodeProperties.

        The current status of the individual node

        :return: The node_status of this NodeProperties.
        :rtype: str
        """
        return self._node_status

    @node_status.setter
    def node_status(self, node_status):
        """Sets the node_status of this NodeProperties.

        The current status of the individual node

        :param node_status: The node_status of this NodeProperties.
        :type node_status: str
        """
        allowed_values = ["Unknown", "Up", "Down", "Rebooting", "ShuttingDown"]  # noqa: E501
        if node_status not in allowed_values:
            raise ValueError(
                "Invalid value for `node_status` ({0}), must be one of {1}"
                .format(node_status, allowed_values)
            )

        self._node_status = node_status
