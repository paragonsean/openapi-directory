# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.io_t_device_info import IoTDeviceInfo
from openapi_server.models.mount_point_map import MountPointMap
from openapi_server import util


class IoTRoleProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host_platform: str=None, io_t_device_details: IoTDeviceInfo=None, io_t_edge_device_details: IoTDeviceInfo=None, role_status: str=None, share_mappings: List[MountPointMap]=None):
        """IoTRoleProperties - a model defined in OpenAPI

        :param host_platform: The host_platform of this IoTRoleProperties.
        :param io_t_device_details: The io_t_device_details of this IoTRoleProperties.
        :param io_t_edge_device_details: The io_t_edge_device_details of this IoTRoleProperties.
        :param role_status: The role_status of this IoTRoleProperties.
        :param share_mappings: The share_mappings of this IoTRoleProperties.
        """
        self.openapi_types = {
            'host_platform': str,
            'io_t_device_details': IoTDeviceInfo,
            'io_t_edge_device_details': IoTDeviceInfo,
            'role_status': str,
            'share_mappings': List[MountPointMap]
        }

        self.attribute_map = {
            'host_platform': 'hostPlatform',
            'io_t_device_details': 'ioTDeviceDetails',
            'io_t_edge_device_details': 'ioTEdgeDeviceDetails',
            'role_status': 'roleStatus',
            'share_mappings': 'shareMappings'
        }

        self._host_platform = host_platform
        self._io_t_device_details = io_t_device_details
        self._io_t_edge_device_details = io_t_edge_device_details
        self._role_status = role_status
        self._share_mappings = share_mappings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IoTRoleProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IoTRoleProperties of this IoTRoleProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host_platform(self):
        """Gets the host_platform of this IoTRoleProperties.

        Host OS supported by the IoT role.

        :return: The host_platform of this IoTRoleProperties.
        :rtype: str
        """
        return self._host_platform

    @host_platform.setter
    def host_platform(self, host_platform):
        """Sets the host_platform of this IoTRoleProperties.

        Host OS supported by the IoT role.

        :param host_platform: The host_platform of this IoTRoleProperties.
        :type host_platform: str
        """
        allowed_values = ["Windows", "Linux"]  # noqa: E501
        if host_platform not in allowed_values:
            raise ValueError(
                "Invalid value for `host_platform` ({0}), must be one of {1}"
                .format(host_platform, allowed_values)
            )

        self._host_platform = host_platform

    @property
    def io_t_device_details(self):
        """Gets the io_t_device_details of this IoTRoleProperties.


        :return: The io_t_device_details of this IoTRoleProperties.
        :rtype: IoTDeviceInfo
        """
        return self._io_t_device_details

    @io_t_device_details.setter
    def io_t_device_details(self, io_t_device_details):
        """Sets the io_t_device_details of this IoTRoleProperties.


        :param io_t_device_details: The io_t_device_details of this IoTRoleProperties.
        :type io_t_device_details: IoTDeviceInfo
        """
        if io_t_device_details is None:
            raise ValueError("Invalid value for `io_t_device_details`, must not be `None`")

        self._io_t_device_details = io_t_device_details

    @property
    def io_t_edge_device_details(self):
        """Gets the io_t_edge_device_details of this IoTRoleProperties.


        :return: The io_t_edge_device_details of this IoTRoleProperties.
        :rtype: IoTDeviceInfo
        """
        return self._io_t_edge_device_details

    @io_t_edge_device_details.setter
    def io_t_edge_device_details(self, io_t_edge_device_details):
        """Sets the io_t_edge_device_details of this IoTRoleProperties.


        :param io_t_edge_device_details: The io_t_edge_device_details of this IoTRoleProperties.
        :type io_t_edge_device_details: IoTDeviceInfo
        """
        if io_t_edge_device_details is None:
            raise ValueError("Invalid value for `io_t_edge_device_details`, must not be `None`")

        self._io_t_edge_device_details = io_t_edge_device_details

    @property
    def role_status(self):
        """Gets the role_status of this IoTRoleProperties.

        Role status.

        :return: The role_status of this IoTRoleProperties.
        :rtype: str
        """
        return self._role_status

    @role_status.setter
    def role_status(self, role_status):
        """Sets the role_status of this IoTRoleProperties.

        Role status.

        :param role_status: The role_status of this IoTRoleProperties.
        :type role_status: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if role_status not in allowed_values:
            raise ValueError(
                "Invalid value for `role_status` ({0}), must be one of {1}"
                .format(role_status, allowed_values)
            )

        self._role_status = role_status

    @property
    def share_mappings(self):
        """Gets the share_mappings of this IoTRoleProperties.

        Mount points of shares in role(s).

        :return: The share_mappings of this IoTRoleProperties.
        :rtype: List[MountPointMap]
        """
        return self._share_mappings

    @share_mappings.setter
    def share_mappings(self, share_mappings):
        """Sets the share_mappings of this IoTRoleProperties.

        Mount points of shares in role(s).

        :param share_mappings: The share_mappings of this IoTRoleProperties.
        :type share_mappings: List[MountPointMap]
        """

        self._share_mappings = share_mappings
