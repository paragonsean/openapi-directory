# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sku_restriction_info import SkuRestrictionInfo
from openapi_server import util


class SkuRestriction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reason_code: str=None, restriction_info: SkuRestrictionInfo=None, type: str=None, values: List[str]=None):
        """SkuRestriction - a model defined in OpenAPI

        :param reason_code: The reason_code of this SkuRestriction.
        :param restriction_info: The restriction_info of this SkuRestriction.
        :param type: The type of this SkuRestriction.
        :param values: The values of this SkuRestriction.
        """
        self.openapi_types = {
            'reason_code': str,
            'restriction_info': SkuRestrictionInfo,
            'type': str,
            'values': List[str]
        }

        self.attribute_map = {
            'reason_code': 'reasonCode',
            'restriction_info': 'restrictionInfo',
            'type': 'type',
            'values': 'values'
        }

        self._reason_code = reason_code
        self._restriction_info = restriction_info
        self._type = type
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SkuRestriction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SkuRestriction of this SkuRestriction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reason_code(self):
        """Gets the reason_code of this SkuRestriction.

        The SKU restriction reason.

        :return: The reason_code of this SkuRestriction.
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this SkuRestriction.

        The SKU restriction reason.

        :param reason_code: The reason_code of this SkuRestriction.
        :type reason_code: str
        """
        allowed_values = ["NotAvailableForSubscription", "QuotaId"]  # noqa: E501
        if reason_code not in allowed_values:
            raise ValueError(
                "Invalid value for `reason_code` ({0}), must be one of {1}"
                .format(reason_code, allowed_values)
            )

        self._reason_code = reason_code

    @property
    def restriction_info(self):
        """Gets the restriction_info of this SkuRestriction.


        :return: The restriction_info of this SkuRestriction.
        :rtype: SkuRestrictionInfo
        """
        return self._restriction_info

    @restriction_info.setter
    def restriction_info(self, restriction_info):
        """Sets the restriction_info of this SkuRestriction.


        :param restriction_info: The restriction_info of this SkuRestriction.
        :type restriction_info: SkuRestrictionInfo
        """

        self._restriction_info = restriction_info

    @property
    def type(self):
        """Gets the type of this SkuRestriction.

        The type of the restriction.

        :return: The type of this SkuRestriction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SkuRestriction.

        The type of the restriction.

        :param type: The type of this SkuRestriction.
        :type type: str
        """

        self._type = type

    @property
    def values(self):
        """Gets the values of this SkuRestriction.

        The locations where sku is restricted.

        :return: The values of this SkuRestriction.
        :rtype: List[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this SkuRestriction.

        The locations where sku is restricted.

        :param values: The values of this SkuRestriction.
        :type values: List[str]
        """

        self._values = values
