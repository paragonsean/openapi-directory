# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.refresh_details import RefreshDetails
from openapi_server import util


class ContainerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_status: str=None, created_date_time: datetime=None, data_format: str=None, refresh_details: RefreshDetails=None):
        """ContainerProperties - a model defined in OpenAPI

        :param container_status: The container_status of this ContainerProperties.
        :param created_date_time: The created_date_time of this ContainerProperties.
        :param data_format: The data_format of this ContainerProperties.
        :param refresh_details: The refresh_details of this ContainerProperties.
        """
        self.openapi_types = {
            'container_status': str,
            'created_date_time': datetime,
            'data_format': str,
            'refresh_details': RefreshDetails
        }

        self.attribute_map = {
            'container_status': 'containerStatus',
            'created_date_time': 'createdDateTime',
            'data_format': 'dataFormat',
            'refresh_details': 'refreshDetails'
        }

        self._container_status = container_status
        self._created_date_time = created_date_time
        self._data_format = data_format
        self._refresh_details = refresh_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContainerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContainerProperties of this ContainerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_status(self):
        """Gets the container_status of this ContainerProperties.

        Current status of the container.

        :return: The container_status of this ContainerProperties.
        :rtype: str
        """
        return self._container_status

    @container_status.setter
    def container_status(self, container_status):
        """Sets the container_status of this ContainerProperties.

        Current status of the container.

        :param container_status: The container_status of this ContainerProperties.
        :type container_status: str
        """
        allowed_values = ["OK", "Offline", "Unknown", "Updating", "NeedsAttention"]  # noqa: E501
        if container_status not in allowed_values:
            raise ValueError(
                "Invalid value for `container_status` ({0}), must be one of {1}"
                .format(container_status, allowed_values)
            )

        self._container_status = container_status

    @property
    def created_date_time(self):
        """Gets the created_date_time of this ContainerProperties.

        The UTC time when container got created.

        :return: The created_date_time of this ContainerProperties.
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this ContainerProperties.

        The UTC time when container got created.

        :param created_date_time: The created_date_time of this ContainerProperties.
        :type created_date_time: datetime
        """

        self._created_date_time = created_date_time

    @property
    def data_format(self):
        """Gets the data_format of this ContainerProperties.

        DataFormat for Container

        :return: The data_format of this ContainerProperties.
        :rtype: str
        """
        return self._data_format

    @data_format.setter
    def data_format(self, data_format):
        """Sets the data_format of this ContainerProperties.

        DataFormat for Container

        :param data_format: The data_format of this ContainerProperties.
        :type data_format: str
        """
        allowed_values = ["BlockBlob", "PageBlob", "AzureFile"]  # noqa: E501
        if data_format not in allowed_values:
            raise ValueError(
                "Invalid value for `data_format` ({0}), must be one of {1}"
                .format(data_format, allowed_values)
            )

        self._data_format = data_format

    @property
    def refresh_details(self):
        """Gets the refresh_details of this ContainerProperties.


        :return: The refresh_details of this ContainerProperties.
        :rtype: RefreshDetails
        """
        return self._refresh_details

    @refresh_details.setter
    def refresh_details(self, refresh_details):
        """Sets the refresh_details of this ContainerProperties.


        :param refresh_details: The refresh_details of this ContainerProperties.
        :type refresh_details: RefreshDetails
        """

        self._refresh_details = refresh_details
