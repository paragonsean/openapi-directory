# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StorageAccountProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blob_endpoint: str=None, container_count: int=None, data_policy: str=None, description: str=None, storage_account_credential_id: str=None, storage_account_status: str=None):
        """StorageAccountProperties - a model defined in OpenAPI

        :param blob_endpoint: The blob_endpoint of this StorageAccountProperties.
        :param container_count: The container_count of this StorageAccountProperties.
        :param data_policy: The data_policy of this StorageAccountProperties.
        :param description: The description of this StorageAccountProperties.
        :param storage_account_credential_id: The storage_account_credential_id of this StorageAccountProperties.
        :param storage_account_status: The storage_account_status of this StorageAccountProperties.
        """
        self.openapi_types = {
            'blob_endpoint': str,
            'container_count': int,
            'data_policy': str,
            'description': str,
            'storage_account_credential_id': str,
            'storage_account_status': str
        }

        self.attribute_map = {
            'blob_endpoint': 'blobEndpoint',
            'container_count': 'containerCount',
            'data_policy': 'dataPolicy',
            'description': 'description',
            'storage_account_credential_id': 'storageAccountCredentialId',
            'storage_account_status': 'storageAccountStatus'
        }

        self._blob_endpoint = blob_endpoint
        self._container_count = container_count
        self._data_policy = data_policy
        self._description = description
        self._storage_account_credential_id = storage_account_credential_id
        self._storage_account_status = storage_account_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageAccountProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageAccountProperties of this StorageAccountProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blob_endpoint(self):
        """Gets the blob_endpoint of this StorageAccountProperties.

        BlobEndpoint of Storage Account

        :return: The blob_endpoint of this StorageAccountProperties.
        :rtype: str
        """
        return self._blob_endpoint

    @blob_endpoint.setter
    def blob_endpoint(self, blob_endpoint):
        """Sets the blob_endpoint of this StorageAccountProperties.

        BlobEndpoint of Storage Account

        :param blob_endpoint: The blob_endpoint of this StorageAccountProperties.
        :type blob_endpoint: str
        """

        self._blob_endpoint = blob_endpoint

    @property
    def container_count(self):
        """Gets the container_count of this StorageAccountProperties.

        The Container Count. Present only for Storage Accounts with DataPolicy set to Cloud.

        :return: The container_count of this StorageAccountProperties.
        :rtype: int
        """
        return self._container_count

    @container_count.setter
    def container_count(self, container_count):
        """Sets the container_count of this StorageAccountProperties.

        The Container Count. Present only for Storage Accounts with DataPolicy set to Cloud.

        :param container_count: The container_count of this StorageAccountProperties.
        :type container_count: int
        """

        self._container_count = container_count

    @property
    def data_policy(self):
        """Gets the data_policy of this StorageAccountProperties.

        Data policy of the storage Account.

        :return: The data_policy of this StorageAccountProperties.
        :rtype: str
        """
        return self._data_policy

    @data_policy.setter
    def data_policy(self, data_policy):
        """Sets the data_policy of this StorageAccountProperties.

        Data policy of the storage Account.

        :param data_policy: The data_policy of this StorageAccountProperties.
        :type data_policy: str
        """
        allowed_values = ["Cloud", "Local"]  # noqa: E501
        if data_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `data_policy` ({0}), must be one of {1}"
                .format(data_policy, allowed_values)
            )

        self._data_policy = data_policy

    @property
    def description(self):
        """Gets the description of this StorageAccountProperties.

        Description for the storage Account.

        :return: The description of this StorageAccountProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StorageAccountProperties.

        Description for the storage Account.

        :param description: The description of this StorageAccountProperties.
        :type description: str
        """

        self._description = description

    @property
    def storage_account_credential_id(self):
        """Gets the storage_account_credential_id of this StorageAccountProperties.

        Storage Account Credential Id

        :return: The storage_account_credential_id of this StorageAccountProperties.
        :rtype: str
        """
        return self._storage_account_credential_id

    @storage_account_credential_id.setter
    def storage_account_credential_id(self, storage_account_credential_id):
        """Sets the storage_account_credential_id of this StorageAccountProperties.

        Storage Account Credential Id

        :param storage_account_credential_id: The storage_account_credential_id of this StorageAccountProperties.
        :type storage_account_credential_id: str
        """

        self._storage_account_credential_id = storage_account_credential_id

    @property
    def storage_account_status(self):
        """Gets the storage_account_status of this StorageAccountProperties.

        Current status of the storage account

        :return: The storage_account_status of this StorageAccountProperties.
        :rtype: str
        """
        return self._storage_account_status

    @storage_account_status.setter
    def storage_account_status(self, storage_account_status):
        """Sets the storage_account_status of this StorageAccountProperties.

        Current status of the storage account

        :param storage_account_status: The storage_account_status of this StorageAccountProperties.
        :type storage_account_status: str
        """
        allowed_values = ["OK", "Offline", "Unknown", "Updating", "NeedsAttention"]  # noqa: E501
        if storage_account_status not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_account_status` ({0}), must be one of {1}"
                .format(storage_account_status, allowed_values)
            )

        self._storage_account_status = storage_account_status
