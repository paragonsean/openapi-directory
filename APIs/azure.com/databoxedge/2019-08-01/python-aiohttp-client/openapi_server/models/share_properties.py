# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.azure_container_info import AzureContainerInfo
from openapi_server.models.client_access_right import ClientAccessRight
from openapi_server.models.mount_point_map import MountPointMap
from openapi_server.models.refresh_details import RefreshDetails
from openapi_server.models.user_access_right import UserAccessRight
from openapi_server import util


class ShareProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_protocol: str=None, azure_container_info: AzureContainerInfo=None, client_access_rights: List[ClientAccessRight]=None, data_policy: str=None, description: str=None, monitoring_status: str=None, refresh_details: RefreshDetails=None, share_mappings: List[MountPointMap]=None, share_status: str=None, user_access_rights: List[UserAccessRight]=None):
        """ShareProperties - a model defined in OpenAPI

        :param access_protocol: The access_protocol of this ShareProperties.
        :param azure_container_info: The azure_container_info of this ShareProperties.
        :param client_access_rights: The client_access_rights of this ShareProperties.
        :param data_policy: The data_policy of this ShareProperties.
        :param description: The description of this ShareProperties.
        :param monitoring_status: The monitoring_status of this ShareProperties.
        :param refresh_details: The refresh_details of this ShareProperties.
        :param share_mappings: The share_mappings of this ShareProperties.
        :param share_status: The share_status of this ShareProperties.
        :param user_access_rights: The user_access_rights of this ShareProperties.
        """
        self.openapi_types = {
            'access_protocol': str,
            'azure_container_info': AzureContainerInfo,
            'client_access_rights': List[ClientAccessRight],
            'data_policy': str,
            'description': str,
            'monitoring_status': str,
            'refresh_details': RefreshDetails,
            'share_mappings': List[MountPointMap],
            'share_status': str,
            'user_access_rights': List[UserAccessRight]
        }

        self.attribute_map = {
            'access_protocol': 'accessProtocol',
            'azure_container_info': 'azureContainerInfo',
            'client_access_rights': 'clientAccessRights',
            'data_policy': 'dataPolicy',
            'description': 'description',
            'monitoring_status': 'monitoringStatus',
            'refresh_details': 'refreshDetails',
            'share_mappings': 'shareMappings',
            'share_status': 'shareStatus',
            'user_access_rights': 'userAccessRights'
        }

        self._access_protocol = access_protocol
        self._azure_container_info = azure_container_info
        self._client_access_rights = client_access_rights
        self._data_policy = data_policy
        self._description = description
        self._monitoring_status = monitoring_status
        self._refresh_details = refresh_details
        self._share_mappings = share_mappings
        self._share_status = share_status
        self._user_access_rights = user_access_rights

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShareProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShareProperties of this ShareProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_protocol(self):
        """Gets the access_protocol of this ShareProperties.

        Access protocol to be used by the share.

        :return: The access_protocol of this ShareProperties.
        :rtype: str
        """
        return self._access_protocol

    @access_protocol.setter
    def access_protocol(self, access_protocol):
        """Sets the access_protocol of this ShareProperties.

        Access protocol to be used by the share.

        :param access_protocol: The access_protocol of this ShareProperties.
        :type access_protocol: str
        """
        allowed_values = ["SMB", "NFS"]  # noqa: E501
        if access_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `access_protocol` ({0}), must be one of {1}"
                .format(access_protocol, allowed_values)
            )

        self._access_protocol = access_protocol

    @property
    def azure_container_info(self):
        """Gets the azure_container_info of this ShareProperties.


        :return: The azure_container_info of this ShareProperties.
        :rtype: AzureContainerInfo
        """
        return self._azure_container_info

    @azure_container_info.setter
    def azure_container_info(self, azure_container_info):
        """Sets the azure_container_info of this ShareProperties.


        :param azure_container_info: The azure_container_info of this ShareProperties.
        :type azure_container_info: AzureContainerInfo
        """

        self._azure_container_info = azure_container_info

    @property
    def client_access_rights(self):
        """Gets the client_access_rights of this ShareProperties.

        List of IP addresses and corresponding access rights on the share(required for NFS protocol).

        :return: The client_access_rights of this ShareProperties.
        :rtype: List[ClientAccessRight]
        """
        return self._client_access_rights

    @client_access_rights.setter
    def client_access_rights(self, client_access_rights):
        """Sets the client_access_rights of this ShareProperties.

        List of IP addresses and corresponding access rights on the share(required for NFS protocol).

        :param client_access_rights: The client_access_rights of this ShareProperties.
        :type client_access_rights: List[ClientAccessRight]
        """

        self._client_access_rights = client_access_rights

    @property
    def data_policy(self):
        """Gets the data_policy of this ShareProperties.

        Data policy of the share.

        :return: The data_policy of this ShareProperties.
        :rtype: str
        """
        return self._data_policy

    @data_policy.setter
    def data_policy(self, data_policy):
        """Sets the data_policy of this ShareProperties.

        Data policy of the share.

        :param data_policy: The data_policy of this ShareProperties.
        :type data_policy: str
        """
        allowed_values = ["Cloud", "Local"]  # noqa: E501
        if data_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `data_policy` ({0}), must be one of {1}"
                .format(data_policy, allowed_values)
            )

        self._data_policy = data_policy

    @property
    def description(self):
        """Gets the description of this ShareProperties.

        Description for the share.

        :return: The description of this ShareProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ShareProperties.

        Description for the share.

        :param description: The description of this ShareProperties.
        :type description: str
        """

        self._description = description

    @property
    def monitoring_status(self):
        """Gets the monitoring_status of this ShareProperties.

        Current monitoring status of the share.

        :return: The monitoring_status of this ShareProperties.
        :rtype: str
        """
        return self._monitoring_status

    @monitoring_status.setter
    def monitoring_status(self, monitoring_status):
        """Sets the monitoring_status of this ShareProperties.

        Current monitoring status of the share.

        :param monitoring_status: The monitoring_status of this ShareProperties.
        :type monitoring_status: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if monitoring_status not in allowed_values:
            raise ValueError(
                "Invalid value for `monitoring_status` ({0}), must be one of {1}"
                .format(monitoring_status, allowed_values)
            )

        self._monitoring_status = monitoring_status

    @property
    def refresh_details(self):
        """Gets the refresh_details of this ShareProperties.


        :return: The refresh_details of this ShareProperties.
        :rtype: RefreshDetails
        """
        return self._refresh_details

    @refresh_details.setter
    def refresh_details(self, refresh_details):
        """Sets the refresh_details of this ShareProperties.


        :param refresh_details: The refresh_details of this ShareProperties.
        :type refresh_details: RefreshDetails
        """

        self._refresh_details = refresh_details

    @property
    def share_mappings(self):
        """Gets the share_mappings of this ShareProperties.

        Share mount point to the role.

        :return: The share_mappings of this ShareProperties.
        :rtype: List[MountPointMap]
        """
        return self._share_mappings

    @share_mappings.setter
    def share_mappings(self, share_mappings):
        """Sets the share_mappings of this ShareProperties.

        Share mount point to the role.

        :param share_mappings: The share_mappings of this ShareProperties.
        :type share_mappings: List[MountPointMap]
        """

        self._share_mappings = share_mappings

    @property
    def share_status(self):
        """Gets the share_status of this ShareProperties.

        Current status of the share.

        :return: The share_status of this ShareProperties.
        :rtype: str
        """
        return self._share_status

    @share_status.setter
    def share_status(self, share_status):
        """Sets the share_status of this ShareProperties.

        Current status of the share.

        :param share_status: The share_status of this ShareProperties.
        :type share_status: str
        """
        allowed_values = ["Offline", "Unknown", "OK", "Updating", "NeedsAttention"]  # noqa: E501
        if share_status not in allowed_values:
            raise ValueError(
                "Invalid value for `share_status` ({0}), must be one of {1}"
                .format(share_status, allowed_values)
            )

        self._share_status = share_status

    @property
    def user_access_rights(self):
        """Gets the user_access_rights of this ShareProperties.

        Mapping of users and corresponding access rights on the share (required for SMB protocol).

        :return: The user_access_rights of this ShareProperties.
        :rtype: List[UserAccessRight]
        """
        return self._user_access_rights

    @user_access_rights.setter
    def user_access_rights(self, user_access_rights):
        """Sets the user_access_rights of this ShareProperties.

        Mapping of users and corresponding access rights on the share (required for SMB protocol).

        :param user_access_rights: The user_access_rights of this ShareProperties.
        :type user_access_rights: List[UserAccessRight]
        """

        self._user_access_rights = user_access_rights
