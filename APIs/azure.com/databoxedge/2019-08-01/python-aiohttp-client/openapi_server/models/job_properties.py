# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_download_progress import UpdateDownloadProgress
from openapi_server.models.update_install_progress import UpdateInstallProgress
from openapi_server import util


class JobProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_stage: str=None, download_progress: UpdateDownloadProgress=None, error_manifest_file: str=None, folder: str=None, install_progress: UpdateInstallProgress=None, job_type: str=None, refreshed_entity_id: str=None, total_refresh_errors: int=None):
        """JobProperties - a model defined in OpenAPI

        :param current_stage: The current_stage of this JobProperties.
        :param download_progress: The download_progress of this JobProperties.
        :param error_manifest_file: The error_manifest_file of this JobProperties.
        :param folder: The folder of this JobProperties.
        :param install_progress: The install_progress of this JobProperties.
        :param job_type: The job_type of this JobProperties.
        :param refreshed_entity_id: The refreshed_entity_id of this JobProperties.
        :param total_refresh_errors: The total_refresh_errors of this JobProperties.
        """
        self.openapi_types = {
            'current_stage': str,
            'download_progress': UpdateDownloadProgress,
            'error_manifest_file': str,
            'folder': str,
            'install_progress': UpdateInstallProgress,
            'job_type': str,
            'refreshed_entity_id': str,
            'total_refresh_errors': int
        }

        self.attribute_map = {
            'current_stage': 'currentStage',
            'download_progress': 'downloadProgress',
            'error_manifest_file': 'errorManifestFile',
            'folder': 'folder',
            'install_progress': 'installProgress',
            'job_type': 'jobType',
            'refreshed_entity_id': 'refreshedEntityId',
            'total_refresh_errors': 'totalRefreshErrors'
        }

        self._current_stage = current_stage
        self._download_progress = download_progress
        self._error_manifest_file = error_manifest_file
        self._folder = folder
        self._install_progress = install_progress
        self._job_type = job_type
        self._refreshed_entity_id = refreshed_entity_id
        self._total_refresh_errors = total_refresh_errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobProperties of this JobProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_stage(self):
        """Gets the current_stage of this JobProperties.

        Current stage of the update operation.

        :return: The current_stage of this JobProperties.
        :rtype: str
        """
        return self._current_stage

    @current_stage.setter
    def current_stage(self, current_stage):
        """Sets the current_stage of this JobProperties.

        Current stage of the update operation.

        :param current_stage: The current_stage of this JobProperties.
        :type current_stage: str
        """
        allowed_values = ["Unknown", "Initial", "ScanStarted", "ScanComplete", "ScanFailed", "DownloadStarted", "DownloadComplete", "DownloadFailed", "InstallStarted", "InstallComplete", "InstallFailed", "RebootInitiated", "Success", "Failure", "RescanStarted", "RescanComplete", "RescanFailed"]  # noqa: E501
        if current_stage not in allowed_values:
            raise ValueError(
                "Invalid value for `current_stage` ({0}), must be one of {1}"
                .format(current_stage, allowed_values)
            )

        self._current_stage = current_stage

    @property
    def download_progress(self):
        """Gets the download_progress of this JobProperties.


        :return: The download_progress of this JobProperties.
        :rtype: UpdateDownloadProgress
        """
        return self._download_progress

    @download_progress.setter
    def download_progress(self, download_progress):
        """Sets the download_progress of this JobProperties.


        :param download_progress: The download_progress of this JobProperties.
        :type download_progress: UpdateDownloadProgress
        """

        self._download_progress = download_progress

    @property
    def error_manifest_file(self):
        """Gets the error_manifest_file of this JobProperties.

        Local share/remote container relative path to the error manifest file of the refresh.

        :return: The error_manifest_file of this JobProperties.
        :rtype: str
        """
        return self._error_manifest_file

    @error_manifest_file.setter
    def error_manifest_file(self, error_manifest_file):
        """Sets the error_manifest_file of this JobProperties.

        Local share/remote container relative path to the error manifest file of the refresh.

        :param error_manifest_file: The error_manifest_file of this JobProperties.
        :type error_manifest_file: str
        """

        self._error_manifest_file = error_manifest_file

    @property
    def folder(self):
        """Gets the folder of this JobProperties.

        If only subfolders need to be refreshed, then the subfolder path inside the share or container. (The path is empty if there are no subfolders.)

        :return: The folder of this JobProperties.
        :rtype: str
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this JobProperties.

        If only subfolders need to be refreshed, then the subfolder path inside the share or container. (The path is empty if there are no subfolders.)

        :param folder: The folder of this JobProperties.
        :type folder: str
        """

        self._folder = folder

    @property
    def install_progress(self):
        """Gets the install_progress of this JobProperties.


        :return: The install_progress of this JobProperties.
        :rtype: UpdateInstallProgress
        """
        return self._install_progress

    @install_progress.setter
    def install_progress(self, install_progress):
        """Sets the install_progress of this JobProperties.


        :param install_progress: The install_progress of this JobProperties.
        :type install_progress: UpdateInstallProgress
        """

        self._install_progress = install_progress

    @property
    def job_type(self):
        """Gets the job_type of this JobProperties.

        The type of the job.

        :return: The job_type of this JobProperties.
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this JobProperties.

        The type of the job.

        :param job_type: The job_type of this JobProperties.
        :type job_type: str
        """
        allowed_values = ["Invalid", "ScanForUpdates", "DownloadUpdates", "InstallUpdates", "RefreshShare", "RefreshContainer"]  # noqa: E501
        if job_type not in allowed_values:
            raise ValueError(
                "Invalid value for `job_type` ({0}), must be one of {1}"
                .format(job_type, allowed_values)
            )

        self._job_type = job_type

    @property
    def refreshed_entity_id(self):
        """Gets the refreshed_entity_id of this JobProperties.

        ARM ID of the entity that was refreshed.

        :return: The refreshed_entity_id of this JobProperties.
        :rtype: str
        """
        return self._refreshed_entity_id

    @refreshed_entity_id.setter
    def refreshed_entity_id(self, refreshed_entity_id):
        """Sets the refreshed_entity_id of this JobProperties.

        ARM ID of the entity that was refreshed.

        :param refreshed_entity_id: The refreshed_entity_id of this JobProperties.
        :type refreshed_entity_id: str
        """

        self._refreshed_entity_id = refreshed_entity_id

    @property
    def total_refresh_errors(self):
        """Gets the total_refresh_errors of this JobProperties.

        Total number of errors encountered during the refresh process.

        :return: The total_refresh_errors of this JobProperties.
        :rtype: int
        """
        return self._total_refresh_errors

    @total_refresh_errors.setter
    def total_refresh_errors(self, total_refresh_errors):
        """Sets the total_refresh_errors of this JobProperties.

        Total number of errors encountered during the refresh process.

        :param total_refresh_errors: The total_refresh_errors of this JobProperties.
        :type total_refresh_errors: int
        """

        self._total_refresh_errors = total_refresh_errors
