# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MountPointMap(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mount_point: str=None, role_id: str=None, role_type: str=None, share_id: str=None):
        """MountPointMap - a model defined in OpenAPI

        :param mount_point: The mount_point of this MountPointMap.
        :param role_id: The role_id of this MountPointMap.
        :param role_type: The role_type of this MountPointMap.
        :param share_id: The share_id of this MountPointMap.
        """
        self.openapi_types = {
            'mount_point': str,
            'role_id': str,
            'role_type': str,
            'share_id': str
        }

        self.attribute_map = {
            'mount_point': 'mountPoint',
            'role_id': 'roleId',
            'role_type': 'roleType',
            'share_id': 'shareId'
        }

        self._mount_point = mount_point
        self._role_id = role_id
        self._role_type = role_type
        self._share_id = share_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MountPointMap':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MountPointMap of this MountPointMap.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mount_point(self):
        """Gets the mount_point of this MountPointMap.

        Mount point for the share.

        :return: The mount_point of this MountPointMap.
        :rtype: str
        """
        return self._mount_point

    @mount_point.setter
    def mount_point(self, mount_point):
        """Sets the mount_point of this MountPointMap.

        Mount point for the share.

        :param mount_point: The mount_point of this MountPointMap.
        :type mount_point: str
        """

        self._mount_point = mount_point

    @property
    def role_id(self):
        """Gets the role_id of this MountPointMap.

        ID of the role to which share is mounted.

        :return: The role_id of this MountPointMap.
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this MountPointMap.

        ID of the role to which share is mounted.

        :param role_id: The role_id of this MountPointMap.
        :type role_id: str
        """

        self._role_id = role_id

    @property
    def role_type(self):
        """Gets the role_type of this MountPointMap.

        Role type.

        :return: The role_type of this MountPointMap.
        :rtype: str
        """
        return self._role_type

    @role_type.setter
    def role_type(self, role_type):
        """Sets the role_type of this MountPointMap.

        Role type.

        :param role_type: The role_type of this MountPointMap.
        :type role_type: str
        """
        allowed_values = ["IOT", "ASA", "Functions", "Cognitive"]  # noqa: E501
        if role_type not in allowed_values:
            raise ValueError(
                "Invalid value for `role_type` ({0}), must be one of {1}"
                .format(role_type, allowed_values)
            )

        self._role_type = role_type

    @property
    def share_id(self):
        """Gets the share_id of this MountPointMap.

        ID of the share mounted to the role VM.

        :return: The share_id of this MountPointMap.
        :rtype: str
        """
        return self._share_id

    @share_id.setter
    def share_id(self, share_id):
        """Sets the share_id of this MountPointMap.

        ID of the share mounted to the role VM.

        :param share_id: The share_id of this MountPointMap.
        :type share_id: str
        """
        if share_id is None:
            raise ValueError("Invalid value for `share_id`, must not be `None`")

        self._share_id = share_id
