/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodeProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodeProperties::OAINodeProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodeProperties::OAINodeProperties() {
    this->initializeModel();
}

OAINodeProperties::~OAINodeProperties() {}

void OAINodeProperties::initializeModel() {

    m_node_chassis_serial_number_isSet = false;
    m_node_chassis_serial_number_isValid = false;

    m_node_display_name_isSet = false;
    m_node_display_name_isValid = false;

    m_node_friendly_software_version_isSet = false;
    m_node_friendly_software_version_isValid = false;

    m_node_hcs_version_isSet = false;
    m_node_hcs_version_isValid = false;

    m_node_instance_id_isSet = false;
    m_node_instance_id_isValid = false;

    m_node_serial_number_isSet = false;
    m_node_serial_number_isValid = false;

    m_node_status_isSet = false;
    m_node_status_isValid = false;
}

void OAINodeProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodeProperties::fromJsonObject(QJsonObject json) {

    m_node_chassis_serial_number_isValid = ::OpenAPI::fromJsonValue(m_node_chassis_serial_number, json[QString("nodeChassisSerialNumber")]);
    m_node_chassis_serial_number_isSet = !json[QString("nodeChassisSerialNumber")].isNull() && m_node_chassis_serial_number_isValid;

    m_node_display_name_isValid = ::OpenAPI::fromJsonValue(m_node_display_name, json[QString("nodeDisplayName")]);
    m_node_display_name_isSet = !json[QString("nodeDisplayName")].isNull() && m_node_display_name_isValid;

    m_node_friendly_software_version_isValid = ::OpenAPI::fromJsonValue(m_node_friendly_software_version, json[QString("nodeFriendlySoftwareVersion")]);
    m_node_friendly_software_version_isSet = !json[QString("nodeFriendlySoftwareVersion")].isNull() && m_node_friendly_software_version_isValid;

    m_node_hcs_version_isValid = ::OpenAPI::fromJsonValue(m_node_hcs_version, json[QString("nodeHcsVersion")]);
    m_node_hcs_version_isSet = !json[QString("nodeHcsVersion")].isNull() && m_node_hcs_version_isValid;

    m_node_instance_id_isValid = ::OpenAPI::fromJsonValue(m_node_instance_id, json[QString("nodeInstanceId")]);
    m_node_instance_id_isSet = !json[QString("nodeInstanceId")].isNull() && m_node_instance_id_isValid;

    m_node_serial_number_isValid = ::OpenAPI::fromJsonValue(m_node_serial_number, json[QString("nodeSerialNumber")]);
    m_node_serial_number_isSet = !json[QString("nodeSerialNumber")].isNull() && m_node_serial_number_isValid;

    m_node_status_isValid = ::OpenAPI::fromJsonValue(m_node_status, json[QString("nodeStatus")]);
    m_node_status_isSet = !json[QString("nodeStatus")].isNull() && m_node_status_isValid;
}

QString OAINodeProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodeProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_node_chassis_serial_number_isSet) {
        obj.insert(QString("nodeChassisSerialNumber"), ::OpenAPI::toJsonValue(m_node_chassis_serial_number));
    }
    if (m_node_display_name_isSet) {
        obj.insert(QString("nodeDisplayName"), ::OpenAPI::toJsonValue(m_node_display_name));
    }
    if (m_node_friendly_software_version_isSet) {
        obj.insert(QString("nodeFriendlySoftwareVersion"), ::OpenAPI::toJsonValue(m_node_friendly_software_version));
    }
    if (m_node_hcs_version_isSet) {
        obj.insert(QString("nodeHcsVersion"), ::OpenAPI::toJsonValue(m_node_hcs_version));
    }
    if (m_node_instance_id_isSet) {
        obj.insert(QString("nodeInstanceId"), ::OpenAPI::toJsonValue(m_node_instance_id));
    }
    if (m_node_serial_number_isSet) {
        obj.insert(QString("nodeSerialNumber"), ::OpenAPI::toJsonValue(m_node_serial_number));
    }
    if (m_node_status_isSet) {
        obj.insert(QString("nodeStatus"), ::OpenAPI::toJsonValue(m_node_status));
    }
    return obj;
}

QString OAINodeProperties::getNodeChassisSerialNumber() const {
    return m_node_chassis_serial_number;
}
void OAINodeProperties::setNodeChassisSerialNumber(const QString &node_chassis_serial_number) {
    m_node_chassis_serial_number = node_chassis_serial_number;
    m_node_chassis_serial_number_isSet = true;
}

bool OAINodeProperties::is_node_chassis_serial_number_Set() const{
    return m_node_chassis_serial_number_isSet;
}

bool OAINodeProperties::is_node_chassis_serial_number_Valid() const{
    return m_node_chassis_serial_number_isValid;
}

QString OAINodeProperties::getNodeDisplayName() const {
    return m_node_display_name;
}
void OAINodeProperties::setNodeDisplayName(const QString &node_display_name) {
    m_node_display_name = node_display_name;
    m_node_display_name_isSet = true;
}

bool OAINodeProperties::is_node_display_name_Set() const{
    return m_node_display_name_isSet;
}

bool OAINodeProperties::is_node_display_name_Valid() const{
    return m_node_display_name_isValid;
}

QString OAINodeProperties::getNodeFriendlySoftwareVersion() const {
    return m_node_friendly_software_version;
}
void OAINodeProperties::setNodeFriendlySoftwareVersion(const QString &node_friendly_software_version) {
    m_node_friendly_software_version = node_friendly_software_version;
    m_node_friendly_software_version_isSet = true;
}

bool OAINodeProperties::is_node_friendly_software_version_Set() const{
    return m_node_friendly_software_version_isSet;
}

bool OAINodeProperties::is_node_friendly_software_version_Valid() const{
    return m_node_friendly_software_version_isValid;
}

QString OAINodeProperties::getNodeHcsVersion() const {
    return m_node_hcs_version;
}
void OAINodeProperties::setNodeHcsVersion(const QString &node_hcs_version) {
    m_node_hcs_version = node_hcs_version;
    m_node_hcs_version_isSet = true;
}

bool OAINodeProperties::is_node_hcs_version_Set() const{
    return m_node_hcs_version_isSet;
}

bool OAINodeProperties::is_node_hcs_version_Valid() const{
    return m_node_hcs_version_isValid;
}

QString OAINodeProperties::getNodeInstanceId() const {
    return m_node_instance_id;
}
void OAINodeProperties::setNodeInstanceId(const QString &node_instance_id) {
    m_node_instance_id = node_instance_id;
    m_node_instance_id_isSet = true;
}

bool OAINodeProperties::is_node_instance_id_Set() const{
    return m_node_instance_id_isSet;
}

bool OAINodeProperties::is_node_instance_id_Valid() const{
    return m_node_instance_id_isValid;
}

QString OAINodeProperties::getNodeSerialNumber() const {
    return m_node_serial_number;
}
void OAINodeProperties::setNodeSerialNumber(const QString &node_serial_number) {
    m_node_serial_number = node_serial_number;
    m_node_serial_number_isSet = true;
}

bool OAINodeProperties::is_node_serial_number_Set() const{
    return m_node_serial_number_isSet;
}

bool OAINodeProperties::is_node_serial_number_Valid() const{
    return m_node_serial_number_isValid;
}

QString OAINodeProperties::getNodeStatus() const {
    return m_node_status;
}
void OAINodeProperties::setNodeStatus(const QString &node_status) {
    m_node_status = node_status;
    m_node_status_isSet = true;
}

bool OAINodeProperties::is_node_status_Set() const{
    return m_node_status_isSet;
}

bool OAINodeProperties::is_node_status_Valid() const{
    return m_node_status_isValid;
}

bool OAINodeProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_node_chassis_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_friendly_software_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_hcs_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodeProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
