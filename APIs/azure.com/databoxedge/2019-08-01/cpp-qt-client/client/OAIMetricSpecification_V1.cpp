/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricSpecification_V1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricSpecification_V1::OAIMetricSpecification_V1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricSpecification_V1::OAIMetricSpecification_V1() {
    this->initializeModel();
}

OAIMetricSpecification_V1::~OAIMetricSpecification_V1() {}

void OAIMetricSpecification_V1::initializeModel() {

    m_aggregation_type_isSet = false;
    m_aggregation_type_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_display_description_isSet = false;
    m_display_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_fill_gap_with_zero_isSet = false;
    m_fill_gap_with_zero_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_id_dimension_name_override_isSet = false;
    m_resource_id_dimension_name_override_isValid = false;

    m_supported_aggregation_types_isSet = false;
    m_supported_aggregation_types_isValid = false;

    m_supported_time_grain_types_isSet = false;
    m_supported_time_grain_types_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIMetricSpecification_V1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricSpecification_V1::fromJsonObject(QJsonObject json) {

    m_aggregation_type_isValid = ::OpenAPI::fromJsonValue(m_aggregation_type, json[QString("aggregationType")]);
    m_aggregation_type_isSet = !json[QString("aggregationType")].isNull() && m_aggregation_type_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_display_description_isValid = ::OpenAPI::fromJsonValue(m_display_description, json[QString("displayDescription")]);
    m_display_description_isSet = !json[QString("displayDescription")].isNull() && m_display_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_fill_gap_with_zero_isValid = ::OpenAPI::fromJsonValue(m_fill_gap_with_zero, json[QString("fillGapWithZero")]);
    m_fill_gap_with_zero_isSet = !json[QString("fillGapWithZero")].isNull() && m_fill_gap_with_zero_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_id_dimension_name_override_isValid = ::OpenAPI::fromJsonValue(m_resource_id_dimension_name_override, json[QString("resourceIdDimensionNameOverride")]);
    m_resource_id_dimension_name_override_isSet = !json[QString("resourceIdDimensionNameOverride")].isNull() && m_resource_id_dimension_name_override_isValid;

    m_supported_aggregation_types_isValid = ::OpenAPI::fromJsonValue(m_supported_aggregation_types, json[QString("supportedAggregationTypes")]);
    m_supported_aggregation_types_isSet = !json[QString("supportedAggregationTypes")].isNull() && m_supported_aggregation_types_isValid;

    m_supported_time_grain_types_isValid = ::OpenAPI::fromJsonValue(m_supported_time_grain_types, json[QString("supportedTimeGrainTypes")]);
    m_supported_time_grain_types_isSet = !json[QString("supportedTimeGrainTypes")].isNull() && m_supported_time_grain_types_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIMetricSpecification_V1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricSpecification_V1::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation_type_isSet) {
        obj.insert(QString("aggregationType"), ::OpenAPI::toJsonValue(m_aggregation_type));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_display_description_isSet) {
        obj.insert(QString("displayDescription"), ::OpenAPI::toJsonValue(m_display_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_fill_gap_with_zero_isSet) {
        obj.insert(QString("fillGapWithZero"), ::OpenAPI::toJsonValue(m_fill_gap_with_zero));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_id_dimension_name_override_isSet) {
        obj.insert(QString("resourceIdDimensionNameOverride"), ::OpenAPI::toJsonValue(m_resource_id_dimension_name_override));
    }
    if (m_supported_aggregation_types.size() > 0) {
        obj.insert(QString("supportedAggregationTypes"), ::OpenAPI::toJsonValue(m_supported_aggregation_types));
    }
    if (m_supported_time_grain_types.size() > 0) {
        obj.insert(QString("supportedTimeGrainTypes"), ::OpenAPI::toJsonValue(m_supported_time_grain_types));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

QString OAIMetricSpecification_V1::getAggregationType() const {
    return m_aggregation_type;
}
void OAIMetricSpecification_V1::setAggregationType(const QString &aggregation_type) {
    m_aggregation_type = aggregation_type;
    m_aggregation_type_isSet = true;
}

bool OAIMetricSpecification_V1::is_aggregation_type_Set() const{
    return m_aggregation_type_isSet;
}

bool OAIMetricSpecification_V1::is_aggregation_type_Valid() const{
    return m_aggregation_type_isValid;
}

QString OAIMetricSpecification_V1::getCategory() const {
    return m_category;
}
void OAIMetricSpecification_V1::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIMetricSpecification_V1::is_category_Set() const{
    return m_category_isSet;
}

bool OAIMetricSpecification_V1::is_category_Valid() const{
    return m_category_isValid;
}

QList<OAIMetricDimension_V1> OAIMetricSpecification_V1::getDimensions() const {
    return m_dimensions;
}
void OAIMetricSpecification_V1::setDimensions(const QList<OAIMetricDimension_V1> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIMetricSpecification_V1::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIMetricSpecification_V1::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QString OAIMetricSpecification_V1::getDisplayDescription() const {
    return m_display_description;
}
void OAIMetricSpecification_V1::setDisplayDescription(const QString &display_description) {
    m_display_description = display_description;
    m_display_description_isSet = true;
}

bool OAIMetricSpecification_V1::is_display_description_Set() const{
    return m_display_description_isSet;
}

bool OAIMetricSpecification_V1::is_display_description_Valid() const{
    return m_display_description_isValid;
}

QString OAIMetricSpecification_V1::getDisplayName() const {
    return m_display_name;
}
void OAIMetricSpecification_V1::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIMetricSpecification_V1::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIMetricSpecification_V1::is_display_name_Valid() const{
    return m_display_name_isValid;
}

bool OAIMetricSpecification_V1::isFillGapWithZero() const {
    return m_fill_gap_with_zero;
}
void OAIMetricSpecification_V1::setFillGapWithZero(const bool &fill_gap_with_zero) {
    m_fill_gap_with_zero = fill_gap_with_zero;
    m_fill_gap_with_zero_isSet = true;
}

bool OAIMetricSpecification_V1::is_fill_gap_with_zero_Set() const{
    return m_fill_gap_with_zero_isSet;
}

bool OAIMetricSpecification_V1::is_fill_gap_with_zero_Valid() const{
    return m_fill_gap_with_zero_isValid;
}

QString OAIMetricSpecification_V1::getName() const {
    return m_name;
}
void OAIMetricSpecification_V1::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMetricSpecification_V1::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMetricSpecification_V1::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMetricSpecification_V1::getResourceIdDimensionNameOverride() const {
    return m_resource_id_dimension_name_override;
}
void OAIMetricSpecification_V1::setResourceIdDimensionNameOverride(const QString &resource_id_dimension_name_override) {
    m_resource_id_dimension_name_override = resource_id_dimension_name_override;
    m_resource_id_dimension_name_override_isSet = true;
}

bool OAIMetricSpecification_V1::is_resource_id_dimension_name_override_Set() const{
    return m_resource_id_dimension_name_override_isSet;
}

bool OAIMetricSpecification_V1::is_resource_id_dimension_name_override_Valid() const{
    return m_resource_id_dimension_name_override_isValid;
}

QList<QString> OAIMetricSpecification_V1::getSupportedAggregationTypes() const {
    return m_supported_aggregation_types;
}
void OAIMetricSpecification_V1::setSupportedAggregationTypes(const QList<QString> &supported_aggregation_types) {
    m_supported_aggregation_types = supported_aggregation_types;
    m_supported_aggregation_types_isSet = true;
}

bool OAIMetricSpecification_V1::is_supported_aggregation_types_Set() const{
    return m_supported_aggregation_types_isSet;
}

bool OAIMetricSpecification_V1::is_supported_aggregation_types_Valid() const{
    return m_supported_aggregation_types_isValid;
}

QList<QString> OAIMetricSpecification_V1::getSupportedTimeGrainTypes() const {
    return m_supported_time_grain_types;
}
void OAIMetricSpecification_V1::setSupportedTimeGrainTypes(const QList<QString> &supported_time_grain_types) {
    m_supported_time_grain_types = supported_time_grain_types;
    m_supported_time_grain_types_isSet = true;
}

bool OAIMetricSpecification_V1::is_supported_time_grain_types_Set() const{
    return m_supported_time_grain_types_isSet;
}

bool OAIMetricSpecification_V1::is_supported_time_grain_types_Valid() const{
    return m_supported_time_grain_types_isValid;
}

QString OAIMetricSpecification_V1::getUnit() const {
    return m_unit;
}
void OAIMetricSpecification_V1::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIMetricSpecification_V1::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIMetricSpecification_V1::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIMetricSpecification_V1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fill_gap_with_zero_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_dimension_name_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_aggregation_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_time_grain_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricSpecification_V1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
