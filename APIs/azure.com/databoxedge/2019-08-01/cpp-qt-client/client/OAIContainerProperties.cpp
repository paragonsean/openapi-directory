/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContainerProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContainerProperties::OAIContainerProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContainerProperties::OAIContainerProperties() {
    this->initializeModel();
}

OAIContainerProperties::~OAIContainerProperties() {}

void OAIContainerProperties::initializeModel() {

    m_container_status_isSet = false;
    m_container_status_isValid = false;

    m_created_date_time_isSet = false;
    m_created_date_time_isValid = false;

    m_data_format_isSet = false;
    m_data_format_isValid = false;

    m_refresh_details_isSet = false;
    m_refresh_details_isValid = false;
}

void OAIContainerProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContainerProperties::fromJsonObject(QJsonObject json) {

    m_container_status_isValid = ::OpenAPI::fromJsonValue(m_container_status, json[QString("containerStatus")]);
    m_container_status_isSet = !json[QString("containerStatus")].isNull() && m_container_status_isValid;

    m_created_date_time_isValid = ::OpenAPI::fromJsonValue(m_created_date_time, json[QString("createdDateTime")]);
    m_created_date_time_isSet = !json[QString("createdDateTime")].isNull() && m_created_date_time_isValid;

    m_data_format_isValid = ::OpenAPI::fromJsonValue(m_data_format, json[QString("dataFormat")]);
    m_data_format_isSet = !json[QString("dataFormat")].isNull() && m_data_format_isValid;

    m_refresh_details_isValid = ::OpenAPI::fromJsonValue(m_refresh_details, json[QString("refreshDetails")]);
    m_refresh_details_isSet = !json[QString("refreshDetails")].isNull() && m_refresh_details_isValid;
}

QString OAIContainerProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContainerProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_container_status_isSet) {
        obj.insert(QString("containerStatus"), ::OpenAPI::toJsonValue(m_container_status));
    }
    if (m_created_date_time_isSet) {
        obj.insert(QString("createdDateTime"), ::OpenAPI::toJsonValue(m_created_date_time));
    }
    if (m_data_format_isSet) {
        obj.insert(QString("dataFormat"), ::OpenAPI::toJsonValue(m_data_format));
    }
    if (m_refresh_details.isSet()) {
        obj.insert(QString("refreshDetails"), ::OpenAPI::toJsonValue(m_refresh_details));
    }
    return obj;
}

QString OAIContainerProperties::getContainerStatus() const {
    return m_container_status;
}
void OAIContainerProperties::setContainerStatus(const QString &container_status) {
    m_container_status = container_status;
    m_container_status_isSet = true;
}

bool OAIContainerProperties::is_container_status_Set() const{
    return m_container_status_isSet;
}

bool OAIContainerProperties::is_container_status_Valid() const{
    return m_container_status_isValid;
}

QDateTime OAIContainerProperties::getCreatedDateTime() const {
    return m_created_date_time;
}
void OAIContainerProperties::setCreatedDateTime(const QDateTime &created_date_time) {
    m_created_date_time = created_date_time;
    m_created_date_time_isSet = true;
}

bool OAIContainerProperties::is_created_date_time_Set() const{
    return m_created_date_time_isSet;
}

bool OAIContainerProperties::is_created_date_time_Valid() const{
    return m_created_date_time_isValid;
}

QString OAIContainerProperties::getDataFormat() const {
    return m_data_format;
}
void OAIContainerProperties::setDataFormat(const QString &data_format) {
    m_data_format = data_format;
    m_data_format_isSet = true;
}

bool OAIContainerProperties::is_data_format_Set() const{
    return m_data_format_isSet;
}

bool OAIContainerProperties::is_data_format_Valid() const{
    return m_data_format_isValid;
}

OAIRefreshDetails OAIContainerProperties::getRefreshDetails() const {
    return m_refresh_details;
}
void OAIContainerProperties::setRefreshDetails(const OAIRefreshDetails &refresh_details) {
    m_refresh_details = refresh_details;
    m_refresh_details_isSet = true;
}

bool OAIContainerProperties::is_refresh_details_Set() const{
    return m_refresh_details_isSet;
}

bool OAIContainerProperties::is_refresh_details_Valid() const{
    return m_refresh_details_isValid;
}

bool OAIContainerProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContainerProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_format_isValid && true;
}

} // namespace OpenAPI
