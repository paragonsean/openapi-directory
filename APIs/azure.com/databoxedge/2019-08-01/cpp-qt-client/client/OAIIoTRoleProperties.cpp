/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIoTRoleProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIoTRoleProperties::OAIIoTRoleProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIoTRoleProperties::OAIIoTRoleProperties() {
    this->initializeModel();
}

OAIIoTRoleProperties::~OAIIoTRoleProperties() {}

void OAIIoTRoleProperties::initializeModel() {

    m_host_platform_isSet = false;
    m_host_platform_isValid = false;

    m_io_t_device_details_isSet = false;
    m_io_t_device_details_isValid = false;

    m_io_t_edge_device_details_isSet = false;
    m_io_t_edge_device_details_isValid = false;

    m_role_status_isSet = false;
    m_role_status_isValid = false;

    m_share_mappings_isSet = false;
    m_share_mappings_isValid = false;
}

void OAIIoTRoleProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIoTRoleProperties::fromJsonObject(QJsonObject json) {

    m_host_platform_isValid = ::OpenAPI::fromJsonValue(m_host_platform, json[QString("hostPlatform")]);
    m_host_platform_isSet = !json[QString("hostPlatform")].isNull() && m_host_platform_isValid;

    m_io_t_device_details_isValid = ::OpenAPI::fromJsonValue(m_io_t_device_details, json[QString("ioTDeviceDetails")]);
    m_io_t_device_details_isSet = !json[QString("ioTDeviceDetails")].isNull() && m_io_t_device_details_isValid;

    m_io_t_edge_device_details_isValid = ::OpenAPI::fromJsonValue(m_io_t_edge_device_details, json[QString("ioTEdgeDeviceDetails")]);
    m_io_t_edge_device_details_isSet = !json[QString("ioTEdgeDeviceDetails")].isNull() && m_io_t_edge_device_details_isValid;

    m_role_status_isValid = ::OpenAPI::fromJsonValue(m_role_status, json[QString("roleStatus")]);
    m_role_status_isSet = !json[QString("roleStatus")].isNull() && m_role_status_isValid;

    m_share_mappings_isValid = ::OpenAPI::fromJsonValue(m_share_mappings, json[QString("shareMappings")]);
    m_share_mappings_isSet = !json[QString("shareMappings")].isNull() && m_share_mappings_isValid;
}

QString OAIIoTRoleProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIoTRoleProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_host_platform_isSet) {
        obj.insert(QString("hostPlatform"), ::OpenAPI::toJsonValue(m_host_platform));
    }
    if (m_io_t_device_details.isSet()) {
        obj.insert(QString("ioTDeviceDetails"), ::OpenAPI::toJsonValue(m_io_t_device_details));
    }
    if (m_io_t_edge_device_details.isSet()) {
        obj.insert(QString("ioTEdgeDeviceDetails"), ::OpenAPI::toJsonValue(m_io_t_edge_device_details));
    }
    if (m_role_status_isSet) {
        obj.insert(QString("roleStatus"), ::OpenAPI::toJsonValue(m_role_status));
    }
    if (m_share_mappings.size() > 0) {
        obj.insert(QString("shareMappings"), ::OpenAPI::toJsonValue(m_share_mappings));
    }
    return obj;
}

QString OAIIoTRoleProperties::getHostPlatform() const {
    return m_host_platform;
}
void OAIIoTRoleProperties::setHostPlatform(const QString &host_platform) {
    m_host_platform = host_platform;
    m_host_platform_isSet = true;
}

bool OAIIoTRoleProperties::is_host_platform_Set() const{
    return m_host_platform_isSet;
}

bool OAIIoTRoleProperties::is_host_platform_Valid() const{
    return m_host_platform_isValid;
}

OAIIoTDeviceInfo OAIIoTRoleProperties::getIoTDeviceDetails() const {
    return m_io_t_device_details;
}
void OAIIoTRoleProperties::setIoTDeviceDetails(const OAIIoTDeviceInfo &io_t_device_details) {
    m_io_t_device_details = io_t_device_details;
    m_io_t_device_details_isSet = true;
}

bool OAIIoTRoleProperties::is_io_t_device_details_Set() const{
    return m_io_t_device_details_isSet;
}

bool OAIIoTRoleProperties::is_io_t_device_details_Valid() const{
    return m_io_t_device_details_isValid;
}

OAIIoTDeviceInfo OAIIoTRoleProperties::getIoTEdgeDeviceDetails() const {
    return m_io_t_edge_device_details;
}
void OAIIoTRoleProperties::setIoTEdgeDeviceDetails(const OAIIoTDeviceInfo &io_t_edge_device_details) {
    m_io_t_edge_device_details = io_t_edge_device_details;
    m_io_t_edge_device_details_isSet = true;
}

bool OAIIoTRoleProperties::is_io_t_edge_device_details_Set() const{
    return m_io_t_edge_device_details_isSet;
}

bool OAIIoTRoleProperties::is_io_t_edge_device_details_Valid() const{
    return m_io_t_edge_device_details_isValid;
}

QString OAIIoTRoleProperties::getRoleStatus() const {
    return m_role_status;
}
void OAIIoTRoleProperties::setRoleStatus(const QString &role_status) {
    m_role_status = role_status;
    m_role_status_isSet = true;
}

bool OAIIoTRoleProperties::is_role_status_Set() const{
    return m_role_status_isSet;
}

bool OAIIoTRoleProperties::is_role_status_Valid() const{
    return m_role_status_isValid;
}

QList<OAIMountPointMap> OAIIoTRoleProperties::getShareMappings() const {
    return m_share_mappings;
}
void OAIIoTRoleProperties::setShareMappings(const QList<OAIMountPointMap> &share_mappings) {
    m_share_mappings = share_mappings;
    m_share_mappings_isSet = true;
}

bool OAIIoTRoleProperties::is_share_mappings_Set() const{
    return m_share_mappings_isSet;
}

bool OAIIoTRoleProperties::is_share_mappings_Valid() const{
    return m_share_mappings_isValid;
}

bool OAIIoTRoleProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_host_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_io_t_device_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_io_t_edge_device_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_mappings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIoTRoleProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_host_platform_isValid && m_io_t_device_details_isValid && m_io_t_edge_device_details_isValid && m_role_status_isValid && true;
}

} // namespace OpenAPI
