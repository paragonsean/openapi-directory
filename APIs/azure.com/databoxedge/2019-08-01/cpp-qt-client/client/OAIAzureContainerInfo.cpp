/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAzureContainerInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAzureContainerInfo::OAIAzureContainerInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAzureContainerInfo::OAIAzureContainerInfo() {
    this->initializeModel();
}

OAIAzureContainerInfo::~OAIAzureContainerInfo() {}

void OAIAzureContainerInfo::initializeModel() {

    m_container_name_isSet = false;
    m_container_name_isValid = false;

    m_data_format_isSet = false;
    m_data_format_isValid = false;

    m_storage_account_credential_id_isSet = false;
    m_storage_account_credential_id_isValid = false;
}

void OAIAzureContainerInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAzureContainerInfo::fromJsonObject(QJsonObject json) {

    m_container_name_isValid = ::OpenAPI::fromJsonValue(m_container_name, json[QString("containerName")]);
    m_container_name_isSet = !json[QString("containerName")].isNull() && m_container_name_isValid;

    m_data_format_isValid = ::OpenAPI::fromJsonValue(m_data_format, json[QString("dataFormat")]);
    m_data_format_isSet = !json[QString("dataFormat")].isNull() && m_data_format_isValid;

    m_storage_account_credential_id_isValid = ::OpenAPI::fromJsonValue(m_storage_account_credential_id, json[QString("storageAccountCredentialId")]);
    m_storage_account_credential_id_isSet = !json[QString("storageAccountCredentialId")].isNull() && m_storage_account_credential_id_isValid;
}

QString OAIAzureContainerInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAzureContainerInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_container_name_isSet) {
        obj.insert(QString("containerName"), ::OpenAPI::toJsonValue(m_container_name));
    }
    if (m_data_format_isSet) {
        obj.insert(QString("dataFormat"), ::OpenAPI::toJsonValue(m_data_format));
    }
    if (m_storage_account_credential_id_isSet) {
        obj.insert(QString("storageAccountCredentialId"), ::OpenAPI::toJsonValue(m_storage_account_credential_id));
    }
    return obj;
}

QString OAIAzureContainerInfo::getContainerName() const {
    return m_container_name;
}
void OAIAzureContainerInfo::setContainerName(const QString &container_name) {
    m_container_name = container_name;
    m_container_name_isSet = true;
}

bool OAIAzureContainerInfo::is_container_name_Set() const{
    return m_container_name_isSet;
}

bool OAIAzureContainerInfo::is_container_name_Valid() const{
    return m_container_name_isValid;
}

QString OAIAzureContainerInfo::getDataFormat() const {
    return m_data_format;
}
void OAIAzureContainerInfo::setDataFormat(const QString &data_format) {
    m_data_format = data_format;
    m_data_format_isSet = true;
}

bool OAIAzureContainerInfo::is_data_format_Set() const{
    return m_data_format_isSet;
}

bool OAIAzureContainerInfo::is_data_format_Valid() const{
    return m_data_format_isValid;
}

QString OAIAzureContainerInfo::getStorageAccountCredentialId() const {
    return m_storage_account_credential_id;
}
void OAIAzureContainerInfo::setStorageAccountCredentialId(const QString &storage_account_credential_id) {
    m_storage_account_credential_id = storage_account_credential_id;
    m_storage_account_credential_id_isSet = true;
}

bool OAIAzureContainerInfo::is_storage_account_credential_id_Set() const{
    return m_storage_account_credential_id_isSet;
}

bool OAIAzureContainerInfo::is_storage_account_credential_id_Valid() const{
    return m_storage_account_credential_id_isValid;
}

bool OAIAzureContainerInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_credential_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAzureContainerInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_container_name_isValid && m_data_format_isValid && m_storage_account_credential_id_isValid && true;
}

} // namespace OpenAPI
