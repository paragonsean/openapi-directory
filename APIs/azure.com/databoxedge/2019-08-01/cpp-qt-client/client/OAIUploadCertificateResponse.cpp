/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUploadCertificateResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUploadCertificateResponse::OAIUploadCertificateResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUploadCertificateResponse::OAIUploadCertificateResponse() {
    this->initializeModel();
}

OAIUploadCertificateResponse::~OAIUploadCertificateResponse() {}

void OAIUploadCertificateResponse::initializeModel() {

    m_aad_audience_isSet = false;
    m_aad_audience_isValid = false;

    m_aad_authority_isSet = false;
    m_aad_authority_isValid = false;

    m_aad_tenant_id_isSet = false;
    m_aad_tenant_id_isValid = false;

    m_auth_type_isSet = false;
    m_auth_type_isValid = false;

    m_azure_management_endpoint_audience_isSet = false;
    m_azure_management_endpoint_audience_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_service_principal_client_id_isSet = false;
    m_service_principal_client_id_isValid = false;

    m_service_principal_object_id_isSet = false;
    m_service_principal_object_id_isValid = false;
}

void OAIUploadCertificateResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUploadCertificateResponse::fromJsonObject(QJsonObject json) {

    m_aad_audience_isValid = ::OpenAPI::fromJsonValue(m_aad_audience, json[QString("aadAudience")]);
    m_aad_audience_isSet = !json[QString("aadAudience")].isNull() && m_aad_audience_isValid;

    m_aad_authority_isValid = ::OpenAPI::fromJsonValue(m_aad_authority, json[QString("aadAuthority")]);
    m_aad_authority_isSet = !json[QString("aadAuthority")].isNull() && m_aad_authority_isValid;

    m_aad_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_aad_tenant_id, json[QString("aadTenantId")]);
    m_aad_tenant_id_isSet = !json[QString("aadTenantId")].isNull() && m_aad_tenant_id_isValid;

    m_auth_type_isValid = ::OpenAPI::fromJsonValue(m_auth_type, json[QString("authType")]);
    m_auth_type_isSet = !json[QString("authType")].isNull() && m_auth_type_isValid;

    m_azure_management_endpoint_audience_isValid = ::OpenAPI::fromJsonValue(m_azure_management_endpoint_audience, json[QString("azureManagementEndpointAudience")]);
    m_azure_management_endpoint_audience_isSet = !json[QString("azureManagementEndpointAudience")].isNull() && m_azure_management_endpoint_audience_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_service_principal_client_id_isValid = ::OpenAPI::fromJsonValue(m_service_principal_client_id, json[QString("servicePrincipalClientId")]);
    m_service_principal_client_id_isSet = !json[QString("servicePrincipalClientId")].isNull() && m_service_principal_client_id_isValid;

    m_service_principal_object_id_isValid = ::OpenAPI::fromJsonValue(m_service_principal_object_id, json[QString("servicePrincipalObjectId")]);
    m_service_principal_object_id_isSet = !json[QString("servicePrincipalObjectId")].isNull() && m_service_principal_object_id_isValid;
}

QString OAIUploadCertificateResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUploadCertificateResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_aad_audience_isSet) {
        obj.insert(QString("aadAudience"), ::OpenAPI::toJsonValue(m_aad_audience));
    }
    if (m_aad_authority_isSet) {
        obj.insert(QString("aadAuthority"), ::OpenAPI::toJsonValue(m_aad_authority));
    }
    if (m_aad_tenant_id_isSet) {
        obj.insert(QString("aadTenantId"), ::OpenAPI::toJsonValue(m_aad_tenant_id));
    }
    if (m_auth_type_isSet) {
        obj.insert(QString("authType"), ::OpenAPI::toJsonValue(m_auth_type));
    }
    if (m_azure_management_endpoint_audience_isSet) {
        obj.insert(QString("azureManagementEndpointAudience"), ::OpenAPI::toJsonValue(m_azure_management_endpoint_audience));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_service_principal_client_id_isSet) {
        obj.insert(QString("servicePrincipalClientId"), ::OpenAPI::toJsonValue(m_service_principal_client_id));
    }
    if (m_service_principal_object_id_isSet) {
        obj.insert(QString("servicePrincipalObjectId"), ::OpenAPI::toJsonValue(m_service_principal_object_id));
    }
    return obj;
}

QString OAIUploadCertificateResponse::getAadAudience() const {
    return m_aad_audience;
}
void OAIUploadCertificateResponse::setAadAudience(const QString &aad_audience) {
    m_aad_audience = aad_audience;
    m_aad_audience_isSet = true;
}

bool OAIUploadCertificateResponse::is_aad_audience_Set() const{
    return m_aad_audience_isSet;
}

bool OAIUploadCertificateResponse::is_aad_audience_Valid() const{
    return m_aad_audience_isValid;
}

QString OAIUploadCertificateResponse::getAadAuthority() const {
    return m_aad_authority;
}
void OAIUploadCertificateResponse::setAadAuthority(const QString &aad_authority) {
    m_aad_authority = aad_authority;
    m_aad_authority_isSet = true;
}

bool OAIUploadCertificateResponse::is_aad_authority_Set() const{
    return m_aad_authority_isSet;
}

bool OAIUploadCertificateResponse::is_aad_authority_Valid() const{
    return m_aad_authority_isValid;
}

QString OAIUploadCertificateResponse::getAadTenantId() const {
    return m_aad_tenant_id;
}
void OAIUploadCertificateResponse::setAadTenantId(const QString &aad_tenant_id) {
    m_aad_tenant_id = aad_tenant_id;
    m_aad_tenant_id_isSet = true;
}

bool OAIUploadCertificateResponse::is_aad_tenant_id_Set() const{
    return m_aad_tenant_id_isSet;
}

bool OAIUploadCertificateResponse::is_aad_tenant_id_Valid() const{
    return m_aad_tenant_id_isValid;
}

QString OAIUploadCertificateResponse::getAuthType() const {
    return m_auth_type;
}
void OAIUploadCertificateResponse::setAuthType(const QString &auth_type) {
    m_auth_type = auth_type;
    m_auth_type_isSet = true;
}

bool OAIUploadCertificateResponse::is_auth_type_Set() const{
    return m_auth_type_isSet;
}

bool OAIUploadCertificateResponse::is_auth_type_Valid() const{
    return m_auth_type_isValid;
}

QString OAIUploadCertificateResponse::getAzureManagementEndpointAudience() const {
    return m_azure_management_endpoint_audience;
}
void OAIUploadCertificateResponse::setAzureManagementEndpointAudience(const QString &azure_management_endpoint_audience) {
    m_azure_management_endpoint_audience = azure_management_endpoint_audience;
    m_azure_management_endpoint_audience_isSet = true;
}

bool OAIUploadCertificateResponse::is_azure_management_endpoint_audience_Set() const{
    return m_azure_management_endpoint_audience_isSet;
}

bool OAIUploadCertificateResponse::is_azure_management_endpoint_audience_Valid() const{
    return m_azure_management_endpoint_audience_isValid;
}

QString OAIUploadCertificateResponse::getResourceId() const {
    return m_resource_id;
}
void OAIUploadCertificateResponse::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIUploadCertificateResponse::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIUploadCertificateResponse::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIUploadCertificateResponse::getServicePrincipalClientId() const {
    return m_service_principal_client_id;
}
void OAIUploadCertificateResponse::setServicePrincipalClientId(const QString &service_principal_client_id) {
    m_service_principal_client_id = service_principal_client_id;
    m_service_principal_client_id_isSet = true;
}

bool OAIUploadCertificateResponse::is_service_principal_client_id_Set() const{
    return m_service_principal_client_id_isSet;
}

bool OAIUploadCertificateResponse::is_service_principal_client_id_Valid() const{
    return m_service_principal_client_id_isValid;
}

QString OAIUploadCertificateResponse::getServicePrincipalObjectId() const {
    return m_service_principal_object_id;
}
void OAIUploadCertificateResponse::setServicePrincipalObjectId(const QString &service_principal_object_id) {
    m_service_principal_object_id = service_principal_object_id;
    m_service_principal_object_id_isSet = true;
}

bool OAIUploadCertificateResponse::is_service_principal_object_id_Set() const{
    return m_service_principal_object_id_isSet;
}

bool OAIUploadCertificateResponse::is_service_principal_object_id_Valid() const{
    return m_service_principal_object_id_isValid;
}

bool OAIUploadCertificateResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aad_audience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aad_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aad_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azure_management_endpoint_audience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_principal_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_principal_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUploadCertificateResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
