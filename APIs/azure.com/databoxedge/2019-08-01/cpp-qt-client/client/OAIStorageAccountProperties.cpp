/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageAccountProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageAccountProperties::OAIStorageAccountProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageAccountProperties::OAIStorageAccountProperties() {
    this->initializeModel();
}

OAIStorageAccountProperties::~OAIStorageAccountProperties() {}

void OAIStorageAccountProperties::initializeModel() {

    m_blob_endpoint_isSet = false;
    m_blob_endpoint_isValid = false;

    m_container_count_isSet = false;
    m_container_count_isValid = false;

    m_data_policy_isSet = false;
    m_data_policy_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_storage_account_credential_id_isSet = false;
    m_storage_account_credential_id_isValid = false;

    m_storage_account_status_isSet = false;
    m_storage_account_status_isValid = false;
}

void OAIStorageAccountProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageAccountProperties::fromJsonObject(QJsonObject json) {

    m_blob_endpoint_isValid = ::OpenAPI::fromJsonValue(m_blob_endpoint, json[QString("blobEndpoint")]);
    m_blob_endpoint_isSet = !json[QString("blobEndpoint")].isNull() && m_blob_endpoint_isValid;

    m_container_count_isValid = ::OpenAPI::fromJsonValue(m_container_count, json[QString("containerCount")]);
    m_container_count_isSet = !json[QString("containerCount")].isNull() && m_container_count_isValid;

    m_data_policy_isValid = ::OpenAPI::fromJsonValue(m_data_policy, json[QString("dataPolicy")]);
    m_data_policy_isSet = !json[QString("dataPolicy")].isNull() && m_data_policy_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_storage_account_credential_id_isValid = ::OpenAPI::fromJsonValue(m_storage_account_credential_id, json[QString("storageAccountCredentialId")]);
    m_storage_account_credential_id_isSet = !json[QString("storageAccountCredentialId")].isNull() && m_storage_account_credential_id_isValid;

    m_storage_account_status_isValid = ::OpenAPI::fromJsonValue(m_storage_account_status, json[QString("storageAccountStatus")]);
    m_storage_account_status_isSet = !json[QString("storageAccountStatus")].isNull() && m_storage_account_status_isValid;
}

QString OAIStorageAccountProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageAccountProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_blob_endpoint_isSet) {
        obj.insert(QString("blobEndpoint"), ::OpenAPI::toJsonValue(m_blob_endpoint));
    }
    if (m_container_count_isSet) {
        obj.insert(QString("containerCount"), ::OpenAPI::toJsonValue(m_container_count));
    }
    if (m_data_policy_isSet) {
        obj.insert(QString("dataPolicy"), ::OpenAPI::toJsonValue(m_data_policy));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_storage_account_credential_id_isSet) {
        obj.insert(QString("storageAccountCredentialId"), ::OpenAPI::toJsonValue(m_storage_account_credential_id));
    }
    if (m_storage_account_status_isSet) {
        obj.insert(QString("storageAccountStatus"), ::OpenAPI::toJsonValue(m_storage_account_status));
    }
    return obj;
}

QString OAIStorageAccountProperties::getBlobEndpoint() const {
    return m_blob_endpoint;
}
void OAIStorageAccountProperties::setBlobEndpoint(const QString &blob_endpoint) {
    m_blob_endpoint = blob_endpoint;
    m_blob_endpoint_isSet = true;
}

bool OAIStorageAccountProperties::is_blob_endpoint_Set() const{
    return m_blob_endpoint_isSet;
}

bool OAIStorageAccountProperties::is_blob_endpoint_Valid() const{
    return m_blob_endpoint_isValid;
}

qint32 OAIStorageAccountProperties::getContainerCount() const {
    return m_container_count;
}
void OAIStorageAccountProperties::setContainerCount(const qint32 &container_count) {
    m_container_count = container_count;
    m_container_count_isSet = true;
}

bool OAIStorageAccountProperties::is_container_count_Set() const{
    return m_container_count_isSet;
}

bool OAIStorageAccountProperties::is_container_count_Valid() const{
    return m_container_count_isValid;
}

QString OAIStorageAccountProperties::getDataPolicy() const {
    return m_data_policy;
}
void OAIStorageAccountProperties::setDataPolicy(const QString &data_policy) {
    m_data_policy = data_policy;
    m_data_policy_isSet = true;
}

bool OAIStorageAccountProperties::is_data_policy_Set() const{
    return m_data_policy_isSet;
}

bool OAIStorageAccountProperties::is_data_policy_Valid() const{
    return m_data_policy_isValid;
}

QString OAIStorageAccountProperties::getDescription() const {
    return m_description;
}
void OAIStorageAccountProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStorageAccountProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStorageAccountProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIStorageAccountProperties::getStorageAccountCredentialId() const {
    return m_storage_account_credential_id;
}
void OAIStorageAccountProperties::setStorageAccountCredentialId(const QString &storage_account_credential_id) {
    m_storage_account_credential_id = storage_account_credential_id;
    m_storage_account_credential_id_isSet = true;
}

bool OAIStorageAccountProperties::is_storage_account_credential_id_Set() const{
    return m_storage_account_credential_id_isSet;
}

bool OAIStorageAccountProperties::is_storage_account_credential_id_Valid() const{
    return m_storage_account_credential_id_isValid;
}

QString OAIStorageAccountProperties::getStorageAccountStatus() const {
    return m_storage_account_status;
}
void OAIStorageAccountProperties::setStorageAccountStatus(const QString &storage_account_status) {
    m_storage_account_status = storage_account_status;
    m_storage_account_status_isSet = true;
}

bool OAIStorageAccountProperties::is_storage_account_status_Set() const{
    return m_storage_account_status_isSet;
}

bool OAIStorageAccountProperties::is_storage_account_status_Valid() const{
    return m_storage_account_status_isValid;
}

bool OAIStorageAccountProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blob_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_credential_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageAccountProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
