/*
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The storage account properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:16.994725-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StorageAccountProperties {
  public static final String SERIALIZED_NAME_BLOB_ENDPOINT = "blobEndpoint";
  @SerializedName(SERIALIZED_NAME_BLOB_ENDPOINT)
  private String blobEndpoint;

  public static final String SERIALIZED_NAME_CONTAINER_COUNT = "containerCount";
  @SerializedName(SERIALIZED_NAME_CONTAINER_COUNT)
  private Integer containerCount;

  /**
   * Data policy of the storage Account.
   */
  @JsonAdapter(DataPolicyEnum.Adapter.class)
  public enum DataPolicyEnum {
    CLOUD("Cloud"),
    
    LOCAL("Local");

    private String value;

    DataPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataPolicyEnum fromValue(String value) {
      for (DataPolicyEnum b : DataPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_POLICY = "dataPolicy";
  @SerializedName(SERIALIZED_NAME_DATA_POLICY)
  private DataPolicyEnum dataPolicy;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT_CREDENTIAL_ID = "storageAccountCredentialId";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT_CREDENTIAL_ID)
  private String storageAccountCredentialId;

  /**
   * Current status of the storage account
   */
  @JsonAdapter(StorageAccountStatusEnum.Adapter.class)
  public enum StorageAccountStatusEnum {
    OK("OK"),
    
    OFFLINE("Offline"),
    
    UNKNOWN("Unknown"),
    
    UPDATING("Updating"),
    
    NEEDS_ATTENTION("NeedsAttention");

    private String value;

    StorageAccountStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StorageAccountStatusEnum fromValue(String value) {
      for (StorageAccountStatusEnum b : StorageAccountStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StorageAccountStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StorageAccountStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StorageAccountStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StorageAccountStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StorageAccountStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT_STATUS = "storageAccountStatus";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT_STATUS)
  private StorageAccountStatusEnum storageAccountStatus;

  public StorageAccountProperties() {
  }

  public StorageAccountProperties(
     String blobEndpoint, 
     Integer containerCount
  ) {
    this();
    this.blobEndpoint = blobEndpoint;
    this.containerCount = containerCount;
  }

  /**
   * BlobEndpoint of Storage Account
   * @return blobEndpoint
   */
  @javax.annotation.Nullable
  public String getBlobEndpoint() {
    return blobEndpoint;
  }



  /**
   * The Container Count. Present only for Storage Accounts with DataPolicy set to Cloud.
   * @return containerCount
   */
  @javax.annotation.Nullable
  public Integer getContainerCount() {
    return containerCount;
  }



  public StorageAccountProperties dataPolicy(DataPolicyEnum dataPolicy) {
    this.dataPolicy = dataPolicy;
    return this;
  }

  /**
   * Data policy of the storage Account.
   * @return dataPolicy
   */
  @javax.annotation.Nullable
  public DataPolicyEnum getDataPolicy() {
    return dataPolicy;
  }

  public void setDataPolicy(DataPolicyEnum dataPolicy) {
    this.dataPolicy = dataPolicy;
  }


  public StorageAccountProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description for the storage Account.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public StorageAccountProperties storageAccountCredentialId(String storageAccountCredentialId) {
    this.storageAccountCredentialId = storageAccountCredentialId;
    return this;
  }

  /**
   * Storage Account Credential Id
   * @return storageAccountCredentialId
   */
  @javax.annotation.Nullable
  public String getStorageAccountCredentialId() {
    return storageAccountCredentialId;
  }

  public void setStorageAccountCredentialId(String storageAccountCredentialId) {
    this.storageAccountCredentialId = storageAccountCredentialId;
  }


  public StorageAccountProperties storageAccountStatus(StorageAccountStatusEnum storageAccountStatus) {
    this.storageAccountStatus = storageAccountStatus;
    return this;
  }

  /**
   * Current status of the storage account
   * @return storageAccountStatus
   */
  @javax.annotation.Nullable
  public StorageAccountStatusEnum getStorageAccountStatus() {
    return storageAccountStatus;
  }

  public void setStorageAccountStatus(StorageAccountStatusEnum storageAccountStatus) {
    this.storageAccountStatus = storageAccountStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorageAccountProperties storageAccountProperties = (StorageAccountProperties) o;
    return Objects.equals(this.blobEndpoint, storageAccountProperties.blobEndpoint) &&
        Objects.equals(this.containerCount, storageAccountProperties.containerCount) &&
        Objects.equals(this.dataPolicy, storageAccountProperties.dataPolicy) &&
        Objects.equals(this.description, storageAccountProperties.description) &&
        Objects.equals(this.storageAccountCredentialId, storageAccountProperties.storageAccountCredentialId) &&
        Objects.equals(this.storageAccountStatus, storageAccountProperties.storageAccountStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blobEndpoint, containerCount, dataPolicy, description, storageAccountCredentialId, storageAccountStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorageAccountProperties {\n");
    sb.append("    blobEndpoint: ").append(toIndentedString(blobEndpoint)).append("\n");
    sb.append("    containerCount: ").append(toIndentedString(containerCount)).append("\n");
    sb.append("    dataPolicy: ").append(toIndentedString(dataPolicy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    storageAccountCredentialId: ").append(toIndentedString(storageAccountCredentialId)).append("\n");
    sb.append("    storageAccountStatus: ").append(toIndentedString(storageAccountStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blobEndpoint");
    openapiFields.add("containerCount");
    openapiFields.add("dataPolicy");
    openapiFields.add("description");
    openapiFields.add("storageAccountCredentialId");
    openapiFields.add("storageAccountStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StorageAccountProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StorageAccountProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StorageAccountProperties is not found in the empty JSON string", StorageAccountProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StorageAccountProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StorageAccountProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("blobEndpoint") != null && !jsonObj.get("blobEndpoint").isJsonNull()) && !jsonObj.get("blobEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blobEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blobEndpoint").toString()));
      }
      if ((jsonObj.get("dataPolicy") != null && !jsonObj.get("dataPolicy").isJsonNull()) && !jsonObj.get("dataPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataPolicy").toString()));
      }
      // validate the optional field `dataPolicy`
      if (jsonObj.get("dataPolicy") != null && !jsonObj.get("dataPolicy").isJsonNull()) {
        DataPolicyEnum.validateJsonElement(jsonObj.get("dataPolicy"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("storageAccountCredentialId") != null && !jsonObj.get("storageAccountCredentialId").isJsonNull()) && !jsonObj.get("storageAccountCredentialId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAccountCredentialId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageAccountCredentialId").toString()));
      }
      if ((jsonObj.get("storageAccountStatus") != null && !jsonObj.get("storageAccountStatus").isJsonNull()) && !jsonObj.get("storageAccountStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAccountStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageAccountStatus").toString()));
      }
      // validate the optional field `storageAccountStatus`
      if (jsonObj.get("storageAccountStatus") != null && !jsonObj.get("storageAccountStatus").isJsonNull()) {
        StorageAccountStatusEnum.validateJsonElement(jsonObj.get("storageAccountStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StorageAccountProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StorageAccountProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StorageAccountProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StorageAccountProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<StorageAccountProperties>() {
           @Override
           public void write(JsonWriter out, StorageAccountProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StorageAccountProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StorageAccountProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StorageAccountProperties
   * @throws IOException if the JSON string is invalid with respect to StorageAccountProperties
   */
  public static StorageAccountProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StorageAccountProperties.class);
  }

  /**
   * Convert an instance of StorageAccountProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

