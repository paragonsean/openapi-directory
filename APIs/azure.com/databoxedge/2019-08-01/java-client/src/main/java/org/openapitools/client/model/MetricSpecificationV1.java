/*
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MetricDimensionV1;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metric specification version 1.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:16.994725-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricSpecificationV1 {
  /**
   * Metric aggregation type.
   */
  @JsonAdapter(AggregationTypeEnum.Adapter.class)
  public enum AggregationTypeEnum {
    NOT_SPECIFIED("NotSpecified"),
    
    NONE("None"),
    
    AVERAGE("Average"),
    
    MINIMUM("Minimum"),
    
    MAXIMUM("Maximum"),
    
    TOTAL("Total"),
    
    COUNT("Count");

    private String value;

    AggregationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AggregationTypeEnum fromValue(String value) {
      for (AggregationTypeEnum b : AggregationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AggregationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AggregationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AggregationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AggregationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AggregationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AGGREGATION_TYPE = "aggregationType";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_TYPE)
  private AggregationTypeEnum aggregationType;

  /**
   * Metric category.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    CAPACITY("Capacity"),
    
    TRANSACTION("Transaction");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private List<MetricDimensionV1> dimensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_DESCRIPTION = "displayDescription";
  @SerializedName(SERIALIZED_NAME_DISPLAY_DESCRIPTION)
  private String displayDescription;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_FILL_GAP_WITH_ZERO = "fillGapWithZero";
  @SerializedName(SERIALIZED_NAME_FILL_GAP_WITH_ZERO)
  private Boolean fillGapWithZero;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESOURCE_ID_DIMENSION_NAME_OVERRIDE = "resourceIdDimensionNameOverride";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID_DIMENSION_NAME_OVERRIDE)
  private String resourceIdDimensionNameOverride;

  /**
   * Gets or Sets supportedAggregationTypes
   */
  @JsonAdapter(SupportedAggregationTypesEnum.Adapter.class)
  public enum SupportedAggregationTypesEnum {
    NOT_SPECIFIED("NotSpecified"),
    
    NONE("None"),
    
    AVERAGE("Average"),
    
    MINIMUM("Minimum"),
    
    MAXIMUM("Maximum"),
    
    TOTAL("Total"),
    
    COUNT("Count");

    private String value;

    SupportedAggregationTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SupportedAggregationTypesEnum fromValue(String value) {
      for (SupportedAggregationTypesEnum b : SupportedAggregationTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SupportedAggregationTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SupportedAggregationTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SupportedAggregationTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SupportedAggregationTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SupportedAggregationTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUPPORTED_AGGREGATION_TYPES = "supportedAggregationTypes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_AGGREGATION_TYPES)
  private List<SupportedAggregationTypesEnum> supportedAggregationTypes = new ArrayList<>();

  /**
   * Gets or Sets supportedTimeGrainTypes
   */
  @JsonAdapter(SupportedTimeGrainTypesEnum.Adapter.class)
  public enum SupportedTimeGrainTypesEnum {
    PT1_M("PT1M"),
    
    PT5_M("PT5M"),
    
    PT15_M("PT15M"),
    
    PT30_M("PT30M"),
    
    PT1_H("PT1H"),
    
    PT6_H("PT6H"),
    
    PT12_H("PT12H"),
    
    PT1_D("PT1D");

    private String value;

    SupportedTimeGrainTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SupportedTimeGrainTypesEnum fromValue(String value) {
      for (SupportedTimeGrainTypesEnum b : SupportedTimeGrainTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SupportedTimeGrainTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SupportedTimeGrainTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SupportedTimeGrainTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SupportedTimeGrainTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SupportedTimeGrainTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUPPORTED_TIME_GRAIN_TYPES = "supportedTimeGrainTypes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_TIME_GRAIN_TYPES)
  private List<SupportedTimeGrainTypesEnum> supportedTimeGrainTypes = new ArrayList<>();

  /**
   * Metric units.
   */
  @JsonAdapter(UnitEnum.Adapter.class)
  public enum UnitEnum {
    NOT_SPECIFIED("NotSpecified"),
    
    PERCENT("Percent"),
    
    COUNT("Count"),
    
    SECONDS("Seconds"),
    
    MILLISECONDS("Milliseconds"),
    
    BYTES("Bytes"),
    
    BYTES_PER_SECOND("BytesPerSecond"),
    
    COUNT_PER_SECOND("CountPerSecond");

    private String value;

    UnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnitEnum fromValue(String value) {
      for (UnitEnum b : UnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private UnitEnum unit;

  public MetricSpecificationV1() {
  }

  public MetricSpecificationV1 aggregationType(AggregationTypeEnum aggregationType) {
    this.aggregationType = aggregationType;
    return this;
  }

  /**
   * Metric aggregation type.
   * @return aggregationType
   */
  @javax.annotation.Nullable
  public AggregationTypeEnum getAggregationType() {
    return aggregationType;
  }

  public void setAggregationType(AggregationTypeEnum aggregationType) {
    this.aggregationType = aggregationType;
  }


  public MetricSpecificationV1 category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * Metric category.
   * @return category
   */
  @javax.annotation.Nullable
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public MetricSpecificationV1 dimensions(List<MetricDimensionV1> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public MetricSpecificationV1 addDimensionsItem(MetricDimensionV1 dimensionsItem) {
    if (this.dimensions == null) {
      this.dimensions = new ArrayList<>();
    }
    this.dimensions.add(dimensionsItem);
    return this;
  }

  /**
   * Metric dimensions, other than default dimension which is resource.
   * @return dimensions
   */
  @javax.annotation.Nullable
  public List<MetricDimensionV1> getDimensions() {
    return dimensions;
  }

  public void setDimensions(List<MetricDimensionV1> dimensions) {
    this.dimensions = dimensions;
  }


  public MetricSpecificationV1 displayDescription(String displayDescription) {
    this.displayDescription = displayDescription;
    return this;
  }

  /**
   * Description of the metric to be displayed.
   * @return displayDescription
   */
  @javax.annotation.Nullable
  public String getDisplayDescription() {
    return displayDescription;
  }

  public void setDisplayDescription(String displayDescription) {
    this.displayDescription = displayDescription;
  }


  public MetricSpecificationV1 displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Display name of the metric.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public MetricSpecificationV1 fillGapWithZero(Boolean fillGapWithZero) {
    this.fillGapWithZero = fillGapWithZero;
    return this;
  }

  /**
   * Set true to fill the gaps with zero.
   * @return fillGapWithZero
   */
  @javax.annotation.Nullable
  public Boolean getFillGapWithZero() {
    return fillGapWithZero;
  }

  public void setFillGapWithZero(Boolean fillGapWithZero) {
    this.fillGapWithZero = fillGapWithZero;
  }


  public MetricSpecificationV1 name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the metric.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public MetricSpecificationV1 resourceIdDimensionNameOverride(String resourceIdDimensionNameOverride) {
    this.resourceIdDimensionNameOverride = resourceIdDimensionNameOverride;
    return this;
  }

  /**
   * Resource name override.
   * @return resourceIdDimensionNameOverride
   */
  @javax.annotation.Nullable
  public String getResourceIdDimensionNameOverride() {
    return resourceIdDimensionNameOverride;
  }

  public void setResourceIdDimensionNameOverride(String resourceIdDimensionNameOverride) {
    this.resourceIdDimensionNameOverride = resourceIdDimensionNameOverride;
  }


  public MetricSpecificationV1 supportedAggregationTypes(List<SupportedAggregationTypesEnum> supportedAggregationTypes) {
    this.supportedAggregationTypes = supportedAggregationTypes;
    return this;
  }

  public MetricSpecificationV1 addSupportedAggregationTypesItem(SupportedAggregationTypesEnum supportedAggregationTypesItem) {
    if (this.supportedAggregationTypes == null) {
      this.supportedAggregationTypes = new ArrayList<>();
    }
    this.supportedAggregationTypes.add(supportedAggregationTypesItem);
    return this;
  }

  /**
   * Support metric aggregation type.
   * @return supportedAggregationTypes
   */
  @javax.annotation.Nullable
  public List<SupportedAggregationTypesEnum> getSupportedAggregationTypes() {
    return supportedAggregationTypes;
  }

  public void setSupportedAggregationTypes(List<SupportedAggregationTypesEnum> supportedAggregationTypes) {
    this.supportedAggregationTypes = supportedAggregationTypes;
  }


  public MetricSpecificationV1 supportedTimeGrainTypes(List<SupportedTimeGrainTypesEnum> supportedTimeGrainTypes) {
    this.supportedTimeGrainTypes = supportedTimeGrainTypes;
    return this;
  }

  public MetricSpecificationV1 addSupportedTimeGrainTypesItem(SupportedTimeGrainTypesEnum supportedTimeGrainTypesItem) {
    if (this.supportedTimeGrainTypes == null) {
      this.supportedTimeGrainTypes = new ArrayList<>();
    }
    this.supportedTimeGrainTypes.add(supportedTimeGrainTypesItem);
    return this;
  }

  /**
   * Support granularity of metrics.
   * @return supportedTimeGrainTypes
   */
  @javax.annotation.Nullable
  public List<SupportedTimeGrainTypesEnum> getSupportedTimeGrainTypes() {
    return supportedTimeGrainTypes;
  }

  public void setSupportedTimeGrainTypes(List<SupportedTimeGrainTypesEnum> supportedTimeGrainTypes) {
    this.supportedTimeGrainTypes = supportedTimeGrainTypes;
  }


  public MetricSpecificationV1 unit(UnitEnum unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Metric units.
   * @return unit
   */
  @javax.annotation.Nullable
  public UnitEnum getUnit() {
    return unit;
  }

  public void setUnit(UnitEnum unit) {
    this.unit = unit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricSpecificationV1 metricSpecificationV1 = (MetricSpecificationV1) o;
    return Objects.equals(this.aggregationType, metricSpecificationV1.aggregationType) &&
        Objects.equals(this.category, metricSpecificationV1.category) &&
        Objects.equals(this.dimensions, metricSpecificationV1.dimensions) &&
        Objects.equals(this.displayDescription, metricSpecificationV1.displayDescription) &&
        Objects.equals(this.displayName, metricSpecificationV1.displayName) &&
        Objects.equals(this.fillGapWithZero, metricSpecificationV1.fillGapWithZero) &&
        Objects.equals(this.name, metricSpecificationV1.name) &&
        Objects.equals(this.resourceIdDimensionNameOverride, metricSpecificationV1.resourceIdDimensionNameOverride) &&
        Objects.equals(this.supportedAggregationTypes, metricSpecificationV1.supportedAggregationTypes) &&
        Objects.equals(this.supportedTimeGrainTypes, metricSpecificationV1.supportedTimeGrainTypes) &&
        Objects.equals(this.unit, metricSpecificationV1.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregationType, category, dimensions, displayDescription, displayName, fillGapWithZero, name, resourceIdDimensionNameOverride, supportedAggregationTypes, supportedTimeGrainTypes, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricSpecificationV1 {\n");
    sb.append("    aggregationType: ").append(toIndentedString(aggregationType)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    displayDescription: ").append(toIndentedString(displayDescription)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    fillGapWithZero: ").append(toIndentedString(fillGapWithZero)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resourceIdDimensionNameOverride: ").append(toIndentedString(resourceIdDimensionNameOverride)).append("\n");
    sb.append("    supportedAggregationTypes: ").append(toIndentedString(supportedAggregationTypes)).append("\n");
    sb.append("    supportedTimeGrainTypes: ").append(toIndentedString(supportedTimeGrainTypes)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregationType");
    openapiFields.add("category");
    openapiFields.add("dimensions");
    openapiFields.add("displayDescription");
    openapiFields.add("displayName");
    openapiFields.add("fillGapWithZero");
    openapiFields.add("name");
    openapiFields.add("resourceIdDimensionNameOverride");
    openapiFields.add("supportedAggregationTypes");
    openapiFields.add("supportedTimeGrainTypes");
    openapiFields.add("unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricSpecificationV1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricSpecificationV1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricSpecificationV1 is not found in the empty JSON string", MetricSpecificationV1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricSpecificationV1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricSpecificationV1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aggregationType") != null && !jsonObj.get("aggregationType").isJsonNull()) && !jsonObj.get("aggregationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregationType").toString()));
      }
      // validate the optional field `aggregationType`
      if (jsonObj.get("aggregationType") != null && !jsonObj.get("aggregationType").isJsonNull()) {
        AggregationTypeEnum.validateJsonElement(jsonObj.get("aggregationType"));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CategoryEnum.validateJsonElement(jsonObj.get("category"));
      }
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        JsonArray jsonArraydimensions = jsonObj.getAsJsonArray("dimensions");
        if (jsonArraydimensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("dimensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `dimensions` to be an array in the JSON string but got `%s`", jsonObj.get("dimensions").toString()));
          }

          // validate the optional field `dimensions` (array)
          for (int i = 0; i < jsonArraydimensions.size(); i++) {
            MetricDimensionV1.validateJsonElement(jsonArraydimensions.get(i));
          };
        }
      }
      if ((jsonObj.get("displayDescription") != null && !jsonObj.get("displayDescription").isJsonNull()) && !jsonObj.get("displayDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayDescription").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("resourceIdDimensionNameOverride") != null && !jsonObj.get("resourceIdDimensionNameOverride").isJsonNull()) && !jsonObj.get("resourceIdDimensionNameOverride").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceIdDimensionNameOverride` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceIdDimensionNameOverride").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedAggregationTypes") != null && !jsonObj.get("supportedAggregationTypes").isJsonNull() && !jsonObj.get("supportedAggregationTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedAggregationTypes` to be an array in the JSON string but got `%s`", jsonObj.get("supportedAggregationTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedTimeGrainTypes") != null && !jsonObj.get("supportedTimeGrainTypes").isJsonNull() && !jsonObj.get("supportedTimeGrainTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedTimeGrainTypes` to be an array in the JSON string but got `%s`", jsonObj.get("supportedTimeGrainTypes").toString()));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      // validate the optional field `unit`
      if (jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) {
        UnitEnum.validateJsonElement(jsonObj.get("unit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricSpecificationV1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricSpecificationV1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricSpecificationV1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricSpecificationV1.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricSpecificationV1>() {
           @Override
           public void write(JsonWriter out, MetricSpecificationV1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricSpecificationV1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricSpecificationV1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricSpecificationV1
   * @throws IOException if the JSON string is invalid with respect to MetricSpecificationV1
   */
  public static MetricSpecificationV1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricSpecificationV1.class);
  }

  /**
   * Convert an instance of MetricSpecificationV1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

