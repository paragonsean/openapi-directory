/*
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SkuCost;
import org.openapitools.client.model.SkuLocationInfo;
import org.openapitools.client.model.SkuRestriction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SkuInformation object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:16.994725-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceTypeSku {
  public static final String SERIALIZED_NAME_API_VERSIONS = "apiVersions";
  @SerializedName(SERIALIZED_NAME_API_VERSIONS)
  private List<String> apiVersions = new ArrayList<>();

  public static final String SERIALIZED_NAME_COSTS = "costs";
  @SerializedName(SERIALIZED_NAME_COSTS)
  private List<SkuCost> costs = new ArrayList<>();

  public static final String SERIALIZED_NAME_FAMILY = "family";
  @SerializedName(SERIALIZED_NAME_FAMILY)
  private String family;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LOCATION_INFO = "locationInfo";
  @SerializedName(SERIALIZED_NAME_LOCATION_INFO)
  private List<SkuLocationInfo> locationInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<String> locations = new ArrayList<>();

  /**
   * The Sku name
   */
  @JsonAdapter(NameEnum.Adapter.class)
  public enum NameEnum {
    GATEWAY("Gateway"),
    
    EDGE("Edge"),
    
    TEA_1_NODE("TEA_1Node"),
    
    TEA_1_NODE_UPS("TEA_1Node_UPS"),
    
    TEA_1_NODE_HEATER("TEA_1Node_Heater"),
    
    TEA_1_NODE_UPS_HEATER("TEA_1Node_UPS_Heater"),
    
    TEA_4_NODE_HEATER("TEA_4Node_Heater"),
    
    TEA_4_NODE_UPS_HEATER("TEA_4Node_UPS_Heater"),
    
    TMA("TMA");

    private String value;

    NameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NameEnum fromValue(String value) {
      for (NameEnum b : NameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private NameEnum name;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_RESTRICTIONS = "restrictions";
  @SerializedName(SERIALIZED_NAME_RESTRICTIONS)
  private List<SkuRestriction> restrictions = new ArrayList<>();

  /**
   * The Sku tier
   */
  @JsonAdapter(TierEnum.Adapter.class)
  public enum TierEnum {
    STANDARD("Standard");

    private String value;

    TierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TierEnum fromValue(String value) {
      for (TierEnum b : TierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private TierEnum tier;

  public ResourceTypeSku() {
  }

  public ResourceTypeSku(
     List<String> apiVersions, 
     List<SkuCost> costs, 
     String family, 
     String kind, 
     List<SkuLocationInfo> locationInfo, 
     List<String> locations, 
     NameEnum name, 
     String resourceType, 
     List<SkuRestriction> restrictions, 
     TierEnum tier
  ) {
    this();
    this.apiVersions = apiVersions;
    this.costs = costs;
    this.family = family;
    this.kind = kind;
    this.locationInfo = locationInfo;
    this.locations = locations;
    this.name = name;
    this.resourceType = resourceType;
    this.restrictions = restrictions;
    this.tier = tier;
  }

  /**
   * The API versions in which SKU is available
   * @return apiVersions
   */
  @javax.annotation.Nullable
  public List<String> getApiVersions() {
    return apiVersions;
  }



  /**
   * The pricing info of the Sku.
   * @return costs
   */
  @javax.annotation.Nullable
  public List<SkuCost> getCosts() {
    return costs;
  }



  /**
   * The Sku family
   * @return family
   */
  @javax.annotation.Nullable
  public String getFamily() {
    return family;
  }



  /**
   * The Sku kind
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }



  /**
   * Availability of the SKU for the location/zone
   * @return locationInfo
   */
  @javax.annotation.Nullable
  public List<SkuLocationInfo> getLocationInfo() {
    return locationInfo;
  }



  /**
   * Availability of the SKU for the region
   * @return locations
   */
  @javax.annotation.Nullable
  public List<String> getLocations() {
    return locations;
  }



  /**
   * The Sku name
   * @return name
   */
  @javax.annotation.Nullable
  public NameEnum getName() {
    return name;
  }



  /**
   * The type of the resource
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }



  /**
   * Restrictions of the SKU availability.
   * @return restrictions
   */
  @javax.annotation.Nullable
  public List<SkuRestriction> getRestrictions() {
    return restrictions;
  }



  /**
   * The Sku tier
   * @return tier
   */
  @javax.annotation.Nullable
  public TierEnum getTier() {
    return tier;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceTypeSku resourceTypeSku = (ResourceTypeSku) o;
    return Objects.equals(this.apiVersions, resourceTypeSku.apiVersions) &&
        Objects.equals(this.costs, resourceTypeSku.costs) &&
        Objects.equals(this.family, resourceTypeSku.family) &&
        Objects.equals(this.kind, resourceTypeSku.kind) &&
        Objects.equals(this.locationInfo, resourceTypeSku.locationInfo) &&
        Objects.equals(this.locations, resourceTypeSku.locations) &&
        Objects.equals(this.name, resourceTypeSku.name) &&
        Objects.equals(this.resourceType, resourceTypeSku.resourceType) &&
        Objects.equals(this.restrictions, resourceTypeSku.restrictions) &&
        Objects.equals(this.tier, resourceTypeSku.tier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiVersions, costs, family, kind, locationInfo, locations, name, resourceType, restrictions, tier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceTypeSku {\n");
    sb.append("    apiVersions: ").append(toIndentedString(apiVersions)).append("\n");
    sb.append("    costs: ").append(toIndentedString(costs)).append("\n");
    sb.append("    family: ").append(toIndentedString(family)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    locationInfo: ").append(toIndentedString(locationInfo)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiVersions");
    openapiFields.add("costs");
    openapiFields.add("family");
    openapiFields.add("kind");
    openapiFields.add("locationInfo");
    openapiFields.add("locations");
    openapiFields.add("name");
    openapiFields.add("resourceType");
    openapiFields.add("restrictions");
    openapiFields.add("tier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceTypeSku
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceTypeSku.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceTypeSku is not found in the empty JSON string", ResourceTypeSku.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceTypeSku.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceTypeSku` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("apiVersions") != null && !jsonObj.get("apiVersions").isJsonNull() && !jsonObj.get("apiVersions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiVersions` to be an array in the JSON string but got `%s`", jsonObj.get("apiVersions").toString()));
      }
      if (jsonObj.get("costs") != null && !jsonObj.get("costs").isJsonNull()) {
        JsonArray jsonArraycosts = jsonObj.getAsJsonArray("costs");
        if (jsonArraycosts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("costs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `costs` to be an array in the JSON string but got `%s`", jsonObj.get("costs").toString()));
          }

          // validate the optional field `costs` (array)
          for (int i = 0; i < jsonArraycosts.size(); i++) {
            SkuCost.validateJsonElement(jsonArraycosts.get(i));
          };
        }
      }
      if ((jsonObj.get("family") != null && !jsonObj.get("family").isJsonNull()) && !jsonObj.get("family").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `family` to be a primitive type in the JSON string but got `%s`", jsonObj.get("family").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if (jsonObj.get("locationInfo") != null && !jsonObj.get("locationInfo").isJsonNull()) {
        JsonArray jsonArraylocationInfo = jsonObj.getAsJsonArray("locationInfo");
        if (jsonArraylocationInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locationInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locationInfo` to be an array in the JSON string but got `%s`", jsonObj.get("locationInfo").toString()));
          }

          // validate the optional field `locationInfo` (array)
          for (int i = 0; i < jsonArraylocationInfo.size(); i++) {
            SkuLocationInfo.validateJsonElement(jsonArraylocationInfo.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull() && !jsonObj.get("locations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        NameEnum.validateJsonElement(jsonObj.get("name"));
      }
      if ((jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) && !jsonObj.get("resourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceType").toString()));
      }
      if (jsonObj.get("restrictions") != null && !jsonObj.get("restrictions").isJsonNull()) {
        JsonArray jsonArrayrestrictions = jsonObj.getAsJsonArray("restrictions");
        if (jsonArrayrestrictions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("restrictions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `restrictions` to be an array in the JSON string but got `%s`", jsonObj.get("restrictions").toString()));
          }

          // validate the optional field `restrictions` (array)
          for (int i = 0; i < jsonArrayrestrictions.size(); i++) {
            SkuRestriction.validateJsonElement(jsonArrayrestrictions.get(i));
          };
        }
      }
      if ((jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) && !jsonObj.get("tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier").toString()));
      }
      // validate the optional field `tier`
      if (jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) {
        TierEnum.validateJsonElement(jsonObj.get("tier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceTypeSku.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceTypeSku' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceTypeSku> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceTypeSku.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceTypeSku>() {
           @Override
           public void write(JsonWriter out, ResourceTypeSku value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceTypeSku read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceTypeSku given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceTypeSku
   * @throws IOException if the JSON string is invalid with respect to ResourceTypeSku
   */
  public static ResourceTypeSku fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceTypeSku.class);
  }

  /**
   * Convert an instance of ResourceTypeSku to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

