/*
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AsymmetricEncryptedSecret;
import org.openapitools.client.model.ShareAccessRight;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The user properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:16.994725-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserProperties {
  public static final String SERIALIZED_NAME_ENCRYPTED_PASSWORD = "encryptedPassword";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED_PASSWORD)
  private AsymmetricEncryptedSecret encryptedPassword;

  public static final String SERIALIZED_NAME_SHARE_ACCESS_RIGHTS = "shareAccessRights";
  @SerializedName(SERIALIZED_NAME_SHARE_ACCESS_RIGHTS)
  private List<ShareAccessRight> shareAccessRights = new ArrayList<>();

  /**
   * Type of the user.
   */
  @JsonAdapter(UserTypeEnum.Adapter.class)
  public enum UserTypeEnum {
    SHARE("Share"),
    
    LOCAL_MANAGEMENT("LocalManagement"),
    
    ARM("ARM");

    private String value;

    UserTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserTypeEnum fromValue(String value) {
      for (UserTypeEnum b : UserTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UserTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UserTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UserTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USER_TYPE = "userType";
  @SerializedName(SERIALIZED_NAME_USER_TYPE)
  private UserTypeEnum userType;

  public UserProperties() {
  }

  public UserProperties encryptedPassword(AsymmetricEncryptedSecret encryptedPassword) {
    this.encryptedPassword = encryptedPassword;
    return this;
  }

  /**
   * Get encryptedPassword
   * @return encryptedPassword
   */
  @javax.annotation.Nullable
  public AsymmetricEncryptedSecret getEncryptedPassword() {
    return encryptedPassword;
  }

  public void setEncryptedPassword(AsymmetricEncryptedSecret encryptedPassword) {
    this.encryptedPassword = encryptedPassword;
  }


  public UserProperties shareAccessRights(List<ShareAccessRight> shareAccessRights) {
    this.shareAccessRights = shareAccessRights;
    return this;
  }

  public UserProperties addShareAccessRightsItem(ShareAccessRight shareAccessRightsItem) {
    if (this.shareAccessRights == null) {
      this.shareAccessRights = new ArrayList<>();
    }
    this.shareAccessRights.add(shareAccessRightsItem);
    return this;
  }

  /**
   * List of shares that the user has rights on. This field should not be specified during user creation.
   * @return shareAccessRights
   */
  @javax.annotation.Nullable
  public List<ShareAccessRight> getShareAccessRights() {
    return shareAccessRights;
  }

  public void setShareAccessRights(List<ShareAccessRight> shareAccessRights) {
    this.shareAccessRights = shareAccessRights;
  }


  public UserProperties userType(UserTypeEnum userType) {
    this.userType = userType;
    return this;
  }

  /**
   * Type of the user.
   * @return userType
   */
  @javax.annotation.Nonnull
  public UserTypeEnum getUserType() {
    return userType;
  }

  public void setUserType(UserTypeEnum userType) {
    this.userType = userType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserProperties userProperties = (UserProperties) o;
    return Objects.equals(this.encryptedPassword, userProperties.encryptedPassword) &&
        Objects.equals(this.shareAccessRights, userProperties.shareAccessRights) &&
        Objects.equals(this.userType, userProperties.userType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encryptedPassword, shareAccessRights, userType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserProperties {\n");
    sb.append("    encryptedPassword: ").append(toIndentedString(encryptedPassword)).append("\n");
    sb.append("    shareAccessRights: ").append(toIndentedString(shareAccessRights)).append("\n");
    sb.append("    userType: ").append(toIndentedString(userType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("encryptedPassword");
    openapiFields.add("shareAccessRights");
    openapiFields.add("userType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("userType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserProperties is not found in the empty JSON string", UserProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `encryptedPassword`
      if (jsonObj.get("encryptedPassword") != null && !jsonObj.get("encryptedPassword").isJsonNull()) {
        AsymmetricEncryptedSecret.validateJsonElement(jsonObj.get("encryptedPassword"));
      }
      if (jsonObj.get("shareAccessRights") != null && !jsonObj.get("shareAccessRights").isJsonNull()) {
        JsonArray jsonArrayshareAccessRights = jsonObj.getAsJsonArray("shareAccessRights");
        if (jsonArrayshareAccessRights != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shareAccessRights").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shareAccessRights` to be an array in the JSON string but got `%s`", jsonObj.get("shareAccessRights").toString()));
          }

          // validate the optional field `shareAccessRights` (array)
          for (int i = 0; i < jsonArrayshareAccessRights.size(); i++) {
            ShareAccessRight.validateJsonElement(jsonArrayshareAccessRights.get(i));
          };
        }
      }
      if (!jsonObj.get("userType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userType").toString()));
      }
      // validate the required field `userType`
      UserTypeEnum.validateJsonElement(jsonObj.get("userType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<UserProperties>() {
           @Override
           public void write(JsonWriter out, UserProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserProperties
   * @throws IOException if the JSON string is invalid with respect to UserProperties
   */
  public static UserProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserProperties.class);
  }

  /**
   * Convert an instance of UserProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

