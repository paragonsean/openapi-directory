/*
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.ContactDetails;
import org.openapitools.client.model.OrderStatus;
import org.openapitools.client.model.TrackingInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Order properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:16.994725-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrderProperties {
  public static final String SERIALIZED_NAME_CONTACT_INFORMATION = "contactInformation";
  @SerializedName(SERIALIZED_NAME_CONTACT_INFORMATION)
  private ContactDetails contactInformation;

  public static final String SERIALIZED_NAME_CURRENT_STATUS = "currentStatus";
  @SerializedName(SERIALIZED_NAME_CURRENT_STATUS)
  private OrderStatus currentStatus;

  public static final String SERIALIZED_NAME_DELIVERY_TRACKING_INFO = "deliveryTrackingInfo";
  @SerializedName(SERIALIZED_NAME_DELIVERY_TRACKING_INFO)
  private List<TrackingInfo> deliveryTrackingInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORDER_HISTORY = "orderHistory";
  @SerializedName(SERIALIZED_NAME_ORDER_HISTORY)
  private List<OrderStatus> orderHistory = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETURN_TRACKING_INFO = "returnTrackingInfo";
  @SerializedName(SERIALIZED_NAME_RETURN_TRACKING_INFO)
  private List<TrackingInfo> returnTrackingInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  public static final String SERIALIZED_NAME_SHIPPING_ADDRESS = "shippingAddress";
  @SerializedName(SERIALIZED_NAME_SHIPPING_ADDRESS)
  private Address shippingAddress;

  public OrderProperties() {
  }

  public OrderProperties(
     List<TrackingInfo> deliveryTrackingInfo, 
     List<OrderStatus> orderHistory, 
     List<TrackingInfo> returnTrackingInfo, 
     String serialNumber
  ) {
    this();
    this.deliveryTrackingInfo = deliveryTrackingInfo;
    this.orderHistory = orderHistory;
    this.returnTrackingInfo = returnTrackingInfo;
    this.serialNumber = serialNumber;
  }

  public OrderProperties contactInformation(ContactDetails contactInformation) {
    this.contactInformation = contactInformation;
    return this;
  }

  /**
   * Get contactInformation
   * @return contactInformation
   */
  @javax.annotation.Nonnull
  public ContactDetails getContactInformation() {
    return contactInformation;
  }

  public void setContactInformation(ContactDetails contactInformation) {
    this.contactInformation = contactInformation;
  }


  public OrderProperties currentStatus(OrderStatus currentStatus) {
    this.currentStatus = currentStatus;
    return this;
  }

  /**
   * Get currentStatus
   * @return currentStatus
   */
  @javax.annotation.Nullable
  public OrderStatus getCurrentStatus() {
    return currentStatus;
  }

  public void setCurrentStatus(OrderStatus currentStatus) {
    this.currentStatus = currentStatus;
  }


  /**
   * Tracking information for the package delivered to the customer whether it has an original or a replacement device.
   * @return deliveryTrackingInfo
   */
  @javax.annotation.Nullable
  public List<TrackingInfo> getDeliveryTrackingInfo() {
    return deliveryTrackingInfo;
  }



  /**
   * List of status changes in the order.
   * @return orderHistory
   */
  @javax.annotation.Nullable
  public List<OrderStatus> getOrderHistory() {
    return orderHistory;
  }



  /**
   * Tracking information for the package returned from the customer whether it has an original or a replacement device.
   * @return returnTrackingInfo
   */
  @javax.annotation.Nullable
  public List<TrackingInfo> getReturnTrackingInfo() {
    return returnTrackingInfo;
  }



  /**
   * Serial number of the device.
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }



  public OrderProperties shippingAddress(Address shippingAddress) {
    this.shippingAddress = shippingAddress;
    return this;
  }

  /**
   * Get shippingAddress
   * @return shippingAddress
   */
  @javax.annotation.Nonnull
  public Address getShippingAddress() {
    return shippingAddress;
  }

  public void setShippingAddress(Address shippingAddress) {
    this.shippingAddress = shippingAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrderProperties orderProperties = (OrderProperties) o;
    return Objects.equals(this.contactInformation, orderProperties.contactInformation) &&
        Objects.equals(this.currentStatus, orderProperties.currentStatus) &&
        Objects.equals(this.deliveryTrackingInfo, orderProperties.deliveryTrackingInfo) &&
        Objects.equals(this.orderHistory, orderProperties.orderHistory) &&
        Objects.equals(this.returnTrackingInfo, orderProperties.returnTrackingInfo) &&
        Objects.equals(this.serialNumber, orderProperties.serialNumber) &&
        Objects.equals(this.shippingAddress, orderProperties.shippingAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactInformation, currentStatus, deliveryTrackingInfo, orderHistory, returnTrackingInfo, serialNumber, shippingAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrderProperties {\n");
    sb.append("    contactInformation: ").append(toIndentedString(contactInformation)).append("\n");
    sb.append("    currentStatus: ").append(toIndentedString(currentStatus)).append("\n");
    sb.append("    deliveryTrackingInfo: ").append(toIndentedString(deliveryTrackingInfo)).append("\n");
    sb.append("    orderHistory: ").append(toIndentedString(orderHistory)).append("\n");
    sb.append("    returnTrackingInfo: ").append(toIndentedString(returnTrackingInfo)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    shippingAddress: ").append(toIndentedString(shippingAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contactInformation");
    openapiFields.add("currentStatus");
    openapiFields.add("deliveryTrackingInfo");
    openapiFields.add("orderHistory");
    openapiFields.add("returnTrackingInfo");
    openapiFields.add("serialNumber");
    openapiFields.add("shippingAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contactInformation");
    openapiRequiredFields.add("shippingAddress");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrderProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrderProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrderProperties is not found in the empty JSON string", OrderProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrderProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrderProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrderProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `contactInformation`
      ContactDetails.validateJsonElement(jsonObj.get("contactInformation"));
      // validate the optional field `currentStatus`
      if (jsonObj.get("currentStatus") != null && !jsonObj.get("currentStatus").isJsonNull()) {
        OrderStatus.validateJsonElement(jsonObj.get("currentStatus"));
      }
      if (jsonObj.get("deliveryTrackingInfo") != null && !jsonObj.get("deliveryTrackingInfo").isJsonNull()) {
        JsonArray jsonArraydeliveryTrackingInfo = jsonObj.getAsJsonArray("deliveryTrackingInfo");
        if (jsonArraydeliveryTrackingInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("deliveryTrackingInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `deliveryTrackingInfo` to be an array in the JSON string but got `%s`", jsonObj.get("deliveryTrackingInfo").toString()));
          }

          // validate the optional field `deliveryTrackingInfo` (array)
          for (int i = 0; i < jsonArraydeliveryTrackingInfo.size(); i++) {
            TrackingInfo.validateJsonElement(jsonArraydeliveryTrackingInfo.get(i));
          };
        }
      }
      if (jsonObj.get("orderHistory") != null && !jsonObj.get("orderHistory").isJsonNull()) {
        JsonArray jsonArrayorderHistory = jsonObj.getAsJsonArray("orderHistory");
        if (jsonArrayorderHistory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orderHistory").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orderHistory` to be an array in the JSON string but got `%s`", jsonObj.get("orderHistory").toString()));
          }

          // validate the optional field `orderHistory` (array)
          for (int i = 0; i < jsonArrayorderHistory.size(); i++) {
            OrderStatus.validateJsonElement(jsonArrayorderHistory.get(i));
          };
        }
      }
      if (jsonObj.get("returnTrackingInfo") != null && !jsonObj.get("returnTrackingInfo").isJsonNull()) {
        JsonArray jsonArrayreturnTrackingInfo = jsonObj.getAsJsonArray("returnTrackingInfo");
        if (jsonArrayreturnTrackingInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("returnTrackingInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `returnTrackingInfo` to be an array in the JSON string but got `%s`", jsonObj.get("returnTrackingInfo").toString()));
          }

          // validate the optional field `returnTrackingInfo` (array)
          for (int i = 0; i < jsonArrayreturnTrackingInfo.size(); i++) {
            TrackingInfo.validateJsonElement(jsonArrayreturnTrackingInfo.get(i));
          };
        }
      }
      if ((jsonObj.get("serialNumber") != null && !jsonObj.get("serialNumber").isJsonNull()) && !jsonObj.get("serialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serialNumber").toString()));
      }
      // validate the required field `shippingAddress`
      Address.validateJsonElement(jsonObj.get("shippingAddress"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrderProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrderProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrderProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrderProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<OrderProperties>() {
           @Override
           public void write(JsonWriter out, OrderProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrderProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrderProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrderProperties
   * @throws IOException if the JSON string is invalid with respect to OrderProperties
   */
  public static OrderProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrderProperties.class);
  }

  /**
   * Convert an instance of OrderProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

