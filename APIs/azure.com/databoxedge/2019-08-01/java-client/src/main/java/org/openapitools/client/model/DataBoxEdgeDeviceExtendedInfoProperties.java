/*
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the Data Box Edge/Gateway device extended info.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:16.994725-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataBoxEdgeDeviceExtendedInfoProperties {
  public static final String SERIALIZED_NAME_ENCRYPTION_KEY = "encryptionKey";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_KEY)
  private String encryptionKey;

  public static final String SERIALIZED_NAME_ENCRYPTION_KEY_THUMBPRINT = "encryptionKeyThumbprint";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_KEY_THUMBPRINT)
  private String encryptionKeyThumbprint;

  public static final String SERIALIZED_NAME_RESOURCE_KEY = "resourceKey";
  @SerializedName(SERIALIZED_NAME_RESOURCE_KEY)
  private String resourceKey;

  public DataBoxEdgeDeviceExtendedInfoProperties() {
  }

  public DataBoxEdgeDeviceExtendedInfoProperties(
     String resourceKey
  ) {
    this();
    this.resourceKey = resourceKey;
  }

  public DataBoxEdgeDeviceExtendedInfoProperties encryptionKey(String encryptionKey) {
    this.encryptionKey = encryptionKey;
    return this;
  }

  /**
   * The public part of the encryption certificate. Client uses this to encrypt any secret.
   * @return encryptionKey
   */
  @javax.annotation.Nullable
  public String getEncryptionKey() {
    return encryptionKey;
  }

  public void setEncryptionKey(String encryptionKey) {
    this.encryptionKey = encryptionKey;
  }


  public DataBoxEdgeDeviceExtendedInfoProperties encryptionKeyThumbprint(String encryptionKeyThumbprint) {
    this.encryptionKeyThumbprint = encryptionKeyThumbprint;
    return this;
  }

  /**
   * The digital signature of encrypted certificate.
   * @return encryptionKeyThumbprint
   */
  @javax.annotation.Nullable
  public String getEncryptionKeyThumbprint() {
    return encryptionKeyThumbprint;
  }

  public void setEncryptionKeyThumbprint(String encryptionKeyThumbprint) {
    this.encryptionKeyThumbprint = encryptionKeyThumbprint;
  }


  /**
   * The Resource ID of the Resource.
   * @return resourceKey
   */
  @javax.annotation.Nullable
  public String getResourceKey() {
    return resourceKey;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataBoxEdgeDeviceExtendedInfoProperties dataBoxEdgeDeviceExtendedInfoProperties = (DataBoxEdgeDeviceExtendedInfoProperties) o;
    return Objects.equals(this.encryptionKey, dataBoxEdgeDeviceExtendedInfoProperties.encryptionKey) &&
        Objects.equals(this.encryptionKeyThumbprint, dataBoxEdgeDeviceExtendedInfoProperties.encryptionKeyThumbprint) &&
        Objects.equals(this.resourceKey, dataBoxEdgeDeviceExtendedInfoProperties.resourceKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encryptionKey, encryptionKeyThumbprint, resourceKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataBoxEdgeDeviceExtendedInfoProperties {\n");
    sb.append("    encryptionKey: ").append(toIndentedString(encryptionKey)).append("\n");
    sb.append("    encryptionKeyThumbprint: ").append(toIndentedString(encryptionKeyThumbprint)).append("\n");
    sb.append("    resourceKey: ").append(toIndentedString(resourceKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("encryptionKey");
    openapiFields.add("encryptionKeyThumbprint");
    openapiFields.add("resourceKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataBoxEdgeDeviceExtendedInfoProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataBoxEdgeDeviceExtendedInfoProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataBoxEdgeDeviceExtendedInfoProperties is not found in the empty JSON string", DataBoxEdgeDeviceExtendedInfoProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataBoxEdgeDeviceExtendedInfoProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataBoxEdgeDeviceExtendedInfoProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("encryptionKey") != null && !jsonObj.get("encryptionKey").isJsonNull()) && !jsonObj.get("encryptionKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionKey").toString()));
      }
      if ((jsonObj.get("encryptionKeyThumbprint") != null && !jsonObj.get("encryptionKeyThumbprint").isJsonNull()) && !jsonObj.get("encryptionKeyThumbprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionKeyThumbprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionKeyThumbprint").toString()));
      }
      if ((jsonObj.get("resourceKey") != null && !jsonObj.get("resourceKey").isJsonNull()) && !jsonObj.get("resourceKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataBoxEdgeDeviceExtendedInfoProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataBoxEdgeDeviceExtendedInfoProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataBoxEdgeDeviceExtendedInfoProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataBoxEdgeDeviceExtendedInfoProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DataBoxEdgeDeviceExtendedInfoProperties>() {
           @Override
           public void write(JsonWriter out, DataBoxEdgeDeviceExtendedInfoProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataBoxEdgeDeviceExtendedInfoProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataBoxEdgeDeviceExtendedInfoProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataBoxEdgeDeviceExtendedInfoProperties
   * @throws IOException if the JSON string is invalid with respect to DataBoxEdgeDeviceExtendedInfoProperties
   */
  public static DataBoxEdgeDeviceExtendedInfoProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataBoxEdgeDeviceExtendedInfoProperties.class);
  }

  /**
   * Convert an instance of DataBoxEdgeDeviceExtendedInfoProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

