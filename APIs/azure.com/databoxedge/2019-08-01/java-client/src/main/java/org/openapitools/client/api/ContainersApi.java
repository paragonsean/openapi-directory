/*
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.Container;
import org.openapitools.client.model.ContainerList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContainersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContainersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContainersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for containersCreateOrUpdate
     * @param deviceName The device name. (required)
     * @param storageAccountName The Storage Account Name (required)
     * @param containerName The container name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param container The container properties. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the container. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the container. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containersCreateOrUpdateCall(String deviceName, String storageAccountName, String containerName, String subscriptionId, String resourceGroupName, String apiVersion, Container container, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = container;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts/{storageAccountName}/containers/{containerName}"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "storageAccountName" + "}", localVarApiClient.escapeString(storageAccountName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call containersCreateOrUpdateValidateBeforeCall(String deviceName, String storageAccountName, String containerName, String subscriptionId, String resourceGroupName, String apiVersion, Container container, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling containersCreateOrUpdate(Async)");
        }

        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling containersCreateOrUpdate(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling containersCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling containersCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling containersCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling containersCreateOrUpdate(Async)");
        }

        // verify the required parameter 'container' is set
        if (container == null) {
            throw new ApiException("Missing the required parameter 'container' when calling containersCreateOrUpdate(Async)");
        }

        return containersCreateOrUpdateCall(deviceName, storageAccountName, containerName, subscriptionId, resourceGroupName, apiVersion, container, _callback);

    }

    /**
     * Creates a new container or updates an existing container on the device.
     * 
     * @param deviceName The device name. (required)
     * @param storageAccountName The Storage Account Name (required)
     * @param containerName The container name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param container The container properties. (required)
     * @return Container
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the container. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the container. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Container containersCreateOrUpdate(String deviceName, String storageAccountName, String containerName, String subscriptionId, String resourceGroupName, String apiVersion, Container container) throws ApiException {
        ApiResponse<Container> localVarResp = containersCreateOrUpdateWithHttpInfo(deviceName, storageAccountName, containerName, subscriptionId, resourceGroupName, apiVersion, container);
        return localVarResp.getData();
    }

    /**
     * Creates a new container or updates an existing container on the device.
     * 
     * @param deviceName The device name. (required)
     * @param storageAccountName The Storage Account Name (required)
     * @param containerName The container name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param container The container properties. (required)
     * @return ApiResponse&lt;Container&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the container. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the container. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Container> containersCreateOrUpdateWithHttpInfo(String deviceName, String storageAccountName, String containerName, String subscriptionId, String resourceGroupName, String apiVersion, Container container) throws ApiException {
        okhttp3.Call localVarCall = containersCreateOrUpdateValidateBeforeCall(deviceName, storageAccountName, containerName, subscriptionId, resourceGroupName, apiVersion, container, null);
        Type localVarReturnType = new TypeToken<Container>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new container or updates an existing container on the device. (asynchronously)
     * 
     * @param deviceName The device name. (required)
     * @param storageAccountName The Storage Account Name (required)
     * @param containerName The container name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param container The container properties. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the container. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the container. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containersCreateOrUpdateAsync(String deviceName, String storageAccountName, String containerName, String subscriptionId, String resourceGroupName, String apiVersion, Container container, final ApiCallback<Container> _callback) throws ApiException {

        okhttp3.Call localVarCall = containersCreateOrUpdateValidateBeforeCall(deviceName, storageAccountName, containerName, subscriptionId, resourceGroupName, apiVersion, container, _callback);
        Type localVarReturnType = new TypeToken<Container>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for containersDelete
     * @param deviceName The device name. (required)
     * @param storageAccountName The Storage Account Name (required)
     * @param containerName The container name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the container. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The container is already deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containersDeleteCall(String deviceName, String storageAccountName, String containerName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts/{storageAccountName}/containers/{containerName}"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "storageAccountName" + "}", localVarApiClient.escapeString(storageAccountName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call containersDeleteValidateBeforeCall(String deviceName, String storageAccountName, String containerName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling containersDelete(Async)");
        }

        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling containersDelete(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling containersDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling containersDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling containersDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling containersDelete(Async)");
        }

        return containersDeleteCall(deviceName, storageAccountName, containerName, subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the container on the Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name. (required)
     * @param storageAccountName The Storage Account Name (required)
     * @param containerName The container name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the container. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The container is already deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void containersDelete(String deviceName, String storageAccountName, String containerName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        containersDeleteWithHttpInfo(deviceName, storageAccountName, containerName, subscriptionId, resourceGroupName, apiVersion);
    }

    /**
     * 
     * Deletes the container on the Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name. (required)
     * @param storageAccountName The Storage Account Name (required)
     * @param containerName The container name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the container. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The container is already deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> containersDeleteWithHttpInfo(String deviceName, String storageAccountName, String containerName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = containersDeleteValidateBeforeCall(deviceName, storageAccountName, containerName, subscriptionId, resourceGroupName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the container on the Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name. (required)
     * @param storageAccountName The Storage Account Name (required)
     * @param containerName The container name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the container. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The container is already deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containersDeleteAsync(String deviceName, String storageAccountName, String containerName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = containersDeleteValidateBeforeCall(deviceName, storageAccountName, containerName, subscriptionId, resourceGroupName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for containersGet
     * @param deviceName The device name. (required)
     * @param storageAccountName The Storage Account Name (required)
     * @param containerName The container Name (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The container details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containersGetCall(String deviceName, String storageAccountName, String containerName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts/{storageAccountName}/containers/{containerName}"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "storageAccountName" + "}", localVarApiClient.escapeString(storageAccountName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call containersGetValidateBeforeCall(String deviceName, String storageAccountName, String containerName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling containersGet(Async)");
        }

        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling containersGet(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling containersGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling containersGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling containersGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling containersGet(Async)");
        }

        return containersGetCall(deviceName, storageAccountName, containerName, subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * Gets a container by name.
     * 
     * @param deviceName The device name. (required)
     * @param storageAccountName The Storage Account Name (required)
     * @param containerName The container Name (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @return Container
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The container details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Container containersGet(String deviceName, String storageAccountName, String containerName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<Container> localVarResp = containersGetWithHttpInfo(deviceName, storageAccountName, containerName, subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a container by name.
     * 
     * @param deviceName The device name. (required)
     * @param storageAccountName The Storage Account Name (required)
     * @param containerName The container Name (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Container&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The container details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Container> containersGetWithHttpInfo(String deviceName, String storageAccountName, String containerName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = containersGetValidateBeforeCall(deviceName, storageAccountName, containerName, subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Container>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a container by name. (asynchronously)
     * 
     * @param deviceName The device name. (required)
     * @param storageAccountName The Storage Account Name (required)
     * @param containerName The container Name (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The container details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containersGetAsync(String deviceName, String storageAccountName, String containerName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<Container> _callback) throws ApiException {

        okhttp3.Call localVarCall = containersGetValidateBeforeCall(deviceName, storageAccountName, containerName, subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Container>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for containersListByStorageAccount
     * @param deviceName The device name. (required)
     * @param storageAccountName The storage Account name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of all the containers on the device. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containersListByStorageAccountCall(String deviceName, String storageAccountName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts/{storageAccountName}/containers"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "storageAccountName" + "}", localVarApiClient.escapeString(storageAccountName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call containersListByStorageAccountValidateBeforeCall(String deviceName, String storageAccountName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling containersListByStorageAccount(Async)");
        }

        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling containersListByStorageAccount(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling containersListByStorageAccount(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling containersListByStorageAccount(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling containersListByStorageAccount(Async)");
        }

        return containersListByStorageAccountCall(deviceName, storageAccountName, subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * Lists all the containers of a storage Account in a Data Box Edge/Data Box Gateway device.
     * 
     * @param deviceName The device name. (required)
     * @param storageAccountName The storage Account name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @return ContainerList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of all the containers on the device. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ContainerList containersListByStorageAccount(String deviceName, String storageAccountName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<ContainerList> localVarResp = containersListByStorageAccountWithHttpInfo(deviceName, storageAccountName, subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Lists all the containers of a storage Account in a Data Box Edge/Data Box Gateway device.
     * 
     * @param deviceName The device name. (required)
     * @param storageAccountName The storage Account name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;ContainerList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of all the containers on the device. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContainerList> containersListByStorageAccountWithHttpInfo(String deviceName, String storageAccountName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = containersListByStorageAccountValidateBeforeCall(deviceName, storageAccountName, subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ContainerList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all the containers of a storage Account in a Data Box Edge/Data Box Gateway device. (asynchronously)
     * 
     * @param deviceName The device name. (required)
     * @param storageAccountName The storage Account name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of all the containers on the device. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containersListByStorageAccountAsync(String deviceName, String storageAccountName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<ContainerList> _callback) throws ApiException {

        okhttp3.Call localVarCall = containersListByStorageAccountValidateBeforeCall(deviceName, storageAccountName, subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ContainerList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for containersRefresh
     * @param deviceName The device name. (required)
     * @param storageAccountName The Storage Account Name (required)
     * @param containerName The container name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully refreshed the container on the device. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to refresh the container on the device. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containersRefreshCall(String deviceName, String storageAccountName, String containerName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts/{storageAccountName}/containers/{containerName}/refresh"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "storageAccountName" + "}", localVarApiClient.escapeString(storageAccountName.toString()))
            .replace("{" + "containerName" + "}", localVarApiClient.escapeString(containerName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call containersRefreshValidateBeforeCall(String deviceName, String storageAccountName, String containerName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling containersRefresh(Async)");
        }

        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling containersRefresh(Async)");
        }

        // verify the required parameter 'containerName' is set
        if (containerName == null) {
            throw new ApiException("Missing the required parameter 'containerName' when calling containersRefresh(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling containersRefresh(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling containersRefresh(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling containersRefresh(Async)");
        }

        return containersRefreshCall(deviceName, storageAccountName, containerName, subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * Refreshes the container metadata with the data from the cloud.
     * 
     * @param deviceName The device name. (required)
     * @param storageAccountName The Storage Account Name (required)
     * @param containerName The container name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully refreshed the container on the device. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to refresh the container on the device. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void containersRefresh(String deviceName, String storageAccountName, String containerName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        containersRefreshWithHttpInfo(deviceName, storageAccountName, containerName, subscriptionId, resourceGroupName, apiVersion);
    }

    /**
     * Refreshes the container metadata with the data from the cloud.
     * 
     * @param deviceName The device name. (required)
     * @param storageAccountName The Storage Account Name (required)
     * @param containerName The container name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully refreshed the container on the device. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to refresh the container on the device. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> containersRefreshWithHttpInfo(String deviceName, String storageAccountName, String containerName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = containersRefreshValidateBeforeCall(deviceName, storageAccountName, containerName, subscriptionId, resourceGroupName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Refreshes the container metadata with the data from the cloud. (asynchronously)
     * 
     * @param deviceName The device name. (required)
     * @param storageAccountName The Storage Account Name (required)
     * @param containerName The container name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully refreshed the container on the device. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to refresh the container on the device. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call containersRefreshAsync(String deviceName, String storageAccountName, String containerName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = containersRefreshValidateBeforeCall(deviceName, storageAccountName, containerName, subscriptionId, resourceGroupName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
