/*
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.StorageAccount;
import org.openapitools.client.model.StorageAccountList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StorageAccountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StorageAccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StorageAccountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for storageAccountsCreateOrUpdate
     * @param deviceName The device name. (required)
     * @param storageAccountName The StorageAccount name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param storageAccount The StorageAccount properties. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the StorageAccount. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the StorageAccount. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageAccountsCreateOrUpdateCall(String deviceName, String storageAccountName, String subscriptionId, String resourceGroupName, String apiVersion, StorageAccount storageAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = storageAccount;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts/{storageAccountName}"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "storageAccountName" + "}", localVarApiClient.escapeString(storageAccountName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageAccountsCreateOrUpdateValidateBeforeCall(String deviceName, String storageAccountName, String subscriptionId, String resourceGroupName, String apiVersion, StorageAccount storageAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling storageAccountsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling storageAccountsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling storageAccountsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling storageAccountsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling storageAccountsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'storageAccount' is set
        if (storageAccount == null) {
            throw new ApiException("Missing the required parameter 'storageAccount' when calling storageAccountsCreateOrUpdate(Async)");
        }

        return storageAccountsCreateOrUpdateCall(deviceName, storageAccountName, subscriptionId, resourceGroupName, apiVersion, storageAccount, _callback);

    }

    /**
     * Creates a new StorageAccount or updates an existing StorageAccount on the device.
     * 
     * @param deviceName The device name. (required)
     * @param storageAccountName The StorageAccount name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param storageAccount The StorageAccount properties. (required)
     * @return StorageAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the StorageAccount. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the StorageAccount. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public StorageAccount storageAccountsCreateOrUpdate(String deviceName, String storageAccountName, String subscriptionId, String resourceGroupName, String apiVersion, StorageAccount storageAccount) throws ApiException {
        ApiResponse<StorageAccount> localVarResp = storageAccountsCreateOrUpdateWithHttpInfo(deviceName, storageAccountName, subscriptionId, resourceGroupName, apiVersion, storageAccount);
        return localVarResp.getData();
    }

    /**
     * Creates a new StorageAccount or updates an existing StorageAccount on the device.
     * 
     * @param deviceName The device name. (required)
     * @param storageAccountName The StorageAccount name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param storageAccount The StorageAccount properties. (required)
     * @return ApiResponse&lt;StorageAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the StorageAccount. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the StorageAccount. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorageAccount> storageAccountsCreateOrUpdateWithHttpInfo(String deviceName, String storageAccountName, String subscriptionId, String resourceGroupName, String apiVersion, StorageAccount storageAccount) throws ApiException {
        okhttp3.Call localVarCall = storageAccountsCreateOrUpdateValidateBeforeCall(deviceName, storageAccountName, subscriptionId, resourceGroupName, apiVersion, storageAccount, null);
        Type localVarReturnType = new TypeToken<StorageAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new StorageAccount or updates an existing StorageAccount on the device. (asynchronously)
     * 
     * @param deviceName The device name. (required)
     * @param storageAccountName The StorageAccount name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param storageAccount The StorageAccount properties. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the StorageAccount. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the StorageAccount. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageAccountsCreateOrUpdateAsync(String deviceName, String storageAccountName, String subscriptionId, String resourceGroupName, String apiVersion, StorageAccount storageAccount, final ApiCallback<StorageAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageAccountsCreateOrUpdateValidateBeforeCall(deviceName, storageAccountName, subscriptionId, resourceGroupName, apiVersion, storageAccount, _callback);
        Type localVarReturnType = new TypeToken<StorageAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageAccountsDelete
     * @param deviceName The device name. (required)
     * @param storageAccountName The StorageAccount name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the StorageAccount. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The StorageAccount is already deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageAccountsDeleteCall(String deviceName, String storageAccountName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts/{storageAccountName}"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "storageAccountName" + "}", localVarApiClient.escapeString(storageAccountName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageAccountsDeleteValidateBeforeCall(String deviceName, String storageAccountName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling storageAccountsDelete(Async)");
        }

        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling storageAccountsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling storageAccountsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling storageAccountsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling storageAccountsDelete(Async)");
        }

        return storageAccountsDeleteCall(deviceName, storageAccountName, subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the StorageAccount on the Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name. (required)
     * @param storageAccountName The StorageAccount name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the StorageAccount. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The StorageAccount is already deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void storageAccountsDelete(String deviceName, String storageAccountName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        storageAccountsDeleteWithHttpInfo(deviceName, storageAccountName, subscriptionId, resourceGroupName, apiVersion);
    }

    /**
     * 
     * Deletes the StorageAccount on the Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name. (required)
     * @param storageAccountName The StorageAccount name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the StorageAccount. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The StorageAccount is already deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> storageAccountsDeleteWithHttpInfo(String deviceName, String storageAccountName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = storageAccountsDeleteValidateBeforeCall(deviceName, storageAccountName, subscriptionId, resourceGroupName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the StorageAccount on the Data Box Edge/Data Box Gateway device.
     * @param deviceName The device name. (required)
     * @param storageAccountName The StorageAccount name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the StorageAccount. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The StorageAccount is already deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageAccountsDeleteAsync(String deviceName, String storageAccountName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageAccountsDeleteValidateBeforeCall(deviceName, storageAccountName, subscriptionId, resourceGroupName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageAccountsGet
     * @param deviceName The device name. (required)
     * @param storageAccountName The storage account name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The storage account details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageAccountsGetCall(String deviceName, String storageAccountName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts/{storageAccountName}"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "storageAccountName" + "}", localVarApiClient.escapeString(storageAccountName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageAccountsGetValidateBeforeCall(String deviceName, String storageAccountName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling storageAccountsGet(Async)");
        }

        // verify the required parameter 'storageAccountName' is set
        if (storageAccountName == null) {
            throw new ApiException("Missing the required parameter 'storageAccountName' when calling storageAccountsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling storageAccountsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling storageAccountsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling storageAccountsGet(Async)");
        }

        return storageAccountsGetCall(deviceName, storageAccountName, subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * Gets a StorageAccount by name.
     * 
     * @param deviceName The device name. (required)
     * @param storageAccountName The storage account name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @return StorageAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The storage account details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public StorageAccount storageAccountsGet(String deviceName, String storageAccountName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<StorageAccount> localVarResp = storageAccountsGetWithHttpInfo(deviceName, storageAccountName, subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets a StorageAccount by name.
     * 
     * @param deviceName The device name. (required)
     * @param storageAccountName The storage account name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;StorageAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The storage account details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorageAccount> storageAccountsGetWithHttpInfo(String deviceName, String storageAccountName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = storageAccountsGetValidateBeforeCall(deviceName, storageAccountName, subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<StorageAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a StorageAccount by name. (asynchronously)
     * 
     * @param deviceName The device name. (required)
     * @param storageAccountName The storage account name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The storage account details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageAccountsGetAsync(String deviceName, String storageAccountName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<StorageAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageAccountsGetValidateBeforeCall(deviceName, storageAccountName, subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<StorageAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageAccountsListByDataBoxEdgeDevice
     * @param deviceName The device name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of all the StorageAccounts on the device. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageAccountsListByDataBoxEdgeDeviceCall(String deviceName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/storageAccounts"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageAccountsListByDataBoxEdgeDeviceValidateBeforeCall(String deviceName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling storageAccountsListByDataBoxEdgeDevice(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling storageAccountsListByDataBoxEdgeDevice(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling storageAccountsListByDataBoxEdgeDevice(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling storageAccountsListByDataBoxEdgeDevice(Async)");
        }

        return storageAccountsListByDataBoxEdgeDeviceCall(deviceName, subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * Lists all the storage accounts in a Data Box Edge/Data Box Gateway device.
     * 
     * @param deviceName The device name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @return StorageAccountList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of all the StorageAccounts on the device. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public StorageAccountList storageAccountsListByDataBoxEdgeDevice(String deviceName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<StorageAccountList> localVarResp = storageAccountsListByDataBoxEdgeDeviceWithHttpInfo(deviceName, subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Lists all the storage accounts in a Data Box Edge/Data Box Gateway device.
     * 
     * @param deviceName The device name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;StorageAccountList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of all the StorageAccounts on the device. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StorageAccountList> storageAccountsListByDataBoxEdgeDeviceWithHttpInfo(String deviceName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = storageAccountsListByDataBoxEdgeDeviceValidateBeforeCall(deviceName, subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<StorageAccountList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists all the storage accounts in a Data Box Edge/Data Box Gateway device. (asynchronously)
     * 
     * @param deviceName The device name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The collection of all the StorageAccounts on the device. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageAccountsListByDataBoxEdgeDeviceAsync(String deviceName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<StorageAccountList> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageAccountsListByDataBoxEdgeDeviceValidateBeforeCall(deviceName, subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<StorageAccountList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
