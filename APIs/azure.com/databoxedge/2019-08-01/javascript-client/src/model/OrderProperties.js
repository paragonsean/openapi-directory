/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import ContactDetails from './ContactDetails';
import OrderStatus from './OrderStatus';
import TrackingInfo from './TrackingInfo';

/**
 * The OrderProperties model module.
 * @module model/OrderProperties
 * @version 2019-08-01
 */
class OrderProperties {
    /**
     * Constructs a new <code>OrderProperties</code>.
     * Order properties.
     * @alias module:model/OrderProperties
     * @param contactInformation {module:model/ContactDetails} 
     * @param shippingAddress {module:model/Address} 
     */
    constructor(contactInformation, shippingAddress) { 
        
        OrderProperties.initialize(this, contactInformation, shippingAddress);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contactInformation, shippingAddress) { 
        obj['contactInformation'] = contactInformation;
        obj['shippingAddress'] = shippingAddress;
    }

    /**
     * Constructs a <code>OrderProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderProperties} obj Optional instance to populate.
     * @return {module:model/OrderProperties} The populated <code>OrderProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderProperties();

            if (data.hasOwnProperty('contactInformation')) {
                obj['contactInformation'] = ContactDetails.constructFromObject(data['contactInformation']);
            }
            if (data.hasOwnProperty('currentStatus')) {
                obj['currentStatus'] = OrderStatus.constructFromObject(data['currentStatus']);
            }
            if (data.hasOwnProperty('deliveryTrackingInfo')) {
                obj['deliveryTrackingInfo'] = ApiClient.convertToType(data['deliveryTrackingInfo'], [TrackingInfo]);
            }
            if (data.hasOwnProperty('orderHistory')) {
                obj['orderHistory'] = ApiClient.convertToType(data['orderHistory'], [OrderStatus]);
            }
            if (data.hasOwnProperty('returnTrackingInfo')) {
                obj['returnTrackingInfo'] = ApiClient.convertToType(data['returnTrackingInfo'], [TrackingInfo]);
            }
            if (data.hasOwnProperty('serialNumber')) {
                obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'String');
            }
            if (data.hasOwnProperty('shippingAddress')) {
                obj['shippingAddress'] = Address.constructFromObject(data['shippingAddress']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OrderProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `contactInformation`
        if (data['contactInformation']) { // data not null
          ContactDetails.validateJSON(data['contactInformation']);
        }
        // validate the optional field `currentStatus`
        if (data['currentStatus']) { // data not null
          OrderStatus.validateJSON(data['currentStatus']);
        }
        if (data['deliveryTrackingInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['deliveryTrackingInfo'])) {
                throw new Error("Expected the field `deliveryTrackingInfo` to be an array in the JSON data but got " + data['deliveryTrackingInfo']);
            }
            // validate the optional field `deliveryTrackingInfo` (array)
            for (const item of data['deliveryTrackingInfo']) {
                TrackingInfo.validateJSON(item);
            };
        }
        if (data['orderHistory']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['orderHistory'])) {
                throw new Error("Expected the field `orderHistory` to be an array in the JSON data but got " + data['orderHistory']);
            }
            // validate the optional field `orderHistory` (array)
            for (const item of data['orderHistory']) {
                OrderStatus.validateJSON(item);
            };
        }
        if (data['returnTrackingInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['returnTrackingInfo'])) {
                throw new Error("Expected the field `returnTrackingInfo` to be an array in the JSON data but got " + data['returnTrackingInfo']);
            }
            // validate the optional field `returnTrackingInfo` (array)
            for (const item of data['returnTrackingInfo']) {
                TrackingInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['serialNumber'] && !(typeof data['serialNumber'] === 'string' || data['serialNumber'] instanceof String)) {
            throw new Error("Expected the field `serialNumber` to be a primitive type in the JSON string but got " + data['serialNumber']);
        }
        // validate the optional field `shippingAddress`
        if (data['shippingAddress']) { // data not null
          Address.validateJSON(data['shippingAddress']);
        }

        return true;
    }


}

OrderProperties.RequiredProperties = ["contactInformation", "shippingAddress"];

/**
 * @member {module:model/ContactDetails} contactInformation
 */
OrderProperties.prototype['contactInformation'] = undefined;

/**
 * @member {module:model/OrderStatus} currentStatus
 */
OrderProperties.prototype['currentStatus'] = undefined;

/**
 * Tracking information for the package delivered to the customer whether it has an original or a replacement device.
 * @member {Array.<module:model/TrackingInfo>} deliveryTrackingInfo
 */
OrderProperties.prototype['deliveryTrackingInfo'] = undefined;

/**
 * List of status changes in the order.
 * @member {Array.<module:model/OrderStatus>} orderHistory
 */
OrderProperties.prototype['orderHistory'] = undefined;

/**
 * Tracking information for the package returned from the customer whether it has an original or a replacement device.
 * @member {Array.<module:model/TrackingInfo>} returnTrackingInfo
 */
OrderProperties.prototype['returnTrackingInfo'] = undefined;

/**
 * Serial number of the device.
 * @member {String} serialNumber
 */
OrderProperties.prototype['serialNumber'] = undefined;

/**
 * @member {module:model/Address} shippingAddress
 */
OrderProperties.prototype['shippingAddress'] = undefined;






export default OrderProperties;

