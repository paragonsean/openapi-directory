/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AzureContainerInfo model module.
 * @module model/AzureContainerInfo
 * @version 2019-08-01
 */
class AzureContainerInfo {
    /**
     * Constructs a new <code>AzureContainerInfo</code>.
     * Azure container mapping of the endpoint.
     * @alias module:model/AzureContainerInfo
     * @param containerName {String} Container name (Based on the data format specified, this represents the name of Azure Files/Page blob/Block blob).
     * @param dataFormat {module:model/AzureContainerInfo.DataFormatEnum} Storage format used for the file represented by the share.
     * @param storageAccountCredentialId {String} ID of the storage account credential used to access storage.
     */
    constructor(containerName, dataFormat, storageAccountCredentialId) { 
        
        AzureContainerInfo.initialize(this, containerName, dataFormat, storageAccountCredentialId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, containerName, dataFormat, storageAccountCredentialId) { 
        obj['containerName'] = containerName;
        obj['dataFormat'] = dataFormat;
        obj['storageAccountCredentialId'] = storageAccountCredentialId;
    }

    /**
     * Constructs a <code>AzureContainerInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AzureContainerInfo} obj Optional instance to populate.
     * @return {module:model/AzureContainerInfo} The populated <code>AzureContainerInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AzureContainerInfo();

            if (data.hasOwnProperty('containerName')) {
                obj['containerName'] = ApiClient.convertToType(data['containerName'], 'String');
            }
            if (data.hasOwnProperty('dataFormat')) {
                obj['dataFormat'] = ApiClient.convertToType(data['dataFormat'], 'String');
            }
            if (data.hasOwnProperty('storageAccountCredentialId')) {
                obj['storageAccountCredentialId'] = ApiClient.convertToType(data['storageAccountCredentialId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AzureContainerInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AzureContainerInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AzureContainerInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['containerName'] && !(typeof data['containerName'] === 'string' || data['containerName'] instanceof String)) {
            throw new Error("Expected the field `containerName` to be a primitive type in the JSON string but got " + data['containerName']);
        }
        // ensure the json data is a string
        if (data['dataFormat'] && !(typeof data['dataFormat'] === 'string' || data['dataFormat'] instanceof String)) {
            throw new Error("Expected the field `dataFormat` to be a primitive type in the JSON string but got " + data['dataFormat']);
        }
        // ensure the json data is a string
        if (data['storageAccountCredentialId'] && !(typeof data['storageAccountCredentialId'] === 'string' || data['storageAccountCredentialId'] instanceof String)) {
            throw new Error("Expected the field `storageAccountCredentialId` to be a primitive type in the JSON string but got " + data['storageAccountCredentialId']);
        }

        return true;
    }


}

AzureContainerInfo.RequiredProperties = ["containerName", "dataFormat", "storageAccountCredentialId"];

/**
 * Container name (Based on the data format specified, this represents the name of Azure Files/Page blob/Block blob).
 * @member {String} containerName
 */
AzureContainerInfo.prototype['containerName'] = undefined;

/**
 * Storage format used for the file represented by the share.
 * @member {module:model/AzureContainerInfo.DataFormatEnum} dataFormat
 */
AzureContainerInfo.prototype['dataFormat'] = undefined;

/**
 * ID of the storage account credential used to access storage.
 * @member {String} storageAccountCredentialId
 */
AzureContainerInfo.prototype['storageAccountCredentialId'] = undefined;





/**
 * Allowed values for the <code>dataFormat</code> property.
 * @enum {String}
 * @readonly
 */
AzureContainerInfo['DataFormatEnum'] = {

    /**
     * value: "BlockBlob"
     * @const
     */
    "BlockBlob": "BlockBlob",

    /**
     * value: "PageBlob"
     * @const
     */
    "PageBlob": "PageBlob",

    /**
     * value: "AzureFile"
     * @const
     */
    "AzureFile": "AzureFile"
};



export default AzureContainerInfo;

