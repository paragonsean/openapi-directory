/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AzureContainerInfo from './AzureContainerInfo';
import ClientAccessRight from './ClientAccessRight';
import MountPointMap from './MountPointMap';
import RefreshDetails from './RefreshDetails';
import UserAccessRight from './UserAccessRight';

/**
 * The ShareProperties model module.
 * @module model/ShareProperties
 * @version 2019-08-01
 */
class ShareProperties {
    /**
     * Constructs a new <code>ShareProperties</code>.
     * The share properties.
     * @alias module:model/ShareProperties
     * @param accessProtocol {module:model/ShareProperties.AccessProtocolEnum} Access protocol to be used by the share.
     * @param monitoringStatus {module:model/ShareProperties.MonitoringStatusEnum} Current monitoring status of the share.
     * @param shareStatus {module:model/ShareProperties.ShareStatusEnum} Current status of the share.
     */
    constructor(accessProtocol, monitoringStatus, shareStatus) { 
        
        ShareProperties.initialize(this, accessProtocol, monitoringStatus, shareStatus);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accessProtocol, monitoringStatus, shareStatus) { 
        obj['accessProtocol'] = accessProtocol;
        obj['monitoringStatus'] = monitoringStatus;
        obj['shareStatus'] = shareStatus;
    }

    /**
     * Constructs a <code>ShareProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShareProperties} obj Optional instance to populate.
     * @return {module:model/ShareProperties} The populated <code>ShareProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShareProperties();

            if (data.hasOwnProperty('accessProtocol')) {
                obj['accessProtocol'] = ApiClient.convertToType(data['accessProtocol'], 'String');
            }
            if (data.hasOwnProperty('azureContainerInfo')) {
                obj['azureContainerInfo'] = AzureContainerInfo.constructFromObject(data['azureContainerInfo']);
            }
            if (data.hasOwnProperty('clientAccessRights')) {
                obj['clientAccessRights'] = ApiClient.convertToType(data['clientAccessRights'], [ClientAccessRight]);
            }
            if (data.hasOwnProperty('dataPolicy')) {
                obj['dataPolicy'] = ApiClient.convertToType(data['dataPolicy'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('monitoringStatus')) {
                obj['monitoringStatus'] = ApiClient.convertToType(data['monitoringStatus'], 'String');
            }
            if (data.hasOwnProperty('refreshDetails')) {
                obj['refreshDetails'] = RefreshDetails.constructFromObject(data['refreshDetails']);
            }
            if (data.hasOwnProperty('shareMappings')) {
                obj['shareMappings'] = ApiClient.convertToType(data['shareMappings'], [MountPointMap]);
            }
            if (data.hasOwnProperty('shareStatus')) {
                obj['shareStatus'] = ApiClient.convertToType(data['shareStatus'], 'String');
            }
            if (data.hasOwnProperty('userAccessRights')) {
                obj['userAccessRights'] = ApiClient.convertToType(data['userAccessRights'], [UserAccessRight]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShareProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShareProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ShareProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accessProtocol'] && !(typeof data['accessProtocol'] === 'string' || data['accessProtocol'] instanceof String)) {
            throw new Error("Expected the field `accessProtocol` to be a primitive type in the JSON string but got " + data['accessProtocol']);
        }
        // validate the optional field `azureContainerInfo`
        if (data['azureContainerInfo']) { // data not null
          AzureContainerInfo.validateJSON(data['azureContainerInfo']);
        }
        if (data['clientAccessRights']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clientAccessRights'])) {
                throw new Error("Expected the field `clientAccessRights` to be an array in the JSON data but got " + data['clientAccessRights']);
            }
            // validate the optional field `clientAccessRights` (array)
            for (const item of data['clientAccessRights']) {
                ClientAccessRight.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['dataPolicy'] && !(typeof data['dataPolicy'] === 'string' || data['dataPolicy'] instanceof String)) {
            throw new Error("Expected the field `dataPolicy` to be a primitive type in the JSON string but got " + data['dataPolicy']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['monitoringStatus'] && !(typeof data['monitoringStatus'] === 'string' || data['monitoringStatus'] instanceof String)) {
            throw new Error("Expected the field `monitoringStatus` to be a primitive type in the JSON string but got " + data['monitoringStatus']);
        }
        // validate the optional field `refreshDetails`
        if (data['refreshDetails']) { // data not null
          RefreshDetails.validateJSON(data['refreshDetails']);
        }
        if (data['shareMappings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shareMappings'])) {
                throw new Error("Expected the field `shareMappings` to be an array in the JSON data but got " + data['shareMappings']);
            }
            // validate the optional field `shareMappings` (array)
            for (const item of data['shareMappings']) {
                MountPointMap.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['shareStatus'] && !(typeof data['shareStatus'] === 'string' || data['shareStatus'] instanceof String)) {
            throw new Error("Expected the field `shareStatus` to be a primitive type in the JSON string but got " + data['shareStatus']);
        }
        if (data['userAccessRights']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['userAccessRights'])) {
                throw new Error("Expected the field `userAccessRights` to be an array in the JSON data but got " + data['userAccessRights']);
            }
            // validate the optional field `userAccessRights` (array)
            for (const item of data['userAccessRights']) {
                UserAccessRight.validateJSON(item);
            };
        }

        return true;
    }


}

ShareProperties.RequiredProperties = ["accessProtocol", "monitoringStatus", "shareStatus"];

/**
 * Access protocol to be used by the share.
 * @member {module:model/ShareProperties.AccessProtocolEnum} accessProtocol
 */
ShareProperties.prototype['accessProtocol'] = undefined;

/**
 * @member {module:model/AzureContainerInfo} azureContainerInfo
 */
ShareProperties.prototype['azureContainerInfo'] = undefined;

/**
 * List of IP addresses and corresponding access rights on the share(required for NFS protocol).
 * @member {Array.<module:model/ClientAccessRight>} clientAccessRights
 */
ShareProperties.prototype['clientAccessRights'] = undefined;

/**
 * Data policy of the share.
 * @member {module:model/ShareProperties.DataPolicyEnum} dataPolicy
 */
ShareProperties.prototype['dataPolicy'] = undefined;

/**
 * Description for the share.
 * @member {String} description
 */
ShareProperties.prototype['description'] = undefined;

/**
 * Current monitoring status of the share.
 * @member {module:model/ShareProperties.MonitoringStatusEnum} monitoringStatus
 */
ShareProperties.prototype['monitoringStatus'] = undefined;

/**
 * @member {module:model/RefreshDetails} refreshDetails
 */
ShareProperties.prototype['refreshDetails'] = undefined;

/**
 * Share mount point to the role.
 * @member {Array.<module:model/MountPointMap>} shareMappings
 */
ShareProperties.prototype['shareMappings'] = undefined;

/**
 * Current status of the share.
 * @member {module:model/ShareProperties.ShareStatusEnum} shareStatus
 */
ShareProperties.prototype['shareStatus'] = undefined;

/**
 * Mapping of users and corresponding access rights on the share (required for SMB protocol).
 * @member {Array.<module:model/UserAccessRight>} userAccessRights
 */
ShareProperties.prototype['userAccessRights'] = undefined;





/**
 * Allowed values for the <code>accessProtocol</code> property.
 * @enum {String}
 * @readonly
 */
ShareProperties['AccessProtocolEnum'] = {

    /**
     * value: "SMB"
     * @const
     */
    "SMB": "SMB",

    /**
     * value: "NFS"
     * @const
     */
    "NFS": "NFS"
};


/**
 * Allowed values for the <code>dataPolicy</code> property.
 * @enum {String}
 * @readonly
 */
ShareProperties['DataPolicyEnum'] = {

    /**
     * value: "Cloud"
     * @const
     */
    "Cloud": "Cloud",

    /**
     * value: "Local"
     * @const
     */
    "Local": "Local"
};


/**
 * Allowed values for the <code>monitoringStatus</code> property.
 * @enum {String}
 * @readonly
 */
ShareProperties['MonitoringStatusEnum'] = {

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};


/**
 * Allowed values for the <code>shareStatus</code> property.
 * @enum {String}
 * @readonly
 */
ShareProperties['ShareStatusEnum'] = {

    /**
     * value: "Offline"
     * @const
     */
    "Offline": "Offline",

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "OK"
     * @const
     */
    "OK": "OK",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "NeedsAttention"
     * @const
     */
    "NeedsAttention": "NeedsAttention"
};



export default ShareProperties;

