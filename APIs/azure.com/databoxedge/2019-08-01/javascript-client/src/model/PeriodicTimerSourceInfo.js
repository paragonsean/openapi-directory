/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PeriodicTimerSourceInfo model module.
 * @module model/PeriodicTimerSourceInfo
 * @version 2019-08-01
 */
class PeriodicTimerSourceInfo {
    /**
     * Constructs a new <code>PeriodicTimerSourceInfo</code>.
     * Periodic timer event source.
     * @alias module:model/PeriodicTimerSourceInfo
     * @param schedule {String} Periodic frequency at which timer event needs to be raised. Supports daily, hourly, minutes, and seconds.
     * @param startTime {Date} The time of the day that results in a valid trigger. Schedule is computed with reference to the time specified upto seconds. If timezone is not specified the time will considered to be in device timezone. The value will always be returned as UTC time.
     */
    constructor(schedule, startTime) { 
        
        PeriodicTimerSourceInfo.initialize(this, schedule, startTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, schedule, startTime) { 
        obj['schedule'] = schedule;
        obj['startTime'] = startTime;
    }

    /**
     * Constructs a <code>PeriodicTimerSourceInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PeriodicTimerSourceInfo} obj Optional instance to populate.
     * @return {module:model/PeriodicTimerSourceInfo} The populated <code>PeriodicTimerSourceInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PeriodicTimerSourceInfo();

            if (data.hasOwnProperty('schedule')) {
                obj['schedule'] = ApiClient.convertToType(data['schedule'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('topic')) {
                obj['topic'] = ApiClient.convertToType(data['topic'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PeriodicTimerSourceInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PeriodicTimerSourceInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PeriodicTimerSourceInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['schedule'] && !(typeof data['schedule'] === 'string' || data['schedule'] instanceof String)) {
            throw new Error("Expected the field `schedule` to be a primitive type in the JSON string but got " + data['schedule']);
        }
        // ensure the json data is a string
        if (data['topic'] && !(typeof data['topic'] === 'string' || data['topic'] instanceof String)) {
            throw new Error("Expected the field `topic` to be a primitive type in the JSON string but got " + data['topic']);
        }

        return true;
    }


}

PeriodicTimerSourceInfo.RequiredProperties = ["schedule", "startTime"];

/**
 * Periodic frequency at which timer event needs to be raised. Supports daily, hourly, minutes, and seconds.
 * @member {String} schedule
 */
PeriodicTimerSourceInfo.prototype['schedule'] = undefined;

/**
 * The time of the day that results in a valid trigger. Schedule is computed with reference to the time specified upto seconds. If timezone is not specified the time will considered to be in device timezone. The value will always be returned as UTC time.
 * @member {Date} startTime
 */
PeriodicTimerSourceInfo.prototype['startTime'] = undefined;

/**
 * Topic where periodic events are published to IoT device.
 * @member {String} topic
 */
PeriodicTimerSourceInfo.prototype['topic'] = undefined;






export default PeriodicTimerSourceInfo;

