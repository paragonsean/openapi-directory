/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SkuCost from './SkuCost';
import SkuLocationInfo from './SkuLocationInfo';
import SkuRestriction from './SkuRestriction';

/**
 * The ResourceTypeSku model module.
 * @module model/ResourceTypeSku
 * @version 2019-08-01
 */
class ResourceTypeSku {
    /**
     * Constructs a new <code>ResourceTypeSku</code>.
     * SkuInformation object
     * @alias module:model/ResourceTypeSku
     */
    constructor() { 
        
        ResourceTypeSku.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResourceTypeSku</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceTypeSku} obj Optional instance to populate.
     * @return {module:model/ResourceTypeSku} The populated <code>ResourceTypeSku</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceTypeSku();

            if (data.hasOwnProperty('apiVersions')) {
                obj['apiVersions'] = ApiClient.convertToType(data['apiVersions'], ['String']);
            }
            if (data.hasOwnProperty('costs')) {
                obj['costs'] = ApiClient.convertToType(data['costs'], [SkuCost]);
            }
            if (data.hasOwnProperty('family')) {
                obj['family'] = ApiClient.convertToType(data['family'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('locationInfo')) {
                obj['locationInfo'] = ApiClient.convertToType(data['locationInfo'], [SkuLocationInfo]);
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('resourceType')) {
                obj['resourceType'] = ApiClient.convertToType(data['resourceType'], 'String');
            }
            if (data.hasOwnProperty('restrictions')) {
                obj['restrictions'] = ApiClient.convertToType(data['restrictions'], [SkuRestriction]);
            }
            if (data.hasOwnProperty('tier')) {
                obj['tier'] = ApiClient.convertToType(data['tier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceTypeSku</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceTypeSku</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['apiVersions'])) {
            throw new Error("Expected the field `apiVersions` to be an array in the JSON data but got " + data['apiVersions']);
        }
        if (data['costs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['costs'])) {
                throw new Error("Expected the field `costs` to be an array in the JSON data but got " + data['costs']);
            }
            // validate the optional field `costs` (array)
            for (const item of data['costs']) {
                SkuCost.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['family'] && !(typeof data['family'] === 'string' || data['family'] instanceof String)) {
            throw new Error("Expected the field `family` to be a primitive type in the JSON string but got " + data['family']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        if (data['locationInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['locationInfo'])) {
                throw new Error("Expected the field `locationInfo` to be an array in the JSON data but got " + data['locationInfo']);
            }
            // validate the optional field `locationInfo` (array)
            for (const item of data['locationInfo']) {
                SkuLocationInfo.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['locations'])) {
            throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['resourceType'] && !(typeof data['resourceType'] === 'string' || data['resourceType'] instanceof String)) {
            throw new Error("Expected the field `resourceType` to be a primitive type in the JSON string but got " + data['resourceType']);
        }
        if (data['restrictions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['restrictions'])) {
                throw new Error("Expected the field `restrictions` to be an array in the JSON data but got " + data['restrictions']);
            }
            // validate the optional field `restrictions` (array)
            for (const item of data['restrictions']) {
                SkuRestriction.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['tier'] && !(typeof data['tier'] === 'string' || data['tier'] instanceof String)) {
            throw new Error("Expected the field `tier` to be a primitive type in the JSON string but got " + data['tier']);
        }

        return true;
    }


}



/**
 * The API versions in which SKU is available
 * @member {Array.<String>} apiVersions
 */
ResourceTypeSku.prototype['apiVersions'] = undefined;

/**
 * The pricing info of the Sku.
 * @member {Array.<module:model/SkuCost>} costs
 */
ResourceTypeSku.prototype['costs'] = undefined;

/**
 * The Sku family
 * @member {String} family
 */
ResourceTypeSku.prototype['family'] = undefined;

/**
 * The Sku kind
 * @member {String} kind
 */
ResourceTypeSku.prototype['kind'] = undefined;

/**
 * Availability of the SKU for the location/zone
 * @member {Array.<module:model/SkuLocationInfo>} locationInfo
 */
ResourceTypeSku.prototype['locationInfo'] = undefined;

/**
 * Availability of the SKU for the region
 * @member {Array.<String>} locations
 */
ResourceTypeSku.prototype['locations'] = undefined;

/**
 * The Sku name
 * @member {module:model/ResourceTypeSku.NameEnum} name
 */
ResourceTypeSku.prototype['name'] = undefined;

/**
 * The type of the resource
 * @member {String} resourceType
 */
ResourceTypeSku.prototype['resourceType'] = undefined;

/**
 * Restrictions of the SKU availability.
 * @member {Array.<module:model/SkuRestriction>} restrictions
 */
ResourceTypeSku.prototype['restrictions'] = undefined;

/**
 * The Sku tier
 * @member {module:model/ResourceTypeSku.TierEnum} tier
 */
ResourceTypeSku.prototype['tier'] = undefined;





/**
 * Allowed values for the <code>name</code> property.
 * @enum {String}
 * @readonly
 */
ResourceTypeSku['NameEnum'] = {

    /**
     * value: "Gateway"
     * @const
     */
    "Gateway": "Gateway",

    /**
     * value: "Edge"
     * @const
     */
    "Edge": "Edge",

    /**
     * value: "TEA_1Node"
     * @const
     */
    "TEA_1Node": "TEA_1Node",

    /**
     * value: "TEA_1Node_UPS"
     * @const
     */
    "TEA_1Node_UPS": "TEA_1Node_UPS",

    /**
     * value: "TEA_1Node_Heater"
     * @const
     */
    "TEA_1Node_Heater": "TEA_1Node_Heater",

    /**
     * value: "TEA_1Node_UPS_Heater"
     * @const
     */
    "TEA_1Node_UPS_Heater": "TEA_1Node_UPS_Heater",

    /**
     * value: "TEA_4Node_Heater"
     * @const
     */
    "TEA_4Node_Heater": "TEA_4Node_Heater",

    /**
     * value: "TEA_4Node_UPS_Heater"
     * @const
     */
    "TEA_4Node_UPS_Heater": "TEA_4Node_UPS_Heater",

    /**
     * value: "TMA"
     * @const
     */
    "TMA": "TMA"
};


/**
 * Allowed values for the <code>tier</code> property.
 * @enum {String}
 * @readonly
 */
ResourceTypeSku['TierEnum'] = {

    /**
     * value: "Standard"
     * @const
     */
    "Standard": "Standard"
};



export default ResourceTypeSku;

