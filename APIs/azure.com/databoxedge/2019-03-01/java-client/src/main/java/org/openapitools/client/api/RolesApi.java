/*
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CloudError;
import org.openapitools.client.model.Role;
import org.openapitools.client.model.RoleList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RolesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RolesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RolesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for rolesCreateOrUpdate
     * @param deviceName The device name. (required)
     * @param name The role name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param role The role properties. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the role. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesCreateOrUpdateCall(String deviceName, String name, String subscriptionId, String resourceGroupName, String apiVersion, Role role, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = role;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/roles/{name}"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rolesCreateOrUpdateValidateBeforeCall(String deviceName, String name, String subscriptionId, String resourceGroupName, String apiVersion, Role role, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling rolesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling rolesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling rolesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling rolesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling rolesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling rolesCreateOrUpdate(Async)");
        }

        return rolesCreateOrUpdateCall(deviceName, name, subscriptionId, resourceGroupName, apiVersion, role, _callback);

    }

    /**
     * 
     * Create or update a role.
     * @param deviceName The device name. (required)
     * @param name The role name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param role The role properties. (required)
     * @return Role
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the role. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Role rolesCreateOrUpdate(String deviceName, String name, String subscriptionId, String resourceGroupName, String apiVersion, Role role) throws ApiException {
        ApiResponse<Role> localVarResp = rolesCreateOrUpdateWithHttpInfo(deviceName, name, subscriptionId, resourceGroupName, apiVersion, role);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update a role.
     * @param deviceName The device name. (required)
     * @param name The role name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param role The role properties. (required)
     * @return ApiResponse&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the role. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Role> rolesCreateOrUpdateWithHttpInfo(String deviceName, String name, String subscriptionId, String resourceGroupName, String apiVersion, Role role) throws ApiException {
        okhttp3.Call localVarCall = rolesCreateOrUpdateValidateBeforeCall(deviceName, name, subscriptionId, resourceGroupName, apiVersion, role, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update a role.
     * @param deviceName The device name. (required)
     * @param name The role name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param role The role properties. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created or updated the role. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to create or update the role. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesCreateOrUpdateAsync(String deviceName, String name, String subscriptionId, String resourceGroupName, String apiVersion, Role role, final ApiCallback<Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = rolesCreateOrUpdateValidateBeforeCall(deviceName, name, subscriptionId, resourceGroupName, apiVersion, role, _callback);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rolesDelete
     * @param deviceName The device name. (required)
     * @param name The role name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the role. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the role. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The role is already deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesDeleteCall(String deviceName, String name, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/roles/{name}"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rolesDeleteValidateBeforeCall(String deviceName, String name, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling rolesDelete(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling rolesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling rolesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling rolesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling rolesDelete(Async)");
        }

        return rolesDeleteCall(deviceName, name, subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the role on the data box edge device.
     * @param deviceName The device name. (required)
     * @param name The role name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the role. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the role. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The role is already deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void rolesDelete(String deviceName, String name, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        rolesDeleteWithHttpInfo(deviceName, name, subscriptionId, resourceGroupName, apiVersion);
    }

    /**
     * 
     * Deletes the role on the data box edge device.
     * @param deviceName The device name. (required)
     * @param name The role name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the role. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the role. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The role is already deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rolesDeleteWithHttpInfo(String deviceName, String name, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = rolesDeleteValidateBeforeCall(deviceName, name, subscriptionId, resourceGroupName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the role on the data box edge device.
     * @param deviceName The device name. (required)
     * @param name The role name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the role. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted the request to delete the role. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The role is already deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesDeleteAsync(String deviceName, String name, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rolesDeleteValidateBeforeCall(deviceName, name, subscriptionId, resourceGroupName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for rolesGet
     * @param deviceName The device name. (required)
     * @param name The role name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The role with the specified name in the given device. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesGetCall(String deviceName, String name, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/roles/{name}"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rolesGetValidateBeforeCall(String deviceName, String name, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling rolesGet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling rolesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling rolesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling rolesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling rolesGet(Async)");
        }

        return rolesGetCall(deviceName, name, subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * Gets a specific role by name.
     * @param deviceName The device name. (required)
     * @param name The role name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @return Role
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The role with the specified name in the given device. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Role rolesGet(String deviceName, String name, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<Role> localVarResp = rolesGetWithHttpInfo(deviceName, name, subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a specific role by name.
     * @param deviceName The device name. (required)
     * @param name The role name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The role with the specified name in the given device. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Role> rolesGetWithHttpInfo(String deviceName, String name, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = rolesGetValidateBeforeCall(deviceName, name, subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a specific role by name.
     * @param deviceName The device name. (required)
     * @param name The role name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The role with the specified name in the given device. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesGetAsync(String deviceName, String name, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = rolesGetValidateBeforeCall(deviceName, name, subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rolesListByDataBoxEdgeDevice
     * @param deviceName The device name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the roles configured in the device. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesListByDataBoxEdgeDeviceCall(String deviceName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/roles"
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rolesListByDataBoxEdgeDeviceValidateBeforeCall(String deviceName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling rolesListByDataBoxEdgeDevice(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling rolesListByDataBoxEdgeDevice(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling rolesListByDataBoxEdgeDevice(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling rolesListByDataBoxEdgeDevice(Async)");
        }

        return rolesListByDataBoxEdgeDeviceCall(deviceName, subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * Lists all the roles configured in a data box edge/gateway device.
     * @param deviceName The device name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @return RoleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the roles configured in the device. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RoleList rolesListByDataBoxEdgeDevice(String deviceName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<RoleList> localVarResp = rolesListByDataBoxEdgeDeviceWithHttpInfo(deviceName, subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the roles configured in a data box edge/gateway device.
     * @param deviceName The device name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;RoleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the roles configured in the device. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleList> rolesListByDataBoxEdgeDeviceWithHttpInfo(String deviceName, String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = rolesListByDataBoxEdgeDeviceValidateBeforeCall(deviceName, subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<RoleList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the roles configured in a data box edge/gateway device.
     * @param deviceName The device name. (required)
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of all the roles configured in the device. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rolesListByDataBoxEdgeDeviceAsync(String deviceName, String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<RoleList> _callback) throws ApiException {

        okhttp3.Call localVarCall = rolesListByDataBoxEdgeDeviceValidateBeforeCall(deviceName, subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RoleList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
