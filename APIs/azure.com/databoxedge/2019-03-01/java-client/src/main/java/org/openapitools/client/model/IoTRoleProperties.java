/*
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IoTDeviceInfo;
import org.openapitools.client.model.MountPointMap;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IoT role properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:21.318256-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IoTRoleProperties {
  /**
   * Host OS supported by the IoT role.
   */
  @JsonAdapter(HostPlatformEnum.Adapter.class)
  public enum HostPlatformEnum {
    WINDOWS("Windows"),
    
    LINUX("Linux");

    private String value;

    HostPlatformEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HostPlatformEnum fromValue(String value) {
      for (HostPlatformEnum b : HostPlatformEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HostPlatformEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HostPlatformEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HostPlatformEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HostPlatformEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HostPlatformEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HOST_PLATFORM = "hostPlatform";
  @SerializedName(SERIALIZED_NAME_HOST_PLATFORM)
  private HostPlatformEnum hostPlatform;

  public static final String SERIALIZED_NAME_IO_T_DEVICE_DETAILS = "ioTDeviceDetails";
  @SerializedName(SERIALIZED_NAME_IO_T_DEVICE_DETAILS)
  private IoTDeviceInfo ioTDeviceDetails;

  public static final String SERIALIZED_NAME_IO_T_EDGE_DEVICE_DETAILS = "ioTEdgeDeviceDetails";
  @SerializedName(SERIALIZED_NAME_IO_T_EDGE_DEVICE_DETAILS)
  private IoTDeviceInfo ioTEdgeDeviceDetails;

  /**
   * Role status.
   */
  @JsonAdapter(RoleStatusEnum.Adapter.class)
  public enum RoleStatusEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    RoleStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleStatusEnum fromValue(String value) {
      for (RoleStatusEnum b : RoleStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoleStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLE_STATUS = "roleStatus";
  @SerializedName(SERIALIZED_NAME_ROLE_STATUS)
  private RoleStatusEnum roleStatus;

  public static final String SERIALIZED_NAME_SHARE_MAPPINGS = "shareMappings";
  @SerializedName(SERIALIZED_NAME_SHARE_MAPPINGS)
  private List<MountPointMap> shareMappings = new ArrayList<>();

  public IoTRoleProperties() {
  }

  public IoTRoleProperties hostPlatform(HostPlatformEnum hostPlatform) {
    this.hostPlatform = hostPlatform;
    return this;
  }

  /**
   * Host OS supported by the IoT role.
   * @return hostPlatform
   */
  @javax.annotation.Nonnull
  public HostPlatformEnum getHostPlatform() {
    return hostPlatform;
  }

  public void setHostPlatform(HostPlatformEnum hostPlatform) {
    this.hostPlatform = hostPlatform;
  }


  public IoTRoleProperties ioTDeviceDetails(IoTDeviceInfo ioTDeviceDetails) {
    this.ioTDeviceDetails = ioTDeviceDetails;
    return this;
  }

  /**
   * Get ioTDeviceDetails
   * @return ioTDeviceDetails
   */
  @javax.annotation.Nonnull
  public IoTDeviceInfo getIoTDeviceDetails() {
    return ioTDeviceDetails;
  }

  public void setIoTDeviceDetails(IoTDeviceInfo ioTDeviceDetails) {
    this.ioTDeviceDetails = ioTDeviceDetails;
  }


  public IoTRoleProperties ioTEdgeDeviceDetails(IoTDeviceInfo ioTEdgeDeviceDetails) {
    this.ioTEdgeDeviceDetails = ioTEdgeDeviceDetails;
    return this;
  }

  /**
   * Get ioTEdgeDeviceDetails
   * @return ioTEdgeDeviceDetails
   */
  @javax.annotation.Nonnull
  public IoTDeviceInfo getIoTEdgeDeviceDetails() {
    return ioTEdgeDeviceDetails;
  }

  public void setIoTEdgeDeviceDetails(IoTDeviceInfo ioTEdgeDeviceDetails) {
    this.ioTEdgeDeviceDetails = ioTEdgeDeviceDetails;
  }


  public IoTRoleProperties roleStatus(RoleStatusEnum roleStatus) {
    this.roleStatus = roleStatus;
    return this;
  }

  /**
   * Role status.
   * @return roleStatus
   */
  @javax.annotation.Nonnull
  public RoleStatusEnum getRoleStatus() {
    return roleStatus;
  }

  public void setRoleStatus(RoleStatusEnum roleStatus) {
    this.roleStatus = roleStatus;
  }


  public IoTRoleProperties shareMappings(List<MountPointMap> shareMappings) {
    this.shareMappings = shareMappings;
    return this;
  }

  public IoTRoleProperties addShareMappingsItem(MountPointMap shareMappingsItem) {
    if (this.shareMappings == null) {
      this.shareMappings = new ArrayList<>();
    }
    this.shareMappings.add(shareMappingsItem);
    return this;
  }

  /**
   * Mount points of shares in role(s).
   * @return shareMappings
   */
  @javax.annotation.Nullable
  public List<MountPointMap> getShareMappings() {
    return shareMappings;
  }

  public void setShareMappings(List<MountPointMap> shareMappings) {
    this.shareMappings = shareMappings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IoTRoleProperties ioTRoleProperties = (IoTRoleProperties) o;
    return Objects.equals(this.hostPlatform, ioTRoleProperties.hostPlatform) &&
        Objects.equals(this.ioTDeviceDetails, ioTRoleProperties.ioTDeviceDetails) &&
        Objects.equals(this.ioTEdgeDeviceDetails, ioTRoleProperties.ioTEdgeDeviceDetails) &&
        Objects.equals(this.roleStatus, ioTRoleProperties.roleStatus) &&
        Objects.equals(this.shareMappings, ioTRoleProperties.shareMappings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostPlatform, ioTDeviceDetails, ioTEdgeDeviceDetails, roleStatus, shareMappings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IoTRoleProperties {\n");
    sb.append("    hostPlatform: ").append(toIndentedString(hostPlatform)).append("\n");
    sb.append("    ioTDeviceDetails: ").append(toIndentedString(ioTDeviceDetails)).append("\n");
    sb.append("    ioTEdgeDeviceDetails: ").append(toIndentedString(ioTEdgeDeviceDetails)).append("\n");
    sb.append("    roleStatus: ").append(toIndentedString(roleStatus)).append("\n");
    sb.append("    shareMappings: ").append(toIndentedString(shareMappings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hostPlatform");
    openapiFields.add("ioTDeviceDetails");
    openapiFields.add("ioTEdgeDeviceDetails");
    openapiFields.add("roleStatus");
    openapiFields.add("shareMappings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hostPlatform");
    openapiRequiredFields.add("ioTDeviceDetails");
    openapiRequiredFields.add("ioTEdgeDeviceDetails");
    openapiRequiredFields.add("roleStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IoTRoleProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IoTRoleProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IoTRoleProperties is not found in the empty JSON string", IoTRoleProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IoTRoleProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IoTRoleProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IoTRoleProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("hostPlatform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostPlatform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostPlatform").toString()));
      }
      // validate the required field `hostPlatform`
      HostPlatformEnum.validateJsonElement(jsonObj.get("hostPlatform"));
      // validate the required field `ioTDeviceDetails`
      IoTDeviceInfo.validateJsonElement(jsonObj.get("ioTDeviceDetails"));
      // validate the required field `ioTEdgeDeviceDetails`
      IoTDeviceInfo.validateJsonElement(jsonObj.get("ioTEdgeDeviceDetails"));
      if (!jsonObj.get("roleStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roleStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roleStatus").toString()));
      }
      // validate the required field `roleStatus`
      RoleStatusEnum.validateJsonElement(jsonObj.get("roleStatus"));
      if (jsonObj.get("shareMappings") != null && !jsonObj.get("shareMappings").isJsonNull()) {
        JsonArray jsonArrayshareMappings = jsonObj.getAsJsonArray("shareMappings");
        if (jsonArrayshareMappings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shareMappings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shareMappings` to be an array in the JSON string but got `%s`", jsonObj.get("shareMappings").toString()));
          }

          // validate the optional field `shareMappings` (array)
          for (int i = 0; i < jsonArrayshareMappings.size(); i++) {
            MountPointMap.validateJsonElement(jsonArrayshareMappings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IoTRoleProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IoTRoleProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IoTRoleProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IoTRoleProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<IoTRoleProperties>() {
           @Override
           public void write(JsonWriter out, IoTRoleProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IoTRoleProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IoTRoleProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IoTRoleProperties
   * @throws IOException if the JSON string is invalid with respect to IoTRoleProperties
   */
  public static IoTRoleProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IoTRoleProperties.class);
  }

  /**
   * Convert an instance of IoTRoleProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

