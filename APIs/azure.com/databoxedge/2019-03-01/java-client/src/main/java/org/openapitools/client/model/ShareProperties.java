/*
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AzureContainerInfo;
import org.openapitools.client.model.ClientAccessRight;
import org.openapitools.client.model.MountPointMap;
import org.openapitools.client.model.RefreshDetails;
import org.openapitools.client.model.UserAccessRight;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The share properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:21.318256-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShareProperties {
  /**
   * Access protocol to be used by the share.
   */
  @JsonAdapter(AccessProtocolEnum.Adapter.class)
  public enum AccessProtocolEnum {
    SMB("SMB"),
    
    NFS("NFS");

    private String value;

    AccessProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccessProtocolEnum fromValue(String value) {
      for (AccessProtocolEnum b : AccessProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccessProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccessProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccessProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccessProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccessProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCESS_PROTOCOL = "accessProtocol";
  @SerializedName(SERIALIZED_NAME_ACCESS_PROTOCOL)
  private AccessProtocolEnum accessProtocol;

  public static final String SERIALIZED_NAME_AZURE_CONTAINER_INFO = "azureContainerInfo";
  @SerializedName(SERIALIZED_NAME_AZURE_CONTAINER_INFO)
  private AzureContainerInfo azureContainerInfo;

  public static final String SERIALIZED_NAME_CLIENT_ACCESS_RIGHTS = "clientAccessRights";
  @SerializedName(SERIALIZED_NAME_CLIENT_ACCESS_RIGHTS)
  private List<ClientAccessRight> clientAccessRights = new ArrayList<>();

  /**
   * Data policy of the share.
   */
  @JsonAdapter(DataPolicyEnum.Adapter.class)
  public enum DataPolicyEnum {
    CLOUD("Cloud"),
    
    LOCAL("Local");

    private String value;

    DataPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataPolicyEnum fromValue(String value) {
      for (DataPolicyEnum b : DataPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_POLICY = "dataPolicy";
  @SerializedName(SERIALIZED_NAME_DATA_POLICY)
  private DataPolicyEnum dataPolicy;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Current monitoring status of the share.
   */
  @JsonAdapter(MonitoringStatusEnum.Adapter.class)
  public enum MonitoringStatusEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    MonitoringStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MonitoringStatusEnum fromValue(String value) {
      for (MonitoringStatusEnum b : MonitoringStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MonitoringStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MonitoringStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MonitoringStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MonitoringStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MonitoringStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MONITORING_STATUS = "monitoringStatus";
  @SerializedName(SERIALIZED_NAME_MONITORING_STATUS)
  private MonitoringStatusEnum monitoringStatus;

  public static final String SERIALIZED_NAME_REFRESH_DETAILS = "refreshDetails";
  @SerializedName(SERIALIZED_NAME_REFRESH_DETAILS)
  private RefreshDetails refreshDetails;

  public static final String SERIALIZED_NAME_SHARE_MAPPINGS = "shareMappings";
  @SerializedName(SERIALIZED_NAME_SHARE_MAPPINGS)
  private List<MountPointMap> shareMappings = new ArrayList<>();

  /**
   * Current status of the share.
   */
  @JsonAdapter(ShareStatusEnum.Adapter.class)
  public enum ShareStatusEnum {
    ONLINE("Online"),
    
    OFFLINE("Offline");

    private String value;

    ShareStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShareStatusEnum fromValue(String value) {
      for (ShareStatusEnum b : ShareStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShareStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShareStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShareStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShareStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShareStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHARE_STATUS = "shareStatus";
  @SerializedName(SERIALIZED_NAME_SHARE_STATUS)
  private ShareStatusEnum shareStatus;

  public static final String SERIALIZED_NAME_USER_ACCESS_RIGHTS = "userAccessRights";
  @SerializedName(SERIALIZED_NAME_USER_ACCESS_RIGHTS)
  private List<UserAccessRight> userAccessRights = new ArrayList<>();

  public ShareProperties() {
  }

  public ShareProperties(
     List<MountPointMap> shareMappings
  ) {
    this();
    this.shareMappings = shareMappings;
  }

  public ShareProperties accessProtocol(AccessProtocolEnum accessProtocol) {
    this.accessProtocol = accessProtocol;
    return this;
  }

  /**
   * Access protocol to be used by the share.
   * @return accessProtocol
   */
  @javax.annotation.Nonnull
  public AccessProtocolEnum getAccessProtocol() {
    return accessProtocol;
  }

  public void setAccessProtocol(AccessProtocolEnum accessProtocol) {
    this.accessProtocol = accessProtocol;
  }


  public ShareProperties azureContainerInfo(AzureContainerInfo azureContainerInfo) {
    this.azureContainerInfo = azureContainerInfo;
    return this;
  }

  /**
   * Get azureContainerInfo
   * @return azureContainerInfo
   */
  @javax.annotation.Nullable
  public AzureContainerInfo getAzureContainerInfo() {
    return azureContainerInfo;
  }

  public void setAzureContainerInfo(AzureContainerInfo azureContainerInfo) {
    this.azureContainerInfo = azureContainerInfo;
  }


  public ShareProperties clientAccessRights(List<ClientAccessRight> clientAccessRights) {
    this.clientAccessRights = clientAccessRights;
    return this;
  }

  public ShareProperties addClientAccessRightsItem(ClientAccessRight clientAccessRightsItem) {
    if (this.clientAccessRights == null) {
      this.clientAccessRights = new ArrayList<>();
    }
    this.clientAccessRights.add(clientAccessRightsItem);
    return this;
  }

  /**
   * List of IP addresses and corresponding access rights on the share(required for NFS protocol).
   * @return clientAccessRights
   */
  @javax.annotation.Nullable
  public List<ClientAccessRight> getClientAccessRights() {
    return clientAccessRights;
  }

  public void setClientAccessRights(List<ClientAccessRight> clientAccessRights) {
    this.clientAccessRights = clientAccessRights;
  }


  public ShareProperties dataPolicy(DataPolicyEnum dataPolicy) {
    this.dataPolicy = dataPolicy;
    return this;
  }

  /**
   * Data policy of the share.
   * @return dataPolicy
   */
  @javax.annotation.Nullable
  public DataPolicyEnum getDataPolicy() {
    return dataPolicy;
  }

  public void setDataPolicy(DataPolicyEnum dataPolicy) {
    this.dataPolicy = dataPolicy;
  }


  public ShareProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description for the share.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ShareProperties monitoringStatus(MonitoringStatusEnum monitoringStatus) {
    this.monitoringStatus = monitoringStatus;
    return this;
  }

  /**
   * Current monitoring status of the share.
   * @return monitoringStatus
   */
  @javax.annotation.Nonnull
  public MonitoringStatusEnum getMonitoringStatus() {
    return monitoringStatus;
  }

  public void setMonitoringStatus(MonitoringStatusEnum monitoringStatus) {
    this.monitoringStatus = monitoringStatus;
  }


  public ShareProperties refreshDetails(RefreshDetails refreshDetails) {
    this.refreshDetails = refreshDetails;
    return this;
  }

  /**
   * Get refreshDetails
   * @return refreshDetails
   */
  @javax.annotation.Nullable
  public RefreshDetails getRefreshDetails() {
    return refreshDetails;
  }

  public void setRefreshDetails(RefreshDetails refreshDetails) {
    this.refreshDetails = refreshDetails;
  }


  /**
   * Share mount point to the role.
   * @return shareMappings
   */
  @javax.annotation.Nullable
  public List<MountPointMap> getShareMappings() {
    return shareMappings;
  }



  public ShareProperties shareStatus(ShareStatusEnum shareStatus) {
    this.shareStatus = shareStatus;
    return this;
  }

  /**
   * Current status of the share.
   * @return shareStatus
   */
  @javax.annotation.Nonnull
  public ShareStatusEnum getShareStatus() {
    return shareStatus;
  }

  public void setShareStatus(ShareStatusEnum shareStatus) {
    this.shareStatus = shareStatus;
  }


  public ShareProperties userAccessRights(List<UserAccessRight> userAccessRights) {
    this.userAccessRights = userAccessRights;
    return this;
  }

  public ShareProperties addUserAccessRightsItem(UserAccessRight userAccessRightsItem) {
    if (this.userAccessRights == null) {
      this.userAccessRights = new ArrayList<>();
    }
    this.userAccessRights.add(userAccessRightsItem);
    return this;
  }

  /**
   * Mapping of users and corresponding access rights on the share (required for SMB protocol).
   * @return userAccessRights
   */
  @javax.annotation.Nullable
  public List<UserAccessRight> getUserAccessRights() {
    return userAccessRights;
  }

  public void setUserAccessRights(List<UserAccessRight> userAccessRights) {
    this.userAccessRights = userAccessRights;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShareProperties shareProperties = (ShareProperties) o;
    return Objects.equals(this.accessProtocol, shareProperties.accessProtocol) &&
        Objects.equals(this.azureContainerInfo, shareProperties.azureContainerInfo) &&
        Objects.equals(this.clientAccessRights, shareProperties.clientAccessRights) &&
        Objects.equals(this.dataPolicy, shareProperties.dataPolicy) &&
        Objects.equals(this.description, shareProperties.description) &&
        Objects.equals(this.monitoringStatus, shareProperties.monitoringStatus) &&
        Objects.equals(this.refreshDetails, shareProperties.refreshDetails) &&
        Objects.equals(this.shareMappings, shareProperties.shareMappings) &&
        Objects.equals(this.shareStatus, shareProperties.shareStatus) &&
        Objects.equals(this.userAccessRights, shareProperties.userAccessRights);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessProtocol, azureContainerInfo, clientAccessRights, dataPolicy, description, monitoringStatus, refreshDetails, shareMappings, shareStatus, userAccessRights);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShareProperties {\n");
    sb.append("    accessProtocol: ").append(toIndentedString(accessProtocol)).append("\n");
    sb.append("    azureContainerInfo: ").append(toIndentedString(azureContainerInfo)).append("\n");
    sb.append("    clientAccessRights: ").append(toIndentedString(clientAccessRights)).append("\n");
    sb.append("    dataPolicy: ").append(toIndentedString(dataPolicy)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    monitoringStatus: ").append(toIndentedString(monitoringStatus)).append("\n");
    sb.append("    refreshDetails: ").append(toIndentedString(refreshDetails)).append("\n");
    sb.append("    shareMappings: ").append(toIndentedString(shareMappings)).append("\n");
    sb.append("    shareStatus: ").append(toIndentedString(shareStatus)).append("\n");
    sb.append("    userAccessRights: ").append(toIndentedString(userAccessRights)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessProtocol");
    openapiFields.add("azureContainerInfo");
    openapiFields.add("clientAccessRights");
    openapiFields.add("dataPolicy");
    openapiFields.add("description");
    openapiFields.add("monitoringStatus");
    openapiFields.add("refreshDetails");
    openapiFields.add("shareMappings");
    openapiFields.add("shareStatus");
    openapiFields.add("userAccessRights");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accessProtocol");
    openapiRequiredFields.add("monitoringStatus");
    openapiRequiredFields.add("shareStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShareProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShareProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShareProperties is not found in the empty JSON string", ShareProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShareProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShareProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ShareProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("accessProtocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessProtocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessProtocol").toString()));
      }
      // validate the required field `accessProtocol`
      AccessProtocolEnum.validateJsonElement(jsonObj.get("accessProtocol"));
      // validate the optional field `azureContainerInfo`
      if (jsonObj.get("azureContainerInfo") != null && !jsonObj.get("azureContainerInfo").isJsonNull()) {
        AzureContainerInfo.validateJsonElement(jsonObj.get("azureContainerInfo"));
      }
      if (jsonObj.get("clientAccessRights") != null && !jsonObj.get("clientAccessRights").isJsonNull()) {
        JsonArray jsonArrayclientAccessRights = jsonObj.getAsJsonArray("clientAccessRights");
        if (jsonArrayclientAccessRights != null) {
          // ensure the json data is an array
          if (!jsonObj.get("clientAccessRights").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `clientAccessRights` to be an array in the JSON string but got `%s`", jsonObj.get("clientAccessRights").toString()));
          }

          // validate the optional field `clientAccessRights` (array)
          for (int i = 0; i < jsonArrayclientAccessRights.size(); i++) {
            ClientAccessRight.validateJsonElement(jsonArrayclientAccessRights.get(i));
          };
        }
      }
      if ((jsonObj.get("dataPolicy") != null && !jsonObj.get("dataPolicy").isJsonNull()) && !jsonObj.get("dataPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataPolicy").toString()));
      }
      // validate the optional field `dataPolicy`
      if (jsonObj.get("dataPolicy") != null && !jsonObj.get("dataPolicy").isJsonNull()) {
        DataPolicyEnum.validateJsonElement(jsonObj.get("dataPolicy"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("monitoringStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monitoringStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monitoringStatus").toString()));
      }
      // validate the required field `monitoringStatus`
      MonitoringStatusEnum.validateJsonElement(jsonObj.get("monitoringStatus"));
      // validate the optional field `refreshDetails`
      if (jsonObj.get("refreshDetails") != null && !jsonObj.get("refreshDetails").isJsonNull()) {
        RefreshDetails.validateJsonElement(jsonObj.get("refreshDetails"));
      }
      if (jsonObj.get("shareMappings") != null && !jsonObj.get("shareMappings").isJsonNull()) {
        JsonArray jsonArrayshareMappings = jsonObj.getAsJsonArray("shareMappings");
        if (jsonArrayshareMappings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shareMappings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shareMappings` to be an array in the JSON string but got `%s`", jsonObj.get("shareMappings").toString()));
          }

          // validate the optional field `shareMappings` (array)
          for (int i = 0; i < jsonArrayshareMappings.size(); i++) {
            MountPointMap.validateJsonElement(jsonArrayshareMappings.get(i));
          };
        }
      }
      if (!jsonObj.get("shareStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareStatus").toString()));
      }
      // validate the required field `shareStatus`
      ShareStatusEnum.validateJsonElement(jsonObj.get("shareStatus"));
      if (jsonObj.get("userAccessRights") != null && !jsonObj.get("userAccessRights").isJsonNull()) {
        JsonArray jsonArrayuserAccessRights = jsonObj.getAsJsonArray("userAccessRights");
        if (jsonArrayuserAccessRights != null) {
          // ensure the json data is an array
          if (!jsonObj.get("userAccessRights").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `userAccessRights` to be an array in the JSON string but got `%s`", jsonObj.get("userAccessRights").toString()));
          }

          // validate the optional field `userAccessRights` (array)
          for (int i = 0; i < jsonArrayuserAccessRights.size(); i++) {
            UserAccessRight.validateJsonElement(jsonArrayuserAccessRights.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShareProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShareProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShareProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShareProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ShareProperties>() {
           @Override
           public void write(JsonWriter out, ShareProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShareProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShareProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShareProperties
   * @throws IOException if the JSON string is invalid with respect to ShareProperties
   */
  public static ShareProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShareProperties.class);
  }

  /**
   * Convert an instance of ShareProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

