/*
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Ipv4Config;
import org.openapitools.client.model.Ipv6Config;
import org.openapitools.client.model.NetworkAdapterPosition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the networkAdapter on a device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:21.318256-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkAdapter {
  public static final String SERIALIZED_NAME_ADAPTER_ID = "adapterId";
  @SerializedName(SERIALIZED_NAME_ADAPTER_ID)
  private String adapterId;

  public static final String SERIALIZED_NAME_ADAPTER_POSITION = "adapterPosition";
  @SerializedName(SERIALIZED_NAME_ADAPTER_POSITION)
  private NetworkAdapterPosition adapterPosition;

  /**
   * Value indicating whether this adapter has DHCP enabled.
   */
  @JsonAdapter(DhcpStatusEnum.Adapter.class)
  public enum DhcpStatusEnum {
    DISABLED("Disabled"),
    
    ENABLED("Enabled");

    private String value;

    DhcpStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DhcpStatusEnum fromValue(String value) {
      for (DhcpStatusEnum b : DhcpStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DhcpStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DhcpStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DhcpStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DhcpStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DhcpStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DHCP_STATUS = "dhcpStatus";
  @SerializedName(SERIALIZED_NAME_DHCP_STATUS)
  private DhcpStatusEnum dhcpStatus;

  public static final String SERIALIZED_NAME_DNS_SERVERS = "dnsServers";
  @SerializedName(SERIALIZED_NAME_DNS_SERVERS)
  private List<String> dnsServers = new ArrayList<>();

  public static final String SERIALIZED_NAME_INDEX = "index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_IPV4_CONFIGURATION = "ipv4Configuration";
  @SerializedName(SERIALIZED_NAME_IPV4_CONFIGURATION)
  private Ipv4Config ipv4Configuration;

  public static final String SERIALIZED_NAME_IPV6_CONFIGURATION = "ipv6Configuration";
  @SerializedName(SERIALIZED_NAME_IPV6_CONFIGURATION)
  private Ipv6Config ipv6Configuration;

  public static final String SERIALIZED_NAME_IPV6_LINK_LOCAL_ADDRESS = "ipv6LinkLocalAddress";
  @SerializedName(SERIALIZED_NAME_IPV6_LINK_LOCAL_ADDRESS)
  private String ipv6LinkLocalAddress;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_LINK_SPEED = "linkSpeed";
  @SerializedName(SERIALIZED_NAME_LINK_SPEED)
  private Long linkSpeed;

  public static final String SERIALIZED_NAME_MAC_ADDRESS = "macAddress";
  @SerializedName(SERIALIZED_NAME_MAC_ADDRESS)
  private String macAddress;

  public static final String SERIALIZED_NAME_NETWORK_ADAPTER_NAME = "networkAdapterName";
  @SerializedName(SERIALIZED_NAME_NETWORK_ADAPTER_NAME)
  private String networkAdapterName;

  public static final String SERIALIZED_NAME_NODE_ID = "nodeId";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private String nodeId;

  /**
   * Value indicating whether this adapter is RDMA capable.
   */
  @JsonAdapter(RdmaStatusEnum.Adapter.class)
  public enum RdmaStatusEnum {
    INCAPABLE("Incapable"),
    
    CAPABLE("Capable");

    private String value;

    RdmaStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RdmaStatusEnum fromValue(String value) {
      for (RdmaStatusEnum b : RdmaStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RdmaStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RdmaStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RdmaStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RdmaStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RdmaStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RDMA_STATUS = "rdmaStatus";
  @SerializedName(SERIALIZED_NAME_RDMA_STATUS)
  private RdmaStatusEnum rdmaStatus;

  /**
   * Value indicating whether this adapter is valid.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    INACTIVE("Inactive"),
    
    ACTIVE("Active");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public NetworkAdapter() {
  }

  public NetworkAdapter(
     String adapterId, 
     List<String> dnsServers, 
     Integer index, 
     String ipv6LinkLocalAddress, 
     String label, 
     Long linkSpeed, 
     String macAddress, 
     String networkAdapterName, 
     String nodeId, 
     StatusEnum status
  ) {
    this();
    this.adapterId = adapterId;
    this.dnsServers = dnsServers;
    this.index = index;
    this.ipv6LinkLocalAddress = ipv6LinkLocalAddress;
    this.label = label;
    this.linkSpeed = linkSpeed;
    this.macAddress = macAddress;
    this.networkAdapterName = networkAdapterName;
    this.nodeId = nodeId;
    this.status = status;
  }

  /**
   * Instance ID of network adapter.
   * @return adapterId
   */
  @javax.annotation.Nullable
  public String getAdapterId() {
    return adapterId;
  }



  public NetworkAdapter adapterPosition(NetworkAdapterPosition adapterPosition) {
    this.adapterPosition = adapterPosition;
    return this;
  }

  /**
   * Get adapterPosition
   * @return adapterPosition
   */
  @javax.annotation.Nullable
  public NetworkAdapterPosition getAdapterPosition() {
    return adapterPosition;
  }

  public void setAdapterPosition(NetworkAdapterPosition adapterPosition) {
    this.adapterPosition = adapterPosition;
  }


  public NetworkAdapter dhcpStatus(DhcpStatusEnum dhcpStatus) {
    this.dhcpStatus = dhcpStatus;
    return this;
  }

  /**
   * Value indicating whether this adapter has DHCP enabled.
   * @return dhcpStatus
   */
  @javax.annotation.Nullable
  public DhcpStatusEnum getDhcpStatus() {
    return dhcpStatus;
  }

  public void setDhcpStatus(DhcpStatusEnum dhcpStatus) {
    this.dhcpStatus = dhcpStatus;
  }


  /**
   * The list of DNS Servers of the device.
   * @return dnsServers
   */
  @javax.annotation.Nullable
  public List<String> getDnsServers() {
    return dnsServers;
  }



  /**
   * Logical index of the adapter.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }



  public NetworkAdapter ipv4Configuration(Ipv4Config ipv4Configuration) {
    this.ipv4Configuration = ipv4Configuration;
    return this;
  }

  /**
   * Get ipv4Configuration
   * @return ipv4Configuration
   */
  @javax.annotation.Nullable
  public Ipv4Config getIpv4Configuration() {
    return ipv4Configuration;
  }

  public void setIpv4Configuration(Ipv4Config ipv4Configuration) {
    this.ipv4Configuration = ipv4Configuration;
  }


  public NetworkAdapter ipv6Configuration(Ipv6Config ipv6Configuration) {
    this.ipv6Configuration = ipv6Configuration;
    return this;
  }

  /**
   * Get ipv6Configuration
   * @return ipv6Configuration
   */
  @javax.annotation.Nullable
  public Ipv6Config getIpv6Configuration() {
    return ipv6Configuration;
  }

  public void setIpv6Configuration(Ipv6Config ipv6Configuration) {
    this.ipv6Configuration = ipv6Configuration;
  }


  /**
   * The IPv6 local address.
   * @return ipv6LinkLocalAddress
   */
  @javax.annotation.Nullable
  public String getIpv6LinkLocalAddress() {
    return ipv6LinkLocalAddress;
  }



  /**
   * Hardware label for the adapter.
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }



  /**
   * Link speed.
   * @return linkSpeed
   */
  @javax.annotation.Nullable
  public Long getLinkSpeed() {
    return linkSpeed;
  }



  /**
   * MAC address.
   * @return macAddress
   */
  @javax.annotation.Nullable
  public String getMacAddress() {
    return macAddress;
  }



  /**
   * Network adapter name.
   * @return networkAdapterName
   */
  @javax.annotation.Nullable
  public String getNetworkAdapterName() {
    return networkAdapterName;
  }



  /**
   * Node ID of the network adapter.
   * @return nodeId
   */
  @javax.annotation.Nullable
  public String getNodeId() {
    return nodeId;
  }



  public NetworkAdapter rdmaStatus(RdmaStatusEnum rdmaStatus) {
    this.rdmaStatus = rdmaStatus;
    return this;
  }

  /**
   * Value indicating whether this adapter is RDMA capable.
   * @return rdmaStatus
   */
  @javax.annotation.Nullable
  public RdmaStatusEnum getRdmaStatus() {
    return rdmaStatus;
  }

  public void setRdmaStatus(RdmaStatusEnum rdmaStatus) {
    this.rdmaStatus = rdmaStatus;
  }


  /**
   * Value indicating whether this adapter is valid.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkAdapter networkAdapter = (NetworkAdapter) o;
    return Objects.equals(this.adapterId, networkAdapter.adapterId) &&
        Objects.equals(this.adapterPosition, networkAdapter.adapterPosition) &&
        Objects.equals(this.dhcpStatus, networkAdapter.dhcpStatus) &&
        Objects.equals(this.dnsServers, networkAdapter.dnsServers) &&
        Objects.equals(this.index, networkAdapter.index) &&
        Objects.equals(this.ipv4Configuration, networkAdapter.ipv4Configuration) &&
        Objects.equals(this.ipv6Configuration, networkAdapter.ipv6Configuration) &&
        Objects.equals(this.ipv6LinkLocalAddress, networkAdapter.ipv6LinkLocalAddress) &&
        Objects.equals(this.label, networkAdapter.label) &&
        Objects.equals(this.linkSpeed, networkAdapter.linkSpeed) &&
        Objects.equals(this.macAddress, networkAdapter.macAddress) &&
        Objects.equals(this.networkAdapterName, networkAdapter.networkAdapterName) &&
        Objects.equals(this.nodeId, networkAdapter.nodeId) &&
        Objects.equals(this.rdmaStatus, networkAdapter.rdmaStatus) &&
        Objects.equals(this.status, networkAdapter.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adapterId, adapterPosition, dhcpStatus, dnsServers, index, ipv4Configuration, ipv6Configuration, ipv6LinkLocalAddress, label, linkSpeed, macAddress, networkAdapterName, nodeId, rdmaStatus, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkAdapter {\n");
    sb.append("    adapterId: ").append(toIndentedString(adapterId)).append("\n");
    sb.append("    adapterPosition: ").append(toIndentedString(adapterPosition)).append("\n");
    sb.append("    dhcpStatus: ").append(toIndentedString(dhcpStatus)).append("\n");
    sb.append("    dnsServers: ").append(toIndentedString(dnsServers)).append("\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    ipv4Configuration: ").append(toIndentedString(ipv4Configuration)).append("\n");
    sb.append("    ipv6Configuration: ").append(toIndentedString(ipv6Configuration)).append("\n");
    sb.append("    ipv6LinkLocalAddress: ").append(toIndentedString(ipv6LinkLocalAddress)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    linkSpeed: ").append(toIndentedString(linkSpeed)).append("\n");
    sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
    sb.append("    networkAdapterName: ").append(toIndentedString(networkAdapterName)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    rdmaStatus: ").append(toIndentedString(rdmaStatus)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adapterId");
    openapiFields.add("adapterPosition");
    openapiFields.add("dhcpStatus");
    openapiFields.add("dnsServers");
    openapiFields.add("index");
    openapiFields.add("ipv4Configuration");
    openapiFields.add("ipv6Configuration");
    openapiFields.add("ipv6LinkLocalAddress");
    openapiFields.add("label");
    openapiFields.add("linkSpeed");
    openapiFields.add("macAddress");
    openapiFields.add("networkAdapterName");
    openapiFields.add("nodeId");
    openapiFields.add("rdmaStatus");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkAdapter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkAdapter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkAdapter is not found in the empty JSON string", NetworkAdapter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkAdapter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkAdapter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adapterId") != null && !jsonObj.get("adapterId").isJsonNull()) && !jsonObj.get("adapterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adapterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adapterId").toString()));
      }
      // validate the optional field `adapterPosition`
      if (jsonObj.get("adapterPosition") != null && !jsonObj.get("adapterPosition").isJsonNull()) {
        NetworkAdapterPosition.validateJsonElement(jsonObj.get("adapterPosition"));
      }
      if ((jsonObj.get("dhcpStatus") != null && !jsonObj.get("dhcpStatus").isJsonNull()) && !jsonObj.get("dhcpStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dhcpStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dhcpStatus").toString()));
      }
      // validate the optional field `dhcpStatus`
      if (jsonObj.get("dhcpStatus") != null && !jsonObj.get("dhcpStatus").isJsonNull()) {
        DhcpStatusEnum.validateJsonElement(jsonObj.get("dhcpStatus"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dnsServers") != null && !jsonObj.get("dnsServers").isJsonNull() && !jsonObj.get("dnsServers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsServers` to be an array in the JSON string but got `%s`", jsonObj.get("dnsServers").toString()));
      }
      // validate the optional field `ipv4Configuration`
      if (jsonObj.get("ipv4Configuration") != null && !jsonObj.get("ipv4Configuration").isJsonNull()) {
        Ipv4Config.validateJsonElement(jsonObj.get("ipv4Configuration"));
      }
      // validate the optional field `ipv6Configuration`
      if (jsonObj.get("ipv6Configuration") != null && !jsonObj.get("ipv6Configuration").isJsonNull()) {
        Ipv6Config.validateJsonElement(jsonObj.get("ipv6Configuration"));
      }
      if ((jsonObj.get("ipv6LinkLocalAddress") != null && !jsonObj.get("ipv6LinkLocalAddress").isJsonNull()) && !jsonObj.get("ipv6LinkLocalAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipv6LinkLocalAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipv6LinkLocalAddress").toString()));
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("macAddress") != null && !jsonObj.get("macAddress").isJsonNull()) && !jsonObj.get("macAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `macAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("macAddress").toString()));
      }
      if ((jsonObj.get("networkAdapterName") != null && !jsonObj.get("networkAdapterName").isJsonNull()) && !jsonObj.get("networkAdapterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkAdapterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkAdapterName").toString()));
      }
      if ((jsonObj.get("nodeId") != null && !jsonObj.get("nodeId").isJsonNull()) && !jsonObj.get("nodeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeId").toString()));
      }
      if ((jsonObj.get("rdmaStatus") != null && !jsonObj.get("rdmaStatus").isJsonNull()) && !jsonObj.get("rdmaStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rdmaStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rdmaStatus").toString()));
      }
      // validate the optional field `rdmaStatus`
      if (jsonObj.get("rdmaStatus") != null && !jsonObj.get("rdmaStatus").isJsonNull()) {
        RdmaStatusEnum.validateJsonElement(jsonObj.get("rdmaStatus"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkAdapter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkAdapter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkAdapter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkAdapter.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkAdapter>() {
           @Override
           public void write(JsonWriter out, NetworkAdapter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkAdapter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkAdapter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkAdapter
   * @throws IOException if the JSON string is invalid with respect to NetworkAdapter
   */
  public static NetworkAdapter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkAdapter.class);
  }

  /**
   * Convert an instance of NetworkAdapter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

