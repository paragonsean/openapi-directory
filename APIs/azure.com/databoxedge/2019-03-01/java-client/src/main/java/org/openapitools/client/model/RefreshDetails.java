/*
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Fields for tracking refresh job on the share.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:09:21.318256-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RefreshDetails {
  public static final String SERIALIZED_NAME_ERROR_MANIFEST_FILE = "errorManifestFile";
  @SerializedName(SERIALIZED_NAME_ERROR_MANIFEST_FILE)
  private String errorManifestFile;

  public static final String SERIALIZED_NAME_IN_PROGRESS_REFRESH_JOB_ID = "inProgressRefreshJobId";
  @SerializedName(SERIALIZED_NAME_IN_PROGRESS_REFRESH_JOB_ID)
  private String inProgressRefreshJobId;

  public static final String SERIALIZED_NAME_LAST_COMPLETED_REFRESH_JOB_TIME_IN_U_T_C = "lastCompletedRefreshJobTimeInUTC";
  @SerializedName(SERIALIZED_NAME_LAST_COMPLETED_REFRESH_JOB_TIME_IN_U_T_C)
  private OffsetDateTime lastCompletedRefreshJobTimeInUTC;

  public static final String SERIALIZED_NAME_LAST_JOB = "lastJob";
  @SerializedName(SERIALIZED_NAME_LAST_JOB)
  private String lastJob;

  public RefreshDetails() {
  }

  public RefreshDetails errorManifestFile(String errorManifestFile) {
    this.errorManifestFile = errorManifestFile;
    return this;
  }

  /**
   * Indicates the relative path of the error xml for the last refresh job on this particular share, if any. This could be a failed job or a successful job.
   * @return errorManifestFile
   */
  @javax.annotation.Nullable
  public String getErrorManifestFile() {
    return errorManifestFile;
  }

  public void setErrorManifestFile(String errorManifestFile) {
    this.errorManifestFile = errorManifestFile;
  }


  public RefreshDetails inProgressRefreshJobId(String inProgressRefreshJobId) {
    this.inProgressRefreshJobId = inProgressRefreshJobId;
    return this;
  }

  /**
   * If a refresh share job is currently in progress on this share, this field indicates the ARM resource ID of that job. The field is empty if no job is in progress.
   * @return inProgressRefreshJobId
   */
  @javax.annotation.Nullable
  public String getInProgressRefreshJobId() {
    return inProgressRefreshJobId;
  }

  public void setInProgressRefreshJobId(String inProgressRefreshJobId) {
    this.inProgressRefreshJobId = inProgressRefreshJobId;
  }


  public RefreshDetails lastCompletedRefreshJobTimeInUTC(OffsetDateTime lastCompletedRefreshJobTimeInUTC) {
    this.lastCompletedRefreshJobTimeInUTC = lastCompletedRefreshJobTimeInUTC;
    return this;
  }

  /**
   * Indicates the completed time for the last refresh job on this particular share, if any.This could be a failed job or a successful job.
   * @return lastCompletedRefreshJobTimeInUTC
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastCompletedRefreshJobTimeInUTC() {
    return lastCompletedRefreshJobTimeInUTC;
  }

  public void setLastCompletedRefreshJobTimeInUTC(OffsetDateTime lastCompletedRefreshJobTimeInUTC) {
    this.lastCompletedRefreshJobTimeInUTC = lastCompletedRefreshJobTimeInUTC;
  }


  public RefreshDetails lastJob(String lastJob) {
    this.lastJob = lastJob;
    return this;
  }

  /**
   * Indicates the id of the last refresh job on this particular share,if any. This could be a failed job or a successful job.
   * @return lastJob
   */
  @javax.annotation.Nullable
  public String getLastJob() {
    return lastJob;
  }

  public void setLastJob(String lastJob) {
    this.lastJob = lastJob;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RefreshDetails refreshDetails = (RefreshDetails) o;
    return Objects.equals(this.errorManifestFile, refreshDetails.errorManifestFile) &&
        Objects.equals(this.inProgressRefreshJobId, refreshDetails.inProgressRefreshJobId) &&
        Objects.equals(this.lastCompletedRefreshJobTimeInUTC, refreshDetails.lastCompletedRefreshJobTimeInUTC) &&
        Objects.equals(this.lastJob, refreshDetails.lastJob);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorManifestFile, inProgressRefreshJobId, lastCompletedRefreshJobTimeInUTC, lastJob);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RefreshDetails {\n");
    sb.append("    errorManifestFile: ").append(toIndentedString(errorManifestFile)).append("\n");
    sb.append("    inProgressRefreshJobId: ").append(toIndentedString(inProgressRefreshJobId)).append("\n");
    sb.append("    lastCompletedRefreshJobTimeInUTC: ").append(toIndentedString(lastCompletedRefreshJobTimeInUTC)).append("\n");
    sb.append("    lastJob: ").append(toIndentedString(lastJob)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("errorManifestFile");
    openapiFields.add("inProgressRefreshJobId");
    openapiFields.add("lastCompletedRefreshJobTimeInUTC");
    openapiFields.add("lastJob");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RefreshDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RefreshDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RefreshDetails is not found in the empty JSON string", RefreshDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RefreshDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RefreshDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("errorManifestFile") != null && !jsonObj.get("errorManifestFile").isJsonNull()) && !jsonObj.get("errorManifestFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorManifestFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorManifestFile").toString()));
      }
      if ((jsonObj.get("inProgressRefreshJobId") != null && !jsonObj.get("inProgressRefreshJobId").isJsonNull()) && !jsonObj.get("inProgressRefreshJobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inProgressRefreshJobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inProgressRefreshJobId").toString()));
      }
      if ((jsonObj.get("lastJob") != null && !jsonObj.get("lastJob").isJsonNull()) && !jsonObj.get("lastJob").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastJob` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastJob").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RefreshDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RefreshDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RefreshDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RefreshDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<RefreshDetails>() {
           @Override
           public void write(JsonWriter out, RefreshDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RefreshDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RefreshDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RefreshDetails
   * @throws IOException if the JSON string is invalid with respect to RefreshDetails
   */
  public static RefreshDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RefreshDetails.class);
  }

  /**
   * Convert an instance of RefreshDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

