/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobProperties::OAIJobProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobProperties::OAIJobProperties() {
    this->initializeModel();
}

OAIJobProperties::~OAIJobProperties() {}

void OAIJobProperties::initializeModel() {

    m_current_stage_isSet = false;
    m_current_stage_isValid = false;

    m_download_progress_isSet = false;
    m_download_progress_isValid = false;

    m_error_manifest_file_isSet = false;
    m_error_manifest_file_isValid = false;

    m_folder_isSet = false;
    m_folder_isValid = false;

    m_install_progress_isSet = false;
    m_install_progress_isValid = false;

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_share_id_isSet = false;
    m_share_id_isValid = false;

    m_total_refresh_errors_isSet = false;
    m_total_refresh_errors_isValid = false;
}

void OAIJobProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobProperties::fromJsonObject(QJsonObject json) {

    m_current_stage_isValid = ::OpenAPI::fromJsonValue(m_current_stage, json[QString("currentStage")]);
    m_current_stage_isSet = !json[QString("currentStage")].isNull() && m_current_stage_isValid;

    m_download_progress_isValid = ::OpenAPI::fromJsonValue(m_download_progress, json[QString("downloadProgress")]);
    m_download_progress_isSet = !json[QString("downloadProgress")].isNull() && m_download_progress_isValid;

    m_error_manifest_file_isValid = ::OpenAPI::fromJsonValue(m_error_manifest_file, json[QString("errorManifestFile")]);
    m_error_manifest_file_isSet = !json[QString("errorManifestFile")].isNull() && m_error_manifest_file_isValid;

    m_folder_isValid = ::OpenAPI::fromJsonValue(m_folder, json[QString("folder")]);
    m_folder_isSet = !json[QString("folder")].isNull() && m_folder_isValid;

    m_install_progress_isValid = ::OpenAPI::fromJsonValue(m_install_progress, json[QString("installProgress")]);
    m_install_progress_isSet = !json[QString("installProgress")].isNull() && m_install_progress_isValid;

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("jobType")]);
    m_job_type_isSet = !json[QString("jobType")].isNull() && m_job_type_isValid;

    m_share_id_isValid = ::OpenAPI::fromJsonValue(m_share_id, json[QString("shareId")]);
    m_share_id_isSet = !json[QString("shareId")].isNull() && m_share_id_isValid;

    m_total_refresh_errors_isValid = ::OpenAPI::fromJsonValue(m_total_refresh_errors, json[QString("totalRefreshErrors")]);
    m_total_refresh_errors_isSet = !json[QString("totalRefreshErrors")].isNull() && m_total_refresh_errors_isValid;
}

QString OAIJobProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_current_stage_isSet) {
        obj.insert(QString("currentStage"), ::OpenAPI::toJsonValue(m_current_stage));
    }
    if (m_download_progress.isSet()) {
        obj.insert(QString("downloadProgress"), ::OpenAPI::toJsonValue(m_download_progress));
    }
    if (m_error_manifest_file_isSet) {
        obj.insert(QString("errorManifestFile"), ::OpenAPI::toJsonValue(m_error_manifest_file));
    }
    if (m_folder_isSet) {
        obj.insert(QString("folder"), ::OpenAPI::toJsonValue(m_folder));
    }
    if (m_install_progress.isSet()) {
        obj.insert(QString("installProgress"), ::OpenAPI::toJsonValue(m_install_progress));
    }
    if (m_job_type_isSet) {
        obj.insert(QString("jobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    if (m_share_id_isSet) {
        obj.insert(QString("shareId"), ::OpenAPI::toJsonValue(m_share_id));
    }
    if (m_total_refresh_errors_isSet) {
        obj.insert(QString("totalRefreshErrors"), ::OpenAPI::toJsonValue(m_total_refresh_errors));
    }
    return obj;
}

QString OAIJobProperties::getCurrentStage() const {
    return m_current_stage;
}
void OAIJobProperties::setCurrentStage(const QString &current_stage) {
    m_current_stage = current_stage;
    m_current_stage_isSet = true;
}

bool OAIJobProperties::is_current_stage_Set() const{
    return m_current_stage_isSet;
}

bool OAIJobProperties::is_current_stage_Valid() const{
    return m_current_stage_isValid;
}

OAIUpdateDownloadProgress OAIJobProperties::getDownloadProgress() const {
    return m_download_progress;
}
void OAIJobProperties::setDownloadProgress(const OAIUpdateDownloadProgress &download_progress) {
    m_download_progress = download_progress;
    m_download_progress_isSet = true;
}

bool OAIJobProperties::is_download_progress_Set() const{
    return m_download_progress_isSet;
}

bool OAIJobProperties::is_download_progress_Valid() const{
    return m_download_progress_isValid;
}

QString OAIJobProperties::getErrorManifestFile() const {
    return m_error_manifest_file;
}
void OAIJobProperties::setErrorManifestFile(const QString &error_manifest_file) {
    m_error_manifest_file = error_manifest_file;
    m_error_manifest_file_isSet = true;
}

bool OAIJobProperties::is_error_manifest_file_Set() const{
    return m_error_manifest_file_isSet;
}

bool OAIJobProperties::is_error_manifest_file_Valid() const{
    return m_error_manifest_file_isValid;
}

QString OAIJobProperties::getFolder() const {
    return m_folder;
}
void OAIJobProperties::setFolder(const QString &folder) {
    m_folder = folder;
    m_folder_isSet = true;
}

bool OAIJobProperties::is_folder_Set() const{
    return m_folder_isSet;
}

bool OAIJobProperties::is_folder_Valid() const{
    return m_folder_isValid;
}

OAIUpdateInstallProgress OAIJobProperties::getInstallProgress() const {
    return m_install_progress;
}
void OAIJobProperties::setInstallProgress(const OAIUpdateInstallProgress &install_progress) {
    m_install_progress = install_progress;
    m_install_progress_isSet = true;
}

bool OAIJobProperties::is_install_progress_Set() const{
    return m_install_progress_isSet;
}

bool OAIJobProperties::is_install_progress_Valid() const{
    return m_install_progress_isValid;
}

QString OAIJobProperties::getJobType() const {
    return m_job_type;
}
void OAIJobProperties::setJobType(const QString &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAIJobProperties::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAIJobProperties::is_job_type_Valid() const{
    return m_job_type_isValid;
}

QString OAIJobProperties::getShareId() const {
    return m_share_id;
}
void OAIJobProperties::setShareId(const QString &share_id) {
    m_share_id = share_id;
    m_share_id_isSet = true;
}

bool OAIJobProperties::is_share_id_Set() const{
    return m_share_id_isSet;
}

bool OAIJobProperties::is_share_id_Valid() const{
    return m_share_id_isValid;
}

qint32 OAIJobProperties::getTotalRefreshErrors() const {
    return m_total_refresh_errors;
}
void OAIJobProperties::setTotalRefreshErrors(const qint32 &total_refresh_errors) {
    m_total_refresh_errors = total_refresh_errors;
    m_total_refresh_errors_isSet = true;
}

bool OAIJobProperties::is_total_refresh_errors_Set() const{
    return m_total_refresh_errors_isSet;
}

bool OAIJobProperties::is_total_refresh_errors_Valid() const{
    return m_total_refresh_errors_isValid;
}

bool OAIJobProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_stage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_progress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_manifest_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_install_progress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_refresh_errors_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
