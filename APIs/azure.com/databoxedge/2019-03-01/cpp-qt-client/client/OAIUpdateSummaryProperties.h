/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateSummaryProperties.h
 *
 * The device update information summary.
 */

#ifndef OAIUpdateSummaryProperties_H
#define OAIUpdateSummaryProperties_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpdateSummaryProperties : public OAIObject {
public:
    OAIUpdateSummaryProperties();
    OAIUpdateSummaryProperties(QString json);
    ~OAIUpdateSummaryProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getDeviceLastScannedDateTime() const;
    void setDeviceLastScannedDateTime(const QDateTime &device_last_scanned_date_time);
    bool is_device_last_scanned_date_time_Set() const;
    bool is_device_last_scanned_date_time_Valid() const;

    QString getDeviceVersionNumber() const;
    void setDeviceVersionNumber(const QString &device_version_number);
    bool is_device_version_number_Set() const;
    bool is_device_version_number_Valid() const;

    QString getFriendlyDeviceVersionName() const;
    void setFriendlyDeviceVersionName(const QString &friendly_device_version_name);
    bool is_friendly_device_version_name_Set() const;
    bool is_friendly_device_version_name_Valid() const;

    QString getInProgressDownloadJobId() const;
    void setInProgressDownloadJobId(const QString &in_progress_download_job_id);
    bool is_in_progress_download_job_id_Set() const;
    bool is_in_progress_download_job_id_Valid() const;

    QDateTime getInProgressDownloadJobStartedDateTime() const;
    void setInProgressDownloadJobStartedDateTime(const QDateTime &in_progress_download_job_started_date_time);
    bool is_in_progress_download_job_started_date_time_Set() const;
    bool is_in_progress_download_job_started_date_time_Valid() const;

    QString getInProgressInstallJobId() const;
    void setInProgressInstallJobId(const QString &in_progress_install_job_id);
    bool is_in_progress_install_job_id_Set() const;
    bool is_in_progress_install_job_id_Valid() const;

    QDateTime getInProgressInstallJobStartedDateTime() const;
    void setInProgressInstallJobStartedDateTime(const QDateTime &in_progress_install_job_started_date_time);
    bool is_in_progress_install_job_started_date_time_Set() const;
    bool is_in_progress_install_job_started_date_time_Valid() const;

    QDateTime getLastCompletedDownloadJobDateTime() const;
    void setLastCompletedDownloadJobDateTime(const QDateTime &last_completed_download_job_date_time);
    bool is_last_completed_download_job_date_time_Set() const;
    bool is_last_completed_download_job_date_time_Valid() const;

    QDateTime getLastCompletedInstallJobDateTime() const;
    void setLastCompletedInstallJobDateTime(const QDateTime &last_completed_install_job_date_time);
    bool is_last_completed_install_job_date_time_Set() const;
    bool is_last_completed_install_job_date_time_Valid() const;

    QDateTime getLastCompletedScanJobDateTime() const;
    void setLastCompletedScanJobDateTime(const QDateTime &last_completed_scan_job_date_time);
    bool is_last_completed_scan_job_date_time_Set() const;
    bool is_last_completed_scan_job_date_time_Valid() const;

    QString getOngoingUpdateOperation() const;
    void setOngoingUpdateOperation(const QString &ongoing_update_operation);
    bool is_ongoing_update_operation_Set() const;
    bool is_ongoing_update_operation_Valid() const;

    QString getRebootBehavior() const;
    void setRebootBehavior(const QString &reboot_behavior);
    bool is_reboot_behavior_Set() const;
    bool is_reboot_behavior_Valid() const;

    qint32 getTotalNumberOfUpdatesAvailable() const;
    void setTotalNumberOfUpdatesAvailable(const qint32 &total_number_of_updates_available);
    bool is_total_number_of_updates_available_Set() const;
    bool is_total_number_of_updates_available_Valid() const;

    qint32 getTotalNumberOfUpdatesPendingDownload() const;
    void setTotalNumberOfUpdatesPendingDownload(const qint32 &total_number_of_updates_pending_download);
    bool is_total_number_of_updates_pending_download_Set() const;
    bool is_total_number_of_updates_pending_download_Valid() const;

    qint32 getTotalNumberOfUpdatesPendingInstall() const;
    void setTotalNumberOfUpdatesPendingInstall(const qint32 &total_number_of_updates_pending_install);
    bool is_total_number_of_updates_pending_install_Set() const;
    bool is_total_number_of_updates_pending_install_Valid() const;

    double getTotalUpdateSizeInBytes() const;
    void setTotalUpdateSizeInBytes(const double &total_update_size_in_bytes);
    bool is_total_update_size_in_bytes_Set() const;
    bool is_total_update_size_in_bytes_Valid() const;

    QList<QString> getUpdateTitles() const;
    void setUpdateTitles(const QList<QString> &update_titles);
    bool is_update_titles_Set() const;
    bool is_update_titles_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_device_last_scanned_date_time;
    bool m_device_last_scanned_date_time_isSet;
    bool m_device_last_scanned_date_time_isValid;

    QString m_device_version_number;
    bool m_device_version_number_isSet;
    bool m_device_version_number_isValid;

    QString m_friendly_device_version_name;
    bool m_friendly_device_version_name_isSet;
    bool m_friendly_device_version_name_isValid;

    QString m_in_progress_download_job_id;
    bool m_in_progress_download_job_id_isSet;
    bool m_in_progress_download_job_id_isValid;

    QDateTime m_in_progress_download_job_started_date_time;
    bool m_in_progress_download_job_started_date_time_isSet;
    bool m_in_progress_download_job_started_date_time_isValid;

    QString m_in_progress_install_job_id;
    bool m_in_progress_install_job_id_isSet;
    bool m_in_progress_install_job_id_isValid;

    QDateTime m_in_progress_install_job_started_date_time;
    bool m_in_progress_install_job_started_date_time_isSet;
    bool m_in_progress_install_job_started_date_time_isValid;

    QDateTime m_last_completed_download_job_date_time;
    bool m_last_completed_download_job_date_time_isSet;
    bool m_last_completed_download_job_date_time_isValid;

    QDateTime m_last_completed_install_job_date_time;
    bool m_last_completed_install_job_date_time_isSet;
    bool m_last_completed_install_job_date_time_isValid;

    QDateTime m_last_completed_scan_job_date_time;
    bool m_last_completed_scan_job_date_time_isSet;
    bool m_last_completed_scan_job_date_time_isValid;

    QString m_ongoing_update_operation;
    bool m_ongoing_update_operation_isSet;
    bool m_ongoing_update_operation_isValid;

    QString m_reboot_behavior;
    bool m_reboot_behavior_isSet;
    bool m_reboot_behavior_isValid;

    qint32 m_total_number_of_updates_available;
    bool m_total_number_of_updates_available_isSet;
    bool m_total_number_of_updates_available_isValid;

    qint32 m_total_number_of_updates_pending_download;
    bool m_total_number_of_updates_pending_download_isSet;
    bool m_total_number_of_updates_pending_download_isValid;

    qint32 m_total_number_of_updates_pending_install;
    bool m_total_number_of_updates_pending_install_isSet;
    bool m_total_number_of_updates_pending_install_isValid;

    double m_total_update_size_in_bytes;
    bool m_total_update_size_in_bytes_isSet;
    bool m_total_update_size_in_bytes_isValid;

    QList<QString> m_update_titles;
    bool m_update_titles_isSet;
    bool m_update_titles_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateSummaryProperties)

#endif // OAIUpdateSummaryProperties_H
