/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRawCertificateData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRawCertificateData::OAIRawCertificateData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRawCertificateData::OAIRawCertificateData() {
    this->initializeModel();
}

OAIRawCertificateData::~OAIRawCertificateData() {}

void OAIRawCertificateData::initializeModel() {

    m_authentication_type_isSet = false;
    m_authentication_type_isValid = false;

    m_certificate_isSet = false;
    m_certificate_isValid = false;
}

void OAIRawCertificateData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRawCertificateData::fromJsonObject(QJsonObject json) {

    m_authentication_type_isValid = ::OpenAPI::fromJsonValue(m_authentication_type, json[QString("authenticationType")]);
    m_authentication_type_isSet = !json[QString("authenticationType")].isNull() && m_authentication_type_isValid;

    m_certificate_isValid = ::OpenAPI::fromJsonValue(m_certificate, json[QString("certificate")]);
    m_certificate_isSet = !json[QString("certificate")].isNull() && m_certificate_isValid;
}

QString OAIRawCertificateData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRawCertificateData::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_type_isSet) {
        obj.insert(QString("authenticationType"), ::OpenAPI::toJsonValue(m_authentication_type));
    }
    if (m_certificate_isSet) {
        obj.insert(QString("certificate"), ::OpenAPI::toJsonValue(m_certificate));
    }
    return obj;
}

QString OAIRawCertificateData::getAuthenticationType() const {
    return m_authentication_type;
}
void OAIRawCertificateData::setAuthenticationType(const QString &authentication_type) {
    m_authentication_type = authentication_type;
    m_authentication_type_isSet = true;
}

bool OAIRawCertificateData::is_authentication_type_Set() const{
    return m_authentication_type_isSet;
}

bool OAIRawCertificateData::is_authentication_type_Valid() const{
    return m_authentication_type_isValid;
}

QString OAIRawCertificateData::getCertificate() const {
    return m_certificate;
}
void OAIRawCertificateData::setCertificate(const QString &certificate) {
    m_certificate = certificate;
    m_certificate_isSet = true;
}

bool OAIRawCertificateData::is_certificate_Set() const{
    return m_certificate_isSet;
}

bool OAIRawCertificateData::is_certificate_Valid() const{
    return m_certificate_isValid;
}

bool OAIRawCertificateData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRawCertificateData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_certificate_isValid && true;
}

} // namespace OpenAPI
