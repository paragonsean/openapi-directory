/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrdersApi_H
#define OAI_OAIOrdersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIOrder.h"
#include "OAIOrderList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrdersApi : public QObject {
    Q_OBJECT

public:
    OAIOrdersApi(const int timeOut = 0);
    ~OAIOrdersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  order OAIOrder [required]
    */
    virtual void ordersCreateOrUpdate(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const OAIOrder &order);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void ordersDelete(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void ordersGet(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  device_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void ordersListByDataBoxEdgeDevice(const QString &device_name, const QString &subscription_id, const QString &resource_group_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void ordersCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void ordersDeleteCallback(OAIHttpRequestWorker *worker);
    void ordersGetCallback(OAIHttpRequestWorker *worker);
    void ordersListByDataBoxEdgeDeviceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void ordersCreateOrUpdateSignal(OAIOrder summary);
    void ordersDeleteSignal();
    void ordersGetSignal(OAIOrder summary);
    void ordersListByDataBoxEdgeDeviceSignal(OAIOrderList summary);


    void ordersCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIOrder summary);
    void ordersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void ordersGetSignalFull(OAIHttpRequestWorker *worker, OAIOrder summary);
    void ordersListByDataBoxEdgeDeviceSignalFull(OAIHttpRequestWorker *worker, OAIOrderList summary);

    Q_DECL_DEPRECATED_X("Use ordersCreateOrUpdateSignalError() instead")
    void ordersCreateOrUpdateSignalE(OAIOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersCreateOrUpdateSignalError(OAIOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersDeleteSignalError() instead")
    void ordersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void ordersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersGetSignalError() instead")
    void ordersGetSignalE(OAIOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersGetSignalError(OAIOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersListByDataBoxEdgeDeviceSignalError() instead")
    void ordersListByDataBoxEdgeDeviceSignalE(OAIOrderList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersListByDataBoxEdgeDeviceSignalError(OAIOrderList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use ordersCreateOrUpdateSignalErrorFull() instead")
    void ordersCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersDeleteSignalErrorFull() instead")
    void ordersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersGetSignalErrorFull() instead")
    void ordersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use ordersListByDataBoxEdgeDeviceSignalErrorFull() instead")
    void ordersListByDataBoxEdgeDeviceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ordersListByDataBoxEdgeDeviceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
