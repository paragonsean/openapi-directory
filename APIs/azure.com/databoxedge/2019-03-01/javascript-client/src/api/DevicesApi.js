/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudError from '../model/CloudError';
import DataBoxEdgeDevice from '../model/DataBoxEdgeDevice';
import DataBoxEdgeDeviceExtendedInfo from '../model/DataBoxEdgeDeviceExtendedInfo';
import DataBoxEdgeDeviceList from '../model/DataBoxEdgeDeviceList';
import DataBoxEdgeDevicePatch from '../model/DataBoxEdgeDevicePatch';
import NetworkSettings from '../model/NetworkSettings';
import SecuritySettings from '../model/SecuritySettings';
import UpdateSummary from '../model/UpdateSummary';
import UploadCertificateRequest from '../model/UploadCertificateRequest';
import UploadCertificateResponse from '../model/UploadCertificateResponse';

/**
* Devices service.
* @module api/DevicesApi
* @version 2019-03-01
*/
export default class DevicesApi {

    /**
    * Constructs a new DevicesApi. 
    * @alias module:api/DevicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the devicesCreateOrUpdate operation.
     * @callback module:api/DevicesApi~devicesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataBoxEdgeDevice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a Data Box Edge/Gateway resource.
     * @param {String} deviceName The device name.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} apiVersion The API version.
     * @param {module:model/DataBoxEdgeDevice} dataBoxEdgeDevice The resource object.
     * @param {module:api/DevicesApi~devicesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataBoxEdgeDevice}
     */
    devicesCreateOrUpdate(deviceName, subscriptionId, resourceGroupName, apiVersion, dataBoxEdgeDevice, callback) {
      let postBody = dataBoxEdgeDevice;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling devicesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling devicesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling devicesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling devicesCreateOrUpdate");
      }
      // verify the required parameter 'dataBoxEdgeDevice' is set
      if (dataBoxEdgeDevice === undefined || dataBoxEdgeDevice === null) {
        throw new Error("Missing the required parameter 'dataBoxEdgeDevice' when calling devicesCreateOrUpdate");
      }

      let pathParams = {
        'deviceName': deviceName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataBoxEdgeDevice;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesCreateOrUpdateSecuritySettings operation.
     * @callback module:api/DevicesApi~devicesCreateOrUpdateSecuritySettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the security settings on a data box edge/gateway device.
     * @param {String} deviceName The device name.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} apiVersion The API version.
     * @param {module:model/SecuritySettings} securitySettings The security settings.
     * @param {module:api/DevicesApi~devicesCreateOrUpdateSecuritySettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    devicesCreateOrUpdateSecuritySettings(deviceName, subscriptionId, resourceGroupName, apiVersion, securitySettings, callback) {
      let postBody = securitySettings;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling devicesCreateOrUpdateSecuritySettings");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling devicesCreateOrUpdateSecuritySettings");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling devicesCreateOrUpdateSecuritySettings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling devicesCreateOrUpdateSecuritySettings");
      }
      // verify the required parameter 'securitySettings' is set
      if (securitySettings === undefined || securitySettings === null) {
        throw new Error("Missing the required parameter 'securitySettings' when calling devicesCreateOrUpdateSecuritySettings");
      }

      let pathParams = {
        'deviceName': deviceName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/securitySettings/default/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesDelete operation.
     * @callback module:api/DevicesApi~devicesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the data box edge/gateway device.
     * @param {String} deviceName The device name.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} apiVersion The API version.
     * @param {module:api/DevicesApi~devicesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    devicesDelete(deviceName, subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling devicesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling devicesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling devicesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling devicesDelete");
      }

      let pathParams = {
        'deviceName': deviceName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesDownloadUpdates operation.
     * @callback module:api/DevicesApi~devicesDownloadUpdatesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Downloads the updates on a data box edge/gateway device.
     * @param {String} deviceName The device name.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} apiVersion The API version.
     * @param {module:api/DevicesApi~devicesDownloadUpdatesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    devicesDownloadUpdates(deviceName, subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling devicesDownloadUpdates");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling devicesDownloadUpdates");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling devicesDownloadUpdates");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling devicesDownloadUpdates");
      }

      let pathParams = {
        'deviceName': deviceName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/downloadUpdates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesGet operation.
     * @callback module:api/DevicesApi~devicesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataBoxEdgeDevice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the properties of the data box edge/gateway device.
     * @param {String} deviceName The device name.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} apiVersion The API version.
     * @param {module:api/DevicesApi~devicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataBoxEdgeDevice}
     */
    devicesGet(deviceName, subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling devicesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling devicesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling devicesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling devicesGet");
      }

      let pathParams = {
        'deviceName': deviceName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataBoxEdgeDevice;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesGetExtendedInformation operation.
     * @callback module:api/DevicesApi~devicesGetExtendedInformationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataBoxEdgeDeviceExtendedInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets additional information for the specified data box edge/gateway device.
     * @param {String} deviceName The device name.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} apiVersion The API version.
     * @param {module:api/DevicesApi~devicesGetExtendedInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataBoxEdgeDeviceExtendedInfo}
     */
    devicesGetExtendedInformation(deviceName, subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling devicesGetExtendedInformation");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling devicesGetExtendedInformation");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling devicesGetExtendedInformation");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling devicesGetExtendedInformation");
      }

      let pathParams = {
        'deviceName': deviceName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataBoxEdgeDeviceExtendedInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/getExtendedInformation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesGetNetworkSettings operation.
     * @callback module:api/DevicesApi~devicesGetNetworkSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the network settings of the specified data box edge/gateway device.
     * @param {String} deviceName The device name.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} apiVersion The API version.
     * @param {module:api/DevicesApi~devicesGetNetworkSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkSettings}
     */
    devicesGetNetworkSettings(deviceName, subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling devicesGetNetworkSettings");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling devicesGetNetworkSettings");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling devicesGetNetworkSettings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling devicesGetNetworkSettings");
      }

      let pathParams = {
        'deviceName': deviceName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NetworkSettings;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/networkSettings/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesGetUpdateSummary operation.
     * @callback module:api/DevicesApi~devicesGetUpdateSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the availability of updates based on the last scan of the device. It also gets information about any ongoing download or install jobs on the device.
     * @param {String} deviceName The device name.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} apiVersion The API version.
     * @param {module:api/DevicesApi~devicesGetUpdateSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSummary}
     */
    devicesGetUpdateSummary(deviceName, subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling devicesGetUpdateSummary");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling devicesGetUpdateSummary");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling devicesGetUpdateSummary");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling devicesGetUpdateSummary");
      }

      let pathParams = {
        'deviceName': deviceName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdateSummary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/updateSummary/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesInstallUpdates operation.
     * @callback module:api/DevicesApi~devicesInstallUpdatesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Installs the updates on the data box edge/gateway device.
     * @param {String} deviceName The device name.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} apiVersion The API version.
     * @param {module:api/DevicesApi~devicesInstallUpdatesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    devicesInstallUpdates(deviceName, subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling devicesInstallUpdates");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling devicesInstallUpdates");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling devicesInstallUpdates");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling devicesInstallUpdates");
      }

      let pathParams = {
        'deviceName': deviceName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/installUpdates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesListByResourceGroup operation.
     * @callback module:api/DevicesApi~devicesListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataBoxEdgeDeviceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the data box edge/gateway devices in a resource group.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} apiVersion The API version.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=<token> to populate the next page in the list.
     * @param {module:api/DevicesApi~devicesListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataBoxEdgeDeviceList}
     */
    devicesListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling devicesListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling devicesListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling devicesListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataBoxEdgeDeviceList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesListBySubscription operation.
     * @callback module:api/DevicesApi~devicesListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataBoxEdgeDeviceList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the data box edge/gateway devices in a subscription.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} apiVersion The API version.
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Specify $expand=details to populate additional fields related to the resource or Specify $skipToken=<token> to populate the next page in the list.
     * @param {module:api/DevicesApi~devicesListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataBoxEdgeDeviceList}
     */
    devicesListBySubscription(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling devicesListBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling devicesListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataBoxEdgeDeviceList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesScanForUpdates operation.
     * @callback module:api/DevicesApi~devicesScanForUpdatesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scans for updates on a data box edge/gateway device.
     * @param {String} deviceName The device name.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} apiVersion The API version.
     * @param {module:api/DevicesApi~devicesScanForUpdatesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    devicesScanForUpdates(deviceName, subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling devicesScanForUpdates");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling devicesScanForUpdates");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling devicesScanForUpdates");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling devicesScanForUpdates");
      }

      let pathParams = {
        'deviceName': deviceName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/scanForUpdates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesUpdate operation.
     * @callback module:api/DevicesApi~devicesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataBoxEdgeDevice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a Data Box Edge/Gateway resource.
     * @param {String} deviceName The device name.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} apiVersion The API version.
     * @param {module:model/DataBoxEdgeDevicePatch} parameters The resource parameters.
     * @param {module:api/DevicesApi~devicesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataBoxEdgeDevice}
     */
    devicesUpdate(deviceName, subscriptionId, resourceGroupName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling devicesUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling devicesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling devicesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling devicesUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling devicesUpdate");
      }

      let pathParams = {
        'deviceName': deviceName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataBoxEdgeDevice;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the devicesUploadCertificate operation.
     * @callback module:api/DevicesApi~devicesUploadCertificateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadCertificateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Uploads registration certificate for the device.
     * @param {String} deviceName The device name.
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} apiVersion The API version.
     * @param {module:model/UploadCertificateRequest} parameters The upload certificate request.
     * @param {module:api/DevicesApi~devicesUploadCertificateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadCertificateResponse}
     */
    devicesUploadCertificate(deviceName, subscriptionId, resourceGroupName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'deviceName' is set
      if (deviceName === undefined || deviceName === null) {
        throw new Error("Missing the required parameter 'deviceName' when calling devicesUploadCertificate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling devicesUploadCertificate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling devicesUploadCertificate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling devicesUploadCertificate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling devicesUploadCertificate");
      }

      let pathParams = {
        'deviceName': deviceName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UploadCertificateResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/{deviceName}/uploadCertificate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
