/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricDimensionV1 from './MetricDimensionV1';

/**
 * The MetricSpecificationV1 model module.
 * @module model/MetricSpecificationV1
 * @version 2019-03-01
 */
class MetricSpecificationV1 {
    /**
     * Constructs a new <code>MetricSpecificationV1</code>.
     * Metric specification version 1.
     * @alias module:model/MetricSpecificationV1
     */
    constructor() { 
        
        MetricSpecificationV1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetricSpecificationV1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricSpecificationV1} obj Optional instance to populate.
     * @return {module:model/MetricSpecificationV1} The populated <code>MetricSpecificationV1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricSpecificationV1();

            if (data.hasOwnProperty('aggregationType')) {
                obj['aggregationType'] = ApiClient.convertToType(data['aggregationType'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], [MetricDimensionV1]);
            }
            if (data.hasOwnProperty('displayDescription')) {
                obj['displayDescription'] = ApiClient.convertToType(data['displayDescription'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('fillGapWithZero')) {
                obj['fillGapWithZero'] = ApiClient.convertToType(data['fillGapWithZero'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('resourceIdDimensionNameOverride')) {
                obj['resourceIdDimensionNameOverride'] = ApiClient.convertToType(data['resourceIdDimensionNameOverride'], 'String');
            }
            if (data.hasOwnProperty('supportedAggregationTypes')) {
                obj['supportedAggregationTypes'] = ApiClient.convertToType(data['supportedAggregationTypes'], ['String']);
            }
            if (data.hasOwnProperty('supportedTimeGrainTypes')) {
                obj['supportedTimeGrainTypes'] = ApiClient.convertToType(data['supportedTimeGrainTypes'], ['String']);
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricSpecificationV1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricSpecificationV1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['aggregationType'] && !(typeof data['aggregationType'] === 'string' || data['aggregationType'] instanceof String)) {
            throw new Error("Expected the field `aggregationType` to be a primitive type in the JSON string but got " + data['aggregationType']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        if (data['dimensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensions'])) {
                throw new Error("Expected the field `dimensions` to be an array in the JSON data but got " + data['dimensions']);
            }
            // validate the optional field `dimensions` (array)
            for (const item of data['dimensions']) {
                MetricDimensionV1.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['displayDescription'] && !(typeof data['displayDescription'] === 'string' || data['displayDescription'] instanceof String)) {
            throw new Error("Expected the field `displayDescription` to be a primitive type in the JSON string but got " + data['displayDescription']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['resourceIdDimensionNameOverride'] && !(typeof data['resourceIdDimensionNameOverride'] === 'string' || data['resourceIdDimensionNameOverride'] instanceof String)) {
            throw new Error("Expected the field `resourceIdDimensionNameOverride` to be a primitive type in the JSON string but got " + data['resourceIdDimensionNameOverride']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedAggregationTypes'])) {
            throw new Error("Expected the field `supportedAggregationTypes` to be an array in the JSON data but got " + data['supportedAggregationTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedTimeGrainTypes'])) {
            throw new Error("Expected the field `supportedTimeGrainTypes` to be an array in the JSON data but got " + data['supportedTimeGrainTypes']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}



/**
 * Metric aggregation type.
 * @member {module:model/MetricSpecificationV1.AggregationTypeEnum} aggregationType
 */
MetricSpecificationV1.prototype['aggregationType'] = undefined;

/**
 * Metric category.
 * @member {module:model/MetricSpecificationV1.CategoryEnum} category
 */
MetricSpecificationV1.prototype['category'] = undefined;

/**
 * Metric dimensions, other than default dimension which is resource.
 * @member {Array.<module:model/MetricDimensionV1>} dimensions
 */
MetricSpecificationV1.prototype['dimensions'] = undefined;

/**
 * Description of the metric to be displayed.
 * @member {String} displayDescription
 */
MetricSpecificationV1.prototype['displayDescription'] = undefined;

/**
 * Display name of the metric.
 * @member {String} displayName
 */
MetricSpecificationV1.prototype['displayName'] = undefined;

/**
 * Set true to fill the gaps with zero.
 * @member {Boolean} fillGapWithZero
 */
MetricSpecificationV1.prototype['fillGapWithZero'] = undefined;

/**
 * Name of the metric.
 * @member {String} name
 */
MetricSpecificationV1.prototype['name'] = undefined;

/**
 * Resource name override.
 * @member {String} resourceIdDimensionNameOverride
 */
MetricSpecificationV1.prototype['resourceIdDimensionNameOverride'] = undefined;

/**
 * Support metric aggregation type.
 * @member {Array.<module:model/MetricSpecificationV1.SupportedAggregationTypesEnum>} supportedAggregationTypes
 */
MetricSpecificationV1.prototype['supportedAggregationTypes'] = undefined;

/**
 * Support granularity of metrics.
 * @member {Array.<module:model/MetricSpecificationV1.SupportedTimeGrainTypesEnum>} supportedTimeGrainTypes
 */
MetricSpecificationV1.prototype['supportedTimeGrainTypes'] = undefined;

/**
 * Metric units.
 * @member {module:model/MetricSpecificationV1.UnitEnum} unit
 */
MetricSpecificationV1.prototype['unit'] = undefined;





/**
 * Allowed values for the <code>aggregationType</code> property.
 * @enum {String}
 * @readonly
 */
MetricSpecificationV1['AggregationTypeEnum'] = {

    /**
     * value: "NotSpecified"
     * @const
     */
    "NotSpecified": "NotSpecified",

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Average"
     * @const
     */
    "Average": "Average",

    /**
     * value: "Minimum"
     * @const
     */
    "Minimum": "Minimum",

    /**
     * value: "Maximum"
     * @const
     */
    "Maximum": "Maximum",

    /**
     * value: "Total"
     * @const
     */
    "Total": "Total",

    /**
     * value: "Count"
     * @const
     */
    "Count": "Count"
};


/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
MetricSpecificationV1['CategoryEnum'] = {

    /**
     * value: "Capacity"
     * @const
     */
    "Capacity": "Capacity",

    /**
     * value: "Transaction"
     * @const
     */
    "Transaction": "Transaction"
};


/**
 * Allowed values for the <code>supportedAggregationTypes</code> property.
 * @enum {String}
 * @readonly
 */
MetricSpecificationV1['SupportedAggregationTypesEnum'] = {

    /**
     * value: "NotSpecified"
     * @const
     */
    "NotSpecified": "NotSpecified",

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Average"
     * @const
     */
    "Average": "Average",

    /**
     * value: "Minimum"
     * @const
     */
    "Minimum": "Minimum",

    /**
     * value: "Maximum"
     * @const
     */
    "Maximum": "Maximum",

    /**
     * value: "Total"
     * @const
     */
    "Total": "Total",

    /**
     * value: "Count"
     * @const
     */
    "Count": "Count"
};


/**
 * Allowed values for the <code>supportedTimeGrainTypes</code> property.
 * @enum {String}
 * @readonly
 */
MetricSpecificationV1['SupportedTimeGrainTypesEnum'] = {

    /**
     * value: "PT1M"
     * @const
     */
    "PT1M": "PT1M",

    /**
     * value: "PT5M"
     * @const
     */
    "PT5M": "PT5M",

    /**
     * value: "PT15M"
     * @const
     */
    "PT15M": "PT15M",

    /**
     * value: "PT30M"
     * @const
     */
    "PT30M": "PT30M",

    /**
     * value: "PT1H"
     * @const
     */
    "PT1H": "PT1H",

    /**
     * value: "PT6H"
     * @const
     */
    "PT6H": "PT6H",

    /**
     * value: "PT12H"
     * @const
     */
    "PT12H": "PT12H",

    /**
     * value: "PT1D"
     * @const
     */
    "PT1D": "PT1D"
};


/**
 * Allowed values for the <code>unit</code> property.
 * @enum {String}
 * @readonly
 */
MetricSpecificationV1['UnitEnum'] = {

    /**
     * value: "NotSpecified"
     * @const
     */
    "NotSpecified": "NotSpecified",

    /**
     * value: "Percent"
     * @const
     */
    "Percent": "Percent",

    /**
     * value: "Count"
     * @const
     */
    "Count": "Count",

    /**
     * value: "Seconds"
     * @const
     */
    "Seconds": "Seconds",

    /**
     * value: "Milliseconds"
     * @const
     */
    "Milliseconds": "Milliseconds",

    /**
     * value: "Bytes"
     * @const
     */
    "Bytes": "Bytes",

    /**
     * value: "BytesPerSecond"
     * @const
     */
    "BytesPerSecond": "BytesPerSecond",

    /**
     * value: "CountPerSecond"
     * @const
     */
    "CountPerSecond": "CountPerSecond"
};



export default MetricSpecificationV1;

