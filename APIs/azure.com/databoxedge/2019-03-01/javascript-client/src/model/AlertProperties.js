/**
 * DataBoxEdgeManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlertErrorDetails from './AlertErrorDetails';

/**
 * The AlertProperties model module.
 * @module model/AlertProperties
 * @version 2019-03-01
 */
class AlertProperties {
    /**
     * Constructs a new <code>AlertProperties</code>.
     * Properties of alert.
     * @alias module:model/AlertProperties
     */
    constructor() { 
        
        AlertProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AlertProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlertProperties} obj Optional instance to populate.
     * @return {module:model/AlertProperties} The populated <code>AlertProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlertProperties();

            if (data.hasOwnProperty('alertType')) {
                obj['alertType'] = ApiClient.convertToType(data['alertType'], 'String');
            }
            if (data.hasOwnProperty('appearedAtDateTime')) {
                obj['appearedAtDateTime'] = ApiClient.convertToType(data['appearedAtDateTime'], 'Date');
            }
            if (data.hasOwnProperty('detailedInformation')) {
                obj['detailedInformation'] = ApiClient.convertToType(data['detailedInformation'], {'String': 'String'});
            }
            if (data.hasOwnProperty('errorDetails')) {
                obj['errorDetails'] = AlertErrorDetails.constructFromObject(data['errorDetails']);
            }
            if (data.hasOwnProperty('recommendation')) {
                obj['recommendation'] = ApiClient.convertToType(data['recommendation'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlertProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlertProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alertType'] && !(typeof data['alertType'] === 'string' || data['alertType'] instanceof String)) {
            throw new Error("Expected the field `alertType` to be a primitive type in the JSON string but got " + data['alertType']);
        }
        // validate the optional field `errorDetails`
        if (data['errorDetails']) { // data not null
          AlertErrorDetails.validateJSON(data['errorDetails']);
        }
        // ensure the json data is a string
        if (data['recommendation'] && !(typeof data['recommendation'] === 'string' || data['recommendation'] instanceof String)) {
            throw new Error("Expected the field `recommendation` to be a primitive type in the JSON string but got " + data['recommendation']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * Alert type.
 * @member {String} alertType
 */
AlertProperties.prototype['alertType'] = undefined;

/**
 * UTC time when the alert appeared.
 * @member {Date} appearedAtDateTime
 */
AlertProperties.prototype['appearedAtDateTime'] = undefined;

/**
 * Alert details.
 * @member {Object.<String, String>} detailedInformation
 */
AlertProperties.prototype['detailedInformation'] = undefined;

/**
 * @member {module:model/AlertErrorDetails} errorDetails
 */
AlertProperties.prototype['errorDetails'] = undefined;

/**
 * Alert recommendation.
 * @member {String} recommendation
 */
AlertProperties.prototype['recommendation'] = undefined;

/**
 * Severity of the alert.
 * @member {module:model/AlertProperties.SeverityEnum} severity
 */
AlertProperties.prototype['severity'] = undefined;

/**
 * Alert title.
 * @member {String} title
 */
AlertProperties.prototype['title'] = undefined;





/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
AlertProperties['SeverityEnum'] = {

    /**
     * value: "Informational"
     * @const
     */
    "Informational": "Informational",

    /**
     * value: "Warning"
     * @const
     */
    "Warning": "Warning",

    /**
     * value: "Critical"
     * @const
     */
    "Critical": "Critical"
};



export default AlertProperties;

