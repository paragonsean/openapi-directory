# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ipv4_config import Ipv4Config
from openapi_server.models.ipv6_config import Ipv6Config
from openapi_server.models.network_adapter_position import NetworkAdapterPosition
from openapi_server import util


class NetworkAdapter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adapter_id: str=None, adapter_position: NetworkAdapterPosition=None, dhcp_status: str=None, dns_servers: List[str]=None, index: int=None, ipv4_configuration: Ipv4Config=None, ipv6_configuration: Ipv6Config=None, ipv6_link_local_address: str=None, label: str=None, link_speed: int=None, mac_address: str=None, network_adapter_name: str=None, node_id: str=None, rdma_status: str=None, status: str=None):
        """NetworkAdapter - a model defined in OpenAPI

        :param adapter_id: The adapter_id of this NetworkAdapter.
        :param adapter_position: The adapter_position of this NetworkAdapter.
        :param dhcp_status: The dhcp_status of this NetworkAdapter.
        :param dns_servers: The dns_servers of this NetworkAdapter.
        :param index: The index of this NetworkAdapter.
        :param ipv4_configuration: The ipv4_configuration of this NetworkAdapter.
        :param ipv6_configuration: The ipv6_configuration of this NetworkAdapter.
        :param ipv6_link_local_address: The ipv6_link_local_address of this NetworkAdapter.
        :param label: The label of this NetworkAdapter.
        :param link_speed: The link_speed of this NetworkAdapter.
        :param mac_address: The mac_address of this NetworkAdapter.
        :param network_adapter_name: The network_adapter_name of this NetworkAdapter.
        :param node_id: The node_id of this NetworkAdapter.
        :param rdma_status: The rdma_status of this NetworkAdapter.
        :param status: The status of this NetworkAdapter.
        """
        self.openapi_types = {
            'adapter_id': str,
            'adapter_position': NetworkAdapterPosition,
            'dhcp_status': str,
            'dns_servers': List[str],
            'index': int,
            'ipv4_configuration': Ipv4Config,
            'ipv6_configuration': Ipv6Config,
            'ipv6_link_local_address': str,
            'label': str,
            'link_speed': int,
            'mac_address': str,
            'network_adapter_name': str,
            'node_id': str,
            'rdma_status': str,
            'status': str
        }

        self.attribute_map = {
            'adapter_id': 'adapterId',
            'adapter_position': 'adapterPosition',
            'dhcp_status': 'dhcpStatus',
            'dns_servers': 'dnsServers',
            'index': 'index',
            'ipv4_configuration': 'ipv4Configuration',
            'ipv6_configuration': 'ipv6Configuration',
            'ipv6_link_local_address': 'ipv6LinkLocalAddress',
            'label': 'label',
            'link_speed': 'linkSpeed',
            'mac_address': 'macAddress',
            'network_adapter_name': 'networkAdapterName',
            'node_id': 'nodeId',
            'rdma_status': 'rdmaStatus',
            'status': 'status'
        }

        self._adapter_id = adapter_id
        self._adapter_position = adapter_position
        self._dhcp_status = dhcp_status
        self._dns_servers = dns_servers
        self._index = index
        self._ipv4_configuration = ipv4_configuration
        self._ipv6_configuration = ipv6_configuration
        self._ipv6_link_local_address = ipv6_link_local_address
        self._label = label
        self._link_speed = link_speed
        self._mac_address = mac_address
        self._network_adapter_name = network_adapter_name
        self._node_id = node_id
        self._rdma_status = rdma_status
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkAdapter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkAdapter of this NetworkAdapter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adapter_id(self):
        """Gets the adapter_id of this NetworkAdapter.

        Instance ID of network adapter.

        :return: The adapter_id of this NetworkAdapter.
        :rtype: str
        """
        return self._adapter_id

    @adapter_id.setter
    def adapter_id(self, adapter_id):
        """Sets the adapter_id of this NetworkAdapter.

        Instance ID of network adapter.

        :param adapter_id: The adapter_id of this NetworkAdapter.
        :type adapter_id: str
        """

        self._adapter_id = adapter_id

    @property
    def adapter_position(self):
        """Gets the adapter_position of this NetworkAdapter.


        :return: The adapter_position of this NetworkAdapter.
        :rtype: NetworkAdapterPosition
        """
        return self._adapter_position

    @adapter_position.setter
    def adapter_position(self, adapter_position):
        """Sets the adapter_position of this NetworkAdapter.


        :param adapter_position: The adapter_position of this NetworkAdapter.
        :type adapter_position: NetworkAdapterPosition
        """

        self._adapter_position = adapter_position

    @property
    def dhcp_status(self):
        """Gets the dhcp_status of this NetworkAdapter.

        Value indicating whether this adapter has DHCP enabled.

        :return: The dhcp_status of this NetworkAdapter.
        :rtype: str
        """
        return self._dhcp_status

    @dhcp_status.setter
    def dhcp_status(self, dhcp_status):
        """Sets the dhcp_status of this NetworkAdapter.

        Value indicating whether this adapter has DHCP enabled.

        :param dhcp_status: The dhcp_status of this NetworkAdapter.
        :type dhcp_status: str
        """
        allowed_values = ["Disabled", "Enabled"]  # noqa: E501
        if dhcp_status not in allowed_values:
            raise ValueError(
                "Invalid value for `dhcp_status` ({0}), must be one of {1}"
                .format(dhcp_status, allowed_values)
            )

        self._dhcp_status = dhcp_status

    @property
    def dns_servers(self):
        """Gets the dns_servers of this NetworkAdapter.

        The list of DNS Servers of the device.

        :return: The dns_servers of this NetworkAdapter.
        :rtype: List[str]
        """
        return self._dns_servers

    @dns_servers.setter
    def dns_servers(self, dns_servers):
        """Sets the dns_servers of this NetworkAdapter.

        The list of DNS Servers of the device.

        :param dns_servers: The dns_servers of this NetworkAdapter.
        :type dns_servers: List[str]
        """

        self._dns_servers = dns_servers

    @property
    def index(self):
        """Gets the index of this NetworkAdapter.

        Logical index of the adapter.

        :return: The index of this NetworkAdapter.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this NetworkAdapter.

        Logical index of the adapter.

        :param index: The index of this NetworkAdapter.
        :type index: int
        """

        self._index = index

    @property
    def ipv4_configuration(self):
        """Gets the ipv4_configuration of this NetworkAdapter.


        :return: The ipv4_configuration of this NetworkAdapter.
        :rtype: Ipv4Config
        """
        return self._ipv4_configuration

    @ipv4_configuration.setter
    def ipv4_configuration(self, ipv4_configuration):
        """Sets the ipv4_configuration of this NetworkAdapter.


        :param ipv4_configuration: The ipv4_configuration of this NetworkAdapter.
        :type ipv4_configuration: Ipv4Config
        """

        self._ipv4_configuration = ipv4_configuration

    @property
    def ipv6_configuration(self):
        """Gets the ipv6_configuration of this NetworkAdapter.


        :return: The ipv6_configuration of this NetworkAdapter.
        :rtype: Ipv6Config
        """
        return self._ipv6_configuration

    @ipv6_configuration.setter
    def ipv6_configuration(self, ipv6_configuration):
        """Sets the ipv6_configuration of this NetworkAdapter.


        :param ipv6_configuration: The ipv6_configuration of this NetworkAdapter.
        :type ipv6_configuration: Ipv6Config
        """

        self._ipv6_configuration = ipv6_configuration

    @property
    def ipv6_link_local_address(self):
        """Gets the ipv6_link_local_address of this NetworkAdapter.

        The IPv6 local address.

        :return: The ipv6_link_local_address of this NetworkAdapter.
        :rtype: str
        """
        return self._ipv6_link_local_address

    @ipv6_link_local_address.setter
    def ipv6_link_local_address(self, ipv6_link_local_address):
        """Sets the ipv6_link_local_address of this NetworkAdapter.

        The IPv6 local address.

        :param ipv6_link_local_address: The ipv6_link_local_address of this NetworkAdapter.
        :type ipv6_link_local_address: str
        """

        self._ipv6_link_local_address = ipv6_link_local_address

    @property
    def label(self):
        """Gets the label of this NetworkAdapter.

        Hardware label for the adapter.

        :return: The label of this NetworkAdapter.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this NetworkAdapter.

        Hardware label for the adapter.

        :param label: The label of this NetworkAdapter.
        :type label: str
        """

        self._label = label

    @property
    def link_speed(self):
        """Gets the link_speed of this NetworkAdapter.

        Link speed.

        :return: The link_speed of this NetworkAdapter.
        :rtype: int
        """
        return self._link_speed

    @link_speed.setter
    def link_speed(self, link_speed):
        """Sets the link_speed of this NetworkAdapter.

        Link speed.

        :param link_speed: The link_speed of this NetworkAdapter.
        :type link_speed: int
        """

        self._link_speed = link_speed

    @property
    def mac_address(self):
        """Gets the mac_address of this NetworkAdapter.

        MAC address.

        :return: The mac_address of this NetworkAdapter.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this NetworkAdapter.

        MAC address.

        :param mac_address: The mac_address of this NetworkAdapter.
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def network_adapter_name(self):
        """Gets the network_adapter_name of this NetworkAdapter.

        Network adapter name.

        :return: The network_adapter_name of this NetworkAdapter.
        :rtype: str
        """
        return self._network_adapter_name

    @network_adapter_name.setter
    def network_adapter_name(self, network_adapter_name):
        """Sets the network_adapter_name of this NetworkAdapter.

        Network adapter name.

        :param network_adapter_name: The network_adapter_name of this NetworkAdapter.
        :type network_adapter_name: str
        """

        self._network_adapter_name = network_adapter_name

    @property
    def node_id(self):
        """Gets the node_id of this NetworkAdapter.

        Node ID of the network adapter.

        :return: The node_id of this NetworkAdapter.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this NetworkAdapter.

        Node ID of the network adapter.

        :param node_id: The node_id of this NetworkAdapter.
        :type node_id: str
        """

        self._node_id = node_id

    @property
    def rdma_status(self):
        """Gets the rdma_status of this NetworkAdapter.

        Value indicating whether this adapter is RDMA capable.

        :return: The rdma_status of this NetworkAdapter.
        :rtype: str
        """
        return self._rdma_status

    @rdma_status.setter
    def rdma_status(self, rdma_status):
        """Sets the rdma_status of this NetworkAdapter.

        Value indicating whether this adapter is RDMA capable.

        :param rdma_status: The rdma_status of this NetworkAdapter.
        :type rdma_status: str
        """
        allowed_values = ["Incapable", "Capable"]  # noqa: E501
        if rdma_status not in allowed_values:
            raise ValueError(
                "Invalid value for `rdma_status` ({0}), must be one of {1}"
                .format(rdma_status, allowed_values)
            )

        self._rdma_status = rdma_status

    @property
    def status(self):
        """Gets the status of this NetworkAdapter.

        Value indicating whether this adapter is valid.

        :return: The status of this NetworkAdapter.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NetworkAdapter.

        Value indicating whether this adapter is valid.

        :param status: The status of this NetworkAdapter.
        :type status: str
        """
        allowed_values = ["Inactive", "Active"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
