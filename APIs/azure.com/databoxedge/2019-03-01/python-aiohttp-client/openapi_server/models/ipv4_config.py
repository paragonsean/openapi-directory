# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Ipv4Config(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gateway: str=None, ip_address: str=None, subnet: str=None):
        """Ipv4Config - a model defined in OpenAPI

        :param gateway: The gateway of this Ipv4Config.
        :param ip_address: The ip_address of this Ipv4Config.
        :param subnet: The subnet of this Ipv4Config.
        """
        self.openapi_types = {
            'gateway': str,
            'ip_address': str,
            'subnet': str
        }

        self.attribute_map = {
            'gateway': 'gateway',
            'ip_address': 'ipAddress',
            'subnet': 'subnet'
        }

        self._gateway = gateway
        self._ip_address = ip_address
        self._subnet = subnet

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Ipv4Config':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Ipv4Config of this Ipv4Config.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gateway(self):
        """Gets the gateway of this Ipv4Config.

        The IPv4 gateway of the network adapter.

        :return: The gateway of this Ipv4Config.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this Ipv4Config.

        The IPv4 gateway of the network adapter.

        :param gateway: The gateway of this Ipv4Config.
        :type gateway: str
        """

        self._gateway = gateway

    @property
    def ip_address(self):
        """Gets the ip_address of this Ipv4Config.

        The IPv4 address of the network adapter.

        :return: The ip_address of this Ipv4Config.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this Ipv4Config.

        The IPv4 address of the network adapter.

        :param ip_address: The ip_address of this Ipv4Config.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def subnet(self):
        """Gets the subnet of this Ipv4Config.

        The IPv4 subnet of the network adapter.

        :return: The subnet of this Ipv4Config.
        :rtype: str
        """
        return self._subnet

    @subnet.setter
    def subnet(self, subnet):
        """Sets the subnet of this Ipv4Config.

        The IPv4 subnet of the network adapter.

        :param subnet: The subnet of this Ipv4Config.
        :type subnet: str
        """

        self._subnet = subnet
