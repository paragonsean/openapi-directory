# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClientAccessRight(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_permission: str=None, client: str=None):
        """ClientAccessRight - a model defined in OpenAPI

        :param access_permission: The access_permission of this ClientAccessRight.
        :param client: The client of this ClientAccessRight.
        """
        self.openapi_types = {
            'access_permission': str,
            'client': str
        }

        self.attribute_map = {
            'access_permission': 'accessPermission',
            'client': 'client'
        }

        self._access_permission = access_permission
        self._client = client

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClientAccessRight':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClientAccessRight of this ClientAccessRight.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_permission(self):
        """Gets the access_permission of this ClientAccessRight.

        Type of access to be allowed for the client.

        :return: The access_permission of this ClientAccessRight.
        :rtype: str
        """
        return self._access_permission

    @access_permission.setter
    def access_permission(self, access_permission):
        """Sets the access_permission of this ClientAccessRight.

        Type of access to be allowed for the client.

        :param access_permission: The access_permission of this ClientAccessRight.
        :type access_permission: str
        """
        allowed_values = ["NoAccess", "ReadOnly", "ReadWrite"]  # noqa: E501
        if access_permission not in allowed_values:
            raise ValueError(
                "Invalid value for `access_permission` ({0}), must be one of {1}"
                .format(access_permission, allowed_values)
            )

        self._access_permission = access_permission

    @property
    def client(self):
        """Gets the client of this ClientAccessRight.

        IP of the client.

        :return: The client of this ClientAccessRight.
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this ClientAccessRight.

        IP of the client.

        :param client: The client of this ClientAccessRight.
        :type client: str
        """
        if client is None:
            raise ValueError("Invalid value for `client`, must not be `None`")

        self._client = client
