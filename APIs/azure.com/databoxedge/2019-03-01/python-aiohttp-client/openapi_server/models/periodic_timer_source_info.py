# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PeriodicTimerSourceInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, schedule: str=None, start_time: datetime=None, topic: str=None):
        """PeriodicTimerSourceInfo - a model defined in OpenAPI

        :param schedule: The schedule of this PeriodicTimerSourceInfo.
        :param start_time: The start_time of this PeriodicTimerSourceInfo.
        :param topic: The topic of this PeriodicTimerSourceInfo.
        """
        self.openapi_types = {
            'schedule': str,
            'start_time': datetime,
            'topic': str
        }

        self.attribute_map = {
            'schedule': 'schedule',
            'start_time': 'startTime',
            'topic': 'topic'
        }

        self._schedule = schedule
        self._start_time = start_time
        self._topic = topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PeriodicTimerSourceInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PeriodicTimerSourceInfo of this PeriodicTimerSourceInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def schedule(self):
        """Gets the schedule of this PeriodicTimerSourceInfo.

        Periodic frequency at which timer event needs to be raised. Supports daily, hourly, minutes, and seconds.

        :return: The schedule of this PeriodicTimerSourceInfo.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this PeriodicTimerSourceInfo.

        Periodic frequency at which timer event needs to be raised. Supports daily, hourly, minutes, and seconds.

        :param schedule: The schedule of this PeriodicTimerSourceInfo.
        :type schedule: str
        """
        if schedule is None:
            raise ValueError("Invalid value for `schedule`, must not be `None`")

        self._schedule = schedule

    @property
    def start_time(self):
        """Gets the start_time of this PeriodicTimerSourceInfo.

        The time of the day that results in a valid trigger. Schedule is computed with reference to the time specified up to seconds. If timezone is not specified the time will considered to be in device timezone. The value will always be returned as UTC time.

        :return: The start_time of this PeriodicTimerSourceInfo.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this PeriodicTimerSourceInfo.

        The time of the day that results in a valid trigger. Schedule is computed with reference to the time specified up to seconds. If timezone is not specified the time will considered to be in device timezone. The value will always be returned as UTC time.

        :param start_time: The start_time of this PeriodicTimerSourceInfo.
        :type start_time: datetime
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")

        self._start_time = start_time

    @property
    def topic(self):
        """Gets the topic of this PeriodicTimerSourceInfo.

        Topic where periodic events are published to IoT device.

        :return: The topic of this PeriodicTimerSourceInfo.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this PeriodicTimerSourceInfo.

        Topic where periodic events are published to IoT device.

        :param topic: The topic of this PeriodicTimerSourceInfo.
        :type topic: str
        """

        self._topic = topic
