/*
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EncryptionProtector;
import org.openapitools.client.model.EncryptionProtectorListResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EncryptionProtectorsApi
 */
@Disabled
public class EncryptionProtectorsApiTest {

    private final EncryptionProtectorsApi api = new EncryptionProtectorsApi();

    /**
     * Updates an existing encryption protector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void encryptionProtectorsCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String encryptionProtectorName = null;
        String subscriptionId = null;
        String apiVersion = null;
        EncryptionProtector parameters = null;
        EncryptionProtector response = api.encryptionProtectorsCreateOrUpdate(resourceGroupName, serverName, encryptionProtectorName, subscriptionId, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Gets a server encryption protector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void encryptionProtectorsGetTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String encryptionProtectorName = null;
        String subscriptionId = null;
        String apiVersion = null;
        EncryptionProtector response = api.encryptionProtectorsGet(resourceGroupName, serverName, encryptionProtectorName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a list of server encryption protectors
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void encryptionProtectorsListByServerTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String subscriptionId = null;
        String apiVersion = null;
        EncryptionProtectorListResult response = api.encryptionProtectorsListByServer(resourceGroupName, serverName, subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Revalidates an existing encryption protector.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void encryptionProtectorsRevalidateTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String encryptionProtectorName = null;
        String subscriptionId = null;
        String apiVersion = null;
        api.encryptionProtectorsRevalidate(resourceGroupName, serverName, encryptionProtectorName, subscriptionId, apiVersion);
        // TODO: test validations
    }

}
