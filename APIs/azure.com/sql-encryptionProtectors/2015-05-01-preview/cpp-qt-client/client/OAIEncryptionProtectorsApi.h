/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEncryptionProtectorsApi_H
#define OAI_OAIEncryptionProtectorsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEncryptionProtector.h"
#include "OAIEncryptionProtectorListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEncryptionProtectorsApi : public QObject {
    Q_OBJECT

public:
    OAIEncryptionProtectorsApi(const int timeOut = 0);
    ~OAIEncryptionProtectorsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  encryption_protector_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIEncryptionProtector [required]
    */
    virtual void encryptionProtectorsCreateOrUpdate(const QString &resource_group_name, const QString &server_name, const QString &encryption_protector_name, const QString &subscription_id, const QString &api_version, const OAIEncryptionProtector &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  encryption_protector_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void encryptionProtectorsGet(const QString &resource_group_name, const QString &server_name, const QString &encryption_protector_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void encryptionProtectorsListByServer(const QString &resource_group_name, const QString &server_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  encryption_protector_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void encryptionProtectorsRevalidate(const QString &resource_group_name, const QString &server_name, const QString &encryption_protector_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void encryptionProtectorsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void encryptionProtectorsGetCallback(OAIHttpRequestWorker *worker);
    void encryptionProtectorsListByServerCallback(OAIHttpRequestWorker *worker);
    void encryptionProtectorsRevalidateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void encryptionProtectorsCreateOrUpdateSignal(OAIEncryptionProtector summary);
    void encryptionProtectorsGetSignal(OAIEncryptionProtector summary);
    void encryptionProtectorsListByServerSignal(OAIEncryptionProtectorListResult summary);
    void encryptionProtectorsRevalidateSignal();


    void encryptionProtectorsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIEncryptionProtector summary);
    void encryptionProtectorsGetSignalFull(OAIHttpRequestWorker *worker, OAIEncryptionProtector summary);
    void encryptionProtectorsListByServerSignalFull(OAIHttpRequestWorker *worker, OAIEncryptionProtectorListResult summary);
    void encryptionProtectorsRevalidateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use encryptionProtectorsCreateOrUpdateSignalError() instead")
    void encryptionProtectorsCreateOrUpdateSignalE(OAIEncryptionProtector summary, QNetworkReply::NetworkError error_type, QString error_str);
    void encryptionProtectorsCreateOrUpdateSignalError(OAIEncryptionProtector summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use encryptionProtectorsGetSignalError() instead")
    void encryptionProtectorsGetSignalE(OAIEncryptionProtector summary, QNetworkReply::NetworkError error_type, QString error_str);
    void encryptionProtectorsGetSignalError(OAIEncryptionProtector summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use encryptionProtectorsListByServerSignalError() instead")
    void encryptionProtectorsListByServerSignalE(OAIEncryptionProtectorListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void encryptionProtectorsListByServerSignalError(OAIEncryptionProtectorListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use encryptionProtectorsRevalidateSignalError() instead")
    void encryptionProtectorsRevalidateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void encryptionProtectorsRevalidateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use encryptionProtectorsCreateOrUpdateSignalErrorFull() instead")
    void encryptionProtectorsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void encryptionProtectorsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use encryptionProtectorsGetSignalErrorFull() instead")
    void encryptionProtectorsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void encryptionProtectorsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use encryptionProtectorsListByServerSignalErrorFull() instead")
    void encryptionProtectorsListByServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void encryptionProtectorsListByServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use encryptionProtectorsRevalidateSignalErrorFull() instead")
    void encryptionProtectorsRevalidateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void encryptionProtectorsRevalidateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
