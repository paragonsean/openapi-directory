/**
 * Azure Monitor Private Link Scopes
 * Azure Monitor API reference for Private Links Scopes management.
 *
 * The version of the OpenAPI document: 2019-10-17-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ScopedResource from '../model/ScopedResource';
import ScopedResourceListResult from '../model/ScopedResourceListResult';

/**
* PrivateLinkScopedResources service.
* @module api/PrivateLinkScopedResourcesApi
* @version 2019-10-17-preview
*/
export default class PrivateLinkScopedResourcesApi {

    /**
    * Constructs a new PrivateLinkScopedResourcesApi. 
    * @alias module:api/PrivateLinkScopedResourcesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the privateLinkScopedResourcesCreateOrUpdate operation.
     * @callback module:api/PrivateLinkScopedResourcesApi~privateLinkScopedResourcesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScopedResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Approve or reject a private endpoint connection with a given name.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} scopeName Name of the Azure Monitor PrivateLinkScope that will contain the datasource
     * @param {String} name The name of the scoped resource object.
     * @param {module:model/ScopedResource} parameters 
     * @param {module:api/PrivateLinkScopedResourcesApi~privateLinkScopedResourcesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScopedResource}
     */
    privateLinkScopedResourcesCreateOrUpdate(subscriptionId, resourceGroupName, apiVersion, scopeName, name, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling privateLinkScopedResourcesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling privateLinkScopedResourcesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling privateLinkScopedResourcesCreateOrUpdate");
      }
      // verify the required parameter 'scopeName' is set
      if (scopeName === undefined || scopeName === null) {
        throw new Error("Missing the required parameter 'scopeName' when calling privateLinkScopedResourcesCreateOrUpdate");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling privateLinkScopedResourcesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling privateLinkScopedResourcesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'scopeName': scopeName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScopedResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/scopedResources/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateLinkScopedResourcesDelete operation.
     * @callback module:api/PrivateLinkScopedResourcesApi~privateLinkScopedResourcesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a private endpoint connection with a given name.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} scopeName Name of the Azure Monitor PrivateLinkScope that will contain the datasource
     * @param {String} name The name of the scoped resource object.
     * @param {module:api/PrivateLinkScopedResourcesApi~privateLinkScopedResourcesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    privateLinkScopedResourcesDelete(subscriptionId, resourceGroupName, apiVersion, scopeName, name, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling privateLinkScopedResourcesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling privateLinkScopedResourcesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling privateLinkScopedResourcesDelete");
      }
      // verify the required parameter 'scopeName' is set
      if (scopeName === undefined || scopeName === null) {
        throw new Error("Missing the required parameter 'scopeName' when calling privateLinkScopedResourcesDelete");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling privateLinkScopedResourcesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'scopeName': scopeName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/scopedResources/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateLinkScopedResourcesGet operation.
     * @callback module:api/PrivateLinkScopedResourcesApi~privateLinkScopedResourcesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScopedResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a scoped resource in a private link scope.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} scopeName Name of the Azure Monitor PrivateLinkScope that will contain the datasource
     * @param {String} name The name of the scoped resource object.
     * @param {module:api/PrivateLinkScopedResourcesApi~privateLinkScopedResourcesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScopedResource}
     */
    privateLinkScopedResourcesGet(subscriptionId, resourceGroupName, apiVersion, scopeName, name, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling privateLinkScopedResourcesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling privateLinkScopedResourcesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling privateLinkScopedResourcesGet");
      }
      // verify the required parameter 'scopeName' is set
      if (scopeName === undefined || scopeName === null) {
        throw new Error("Missing the required parameter 'scopeName' when calling privateLinkScopedResourcesGet");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling privateLinkScopedResourcesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'scopeName': scopeName,
        'name': name
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScopedResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/scopedResources/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privateLinkScopedResourcesListByPrivateLinkScope operation.
     * @callback module:api/PrivateLinkScopedResourcesApi~privateLinkScopedResourcesListByPrivateLinkScopeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScopedResourceListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all private endpoint connections on a private link scope.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName The name of the resource group. The name is case insensitive.
     * @param {String} apiVersion The API version to use for this operation.
     * @param {String} scopeName Name of the Azure Monitor PrivateLinkScope that will contain the datasource
     * @param {module:api/PrivateLinkScopedResourcesApi~privateLinkScopedResourcesListByPrivateLinkScopeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScopedResourceListResult}
     */
    privateLinkScopedResourcesListByPrivateLinkScope(subscriptionId, resourceGroupName, apiVersion, scopeName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling privateLinkScopedResourcesListByPrivateLinkScope");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling privateLinkScopedResourcesListByPrivateLinkScope");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling privateLinkScopedResourcesListByPrivateLinkScope");
      }
      // verify the required parameter 'scopeName' is set
      if (scopeName === undefined || scopeName === null) {
        throw new Error("Missing the required parameter 'scopeName' when calling privateLinkScopedResourcesListByPrivateLinkScope");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'scopeName': scopeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScopedResourceListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/scopedResources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
