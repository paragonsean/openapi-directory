/**
 * Azure Monitor Private Link Scopes
 * Azure Monitor API reference for Private Links Scopes management.
 *
 * The version of the OpenAPI document: 2019-10-17-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAzureMonitorPrivateLinkScope.h"
#include "OAIAzureMonitorPrivateLinkScopeListResult.h"
#include "OAIErrorResponse.h"
#include "OAITagsResource.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  scope_name QString [required]
    * @param[in]  azure_monitor_private_link_scope_payload OAIAzureMonitorPrivateLinkScope [required]
    */
    virtual void privateLinkScopesCreateOrUpdate(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &scope_name, const OAIAzureMonitorPrivateLinkScope &azure_monitor_private_link_scope_payload);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  scope_name QString [required]
    */
    virtual void privateLinkScopesDelete(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &scope_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  scope_name QString [required]
    */
    virtual void privateLinkScopesGet(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &scope_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void privateLinkScopesList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void privateLinkScopesListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  scope_name QString [required]
    * @param[in]  private_link_scope_tags OAITagsResource [required]
    */
    virtual void privateLinkScopesUpdateTags(const QString &resource_group_name, const QString &api_version, const QString &subscription_id, const QString &scope_name, const OAITagsResource &private_link_scope_tags);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void privateLinkScopesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void privateLinkScopesDeleteCallback(OAIHttpRequestWorker *worker);
    void privateLinkScopesGetCallback(OAIHttpRequestWorker *worker);
    void privateLinkScopesListCallback(OAIHttpRequestWorker *worker);
    void privateLinkScopesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void privateLinkScopesUpdateTagsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void privateLinkScopesCreateOrUpdateSignal(OAIAzureMonitorPrivateLinkScope summary);
    void privateLinkScopesDeleteSignal();
    void privateLinkScopesGetSignal(OAIAzureMonitorPrivateLinkScope summary);
    void privateLinkScopesListSignal(OAIAzureMonitorPrivateLinkScopeListResult summary);
    void privateLinkScopesListByResourceGroupSignal(OAIAzureMonitorPrivateLinkScopeListResult summary);
    void privateLinkScopesUpdateTagsSignal(OAIAzureMonitorPrivateLinkScope summary);


    void privateLinkScopesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAzureMonitorPrivateLinkScope summary);
    void privateLinkScopesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void privateLinkScopesGetSignalFull(OAIHttpRequestWorker *worker, OAIAzureMonitorPrivateLinkScope summary);
    void privateLinkScopesListSignalFull(OAIHttpRequestWorker *worker, OAIAzureMonitorPrivateLinkScopeListResult summary);
    void privateLinkScopesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIAzureMonitorPrivateLinkScopeListResult summary);
    void privateLinkScopesUpdateTagsSignalFull(OAIHttpRequestWorker *worker, OAIAzureMonitorPrivateLinkScope summary);

    Q_DECL_DEPRECATED_X("Use privateLinkScopesCreateOrUpdateSignalError() instead")
    void privateLinkScopesCreateOrUpdateSignalE(OAIAzureMonitorPrivateLinkScope summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkScopesCreateOrUpdateSignalError(OAIAzureMonitorPrivateLinkScope summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkScopesDeleteSignalError() instead")
    void privateLinkScopesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkScopesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkScopesGetSignalError() instead")
    void privateLinkScopesGetSignalE(OAIAzureMonitorPrivateLinkScope summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkScopesGetSignalError(OAIAzureMonitorPrivateLinkScope summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkScopesListSignalError() instead")
    void privateLinkScopesListSignalE(OAIAzureMonitorPrivateLinkScopeListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkScopesListSignalError(OAIAzureMonitorPrivateLinkScopeListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkScopesListByResourceGroupSignalError() instead")
    void privateLinkScopesListByResourceGroupSignalE(OAIAzureMonitorPrivateLinkScopeListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkScopesListByResourceGroupSignalError(OAIAzureMonitorPrivateLinkScopeListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkScopesUpdateTagsSignalError() instead")
    void privateLinkScopesUpdateTagsSignalE(OAIAzureMonitorPrivateLinkScope summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkScopesUpdateTagsSignalError(OAIAzureMonitorPrivateLinkScope summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use privateLinkScopesCreateOrUpdateSignalErrorFull() instead")
    void privateLinkScopesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkScopesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkScopesDeleteSignalErrorFull() instead")
    void privateLinkScopesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkScopesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkScopesGetSignalErrorFull() instead")
    void privateLinkScopesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkScopesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkScopesListSignalErrorFull() instead")
    void privateLinkScopesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkScopesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkScopesListByResourceGroupSignalErrorFull() instead")
    void privateLinkScopesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkScopesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkScopesUpdateTagsSignalErrorFull() instead")
    void privateLinkScopesUpdateTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkScopesUpdateTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
