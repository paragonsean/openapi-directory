/*
 * Azure Monitor Private Link Scopes
 * Azure Monitor API reference for Private Links Scopes management.
 *
 * The version of the OpenAPI document: 2019-10-17-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ScopedResource;
import org.openapitools.client.model.ScopedResourceListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PrivateLinkScopedResourcesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PrivateLinkScopedResourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PrivateLinkScopedResourcesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for privateLinkScopedResourcesCreateOrUpdate
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scopeName Name of the Azure Monitor PrivateLinkScope that will contain the datasource (required)
     * @param name The name of the scoped resource object. (required)
     * @param parameters  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully scoped azure monitor resource in a private link scope. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkScopedResourcesCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String apiVersion, String scopeName, String name, ScopedResource parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/scopedResources/{name}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "scopeName" + "}", localVarApiClient.escapeString(scopeName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateLinkScopedResourcesCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String scopeName, String name, ScopedResource parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateLinkScopedResourcesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateLinkScopedResourcesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateLinkScopedResourcesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'scopeName' is set
        if (scopeName == null) {
            throw new ApiException("Missing the required parameter 'scopeName' when calling privateLinkScopedResourcesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling privateLinkScopedResourcesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling privateLinkScopedResourcesCreateOrUpdate(Async)");
        }

        return privateLinkScopedResourcesCreateOrUpdateCall(subscriptionId, resourceGroupName, apiVersion, scopeName, name, parameters, _callback);

    }

    /**
     * 
     * Approve or reject a private endpoint connection with a given name.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scopeName Name of the Azure Monitor PrivateLinkScope that will contain the datasource (required)
     * @param name The name of the scoped resource object. (required)
     * @param parameters  (required)
     * @return ScopedResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully scoped azure monitor resource in a private link scope. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ScopedResource privateLinkScopedResourcesCreateOrUpdate(String subscriptionId, String resourceGroupName, String apiVersion, String scopeName, String name, ScopedResource parameters) throws ApiException {
        ApiResponse<ScopedResource> localVarResp = privateLinkScopedResourcesCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, scopeName, name, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Approve or reject a private endpoint connection with a given name.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scopeName Name of the Azure Monitor PrivateLinkScope that will contain the datasource (required)
     * @param name The name of the scoped resource object. (required)
     * @param parameters  (required)
     * @return ApiResponse&lt;ScopedResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully scoped azure monitor resource in a private link scope. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScopedResource> privateLinkScopedResourcesCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String scopeName, String name, ScopedResource parameters) throws ApiException {
        okhttp3.Call localVarCall = privateLinkScopedResourcesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, scopeName, name, parameters, null);
        Type localVarReturnType = new TypeToken<ScopedResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Approve or reject a private endpoint connection with a given name.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scopeName Name of the Azure Monitor PrivateLinkScope that will contain the datasource (required)
     * @param name The name of the scoped resource object. (required)
     * @param parameters  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully scoped azure monitor resource in a private link scope. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkScopedResourcesCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String apiVersion, String scopeName, String name, ScopedResource parameters, final ApiCallback<ScopedResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateLinkScopedResourcesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, scopeName, name, parameters, _callback);
        Type localVarReturnType = new TypeToken<ScopedResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateLinkScopedResourcesDelete
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scopeName Name of the Azure Monitor PrivateLinkScope that will contain the datasource (required)
     * @param name The name of the scoped resource object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted scoped resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Scoped resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkScopedResourcesDeleteCall(String subscriptionId, String resourceGroupName, String apiVersion, String scopeName, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/scopedResources/{name}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "scopeName" + "}", localVarApiClient.escapeString(scopeName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateLinkScopedResourcesDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String scopeName, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateLinkScopedResourcesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateLinkScopedResourcesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateLinkScopedResourcesDelete(Async)");
        }

        // verify the required parameter 'scopeName' is set
        if (scopeName == null) {
            throw new ApiException("Missing the required parameter 'scopeName' when calling privateLinkScopedResourcesDelete(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling privateLinkScopedResourcesDelete(Async)");
        }

        return privateLinkScopedResourcesDeleteCall(subscriptionId, resourceGroupName, apiVersion, scopeName, name, _callback);

    }

    /**
     * 
     * Deletes a private endpoint connection with a given name.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scopeName Name of the Azure Monitor PrivateLinkScope that will contain the datasource (required)
     * @param name The name of the scoped resource object. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted scoped resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Scoped resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void privateLinkScopedResourcesDelete(String subscriptionId, String resourceGroupName, String apiVersion, String scopeName, String name) throws ApiException {
        privateLinkScopedResourcesDeleteWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, scopeName, name);
    }

    /**
     * 
     * Deletes a private endpoint connection with a given name.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scopeName Name of the Azure Monitor PrivateLinkScope that will contain the datasource (required)
     * @param name The name of the scoped resource object. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted scoped resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Scoped resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> privateLinkScopedResourcesDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String scopeName, String name) throws ApiException {
        okhttp3.Call localVarCall = privateLinkScopedResourcesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, scopeName, name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a private endpoint connection with a given name.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scopeName Name of the Azure Monitor PrivateLinkScope that will contain the datasource (required)
     * @param name The name of the scoped resource object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted scoped resource. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Scoped resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkScopedResourcesDeleteAsync(String subscriptionId, String resourceGroupName, String apiVersion, String scopeName, String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateLinkScopedResourcesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, scopeName, name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateLinkScopedResourcesGet
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scopeName Name of the Azure Monitor PrivateLinkScope that will contain the datasource (required)
     * @param name The name of the scoped resource object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved a scoped resource in a private link scope. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkScopedResourcesGetCall(String subscriptionId, String resourceGroupName, String apiVersion, String scopeName, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/scopedResources/{name}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "scopeName" + "}", localVarApiClient.escapeString(scopeName.toString()))
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateLinkScopedResourcesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String scopeName, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateLinkScopedResourcesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateLinkScopedResourcesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateLinkScopedResourcesGet(Async)");
        }

        // verify the required parameter 'scopeName' is set
        if (scopeName == null) {
            throw new ApiException("Missing the required parameter 'scopeName' when calling privateLinkScopedResourcesGet(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling privateLinkScopedResourcesGet(Async)");
        }

        return privateLinkScopedResourcesGetCall(subscriptionId, resourceGroupName, apiVersion, scopeName, name, _callback);

    }

    /**
     * 
     * Gets a scoped resource in a private link scope.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scopeName Name of the Azure Monitor PrivateLinkScope that will contain the datasource (required)
     * @param name The name of the scoped resource object. (required)
     * @return ScopedResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved a scoped resource in a private link scope. </td><td>  -  </td></tr>
     </table>
     */
    public ScopedResource privateLinkScopedResourcesGet(String subscriptionId, String resourceGroupName, String apiVersion, String scopeName, String name) throws ApiException {
        ApiResponse<ScopedResource> localVarResp = privateLinkScopedResourcesGetWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, scopeName, name);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a scoped resource in a private link scope.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scopeName Name of the Azure Monitor PrivateLinkScope that will contain the datasource (required)
     * @param name The name of the scoped resource object. (required)
     * @return ApiResponse&lt;ScopedResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved a scoped resource in a private link scope. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScopedResource> privateLinkScopedResourcesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String scopeName, String name) throws ApiException {
        okhttp3.Call localVarCall = privateLinkScopedResourcesGetValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, scopeName, name, null);
        Type localVarReturnType = new TypeToken<ScopedResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a scoped resource in a private link scope.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scopeName Name of the Azure Monitor PrivateLinkScope that will contain the datasource (required)
     * @param name The name of the scoped resource object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved a scoped resource in a private link scope. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkScopedResourcesGetAsync(String subscriptionId, String resourceGroupName, String apiVersion, String scopeName, String name, final ApiCallback<ScopedResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateLinkScopedResourcesGetValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, scopeName, name, _callback);
        Type localVarReturnType = new TypeToken<ScopedResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateLinkScopedResourcesListByPrivateLinkScope
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scopeName Name of the Azure Monitor PrivateLinkScope that will contain the datasource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved scoped resources in a private link scope. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkScopedResourcesListByPrivateLinkScopeCall(String subscriptionId, String resourceGroupName, String apiVersion, String scopeName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/privateLinkScopes/{scopeName}/scopedResources"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "scopeName" + "}", localVarApiClient.escapeString(scopeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateLinkScopedResourcesListByPrivateLinkScopeValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String scopeName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateLinkScopedResourcesListByPrivateLinkScope(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateLinkScopedResourcesListByPrivateLinkScope(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateLinkScopedResourcesListByPrivateLinkScope(Async)");
        }

        // verify the required parameter 'scopeName' is set
        if (scopeName == null) {
            throw new ApiException("Missing the required parameter 'scopeName' when calling privateLinkScopedResourcesListByPrivateLinkScope(Async)");
        }

        return privateLinkScopedResourcesListByPrivateLinkScopeCall(subscriptionId, resourceGroupName, apiVersion, scopeName, _callback);

    }

    /**
     * 
     * Gets all private endpoint connections on a private link scope.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scopeName Name of the Azure Monitor PrivateLinkScope that will contain the datasource (required)
     * @return ScopedResourceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved scoped resources in a private link scope. </td><td>  -  </td></tr>
     </table>
     */
    public ScopedResourceListResult privateLinkScopedResourcesListByPrivateLinkScope(String subscriptionId, String resourceGroupName, String apiVersion, String scopeName) throws ApiException {
        ApiResponse<ScopedResourceListResult> localVarResp = privateLinkScopedResourcesListByPrivateLinkScopeWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, scopeName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all private endpoint connections on a private link scope.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scopeName Name of the Azure Monitor PrivateLinkScope that will contain the datasource (required)
     * @return ApiResponse&lt;ScopedResourceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved scoped resources in a private link scope. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ScopedResourceListResult> privateLinkScopedResourcesListByPrivateLinkScopeWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String scopeName) throws ApiException {
        okhttp3.Call localVarCall = privateLinkScopedResourcesListByPrivateLinkScopeValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, scopeName, null);
        Type localVarReturnType = new TypeToken<ScopedResourceListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all private endpoint connections on a private link scope.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param scopeName Name of the Azure Monitor PrivateLinkScope that will contain the datasource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved scoped resources in a private link scope. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateLinkScopedResourcesListByPrivateLinkScopeAsync(String subscriptionId, String resourceGroupName, String apiVersion, String scopeName, final ApiCallback<ScopedResourceListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateLinkScopedResourcesListByPrivateLinkScopeValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, scopeName, _callback);
        Type localVarReturnType = new TypeToken<ScopedResourceListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
