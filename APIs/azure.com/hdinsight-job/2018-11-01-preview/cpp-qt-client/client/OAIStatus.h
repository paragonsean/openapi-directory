/**
 * HDInsightJobManagementClient
 * The HDInsight Job Client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStatus.h
 *
 * Gets or sets the object containing the job status information.
 */

#ifndef OAIStatus_H
#define OAIStatus_H

#include <QJsonObject>

#include "OAIJobID.h"
#include "OAIObject.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIJobID;

class OAIStatus : public OAIObject {
public:
    OAIStatus();
    OAIStatus(QString json);
    ~OAIStatus() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCleanupProgress() const;
    void setCleanupProgress(const double &cleanup_progress);
    bool is_cleanup_progress_Set() const;
    bool is_cleanup_progress_Valid() const;

    QString getFailureInfo() const;
    void setFailureInfo(const QString &failure_info);
    bool is_failure_info_Set() const;
    bool is_failure_info_Valid() const;

    qint64 getFinishTime() const;
    void setFinishTime(const qint64 &finish_time);
    bool is_finish_time_Set() const;
    bool is_finish_time_Valid() const;

    QString getHistoryFile() const;
    void setHistoryFile(const QString &history_file);
    bool is_history_file_Set() const;
    bool is_history_file_Valid() const;

    OAIObject getJobAcls() const;
    void setJobAcls(const OAIObject &job_acls);
    bool is_job_acls_Set() const;
    bool is_job_acls_Valid() const;

    bool isJobComplete() const;
    void setJobComplete(const bool &job_complete);
    bool is_job_complete_Set() const;
    bool is_job_complete_Valid() const;

    QString getJobFile() const;
    void setJobFile(const QString &job_file);
    bool is_job_file_Set() const;
    bool is_job_file_Valid() const;

    OAIJobID getJobId() const;
    void setJobId(const OAIJobID &job_id);
    bool is_job_id_Set() const;
    bool is_job_id_Valid() const;

    QString getJobId() const;
    void setJobId(const QString &job_id);
    bool is_job_id_Set() const;
    bool is_job_id_Valid() const;

    QString getJobName() const;
    void setJobName(const QString &job_name);
    bool is_job_name_Set() const;
    bool is_job_name_Valid() const;

    QString getJobPriority() const;
    void setJobPriority(const QString &job_priority);
    bool is_job_priority_Set() const;
    bool is_job_priority_Valid() const;

    double getMapProgress() const;
    void setMapProgress(const double &map_progress);
    bool is_map_progress_Set() const;
    bool is_map_progress_Valid() const;

    qint64 getNeededMem() const;
    void setNeededMem(const qint64 &needed_mem);
    bool is_needed_mem_Set() const;
    bool is_needed_mem_Valid() const;

    qint32 getNumReservedSlots() const;
    void setNumReservedSlots(const qint32 &num_reserved_slots);
    bool is_num_reserved_slots_Set() const;
    bool is_num_reserved_slots_Valid() const;

    qint32 getNumUsedSlots() const;
    void setNumUsedSlots(const qint32 &num_used_slots);
    bool is_num_used_slots_Set() const;
    bool is_num_used_slots_Valid() const;

    QString getPriority() const;
    void setPriority(const QString &priority);
    bool is_priority_Set() const;
    bool is_priority_Valid() const;

    QString getQueue() const;
    void setQueue(const QString &queue);
    bool is_queue_Set() const;
    bool is_queue_Valid() const;

    double getReduceProgress() const;
    void setReduceProgress(const double &reduce_progress);
    bool is_reduce_progress_Set() const;
    bool is_reduce_progress_Valid() const;

    qint64 getReservedMem() const;
    void setReservedMem(const qint64 &reserved_mem);
    bool is_reserved_mem_Set() const;
    bool is_reserved_mem_Valid() const;

    bool isRetired() const;
    void setRetired(const bool &retired);
    bool is_retired_Set() const;
    bool is_retired_Valid() const;

    qint32 getRunState() const;
    void setRunState(const qint32 &run_state);
    bool is_run_state_Set() const;
    bool is_run_state_Valid() const;

    QString getSchedulingInfo() const;
    void setSchedulingInfo(const QString &scheduling_info);
    bool is_scheduling_info_Set() const;
    bool is_scheduling_info_Valid() const;

    double getSetupProgress() const;
    void setSetupProgress(const double &setup_progress);
    bool is_setup_progress_Set() const;
    bool is_setup_progress_Valid() const;

    qint64 getStartTime() const;
    void setStartTime(const qint64 &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getTrackingUrl() const;
    void setTrackingUrl(const QString &tracking_url);
    bool is_tracking_url_Set() const;
    bool is_tracking_url_Valid() const;

    bool isUber() const;
    void setUber(const bool &uber);
    bool is_uber_Set() const;
    bool is_uber_Valid() const;

    qint64 getUsedMem() const;
    void setUsedMem(const qint64 &used_mem);
    bool is_used_mem_Set() const;
    bool is_used_mem_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_cleanup_progress;
    bool m_cleanup_progress_isSet;
    bool m_cleanup_progress_isValid;

    QString m_failure_info;
    bool m_failure_info_isSet;
    bool m_failure_info_isValid;

    qint64 m_finish_time;
    bool m_finish_time_isSet;
    bool m_finish_time_isValid;

    QString m_history_file;
    bool m_history_file_isSet;
    bool m_history_file_isValid;

    OAIObject m_job_acls;
    bool m_job_acls_isSet;
    bool m_job_acls_isValid;

    bool m_job_complete;
    bool m_job_complete_isSet;
    bool m_job_complete_isValid;

    QString m_job_file;
    bool m_job_file_isSet;
    bool m_job_file_isValid;

    OAIJobID m_job_id;
    bool m_job_id_isSet;
    bool m_job_id_isValid;

    QString m_job_id;
    bool m_job_id_isSet;
    bool m_job_id_isValid;

    QString m_job_name;
    bool m_job_name_isSet;
    bool m_job_name_isValid;

    QString m_job_priority;
    bool m_job_priority_isSet;
    bool m_job_priority_isValid;

    double m_map_progress;
    bool m_map_progress_isSet;
    bool m_map_progress_isValid;

    qint64 m_needed_mem;
    bool m_needed_mem_isSet;
    bool m_needed_mem_isValid;

    qint32 m_num_reserved_slots;
    bool m_num_reserved_slots_isSet;
    bool m_num_reserved_slots_isValid;

    qint32 m_num_used_slots;
    bool m_num_used_slots_isSet;
    bool m_num_used_slots_isValid;

    QString m_priority;
    bool m_priority_isSet;
    bool m_priority_isValid;

    QString m_queue;
    bool m_queue_isSet;
    bool m_queue_isValid;

    double m_reduce_progress;
    bool m_reduce_progress_isSet;
    bool m_reduce_progress_isValid;

    qint64 m_reserved_mem;
    bool m_reserved_mem_isSet;
    bool m_reserved_mem_isValid;

    bool m_retired;
    bool m_retired_isSet;
    bool m_retired_isValid;

    qint32 m_run_state;
    bool m_run_state_isSet;
    bool m_run_state_isValid;

    QString m_scheduling_info;
    bool m_scheduling_info_isSet;
    bool m_scheduling_info_isValid;

    double m_setup_progress;
    bool m_setup_progress_isSet;
    bool m_setup_progress_isValid;

    qint64 m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_tracking_url;
    bool m_tracking_url_isSet;
    bool m_tracking_url_isValid;

    bool m_uber;
    bool m_uber_isSet;
    bool m_uber_isValid;

    qint64 m_used_mem;
    bool m_used_mem_isSet;
    bool m_used_mem_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStatus)

#endif // OAIStatus_H
