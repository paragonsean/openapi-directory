/**
 * HDInsightJobManagementClient
 * The HDInsight Job Client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJobApi_H
#define OAI_OAIJobApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAppState.h"
#include "OAIJobDetailRootJsonObject.h"
#include "OAIJobListJsonObject.h"
#include "OAIJobOperationsErrorResponse.h"
#include "OAIJobSubmissionJsonResponse.h"
#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJobApi : public QObject {
    Q_OBJECT

public:
    OAIJobApi(const int timeOut = 0);
    ~OAIJobApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  fields QString [required]
    */
    virtual void jobGet(const QString &user_name, const QString &job_id, const QString &fields);

    /**
    * @param[in]  app_id QString [required]
    */
    virtual void jobGetAppState(const QString &app_id);

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  job_id QString [required]
    */
    virtual void jobKill(const QString &user_name, const QString &job_id);

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  showall QString [required]
    * @param[in]  fields QString [required]
    */
    virtual void jobList(const QString &user_name, const QString &showall, const QString &fields);

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  showall QString [required]
    * @param[in]  fields QString [required]
    * @param[in]  jobid QString [optional]
    * @param[in]  numrecords qint32 [optional]
    */
    virtual void jobListAfterJobId(const QString &user_name, const QString &showall, const QString &fields, const ::OpenAPI::OptionalParam<QString> &jobid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &numrecords = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  content OAIObject [required]
    */
    virtual void jobSubmitHiveJob(const QString &user_name, const OAIObject &content);

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  content OAIObject [required]
    */
    virtual void jobSubmitMapReduceJob(const QString &user_name, const OAIObject &content);

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  content OAIObject [required]
    */
    virtual void jobSubmitMapReduceStreamingJob(const QString &user_name, const OAIObject &content);

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  content OAIObject [required]
    */
    virtual void jobSubmitPigJob(const QString &user_name, const OAIObject &content);

    /**
    * @param[in]  user_name QString [required]
    * @param[in]  content OAIObject [required]
    */
    virtual void jobSubmitSqoopJob(const QString &user_name, const OAIObject &content);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void jobGetCallback(OAIHttpRequestWorker *worker);
    void jobGetAppStateCallback(OAIHttpRequestWorker *worker);
    void jobKillCallback(OAIHttpRequestWorker *worker);
    void jobListCallback(OAIHttpRequestWorker *worker);
    void jobListAfterJobIdCallback(OAIHttpRequestWorker *worker);
    void jobSubmitHiveJobCallback(OAIHttpRequestWorker *worker);
    void jobSubmitMapReduceJobCallback(OAIHttpRequestWorker *worker);
    void jobSubmitMapReduceStreamingJobCallback(OAIHttpRequestWorker *worker);
    void jobSubmitPigJobCallback(OAIHttpRequestWorker *worker);
    void jobSubmitSqoopJobCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void jobGetSignal(OAIJobDetailRootJsonObject summary);
    void jobGetAppStateSignal(OAIAppState summary);
    void jobKillSignal(OAIJobDetailRootJsonObject summary);
    void jobListSignal(QList<OAIJobListJsonObject> summary);
    void jobListAfterJobIdSignal(QList<OAIJobListJsonObject> summary);
    void jobSubmitHiveJobSignal(OAIJobSubmissionJsonResponse summary);
    void jobSubmitMapReduceJobSignal(OAIJobSubmissionJsonResponse summary);
    void jobSubmitMapReduceStreamingJobSignal(OAIJobSubmissionJsonResponse summary);
    void jobSubmitPigJobSignal(OAIJobSubmissionJsonResponse summary);
    void jobSubmitSqoopJobSignal(OAIJobSubmissionJsonResponse summary);


    void jobGetSignalFull(OAIHttpRequestWorker *worker, OAIJobDetailRootJsonObject summary);
    void jobGetAppStateSignalFull(OAIHttpRequestWorker *worker, OAIAppState summary);
    void jobKillSignalFull(OAIHttpRequestWorker *worker, OAIJobDetailRootJsonObject summary);
    void jobListSignalFull(OAIHttpRequestWorker *worker, QList<OAIJobListJsonObject> summary);
    void jobListAfterJobIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIJobListJsonObject> summary);
    void jobSubmitHiveJobSignalFull(OAIHttpRequestWorker *worker, OAIJobSubmissionJsonResponse summary);
    void jobSubmitMapReduceJobSignalFull(OAIHttpRequestWorker *worker, OAIJobSubmissionJsonResponse summary);
    void jobSubmitMapReduceStreamingJobSignalFull(OAIHttpRequestWorker *worker, OAIJobSubmissionJsonResponse summary);
    void jobSubmitPigJobSignalFull(OAIHttpRequestWorker *worker, OAIJobSubmissionJsonResponse summary);
    void jobSubmitSqoopJobSignalFull(OAIHttpRequestWorker *worker, OAIJobSubmissionJsonResponse summary);

    Q_DECL_DEPRECATED_X("Use jobGetSignalError() instead")
    void jobGetSignalE(OAIJobDetailRootJsonObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobGetSignalError(OAIJobDetailRootJsonObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobGetAppStateSignalError() instead")
    void jobGetAppStateSignalE(OAIAppState summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobGetAppStateSignalError(OAIAppState summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobKillSignalError() instead")
    void jobKillSignalE(OAIJobDetailRootJsonObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobKillSignalError(OAIJobDetailRootJsonObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobListSignalError() instead")
    void jobListSignalE(QList<OAIJobListJsonObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobListSignalError(QList<OAIJobListJsonObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobListAfterJobIdSignalError() instead")
    void jobListAfterJobIdSignalE(QList<OAIJobListJsonObject> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobListAfterJobIdSignalError(QList<OAIJobListJsonObject> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobSubmitHiveJobSignalError() instead")
    void jobSubmitHiveJobSignalE(OAIJobSubmissionJsonResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobSubmitHiveJobSignalError(OAIJobSubmissionJsonResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobSubmitMapReduceJobSignalError() instead")
    void jobSubmitMapReduceJobSignalE(OAIJobSubmissionJsonResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobSubmitMapReduceJobSignalError(OAIJobSubmissionJsonResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobSubmitMapReduceStreamingJobSignalError() instead")
    void jobSubmitMapReduceStreamingJobSignalE(OAIJobSubmissionJsonResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobSubmitMapReduceStreamingJobSignalError(OAIJobSubmissionJsonResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobSubmitPigJobSignalError() instead")
    void jobSubmitPigJobSignalE(OAIJobSubmissionJsonResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobSubmitPigJobSignalError(OAIJobSubmissionJsonResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobSubmitSqoopJobSignalError() instead")
    void jobSubmitSqoopJobSignalE(OAIJobSubmissionJsonResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobSubmitSqoopJobSignalError(OAIJobSubmissionJsonResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use jobGetSignalErrorFull() instead")
    void jobGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobGetAppStateSignalErrorFull() instead")
    void jobGetAppStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobGetAppStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobKillSignalErrorFull() instead")
    void jobKillSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobKillSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobListSignalErrorFull() instead")
    void jobListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobListAfterJobIdSignalErrorFull() instead")
    void jobListAfterJobIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobListAfterJobIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobSubmitHiveJobSignalErrorFull() instead")
    void jobSubmitHiveJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobSubmitHiveJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobSubmitMapReduceJobSignalErrorFull() instead")
    void jobSubmitMapReduceJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobSubmitMapReduceJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobSubmitMapReduceStreamingJobSignalErrorFull() instead")
    void jobSubmitMapReduceStreamingJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobSubmitMapReduceStreamingJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobSubmitPigJobSignalErrorFull() instead")
    void jobSubmitPigJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobSubmitPigJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobSubmitSqoopJobSignalErrorFull() instead")
    void jobSubmitSqoopJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobSubmitSqoopJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
