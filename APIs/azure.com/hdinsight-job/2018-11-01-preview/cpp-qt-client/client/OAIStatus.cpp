/**
 * HDInsightJobManagementClient
 * The HDInsight Job Client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatus::OAIStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatus::OAIStatus() {
    this->initializeModel();
}

OAIStatus::~OAIStatus() {}

void OAIStatus::initializeModel() {

    m_cleanup_progress_isSet = false;
    m_cleanup_progress_isValid = false;

    m_failure_info_isSet = false;
    m_failure_info_isValid = false;

    m_finish_time_isSet = false;
    m_finish_time_isValid = false;

    m_history_file_isSet = false;
    m_history_file_isValid = false;

    m_job_acls_isSet = false;
    m_job_acls_isValid = false;

    m_job_complete_isSet = false;
    m_job_complete_isValid = false;

    m_job_file_isSet = false;
    m_job_file_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_job_name_isSet = false;
    m_job_name_isValid = false;

    m_job_priority_isSet = false;
    m_job_priority_isValid = false;

    m_map_progress_isSet = false;
    m_map_progress_isValid = false;

    m_needed_mem_isSet = false;
    m_needed_mem_isValid = false;

    m_num_reserved_slots_isSet = false;
    m_num_reserved_slots_isValid = false;

    m_num_used_slots_isSet = false;
    m_num_used_slots_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_queue_isSet = false;
    m_queue_isValid = false;

    m_reduce_progress_isSet = false;
    m_reduce_progress_isValid = false;

    m_reserved_mem_isSet = false;
    m_reserved_mem_isValid = false;

    m_retired_isSet = false;
    m_retired_isValid = false;

    m_run_state_isSet = false;
    m_run_state_isValid = false;

    m_scheduling_info_isSet = false;
    m_scheduling_info_isValid = false;

    m_setup_progress_isSet = false;
    m_setup_progress_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tracking_url_isSet = false;
    m_tracking_url_isValid = false;

    m_uber_isSet = false;
    m_uber_isValid = false;

    m_used_mem_isSet = false;
    m_used_mem_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatus::fromJsonObject(QJsonObject json) {

    m_cleanup_progress_isValid = ::OpenAPI::fromJsonValue(m_cleanup_progress, json[QString("cleanupProgress")]);
    m_cleanup_progress_isSet = !json[QString("cleanupProgress")].isNull() && m_cleanup_progress_isValid;

    m_failure_info_isValid = ::OpenAPI::fromJsonValue(m_failure_info, json[QString("failureInfo")]);
    m_failure_info_isSet = !json[QString("failureInfo")].isNull() && m_failure_info_isValid;

    m_finish_time_isValid = ::OpenAPI::fromJsonValue(m_finish_time, json[QString("finishTime")]);
    m_finish_time_isSet = !json[QString("finishTime")].isNull() && m_finish_time_isValid;

    m_history_file_isValid = ::OpenAPI::fromJsonValue(m_history_file, json[QString("historyFile")]);
    m_history_file_isSet = !json[QString("historyFile")].isNull() && m_history_file_isValid;

    m_job_acls_isValid = ::OpenAPI::fromJsonValue(m_job_acls, json[QString("jobACLs")]);
    m_job_acls_isSet = !json[QString("jobACLs")].isNull() && m_job_acls_isValid;

    m_job_complete_isValid = ::OpenAPI::fromJsonValue(m_job_complete, json[QString("jobComplete")]);
    m_job_complete_isSet = !json[QString("jobComplete")].isNull() && m_job_complete_isValid;

    m_job_file_isValid = ::OpenAPI::fromJsonValue(m_job_file, json[QString("jobFile")]);
    m_job_file_isSet = !json[QString("jobFile")].isNull() && m_job_file_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobID")]);
    m_job_id_isSet = !json[QString("jobID")].isNull() && m_job_id_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_job_name_isValid = ::OpenAPI::fromJsonValue(m_job_name, json[QString("jobName")]);
    m_job_name_isSet = !json[QString("jobName")].isNull() && m_job_name_isValid;

    m_job_priority_isValid = ::OpenAPI::fromJsonValue(m_job_priority, json[QString("jobPriority")]);
    m_job_priority_isSet = !json[QString("jobPriority")].isNull() && m_job_priority_isValid;

    m_map_progress_isValid = ::OpenAPI::fromJsonValue(m_map_progress, json[QString("mapProgress")]);
    m_map_progress_isSet = !json[QString("mapProgress")].isNull() && m_map_progress_isValid;

    m_needed_mem_isValid = ::OpenAPI::fromJsonValue(m_needed_mem, json[QString("neededMem")]);
    m_needed_mem_isSet = !json[QString("neededMem")].isNull() && m_needed_mem_isValid;

    m_num_reserved_slots_isValid = ::OpenAPI::fromJsonValue(m_num_reserved_slots, json[QString("numReservedSlots")]);
    m_num_reserved_slots_isSet = !json[QString("numReservedSlots")].isNull() && m_num_reserved_slots_isValid;

    m_num_used_slots_isValid = ::OpenAPI::fromJsonValue(m_num_used_slots, json[QString("numUsedSlots")]);
    m_num_used_slots_isSet = !json[QString("numUsedSlots")].isNull() && m_num_used_slots_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_queue_isValid = ::OpenAPI::fromJsonValue(m_queue, json[QString("queue")]);
    m_queue_isSet = !json[QString("queue")].isNull() && m_queue_isValid;

    m_reduce_progress_isValid = ::OpenAPI::fromJsonValue(m_reduce_progress, json[QString("reduceProgress")]);
    m_reduce_progress_isSet = !json[QString("reduceProgress")].isNull() && m_reduce_progress_isValid;

    m_reserved_mem_isValid = ::OpenAPI::fromJsonValue(m_reserved_mem, json[QString("reservedMem")]);
    m_reserved_mem_isSet = !json[QString("reservedMem")].isNull() && m_reserved_mem_isValid;

    m_retired_isValid = ::OpenAPI::fromJsonValue(m_retired, json[QString("retired")]);
    m_retired_isSet = !json[QString("retired")].isNull() && m_retired_isValid;

    m_run_state_isValid = ::OpenAPI::fromJsonValue(m_run_state, json[QString("runState")]);
    m_run_state_isSet = !json[QString("runState")].isNull() && m_run_state_isValid;

    m_scheduling_info_isValid = ::OpenAPI::fromJsonValue(m_scheduling_info, json[QString("schedulingInfo")]);
    m_scheduling_info_isSet = !json[QString("schedulingInfo")].isNull() && m_scheduling_info_isValid;

    m_setup_progress_isValid = ::OpenAPI::fromJsonValue(m_setup_progress, json[QString("setupProgress")]);
    m_setup_progress_isSet = !json[QString("setupProgress")].isNull() && m_setup_progress_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_tracking_url_isValid = ::OpenAPI::fromJsonValue(m_tracking_url, json[QString("trackingUrl")]);
    m_tracking_url_isSet = !json[QString("trackingUrl")].isNull() && m_tracking_url_isValid;

    m_uber_isValid = ::OpenAPI::fromJsonValue(m_uber, json[QString("uber")]);
    m_uber_isSet = !json[QString("uber")].isNull() && m_uber_isValid;

    m_used_mem_isValid = ::OpenAPI::fromJsonValue(m_used_mem, json[QString("usedMem")]);
    m_used_mem_isSet = !json[QString("usedMem")].isNull() && m_used_mem_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_cleanup_progress_isSet) {
        obj.insert(QString("cleanupProgress"), ::OpenAPI::toJsonValue(m_cleanup_progress));
    }
    if (m_failure_info_isSet) {
        obj.insert(QString("failureInfo"), ::OpenAPI::toJsonValue(m_failure_info));
    }
    if (m_finish_time_isSet) {
        obj.insert(QString("finishTime"), ::OpenAPI::toJsonValue(m_finish_time));
    }
    if (m_history_file_isSet) {
        obj.insert(QString("historyFile"), ::OpenAPI::toJsonValue(m_history_file));
    }
    if (m_job_acls_isSet) {
        obj.insert(QString("jobACLs"), ::OpenAPI::toJsonValue(m_job_acls));
    }
    if (m_job_complete_isSet) {
        obj.insert(QString("jobComplete"), ::OpenAPI::toJsonValue(m_job_complete));
    }
    if (m_job_file_isSet) {
        obj.insert(QString("jobFile"), ::OpenAPI::toJsonValue(m_job_file));
    }
    if (m_job_id.isSet()) {
        obj.insert(QString("jobID"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_job_name_isSet) {
        obj.insert(QString("jobName"), ::OpenAPI::toJsonValue(m_job_name));
    }
    if (m_job_priority_isSet) {
        obj.insert(QString("jobPriority"), ::OpenAPI::toJsonValue(m_job_priority));
    }
    if (m_map_progress_isSet) {
        obj.insert(QString("mapProgress"), ::OpenAPI::toJsonValue(m_map_progress));
    }
    if (m_needed_mem_isSet) {
        obj.insert(QString("neededMem"), ::OpenAPI::toJsonValue(m_needed_mem));
    }
    if (m_num_reserved_slots_isSet) {
        obj.insert(QString("numReservedSlots"), ::OpenAPI::toJsonValue(m_num_reserved_slots));
    }
    if (m_num_used_slots_isSet) {
        obj.insert(QString("numUsedSlots"), ::OpenAPI::toJsonValue(m_num_used_slots));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_queue_isSet) {
        obj.insert(QString("queue"), ::OpenAPI::toJsonValue(m_queue));
    }
    if (m_reduce_progress_isSet) {
        obj.insert(QString("reduceProgress"), ::OpenAPI::toJsonValue(m_reduce_progress));
    }
    if (m_reserved_mem_isSet) {
        obj.insert(QString("reservedMem"), ::OpenAPI::toJsonValue(m_reserved_mem));
    }
    if (m_retired_isSet) {
        obj.insert(QString("retired"), ::OpenAPI::toJsonValue(m_retired));
    }
    if (m_run_state_isSet) {
        obj.insert(QString("runState"), ::OpenAPI::toJsonValue(m_run_state));
    }
    if (m_scheduling_info_isSet) {
        obj.insert(QString("schedulingInfo"), ::OpenAPI::toJsonValue(m_scheduling_info));
    }
    if (m_setup_progress_isSet) {
        obj.insert(QString("setupProgress"), ::OpenAPI::toJsonValue(m_setup_progress));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tracking_url_isSet) {
        obj.insert(QString("trackingUrl"), ::OpenAPI::toJsonValue(m_tracking_url));
    }
    if (m_uber_isSet) {
        obj.insert(QString("uber"), ::OpenAPI::toJsonValue(m_uber));
    }
    if (m_used_mem_isSet) {
        obj.insert(QString("usedMem"), ::OpenAPI::toJsonValue(m_used_mem));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

double OAIStatus::getCleanupProgress() const {
    return m_cleanup_progress;
}
void OAIStatus::setCleanupProgress(const double &cleanup_progress) {
    m_cleanup_progress = cleanup_progress;
    m_cleanup_progress_isSet = true;
}

bool OAIStatus::is_cleanup_progress_Set() const{
    return m_cleanup_progress_isSet;
}

bool OAIStatus::is_cleanup_progress_Valid() const{
    return m_cleanup_progress_isValid;
}

QString OAIStatus::getFailureInfo() const {
    return m_failure_info;
}
void OAIStatus::setFailureInfo(const QString &failure_info) {
    m_failure_info = failure_info;
    m_failure_info_isSet = true;
}

bool OAIStatus::is_failure_info_Set() const{
    return m_failure_info_isSet;
}

bool OAIStatus::is_failure_info_Valid() const{
    return m_failure_info_isValid;
}

qint64 OAIStatus::getFinishTime() const {
    return m_finish_time;
}
void OAIStatus::setFinishTime(const qint64 &finish_time) {
    m_finish_time = finish_time;
    m_finish_time_isSet = true;
}

bool OAIStatus::is_finish_time_Set() const{
    return m_finish_time_isSet;
}

bool OAIStatus::is_finish_time_Valid() const{
    return m_finish_time_isValid;
}

QString OAIStatus::getHistoryFile() const {
    return m_history_file;
}
void OAIStatus::setHistoryFile(const QString &history_file) {
    m_history_file = history_file;
    m_history_file_isSet = true;
}

bool OAIStatus::is_history_file_Set() const{
    return m_history_file_isSet;
}

bool OAIStatus::is_history_file_Valid() const{
    return m_history_file_isValid;
}

OAIObject OAIStatus::getJobAcls() const {
    return m_job_acls;
}
void OAIStatus::setJobAcls(const OAIObject &job_acls) {
    m_job_acls = job_acls;
    m_job_acls_isSet = true;
}

bool OAIStatus::is_job_acls_Set() const{
    return m_job_acls_isSet;
}

bool OAIStatus::is_job_acls_Valid() const{
    return m_job_acls_isValid;
}

bool OAIStatus::isJobComplete() const {
    return m_job_complete;
}
void OAIStatus::setJobComplete(const bool &job_complete) {
    m_job_complete = job_complete;
    m_job_complete_isSet = true;
}

bool OAIStatus::is_job_complete_Set() const{
    return m_job_complete_isSet;
}

bool OAIStatus::is_job_complete_Valid() const{
    return m_job_complete_isValid;
}

QString OAIStatus::getJobFile() const {
    return m_job_file;
}
void OAIStatus::setJobFile(const QString &job_file) {
    m_job_file = job_file;
    m_job_file_isSet = true;
}

bool OAIStatus::is_job_file_Set() const{
    return m_job_file_isSet;
}

bool OAIStatus::is_job_file_Valid() const{
    return m_job_file_isValid;
}

OAIJobID OAIStatus::getJobId() const {
    return m_job_id;
}
void OAIStatus::setJobId(const OAIJobID &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIStatus::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIStatus::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIStatus::getJobId() const {
    return m_job_id;
}
void OAIStatus::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIStatus::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIStatus::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIStatus::getJobName() const {
    return m_job_name;
}
void OAIStatus::setJobName(const QString &job_name) {
    m_job_name = job_name;
    m_job_name_isSet = true;
}

bool OAIStatus::is_job_name_Set() const{
    return m_job_name_isSet;
}

bool OAIStatus::is_job_name_Valid() const{
    return m_job_name_isValid;
}

QString OAIStatus::getJobPriority() const {
    return m_job_priority;
}
void OAIStatus::setJobPriority(const QString &job_priority) {
    m_job_priority = job_priority;
    m_job_priority_isSet = true;
}

bool OAIStatus::is_job_priority_Set() const{
    return m_job_priority_isSet;
}

bool OAIStatus::is_job_priority_Valid() const{
    return m_job_priority_isValid;
}

double OAIStatus::getMapProgress() const {
    return m_map_progress;
}
void OAIStatus::setMapProgress(const double &map_progress) {
    m_map_progress = map_progress;
    m_map_progress_isSet = true;
}

bool OAIStatus::is_map_progress_Set() const{
    return m_map_progress_isSet;
}

bool OAIStatus::is_map_progress_Valid() const{
    return m_map_progress_isValid;
}

qint64 OAIStatus::getNeededMem() const {
    return m_needed_mem;
}
void OAIStatus::setNeededMem(const qint64 &needed_mem) {
    m_needed_mem = needed_mem;
    m_needed_mem_isSet = true;
}

bool OAIStatus::is_needed_mem_Set() const{
    return m_needed_mem_isSet;
}

bool OAIStatus::is_needed_mem_Valid() const{
    return m_needed_mem_isValid;
}

qint32 OAIStatus::getNumReservedSlots() const {
    return m_num_reserved_slots;
}
void OAIStatus::setNumReservedSlots(const qint32 &num_reserved_slots) {
    m_num_reserved_slots = num_reserved_slots;
    m_num_reserved_slots_isSet = true;
}

bool OAIStatus::is_num_reserved_slots_Set() const{
    return m_num_reserved_slots_isSet;
}

bool OAIStatus::is_num_reserved_slots_Valid() const{
    return m_num_reserved_slots_isValid;
}

qint32 OAIStatus::getNumUsedSlots() const {
    return m_num_used_slots;
}
void OAIStatus::setNumUsedSlots(const qint32 &num_used_slots) {
    m_num_used_slots = num_used_slots;
    m_num_used_slots_isSet = true;
}

bool OAIStatus::is_num_used_slots_Set() const{
    return m_num_used_slots_isSet;
}

bool OAIStatus::is_num_used_slots_Valid() const{
    return m_num_used_slots_isValid;
}

QString OAIStatus::getPriority() const {
    return m_priority;
}
void OAIStatus::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIStatus::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIStatus::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIStatus::getQueue() const {
    return m_queue;
}
void OAIStatus::setQueue(const QString &queue) {
    m_queue = queue;
    m_queue_isSet = true;
}

bool OAIStatus::is_queue_Set() const{
    return m_queue_isSet;
}

bool OAIStatus::is_queue_Valid() const{
    return m_queue_isValid;
}

double OAIStatus::getReduceProgress() const {
    return m_reduce_progress;
}
void OAIStatus::setReduceProgress(const double &reduce_progress) {
    m_reduce_progress = reduce_progress;
    m_reduce_progress_isSet = true;
}

bool OAIStatus::is_reduce_progress_Set() const{
    return m_reduce_progress_isSet;
}

bool OAIStatus::is_reduce_progress_Valid() const{
    return m_reduce_progress_isValid;
}

qint64 OAIStatus::getReservedMem() const {
    return m_reserved_mem;
}
void OAIStatus::setReservedMem(const qint64 &reserved_mem) {
    m_reserved_mem = reserved_mem;
    m_reserved_mem_isSet = true;
}

bool OAIStatus::is_reserved_mem_Set() const{
    return m_reserved_mem_isSet;
}

bool OAIStatus::is_reserved_mem_Valid() const{
    return m_reserved_mem_isValid;
}

bool OAIStatus::isRetired() const {
    return m_retired;
}
void OAIStatus::setRetired(const bool &retired) {
    m_retired = retired;
    m_retired_isSet = true;
}

bool OAIStatus::is_retired_Set() const{
    return m_retired_isSet;
}

bool OAIStatus::is_retired_Valid() const{
    return m_retired_isValid;
}

qint32 OAIStatus::getRunState() const {
    return m_run_state;
}
void OAIStatus::setRunState(const qint32 &run_state) {
    m_run_state = run_state;
    m_run_state_isSet = true;
}

bool OAIStatus::is_run_state_Set() const{
    return m_run_state_isSet;
}

bool OAIStatus::is_run_state_Valid() const{
    return m_run_state_isValid;
}

QString OAIStatus::getSchedulingInfo() const {
    return m_scheduling_info;
}
void OAIStatus::setSchedulingInfo(const QString &scheduling_info) {
    m_scheduling_info = scheduling_info;
    m_scheduling_info_isSet = true;
}

bool OAIStatus::is_scheduling_info_Set() const{
    return m_scheduling_info_isSet;
}

bool OAIStatus::is_scheduling_info_Valid() const{
    return m_scheduling_info_isValid;
}

double OAIStatus::getSetupProgress() const {
    return m_setup_progress;
}
void OAIStatus::setSetupProgress(const double &setup_progress) {
    m_setup_progress = setup_progress;
    m_setup_progress_isSet = true;
}

bool OAIStatus::is_setup_progress_Set() const{
    return m_setup_progress_isSet;
}

bool OAIStatus::is_setup_progress_Valid() const{
    return m_setup_progress_isValid;
}

qint64 OAIStatus::getStartTime() const {
    return m_start_time;
}
void OAIStatus::setStartTime(const qint64 &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIStatus::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIStatus::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIStatus::getState() const {
    return m_state;
}
void OAIStatus::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIStatus::is_state_Set() const{
    return m_state_isSet;
}

bool OAIStatus::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIStatus::getTrackingUrl() const {
    return m_tracking_url;
}
void OAIStatus::setTrackingUrl(const QString &tracking_url) {
    m_tracking_url = tracking_url;
    m_tracking_url_isSet = true;
}

bool OAIStatus::is_tracking_url_Set() const{
    return m_tracking_url_isSet;
}

bool OAIStatus::is_tracking_url_Valid() const{
    return m_tracking_url_isValid;
}

bool OAIStatus::isUber() const {
    return m_uber;
}
void OAIStatus::setUber(const bool &uber) {
    m_uber = uber;
    m_uber_isSet = true;
}

bool OAIStatus::is_uber_Set() const{
    return m_uber_isSet;
}

bool OAIStatus::is_uber_Valid() const{
    return m_uber_isValid;
}

qint64 OAIStatus::getUsedMem() const {
    return m_used_mem;
}
void OAIStatus::setUsedMem(const qint64 &used_mem) {
    m_used_mem = used_mem;
    m_used_mem_isSet = true;
}

bool OAIStatus::is_used_mem_Set() const{
    return m_used_mem_isSet;
}

bool OAIStatus::is_used_mem_Valid() const{
    return m_used_mem_isValid;
}

QString OAIStatus::getUsername() const {
    return m_username;
}
void OAIStatus::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIStatus::is_username_Set() const{
    return m_username_isSet;
}

bool OAIStatus::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cleanup_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failure_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finish_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_history_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_acls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_needed_mem_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_reserved_slots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_used_slots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reduce_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_mem_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduling_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_setup_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uber_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_mem_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
