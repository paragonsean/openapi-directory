/**
 * HDInsightJobManagementClient
 * The HDInsight Job Client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserargs.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserargs::OAIUserargs(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserargs::OAIUserargs() {
    this->initializeModel();
}

OAIUserargs::~OAIUserargs() {}

void OAIUserargs::initializeModel() {

    m_arg_isSet = false;
    m_arg_isValid = false;

    m_callback_isSet = false;
    m_callback_isValid = false;

    m_define_isSet = false;
    m_define_isValid = false;

    m_enablelog_isSet = false;
    m_enablelog_isValid = false;

    m_execute_isSet = false;
    m_execute_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;

    m_jar_isSet = false;
    m_jar_isValid = false;

    m_statusdir_isSet = false;
    m_statusdir_isValid = false;
}

void OAIUserargs::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserargs::fromJsonObject(QJsonObject json) {

    m_arg_isValid = ::OpenAPI::fromJsonValue(m_arg, json[QString("arg")]);
    m_arg_isSet = !json[QString("arg")].isNull() && m_arg_isValid;

    m_callback_isValid = ::OpenAPI::fromJsonValue(m_callback, json[QString("callback")]);
    m_callback_isSet = !json[QString("callback")].isNull() && m_callback_isValid;

    m_define_isValid = ::OpenAPI::fromJsonValue(m_define, json[QString("define")]);
    m_define_isSet = !json[QString("define")].isNull() && m_define_isValid;

    m_enablelog_isValid = ::OpenAPI::fromJsonValue(m_enablelog, json[QString("enablelog")]);
    m_enablelog_isSet = !json[QString("enablelog")].isNull() && m_enablelog_isValid;

    m_execute_isValid = ::OpenAPI::fromJsonValue(m_execute, json[QString("execute")]);
    m_execute_isSet = !json[QString("execute")].isNull() && m_execute_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_jar_isValid = ::OpenAPI::fromJsonValue(m_jar, json[QString("jar")]);
    m_jar_isSet = !json[QString("jar")].isNull() && m_jar_isValid;

    m_statusdir_isValid = ::OpenAPI::fromJsonValue(m_statusdir, json[QString("statusdir")]);
    m_statusdir_isSet = !json[QString("statusdir")].isNull() && m_statusdir_isValid;
}

QString OAIUserargs::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserargs::asJsonObject() const {
    QJsonObject obj;
    if (m_arg.size() > 0) {
        obj.insert(QString("arg"), ::OpenAPI::toJsonValue(m_arg));
    }
    if (m_callback_isSet) {
        obj.insert(QString("callback"), ::OpenAPI::toJsonValue(m_callback));
    }
    if (m_define.size() > 0) {
        obj.insert(QString("define"), ::OpenAPI::toJsonValue(m_define));
    }
    if (m_enablelog_isSet) {
        obj.insert(QString("enablelog"), ::OpenAPI::toJsonValue(m_enablelog));
    }
    if (m_execute_isSet) {
        obj.insert(QString("execute"), ::OpenAPI::toJsonValue(m_execute));
    }
    if (m_file_isSet) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_files_isSet) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_jar_isSet) {
        obj.insert(QString("jar"), ::OpenAPI::toJsonValue(m_jar));
    }
    if (m_statusdir_isSet) {
        obj.insert(QString("statusdir"), ::OpenAPI::toJsonValue(m_statusdir));
    }
    return obj;
}

QList<QString> OAIUserargs::getArg() const {
    return m_arg;
}
void OAIUserargs::setArg(const QList<QString> &arg) {
    m_arg = arg;
    m_arg_isSet = true;
}

bool OAIUserargs::is_arg_Set() const{
    return m_arg_isSet;
}

bool OAIUserargs::is_arg_Valid() const{
    return m_arg_isValid;
}

OAIObject OAIUserargs::getCallback() const {
    return m_callback;
}
void OAIUserargs::setCallback(const OAIObject &callback) {
    m_callback = callback;
    m_callback_isSet = true;
}

bool OAIUserargs::is_callback_Set() const{
    return m_callback_isSet;
}

bool OAIUserargs::is_callback_Valid() const{
    return m_callback_isValid;
}

QList<QString> OAIUserargs::getDefine() const {
    return m_define;
}
void OAIUserargs::setDefine(const QList<QString> &define) {
    m_define = define;
    m_define_isSet = true;
}

bool OAIUserargs::is_define_Set() const{
    return m_define_isSet;
}

bool OAIUserargs::is_define_Valid() const{
    return m_define_isValid;
}

QString OAIUserargs::getEnablelog() const {
    return m_enablelog;
}
void OAIUserargs::setEnablelog(const QString &enablelog) {
    m_enablelog = enablelog;
    m_enablelog_isSet = true;
}

bool OAIUserargs::is_enablelog_Set() const{
    return m_enablelog_isSet;
}

bool OAIUserargs::is_enablelog_Valid() const{
    return m_enablelog_isValid;
}

QString OAIUserargs::getExecute() const {
    return m_execute;
}
void OAIUserargs::setExecute(const QString &execute) {
    m_execute = execute;
    m_execute_isSet = true;
}

bool OAIUserargs::is_execute_Set() const{
    return m_execute_isSet;
}

bool OAIUserargs::is_execute_Valid() const{
    return m_execute_isValid;
}

OAIObject OAIUserargs::getFile() const {
    return m_file;
}
void OAIUserargs::setFile(const OAIObject &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIUserargs::is_file_Set() const{
    return m_file_isSet;
}

bool OAIUserargs::is_file_Valid() const{
    return m_file_isValid;
}

OAIObject OAIUserargs::getFiles() const {
    return m_files;
}
void OAIUserargs::setFiles(const OAIObject &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIUserargs::is_files_Set() const{
    return m_files_isSet;
}

bool OAIUserargs::is_files_Valid() const{
    return m_files_isValid;
}

QString OAIUserargs::getJar() const {
    return m_jar;
}
void OAIUserargs::setJar(const QString &jar) {
    m_jar = jar;
    m_jar_isSet = true;
}

bool OAIUserargs::is_jar_Set() const{
    return m_jar_isSet;
}

bool OAIUserargs::is_jar_Valid() const{
    return m_jar_isValid;
}

OAIObject OAIUserargs::getStatusdir() const {
    return m_statusdir;
}
void OAIUserargs::setStatusdir(const OAIObject &statusdir) {
    m_statusdir = statusdir;
    m_statusdir_isSet = true;
}

bool OAIUserargs::is_statusdir_Set() const{
    return m_statusdir_isSet;
}

bool OAIUserargs::is_statusdir_Valid() const{
    return m_statusdir_isValid;
}

bool OAIUserargs::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arg.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_define.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enablelog_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statusdir_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserargs::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
