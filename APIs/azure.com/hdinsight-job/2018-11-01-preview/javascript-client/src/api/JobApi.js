/**
 * HDInsightJobManagementClient
 * The HDInsight Job Client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AppState from '../model/AppState';
import JobDetailRootJsonObject from '../model/JobDetailRootJsonObject';
import JobListJsonObject from '../model/JobListJsonObject';
import JobOperationsErrorResponse from '../model/JobOperationsErrorResponse';
import JobSubmissionJsonResponse from '../model/JobSubmissionJsonResponse';

/**
* Job service.
* @module api/JobApi
* @version 2018-11-01-preview
*/
export default class JobApi {

    /**
    * Constructs a new JobApi. 
    * @alias module:api/JobApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the jobGet operation.
     * @callback module:api/JobApi~jobGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobDetailRootJsonObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets job details from the specified HDInsight cluster.
     * @param {String} userName The user name used for running job.
     * @param {String} jobId The id of the job.
     * @param {module:model/String} fields If fields set to '*', the request will return full details of the job. Currently the value can only be '*'.
     * @param {module:api/JobApi~jobGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobDetailRootJsonObject}
     */
    jobGet(userName, jobId, fields, callback) {
      let postBody = null;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling jobGet");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobGet");
      }
      // verify the required parameter 'fields' is set
      if (fields === undefined || fields === null) {
        throw new Error("Missing the required parameter 'fields' when calling jobGet");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
        'user.name': userName,
        'fields': fields
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobDetailRootJsonObject;
      return this.apiClient.callApi(
        '/templeton/v1/jobs/{jobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobGetAppState operation.
     * @callback module:api/JobApi~jobGetAppStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AppState} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets application state from the specified HDInsight cluster.
     * @param {String} appId The id of the job.
     * @param {module:api/JobApi~jobGetAppStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AppState}
     */
    jobGetAppState(appId, callback) {
      let postBody = null;
      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling jobGetAppState");
      }

      let pathParams = {
        'appId': appId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AppState;
      return this.apiClient.callApi(
        '/ws/v1/cluster/apps/{appId}/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobKill operation.
     * @callback module:api/JobApi~jobKillCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobDetailRootJsonObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiates cancel on given running job in the specified HDInsight.
     * @param {String} userName The user name used for running job.
     * @param {String} jobId The id of the job.
     * @param {module:api/JobApi~jobKillCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobDetailRootJsonObject}
     */
    jobKill(userName, jobId, callback) {
      let postBody = null;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling jobKill");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobKill");
      }

      let pathParams = {
        'jobId': jobId
      };
      let queryParams = {
        'user.name': userName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobDetailRootJsonObject;
      return this.apiClient.callApi(
        '/templeton/v1/jobs/{jobId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobList operation.
     * @callback module:api/JobApi~jobListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/JobListJsonObject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the list of jobs from the specified HDInsight cluster.
     * @param {String} userName The user name used for running job.
     * @param {module:model/String} showall If showall is set to 'true', the request will return all jobs the user has permission to view, not only the jobs belonging to the user.
     * @param {module:model/String} fields If fields set to '*', the request will return full details of the job. Currently the value can only be '*'.
     * @param {module:api/JobApi~jobListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/JobListJsonObject>}
     */
    jobList(userName, showall, fields, callback) {
      let postBody = null;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling jobList");
      }
      // verify the required parameter 'showall' is set
      if (showall === undefined || showall === null) {
        throw new Error("Missing the required parameter 'showall' when calling jobList");
      }
      // verify the required parameter 'fields' is set
      if (fields === undefined || fields === null) {
        throw new Error("Missing the required parameter 'fields' when calling jobList");
      }

      let pathParams = {
      };
      let queryParams = {
        'user.name': userName,
        'showall': showall,
        'fields': fields
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [JobListJsonObject];
      return this.apiClient.callApi(
        '/templeton/v1/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobListAfterJobId operation.
     * @callback module:api/JobApi~jobListAfterJobIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/JobListJsonObject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     * @param {String} userName The user name used for running job.
     * @param {module:model/String} showall If showall is set to 'true', the request will return all jobs the user has permission to view, not only the jobs belonging to the user.
     * @param {module:model/String} fields If fields set to '*', the request will return full details of the job. Currently the value can only be '*'.
     * @param {Object} opts Optional parameters
     * @param {String} [jobid] JobId from where to list jobs.
     * @param {Number} [numrecords] Number of jobs to fetch.
     * @param {module:api/JobApi~jobListAfterJobIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/JobListJsonObject>}
     */
    jobListAfterJobId(userName, showall, fields, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling jobListAfterJobId");
      }
      // verify the required parameter 'showall' is set
      if (showall === undefined || showall === null) {
        throw new Error("Missing the required parameter 'showall' when calling jobListAfterJobId");
      }
      // verify the required parameter 'fields' is set
      if (fields === undefined || fields === null) {
        throw new Error("Missing the required parameter 'fields' when calling jobListAfterJobId");
      }

      let pathParams = {
      };
      let queryParams = {
        'user.name': userName,
        'jobid': opts['jobid'],
        'numrecords': opts['numrecords'],
        'showall': showall,
        'fields': fields
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [JobListJsonObject];
      return this.apiClient.callApi(
        '/templeton/v1/jobs?op=LISTAFTERID', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobSubmitHiveJob operation.
     * @callback module:api/JobApi~jobSubmitHiveJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobSubmissionJsonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submits a Hive job to an HDInsight cluster.
     * @param {String} userName The user name used for running job.
     * @param {Object.<String, Object>} content The content of the Hive job request.
     * @param {module:api/JobApi~jobSubmitHiveJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobSubmissionJsonResponse}
     */
    jobSubmitHiveJob(userName, content, callback) {
      let postBody = content;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling jobSubmitHiveJob");
      }
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling jobSubmitHiveJob");
      }

      let pathParams = {
      };
      let queryParams = {
        'user.name': userName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/text'];
      let accepts = ['application/json'];
      let returnType = JobSubmissionJsonResponse;
      return this.apiClient.callApi(
        '/templeton/v1/hive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobSubmitMapReduceJob operation.
     * @callback module:api/JobApi~jobSubmitMapReduceJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobSubmissionJsonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submits a MapReduce job to an HDInsight cluster.
     * @param {String} userName The user name used for running job.
     * @param {Object.<String, Object>} content The content of the MapReduce job request.
     * @param {module:api/JobApi~jobSubmitMapReduceJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobSubmissionJsonResponse}
     */
    jobSubmitMapReduceJob(userName, content, callback) {
      let postBody = content;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling jobSubmitMapReduceJob");
      }
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling jobSubmitMapReduceJob");
      }

      let pathParams = {
      };
      let queryParams = {
        'user.name': userName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = JobSubmissionJsonResponse;
      return this.apiClient.callApi(
        '/templeton/v1/mapreduce/jar', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobSubmitMapReduceStreamingJob operation.
     * @callback module:api/JobApi~jobSubmitMapReduceStreamingJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobSubmissionJsonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submits a MapReduce streaming job to an HDInsight cluster.
     * @param {String} userName The user name used for running job.
     * @param {Object.<String, Object>} content The content of the MapReduce job request.
     * @param {module:api/JobApi~jobSubmitMapReduceStreamingJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobSubmissionJsonResponse}
     */
    jobSubmitMapReduceStreamingJob(userName, content, callback) {
      let postBody = content;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling jobSubmitMapReduceStreamingJob");
      }
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling jobSubmitMapReduceStreamingJob");
      }

      let pathParams = {
      };
      let queryParams = {
        'user.name': userName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = JobSubmissionJsonResponse;
      return this.apiClient.callApi(
        '/templeton/v1/mapreduce/streaming', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobSubmitPigJob operation.
     * @callback module:api/JobApi~jobSubmitPigJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobSubmissionJsonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submits a Pig job to an HDInsight cluster.
     * @param {String} userName The user name used for running job.
     * @param {Object.<String, Object>} content The content of the Pig job request.
     * @param {module:api/JobApi~jobSubmitPigJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobSubmissionJsonResponse}
     */
    jobSubmitPigJob(userName, content, callback) {
      let postBody = content;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling jobSubmitPigJob");
      }
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling jobSubmitPigJob");
      }

      let pathParams = {
      };
      let queryParams = {
        'user.name': userName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = JobSubmissionJsonResponse;
      return this.apiClient.callApi(
        '/templeton/v1/pig', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobSubmitSqoopJob operation.
     * @callback module:api/JobApi~jobSubmitSqoopJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobSubmissionJsonResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submits a Sqoop job to an HDInsight cluster.
     * @param {String} userName The user name used for running job.
     * @param {Object.<String, Object>} content The content of the Sqoop job request.
     * @param {module:api/JobApi~jobSubmitSqoopJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobSubmissionJsonResponse}
     */
    jobSubmitSqoopJob(userName, content, callback) {
      let postBody = content;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling jobSubmitSqoopJob");
      }
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling jobSubmitSqoopJob");
      }

      let pathParams = {
      };
      let queryParams = {
        'user.name': userName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = JobSubmissionJsonResponse;
      return this.apiClient.callApi(
        '/templeton/v1/sqoop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
