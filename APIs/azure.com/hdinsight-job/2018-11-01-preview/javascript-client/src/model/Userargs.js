/**
 * HDInsightJobManagementClient
 * The HDInsight Job Client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Userargs model module.
 * @module model/Userargs
 * @version 2018-11-01-preview
 */
class Userargs {
    /**
     * Constructs a new <code>Userargs</code>.
     * Gets or sets the object containing the user arguments.
     * @alias module:model/Userargs
     */
    constructor() { 
        
        Userargs.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Userargs</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Userargs} obj Optional instance to populate.
     * @return {module:model/Userargs} The populated <code>Userargs</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Userargs();

            if (data.hasOwnProperty('arg')) {
                obj['arg'] = ApiClient.convertToType(data['arg'], ['String']);
            }
            if (data.hasOwnProperty('callback')) {
                obj['callback'] = ApiClient.convertToType(data['callback'], Object);
            }
            if (data.hasOwnProperty('define')) {
                obj['define'] = ApiClient.convertToType(data['define'], ['String']);
            }
            if (data.hasOwnProperty('enablelog')) {
                obj['enablelog'] = ApiClient.convertToType(data['enablelog'], 'String');
            }
            if (data.hasOwnProperty('execute')) {
                obj['execute'] = ApiClient.convertToType(data['execute'], 'String');
            }
            if (data.hasOwnProperty('file')) {
                obj['file'] = ApiClient.convertToType(data['file'], Object);
            }
            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], Object);
            }
            if (data.hasOwnProperty('jar')) {
                obj['jar'] = ApiClient.convertToType(data['jar'], 'String');
            }
            if (data.hasOwnProperty('statusdir')) {
                obj['statusdir'] = ApiClient.convertToType(data['statusdir'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Userargs</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Userargs</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['arg'])) {
            throw new Error("Expected the field `arg` to be an array in the JSON data but got " + data['arg']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['define'])) {
            throw new Error("Expected the field `define` to be an array in the JSON data but got " + data['define']);
        }
        // ensure the json data is a string
        if (data['enablelog'] && !(typeof data['enablelog'] === 'string' || data['enablelog'] instanceof String)) {
            throw new Error("Expected the field `enablelog` to be a primitive type in the JSON string but got " + data['enablelog']);
        }
        // ensure the json data is a string
        if (data['execute'] && !(typeof data['execute'] === 'string' || data['execute'] instanceof String)) {
            throw new Error("Expected the field `execute` to be a primitive type in the JSON string but got " + data['execute']);
        }
        // ensure the json data is a string
        if (data['jar'] && !(typeof data['jar'] === 'string' || data['jar'] instanceof String)) {
            throw new Error("Expected the field `jar` to be a primitive type in the JSON string but got " + data['jar']);
        }

        return true;
    }


}



/**
 * The list of args defined by the user.
 * @member {Array.<String>} arg
 */
Userargs.prototype['arg'] = undefined;

/**
 * The callback URL, if any.
 * @member {Object} callback
 */
Userargs.prototype['callback'] = undefined;

/**
 * The define properties defined by the user.
 * @member {Array.<String>} define
 */
Userargs.prototype['define'] = undefined;

/**
 * Whether or not the user enabled logs.
 * @member {String} enablelog
 */
Userargs.prototype['enablelog'] = undefined;

/**
 * The query defined by the user.
 * @member {String} execute
 */
Userargs.prototype['execute'] = undefined;

/**
 * The query file provided by the user.
 * @member {Object} file
 */
Userargs.prototype['file'] = undefined;

/**
 * The files defined by the user.
 * @member {Object} files
 */
Userargs.prototype['files'] = undefined;

/**
 * The JAR file provided by the user.
 * @member {String} jar
 */
Userargs.prototype['jar'] = undefined;

/**
 * The status directory defined by the user.
 * @member {Object} statusdir
 */
Userargs.prototype['statusdir'] = undefined;






export default Userargs;

