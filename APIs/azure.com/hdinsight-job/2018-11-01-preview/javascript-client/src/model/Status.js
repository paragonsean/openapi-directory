/**
 * HDInsightJobManagementClient
 * The HDInsight Job Client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JobID from './JobID';

/**
 * The Status model module.
 * @module model/Status
 * @version 2018-11-01-preview
 */
class Status {
    /**
     * Constructs a new <code>Status</code>.
     * Gets or sets the object containing the job status information.
     * @alias module:model/Status
     */
    constructor() { 
        
        Status.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Status</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Status} obj Optional instance to populate.
     * @return {module:model/Status} The populated <code>Status</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Status();

            if (data.hasOwnProperty('cleanupProgress')) {
                obj['cleanupProgress'] = ApiClient.convertToType(data['cleanupProgress'], 'Number');
            }
            if (data.hasOwnProperty('failureInfo')) {
                obj['failureInfo'] = ApiClient.convertToType(data['failureInfo'], 'String');
            }
            if (data.hasOwnProperty('finishTime')) {
                obj['finishTime'] = ApiClient.convertToType(data['finishTime'], 'Number');
            }
            if (data.hasOwnProperty('historyFile')) {
                obj['historyFile'] = ApiClient.convertToType(data['historyFile'], 'String');
            }
            if (data.hasOwnProperty('jobACLs')) {
                obj['jobACLs'] = ApiClient.convertToType(data['jobACLs'], Object);
            }
            if (data.hasOwnProperty('jobComplete')) {
                obj['jobComplete'] = ApiClient.convertToType(data['jobComplete'], 'Boolean');
            }
            if (data.hasOwnProperty('jobFile')) {
                obj['jobFile'] = ApiClient.convertToType(data['jobFile'], 'String');
            }
            if (data.hasOwnProperty('jobID')) {
                obj['jobID'] = JobID.constructFromObject(data['jobID']);
            }
            if (data.hasOwnProperty('jobId')) {
                obj['jobId'] = ApiClient.convertToType(data['jobId'], 'String');
            }
            if (data.hasOwnProperty('jobName')) {
                obj['jobName'] = ApiClient.convertToType(data['jobName'], 'String');
            }
            if (data.hasOwnProperty('jobPriority')) {
                obj['jobPriority'] = ApiClient.convertToType(data['jobPriority'], 'String');
            }
            if (data.hasOwnProperty('mapProgress')) {
                obj['mapProgress'] = ApiClient.convertToType(data['mapProgress'], 'Number');
            }
            if (data.hasOwnProperty('neededMem')) {
                obj['neededMem'] = ApiClient.convertToType(data['neededMem'], 'Number');
            }
            if (data.hasOwnProperty('numReservedSlots')) {
                obj['numReservedSlots'] = ApiClient.convertToType(data['numReservedSlots'], 'Number');
            }
            if (data.hasOwnProperty('numUsedSlots')) {
                obj['numUsedSlots'] = ApiClient.convertToType(data['numUsedSlots'], 'Number');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'String');
            }
            if (data.hasOwnProperty('queue')) {
                obj['queue'] = ApiClient.convertToType(data['queue'], 'String');
            }
            if (data.hasOwnProperty('reduceProgress')) {
                obj['reduceProgress'] = ApiClient.convertToType(data['reduceProgress'], 'Number');
            }
            if (data.hasOwnProperty('reservedMem')) {
                obj['reservedMem'] = ApiClient.convertToType(data['reservedMem'], 'Number');
            }
            if (data.hasOwnProperty('retired')) {
                obj['retired'] = ApiClient.convertToType(data['retired'], 'Boolean');
            }
            if (data.hasOwnProperty('runState')) {
                obj['runState'] = ApiClient.convertToType(data['runState'], 'Number');
            }
            if (data.hasOwnProperty('schedulingInfo')) {
                obj['schedulingInfo'] = ApiClient.convertToType(data['schedulingInfo'], 'String');
            }
            if (data.hasOwnProperty('setupProgress')) {
                obj['setupProgress'] = ApiClient.convertToType(data['setupProgress'], 'Number');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('trackingUrl')) {
                obj['trackingUrl'] = ApiClient.convertToType(data['trackingUrl'], 'String');
            }
            if (data.hasOwnProperty('uber')) {
                obj['uber'] = ApiClient.convertToType(data['uber'], 'Boolean');
            }
            if (data.hasOwnProperty('usedMem')) {
                obj['usedMem'] = ApiClient.convertToType(data['usedMem'], 'Number');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Status</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Status</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['failureInfo'] && !(typeof data['failureInfo'] === 'string' || data['failureInfo'] instanceof String)) {
            throw new Error("Expected the field `failureInfo` to be a primitive type in the JSON string but got " + data['failureInfo']);
        }
        // ensure the json data is a string
        if (data['historyFile'] && !(typeof data['historyFile'] === 'string' || data['historyFile'] instanceof String)) {
            throw new Error("Expected the field `historyFile` to be a primitive type in the JSON string but got " + data['historyFile']);
        }
        // ensure the json data is a string
        if (data['jobFile'] && !(typeof data['jobFile'] === 'string' || data['jobFile'] instanceof String)) {
            throw new Error("Expected the field `jobFile` to be a primitive type in the JSON string but got " + data['jobFile']);
        }
        // validate the optional field `jobID`
        if (data['jobID']) { // data not null
          JobID.validateJSON(data['jobID']);
        }
        // ensure the json data is a string
        if (data['jobId'] && !(typeof data['jobId'] === 'string' || data['jobId'] instanceof String)) {
            throw new Error("Expected the field `jobId` to be a primitive type in the JSON string but got " + data['jobId']);
        }
        // ensure the json data is a string
        if (data['jobName'] && !(typeof data['jobName'] === 'string' || data['jobName'] instanceof String)) {
            throw new Error("Expected the field `jobName` to be a primitive type in the JSON string but got " + data['jobName']);
        }
        // ensure the json data is a string
        if (data['jobPriority'] && !(typeof data['jobPriority'] === 'string' || data['jobPriority'] instanceof String)) {
            throw new Error("Expected the field `jobPriority` to be a primitive type in the JSON string but got " + data['jobPriority']);
        }
        // ensure the json data is a string
        if (data['priority'] && !(typeof data['priority'] === 'string' || data['priority'] instanceof String)) {
            throw new Error("Expected the field `priority` to be a primitive type in the JSON string but got " + data['priority']);
        }
        // ensure the json data is a string
        if (data['queue'] && !(typeof data['queue'] === 'string' || data['queue'] instanceof String)) {
            throw new Error("Expected the field `queue` to be a primitive type in the JSON string but got " + data['queue']);
        }
        // ensure the json data is a string
        if (data['schedulingInfo'] && !(typeof data['schedulingInfo'] === 'string' || data['schedulingInfo'] instanceof String)) {
            throw new Error("Expected the field `schedulingInfo` to be a primitive type in the JSON string but got " + data['schedulingInfo']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['trackingUrl'] && !(typeof data['trackingUrl'] === 'string' || data['trackingUrl'] instanceof String)) {
            throw new Error("Expected the field `trackingUrl` to be a primitive type in the JSON string but got " + data['trackingUrl']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * The progress made on the cleanup.
 * @member {Number} cleanupProgress
 */
Status.prototype['cleanupProgress'] = undefined;

/**
 * The information about any failures that have occurred.
 * @member {String} failureInfo
 */
Status.prototype['failureInfo'] = undefined;

/**
 * The time at which the job completed. It is an integer in milliseconds, as a Unix timestamp relative to 1/1/1970 00:00:00.
 * @member {Number} finishTime
 */
Status.prototype['finishTime'] = undefined;

/**
 * The history file of the job.
 * @member {String} historyFile
 */
Status.prototype['historyFile'] = undefined;

/**
 * The object containing the job ACLs.
 * @member {Object} jobACLs
 */
Status.prototype['jobACLs'] = undefined;

/**
 * Whether or not the job has completed.
 * @member {Boolean} jobComplete
 */
Status.prototype['jobComplete'] = undefined;

/**
 * The job configuration file.
 * @member {String} jobFile
 */
Status.prototype['jobFile'] = undefined;

/**
 * @member {module:model/JobID} jobID
 */
Status.prototype['jobID'] = undefined;

/**
 * The full ID of the job.
 * @member {String} jobId
 */
Status.prototype['jobId'] = undefined;

/**
 * The user-specified job name.
 * @member {String} jobName
 */
Status.prototype['jobName'] = undefined;

/**
 * The priority of the job.
 * @member {String} jobPriority
 */
Status.prototype['jobPriority'] = undefined;

/**
 * The progress made on the maps.
 * @member {Number} mapProgress
 */
Status.prototype['mapProgress'] = undefined;

/**
 * The amount of memory needed for the job.
 * @member {Number} neededMem
 */
Status.prototype['neededMem'] = undefined;

/**
 * The number of slots reserved.
 * @member {Number} numReservedSlots
 */
Status.prototype['numReservedSlots'] = undefined;

/**
 * The number of slots used for the job.
 * @member {Number} numUsedSlots
 */
Status.prototype['numUsedSlots'] = undefined;

/**
 * The priority of the job.
 * @member {String} priority
 */
Status.prototype['priority'] = undefined;

/**
 * The job queue name.
 * @member {String} queue
 */
Status.prototype['queue'] = undefined;

/**
 * The progress made on the reduces.
 * @member {Number} reduceProgress
 */
Status.prototype['reduceProgress'] = undefined;

/**
 * The amount of memory reserved for the job.
 * @member {Number} reservedMem
 */
Status.prototype['reservedMem'] = undefined;

/**
 * Whether or not the job has been retired. 
 * @member {Boolean} retired
 */
Status.prototype['retired'] = undefined;

/**
 * The current state of the job.
 * @member {Number} runState
 */
Status.prototype['runState'] = undefined;

/**
 * The information about the scheduling of the job.
 * @member {String} schedulingInfo
 */
Status.prototype['schedulingInfo'] = undefined;

/**
 * The progress made on the setup.
 * @member {Number} setupProgress
 */
Status.prototype['setupProgress'] = undefined;

/**
 * The time at which the job started. It is an integer in milliseconds, as a Unix timestamp relative to 1/1/1970 00:00:00.
 * @member {Number} startTime
 */
Status.prototype['startTime'] = undefined;

/**
 * The state of the job.
 * @member {String} state
 */
Status.prototype['state'] = undefined;

/**
 * The link to the web-ui for details of the job.
 * @member {String} trackingUrl
 */
Status.prototype['trackingUrl'] = undefined;

/**
 * Whether job running in uber mode.
 * @member {Boolean} uber
 */
Status.prototype['uber'] = undefined;

/**
 * The amount of memory used by the job.
 * @member {Number} usedMem
 */
Status.prototype['usedMem'] = undefined;

/**
 * The userid of the person who submitted the job.
 * @member {String} username
 */
Status.prototype['username'] = undefined;






export default Status;

