# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_id import JobID
from openapi_server import util


class Status(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cleanup_progress: float=None, failure_info: str=None, finish_time: int=None, history_file: str=None, job_acls: object=None, job_complete: bool=None, job_file: str=None, job_id: JobID=None, job_id: str=None, job_name: str=None, job_priority: str=None, map_progress: float=None, needed_mem: int=None, num_reserved_slots: int=None, num_used_slots: int=None, priority: str=None, queue: str=None, reduce_progress: float=None, reserved_mem: int=None, retired: bool=None, run_state: int=None, scheduling_info: str=None, setup_progress: float=None, start_time: int=None, state: str=None, tracking_url: str=None, uber: bool=None, used_mem: int=None, username: str=None):
        """Status - a model defined in OpenAPI

        :param cleanup_progress: The cleanup_progress of this Status.
        :param failure_info: The failure_info of this Status.
        :param finish_time: The finish_time of this Status.
        :param history_file: The history_file of this Status.
        :param job_acls: The job_acls of this Status.
        :param job_complete: The job_complete of this Status.
        :param job_file: The job_file of this Status.
        :param job_id: The job_id of this Status.
        :param job_id: The job_id of this Status.
        :param job_name: The job_name of this Status.
        :param job_priority: The job_priority of this Status.
        :param map_progress: The map_progress of this Status.
        :param needed_mem: The needed_mem of this Status.
        :param num_reserved_slots: The num_reserved_slots of this Status.
        :param num_used_slots: The num_used_slots of this Status.
        :param priority: The priority of this Status.
        :param queue: The queue of this Status.
        :param reduce_progress: The reduce_progress of this Status.
        :param reserved_mem: The reserved_mem of this Status.
        :param retired: The retired of this Status.
        :param run_state: The run_state of this Status.
        :param scheduling_info: The scheduling_info of this Status.
        :param setup_progress: The setup_progress of this Status.
        :param start_time: The start_time of this Status.
        :param state: The state of this Status.
        :param tracking_url: The tracking_url of this Status.
        :param uber: The uber of this Status.
        :param used_mem: The used_mem of this Status.
        :param username: The username of this Status.
        """
        self.openapi_types = {
            'cleanup_progress': float,
            'failure_info': str,
            'finish_time': int,
            'history_file': str,
            'job_acls': object,
            'job_complete': bool,
            'job_file': str,
            'job_id': JobID,
            'job_id': str,
            'job_name': str,
            'job_priority': str,
            'map_progress': float,
            'needed_mem': int,
            'num_reserved_slots': int,
            'num_used_slots': int,
            'priority': str,
            'queue': str,
            'reduce_progress': float,
            'reserved_mem': int,
            'retired': bool,
            'run_state': int,
            'scheduling_info': str,
            'setup_progress': float,
            'start_time': int,
            'state': str,
            'tracking_url': str,
            'uber': bool,
            'used_mem': int,
            'username': str
        }

        self.attribute_map = {
            'cleanup_progress': 'cleanupProgress',
            'failure_info': 'failureInfo',
            'finish_time': 'finishTime',
            'history_file': 'historyFile',
            'job_acls': 'jobACLs',
            'job_complete': 'jobComplete',
            'job_file': 'jobFile',
            'job_id': 'jobID',
            'job_id': 'jobId',
            'job_name': 'jobName',
            'job_priority': 'jobPriority',
            'map_progress': 'mapProgress',
            'needed_mem': 'neededMem',
            'num_reserved_slots': 'numReservedSlots',
            'num_used_slots': 'numUsedSlots',
            'priority': 'priority',
            'queue': 'queue',
            'reduce_progress': 'reduceProgress',
            'reserved_mem': 'reservedMem',
            'retired': 'retired',
            'run_state': 'runState',
            'scheduling_info': 'schedulingInfo',
            'setup_progress': 'setupProgress',
            'start_time': 'startTime',
            'state': 'state',
            'tracking_url': 'trackingUrl',
            'uber': 'uber',
            'used_mem': 'usedMem',
            'username': 'username'
        }

        self._cleanup_progress = cleanup_progress
        self._failure_info = failure_info
        self._finish_time = finish_time
        self._history_file = history_file
        self._job_acls = job_acls
        self._job_complete = job_complete
        self._job_file = job_file
        self._job_id = job_id
        self._job_id = job_id
        self._job_name = job_name
        self._job_priority = job_priority
        self._map_progress = map_progress
        self._needed_mem = needed_mem
        self._num_reserved_slots = num_reserved_slots
        self._num_used_slots = num_used_slots
        self._priority = priority
        self._queue = queue
        self._reduce_progress = reduce_progress
        self._reserved_mem = reserved_mem
        self._retired = retired
        self._run_state = run_state
        self._scheduling_info = scheduling_info
        self._setup_progress = setup_progress
        self._start_time = start_time
        self._state = state
        self._tracking_url = tracking_url
        self._uber = uber
        self._used_mem = used_mem
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Status':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Status of this Status.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cleanup_progress(self):
        """Gets the cleanup_progress of this Status.

        The progress made on the cleanup.

        :return: The cleanup_progress of this Status.
        :rtype: float
        """
        return self._cleanup_progress

    @cleanup_progress.setter
    def cleanup_progress(self, cleanup_progress):
        """Sets the cleanup_progress of this Status.

        The progress made on the cleanup.

        :param cleanup_progress: The cleanup_progress of this Status.
        :type cleanup_progress: float
        """

        self._cleanup_progress = cleanup_progress

    @property
    def failure_info(self):
        """Gets the failure_info of this Status.

        The information about any failures that have occurred.

        :return: The failure_info of this Status.
        :rtype: str
        """
        return self._failure_info

    @failure_info.setter
    def failure_info(self, failure_info):
        """Sets the failure_info of this Status.

        The information about any failures that have occurred.

        :param failure_info: The failure_info of this Status.
        :type failure_info: str
        """

        self._failure_info = failure_info

    @property
    def finish_time(self):
        """Gets the finish_time of this Status.

        The time at which the job completed. It is an integer in milliseconds, as a Unix timestamp relative to 1/1/1970 00:00:00.

        :return: The finish_time of this Status.
        :rtype: int
        """
        return self._finish_time

    @finish_time.setter
    def finish_time(self, finish_time):
        """Sets the finish_time of this Status.

        The time at which the job completed. It is an integer in milliseconds, as a Unix timestamp relative to 1/1/1970 00:00:00.

        :param finish_time: The finish_time of this Status.
        :type finish_time: int
        """

        self._finish_time = finish_time

    @property
    def history_file(self):
        """Gets the history_file of this Status.

        The history file of the job.

        :return: The history_file of this Status.
        :rtype: str
        """
        return self._history_file

    @history_file.setter
    def history_file(self, history_file):
        """Sets the history_file of this Status.

        The history file of the job.

        :param history_file: The history_file of this Status.
        :type history_file: str
        """

        self._history_file = history_file

    @property
    def job_acls(self):
        """Gets the job_acls of this Status.

        The object containing the job ACLs.

        :return: The job_acls of this Status.
        :rtype: object
        """
        return self._job_acls

    @job_acls.setter
    def job_acls(self, job_acls):
        """Sets the job_acls of this Status.

        The object containing the job ACLs.

        :param job_acls: The job_acls of this Status.
        :type job_acls: object
        """

        self._job_acls = job_acls

    @property
    def job_complete(self):
        """Gets the job_complete of this Status.

        Whether or not the job has completed.

        :return: The job_complete of this Status.
        :rtype: bool
        """
        return self._job_complete

    @job_complete.setter
    def job_complete(self, job_complete):
        """Sets the job_complete of this Status.

        Whether or not the job has completed.

        :param job_complete: The job_complete of this Status.
        :type job_complete: bool
        """

        self._job_complete = job_complete

    @property
    def job_file(self):
        """Gets the job_file of this Status.

        The job configuration file.

        :return: The job_file of this Status.
        :rtype: str
        """
        return self._job_file

    @job_file.setter
    def job_file(self, job_file):
        """Sets the job_file of this Status.

        The job configuration file.

        :param job_file: The job_file of this Status.
        :type job_file: str
        """

        self._job_file = job_file

    @property
    def job_id(self):
        """Gets the job_id of this Status.


        :return: The job_id of this Status.
        :rtype: JobID
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this Status.


        :param job_id: The job_id of this Status.
        :type job_id: JobID
        """

        self._job_id = job_id

    @property
    def job_id(self):
        """Gets the job_id of this Status.

        The full ID of the job.

        :return: The job_id of this Status.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this Status.

        The full ID of the job.

        :param job_id: The job_id of this Status.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def job_name(self):
        """Gets the job_name of this Status.

        The user-specified job name.

        :return: The job_name of this Status.
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this Status.

        The user-specified job name.

        :param job_name: The job_name of this Status.
        :type job_name: str
        """

        self._job_name = job_name

    @property
    def job_priority(self):
        """Gets the job_priority of this Status.

        The priority of the job.

        :return: The job_priority of this Status.
        :rtype: str
        """
        return self._job_priority

    @job_priority.setter
    def job_priority(self, job_priority):
        """Sets the job_priority of this Status.

        The priority of the job.

        :param job_priority: The job_priority of this Status.
        :type job_priority: str
        """

        self._job_priority = job_priority

    @property
    def map_progress(self):
        """Gets the map_progress of this Status.

        The progress made on the maps.

        :return: The map_progress of this Status.
        :rtype: float
        """
        return self._map_progress

    @map_progress.setter
    def map_progress(self, map_progress):
        """Sets the map_progress of this Status.

        The progress made on the maps.

        :param map_progress: The map_progress of this Status.
        :type map_progress: float
        """

        self._map_progress = map_progress

    @property
    def needed_mem(self):
        """Gets the needed_mem of this Status.

        The amount of memory needed for the job.

        :return: The needed_mem of this Status.
        :rtype: int
        """
        return self._needed_mem

    @needed_mem.setter
    def needed_mem(self, needed_mem):
        """Sets the needed_mem of this Status.

        The amount of memory needed for the job.

        :param needed_mem: The needed_mem of this Status.
        :type needed_mem: int
        """

        self._needed_mem = needed_mem

    @property
    def num_reserved_slots(self):
        """Gets the num_reserved_slots of this Status.

        The number of slots reserved.

        :return: The num_reserved_slots of this Status.
        :rtype: int
        """
        return self._num_reserved_slots

    @num_reserved_slots.setter
    def num_reserved_slots(self, num_reserved_slots):
        """Sets the num_reserved_slots of this Status.

        The number of slots reserved.

        :param num_reserved_slots: The num_reserved_slots of this Status.
        :type num_reserved_slots: int
        """

        self._num_reserved_slots = num_reserved_slots

    @property
    def num_used_slots(self):
        """Gets the num_used_slots of this Status.

        The number of slots used for the job.

        :return: The num_used_slots of this Status.
        :rtype: int
        """
        return self._num_used_slots

    @num_used_slots.setter
    def num_used_slots(self, num_used_slots):
        """Sets the num_used_slots of this Status.

        The number of slots used for the job.

        :param num_used_slots: The num_used_slots of this Status.
        :type num_used_slots: int
        """

        self._num_used_slots = num_used_slots

    @property
    def priority(self):
        """Gets the priority of this Status.

        The priority of the job.

        :return: The priority of this Status.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Status.

        The priority of the job.

        :param priority: The priority of this Status.
        :type priority: str
        """

        self._priority = priority

    @property
    def queue(self):
        """Gets the queue of this Status.

        The job queue name.

        :return: The queue of this Status.
        :rtype: str
        """
        return self._queue

    @queue.setter
    def queue(self, queue):
        """Sets the queue of this Status.

        The job queue name.

        :param queue: The queue of this Status.
        :type queue: str
        """

        self._queue = queue

    @property
    def reduce_progress(self):
        """Gets the reduce_progress of this Status.

        The progress made on the reduces.

        :return: The reduce_progress of this Status.
        :rtype: float
        """
        return self._reduce_progress

    @reduce_progress.setter
    def reduce_progress(self, reduce_progress):
        """Sets the reduce_progress of this Status.

        The progress made on the reduces.

        :param reduce_progress: The reduce_progress of this Status.
        :type reduce_progress: float
        """

        self._reduce_progress = reduce_progress

    @property
    def reserved_mem(self):
        """Gets the reserved_mem of this Status.

        The amount of memory reserved for the job.

        :return: The reserved_mem of this Status.
        :rtype: int
        """
        return self._reserved_mem

    @reserved_mem.setter
    def reserved_mem(self, reserved_mem):
        """Sets the reserved_mem of this Status.

        The amount of memory reserved for the job.

        :param reserved_mem: The reserved_mem of this Status.
        :type reserved_mem: int
        """

        self._reserved_mem = reserved_mem

    @property
    def retired(self):
        """Gets the retired of this Status.

        Whether or not the job has been retired. 

        :return: The retired of this Status.
        :rtype: bool
        """
        return self._retired

    @retired.setter
    def retired(self, retired):
        """Sets the retired of this Status.

        Whether or not the job has been retired. 

        :param retired: The retired of this Status.
        :type retired: bool
        """

        self._retired = retired

    @property
    def run_state(self):
        """Gets the run_state of this Status.

        The current state of the job.

        :return: The run_state of this Status.
        :rtype: int
        """
        return self._run_state

    @run_state.setter
    def run_state(self, run_state):
        """Sets the run_state of this Status.

        The current state of the job.

        :param run_state: The run_state of this Status.
        :type run_state: int
        """

        self._run_state = run_state

    @property
    def scheduling_info(self):
        """Gets the scheduling_info of this Status.

        The information about the scheduling of the job.

        :return: The scheduling_info of this Status.
        :rtype: str
        """
        return self._scheduling_info

    @scheduling_info.setter
    def scheduling_info(self, scheduling_info):
        """Sets the scheduling_info of this Status.

        The information about the scheduling of the job.

        :param scheduling_info: The scheduling_info of this Status.
        :type scheduling_info: str
        """

        self._scheduling_info = scheduling_info

    @property
    def setup_progress(self):
        """Gets the setup_progress of this Status.

        The progress made on the setup.

        :return: The setup_progress of this Status.
        :rtype: float
        """
        return self._setup_progress

    @setup_progress.setter
    def setup_progress(self, setup_progress):
        """Sets the setup_progress of this Status.

        The progress made on the setup.

        :param setup_progress: The setup_progress of this Status.
        :type setup_progress: float
        """

        self._setup_progress = setup_progress

    @property
    def start_time(self):
        """Gets the start_time of this Status.

        The time at which the job started. It is an integer in milliseconds, as a Unix timestamp relative to 1/1/1970 00:00:00.

        :return: The start_time of this Status.
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Status.

        The time at which the job started. It is an integer in milliseconds, as a Unix timestamp relative to 1/1/1970 00:00:00.

        :param start_time: The start_time of this Status.
        :type start_time: int
        """

        self._start_time = start_time

    @property
    def state(self):
        """Gets the state of this Status.

        The state of the job.

        :return: The state of this Status.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Status.

        The state of the job.

        :param state: The state of this Status.
        :type state: str
        """

        self._state = state

    @property
    def tracking_url(self):
        """Gets the tracking_url of this Status.

        The link to the web-ui for details of the job.

        :return: The tracking_url of this Status.
        :rtype: str
        """
        return self._tracking_url

    @tracking_url.setter
    def tracking_url(self, tracking_url):
        """Sets the tracking_url of this Status.

        The link to the web-ui for details of the job.

        :param tracking_url: The tracking_url of this Status.
        :type tracking_url: str
        """

        self._tracking_url = tracking_url

    @property
    def uber(self):
        """Gets the uber of this Status.

        Whether job running in uber mode.

        :return: The uber of this Status.
        :rtype: bool
        """
        return self._uber

    @uber.setter
    def uber(self, uber):
        """Sets the uber of this Status.

        Whether job running in uber mode.

        :param uber: The uber of this Status.
        :type uber: bool
        """

        self._uber = uber

    @property
    def used_mem(self):
        """Gets the used_mem of this Status.

        The amount of memory used by the job.

        :return: The used_mem of this Status.
        :rtype: int
        """
        return self._used_mem

    @used_mem.setter
    def used_mem(self, used_mem):
        """Sets the used_mem of this Status.

        The amount of memory used by the job.

        :param used_mem: The used_mem of this Status.
        :type used_mem: int
        """

        self._used_mem = used_mem

    @property
    def username(self):
        """Gets the username of this Status.

        The userid of the person who submitted the job.

        :return: The username of this Status.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Status.

        The userid of the person who submitted the job.

        :param username: The username of this Status.
        :type username: str
        """

        self._username = username
