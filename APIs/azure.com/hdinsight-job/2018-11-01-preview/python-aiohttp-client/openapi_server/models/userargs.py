# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Userargs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arg: List[str]=None, callback: object=None, define: List[str]=None, enablelog: str=None, execute: str=None, file: object=None, files: object=None, jar: str=None, statusdir: object=None):
        """Userargs - a model defined in OpenAPI

        :param arg: The arg of this Userargs.
        :param callback: The callback of this Userargs.
        :param define: The define of this Userargs.
        :param enablelog: The enablelog of this Userargs.
        :param execute: The execute of this Userargs.
        :param file: The file of this Userargs.
        :param files: The files of this Userargs.
        :param jar: The jar of this Userargs.
        :param statusdir: The statusdir of this Userargs.
        """
        self.openapi_types = {
            'arg': List[str],
            'callback': object,
            'define': List[str],
            'enablelog': str,
            'execute': str,
            'file': object,
            'files': object,
            'jar': str,
            'statusdir': object
        }

        self.attribute_map = {
            'arg': 'arg',
            'callback': 'callback',
            'define': 'define',
            'enablelog': 'enablelog',
            'execute': 'execute',
            'file': 'file',
            'files': 'files',
            'jar': 'jar',
            'statusdir': 'statusdir'
        }

        self._arg = arg
        self._callback = callback
        self._define = define
        self._enablelog = enablelog
        self._execute = execute
        self._file = file
        self._files = files
        self._jar = jar
        self._statusdir = statusdir

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Userargs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Userargs of this Userargs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arg(self):
        """Gets the arg of this Userargs.

        The list of args defined by the user.

        :return: The arg of this Userargs.
        :rtype: List[str]
        """
        return self._arg

    @arg.setter
    def arg(self, arg):
        """Sets the arg of this Userargs.

        The list of args defined by the user.

        :param arg: The arg of this Userargs.
        :type arg: List[str]
        """

        self._arg = arg

    @property
    def callback(self):
        """Gets the callback of this Userargs.

        The callback URL, if any.

        :return: The callback of this Userargs.
        :rtype: object
        """
        return self._callback

    @callback.setter
    def callback(self, callback):
        """Sets the callback of this Userargs.

        The callback URL, if any.

        :param callback: The callback of this Userargs.
        :type callback: object
        """

        self._callback = callback

    @property
    def define(self):
        """Gets the define of this Userargs.

        The define properties defined by the user.

        :return: The define of this Userargs.
        :rtype: List[str]
        """
        return self._define

    @define.setter
    def define(self, define):
        """Sets the define of this Userargs.

        The define properties defined by the user.

        :param define: The define of this Userargs.
        :type define: List[str]
        """

        self._define = define

    @property
    def enablelog(self):
        """Gets the enablelog of this Userargs.

        Whether or not the user enabled logs.

        :return: The enablelog of this Userargs.
        :rtype: str
        """
        return self._enablelog

    @enablelog.setter
    def enablelog(self, enablelog):
        """Sets the enablelog of this Userargs.

        Whether or not the user enabled logs.

        :param enablelog: The enablelog of this Userargs.
        :type enablelog: str
        """

        self._enablelog = enablelog

    @property
    def execute(self):
        """Gets the execute of this Userargs.

        The query defined by the user.

        :return: The execute of this Userargs.
        :rtype: str
        """
        return self._execute

    @execute.setter
    def execute(self, execute):
        """Sets the execute of this Userargs.

        The query defined by the user.

        :param execute: The execute of this Userargs.
        :type execute: str
        """

        self._execute = execute

    @property
    def file(self):
        """Gets the file of this Userargs.

        The query file provided by the user.

        :return: The file of this Userargs.
        :rtype: object
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this Userargs.

        The query file provided by the user.

        :param file: The file of this Userargs.
        :type file: object
        """

        self._file = file

    @property
    def files(self):
        """Gets the files of this Userargs.

        The files defined by the user.

        :return: The files of this Userargs.
        :rtype: object
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this Userargs.

        The files defined by the user.

        :param files: The files of this Userargs.
        :type files: object
        """

        self._files = files

    @property
    def jar(self):
        """Gets the jar of this Userargs.

        The JAR file provided by the user.

        :return: The jar of this Userargs.
        :rtype: str
        """
        return self._jar

    @jar.setter
    def jar(self, jar):
        """Sets the jar of this Userargs.

        The JAR file provided by the user.

        :param jar: The jar of this Userargs.
        :type jar: str
        """

        self._jar = jar

    @property
    def statusdir(self):
        """Gets the statusdir of this Userargs.

        The status directory defined by the user.

        :return: The statusdir of this Userargs.
        :rtype: object
        """
        return self._statusdir

    @statusdir.setter
    def statusdir(self, statusdir):
        """Sets the statusdir of this Userargs.

        The status directory defined by the user.

        :param statusdir: The statusdir of this Userargs.
        :type statusdir: object
        """

        self._statusdir = statusdir
