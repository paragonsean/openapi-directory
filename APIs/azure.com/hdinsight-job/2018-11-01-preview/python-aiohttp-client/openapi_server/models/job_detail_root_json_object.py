# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.profile import Profile
from openapi_server.models.status import Status
from openapi_server.models.userargs import Userargs
from openapi_server import util


class JobDetailRootJsonObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, callback: object=None, completed: str=None, exit_value: int=None, id: str=None, msg: object=None, parent_id: str=None, percent_complete: str=None, profile: Profile=None, status: Status=None, user: str=None, userargs: Userargs=None):
        """JobDetailRootJsonObject - a model defined in OpenAPI

        :param callback: The callback of this JobDetailRootJsonObject.
        :param completed: The completed of this JobDetailRootJsonObject.
        :param exit_value: The exit_value of this JobDetailRootJsonObject.
        :param id: The id of this JobDetailRootJsonObject.
        :param msg: The msg of this JobDetailRootJsonObject.
        :param parent_id: The parent_id of this JobDetailRootJsonObject.
        :param percent_complete: The percent_complete of this JobDetailRootJsonObject.
        :param profile: The profile of this JobDetailRootJsonObject.
        :param status: The status of this JobDetailRootJsonObject.
        :param user: The user of this JobDetailRootJsonObject.
        :param userargs: The userargs of this JobDetailRootJsonObject.
        """
        self.openapi_types = {
            'callback': object,
            'completed': str,
            'exit_value': int,
            'id': str,
            'msg': object,
            'parent_id': str,
            'percent_complete': str,
            'profile': Profile,
            'status': Status,
            'user': str,
            'userargs': Userargs
        }

        self.attribute_map = {
            'callback': 'callback',
            'completed': 'completed',
            'exit_value': 'exitValue',
            'id': 'id',
            'msg': 'msg',
            'parent_id': 'parentId',
            'percent_complete': 'percentComplete',
            'profile': 'profile',
            'status': 'status',
            'user': 'user',
            'userargs': 'userargs'
        }

        self._callback = callback
        self._completed = completed
        self._exit_value = exit_value
        self._id = id
        self._msg = msg
        self._parent_id = parent_id
        self._percent_complete = percent_complete
        self._profile = profile
        self._status = status
        self._user = user
        self._userargs = userargs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobDetailRootJsonObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobDetailRootJsonObject of this JobDetailRootJsonObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def callback(self):
        """Gets the callback of this JobDetailRootJsonObject.

        The callback URL, if any.

        :return: The callback of this JobDetailRootJsonObject.
        :rtype: object
        """
        return self._callback

    @callback.setter
    def callback(self, callback):
        """Sets the callback of this JobDetailRootJsonObject.

        The callback URL, if any.

        :param callback: The callback of this JobDetailRootJsonObject.
        :type callback: object
        """

        self._callback = callback

    @property
    def completed(self):
        """Gets the completed of this JobDetailRootJsonObject.

        The string representing completed status, for example 'done'.

        :return: The completed of this JobDetailRootJsonObject.
        :rtype: str
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this JobDetailRootJsonObject.

        The string representing completed status, for example 'done'.

        :param completed: The completed of this JobDetailRootJsonObject.
        :type completed: str
        """

        self._completed = completed

    @property
    def exit_value(self):
        """Gets the exit_value of this JobDetailRootJsonObject.

        The job's exit value.

        :return: The exit_value of this JobDetailRootJsonObject.
        :rtype: int
        """
        return self._exit_value

    @exit_value.setter
    def exit_value(self, exit_value):
        """Sets the exit_value of this JobDetailRootJsonObject.

        The job's exit value.

        :param exit_value: The exit_value of this JobDetailRootJsonObject.
        :type exit_value: int
        """

        self._exit_value = exit_value

    @property
    def id(self):
        """Gets the id of this JobDetailRootJsonObject.

        The job ID.

        :return: The id of this JobDetailRootJsonObject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobDetailRootJsonObject.

        The job ID.

        :param id: The id of this JobDetailRootJsonObject.
        :type id: str
        """

        self._id = id

    @property
    def msg(self):
        """Gets the msg of this JobDetailRootJsonObject.

        The message returned.

        :return: The msg of this JobDetailRootJsonObject.
        :rtype: object
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this JobDetailRootJsonObject.

        The message returned.

        :param msg: The msg of this JobDetailRootJsonObject.
        :type msg: object
        """

        self._msg = msg

    @property
    def parent_id(self):
        """Gets the parent_id of this JobDetailRootJsonObject.

        The parent job ID.

        :return: The parent_id of this JobDetailRootJsonObject.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this JobDetailRootJsonObject.

        The parent job ID.

        :param parent_id: The parent_id of this JobDetailRootJsonObject.
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def percent_complete(self):
        """Gets the percent_complete of this JobDetailRootJsonObject.

        The job completion percentage, for example '75% complete'.

        :return: The percent_complete of this JobDetailRootJsonObject.
        :rtype: str
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this JobDetailRootJsonObject.

        The job completion percentage, for example '75% complete'.

        :param percent_complete: The percent_complete of this JobDetailRootJsonObject.
        :type percent_complete: str
        """

        self._percent_complete = percent_complete

    @property
    def profile(self):
        """Gets the profile of this JobDetailRootJsonObject.


        :return: The profile of this JobDetailRootJsonObject.
        :rtype: Profile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this JobDetailRootJsonObject.


        :param profile: The profile of this JobDetailRootJsonObject.
        :type profile: Profile
        """

        self._profile = profile

    @property
    def status(self):
        """Gets the status of this JobDetailRootJsonObject.


        :return: The status of this JobDetailRootJsonObject.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobDetailRootJsonObject.


        :param status: The status of this JobDetailRootJsonObject.
        :type status: Status
        """

        self._status = status

    @property
    def user(self):
        """Gets the user of this JobDetailRootJsonObject.

        The user name of the job creator.

        :return: The user of this JobDetailRootJsonObject.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this JobDetailRootJsonObject.

        The user name of the job creator.

        :param user: The user of this JobDetailRootJsonObject.
        :type user: str
        """

        self._user = user

    @property
    def userargs(self):
        """Gets the userargs of this JobDetailRootJsonObject.


        :return: The userargs of this JobDetailRootJsonObject.
        :rtype: Userargs
        """
        return self._userargs

    @userargs.setter
    def userargs(self, userargs):
        """Sets the userargs of this JobDetailRootJsonObject.


        :param userargs: The userargs of this JobDetailRootJsonObject.
        :type userargs: Userargs
        """

        self._userargs = userargs
