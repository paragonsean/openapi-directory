/*
 * HDInsightJobManagementClient
 * The HDInsight Job Client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AppState;
import org.openapitools.client.model.JobDetailRootJsonObject;
import org.openapitools.client.model.JobListJsonObject;
import org.openapitools.client.model.JobOperationsErrorResponse;
import org.openapitools.client.model.JobSubmissionJsonResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JobApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JobApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JobApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for jobGet
     * @param userName The user name used for running job. (required)
     * @param jobId The id of the job. (required)
     * @param fields If fields set to &#39;*&#39;, the request will return full details of the job. Currently the value can only be &#39;*&#39;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobGetCall(String userName, String jobId, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templeton/v1/jobs/{jobId}"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user.name", userName));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobGetValidateBeforeCall(String userName, String jobId, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling jobGet(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobGet(Async)");
        }

        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling jobGet(Async)");
        }

        return jobGetCall(userName, jobId, fields, _callback);

    }

    /**
     * 
     * Gets job details from the specified HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param jobId The id of the job. (required)
     * @param fields If fields set to &#39;*&#39;, the request will return full details of the job. Currently the value can only be &#39;*&#39;. (required)
     * @return JobDetailRootJsonObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public JobDetailRootJsonObject jobGet(String userName, String jobId, String fields) throws ApiException {
        ApiResponse<JobDetailRootJsonObject> localVarResp = jobGetWithHttpInfo(userName, jobId, fields);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets job details from the specified HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param jobId The id of the job. (required)
     * @param fields If fields set to &#39;*&#39;, the request will return full details of the job. Currently the value can only be &#39;*&#39;. (required)
     * @return ApiResponse&lt;JobDetailRootJsonObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobDetailRootJsonObject> jobGetWithHttpInfo(String userName, String jobId, String fields) throws ApiException {
        okhttp3.Call localVarCall = jobGetValidateBeforeCall(userName, jobId, fields, null);
        Type localVarReturnType = new TypeToken<JobDetailRootJsonObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets job details from the specified HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param jobId The id of the job. (required)
     * @param fields If fields set to &#39;*&#39;, the request will return full details of the job. Currently the value can only be &#39;*&#39;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobGetAsync(String userName, String jobId, String fields, final ApiCallback<JobDetailRootJsonObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobGetValidateBeforeCall(userName, jobId, fields, _callback);
        Type localVarReturnType = new TypeToken<JobDetailRootJsonObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobGetAppState
     * @param appId The id of the job. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobGetAppStateCall(String appId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ws/v1/cluster/apps/{appId}/state"
            .replace("{" + "appId" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobGetAppStateValidateBeforeCall(String appId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling jobGetAppState(Async)");
        }

        return jobGetAppStateCall(appId, _callback);

    }

    /**
     * 
     * Gets application state from the specified HDInsight cluster.
     * @param appId The id of the job. (required)
     * @return AppState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AppState jobGetAppState(String appId) throws ApiException {
        ApiResponse<AppState> localVarResp = jobGetAppStateWithHttpInfo(appId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets application state from the specified HDInsight cluster.
     * @param appId The id of the job. (required)
     * @return ApiResponse&lt;AppState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppState> jobGetAppStateWithHttpInfo(String appId) throws ApiException {
        okhttp3.Call localVarCall = jobGetAppStateValidateBeforeCall(appId, null);
        Type localVarReturnType = new TypeToken<AppState>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets application state from the specified HDInsight cluster.
     * @param appId The id of the job. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobGetAppStateAsync(String appId, final ApiCallback<AppState> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobGetAppStateValidateBeforeCall(appId, _callback);
        Type localVarReturnType = new TypeToken<AppState>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobKill
     * @param userName The user name used for running job. (required)
     * @param jobId The id of the job. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobKillCall(String userName, String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templeton/v1/jobs/{jobId}"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user.name", userName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobKillValidateBeforeCall(String userName, String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling jobKill(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobKill(Async)");
        }

        return jobKillCall(userName, jobId, _callback);

    }

    /**
     * 
     * Initiates cancel on given running job in the specified HDInsight.
     * @param userName The user name used for running job. (required)
     * @param jobId The id of the job. (required)
     * @return JobDetailRootJsonObject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public JobDetailRootJsonObject jobKill(String userName, String jobId) throws ApiException {
        ApiResponse<JobDetailRootJsonObject> localVarResp = jobKillWithHttpInfo(userName, jobId);
        return localVarResp.getData();
    }

    /**
     * 
     * Initiates cancel on given running job in the specified HDInsight.
     * @param userName The user name used for running job. (required)
     * @param jobId The id of the job. (required)
     * @return ApiResponse&lt;JobDetailRootJsonObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobDetailRootJsonObject> jobKillWithHttpInfo(String userName, String jobId) throws ApiException {
        okhttp3.Call localVarCall = jobKillValidateBeforeCall(userName, jobId, null);
        Type localVarReturnType = new TypeToken<JobDetailRootJsonObject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Initiates cancel on given running job in the specified HDInsight.
     * @param userName The user name used for running job. (required)
     * @param jobId The id of the job. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobKillAsync(String userName, String jobId, final ApiCallback<JobDetailRootJsonObject> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobKillValidateBeforeCall(userName, jobId, _callback);
        Type localVarReturnType = new TypeToken<JobDetailRootJsonObject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobList
     * @param userName The user name used for running job. (required)
     * @param showall If showall is set to &#39;true&#39;, the request will return all jobs the user has permission to view, not only the jobs belonging to the user. (required)
     * @param fields If fields set to &#39;*&#39;, the request will return full details of the job. Currently the value can only be &#39;*&#39;. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobListCall(String userName, String showall, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templeton/v1/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user.name", userName));
        }

        if (showall != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showall", showall));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobListValidateBeforeCall(String userName, String showall, String fields, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling jobList(Async)");
        }

        // verify the required parameter 'showall' is set
        if (showall == null) {
            throw new ApiException("Missing the required parameter 'showall' when calling jobList(Async)");
        }

        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling jobList(Async)");
        }

        return jobListCall(userName, showall, fields, _callback);

    }

    /**
     * 
     * Gets the list of jobs from the specified HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param showall If showall is set to &#39;true&#39;, the request will return all jobs the user has permission to view, not only the jobs belonging to the user. (required)
     * @param fields If fields set to &#39;*&#39;, the request will return full details of the job. Currently the value can only be &#39;*&#39;. (required)
     * @return List&lt;JobListJsonObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public List<JobListJsonObject> jobList(String userName, String showall, String fields) throws ApiException {
        ApiResponse<List<JobListJsonObject>> localVarResp = jobListWithHttpInfo(userName, showall, fields);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the list of jobs from the specified HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param showall If showall is set to &#39;true&#39;, the request will return all jobs the user has permission to view, not only the jobs belonging to the user. (required)
     * @param fields If fields set to &#39;*&#39;, the request will return full details of the job. Currently the value can only be &#39;*&#39;. (required)
     * @return ApiResponse&lt;List&lt;JobListJsonObject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JobListJsonObject>> jobListWithHttpInfo(String userName, String showall, String fields) throws ApiException {
        okhttp3.Call localVarCall = jobListValidateBeforeCall(userName, showall, fields, null);
        Type localVarReturnType = new TypeToken<List<JobListJsonObject>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the list of jobs from the specified HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param showall If showall is set to &#39;true&#39;, the request will return all jobs the user has permission to view, not only the jobs belonging to the user. (required)
     * @param fields If fields set to &#39;*&#39;, the request will return full details of the job. Currently the value can only be &#39;*&#39;. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobListAsync(String userName, String showall, String fields, final ApiCallback<List<JobListJsonObject>> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobListValidateBeforeCall(userName, showall, fields, _callback);
        Type localVarReturnType = new TypeToken<List<JobListJsonObject>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobListAfterJobId
     * @param userName The user name used for running job. (required)
     * @param showall If showall is set to &#39;true&#39;, the request will return all jobs the user has permission to view, not only the jobs belonging to the user. (required)
     * @param fields If fields set to &#39;*&#39;, the request will return full details of the job. Currently the value can only be &#39;*&#39;. (required)
     * @param jobid JobId from where to list jobs. (optional)
     * @param numrecords Number of jobs to fetch. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobListAfterJobIdCall(String userName, String showall, String fields, String jobid, Integer numrecords, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/templeton/v1/jobs?op=LISTAFTERID";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user.name", userName));
        }

        if (jobid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobid", jobid));
        }

        if (numrecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numrecords", numrecords));
        }

        if (showall != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showall", showall));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobListAfterJobIdValidateBeforeCall(String userName, String showall, String fields, String jobid, Integer numrecords, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling jobListAfterJobId(Async)");
        }

        // verify the required parameter 'showall' is set
        if (showall == null) {
            throw new ApiException("Missing the required parameter 'showall' when calling jobListAfterJobId(Async)");
        }

        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling jobListAfterJobId(Async)");
        }

        return jobListAfterJobIdCall(userName, showall, fields, jobid, numrecords, _callback);

    }

    /**
     * 
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param showall If showall is set to &#39;true&#39;, the request will return all jobs the user has permission to view, not only the jobs belonging to the user. (required)
     * @param fields If fields set to &#39;*&#39;, the request will return full details of the job. Currently the value can only be &#39;*&#39;. (required)
     * @param jobid JobId from where to list jobs. (optional)
     * @param numrecords Number of jobs to fetch. (optional)
     * @return List&lt;JobListJsonObject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public List<JobListJsonObject> jobListAfterJobId(String userName, String showall, String fields, String jobid, Integer numrecords) throws ApiException {
        ApiResponse<List<JobListJsonObject>> localVarResp = jobListAfterJobIdWithHttpInfo(userName, showall, fields, jobid, numrecords);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param showall If showall is set to &#39;true&#39;, the request will return all jobs the user has permission to view, not only the jobs belonging to the user. (required)
     * @param fields If fields set to &#39;*&#39;, the request will return full details of the job. Currently the value can only be &#39;*&#39;. (required)
     * @param jobid JobId from where to list jobs. (optional)
     * @param numrecords Number of jobs to fetch. (optional)
     * @return ApiResponse&lt;List&lt;JobListJsonObject&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<JobListJsonObject>> jobListAfterJobIdWithHttpInfo(String userName, String showall, String fields, String jobid, Integer numrecords) throws ApiException {
        okhttp3.Call localVarCall = jobListAfterJobIdValidateBeforeCall(userName, showall, fields, jobid, numrecords, null);
        Type localVarReturnType = new TypeToken<List<JobListJsonObject>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets numrecords Of Jobs after jobid from the specified HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param showall If showall is set to &#39;true&#39;, the request will return all jobs the user has permission to view, not only the jobs belonging to the user. (required)
     * @param fields If fields set to &#39;*&#39;, the request will return full details of the job. Currently the value can only be &#39;*&#39;. (required)
     * @param jobid JobId from where to list jobs. (optional)
     * @param numrecords Number of jobs to fetch. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobListAfterJobIdAsync(String userName, String showall, String fields, String jobid, Integer numrecords, final ApiCallback<List<JobListJsonObject>> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobListAfterJobIdValidateBeforeCall(userName, showall, fields, jobid, numrecords, _callback);
        Type localVarReturnType = new TypeToken<List<JobListJsonObject>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobSubmitHiveJob
     * @param userName The user name used for running job. (required)
     * @param content The content of the Hive job request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobSubmitHiveJobCall(String userName, Object content, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = content;

        // create path and map variables
        String localVarPath = "/templeton/v1/hive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user.name", userName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/text"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobSubmitHiveJobValidateBeforeCall(String userName, Object content, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling jobSubmitHiveJob(Async)");
        }

        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling jobSubmitHiveJob(Async)");
        }

        return jobSubmitHiveJobCall(userName, content, _callback);

    }

    /**
     * 
     * Submits a Hive job to an HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param content The content of the Hive job request. (required)
     * @return JobSubmissionJsonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public JobSubmissionJsonResponse jobSubmitHiveJob(String userName, Object content) throws ApiException {
        ApiResponse<JobSubmissionJsonResponse> localVarResp = jobSubmitHiveJobWithHttpInfo(userName, content);
        return localVarResp.getData();
    }

    /**
     * 
     * Submits a Hive job to an HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param content The content of the Hive job request. (required)
     * @return ApiResponse&lt;JobSubmissionJsonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobSubmissionJsonResponse> jobSubmitHiveJobWithHttpInfo(String userName, Object content) throws ApiException {
        okhttp3.Call localVarCall = jobSubmitHiveJobValidateBeforeCall(userName, content, null);
        Type localVarReturnType = new TypeToken<JobSubmissionJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Submits a Hive job to an HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param content The content of the Hive job request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobSubmitHiveJobAsync(String userName, Object content, final ApiCallback<JobSubmissionJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobSubmitHiveJobValidateBeforeCall(userName, content, _callback);
        Type localVarReturnType = new TypeToken<JobSubmissionJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobSubmitMapReduceJob
     * @param userName The user name used for running job. (required)
     * @param content The content of the MapReduce job request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobSubmitMapReduceJobCall(String userName, Object content, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = content;

        // create path and map variables
        String localVarPath = "/templeton/v1/mapreduce/jar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user.name", userName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobSubmitMapReduceJobValidateBeforeCall(String userName, Object content, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling jobSubmitMapReduceJob(Async)");
        }

        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling jobSubmitMapReduceJob(Async)");
        }

        return jobSubmitMapReduceJobCall(userName, content, _callback);

    }

    /**
     * 
     * Submits a MapReduce job to an HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param content The content of the MapReduce job request. (required)
     * @return JobSubmissionJsonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public JobSubmissionJsonResponse jobSubmitMapReduceJob(String userName, Object content) throws ApiException {
        ApiResponse<JobSubmissionJsonResponse> localVarResp = jobSubmitMapReduceJobWithHttpInfo(userName, content);
        return localVarResp.getData();
    }

    /**
     * 
     * Submits a MapReduce job to an HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param content The content of the MapReduce job request. (required)
     * @return ApiResponse&lt;JobSubmissionJsonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobSubmissionJsonResponse> jobSubmitMapReduceJobWithHttpInfo(String userName, Object content) throws ApiException {
        okhttp3.Call localVarCall = jobSubmitMapReduceJobValidateBeforeCall(userName, content, null);
        Type localVarReturnType = new TypeToken<JobSubmissionJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Submits a MapReduce job to an HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param content The content of the MapReduce job request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobSubmitMapReduceJobAsync(String userName, Object content, final ApiCallback<JobSubmissionJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobSubmitMapReduceJobValidateBeforeCall(userName, content, _callback);
        Type localVarReturnType = new TypeToken<JobSubmissionJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobSubmitMapReduceStreamingJob
     * @param userName The user name used for running job. (required)
     * @param content The content of the MapReduce job request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobSubmitMapReduceStreamingJobCall(String userName, Object content, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = content;

        // create path and map variables
        String localVarPath = "/templeton/v1/mapreduce/streaming";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user.name", userName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobSubmitMapReduceStreamingJobValidateBeforeCall(String userName, Object content, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling jobSubmitMapReduceStreamingJob(Async)");
        }

        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling jobSubmitMapReduceStreamingJob(Async)");
        }

        return jobSubmitMapReduceStreamingJobCall(userName, content, _callback);

    }

    /**
     * 
     * Submits a MapReduce streaming job to an HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param content The content of the MapReduce job request. (required)
     * @return JobSubmissionJsonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public JobSubmissionJsonResponse jobSubmitMapReduceStreamingJob(String userName, Object content) throws ApiException {
        ApiResponse<JobSubmissionJsonResponse> localVarResp = jobSubmitMapReduceStreamingJobWithHttpInfo(userName, content);
        return localVarResp.getData();
    }

    /**
     * 
     * Submits a MapReduce streaming job to an HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param content The content of the MapReduce job request. (required)
     * @return ApiResponse&lt;JobSubmissionJsonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobSubmissionJsonResponse> jobSubmitMapReduceStreamingJobWithHttpInfo(String userName, Object content) throws ApiException {
        okhttp3.Call localVarCall = jobSubmitMapReduceStreamingJobValidateBeforeCall(userName, content, null);
        Type localVarReturnType = new TypeToken<JobSubmissionJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Submits a MapReduce streaming job to an HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param content The content of the MapReduce job request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobSubmitMapReduceStreamingJobAsync(String userName, Object content, final ApiCallback<JobSubmissionJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobSubmitMapReduceStreamingJobValidateBeforeCall(userName, content, _callback);
        Type localVarReturnType = new TypeToken<JobSubmissionJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobSubmitPigJob
     * @param userName The user name used for running job. (required)
     * @param content The content of the Pig job request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobSubmitPigJobCall(String userName, Object content, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = content;

        // create path and map variables
        String localVarPath = "/templeton/v1/pig";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user.name", userName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobSubmitPigJobValidateBeforeCall(String userName, Object content, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling jobSubmitPigJob(Async)");
        }

        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling jobSubmitPigJob(Async)");
        }

        return jobSubmitPigJobCall(userName, content, _callback);

    }

    /**
     * 
     * Submits a Pig job to an HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param content The content of the Pig job request. (required)
     * @return JobSubmissionJsonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public JobSubmissionJsonResponse jobSubmitPigJob(String userName, Object content) throws ApiException {
        ApiResponse<JobSubmissionJsonResponse> localVarResp = jobSubmitPigJobWithHttpInfo(userName, content);
        return localVarResp.getData();
    }

    /**
     * 
     * Submits a Pig job to an HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param content The content of the Pig job request. (required)
     * @return ApiResponse&lt;JobSubmissionJsonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobSubmissionJsonResponse> jobSubmitPigJobWithHttpInfo(String userName, Object content) throws ApiException {
        okhttp3.Call localVarCall = jobSubmitPigJobValidateBeforeCall(userName, content, null);
        Type localVarReturnType = new TypeToken<JobSubmissionJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Submits a Pig job to an HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param content The content of the Pig job request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobSubmitPigJobAsync(String userName, Object content, final ApiCallback<JobSubmissionJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobSubmitPigJobValidateBeforeCall(userName, content, _callback);
        Type localVarReturnType = new TypeToken<JobSubmissionJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobSubmitSqoopJob
     * @param userName The user name used for running job. (required)
     * @param content The content of the Sqoop job request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobSubmitSqoopJobCall(String userName, Object content, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = content;

        // create path and map variables
        String localVarPath = "/templeton/v1/sqoop";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user.name", userName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobSubmitSqoopJobValidateBeforeCall(String userName, Object content, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userName' is set
        if (userName == null) {
            throw new ApiException("Missing the required parameter 'userName' when calling jobSubmitSqoopJob(Async)");
        }

        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling jobSubmitSqoopJob(Async)");
        }

        return jobSubmitSqoopJobCall(userName, content, _callback);

    }

    /**
     * 
     * Submits a Sqoop job to an HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param content The content of the Sqoop job request. (required)
     * @return JobSubmissionJsonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public JobSubmissionJsonResponse jobSubmitSqoopJob(String userName, Object content) throws ApiException {
        ApiResponse<JobSubmissionJsonResponse> localVarResp = jobSubmitSqoopJobWithHttpInfo(userName, content);
        return localVarResp.getData();
    }

    /**
     * 
     * Submits a Sqoop job to an HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param content The content of the Sqoop job request. (required)
     * @return ApiResponse&lt;JobSubmissionJsonResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobSubmissionJsonResponse> jobSubmitSqoopJobWithHttpInfo(String userName, Object content) throws ApiException {
        okhttp3.Call localVarCall = jobSubmitSqoopJobValidateBeforeCall(userName, content, null);
        Type localVarReturnType = new TypeToken<JobSubmissionJsonResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Submits a Sqoop job to an HDInsight cluster.
     * @param userName The user name used for running job. (required)
     * @param content The content of the Sqoop job request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK response definition. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobSubmitSqoopJobAsync(String userName, Object content, final ApiCallback<JobSubmissionJsonResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobSubmitSqoopJobValidateBeforeCall(userName, content, _callback);
        Type localVarReturnType = new TypeToken<JobSubmissionJsonResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
