/*
 * HDInsightJobManagementClient
 * The HDInsight Job Client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Gets or sets the object containing the user arguments.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:00:08.201046-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Userargs {
  public static final String SERIALIZED_NAME_ARG = "arg";
  @SerializedName(SERIALIZED_NAME_ARG)
  private List<String> arg = new ArrayList<>();

  public static final String SERIALIZED_NAME_CALLBACK = "callback";
  @SerializedName(SERIALIZED_NAME_CALLBACK)
  private Object callback;

  public static final String SERIALIZED_NAME_DEFINE = "define";
  @SerializedName(SERIALIZED_NAME_DEFINE)
  private List<String> define = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLELOG = "enablelog";
  @SerializedName(SERIALIZED_NAME_ENABLELOG)
  private String enablelog;

  public static final String SERIALIZED_NAME_EXECUTE = "execute";
  @SerializedName(SERIALIZED_NAME_EXECUTE)
  private String execute;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private Object _file;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private Object files;

  public static final String SERIALIZED_NAME_JAR = "jar";
  @SerializedName(SERIALIZED_NAME_JAR)
  private String jar;

  public static final String SERIALIZED_NAME_STATUSDIR = "statusdir";
  @SerializedName(SERIALIZED_NAME_STATUSDIR)
  private Object statusdir;

  public Userargs() {
  }

  public Userargs(
     List<String> arg, 
     List<String> define
  ) {
    this();
    this.arg = arg;
    this.define = define;
  }

  /**
   * The list of args defined by the user.
   * @return arg
   */
  @javax.annotation.Nullable
  public List<String> getArg() {
    return arg;
  }



  public Userargs callback(Object callback) {
    this.callback = callback;
    return this;
  }

  /**
   * The callback URL, if any.
   * @return callback
   */
  @javax.annotation.Nullable
  public Object getCallback() {
    return callback;
  }

  public void setCallback(Object callback) {
    this.callback = callback;
  }


  /**
   * The define properties defined by the user.
   * @return define
   */
  @javax.annotation.Nullable
  public List<String> getDefine() {
    return define;
  }



  public Userargs enablelog(String enablelog) {
    this.enablelog = enablelog;
    return this;
  }

  /**
   * Whether or not the user enabled logs.
   * @return enablelog
   */
  @javax.annotation.Nullable
  public String getEnablelog() {
    return enablelog;
  }

  public void setEnablelog(String enablelog) {
    this.enablelog = enablelog;
  }


  public Userargs execute(String execute) {
    this.execute = execute;
    return this;
  }

  /**
   * The query defined by the user.
   * @return execute
   */
  @javax.annotation.Nullable
  public String getExecute() {
    return execute;
  }

  public void setExecute(String execute) {
    this.execute = execute;
  }


  public Userargs _file(Object _file) {
    this._file = _file;
    return this;
  }

  /**
   * The query file provided by the user.
   * @return _file
   */
  @javax.annotation.Nullable
  public Object getFile() {
    return _file;
  }

  public void setFile(Object _file) {
    this._file = _file;
  }


  public Userargs files(Object files) {
    this.files = files;
    return this;
  }

  /**
   * The files defined by the user.
   * @return files
   */
  @javax.annotation.Nullable
  public Object getFiles() {
    return files;
  }

  public void setFiles(Object files) {
    this.files = files;
  }


  public Userargs jar(String jar) {
    this.jar = jar;
    return this;
  }

  /**
   * The JAR file provided by the user.
   * @return jar
   */
  @javax.annotation.Nullable
  public String getJar() {
    return jar;
  }

  public void setJar(String jar) {
    this.jar = jar;
  }


  public Userargs statusdir(Object statusdir) {
    this.statusdir = statusdir;
    return this;
  }

  /**
   * The status directory defined by the user.
   * @return statusdir
   */
  @javax.annotation.Nullable
  public Object getStatusdir() {
    return statusdir;
  }

  public void setStatusdir(Object statusdir) {
    this.statusdir = statusdir;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Userargs userargs = (Userargs) o;
    return Objects.equals(this.arg, userargs.arg) &&
        Objects.equals(this.callback, userargs.callback) &&
        Objects.equals(this.define, userargs.define) &&
        Objects.equals(this.enablelog, userargs.enablelog) &&
        Objects.equals(this.execute, userargs.execute) &&
        Objects.equals(this._file, userargs._file) &&
        Objects.equals(this.files, userargs.files) &&
        Objects.equals(this.jar, userargs.jar) &&
        Objects.equals(this.statusdir, userargs.statusdir);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arg, callback, define, enablelog, execute, _file, files, jar, statusdir);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Userargs {\n");
    sb.append("    arg: ").append(toIndentedString(arg)).append("\n");
    sb.append("    callback: ").append(toIndentedString(callback)).append("\n");
    sb.append("    define: ").append(toIndentedString(define)).append("\n");
    sb.append("    enablelog: ").append(toIndentedString(enablelog)).append("\n");
    sb.append("    execute: ").append(toIndentedString(execute)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    jar: ").append(toIndentedString(jar)).append("\n");
    sb.append("    statusdir: ").append(toIndentedString(statusdir)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arg");
    openapiFields.add("callback");
    openapiFields.add("define");
    openapiFields.add("enablelog");
    openapiFields.add("execute");
    openapiFields.add("file");
    openapiFields.add("files");
    openapiFields.add("jar");
    openapiFields.add("statusdir");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Userargs
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Userargs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Userargs is not found in the empty JSON string", Userargs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Userargs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Userargs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("arg") != null && !jsonObj.get("arg").isJsonNull() && !jsonObj.get("arg").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `arg` to be an array in the JSON string but got `%s`", jsonObj.get("arg").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("define") != null && !jsonObj.get("define").isJsonNull() && !jsonObj.get("define").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `define` to be an array in the JSON string but got `%s`", jsonObj.get("define").toString()));
      }
      if ((jsonObj.get("enablelog") != null && !jsonObj.get("enablelog").isJsonNull()) && !jsonObj.get("enablelog").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enablelog` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enablelog").toString()));
      }
      if ((jsonObj.get("execute") != null && !jsonObj.get("execute").isJsonNull()) && !jsonObj.get("execute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `execute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("execute").toString()));
      }
      if ((jsonObj.get("jar") != null && !jsonObj.get("jar").isJsonNull()) && !jsonObj.get("jar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jar").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Userargs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Userargs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Userargs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Userargs.class));

       return (TypeAdapter<T>) new TypeAdapter<Userargs>() {
           @Override
           public void write(JsonWriter out, Userargs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Userargs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Userargs given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Userargs
   * @throws IOException if the JSON string is invalid with respect to Userargs
   */
  public static Userargs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Userargs.class);
  }

  /**
   * Convert an instance of Userargs to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

