/*
 * HDInsightJobManagementClient
 * The HDInsight Job Client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.JobID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Gets or sets the object containing the job status information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:00:08.201046-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Status {
  public static final String SERIALIZED_NAME_CLEANUP_PROGRESS = "cleanupProgress";
  @SerializedName(SERIALIZED_NAME_CLEANUP_PROGRESS)
  private Double cleanupProgress;

  public static final String SERIALIZED_NAME_FAILURE_INFO = "failureInfo";
  @SerializedName(SERIALIZED_NAME_FAILURE_INFO)
  private String failureInfo;

  public static final String SERIALIZED_NAME_FINISH_TIME = "finishTime";
  @SerializedName(SERIALIZED_NAME_FINISH_TIME)
  private Long finishTime;

  public static final String SERIALIZED_NAME_HISTORY_FILE = "historyFile";
  @SerializedName(SERIALIZED_NAME_HISTORY_FILE)
  private String historyFile;

  public static final String SERIALIZED_NAME_JOB_A_C_LS = "jobACLs";
  @SerializedName(SERIALIZED_NAME_JOB_A_C_LS)
  private Object jobACLs;

  public static final String SERIALIZED_NAME_JOB_COMPLETE = "jobComplete";
  @SerializedName(SERIALIZED_NAME_JOB_COMPLETE)
  private Boolean jobComplete;

  public static final String SERIALIZED_NAME_JOB_FILE = "jobFile";
  @SerializedName(SERIALIZED_NAME_JOB_FILE)
  private String jobFile;

  public static final String SERIALIZED_NAME_JOB_I_D = "jobID";
  @SerializedName(SERIALIZED_NAME_JOB_I_D)
  private JobID jobID;

  public static final String SERIALIZED_NAME_JOB_ID = "jobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_JOB_NAME = "jobName";
  @SerializedName(SERIALIZED_NAME_JOB_NAME)
  private String jobName;

  public static final String SERIALIZED_NAME_JOB_PRIORITY = "jobPriority";
  @SerializedName(SERIALIZED_NAME_JOB_PRIORITY)
  private String jobPriority;

  public static final String SERIALIZED_NAME_MAP_PROGRESS = "mapProgress";
  @SerializedName(SERIALIZED_NAME_MAP_PROGRESS)
  private Double mapProgress;

  public static final String SERIALIZED_NAME_NEEDED_MEM = "neededMem";
  @SerializedName(SERIALIZED_NAME_NEEDED_MEM)
  private Long neededMem;

  public static final String SERIALIZED_NAME_NUM_RESERVED_SLOTS = "numReservedSlots";
  @SerializedName(SERIALIZED_NAME_NUM_RESERVED_SLOTS)
  private Integer numReservedSlots;

  public static final String SERIALIZED_NAME_NUM_USED_SLOTS = "numUsedSlots";
  @SerializedName(SERIALIZED_NAME_NUM_USED_SLOTS)
  private Integer numUsedSlots;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private String priority;

  public static final String SERIALIZED_NAME_QUEUE = "queue";
  @SerializedName(SERIALIZED_NAME_QUEUE)
  private String queue;

  public static final String SERIALIZED_NAME_REDUCE_PROGRESS = "reduceProgress";
  @SerializedName(SERIALIZED_NAME_REDUCE_PROGRESS)
  private Double reduceProgress;

  public static final String SERIALIZED_NAME_RESERVED_MEM = "reservedMem";
  @SerializedName(SERIALIZED_NAME_RESERVED_MEM)
  private Long reservedMem;

  public static final String SERIALIZED_NAME_RETIRED = "retired";
  @SerializedName(SERIALIZED_NAME_RETIRED)
  private Boolean retired;

  public static final String SERIALIZED_NAME_RUN_STATE = "runState";
  @SerializedName(SERIALIZED_NAME_RUN_STATE)
  private Integer runState;

  public static final String SERIALIZED_NAME_SCHEDULING_INFO = "schedulingInfo";
  @SerializedName(SERIALIZED_NAME_SCHEDULING_INFO)
  private String schedulingInfo;

  public static final String SERIALIZED_NAME_SETUP_PROGRESS = "setupProgress";
  @SerializedName(SERIALIZED_NAME_SETUP_PROGRESS)
  private Double setupProgress;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private Long startTime;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TRACKING_URL = "trackingUrl";
  @SerializedName(SERIALIZED_NAME_TRACKING_URL)
  private String trackingUrl;

  public static final String SERIALIZED_NAME_UBER = "uber";
  @SerializedName(SERIALIZED_NAME_UBER)
  private Boolean uber;

  public static final String SERIALIZED_NAME_USED_MEM = "usedMem";
  @SerializedName(SERIALIZED_NAME_USED_MEM)
  private Long usedMem;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public Status() {
  }

  public Status cleanupProgress(Double cleanupProgress) {
    this.cleanupProgress = cleanupProgress;
    return this;
  }

  /**
   * The progress made on the cleanup.
   * @return cleanupProgress
   */
  @javax.annotation.Nullable
  public Double getCleanupProgress() {
    return cleanupProgress;
  }

  public void setCleanupProgress(Double cleanupProgress) {
    this.cleanupProgress = cleanupProgress;
  }


  public Status failureInfo(String failureInfo) {
    this.failureInfo = failureInfo;
    return this;
  }

  /**
   * The information about any failures that have occurred.
   * @return failureInfo
   */
  @javax.annotation.Nullable
  public String getFailureInfo() {
    return failureInfo;
  }

  public void setFailureInfo(String failureInfo) {
    this.failureInfo = failureInfo;
  }


  public Status finishTime(Long finishTime) {
    this.finishTime = finishTime;
    return this;
  }

  /**
   * The time at which the job completed. It is an integer in milliseconds, as a Unix timestamp relative to 1/1/1970 00:00:00.
   * @return finishTime
   */
  @javax.annotation.Nullable
  public Long getFinishTime() {
    return finishTime;
  }

  public void setFinishTime(Long finishTime) {
    this.finishTime = finishTime;
  }


  public Status historyFile(String historyFile) {
    this.historyFile = historyFile;
    return this;
  }

  /**
   * The history file of the job.
   * @return historyFile
   */
  @javax.annotation.Nullable
  public String getHistoryFile() {
    return historyFile;
  }

  public void setHistoryFile(String historyFile) {
    this.historyFile = historyFile;
  }


  public Status jobACLs(Object jobACLs) {
    this.jobACLs = jobACLs;
    return this;
  }

  /**
   * The object containing the job ACLs.
   * @return jobACLs
   */
  @javax.annotation.Nullable
  public Object getJobACLs() {
    return jobACLs;
  }

  public void setJobACLs(Object jobACLs) {
    this.jobACLs = jobACLs;
  }


  public Status jobComplete(Boolean jobComplete) {
    this.jobComplete = jobComplete;
    return this;
  }

  /**
   * Whether or not the job has completed.
   * @return jobComplete
   */
  @javax.annotation.Nullable
  public Boolean getJobComplete() {
    return jobComplete;
  }

  public void setJobComplete(Boolean jobComplete) {
    this.jobComplete = jobComplete;
  }


  public Status jobFile(String jobFile) {
    this.jobFile = jobFile;
    return this;
  }

  /**
   * The job configuration file.
   * @return jobFile
   */
  @javax.annotation.Nullable
  public String getJobFile() {
    return jobFile;
  }

  public void setJobFile(String jobFile) {
    this.jobFile = jobFile;
  }


  public Status jobID(JobID jobID) {
    this.jobID = jobID;
    return this;
  }

  /**
   * Get jobID
   * @return jobID
   */
  @javax.annotation.Nullable
  public JobID getJobID() {
    return jobID;
  }

  public void setJobID(JobID jobID) {
    this.jobID = jobID;
  }


  public Status jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * The full ID of the job.
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public Status jobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  /**
   * The user-specified job name.
   * @return jobName
   */
  @javax.annotation.Nullable
  public String getJobName() {
    return jobName;
  }

  public void setJobName(String jobName) {
    this.jobName = jobName;
  }


  public Status jobPriority(String jobPriority) {
    this.jobPriority = jobPriority;
    return this;
  }

  /**
   * The priority of the job.
   * @return jobPriority
   */
  @javax.annotation.Nullable
  public String getJobPriority() {
    return jobPriority;
  }

  public void setJobPriority(String jobPriority) {
    this.jobPriority = jobPriority;
  }


  public Status mapProgress(Double mapProgress) {
    this.mapProgress = mapProgress;
    return this;
  }

  /**
   * The progress made on the maps.
   * @return mapProgress
   */
  @javax.annotation.Nullable
  public Double getMapProgress() {
    return mapProgress;
  }

  public void setMapProgress(Double mapProgress) {
    this.mapProgress = mapProgress;
  }


  public Status neededMem(Long neededMem) {
    this.neededMem = neededMem;
    return this;
  }

  /**
   * The amount of memory needed for the job.
   * @return neededMem
   */
  @javax.annotation.Nullable
  public Long getNeededMem() {
    return neededMem;
  }

  public void setNeededMem(Long neededMem) {
    this.neededMem = neededMem;
  }


  public Status numReservedSlots(Integer numReservedSlots) {
    this.numReservedSlots = numReservedSlots;
    return this;
  }

  /**
   * The number of slots reserved.
   * @return numReservedSlots
   */
  @javax.annotation.Nullable
  public Integer getNumReservedSlots() {
    return numReservedSlots;
  }

  public void setNumReservedSlots(Integer numReservedSlots) {
    this.numReservedSlots = numReservedSlots;
  }


  public Status numUsedSlots(Integer numUsedSlots) {
    this.numUsedSlots = numUsedSlots;
    return this;
  }

  /**
   * The number of slots used for the job.
   * @return numUsedSlots
   */
  @javax.annotation.Nullable
  public Integer getNumUsedSlots() {
    return numUsedSlots;
  }

  public void setNumUsedSlots(Integer numUsedSlots) {
    this.numUsedSlots = numUsedSlots;
  }


  public Status priority(String priority) {
    this.priority = priority;
    return this;
  }

  /**
   * The priority of the job.
   * @return priority
   */
  @javax.annotation.Nullable
  public String getPriority() {
    return priority;
  }

  public void setPriority(String priority) {
    this.priority = priority;
  }


  public Status queue(String queue) {
    this.queue = queue;
    return this;
  }

  /**
   * The job queue name.
   * @return queue
   */
  @javax.annotation.Nullable
  public String getQueue() {
    return queue;
  }

  public void setQueue(String queue) {
    this.queue = queue;
  }


  public Status reduceProgress(Double reduceProgress) {
    this.reduceProgress = reduceProgress;
    return this;
  }

  /**
   * The progress made on the reduces.
   * @return reduceProgress
   */
  @javax.annotation.Nullable
  public Double getReduceProgress() {
    return reduceProgress;
  }

  public void setReduceProgress(Double reduceProgress) {
    this.reduceProgress = reduceProgress;
  }


  public Status reservedMem(Long reservedMem) {
    this.reservedMem = reservedMem;
    return this;
  }

  /**
   * The amount of memory reserved for the job.
   * @return reservedMem
   */
  @javax.annotation.Nullable
  public Long getReservedMem() {
    return reservedMem;
  }

  public void setReservedMem(Long reservedMem) {
    this.reservedMem = reservedMem;
  }


  public Status retired(Boolean retired) {
    this.retired = retired;
    return this;
  }

  /**
   * Whether or not the job has been retired. 
   * @return retired
   */
  @javax.annotation.Nullable
  public Boolean getRetired() {
    return retired;
  }

  public void setRetired(Boolean retired) {
    this.retired = retired;
  }


  public Status runState(Integer runState) {
    this.runState = runState;
    return this;
  }

  /**
   * The current state of the job.
   * @return runState
   */
  @javax.annotation.Nullable
  public Integer getRunState() {
    return runState;
  }

  public void setRunState(Integer runState) {
    this.runState = runState;
  }


  public Status schedulingInfo(String schedulingInfo) {
    this.schedulingInfo = schedulingInfo;
    return this;
  }

  /**
   * The information about the scheduling of the job.
   * @return schedulingInfo
   */
  @javax.annotation.Nullable
  public String getSchedulingInfo() {
    return schedulingInfo;
  }

  public void setSchedulingInfo(String schedulingInfo) {
    this.schedulingInfo = schedulingInfo;
  }


  public Status setupProgress(Double setupProgress) {
    this.setupProgress = setupProgress;
    return this;
  }

  /**
   * The progress made on the setup.
   * @return setupProgress
   */
  @javax.annotation.Nullable
  public Double getSetupProgress() {
    return setupProgress;
  }

  public void setSetupProgress(Double setupProgress) {
    this.setupProgress = setupProgress;
  }


  public Status startTime(Long startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The time at which the job started. It is an integer in milliseconds, as a Unix timestamp relative to 1/1/1970 00:00:00.
   * @return startTime
   */
  @javax.annotation.Nullable
  public Long getStartTime() {
    return startTime;
  }

  public void setStartTime(Long startTime) {
    this.startTime = startTime;
  }


  public Status state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The state of the job.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Status trackingUrl(String trackingUrl) {
    this.trackingUrl = trackingUrl;
    return this;
  }

  /**
   * The link to the web-ui for details of the job.
   * @return trackingUrl
   */
  @javax.annotation.Nullable
  public String getTrackingUrl() {
    return trackingUrl;
  }

  public void setTrackingUrl(String trackingUrl) {
    this.trackingUrl = trackingUrl;
  }


  public Status uber(Boolean uber) {
    this.uber = uber;
    return this;
  }

  /**
   * Whether job running in uber mode.
   * @return uber
   */
  @javax.annotation.Nullable
  public Boolean getUber() {
    return uber;
  }

  public void setUber(Boolean uber) {
    this.uber = uber;
  }


  public Status usedMem(Long usedMem) {
    this.usedMem = usedMem;
    return this;
  }

  /**
   * The amount of memory used by the job.
   * @return usedMem
   */
  @javax.annotation.Nullable
  public Long getUsedMem() {
    return usedMem;
  }

  public void setUsedMem(Long usedMem) {
    this.usedMem = usedMem;
  }


  public Status username(String username) {
    this.username = username;
    return this;
  }

  /**
   * The userid of the person who submitted the job.
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Status status = (Status) o;
    return Objects.equals(this.cleanupProgress, status.cleanupProgress) &&
        Objects.equals(this.failureInfo, status.failureInfo) &&
        Objects.equals(this.finishTime, status.finishTime) &&
        Objects.equals(this.historyFile, status.historyFile) &&
        Objects.equals(this.jobACLs, status.jobACLs) &&
        Objects.equals(this.jobComplete, status.jobComplete) &&
        Objects.equals(this.jobFile, status.jobFile) &&
        Objects.equals(this.jobID, status.jobID) &&
        Objects.equals(this.jobId, status.jobId) &&
        Objects.equals(this.jobName, status.jobName) &&
        Objects.equals(this.jobPriority, status.jobPriority) &&
        Objects.equals(this.mapProgress, status.mapProgress) &&
        Objects.equals(this.neededMem, status.neededMem) &&
        Objects.equals(this.numReservedSlots, status.numReservedSlots) &&
        Objects.equals(this.numUsedSlots, status.numUsedSlots) &&
        Objects.equals(this.priority, status.priority) &&
        Objects.equals(this.queue, status.queue) &&
        Objects.equals(this.reduceProgress, status.reduceProgress) &&
        Objects.equals(this.reservedMem, status.reservedMem) &&
        Objects.equals(this.retired, status.retired) &&
        Objects.equals(this.runState, status.runState) &&
        Objects.equals(this.schedulingInfo, status.schedulingInfo) &&
        Objects.equals(this.setupProgress, status.setupProgress) &&
        Objects.equals(this.startTime, status.startTime) &&
        Objects.equals(this.state, status.state) &&
        Objects.equals(this.trackingUrl, status.trackingUrl) &&
        Objects.equals(this.uber, status.uber) &&
        Objects.equals(this.usedMem, status.usedMem) &&
        Objects.equals(this.username, status.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cleanupProgress, failureInfo, finishTime, historyFile, jobACLs, jobComplete, jobFile, jobID, jobId, jobName, jobPriority, mapProgress, neededMem, numReservedSlots, numUsedSlots, priority, queue, reduceProgress, reservedMem, retired, runState, schedulingInfo, setupProgress, startTime, state, trackingUrl, uber, usedMem, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Status {\n");
    sb.append("    cleanupProgress: ").append(toIndentedString(cleanupProgress)).append("\n");
    sb.append("    failureInfo: ").append(toIndentedString(failureInfo)).append("\n");
    sb.append("    finishTime: ").append(toIndentedString(finishTime)).append("\n");
    sb.append("    historyFile: ").append(toIndentedString(historyFile)).append("\n");
    sb.append("    jobACLs: ").append(toIndentedString(jobACLs)).append("\n");
    sb.append("    jobComplete: ").append(toIndentedString(jobComplete)).append("\n");
    sb.append("    jobFile: ").append(toIndentedString(jobFile)).append("\n");
    sb.append("    jobID: ").append(toIndentedString(jobID)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    jobName: ").append(toIndentedString(jobName)).append("\n");
    sb.append("    jobPriority: ").append(toIndentedString(jobPriority)).append("\n");
    sb.append("    mapProgress: ").append(toIndentedString(mapProgress)).append("\n");
    sb.append("    neededMem: ").append(toIndentedString(neededMem)).append("\n");
    sb.append("    numReservedSlots: ").append(toIndentedString(numReservedSlots)).append("\n");
    sb.append("    numUsedSlots: ").append(toIndentedString(numUsedSlots)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    queue: ").append(toIndentedString(queue)).append("\n");
    sb.append("    reduceProgress: ").append(toIndentedString(reduceProgress)).append("\n");
    sb.append("    reservedMem: ").append(toIndentedString(reservedMem)).append("\n");
    sb.append("    retired: ").append(toIndentedString(retired)).append("\n");
    sb.append("    runState: ").append(toIndentedString(runState)).append("\n");
    sb.append("    schedulingInfo: ").append(toIndentedString(schedulingInfo)).append("\n");
    sb.append("    setupProgress: ").append(toIndentedString(setupProgress)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    trackingUrl: ").append(toIndentedString(trackingUrl)).append("\n");
    sb.append("    uber: ").append(toIndentedString(uber)).append("\n");
    sb.append("    usedMem: ").append(toIndentedString(usedMem)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cleanupProgress");
    openapiFields.add("failureInfo");
    openapiFields.add("finishTime");
    openapiFields.add("historyFile");
    openapiFields.add("jobACLs");
    openapiFields.add("jobComplete");
    openapiFields.add("jobFile");
    openapiFields.add("jobID");
    openapiFields.add("jobId");
    openapiFields.add("jobName");
    openapiFields.add("jobPriority");
    openapiFields.add("mapProgress");
    openapiFields.add("neededMem");
    openapiFields.add("numReservedSlots");
    openapiFields.add("numUsedSlots");
    openapiFields.add("priority");
    openapiFields.add("queue");
    openapiFields.add("reduceProgress");
    openapiFields.add("reservedMem");
    openapiFields.add("retired");
    openapiFields.add("runState");
    openapiFields.add("schedulingInfo");
    openapiFields.add("setupProgress");
    openapiFields.add("startTime");
    openapiFields.add("state");
    openapiFields.add("trackingUrl");
    openapiFields.add("uber");
    openapiFields.add("usedMem");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Status
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Status.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Status is not found in the empty JSON string", Status.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Status.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Status` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("failureInfo") != null && !jsonObj.get("failureInfo").isJsonNull()) && !jsonObj.get("failureInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failureInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failureInfo").toString()));
      }
      if ((jsonObj.get("historyFile") != null && !jsonObj.get("historyFile").isJsonNull()) && !jsonObj.get("historyFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `historyFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("historyFile").toString()));
      }
      if ((jsonObj.get("jobFile") != null && !jsonObj.get("jobFile").isJsonNull()) && !jsonObj.get("jobFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobFile").toString()));
      }
      // validate the optional field `jobID`
      if (jsonObj.get("jobID") != null && !jsonObj.get("jobID").isJsonNull()) {
        JobID.validateJsonElement(jsonObj.get("jobID"));
      }
      if ((jsonObj.get("jobId") != null && !jsonObj.get("jobId").isJsonNull()) && !jsonObj.get("jobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobId").toString()));
      }
      if ((jsonObj.get("jobName") != null && !jsonObj.get("jobName").isJsonNull()) && !jsonObj.get("jobName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobName").toString()));
      }
      if ((jsonObj.get("jobPriority") != null && !jsonObj.get("jobPriority").isJsonNull()) && !jsonObj.get("jobPriority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobPriority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobPriority").toString()));
      }
      if ((jsonObj.get("priority") != null && !jsonObj.get("priority").isJsonNull()) && !jsonObj.get("priority").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priority` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priority").toString()));
      }
      if ((jsonObj.get("queue") != null && !jsonObj.get("queue").isJsonNull()) && !jsonObj.get("queue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `queue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("queue").toString()));
      }
      if ((jsonObj.get("schedulingInfo") != null && !jsonObj.get("schedulingInfo").isJsonNull()) && !jsonObj.get("schedulingInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedulingInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedulingInfo").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("trackingUrl") != null && !jsonObj.get("trackingUrl").isJsonNull()) && !jsonObj.get("trackingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingUrl").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Status.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Status' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Status> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Status.class));

       return (TypeAdapter<T>) new TypeAdapter<Status>() {
           @Override
           public void write(JsonWriter out, Status value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Status read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Status given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Status
   * @throws IOException if the JSON string is invalid with respect to Status
   */
  public static Status fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Status.class);
  }

  /**
   * Convert an instance of Status to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

