/**
 * AzureAnalysisServices
 * The Azure Analysis Services Web API provides a RESTful set of web services that enables users to create, retrieve, update, and delete Analysis Services servers
 *
 * The version of the OpenAPI document: 2016-05-16
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AnalysisServicesServer from '../model/AnalysisServicesServer';
import AnalysisServicesServerUpdateParameters from '../model/AnalysisServicesServerUpdateParameters';
import AnalysisServicesServers from '../model/AnalysisServicesServers';
import CheckServerNameAvailabilityParameters from '../model/CheckServerNameAvailabilityParameters';
import CheckServerNameAvailabilityResult from '../model/CheckServerNameAvailabilityResult';
import OperationStatus from '../model/OperationStatus';
import SkuEnumerationForExistingResourceResult from '../model/SkuEnumerationForExistingResourceResult';

/**
* Servers service.
* @module api/ServersApi
* @version 2016-05-16
*/
export default class ServersApi {

    /**
    * Constructs a new ServersApi. 
    * @alias module:api/ServersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the serversCheckNameAvailability operation.
     * @callback module:api/ServersApi~serversCheckNameAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckServerNameAvailabilityResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check the name availability in the target location.
     * @param {String} location The region name which the operation will lookup into.
     * @param {String} apiVersion The client API version.
     * @param {String} subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/CheckServerNameAvailabilityParameters} serverParameters Contains the information used to provision the Analysis Services server.
     * @param {module:api/ServersApi~serversCheckNameAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckServerNameAvailabilityResult}
     */
    serversCheckNameAvailability(location, apiVersion, subscriptionId, serverParameters, callback) {
      let postBody = serverParameters;
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling serversCheckNameAvailability");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serversCheckNameAvailability");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serversCheckNameAvailability");
      }
      // verify the required parameter 'serverParameters' is set
      if (serverParameters === undefined || serverParameters === null) {
        throw new Error("Missing the required parameter 'serverParameters' when calling serversCheckNameAvailability");
      }

      let pathParams = {
        'location': location,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckServerNameAvailabilityResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/checkNameAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serversCreate operation.
     * @callback module:api/ServersApi~serversCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalysisServicesServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provisions the specified Analysis Services server based on the configuration specified in the request.
     * @param {String} resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param {String} serverName The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63.
     * @param {String} apiVersion The client API version.
     * @param {String} subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/AnalysisServicesServer} serverParameters Contains the information used to provision the Analysis Services server.
     * @param {module:api/ServersApi~serversCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalysisServicesServer}
     */
    serversCreate(resourceGroupName, serverName, apiVersion, subscriptionId, serverParameters, callback) {
      let postBody = serverParameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serversCreate");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling serversCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serversCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serversCreate");
      }
      // verify the required parameter 'serverParameters' is set
      if (serverParameters === undefined || serverParameters === null) {
        throw new Error("Missing the required parameter 'serverParameters' when calling serversCreate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnalysisServicesServer;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serversDelete operation.
     * @callback module:api/ServersApi~serversDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified Analysis Services server.
     * @param {String} resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param {String} serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @param {String} apiVersion The client API version.
     * @param {String} subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ServersApi~serversDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    serversDelete(resourceGroupName, serverName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serversDelete");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling serversDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serversDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serversDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serversGetDetails operation.
     * @callback module:api/ServersApi~serversGetDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalysisServicesServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details about the specified Analysis Services server.
     * @param {String} resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param {String} serverName The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63.
     * @param {String} apiVersion The client API version.
     * @param {String} subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ServersApi~serversGetDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalysisServicesServer}
     */
    serversGetDetails(resourceGroupName, serverName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serversGetDetails");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling serversGetDetails");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serversGetDetails");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serversGetDetails");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalysisServicesServer;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serversList operation.
     * @callback module:api/ServersApi~serversListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalysisServicesServers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the Analysis Services servers for the given subscription.
     * @param {String} apiVersion The client API version.
     * @param {String} subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ServersApi~serversListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalysisServicesServers}
     */
    serversList(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serversList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serversList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalysisServicesServers;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/servers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serversListByResourceGroup operation.
     * @callback module:api/ServersApi~serversListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalysisServicesServers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the Analysis Services servers for the given resource group.
     * @param {String} resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param {String} apiVersion The client API version.
     * @param {String} subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ServersApi~serversListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalysisServicesServers}
     */
    serversListByResourceGroup(resourceGroupName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serversListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serversListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serversListByResourceGroup");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AnalysisServicesServers;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serversListOperationResults operation.
     * @callback module:api/ServersApi~serversListOperationResultsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the result of the specified operation.
     * @param {String} location The region name which the operation will lookup into.
     * @param {String} operationId The target operation Id.
     * @param {String} apiVersion The client API version.
     * @param {String} subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ServersApi~serversListOperationResultsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    serversListOperationResults(location, operationId, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling serversListOperationResults");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling serversListOperationResults");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serversListOperationResults");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serversListOperationResults");
      }

      let pathParams = {
        'location': location,
        'operationId': operationId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/operationresults/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serversListOperationStatuses operation.
     * @callback module:api/ServersApi~serversListOperationStatusesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the status of operation.
     * @param {String} location The region name which the operation will lookup into.
     * @param {String} operationId The target operation Id.
     * @param {String} apiVersion The client API version.
     * @param {String} subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ServersApi~serversListOperationStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationStatus}
     */
    serversListOperationStatuses(location, operationId, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling serversListOperationStatuses");
      }
      // verify the required parameter 'operationId' is set
      if (operationId === undefined || operationId === null) {
        throw new Error("Missing the required parameter 'operationId' when calling serversListOperationStatuses");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serversListOperationStatuses");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serversListOperationStatuses");
      }

      let pathParams = {
        'location': location,
        'operationId': operationId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationStatus;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/operationstatuses/{operationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serversListSkusForExisting operation.
     * @callback module:api/ServersApi~serversListSkusForExistingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SkuEnumerationForExistingResourceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists eligible SKUs for an Analysis Services resource.
     * @param {String} resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param {String} serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @param {String} apiVersion The client API version.
     * @param {String} subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ServersApi~serversListSkusForExistingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SkuEnumerationForExistingResourceResult}
     */
    serversListSkusForExisting(resourceGroupName, serverName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serversListSkusForExisting");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling serversListSkusForExisting");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serversListSkusForExisting");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serversListSkusForExisting");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SkuEnumerationForExistingResourceResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/skus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serversResume operation.
     * @callback module:api/ServersApi~serversResumeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resumes operation of the specified Analysis Services server instance.
     * @param {String} resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param {String} serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @param {String} apiVersion The client API version.
     * @param {String} subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ServersApi~serversResumeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    serversResume(resourceGroupName, serverName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serversResume");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling serversResume");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serversResume");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serversResume");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/resume', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serversSuspend operation.
     * @callback module:api/ServersApi~serversSuspendCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Suspends operation of the specified Analysis Services server instance.
     * @param {String} resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param {String} serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @param {String} apiVersion The client API version.
     * @param {String} subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/ServersApi~serversSuspendCallback} callback The callback function, accepting three arguments: error, data, response
     */
    serversSuspend(resourceGroupName, serverName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serversSuspend");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling serversSuspend");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serversSuspend");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serversSuspend");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/suspend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the serversUpdate operation.
     * @callback module:api/ServersApi~serversUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AnalysisServicesServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the current state of the specified Analysis Services server.
     * @param {String} resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90.
     * @param {String} serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63.
     * @param {String} apiVersion The client API version.
     * @param {String} subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/AnalysisServicesServerUpdateParameters} serverUpdateParameters Request object that contains the updated information for the server.
     * @param {module:api/ServersApi~serversUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AnalysisServicesServer}
     */
    serversUpdate(resourceGroupName, serverName, apiVersion, subscriptionId, serverUpdateParameters, callback) {
      let postBody = serverUpdateParameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling serversUpdate");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling serversUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling serversUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling serversUpdate");
      }
      // verify the required parameter 'serverUpdateParameters' is set
      if (serverUpdateParameters === undefined || serverUpdateParameters === null) {
        throw new Error("Missing the required parameter 'serverUpdateParameters' when calling serversUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AnalysisServicesServer;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
