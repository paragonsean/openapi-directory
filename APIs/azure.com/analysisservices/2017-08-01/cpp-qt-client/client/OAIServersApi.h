/**
 * AzureAnalysisServices
 * The Azure Analysis Services Web API provides a RESTful set of web services that enables users to create, retrieve, update, and delete Analysis Services servers
 *
 * The version of the OpenAPI document: 2017-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServersApi_H
#define OAI_OAIServersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnalysisServicesServer.h"
#include "OAIAnalysisServicesServerUpdateParameters.h"
#include "OAIAnalysisServicesServers.h"
#include "OAICheckServerNameAvailabilityParameters.h"
#include "OAICheckServerNameAvailabilityResult.h"
#include "OAIGatewayListStatusError.h"
#include "OAIGatewayListStatusLive.h"
#include "OAIOperationStatus.h"
#include "OAISkuEnumerationForExistingResourceResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServersApi : public QObject {
    Q_OBJECT

public:
    OAIServersApi(const int timeOut = 0);
    ~OAIServersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  location QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  server_parameters OAICheckServerNameAvailabilityParameters [required]
    */
    virtual void serversCheckNameAvailability(const QString &location, const QString &api_version, const QString &subscription_id, const OAICheckServerNameAvailabilityParameters &server_parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  server_parameters OAIAnalysisServicesServer [required]
    */
    virtual void serversCreate(const QString &resource_group_name, const QString &server_name, const QString &api_version, const QString &subscription_id, const OAIAnalysisServicesServer &server_parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void serversDelete(const QString &resource_group_name, const QString &server_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void serversDissociateGateway(const QString &resource_group_name, const QString &server_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void serversGetDetails(const QString &resource_group_name, const QString &server_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void serversList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void serversListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void serversListGatewayStatus(const QString &resource_group_name, const QString &server_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  location QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void serversListOperationResults(const QString &location, const QString &operation_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  location QString [required]
    * @param[in]  operation_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void serversListOperationStatuses(const QString &location, const QString &operation_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void serversListSkusForExisting(const QString &resource_group_name, const QString &server_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void serversResume(const QString &resource_group_name, const QString &server_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void serversSuspend(const QString &resource_group_name, const QString &server_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  server_update_parameters OAIAnalysisServicesServerUpdateParameters [required]
    */
    virtual void serversUpdate(const QString &resource_group_name, const QString &server_name, const QString &api_version, const QString &subscription_id, const OAIAnalysisServicesServerUpdateParameters &server_update_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void serversCheckNameAvailabilityCallback(OAIHttpRequestWorker *worker);
    void serversCreateCallback(OAIHttpRequestWorker *worker);
    void serversDeleteCallback(OAIHttpRequestWorker *worker);
    void serversDissociateGatewayCallback(OAIHttpRequestWorker *worker);
    void serversGetDetailsCallback(OAIHttpRequestWorker *worker);
    void serversListCallback(OAIHttpRequestWorker *worker);
    void serversListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void serversListGatewayStatusCallback(OAIHttpRequestWorker *worker);
    void serversListOperationResultsCallback(OAIHttpRequestWorker *worker);
    void serversListOperationStatusesCallback(OAIHttpRequestWorker *worker);
    void serversListSkusForExistingCallback(OAIHttpRequestWorker *worker);
    void serversResumeCallback(OAIHttpRequestWorker *worker);
    void serversSuspendCallback(OAIHttpRequestWorker *worker);
    void serversUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void serversCheckNameAvailabilitySignal(OAICheckServerNameAvailabilityResult summary);
    void serversCreateSignal(OAIAnalysisServicesServer summary);
    void serversDeleteSignal();
    void serversDissociateGatewaySignal();
    void serversGetDetailsSignal(OAIAnalysisServicesServer summary);
    void serversListSignal(OAIAnalysisServicesServers summary);
    void serversListByResourceGroupSignal(OAIAnalysisServicesServers summary);
    void serversListGatewayStatusSignal(OAIGatewayListStatusLive summary);
    void serversListOperationResultsSignal();
    void serversListOperationStatusesSignal(OAIOperationStatus summary);
    void serversListSkusForExistingSignal(OAISkuEnumerationForExistingResourceResult summary);
    void serversResumeSignal();
    void serversSuspendSignal();
    void serversUpdateSignal(OAIAnalysisServicesServer summary);


    void serversCheckNameAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAICheckServerNameAvailabilityResult summary);
    void serversCreateSignalFull(OAIHttpRequestWorker *worker, OAIAnalysisServicesServer summary);
    void serversDeleteSignalFull(OAIHttpRequestWorker *worker);
    void serversDissociateGatewaySignalFull(OAIHttpRequestWorker *worker);
    void serversGetDetailsSignalFull(OAIHttpRequestWorker *worker, OAIAnalysisServicesServer summary);
    void serversListSignalFull(OAIHttpRequestWorker *worker, OAIAnalysisServicesServers summary);
    void serversListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIAnalysisServicesServers summary);
    void serversListGatewayStatusSignalFull(OAIHttpRequestWorker *worker, OAIGatewayListStatusLive summary);
    void serversListOperationResultsSignalFull(OAIHttpRequestWorker *worker);
    void serversListOperationStatusesSignalFull(OAIHttpRequestWorker *worker, OAIOperationStatus summary);
    void serversListSkusForExistingSignalFull(OAIHttpRequestWorker *worker, OAISkuEnumerationForExistingResourceResult summary);
    void serversResumeSignalFull(OAIHttpRequestWorker *worker);
    void serversSuspendSignalFull(OAIHttpRequestWorker *worker);
    void serversUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAnalysisServicesServer summary);

    Q_DECL_DEPRECATED_X("Use serversCheckNameAvailabilitySignalError() instead")
    void serversCheckNameAvailabilitySignalE(OAICheckServerNameAvailabilityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serversCheckNameAvailabilitySignalError(OAICheckServerNameAvailabilityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversCreateSignalError() instead")
    void serversCreateSignalE(OAIAnalysisServicesServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serversCreateSignalError(OAIAnalysisServicesServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversDeleteSignalError() instead")
    void serversDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void serversDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversDissociateGatewaySignalError() instead")
    void serversDissociateGatewaySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void serversDissociateGatewaySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversGetDetailsSignalError() instead")
    void serversGetDetailsSignalE(OAIAnalysisServicesServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serversGetDetailsSignalError(OAIAnalysisServicesServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversListSignalError() instead")
    void serversListSignalE(OAIAnalysisServicesServers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serversListSignalError(OAIAnalysisServicesServers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversListByResourceGroupSignalError() instead")
    void serversListByResourceGroupSignalE(OAIAnalysisServicesServers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serversListByResourceGroupSignalError(OAIAnalysisServicesServers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversListGatewayStatusSignalError() instead")
    void serversListGatewayStatusSignalE(OAIGatewayListStatusLive summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serversListGatewayStatusSignalError(OAIGatewayListStatusLive summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversListOperationResultsSignalError() instead")
    void serversListOperationResultsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void serversListOperationResultsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversListOperationStatusesSignalError() instead")
    void serversListOperationStatusesSignalE(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serversListOperationStatusesSignalError(OAIOperationStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversListSkusForExistingSignalError() instead")
    void serversListSkusForExistingSignalE(OAISkuEnumerationForExistingResourceResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serversListSkusForExistingSignalError(OAISkuEnumerationForExistingResourceResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversResumeSignalError() instead")
    void serversResumeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void serversResumeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversSuspendSignalError() instead")
    void serversSuspendSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void serversSuspendSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversUpdateSignalError() instead")
    void serversUpdateSignalE(OAIAnalysisServicesServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serversUpdateSignalError(OAIAnalysisServicesServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use serversCheckNameAvailabilitySignalErrorFull() instead")
    void serversCheckNameAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversCheckNameAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversCreateSignalErrorFull() instead")
    void serversCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversDeleteSignalErrorFull() instead")
    void serversDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversDissociateGatewaySignalErrorFull() instead")
    void serversDissociateGatewaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversDissociateGatewaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversGetDetailsSignalErrorFull() instead")
    void serversGetDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversGetDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversListSignalErrorFull() instead")
    void serversListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversListByResourceGroupSignalErrorFull() instead")
    void serversListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversListGatewayStatusSignalErrorFull() instead")
    void serversListGatewayStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversListGatewayStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversListOperationResultsSignalErrorFull() instead")
    void serversListOperationResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversListOperationResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversListOperationStatusesSignalErrorFull() instead")
    void serversListOperationStatusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversListOperationStatusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversListSkusForExistingSignalErrorFull() instead")
    void serversListSkusForExistingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversListSkusForExistingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversResumeSignalErrorFull() instead")
    void serversResumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversResumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversSuspendSignalErrorFull() instead")
    void serversSuspendSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversSuspendSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serversUpdateSignalErrorFull() instead")
    void serversUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serversUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
