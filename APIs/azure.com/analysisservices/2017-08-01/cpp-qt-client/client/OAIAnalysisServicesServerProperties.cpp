/**
 * AzureAnalysisServices
 * The Azure Analysis Services Web API provides a RESTful set of web services that enables users to create, retrieve, update, and delete Analysis Services servers
 *
 * The version of the OpenAPI document: 2017-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnalysisServicesServerProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnalysisServicesServerProperties::OAIAnalysisServicesServerProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnalysisServicesServerProperties::OAIAnalysisServicesServerProperties() {
    this->initializeModel();
}

OAIAnalysisServicesServerProperties::~OAIAnalysisServicesServerProperties() {}

void OAIAnalysisServicesServerProperties::initializeModel() {

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_server_full_name_isSet = false;
    m_server_full_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_as_administrators_isSet = false;
    m_as_administrators_isValid = false;

    m_backup_blob_container_uri_isSet = false;
    m_backup_blob_container_uri_isValid = false;

    m_gateway_details_isSet = false;
    m_gateway_details_isValid = false;

    m_ip_v4_firewall_settings_isSet = false;
    m_ip_v4_firewall_settings_isValid = false;

    m_querypool_connection_mode_isSet = false;
    m_querypool_connection_mode_isValid = false;
}

void OAIAnalysisServicesServerProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnalysisServicesServerProperties::fromJsonObject(QJsonObject json) {

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_server_full_name_isValid = ::OpenAPI::fromJsonValue(m_server_full_name, json[QString("serverFullName")]);
    m_server_full_name_isSet = !json[QString("serverFullName")].isNull() && m_server_full_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_as_administrators_isValid = ::OpenAPI::fromJsonValue(m_as_administrators, json[QString("asAdministrators")]);
    m_as_administrators_isSet = !json[QString("asAdministrators")].isNull() && m_as_administrators_isValid;

    m_backup_blob_container_uri_isValid = ::OpenAPI::fromJsonValue(m_backup_blob_container_uri, json[QString("backupBlobContainerUri")]);
    m_backup_blob_container_uri_isSet = !json[QString("backupBlobContainerUri")].isNull() && m_backup_blob_container_uri_isValid;

    m_gateway_details_isValid = ::OpenAPI::fromJsonValue(m_gateway_details, json[QString("gatewayDetails")]);
    m_gateway_details_isSet = !json[QString("gatewayDetails")].isNull() && m_gateway_details_isValid;

    m_ip_v4_firewall_settings_isValid = ::OpenAPI::fromJsonValue(m_ip_v4_firewall_settings, json[QString("ipV4FirewallSettings")]);
    m_ip_v4_firewall_settings_isSet = !json[QString("ipV4FirewallSettings")].isNull() && m_ip_v4_firewall_settings_isValid;

    m_querypool_connection_mode_isValid = ::OpenAPI::fromJsonValue(m_querypool_connection_mode, json[QString("querypoolConnectionMode")]);
    m_querypool_connection_mode_isSet = !json[QString("querypoolConnectionMode")].isNull() && m_querypool_connection_mode_isValid;
}

QString OAIAnalysisServicesServerProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnalysisServicesServerProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_server_full_name_isSet) {
        obj.insert(QString("serverFullName"), ::OpenAPI::toJsonValue(m_server_full_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_as_administrators.isSet()) {
        obj.insert(QString("asAdministrators"), ::OpenAPI::toJsonValue(m_as_administrators));
    }
    if (m_backup_blob_container_uri_isSet) {
        obj.insert(QString("backupBlobContainerUri"), ::OpenAPI::toJsonValue(m_backup_blob_container_uri));
    }
    if (m_gateway_details.isSet()) {
        obj.insert(QString("gatewayDetails"), ::OpenAPI::toJsonValue(m_gateway_details));
    }
    if (m_ip_v4_firewall_settings.isSet()) {
        obj.insert(QString("ipV4FirewallSettings"), ::OpenAPI::toJsonValue(m_ip_v4_firewall_settings));
    }
    if (m_querypool_connection_mode_isSet) {
        obj.insert(QString("querypoolConnectionMode"), ::OpenAPI::toJsonValue(m_querypool_connection_mode));
    }
    return obj;
}

QString OAIAnalysisServicesServerProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIAnalysisServicesServerProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIAnalysisServicesServerProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIAnalysisServicesServerProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIAnalysisServicesServerProperties::getServerFullName() const {
    return m_server_full_name;
}
void OAIAnalysisServicesServerProperties::setServerFullName(const QString &server_full_name) {
    m_server_full_name = server_full_name;
    m_server_full_name_isSet = true;
}

bool OAIAnalysisServicesServerProperties::is_server_full_name_Set() const{
    return m_server_full_name_isSet;
}

bool OAIAnalysisServicesServerProperties::is_server_full_name_Valid() const{
    return m_server_full_name_isValid;
}

QString OAIAnalysisServicesServerProperties::getState() const {
    return m_state;
}
void OAIAnalysisServicesServerProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAnalysisServicesServerProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAnalysisServicesServerProperties::is_state_Valid() const{
    return m_state_isValid;
}

OAIServerAdministrators OAIAnalysisServicesServerProperties::getAsAdministrators() const {
    return m_as_administrators;
}
void OAIAnalysisServicesServerProperties::setAsAdministrators(const OAIServerAdministrators &as_administrators) {
    m_as_administrators = as_administrators;
    m_as_administrators_isSet = true;
}

bool OAIAnalysisServicesServerProperties::is_as_administrators_Set() const{
    return m_as_administrators_isSet;
}

bool OAIAnalysisServicesServerProperties::is_as_administrators_Valid() const{
    return m_as_administrators_isValid;
}

QString OAIAnalysisServicesServerProperties::getBackupBlobContainerUri() const {
    return m_backup_blob_container_uri;
}
void OAIAnalysisServicesServerProperties::setBackupBlobContainerUri(const QString &backup_blob_container_uri) {
    m_backup_blob_container_uri = backup_blob_container_uri;
    m_backup_blob_container_uri_isSet = true;
}

bool OAIAnalysisServicesServerProperties::is_backup_blob_container_uri_Set() const{
    return m_backup_blob_container_uri_isSet;
}

bool OAIAnalysisServicesServerProperties::is_backup_blob_container_uri_Valid() const{
    return m_backup_blob_container_uri_isValid;
}

OAIGatewayDetails OAIAnalysisServicesServerProperties::getGatewayDetails() const {
    return m_gateway_details;
}
void OAIAnalysisServicesServerProperties::setGatewayDetails(const OAIGatewayDetails &gateway_details) {
    m_gateway_details = gateway_details;
    m_gateway_details_isSet = true;
}

bool OAIAnalysisServicesServerProperties::is_gateway_details_Set() const{
    return m_gateway_details_isSet;
}

bool OAIAnalysisServicesServerProperties::is_gateway_details_Valid() const{
    return m_gateway_details_isValid;
}

OAIIPv4FirewallSettings OAIAnalysisServicesServerProperties::getIpV4FirewallSettings() const {
    return m_ip_v4_firewall_settings;
}
void OAIAnalysisServicesServerProperties::setIpV4FirewallSettings(const OAIIPv4FirewallSettings &ip_v4_firewall_settings) {
    m_ip_v4_firewall_settings = ip_v4_firewall_settings;
    m_ip_v4_firewall_settings_isSet = true;
}

bool OAIAnalysisServicesServerProperties::is_ip_v4_firewall_settings_Set() const{
    return m_ip_v4_firewall_settings_isSet;
}

bool OAIAnalysisServicesServerProperties::is_ip_v4_firewall_settings_Valid() const{
    return m_ip_v4_firewall_settings_isValid;
}

QString OAIAnalysisServicesServerProperties::getQuerypoolConnectionMode() const {
    return m_querypool_connection_mode;
}
void OAIAnalysisServicesServerProperties::setQuerypoolConnectionMode(const QString &querypool_connection_mode) {
    m_querypool_connection_mode = querypool_connection_mode;
    m_querypool_connection_mode_isSet = true;
}

bool OAIAnalysisServicesServerProperties::is_querypool_connection_mode_Set() const{
    return m_querypool_connection_mode_isSet;
}

bool OAIAnalysisServicesServerProperties::is_querypool_connection_mode_Valid() const{
    return m_querypool_connection_mode_isValid;
}

bool OAIAnalysisServicesServerProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_as_administrators.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_blob_container_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_v4_firewall_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_querypool_connection_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnalysisServicesServerProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
