/**
 * AzureAnalysisServices
 * The Azure Analysis Services Web API provides a RESTful set of web services that enables users to create, retrieve, update, and delete Analysis Services servers
 *
 * The version of the OpenAPI document: 2017-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIPv4FirewallSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIPv4FirewallSettings::OAIIPv4FirewallSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIPv4FirewallSettings::OAIIPv4FirewallSettings() {
    this->initializeModel();
}

OAIIPv4FirewallSettings::~OAIIPv4FirewallSettings() {}

void OAIIPv4FirewallSettings::initializeModel() {

    m_enable_power_bi_service_isSet = false;
    m_enable_power_bi_service_isValid = false;

    m_firewall_rules_isSet = false;
    m_firewall_rules_isValid = false;
}

void OAIIPv4FirewallSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIPv4FirewallSettings::fromJsonObject(QJsonObject json) {

    m_enable_power_bi_service_isValid = ::OpenAPI::fromJsonValue(m_enable_power_bi_service, json[QString("enablePowerBIService")]);
    m_enable_power_bi_service_isSet = !json[QString("enablePowerBIService")].isNull() && m_enable_power_bi_service_isValid;

    m_firewall_rules_isValid = ::OpenAPI::fromJsonValue(m_firewall_rules, json[QString("firewallRules")]);
    m_firewall_rules_isSet = !json[QString("firewallRules")].isNull() && m_firewall_rules_isValid;
}

QString OAIIPv4FirewallSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIPv4FirewallSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_power_bi_service_isSet) {
        obj.insert(QString("enablePowerBIService"), ::OpenAPI::toJsonValue(m_enable_power_bi_service));
    }
    if (m_firewall_rules.size() > 0) {
        obj.insert(QString("firewallRules"), ::OpenAPI::toJsonValue(m_firewall_rules));
    }
    return obj;
}

bool OAIIPv4FirewallSettings::isEnablePowerBiService() const {
    return m_enable_power_bi_service;
}
void OAIIPv4FirewallSettings::setEnablePowerBiService(const bool &enable_power_bi_service) {
    m_enable_power_bi_service = enable_power_bi_service;
    m_enable_power_bi_service_isSet = true;
}

bool OAIIPv4FirewallSettings::is_enable_power_bi_service_Set() const{
    return m_enable_power_bi_service_isSet;
}

bool OAIIPv4FirewallSettings::is_enable_power_bi_service_Valid() const{
    return m_enable_power_bi_service_isValid;
}

QList<OAIIPv4FirewallRule> OAIIPv4FirewallSettings::getFirewallRules() const {
    return m_firewall_rules;
}
void OAIIPv4FirewallSettings::setFirewallRules(const QList<OAIIPv4FirewallRule> &firewall_rules) {
    m_firewall_rules = firewall_rules;
    m_firewall_rules_isSet = true;
}

bool OAIIPv4FirewallSettings::is_firewall_rules_Set() const{
    return m_firewall_rules_isSet;
}

bool OAIIPv4FirewallSettings::is_firewall_rules_Valid() const{
    return m_firewall_rules_isValid;
}

bool OAIIPv4FirewallSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_power_bi_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firewall_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIPv4FirewallSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
