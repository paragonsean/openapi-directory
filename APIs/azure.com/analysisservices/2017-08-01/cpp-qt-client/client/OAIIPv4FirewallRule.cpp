/**
 * AzureAnalysisServices
 * The Azure Analysis Services Web API provides a RESTful set of web services that enables users to create, retrieve, update, and delete Analysis Services servers
 *
 * The version of the OpenAPI document: 2017-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIPv4FirewallRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIPv4FirewallRule::OAIIPv4FirewallRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIPv4FirewallRule::OAIIPv4FirewallRule() {
    this->initializeModel();
}

OAIIPv4FirewallRule::~OAIIPv4FirewallRule() {}

void OAIIPv4FirewallRule::initializeModel() {

    m_firewall_rule_name_isSet = false;
    m_firewall_rule_name_isValid = false;

    m_range_end_isSet = false;
    m_range_end_isValid = false;

    m_range_start_isSet = false;
    m_range_start_isValid = false;
}

void OAIIPv4FirewallRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIPv4FirewallRule::fromJsonObject(QJsonObject json) {

    m_firewall_rule_name_isValid = ::OpenAPI::fromJsonValue(m_firewall_rule_name, json[QString("firewallRuleName")]);
    m_firewall_rule_name_isSet = !json[QString("firewallRuleName")].isNull() && m_firewall_rule_name_isValid;

    m_range_end_isValid = ::OpenAPI::fromJsonValue(m_range_end, json[QString("rangeEnd")]);
    m_range_end_isSet = !json[QString("rangeEnd")].isNull() && m_range_end_isValid;

    m_range_start_isValid = ::OpenAPI::fromJsonValue(m_range_start, json[QString("rangeStart")]);
    m_range_start_isSet = !json[QString("rangeStart")].isNull() && m_range_start_isValid;
}

QString OAIIPv4FirewallRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIPv4FirewallRule::asJsonObject() const {
    QJsonObject obj;
    if (m_firewall_rule_name_isSet) {
        obj.insert(QString("firewallRuleName"), ::OpenAPI::toJsonValue(m_firewall_rule_name));
    }
    if (m_range_end_isSet) {
        obj.insert(QString("rangeEnd"), ::OpenAPI::toJsonValue(m_range_end));
    }
    if (m_range_start_isSet) {
        obj.insert(QString("rangeStart"), ::OpenAPI::toJsonValue(m_range_start));
    }
    return obj;
}

QString OAIIPv4FirewallRule::getFirewallRuleName() const {
    return m_firewall_rule_name;
}
void OAIIPv4FirewallRule::setFirewallRuleName(const QString &firewall_rule_name) {
    m_firewall_rule_name = firewall_rule_name;
    m_firewall_rule_name_isSet = true;
}

bool OAIIPv4FirewallRule::is_firewall_rule_name_Set() const{
    return m_firewall_rule_name_isSet;
}

bool OAIIPv4FirewallRule::is_firewall_rule_name_Valid() const{
    return m_firewall_rule_name_isValid;
}

QString OAIIPv4FirewallRule::getRangeEnd() const {
    return m_range_end;
}
void OAIIPv4FirewallRule::setRangeEnd(const QString &range_end) {
    m_range_end = range_end;
    m_range_end_isSet = true;
}

bool OAIIPv4FirewallRule::is_range_end_Set() const{
    return m_range_end_isSet;
}

bool OAIIPv4FirewallRule::is_range_end_Valid() const{
    return m_range_end_isValid;
}

QString OAIIPv4FirewallRule::getRangeStart() const {
    return m_range_start;
}
void OAIIPv4FirewallRule::setRangeStart(const QString &range_start) {
    m_range_start = range_start;
    m_range_start_isSet = true;
}

bool OAIIPv4FirewallRule::is_range_start_Set() const{
    return m_range_start_isSet;
}

bool OAIIPv4FirewallRule::is_range_start_Valid() const{
    return m_range_start_isValid;
}

bool OAIIPv4FirewallRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_firewall_rule_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_start_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIPv4FirewallRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
