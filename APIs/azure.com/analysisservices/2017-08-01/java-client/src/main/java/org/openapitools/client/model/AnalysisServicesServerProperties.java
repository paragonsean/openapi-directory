/*
 * AzureAnalysisServices
 * The Azure Analysis Services Web API provides a RESTful set of web services that enables users to create, retrieve, update, and delete Analysis Services servers
 *
 * The version of the OpenAPI document: 2017-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GatewayDetails;
import org.openapitools.client.model.IPv4FirewallSettings;
import org.openapitools.client.model.ServerAdministrators;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of Analysis Services resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:23.820119-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnalysisServicesServerProperties {
  /**
   * The current deployment state of Analysis Services resource. The provisioningState is to indicate states for resource provisioning.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    DELETING("Deleting"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    PAUSED("Paused"),
    
    SUSPENDED("Suspended"),
    
    PROVISIONING("Provisioning"),
    
    UPDATING("Updating"),
    
    SUSPENDING("Suspending"),
    
    PAUSING("Pausing"),
    
    RESUMING("Resuming"),
    
    PREPARING("Preparing"),
    
    SCALING("Scaling");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_SERVER_FULL_NAME = "serverFullName";
  @SerializedName(SERIALIZED_NAME_SERVER_FULL_NAME)
  private String serverFullName;

  /**
   * The current state of Analysis Services resource. The state is to indicate more states outside of resource provisioning.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    DELETING("Deleting"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed"),
    
    PAUSED("Paused"),
    
    SUSPENDED("Suspended"),
    
    PROVISIONING("Provisioning"),
    
    UPDATING("Updating"),
    
    SUSPENDING("Suspending"),
    
    PAUSING("Pausing"),
    
    RESUMING("Resuming"),
    
    PREPARING("Preparing"),
    
    SCALING("Scaling");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_AS_ADMINISTRATORS = "asAdministrators";
  @SerializedName(SERIALIZED_NAME_AS_ADMINISTRATORS)
  private ServerAdministrators asAdministrators;

  public static final String SERIALIZED_NAME_BACKUP_BLOB_CONTAINER_URI = "backupBlobContainerUri";
  @SerializedName(SERIALIZED_NAME_BACKUP_BLOB_CONTAINER_URI)
  private String backupBlobContainerUri;

  public static final String SERIALIZED_NAME_GATEWAY_DETAILS = "gatewayDetails";
  @SerializedName(SERIALIZED_NAME_GATEWAY_DETAILS)
  private GatewayDetails gatewayDetails;

  public static final String SERIALIZED_NAME_IP_V4_FIREWALL_SETTINGS = "ipV4FirewallSettings";
  @SerializedName(SERIALIZED_NAME_IP_V4_FIREWALL_SETTINGS)
  private IPv4FirewallSettings ipV4FirewallSettings;

  /**
   * How the read-write server&#39;s participation in the query pool is controlled.&lt;br/&gt;It can have the following values: &lt;ul&gt;&lt;li&gt;readOnly - indicates that the read-write server is intended not to participate in query operations&lt;/li&gt;&lt;li&gt;all - indicates that the read-write server can participate in query operations&lt;/li&gt;&lt;/ul&gt;Specifying readOnly when capacity is 1 results in error.
   */
  @JsonAdapter(QuerypoolConnectionModeEnum.Adapter.class)
  public enum QuerypoolConnectionModeEnum {
    ALL("All"),
    
    READ_ONLY("ReadOnly");

    private String value;

    QuerypoolConnectionModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QuerypoolConnectionModeEnum fromValue(String value) {
      for (QuerypoolConnectionModeEnum b : QuerypoolConnectionModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QuerypoolConnectionModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QuerypoolConnectionModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QuerypoolConnectionModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QuerypoolConnectionModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      QuerypoolConnectionModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_QUERYPOOL_CONNECTION_MODE = "querypoolConnectionMode";
  @SerializedName(SERIALIZED_NAME_QUERYPOOL_CONNECTION_MODE)
  private QuerypoolConnectionModeEnum querypoolConnectionMode = QuerypoolConnectionModeEnum.ALL;

  public AnalysisServicesServerProperties() {
  }

  public AnalysisServicesServerProperties(
     ProvisioningStateEnum provisioningState, 
     String serverFullName, 
     StateEnum state
  ) {
    this();
    this.provisioningState = provisioningState;
    this.serverFullName = serverFullName;
    this.state = state;
  }

  /**
   * The current deployment state of Analysis Services resource. The provisioningState is to indicate states for resource provisioning.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  /**
   * The full name of the Analysis Services resource.
   * @return serverFullName
   */
  @javax.annotation.Nullable
  public String getServerFullName() {
    return serverFullName;
  }



  /**
   * The current state of Analysis Services resource. The state is to indicate more states outside of resource provisioning.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public AnalysisServicesServerProperties asAdministrators(ServerAdministrators asAdministrators) {
    this.asAdministrators = asAdministrators;
    return this;
  }

  /**
   * Get asAdministrators
   * @return asAdministrators
   */
  @javax.annotation.Nullable
  public ServerAdministrators getAsAdministrators() {
    return asAdministrators;
  }

  public void setAsAdministrators(ServerAdministrators asAdministrators) {
    this.asAdministrators = asAdministrators;
  }


  public AnalysisServicesServerProperties backupBlobContainerUri(String backupBlobContainerUri) {
    this.backupBlobContainerUri = backupBlobContainerUri;
    return this;
  }

  /**
   * The SAS container URI to the backup container.
   * @return backupBlobContainerUri
   */
  @javax.annotation.Nullable
  public String getBackupBlobContainerUri() {
    return backupBlobContainerUri;
  }

  public void setBackupBlobContainerUri(String backupBlobContainerUri) {
    this.backupBlobContainerUri = backupBlobContainerUri;
  }


  public AnalysisServicesServerProperties gatewayDetails(GatewayDetails gatewayDetails) {
    this.gatewayDetails = gatewayDetails;
    return this;
  }

  /**
   * Get gatewayDetails
   * @return gatewayDetails
   */
  @javax.annotation.Nullable
  public GatewayDetails getGatewayDetails() {
    return gatewayDetails;
  }

  public void setGatewayDetails(GatewayDetails gatewayDetails) {
    this.gatewayDetails = gatewayDetails;
  }


  public AnalysisServicesServerProperties ipV4FirewallSettings(IPv4FirewallSettings ipV4FirewallSettings) {
    this.ipV4FirewallSettings = ipV4FirewallSettings;
    return this;
  }

  /**
   * Get ipV4FirewallSettings
   * @return ipV4FirewallSettings
   */
  @javax.annotation.Nullable
  public IPv4FirewallSettings getIpV4FirewallSettings() {
    return ipV4FirewallSettings;
  }

  public void setIpV4FirewallSettings(IPv4FirewallSettings ipV4FirewallSettings) {
    this.ipV4FirewallSettings = ipV4FirewallSettings;
  }


  public AnalysisServicesServerProperties querypoolConnectionMode(QuerypoolConnectionModeEnum querypoolConnectionMode) {
    this.querypoolConnectionMode = querypoolConnectionMode;
    return this;
  }

  /**
   * How the read-write server&#39;s participation in the query pool is controlled.&lt;br/&gt;It can have the following values: &lt;ul&gt;&lt;li&gt;readOnly - indicates that the read-write server is intended not to participate in query operations&lt;/li&gt;&lt;li&gt;all - indicates that the read-write server can participate in query operations&lt;/li&gt;&lt;/ul&gt;Specifying readOnly when capacity is 1 results in error.
   * @return querypoolConnectionMode
   */
  @javax.annotation.Nullable
  public QuerypoolConnectionModeEnum getQuerypoolConnectionMode() {
    return querypoolConnectionMode;
  }

  public void setQuerypoolConnectionMode(QuerypoolConnectionModeEnum querypoolConnectionMode) {
    this.querypoolConnectionMode = querypoolConnectionMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalysisServicesServerProperties analysisServicesServerProperties = (AnalysisServicesServerProperties) o;
    return Objects.equals(this.provisioningState, analysisServicesServerProperties.provisioningState) &&
        Objects.equals(this.serverFullName, analysisServicesServerProperties.serverFullName) &&
        Objects.equals(this.state, analysisServicesServerProperties.state) &&
        Objects.equals(this.asAdministrators, analysisServicesServerProperties.asAdministrators) &&
        Objects.equals(this.backupBlobContainerUri, analysisServicesServerProperties.backupBlobContainerUri) &&
        Objects.equals(this.gatewayDetails, analysisServicesServerProperties.gatewayDetails) &&
        Objects.equals(this.ipV4FirewallSettings, analysisServicesServerProperties.ipV4FirewallSettings) &&
        Objects.equals(this.querypoolConnectionMode, analysisServicesServerProperties.querypoolConnectionMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(provisioningState, serverFullName, state, asAdministrators, backupBlobContainerUri, gatewayDetails, ipV4FirewallSettings, querypoolConnectionMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalysisServicesServerProperties {\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    serverFullName: ").append(toIndentedString(serverFullName)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    asAdministrators: ").append(toIndentedString(asAdministrators)).append("\n");
    sb.append("    backupBlobContainerUri: ").append(toIndentedString(backupBlobContainerUri)).append("\n");
    sb.append("    gatewayDetails: ").append(toIndentedString(gatewayDetails)).append("\n");
    sb.append("    ipV4FirewallSettings: ").append(toIndentedString(ipV4FirewallSettings)).append("\n");
    sb.append("    querypoolConnectionMode: ").append(toIndentedString(querypoolConnectionMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asAdministrators");
    openapiFields.add("backupBlobContainerUri");
    openapiFields.add("gatewayDetails");
    openapiFields.add("ipV4FirewallSettings");
    openapiFields.add("querypoolConnectionMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnalysisServicesServerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalysisServicesServerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalysisServicesServerProperties is not found in the empty JSON string", AnalysisServicesServerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalysisServicesServerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalysisServicesServerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("serverFullName") != null && !jsonObj.get("serverFullName").isJsonNull()) && !jsonObj.get("serverFullName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverFullName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverFullName").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `asAdministrators`
      if (jsonObj.get("asAdministrators") != null && !jsonObj.get("asAdministrators").isJsonNull()) {
        ServerAdministrators.validateJsonElement(jsonObj.get("asAdministrators"));
      }
      if ((jsonObj.get("backupBlobContainerUri") != null && !jsonObj.get("backupBlobContainerUri").isJsonNull()) && !jsonObj.get("backupBlobContainerUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupBlobContainerUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupBlobContainerUri").toString()));
      }
      // validate the optional field `gatewayDetails`
      if (jsonObj.get("gatewayDetails") != null && !jsonObj.get("gatewayDetails").isJsonNull()) {
        GatewayDetails.validateJsonElement(jsonObj.get("gatewayDetails"));
      }
      // validate the optional field `ipV4FirewallSettings`
      if (jsonObj.get("ipV4FirewallSettings") != null && !jsonObj.get("ipV4FirewallSettings").isJsonNull()) {
        IPv4FirewallSettings.validateJsonElement(jsonObj.get("ipV4FirewallSettings"));
      }
      if ((jsonObj.get("querypoolConnectionMode") != null && !jsonObj.get("querypoolConnectionMode").isJsonNull()) && !jsonObj.get("querypoolConnectionMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `querypoolConnectionMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("querypoolConnectionMode").toString()));
      }
      // validate the optional field `querypoolConnectionMode`
      if (jsonObj.get("querypoolConnectionMode") != null && !jsonObj.get("querypoolConnectionMode").isJsonNull()) {
        QuerypoolConnectionModeEnum.validateJsonElement(jsonObj.get("querypoolConnectionMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalysisServicesServerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalysisServicesServerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalysisServicesServerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalysisServicesServerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalysisServicesServerProperties>() {
           @Override
           public void write(JsonWriter out, AnalysisServicesServerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalysisServicesServerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnalysisServicesServerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnalysisServicesServerProperties
   * @throws IOException if the JSON string is invalid with respect to AnalysisServicesServerProperties
   */
  public static AnalysisServicesServerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalysisServicesServerProperties.class);
  }

  /**
   * Convert an instance of AnalysisServicesServerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

