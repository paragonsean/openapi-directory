/*
 * AzureAnalysisServices
 * The Azure Analysis Services Web API provides a RESTful set of web services that enables users to create, retrieve, update, and delete Analysis Services servers
 *
 * The version of the OpenAPI document: 2017-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The detail of firewall rule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:23.820119-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IPv4FirewallRule {
  public static final String SERIALIZED_NAME_FIREWALL_RULE_NAME = "firewallRuleName";
  @SerializedName(SERIALIZED_NAME_FIREWALL_RULE_NAME)
  private String firewallRuleName;

  public static final String SERIALIZED_NAME_RANGE_END = "rangeEnd";
  @SerializedName(SERIALIZED_NAME_RANGE_END)
  private String rangeEnd;

  public static final String SERIALIZED_NAME_RANGE_START = "rangeStart";
  @SerializedName(SERIALIZED_NAME_RANGE_START)
  private String rangeStart;

  public IPv4FirewallRule() {
  }

  public IPv4FirewallRule firewallRuleName(String firewallRuleName) {
    this.firewallRuleName = firewallRuleName;
    return this;
  }

  /**
   * The rule name.
   * @return firewallRuleName
   */
  @javax.annotation.Nullable
  public String getFirewallRuleName() {
    return firewallRuleName;
  }

  public void setFirewallRuleName(String firewallRuleName) {
    this.firewallRuleName = firewallRuleName;
  }


  public IPv4FirewallRule rangeEnd(String rangeEnd) {
    this.rangeEnd = rangeEnd;
    return this;
  }

  /**
   * The end range of IPv4.
   * @return rangeEnd
   */
  @javax.annotation.Nullable
  public String getRangeEnd() {
    return rangeEnd;
  }

  public void setRangeEnd(String rangeEnd) {
    this.rangeEnd = rangeEnd;
  }


  public IPv4FirewallRule rangeStart(String rangeStart) {
    this.rangeStart = rangeStart;
    return this;
  }

  /**
   * The start range of IPv4.
   * @return rangeStart
   */
  @javax.annotation.Nullable
  public String getRangeStart() {
    return rangeStart;
  }

  public void setRangeStart(String rangeStart) {
    this.rangeStart = rangeStart;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IPv4FirewallRule ipv4FirewallRule = (IPv4FirewallRule) o;
    return Objects.equals(this.firewallRuleName, ipv4FirewallRule.firewallRuleName) &&
        Objects.equals(this.rangeEnd, ipv4FirewallRule.rangeEnd) &&
        Objects.equals(this.rangeStart, ipv4FirewallRule.rangeStart);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firewallRuleName, rangeEnd, rangeStart);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IPv4FirewallRule {\n");
    sb.append("    firewallRuleName: ").append(toIndentedString(firewallRuleName)).append("\n");
    sb.append("    rangeEnd: ").append(toIndentedString(rangeEnd)).append("\n");
    sb.append("    rangeStart: ").append(toIndentedString(rangeStart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firewallRuleName");
    openapiFields.add("rangeEnd");
    openapiFields.add("rangeStart");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IPv4FirewallRule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IPv4FirewallRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IPv4FirewallRule is not found in the empty JSON string", IPv4FirewallRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IPv4FirewallRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IPv4FirewallRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("firewallRuleName") != null && !jsonObj.get("firewallRuleName").isJsonNull()) && !jsonObj.get("firewallRuleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firewallRuleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firewallRuleName").toString()));
      }
      if ((jsonObj.get("rangeEnd") != null && !jsonObj.get("rangeEnd").isJsonNull()) && !jsonObj.get("rangeEnd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rangeEnd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rangeEnd").toString()));
      }
      if ((jsonObj.get("rangeStart") != null && !jsonObj.get("rangeStart").isJsonNull()) && !jsonObj.get("rangeStart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rangeStart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rangeStart").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IPv4FirewallRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IPv4FirewallRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IPv4FirewallRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IPv4FirewallRule.class));

       return (TypeAdapter<T>) new TypeAdapter<IPv4FirewallRule>() {
           @Override
           public void write(JsonWriter out, IPv4FirewallRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IPv4FirewallRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IPv4FirewallRule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IPv4FirewallRule
   * @throws IOException if the JSON string is invalid with respect to IPv4FirewallRule
   */
  public static IPv4FirewallRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IPv4FirewallRule.class);
  }

  /**
   * Convert an instance of IPv4FirewallRule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

