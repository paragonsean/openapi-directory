/**
 * AzureAnalysisServices
 * The Azure Analysis Services Web API provides a RESTful set of web services that enables users to create, retrieve, update, and delete Analysis Services servers
 *
 * The version of the OpenAPI document: 2017-08-01-beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGatewayDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGatewayDetails::OAIGatewayDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGatewayDetails::OAIGatewayDetails() {
    this->initializeModel();
}

OAIGatewayDetails::~OAIGatewayDetails() {}

void OAIGatewayDetails::initializeModel() {

    m_dmts_cluster_uri_isSet = false;
    m_dmts_cluster_uri_isValid = false;

    m_gateway_object_id_isSet = false;
    m_gateway_object_id_isValid = false;

    m_gateway_resource_id_isSet = false;
    m_gateway_resource_id_isValid = false;
}

void OAIGatewayDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGatewayDetails::fromJsonObject(QJsonObject json) {

    m_dmts_cluster_uri_isValid = ::OpenAPI::fromJsonValue(m_dmts_cluster_uri, json[QString("dmtsClusterUri")]);
    m_dmts_cluster_uri_isSet = !json[QString("dmtsClusterUri")].isNull() && m_dmts_cluster_uri_isValid;

    m_gateway_object_id_isValid = ::OpenAPI::fromJsonValue(m_gateway_object_id, json[QString("gatewayObjectId")]);
    m_gateway_object_id_isSet = !json[QString("gatewayObjectId")].isNull() && m_gateway_object_id_isValid;

    m_gateway_resource_id_isValid = ::OpenAPI::fromJsonValue(m_gateway_resource_id, json[QString("gatewayResourceId")]);
    m_gateway_resource_id_isSet = !json[QString("gatewayResourceId")].isNull() && m_gateway_resource_id_isValid;
}

QString OAIGatewayDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGatewayDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_dmts_cluster_uri_isSet) {
        obj.insert(QString("dmtsClusterUri"), ::OpenAPI::toJsonValue(m_dmts_cluster_uri));
    }
    if (m_gateway_object_id_isSet) {
        obj.insert(QString("gatewayObjectId"), ::OpenAPI::toJsonValue(m_gateway_object_id));
    }
    if (m_gateway_resource_id_isSet) {
        obj.insert(QString("gatewayResourceId"), ::OpenAPI::toJsonValue(m_gateway_resource_id));
    }
    return obj;
}

QString OAIGatewayDetails::getDmtsClusterUri() const {
    return m_dmts_cluster_uri;
}
void OAIGatewayDetails::setDmtsClusterUri(const QString &dmts_cluster_uri) {
    m_dmts_cluster_uri = dmts_cluster_uri;
    m_dmts_cluster_uri_isSet = true;
}

bool OAIGatewayDetails::is_dmts_cluster_uri_Set() const{
    return m_dmts_cluster_uri_isSet;
}

bool OAIGatewayDetails::is_dmts_cluster_uri_Valid() const{
    return m_dmts_cluster_uri_isValid;
}

QString OAIGatewayDetails::getGatewayObjectId() const {
    return m_gateway_object_id;
}
void OAIGatewayDetails::setGatewayObjectId(const QString &gateway_object_id) {
    m_gateway_object_id = gateway_object_id;
    m_gateway_object_id_isSet = true;
}

bool OAIGatewayDetails::is_gateway_object_id_Set() const{
    return m_gateway_object_id_isSet;
}

bool OAIGatewayDetails::is_gateway_object_id_Valid() const{
    return m_gateway_object_id_isValid;
}

QString OAIGatewayDetails::getGatewayResourceId() const {
    return m_gateway_resource_id;
}
void OAIGatewayDetails::setGatewayResourceId(const QString &gateway_resource_id) {
    m_gateway_resource_id = gateway_resource_id;
    m_gateway_resource_id_isSet = true;
}

bool OAIGatewayDetails::is_gateway_resource_id_Set() const{
    return m_gateway_resource_id_isSet;
}

bool OAIGatewayDetails::is_gateway_resource_id_Valid() const{
    return m_gateway_resource_id_isValid;
}

bool OAIGatewayDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dmts_cluster_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGatewayDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
