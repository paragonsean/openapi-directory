/**
 * AzureAnalysisServices
 * The Azure Analysis Services Web API provides a RESTful set of web services that enables users to create, retrieve, update, and delete Analysis Services servers
 *
 * The version of the OpenAPI document: 2017-08-01-beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAnalysisServicesServerProperties.h
 *
 * Properties of Analysis Services resource.
 */

#ifndef OAIAnalysisServicesServerProperties_H
#define OAIAnalysisServicesServerProperties_H

#include <QJsonObject>

#include "OAIGatewayDetails.h"
#include "OAIIPv4FirewallSettings.h"
#include "OAIServerAdministrators.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIServerAdministrators;
class OAIGatewayDetails;
class OAIIPv4FirewallSettings;

class OAIAnalysisServicesServerProperties : public OAIObject {
public:
    OAIAnalysisServicesServerProperties();
    OAIAnalysisServicesServerProperties(QString json);
    ~OAIAnalysisServicesServerProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    QString getServerFullName() const;
    void setServerFullName(const QString &server_full_name);
    bool is_server_full_name_Set() const;
    bool is_server_full_name_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAIServerAdministrators getAsAdministrators() const;
    void setAsAdministrators(const OAIServerAdministrators &as_administrators);
    bool is_as_administrators_Set() const;
    bool is_as_administrators_Valid() const;

    QString getBackupBlobContainerUri() const;
    void setBackupBlobContainerUri(const QString &backup_blob_container_uri);
    bool is_backup_blob_container_uri_Set() const;
    bool is_backup_blob_container_uri_Valid() const;

    OAIGatewayDetails getGatewayDetails() const;
    void setGatewayDetails(const OAIGatewayDetails &gateway_details);
    bool is_gateway_details_Set() const;
    bool is_gateway_details_Valid() const;

    OAIIPv4FirewallSettings getIpV4FirewallSettings() const;
    void setIpV4FirewallSettings(const OAIIPv4FirewallSettings &ip_v4_firewall_settings);
    bool is_ip_v4_firewall_settings_Set() const;
    bool is_ip_v4_firewall_settings_Valid() const;

    QString getQuerypoolConnectionMode() const;
    void setQuerypoolConnectionMode(const QString &querypool_connection_mode);
    bool is_querypool_connection_mode_Set() const;
    bool is_querypool_connection_mode_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    QString m_server_full_name;
    bool m_server_full_name_isSet;
    bool m_server_full_name_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAIServerAdministrators m_as_administrators;
    bool m_as_administrators_isSet;
    bool m_as_administrators_isValid;

    QString m_backup_blob_container_uri;
    bool m_backup_blob_container_uri_isSet;
    bool m_backup_blob_container_uri_isValid;

    OAIGatewayDetails m_gateway_details;
    bool m_gateway_details_isSet;
    bool m_gateway_details_isValid;

    OAIIPv4FirewallSettings m_ip_v4_firewall_settings;
    bool m_ip_v4_firewall_settings_isSet;
    bool m_ip_v4_firewall_settings_isValid;

    QString m_querypool_connection_mode;
    bool m_querypool_connection_mode_isSet;
    bool m_querypool_connection_mode_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAnalysisServicesServerProperties)

#endif // OAIAnalysisServicesServerProperties_H
