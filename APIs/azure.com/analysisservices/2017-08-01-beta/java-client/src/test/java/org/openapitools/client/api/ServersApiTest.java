/*
 * AzureAnalysisServices
 * The Azure Analysis Services Web API provides a RESTful set of web services that enables users to create, retrieve, update, and delete Analysis Services servers
 *
 * The version of the OpenAPI document: 2017-08-01-beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AnalysisServicesServer;
import org.openapitools.client.model.AnalysisServicesServerUpdateParameters;
import org.openapitools.client.model.AnalysisServicesServers;
import org.openapitools.client.model.CheckServerNameAvailabilityParameters;
import org.openapitools.client.model.CheckServerNameAvailabilityResult;
import org.openapitools.client.model.GatewayListStatusError;
import org.openapitools.client.model.GatewayListStatusLive;
import org.openapitools.client.model.OperationStatus;
import org.openapitools.client.model.SkuEnumerationForExistingResourceResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServersApi
 */
@Disabled
public class ServersApiTest {

    private final ServersApi api = new ServersApi();

    /**
     * Check the name availability in the target location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serversCheckNameAvailabilityTest() throws ApiException {
        String location = null;
        String apiVersion = null;
        String subscriptionId = null;
        CheckServerNameAvailabilityParameters serverParameters = null;
        CheckServerNameAvailabilityResult response = api.serversCheckNameAvailability(location, apiVersion, subscriptionId, serverParameters);
        // TODO: test validations
    }

    /**
     * Provisions the specified Analysis Services server based on the configuration specified in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serversCreateTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AnalysisServicesServer serverParameters = null;
        AnalysisServicesServer response = api.serversCreate(resourceGroupName, serverName, apiVersion, subscriptionId, serverParameters);
        // TODO: test validations
    }

    /**
     * Deletes the specified Analysis Services server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serversDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.serversDelete(resourceGroupName, serverName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Dissociates a Unified Gateway associated with the server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serversDissociateGatewayTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.serversDissociateGateway(resourceGroupName, serverName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets details about the specified Analysis Services server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serversGetDetailsTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AnalysisServicesServer response = api.serversGetDetails(resourceGroupName, serverName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all the Analysis Services servers for the given subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serversListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        AnalysisServicesServers response = api.serversList(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets all the Analysis Services servers for the given resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serversListByResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AnalysisServicesServers response = api.serversListByResourceGroup(resourceGroupName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Return the gateway status of the specified Analysis Services server instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serversListGatewayStatusTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String apiVersion = null;
        String subscriptionId = null;
        GatewayListStatusLive response = api.serversListGatewayStatus(resourceGroupName, serverName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * List the result of the specified operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serversListOperationResultsTest() throws ApiException {
        String location = null;
        String operationId = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.serversListOperationResults(location, operationId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * List the status of operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serversListOperationStatusesTest() throws ApiException {
        String location = null;
        String operationId = null;
        String apiVersion = null;
        String subscriptionId = null;
        OperationStatus response = api.serversListOperationStatuses(location, operationId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists eligible SKUs for an Analysis Services resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serversListSkusForExistingTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SkuEnumerationForExistingResourceResult response = api.serversListSkusForExisting(resourceGroupName, serverName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Resumes operation of the specified Analysis Services server instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serversResumeTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.serversResume(resourceGroupName, serverName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Suspends operation of the specified Analysis Services server instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serversSuspendTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.serversSuspend(resourceGroupName, serverName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Updates the current state of the specified Analysis Services server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void serversUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serverName = null;
        String apiVersion = null;
        String subscriptionId = null;
        AnalysisServicesServerUpdateParameters serverUpdateParameters = null;
        AnalysisServicesServer response = api.serversUpdate(resourceGroupName, serverName, apiVersion, subscriptionId, serverUpdateParameters);
        // TODO: test validations
    }

}
