/*
 * AzureAnalysisServices
 * The Azure Analysis Services Web API provides a RESTful set of web services that enables users to create, retrieve, update, and delete Analysis Services servers
 *
 * The version of the OpenAPI document: 2017-07-14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AnalysisServicesServer;
import org.openapitools.client.model.AnalysisServicesServerUpdateParameters;
import org.openapitools.client.model.AnalysisServicesServers;
import org.openapitools.client.model.CheckServerNameAvailabilityParameters;
import org.openapitools.client.model.CheckServerNameAvailabilityResult;
import org.openapitools.client.model.GatewayListStatusError;
import org.openapitools.client.model.GatewayListStatusLive;
import org.openapitools.client.model.OperationStatus;
import org.openapitools.client.model.SkuEnumerationForExistingResourceResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ServersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for serversCheckNameAvailability
     * @param location The region name which the operation will lookup into. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param serverParameters Contains the information used to provision the Analysis Services server. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversCheckNameAvailabilityCall(String location, String apiVersion, String subscriptionId, CheckServerNameAvailabilityParameters serverParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serverParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/checkNameAvailability"
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serversCheckNameAvailabilityValidateBeforeCall(String location, String apiVersion, String subscriptionId, CheckServerNameAvailabilityParameters serverParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling serversCheckNameAvailability(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serversCheckNameAvailability(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serversCheckNameAvailability(Async)");
        }

        // verify the required parameter 'serverParameters' is set
        if (serverParameters == null) {
            throw new ApiException("Missing the required parameter 'serverParameters' when calling serversCheckNameAvailability(Async)");
        }

        return serversCheckNameAvailabilityCall(location, apiVersion, subscriptionId, serverParameters, _callback);

    }

    /**
     * 
     * Check the name availability in the target location.
     * @param location The region name which the operation will lookup into. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param serverParameters Contains the information used to provision the Analysis Services server. (required)
     * @return CheckServerNameAvailabilityResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public CheckServerNameAvailabilityResult serversCheckNameAvailability(String location, String apiVersion, String subscriptionId, CheckServerNameAvailabilityParameters serverParameters) throws ApiException {
        ApiResponse<CheckServerNameAvailabilityResult> localVarResp = serversCheckNameAvailabilityWithHttpInfo(location, apiVersion, subscriptionId, serverParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Check the name availability in the target location.
     * @param location The region name which the operation will lookup into. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param serverParameters Contains the information used to provision the Analysis Services server. (required)
     * @return ApiResponse&lt;CheckServerNameAvailabilityResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckServerNameAvailabilityResult> serversCheckNameAvailabilityWithHttpInfo(String location, String apiVersion, String subscriptionId, CheckServerNameAvailabilityParameters serverParameters) throws ApiException {
        okhttp3.Call localVarCall = serversCheckNameAvailabilityValidateBeforeCall(location, apiVersion, subscriptionId, serverParameters, null);
        Type localVarReturnType = new TypeToken<CheckServerNameAvailabilityResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Check the name availability in the target location.
     * @param location The region name which the operation will lookup into. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param serverParameters Contains the information used to provision the Analysis Services server. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversCheckNameAvailabilityAsync(String location, String apiVersion, String subscriptionId, CheckServerNameAvailabilityParameters serverParameters, final ApiCallback<CheckServerNameAvailabilityResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = serversCheckNameAvailabilityValidateBeforeCall(location, apiVersion, subscriptionId, serverParameters, _callback);
        Type localVarReturnType = new TypeToken<CheckServerNameAvailabilityResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serversCreate
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param serverParameters Contains the information used to provision the Analysis Services server. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> InProgress. The operation is still completing. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversCreateCall(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, AnalysisServicesServer serverParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serverParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serversCreateValidateBeforeCall(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, AnalysisServicesServer serverParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serversCreate(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling serversCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serversCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serversCreate(Async)");
        }

        // verify the required parameter 'serverParameters' is set
        if (serverParameters == null) {
            throw new ApiException("Missing the required parameter 'serverParameters' when calling serversCreate(Async)");
        }

        return serversCreateCall(resourceGroupName, serverName, apiVersion, subscriptionId, serverParameters, _callback);

    }

    /**
     * 
     * Provisions the specified Analysis Services server based on the configuration specified in the request.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param serverParameters Contains the information used to provision the Analysis Services server. (required)
     * @return AnalysisServicesServer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> InProgress. The operation is still completing. </td><td>  -  </td></tr>
     </table>
     */
    public AnalysisServicesServer serversCreate(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, AnalysisServicesServer serverParameters) throws ApiException {
        ApiResponse<AnalysisServicesServer> localVarResp = serversCreateWithHttpInfo(resourceGroupName, serverName, apiVersion, subscriptionId, serverParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Provisions the specified Analysis Services server based on the configuration specified in the request.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param serverParameters Contains the information used to provision the Analysis Services server. (required)
     * @return ApiResponse&lt;AnalysisServicesServer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> InProgress. The operation is still completing. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalysisServicesServer> serversCreateWithHttpInfo(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, AnalysisServicesServer serverParameters) throws ApiException {
        okhttp3.Call localVarCall = serversCreateValidateBeforeCall(resourceGroupName, serverName, apiVersion, subscriptionId, serverParameters, null);
        Type localVarReturnType = new TypeToken<AnalysisServicesServer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Provisions the specified Analysis Services server based on the configuration specified in the request.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param serverParameters Contains the information used to provision the Analysis Services server. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation completed successfully. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> InProgress. The operation is still completing. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversCreateAsync(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, AnalysisServicesServer serverParameters, final ApiCallback<AnalysisServicesServer> _callback) throws ApiException {

        okhttp3.Call localVarCall = serversCreateValidateBeforeCall(resourceGroupName, serverName, apiVersion, subscriptionId, serverParameters, _callback);
        Type localVarReturnType = new TypeToken<AnalysisServicesServer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serversDelete
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversDeleteCall(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serversDeleteValidateBeforeCall(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serversDelete(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling serversDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serversDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serversDelete(Async)");
        }

        return serversDeleteCall(resourceGroupName, serverName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Deletes the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public void serversDelete(String resourceGroupName, String serverName, String apiVersion, String subscriptionId) throws ApiException {
        serversDeleteWithHttpInfo(resourceGroupName, serverName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Deletes the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> serversDeleteWithHttpInfo(String resourceGroupName, String serverName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = serversDeleteValidateBeforeCall(resourceGroupName, serverName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversDeleteAsync(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = serversDeleteValidateBeforeCall(resourceGroupName, serverName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for serversDissociateGateway
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversDissociateGatewayCall(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/dissociateGateway"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serversDissociateGatewayValidateBeforeCall(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serversDissociateGateway(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling serversDissociateGateway(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serversDissociateGateway(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serversDissociateGateway(Async)");
        }

        return serversDissociateGatewayCall(resourceGroupName, serverName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Dissociates a Unified Gateway associated with the server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public void serversDissociateGateway(String resourceGroupName, String serverName, String apiVersion, String subscriptionId) throws ApiException {
        serversDissociateGatewayWithHttpInfo(resourceGroupName, serverName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Dissociates a Unified Gateway associated with the server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> serversDissociateGatewayWithHttpInfo(String resourceGroupName, String serverName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = serversDissociateGatewayValidateBeforeCall(resourceGroupName, serverName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Dissociates a Unified Gateway associated with the server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversDissociateGatewayAsync(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = serversDissociateGatewayValidateBeforeCall(resourceGroupName, serverName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for serversGetDetails
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversGetDetailsCall(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serversGetDetailsValidateBeforeCall(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serversGetDetails(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling serversGetDetails(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serversGetDetails(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serversGetDetails(Async)");
        }

        return serversGetDetailsCall(resourceGroupName, serverName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets details about the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return AnalysisServicesServer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
     </table>
     */
    public AnalysisServicesServer serversGetDetails(String resourceGroupName, String serverName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AnalysisServicesServer> localVarResp = serversGetDetailsWithHttpInfo(resourceGroupName, serverName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets details about the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;AnalysisServicesServer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalysisServicesServer> serversGetDetailsWithHttpInfo(String resourceGroupName, String serverName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = serversGetDetailsValidateBeforeCall(resourceGroupName, serverName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AnalysisServicesServer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets details about the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be a minimum of 3 characters, and a maximum of 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversGetDetailsAsync(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, final ApiCallback<AnalysisServicesServer> _callback) throws ApiException {

        okhttp3.Call localVarCall = serversGetDetailsValidateBeforeCall(resourceGroupName, serverName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AnalysisServicesServer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serversList
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversListCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/servers"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serversListValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serversList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serversList(Async)");
        }

        return serversListCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Lists all the Analysis Services servers for the given subscription.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return AnalysisServicesServers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AnalysisServicesServers serversList(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AnalysisServicesServers> localVarResp = serversListWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the Analysis Services servers for the given subscription.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;AnalysisServicesServers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalysisServicesServers> serversListWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = serversListValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AnalysisServicesServers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the Analysis Services servers for the given subscription.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversListAsync(String apiVersion, String subscriptionId, final ApiCallback<AnalysisServicesServers> _callback) throws ApiException {

        okhttp3.Call localVarCall = serversListValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AnalysisServicesServers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serversListByResourceGroup
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversListByResourceGroupCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serversListByResourceGroupValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serversListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serversListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serversListByResourceGroup(Async)");
        }

        return serversListByResourceGroupCall(resourceGroupName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Gets all the Analysis Services servers for the given resource group.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return AnalysisServicesServers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AnalysisServicesServers serversListByResourceGroup(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<AnalysisServicesServers> localVarResp = serversListByResourceGroupWithHttpInfo(resourceGroupName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the Analysis Services servers for the given resource group.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;AnalysisServicesServers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalysisServicesServers> serversListByResourceGroupWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = serversListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<AnalysisServicesServers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the Analysis Services servers for the given resource group.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversListByResourceGroupAsync(String resourceGroupName, String apiVersion, String subscriptionId, final ApiCallback<AnalysisServicesServers> _callback) throws ApiException {

        okhttp3.Call localVarCall = serversListByResourceGroupValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<AnalysisServicesServers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serversListGatewayStatus
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response as an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversListGatewayStatusCall(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/listGatewayStatus"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serversListGatewayStatusValidateBeforeCall(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serversListGatewayStatus(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling serversListGatewayStatus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serversListGatewayStatus(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serversListGatewayStatus(Async)");
        }

        return serversListGatewayStatusCall(resourceGroupName, serverName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Return the gateway status of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return GatewayListStatusLive
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response as an error </td><td>  -  </td></tr>
     </table>
     */
    public GatewayListStatusLive serversListGatewayStatus(String resourceGroupName, String serverName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<GatewayListStatusLive> localVarResp = serversListGatewayStatusWithHttpInfo(resourceGroupName, serverName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Return the gateway status of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;GatewayListStatusLive&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response as an error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayListStatusLive> serversListGatewayStatusWithHttpInfo(String resourceGroupName, String serverName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = serversListGatewayStatusValidateBeforeCall(resourceGroupName, serverName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<GatewayListStatusLive>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return the gateway status of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default response as an error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversListGatewayStatusAsync(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, final ApiCallback<GatewayListStatusLive> _callback) throws ApiException {

        okhttp3.Call localVarCall = serversListGatewayStatusValidateBeforeCall(resourceGroupName, serverName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<GatewayListStatusLive>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serversListOperationResults
     * @param location The region name which the operation will lookup into. (required)
     * @param operationId The target operation Id. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation completed. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The operation is ongoing. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversListOperationResultsCall(String location, String operationId, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/operationresults/{operationId}"
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serversListOperationResultsValidateBeforeCall(String location, String operationId, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling serversListOperationResults(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling serversListOperationResults(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serversListOperationResults(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serversListOperationResults(Async)");
        }

        return serversListOperationResultsCall(location, operationId, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * List the result of the specified operation.
     * @param location The region name which the operation will lookup into. (required)
     * @param operationId The target operation Id. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation completed. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The operation is ongoing. </td><td>  -  </td></tr>
     </table>
     */
    public void serversListOperationResults(String location, String operationId, String apiVersion, String subscriptionId) throws ApiException {
        serversListOperationResultsWithHttpInfo(location, operationId, apiVersion, subscriptionId);
    }

    /**
     * 
     * List the result of the specified operation.
     * @param location The region name which the operation will lookup into. (required)
     * @param operationId The target operation Id. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation completed. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The operation is ongoing. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> serversListOperationResultsWithHttpInfo(String location, String operationId, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = serversListOperationResultsValidateBeforeCall(location, operationId, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * List the result of the specified operation.
     * @param location The region name which the operation will lookup into. (required)
     * @param operationId The target operation Id. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation completed. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The operation is ongoing. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversListOperationResultsAsync(String location, String operationId, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = serversListOperationResultsValidateBeforeCall(location, operationId, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for serversListOperationStatuses
     * @param location The region name which the operation will lookup into. (required)
     * @param operationId The target operation Id. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation completed. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The operation is ongoing. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversListOperationStatusesCall(String location, String operationId, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AnalysisServices/locations/{location}/operationstatuses/{operationId}"
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "operationId" + "}", localVarApiClient.escapeString(operationId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serversListOperationStatusesValidateBeforeCall(String location, String operationId, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling serversListOperationStatuses(Async)");
        }

        // verify the required parameter 'operationId' is set
        if (operationId == null) {
            throw new ApiException("Missing the required parameter 'operationId' when calling serversListOperationStatuses(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serversListOperationStatuses(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serversListOperationStatuses(Async)");
        }

        return serversListOperationStatusesCall(location, operationId, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * List the status of operation.
     * @param location The region name which the operation will lookup into. (required)
     * @param operationId The target operation Id. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return OperationStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation completed. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The operation is ongoing. </td><td>  -  </td></tr>
     </table>
     */
    public OperationStatus serversListOperationStatuses(String location, String operationId, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<OperationStatus> localVarResp = serversListOperationStatusesWithHttpInfo(location, operationId, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * List the status of operation.
     * @param location The region name which the operation will lookup into. (required)
     * @param operationId The target operation Id. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;OperationStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation completed. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The operation is ongoing. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationStatus> serversListOperationStatusesWithHttpInfo(String location, String operationId, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = serversListOperationStatusesValidateBeforeCall(location, operationId, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List the status of operation.
     * @param location The region name which the operation will lookup into. (required)
     * @param operationId The target operation Id. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The operation completed. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The operation is ongoing. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversListOperationStatusesAsync(String location, String operationId, String apiVersion, String subscriptionId, final ApiCallback<OperationStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = serversListOperationStatusesValidateBeforeCall(location, operationId, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<OperationStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serversListSkusForExisting
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversListSkusForExistingCall(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/skus"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serversListSkusForExistingValidateBeforeCall(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serversListSkusForExisting(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling serversListSkusForExisting(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serversListSkusForExisting(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serversListSkusForExisting(Async)");
        }

        return serversListSkusForExistingCall(resourceGroupName, serverName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Lists eligible SKUs for an Analysis Services resource.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return SkuEnumerationForExistingResourceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SkuEnumerationForExistingResourceResult serversListSkusForExisting(String resourceGroupName, String serverName, String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SkuEnumerationForExistingResourceResult> localVarResp = serversListSkusForExistingWithHttpInfo(resourceGroupName, serverName, apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists eligible SKUs for an Analysis Services resource.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;SkuEnumerationForExistingResourceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkuEnumerationForExistingResourceResult> serversListSkusForExistingWithHttpInfo(String resourceGroupName, String serverName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = serversListSkusForExistingValidateBeforeCall(resourceGroupName, serverName, apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SkuEnumerationForExistingResourceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists eligible SKUs for an Analysis Services resource.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversListSkusForExistingAsync(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, final ApiCallback<SkuEnumerationForExistingResourceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = serversListSkusForExistingValidateBeforeCall(resourceGroupName, serverName, apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SkuEnumerationForExistingResourceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serversResume
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversResumeCall(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/resume"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serversResumeValidateBeforeCall(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serversResume(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling serversResume(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serversResume(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serversResume(Async)");
        }

        return serversResumeCall(resourceGroupName, serverName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Resumes operation of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public void serversResume(String resourceGroupName, String serverName, String apiVersion, String subscriptionId) throws ApiException {
        serversResumeWithHttpInfo(resourceGroupName, serverName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Resumes operation of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> serversResumeWithHttpInfo(String resourceGroupName, String serverName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = serversResumeValidateBeforeCall(resourceGroupName, serverName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Resumes operation of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversResumeAsync(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = serversResumeValidateBeforeCall(resourceGroupName, serverName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for serversSuspend
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversSuspendCall(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}/suspend"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serversSuspendValidateBeforeCall(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serversSuspend(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling serversSuspend(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serversSuspend(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serversSuspend(Async)");
        }

        return serversSuspendCall(resourceGroupName, serverName, apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Suspends operation of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
     </table>
     */
    public void serversSuspend(String resourceGroupName, String serverName, String apiVersion, String subscriptionId) throws ApiException {
        serversSuspendWithHttpInfo(resourceGroupName, serverName, apiVersion, subscriptionId);
    }

    /**
     * 
     * Suspends operation of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> serversSuspendWithHttpInfo(String resourceGroupName, String serverName, String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = serversSuspendValidateBeforeCall(resourceGroupName, serverName, apiVersion, subscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Suspends operation of the specified Analysis Services server instance.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversSuspendAsync(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = serversSuspendValidateBeforeCall(resourceGroupName, serverName, apiVersion, subscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for serversUpdate
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param serverUpdateParameters Request object that contains the updated information for the server. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversUpdateCall(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, AnalysisServicesServerUpdateParameters serverUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serverUpdateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AnalysisServices/servers/{serverName}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serverName" + "}", localVarApiClient.escapeString(serverName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serversUpdateValidateBeforeCall(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, AnalysisServicesServerUpdateParameters serverUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling serversUpdate(Async)");
        }

        // verify the required parameter 'serverName' is set
        if (serverName == null) {
            throw new ApiException("Missing the required parameter 'serverName' when calling serversUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling serversUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling serversUpdate(Async)");
        }

        // verify the required parameter 'serverUpdateParameters' is set
        if (serverUpdateParameters == null) {
            throw new ApiException("Missing the required parameter 'serverUpdateParameters' when calling serversUpdate(Async)");
        }

        return serversUpdateCall(resourceGroupName, serverName, apiVersion, subscriptionId, serverUpdateParameters, _callback);

    }

    /**
     * 
     * Updates the current state of the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param serverUpdateParameters Request object that contains the updated information for the server. (required)
     * @return AnalysisServicesServer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public AnalysisServicesServer serversUpdate(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, AnalysisServicesServerUpdateParameters serverUpdateParameters) throws ApiException {
        ApiResponse<AnalysisServicesServer> localVarResp = serversUpdateWithHttpInfo(resourceGroupName, serverName, apiVersion, subscriptionId, serverUpdateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the current state of the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param serverUpdateParameters Request object that contains the updated information for the server. (required)
     * @return ApiResponse&lt;AnalysisServicesServer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnalysisServicesServer> serversUpdateWithHttpInfo(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, AnalysisServicesServerUpdateParameters serverUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = serversUpdateValidateBeforeCall(resourceGroupName, serverName, apiVersion, subscriptionId, serverUpdateParameters, null);
        Type localVarReturnType = new TypeToken<AnalysisServicesServer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the current state of the specified Analysis Services server.
     * @param resourceGroupName The name of the Azure Resource group of which a given Analysis Services server is part. This name must be at least 1 character in length, and no more than 90. (required)
     * @param serverName The name of the Analysis Services server. It must be at least 3 characters in length, and no more than 63. (required)
     * @param apiVersion The client API version. (required)
     * @param subscriptionId A unique identifier for a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param serverUpdateParameters Request object that contains the updated information for the server. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serversUpdateAsync(String resourceGroupName, String serverName, String apiVersion, String subscriptionId, AnalysisServicesServerUpdateParameters serverUpdateParameters, final ApiCallback<AnalysisServicesServer> _callback) throws ApiException {

        okhttp3.Call localVarCall = serversUpdateValidateBeforeCall(resourceGroupName, serverName, apiVersion, subscriptionId, serverUpdateParameters, _callback);
        Type localVarReturnType = new TypeToken<AnalysisServicesServer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
