/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPrivateLinkResourcesApi_H
#define OAI_OAIPrivateLinkResourcesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPrivateLinkResource.h"
#include "OAIPrivateLinkResourceListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPrivateLinkResourcesApi : public QObject {
    Q_OBJECT

public:
    OAIPrivateLinkResourcesApi(const int timeOut = 0);
    ~OAIPrivateLinkResourcesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void privateLinkResourcesGet(const QString &resource_group_name, const QString &server_name, const QString &group_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void privateLinkResourcesListByServer(const QString &resource_group_name, const QString &server_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void privateLinkResourcesGetCallback(OAIHttpRequestWorker *worker);
    void privateLinkResourcesListByServerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void privateLinkResourcesGetSignal(OAIPrivateLinkResource summary);
    void privateLinkResourcesListByServerSignal(OAIPrivateLinkResourceListResult summary);


    void privateLinkResourcesGetSignalFull(OAIHttpRequestWorker *worker, OAIPrivateLinkResource summary);
    void privateLinkResourcesListByServerSignalFull(OAIHttpRequestWorker *worker, OAIPrivateLinkResourceListResult summary);

    Q_DECL_DEPRECATED_X("Use privateLinkResourcesGetSignalError() instead")
    void privateLinkResourcesGetSignalE(OAIPrivateLinkResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkResourcesGetSignalError(OAIPrivateLinkResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkResourcesListByServerSignalError() instead")
    void privateLinkResourcesListByServerSignalE(OAIPrivateLinkResourceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkResourcesListByServerSignalError(OAIPrivateLinkResourceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use privateLinkResourcesGetSignalErrorFull() instead")
    void privateLinkResourcesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkResourcesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privateLinkResourcesListByServerSignalErrorFull() instead")
    void privateLinkResourcesListByServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privateLinkResourcesListByServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
