/**
 * DeploymentAdminClient
 * Deployment Admin Client.
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProductDeploymentResourceEntity from '../model/ProductDeploymentResourceEntity';
import ProductDeploymentsBootStrapRequest from '../model/ProductDeploymentsBootStrapRequest';
import ProductDeploymentsDeployRequest from '../model/ProductDeploymentsDeployRequest';
import ProductDeploymentsList from '../model/ProductDeploymentsList';
import ProductDeploymentsUnlockRequest from '../model/ProductDeploymentsUnlockRequest';

/**
* ProductDeployments service.
* @module api/ProductDeploymentsApi
* @version 2019-01-01
*/
export default class ProductDeploymentsApi {

    /**
    * Constructs a new ProductDeploymentsApi. 
    * @alias module:api/ProductDeploymentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productDeploymentsBootStrap operation.
     * @callback module:api/ProductDeploymentsApi~productDeploymentsBootStrapCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invokes bootstrap action on the product deployment
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} productId The product identifier.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/ProductDeploymentsBootStrapRequest} bootstrapActionParameter Represents bootstrap action parameter
     * @param {module:api/ProductDeploymentsApi~productDeploymentsBootStrapCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productDeploymentsBootStrap(subscriptionId, productId, apiVersion, bootstrapActionParameter, callback) {
      let postBody = bootstrapActionParameter;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling productDeploymentsBootStrap");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productDeploymentsBootStrap");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productDeploymentsBootStrap");
      }
      // verify the required parameter 'bootstrapActionParameter' is set
      if (bootstrapActionParameter === undefined || bootstrapActionParameter === null) {
        throw new Error("Missing the required parameter 'bootstrapActionParameter' when calling productDeploymentsBootStrap");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'productId': productId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Deployment.Admin/locations/global/productDeployments/{productId}/bootstrap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productDeploymentsDeploy operation.
     * @callback module:api/ProductDeploymentsApi~productDeploymentsDeployCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invokes deploy action on the product
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} productId The product identifier.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/ProductDeploymentsDeployRequest} deployActionParameter Represents bootstrap action parameter
     * @param {module:api/ProductDeploymentsApi~productDeploymentsDeployCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productDeploymentsDeploy(subscriptionId, productId, apiVersion, deployActionParameter, callback) {
      let postBody = deployActionParameter;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling productDeploymentsDeploy");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productDeploymentsDeploy");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productDeploymentsDeploy");
      }
      // verify the required parameter 'deployActionParameter' is set
      if (deployActionParameter === undefined || deployActionParameter === null) {
        throw new Error("Missing the required parameter 'deployActionParameter' when calling productDeploymentsDeploy");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'productId': productId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Deployment.Admin/locations/global/productDeployments/{productId}/deploy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productDeploymentsGet operation.
     * @callback module:api/ProductDeploymentsApi~productDeploymentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductDeploymentResourceEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invokes bootstrap action on the product deployment
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {String} productId The product identifier.
     * @param {module:api/ProductDeploymentsApi~productDeploymentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductDeploymentResourceEntity}
     */
    productDeploymentsGet(subscriptionId, apiVersion, productId, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling productDeploymentsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productDeploymentsGet");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productDeploymentsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'productId': productId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductDeploymentResourceEntity;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Deployment.Admin/locations/global/productDeployments/{productId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productDeploymentsList operation.
     * @callback module:api/ProductDeploymentsApi~productDeploymentsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductDeploymentsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invokes bootstrap action on the product deployment
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/ProductDeploymentsApi~productDeploymentsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductDeploymentsList}
     */
    productDeploymentsList(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling productDeploymentsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productDeploymentsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductDeploymentsList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Deployment.Admin/locations/global/productDeployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productDeploymentsLock operation.
     * @callback module:api/ProductDeploymentsApi~productDeploymentsLockCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * locks the product subscription
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} productId The product identifier.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/ProductDeploymentsApi~productDeploymentsLockCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productDeploymentsLock(subscriptionId, productId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling productDeploymentsLock");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productDeploymentsLock");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productDeploymentsLock");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'productId': productId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Deployment.Admin/locations/global/productDeployments/{productId}/lock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productDeploymentsRemove operation.
     * @callback module:api/ProductDeploymentsApi~productDeploymentsRemoveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invokes remove action on the product deployment
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} productId The product identifier.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/ProductDeploymentsApi~productDeploymentsRemoveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productDeploymentsRemove(subscriptionId, productId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling productDeploymentsRemove");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productDeploymentsRemove");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productDeploymentsRemove");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'productId': productId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Deployment.Admin/locations/global/productDeployments/{productId}/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productDeploymentsRotateSecrets operation.
     * @callback module:api/ProductDeploymentsApi~productDeploymentsRotateSecretsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invokes rotate secrets action on the product deployment
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} productId The product identifier.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/ProductDeploymentsApi~productDeploymentsRotateSecretsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productDeploymentsRotateSecrets(subscriptionId, productId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling productDeploymentsRotateSecrets");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productDeploymentsRotateSecrets");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productDeploymentsRotateSecrets");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'productId': productId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Deployment.Admin/locations/global/productDeployments/{productId}/rotateSecrets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productDeploymentsUnlock operation.
     * @callback module:api/ProductDeploymentsApi~productDeploymentsUnlockCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlocks the product subscription
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} productId The product identifier.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/ProductDeploymentsUnlockRequest} unlockActionParameter Represents bootstrap action parameter
     * @param {module:api/ProductDeploymentsApi~productDeploymentsUnlockCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productDeploymentsUnlock(subscriptionId, productId, apiVersion, unlockActionParameter, callback) {
      let postBody = unlockActionParameter;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling productDeploymentsUnlock");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productDeploymentsUnlock");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productDeploymentsUnlock");
      }
      // verify the required parameter 'unlockActionParameter' is set
      if (unlockActionParameter === undefined || unlockActionParameter === null) {
        throw new Error("Missing the required parameter 'unlockActionParameter' when calling productDeploymentsUnlock");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'productId': productId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Deployment.Admin/locations/global/productDeployments/{productId}/unlock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
