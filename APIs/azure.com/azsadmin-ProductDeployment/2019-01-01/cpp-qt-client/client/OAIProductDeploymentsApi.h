/**
 * DeploymentAdminClient
 * Deployment Admin Client.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProductDeploymentsApi_H
#define OAI_OAIProductDeploymentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIProductDeploymentResourceEntity.h"
#include "OAIProductDeploymentsList.h"
#include "OAIProductDeployments_BootStrap_request.h"
#include "OAIProductDeployments_Deploy_request.h"
#include "OAIProductDeployments_Unlock_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProductDeploymentsApi : public QObject {
    Q_OBJECT

public:
    OAIProductDeploymentsApi(const int timeOut = 0);
    ~OAIProductDeploymentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  bootstrap_action_parameter OAIProductDeployments_BootStrap_request [required]
    */
    virtual void productDeploymentsBootStrap(const QString &subscription_id, const QString &product_id, const QString &api_version, const OAIProductDeployments_BootStrap_request &bootstrap_action_parameter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  deploy_action_parameter OAIProductDeployments_Deploy_request [required]
    */
    virtual void productDeploymentsDeploy(const QString &subscription_id, const QString &product_id, const QString &api_version, const OAIProductDeployments_Deploy_request &deploy_action_parameter);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  product_id QString [required]
    */
    virtual void productDeploymentsGet(const QString &subscription_id, const QString &api_version, const QString &product_id);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void productDeploymentsList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void productDeploymentsLock(const QString &subscription_id, const QString &product_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void productDeploymentsRemove(const QString &subscription_id, const QString &product_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void productDeploymentsRotateSecrets(const QString &subscription_id, const QString &product_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  unlock_action_parameter OAIProductDeployments_Unlock_request [required]
    */
    virtual void productDeploymentsUnlock(const QString &subscription_id, const QString &product_id, const QString &api_version, const OAIProductDeployments_Unlock_request &unlock_action_parameter);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void productDeploymentsBootStrapCallback(OAIHttpRequestWorker *worker);
    void productDeploymentsDeployCallback(OAIHttpRequestWorker *worker);
    void productDeploymentsGetCallback(OAIHttpRequestWorker *worker);
    void productDeploymentsListCallback(OAIHttpRequestWorker *worker);
    void productDeploymentsLockCallback(OAIHttpRequestWorker *worker);
    void productDeploymentsRemoveCallback(OAIHttpRequestWorker *worker);
    void productDeploymentsRotateSecretsCallback(OAIHttpRequestWorker *worker);
    void productDeploymentsUnlockCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void productDeploymentsBootStrapSignal();
    void productDeploymentsDeploySignal();
    void productDeploymentsGetSignal(OAIProductDeploymentResourceEntity summary);
    void productDeploymentsListSignal(OAIProductDeploymentsList summary);
    void productDeploymentsLockSignal();
    void productDeploymentsRemoveSignal();
    void productDeploymentsRotateSecretsSignal();
    void productDeploymentsUnlockSignal();


    void productDeploymentsBootStrapSignalFull(OAIHttpRequestWorker *worker);
    void productDeploymentsDeploySignalFull(OAIHttpRequestWorker *worker);
    void productDeploymentsGetSignalFull(OAIHttpRequestWorker *worker, OAIProductDeploymentResourceEntity summary);
    void productDeploymentsListSignalFull(OAIHttpRequestWorker *worker, OAIProductDeploymentsList summary);
    void productDeploymentsLockSignalFull(OAIHttpRequestWorker *worker);
    void productDeploymentsRemoveSignalFull(OAIHttpRequestWorker *worker);
    void productDeploymentsRotateSecretsSignalFull(OAIHttpRequestWorker *worker);
    void productDeploymentsUnlockSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use productDeploymentsBootStrapSignalError() instead")
    void productDeploymentsBootStrapSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productDeploymentsBootStrapSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productDeploymentsDeploySignalError() instead")
    void productDeploymentsDeploySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productDeploymentsDeploySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productDeploymentsGetSignalError() instead")
    void productDeploymentsGetSignalE(OAIProductDeploymentResourceEntity summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productDeploymentsGetSignalError(OAIProductDeploymentResourceEntity summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productDeploymentsListSignalError() instead")
    void productDeploymentsListSignalE(OAIProductDeploymentsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productDeploymentsListSignalError(OAIProductDeploymentsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productDeploymentsLockSignalError() instead")
    void productDeploymentsLockSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productDeploymentsLockSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productDeploymentsRemoveSignalError() instead")
    void productDeploymentsRemoveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productDeploymentsRemoveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productDeploymentsRotateSecretsSignalError() instead")
    void productDeploymentsRotateSecretsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productDeploymentsRotateSecretsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productDeploymentsUnlockSignalError() instead")
    void productDeploymentsUnlockSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productDeploymentsUnlockSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use productDeploymentsBootStrapSignalErrorFull() instead")
    void productDeploymentsBootStrapSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productDeploymentsBootStrapSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productDeploymentsDeploySignalErrorFull() instead")
    void productDeploymentsDeploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productDeploymentsDeploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productDeploymentsGetSignalErrorFull() instead")
    void productDeploymentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productDeploymentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productDeploymentsListSignalErrorFull() instead")
    void productDeploymentsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productDeploymentsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productDeploymentsLockSignalErrorFull() instead")
    void productDeploymentsLockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productDeploymentsLockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productDeploymentsRemoveSignalErrorFull() instead")
    void productDeploymentsRemoveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productDeploymentsRemoveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productDeploymentsRotateSecretsSignalErrorFull() instead")
    void productDeploymentsRotateSecretsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productDeploymentsRotateSecretsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productDeploymentsUnlockSignalErrorFull() instead")
    void productDeploymentsUnlockSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productDeploymentsUnlockSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
