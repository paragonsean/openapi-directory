/**
 * DeploymentAdminClient
 * Deployment Admin Client.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductDeploymentsProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductDeploymentsProperties::OAIProductDeploymentsProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductDeploymentsProperties::OAIProductDeploymentsProperties() {
    this->initializeModel();
}

OAIProductDeploymentsProperties::~OAIProductDeploymentsProperties() {}

void OAIProductDeploymentsProperties::initializeModel() {

    m_deployment_isSet = false;
    m_deployment_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_external_access_isSet = false;
    m_external_access_isValid = false;

    m_internal_state_isSet = false;
    m_internal_state_isValid = false;

    m_last_successful_deployment_isSet = false;
    m_last_successful_deployment_isValid = false;

    m_product_id_isSet = false;
    m_product_id_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_secret_rotation_isSet = false;
    m_secret_rotation_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;
}

void OAIProductDeploymentsProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductDeploymentsProperties::fromJsonObject(QJsonObject json) {

    m_deployment_isValid = ::OpenAPI::fromJsonValue(m_deployment, json[QString("deployment")]);
    m_deployment_isSet = !json[QString("deployment")].isNull() && m_deployment_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_external_access_isValid = ::OpenAPI::fromJsonValue(m_external_access, json[QString("externalAccess")]);
    m_external_access_isSet = !json[QString("externalAccess")].isNull() && m_external_access_isValid;

    m_internal_state_isValid = ::OpenAPI::fromJsonValue(m_internal_state, json[QString("internalState")]);
    m_internal_state_isSet = !json[QString("internalState")].isNull() && m_internal_state_isValid;

    m_last_successful_deployment_isValid = ::OpenAPI::fromJsonValue(m_last_successful_deployment, json[QString("lastSuccessfulDeployment")]);
    m_last_successful_deployment_isSet = !json[QString("lastSuccessfulDeployment")].isNull() && m_last_successful_deployment_isValid;

    m_product_id_isValid = ::OpenAPI::fromJsonValue(m_product_id, json[QString("productId")]);
    m_product_id_isSet = !json[QString("productId")].isNull() && m_product_id_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_secret_rotation_isValid = ::OpenAPI::fromJsonValue(m_secret_rotation, json[QString("secretRotation")]);
    m_secret_rotation_isSet = !json[QString("secretRotation")].isNull() && m_secret_rotation_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;
}

QString OAIProductDeploymentsProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductDeploymentsProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_deployment.isSet()) {
        obj.insert(QString("deployment"), ::OpenAPI::toJsonValue(m_deployment));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_external_access.isSet()) {
        obj.insert(QString("externalAccess"), ::OpenAPI::toJsonValue(m_external_access));
    }
    if (m_internal_state.isSet()) {
        obj.insert(QString("internalState"), ::OpenAPI::toJsonValue(m_internal_state));
    }
    if (m_last_successful_deployment.isSet()) {
        obj.insert(QString("lastSuccessfulDeployment"), ::OpenAPI::toJsonValue(m_last_successful_deployment));
    }
    if (m_product_id_isSet) {
        obj.insert(QString("productId"), ::OpenAPI::toJsonValue(m_product_id));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_secret_rotation.isSet()) {
        obj.insert(QString("secretRotation"), ::OpenAPI::toJsonValue(m_secret_rotation));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    return obj;
}

OAIDeploymentInfo OAIProductDeploymentsProperties::getDeployment() const {
    return m_deployment;
}
void OAIProductDeploymentsProperties::setDeployment(const OAIDeploymentInfo &deployment) {
    m_deployment = deployment;
    m_deployment_isSet = true;
}

bool OAIProductDeploymentsProperties::is_deployment_Set() const{
    return m_deployment_isSet;
}

bool OAIProductDeploymentsProperties::is_deployment_Valid() const{
    return m_deployment_isValid;
}

OAIProductDeploymentsProperties_error OAIProductDeploymentsProperties::getError() const {
    return m_error;
}
void OAIProductDeploymentsProperties::setError(const OAIProductDeploymentsProperties_error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIProductDeploymentsProperties::is_error_Set() const{
    return m_error_isSet;
}

bool OAIProductDeploymentsProperties::is_error_Valid() const{
    return m_error_isValid;
}

OAIExternalAccessInfo OAIProductDeploymentsProperties::getExternalAccess() const {
    return m_external_access;
}
void OAIProductDeploymentsProperties::setExternalAccess(const OAIExternalAccessInfo &external_access) {
    m_external_access = external_access;
    m_external_access_isSet = true;
}

bool OAIProductDeploymentsProperties::is_external_access_Set() const{
    return m_external_access_isSet;
}

bool OAIProductDeploymentsProperties::is_external_access_Valid() const{
    return m_external_access_isValid;
}

OAIProductDeploymentsInternalState OAIProductDeploymentsProperties::getInternalState() const {
    return m_internal_state;
}
void OAIProductDeploymentsProperties::setInternalState(const OAIProductDeploymentsInternalState &internal_state) {
    m_internal_state = internal_state;
    m_internal_state_isSet = true;
}

bool OAIProductDeploymentsProperties::is_internal_state_Set() const{
    return m_internal_state_isSet;
}

bool OAIProductDeploymentsProperties::is_internal_state_Valid() const{
    return m_internal_state_isValid;
}

OAIDeploymentInfo OAIProductDeploymentsProperties::getLastSuccessfulDeployment() const {
    return m_last_successful_deployment;
}
void OAIProductDeploymentsProperties::setLastSuccessfulDeployment(const OAIDeploymentInfo &last_successful_deployment) {
    m_last_successful_deployment = last_successful_deployment;
    m_last_successful_deployment_isSet = true;
}

bool OAIProductDeploymentsProperties::is_last_successful_deployment_Set() const{
    return m_last_successful_deployment_isSet;
}

bool OAIProductDeploymentsProperties::is_last_successful_deployment_Valid() const{
    return m_last_successful_deployment_isValid;
}

QString OAIProductDeploymentsProperties::getProductId() const {
    return m_product_id;
}
void OAIProductDeploymentsProperties::setProductId(const QString &product_id) {
    m_product_id = product_id;
    m_product_id_isSet = true;
}

bool OAIProductDeploymentsProperties::is_product_id_Set() const{
    return m_product_id_isSet;
}

bool OAIProductDeploymentsProperties::is_product_id_Valid() const{
    return m_product_id_isValid;
}

QString OAIProductDeploymentsProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIProductDeploymentsProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIProductDeploymentsProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIProductDeploymentsProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAISecretRotationInfo OAIProductDeploymentsProperties::getSecretRotation() const {
    return m_secret_rotation;
}
void OAIProductDeploymentsProperties::setSecretRotation(const OAISecretRotationInfo &secret_rotation) {
    m_secret_rotation = secret_rotation;
    m_secret_rotation_isSet = true;
}

bool OAIProductDeploymentsProperties::is_secret_rotation_Set() const{
    return m_secret_rotation_isSet;
}

bool OAIProductDeploymentsProperties::is_secret_rotation_Valid() const{
    return m_secret_rotation_isValid;
}

OAIDeploymentStatus OAIProductDeploymentsProperties::getStatus() const {
    return m_status;
}
void OAIProductDeploymentsProperties::setStatus(const OAIDeploymentStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIProductDeploymentsProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIProductDeploymentsProperties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIProductDeploymentsProperties::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIProductDeploymentsProperties::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIProductDeploymentsProperties::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIProductDeploymentsProperties::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

bool OAIProductDeploymentsProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deployment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_access.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_successful_deployment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_rotation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductDeploymentsProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
