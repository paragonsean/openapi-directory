/**
 * DeploymentAdminClient
 * Deployment Admin Client.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductDeploymentsInternalState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductDeploymentsInternalState::OAIProductDeploymentsInternalState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductDeploymentsInternalState::OAIProductDeploymentsInternalState() {
    this->initializeModel();
}

OAIProductDeploymentsInternalState::~OAIProductDeploymentsInternalState() {}

void OAIProductDeploymentsInternalState::initializeModel() {

    m_external_access_role_assignment_id_isSet = false;
    m_external_access_role_assignment_id_isValid = false;

    m_intermediate_vault_id_isSet = false;
    m_intermediate_vault_id_isValid = false;

    m_intermediate_vault_uri_isSet = false;
    m_intermediate_vault_uri_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;
}

void OAIProductDeploymentsInternalState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductDeploymentsInternalState::fromJsonObject(QJsonObject json) {

    m_external_access_role_assignment_id_isValid = ::OpenAPI::fromJsonValue(m_external_access_role_assignment_id, json[QString("externalAccessRoleAssignmentId")]);
    m_external_access_role_assignment_id_isSet = !json[QString("externalAccessRoleAssignmentId")].isNull() && m_external_access_role_assignment_id_isValid;

    m_intermediate_vault_id_isValid = ::OpenAPI::fromJsonValue(m_intermediate_vault_id, json[QString("intermediateVaultId")]);
    m_intermediate_vault_id_isSet = !json[QString("intermediateVaultId")].isNull() && m_intermediate_vault_id_isValid;

    m_intermediate_vault_uri_isValid = ::OpenAPI::fromJsonValue(m_intermediate_vault_uri, json[QString("intermediateVaultUri")]);
    m_intermediate_vault_uri_isSet = !json[QString("intermediateVaultUri")].isNull() && m_intermediate_vault_uri_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;
}

QString OAIProductDeploymentsInternalState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductDeploymentsInternalState::asJsonObject() const {
    QJsonObject obj;
    if (m_external_access_role_assignment_id_isSet) {
        obj.insert(QString("externalAccessRoleAssignmentId"), ::OpenAPI::toJsonValue(m_external_access_role_assignment_id));
    }
    if (m_intermediate_vault_id_isSet) {
        obj.insert(QString("intermediateVaultId"), ::OpenAPI::toJsonValue(m_intermediate_vault_id));
    }
    if (m_intermediate_vault_uri_isSet) {
        obj.insert(QString("intermediateVaultUri"), ::OpenAPI::toJsonValue(m_intermediate_vault_uri));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    return obj;
}

QString OAIProductDeploymentsInternalState::getExternalAccessRoleAssignmentId() const {
    return m_external_access_role_assignment_id;
}
void OAIProductDeploymentsInternalState::setExternalAccessRoleAssignmentId(const QString &external_access_role_assignment_id) {
    m_external_access_role_assignment_id = external_access_role_assignment_id;
    m_external_access_role_assignment_id_isSet = true;
}

bool OAIProductDeploymentsInternalState::is_external_access_role_assignment_id_Set() const{
    return m_external_access_role_assignment_id_isSet;
}

bool OAIProductDeploymentsInternalState::is_external_access_role_assignment_id_Valid() const{
    return m_external_access_role_assignment_id_isValid;
}

QString OAIProductDeploymentsInternalState::getIntermediateVaultId() const {
    return m_intermediate_vault_id;
}
void OAIProductDeploymentsInternalState::setIntermediateVaultId(const QString &intermediate_vault_id) {
    m_intermediate_vault_id = intermediate_vault_id;
    m_intermediate_vault_id_isSet = true;
}

bool OAIProductDeploymentsInternalState::is_intermediate_vault_id_Set() const{
    return m_intermediate_vault_id_isSet;
}

bool OAIProductDeploymentsInternalState::is_intermediate_vault_id_Valid() const{
    return m_intermediate_vault_id_isValid;
}

QString OAIProductDeploymentsInternalState::getIntermediateVaultUri() const {
    return m_intermediate_vault_uri;
}
void OAIProductDeploymentsInternalState::setIntermediateVaultUri(const QString &intermediate_vault_uri) {
    m_intermediate_vault_uri = intermediate_vault_uri;
    m_intermediate_vault_uri_isSet = true;
}

bool OAIProductDeploymentsInternalState::is_intermediate_vault_uri_Set() const{
    return m_intermediate_vault_uri_isSet;
}

bool OAIProductDeploymentsInternalState::is_intermediate_vault_uri_Valid() const{
    return m_intermediate_vault_uri_isValid;
}

QString OAIProductDeploymentsInternalState::getJobId() const {
    return m_job_id;
}
void OAIProductDeploymentsInternalState::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIProductDeploymentsInternalState::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIProductDeploymentsInternalState::is_job_id_Valid() const{
    return m_job_id_isValid;
}

bool OAIProductDeploymentsInternalState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_external_access_role_assignment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intermediate_vault_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_intermediate_vault_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductDeploymentsInternalState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
