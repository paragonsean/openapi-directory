/**
 * DeploymentAdminClient
 * Deployment Admin Client.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploymentStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploymentStatus::OAIDeploymentStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploymentStatus::OAIDeploymentStatus() {
    this->initializeModel();
}

OAIDeploymentStatus::~OAIDeploymentStatus() {}

void OAIDeploymentStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDeploymentStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDeploymentStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("None", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentStatus::NONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Bootstrapping", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentStatus::BOOTSTRAPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BootstrapSucceeded", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentStatus::BOOTSTRAPSUCCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BootstrapFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentStatus::BOOTSTRAPFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Deploying", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentStatus::DEPLOYING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DeploymentSucceeded", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentStatus::DEPLOYMENTSUCCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DeploymentFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentStatus::DEPLOYMENTFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Updating", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentStatus::UPDATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UpdateSucceeded", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentStatus::UPDATESUCCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UpdateFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentStatus::UPDATEFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Removing", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentStatus::REMOVING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RemoveFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentStatus::REMOVEFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SecretRotationInProgress", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentStatus::SECRETROTATIONINPROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SecretRotationSucceeded", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentStatus::SECRETROTATIONSUCCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SecretRotationFailed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentStatus::SECRETROTATIONFAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Migrated", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDeploymentStatus::MIGRATED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDeploymentStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDeploymentStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDeploymentStatus::NONE:
            val = "None";
            break;
        case eOAIDeploymentStatus::BOOTSTRAPPING:
            val = "Bootstrapping";
            break;
        case eOAIDeploymentStatus::BOOTSTRAPSUCCEEDED:
            val = "BootstrapSucceeded";
            break;
        case eOAIDeploymentStatus::BOOTSTRAPFAILED:
            val = "BootstrapFailed";
            break;
        case eOAIDeploymentStatus::DEPLOYING:
            val = "Deploying";
            break;
        case eOAIDeploymentStatus::DEPLOYMENTSUCCEEDED:
            val = "DeploymentSucceeded";
            break;
        case eOAIDeploymentStatus::DEPLOYMENTFAILED:
            val = "DeploymentFailed";
            break;
        case eOAIDeploymentStatus::UPDATING:
            val = "Updating";
            break;
        case eOAIDeploymentStatus::UPDATESUCCEEDED:
            val = "UpdateSucceeded";
            break;
        case eOAIDeploymentStatus::UPDATEFAILED:
            val = "UpdateFailed";
            break;
        case eOAIDeploymentStatus::REMOVING:
            val = "Removing";
            break;
        case eOAIDeploymentStatus::REMOVEFAILED:
            val = "RemoveFailed";
            break;
        case eOAIDeploymentStatus::SECRETROTATIONINPROGRESS:
            val = "SecretRotationInProgress";
            break;
        case eOAIDeploymentStatus::SECRETROTATIONSUCCEEDED:
            val = "SecretRotationSucceeded";
            break;
        case eOAIDeploymentStatus::SECRETROTATIONFAILED:
            val = "SecretRotationFailed";
            break;
        case eOAIDeploymentStatus::MIGRATED:
            val = "Migrated";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDeploymentStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDeploymentStatus::eOAIDeploymentStatus OAIDeploymentStatus::getValue() const {
    return m_value;
}

void OAIDeploymentStatus::setValue(const OAIDeploymentStatus::eOAIDeploymentStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDeploymentStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIDeploymentStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
