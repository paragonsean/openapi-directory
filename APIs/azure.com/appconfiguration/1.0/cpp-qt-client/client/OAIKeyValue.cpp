/**
 * Azure App Configuration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyValue::OAIKeyValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyValue::OAIKeyValue() {
    this->initializeModel();
}

OAIKeyValue::~OAIKeyValue() {}

void OAIKeyValue::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_locked_isSet = false;
    m_locked_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIKeyValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyValue::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("content_type")]);
    m_content_type_isSet = !json[QString("content_type")].isNull() && m_content_type_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("last_modified")]);
    m_last_modified_isSet = !json[QString("last_modified")].isNull() && m_last_modified_isValid;

    m_locked_isValid = ::OpenAPI::fromJsonValue(m_locked, json[QString("locked")]);
    m_locked_isSet = !json[QString("locked")].isNull() && m_locked_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIKeyValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyValue::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("content_type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_last_modified_isSet) {
        obj.insert(QString("last_modified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_locked_isSet) {
        obj.insert(QString("locked"), ::OpenAPI::toJsonValue(m_locked));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIKeyValue::getContentType() const {
    return m_content_type;
}
void OAIKeyValue::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIKeyValue::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIKeyValue::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIKeyValue::getEtag() const {
    return m_etag;
}
void OAIKeyValue::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIKeyValue::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIKeyValue::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIKeyValue::getKey() const {
    return m_key;
}
void OAIKeyValue::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIKeyValue::is_key_Set() const{
    return m_key_isSet;
}

bool OAIKeyValue::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIKeyValue::getLabel() const {
    return m_label;
}
void OAIKeyValue::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIKeyValue::is_label_Set() const{
    return m_label_isSet;
}

bool OAIKeyValue::is_label_Valid() const{
    return m_label_isValid;
}

QDateTime OAIKeyValue::getLastModified() const {
    return m_last_modified;
}
void OAIKeyValue::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAIKeyValue::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAIKeyValue::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

bool OAIKeyValue::isLocked() const {
    return m_locked;
}
void OAIKeyValue::setLocked(const bool &locked) {
    m_locked = locked;
    m_locked_isSet = true;
}

bool OAIKeyValue::is_locked_Set() const{
    return m_locked_isSet;
}

bool OAIKeyValue::is_locked_Valid() const{
    return m_locked_isValid;
}

QMap<QString, QString> OAIKeyValue::getTags() const {
    return m_tags;
}
void OAIKeyValue::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIKeyValue::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIKeyValue::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIKeyValue::getValue() const {
    return m_value;
}
void OAIKeyValue::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIKeyValue::is_value_Set() const{
    return m_value_isSet;
}

bool OAIKeyValue::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIKeyValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
