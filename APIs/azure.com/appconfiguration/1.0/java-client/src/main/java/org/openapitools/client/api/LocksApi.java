/*
 * Azure App Configuration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.KeyValue;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LocksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LocksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteLock
     * @param key The key of the key-value to unlock. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label, if any, of the key-value to unlock. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @param ifNoneMatch Used to perform an operation only if the targeted resource&#39;s etag does not match the value provided. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLockCall(String key, String apiVersion, String label, String syncToken, String ifMatch, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locks/{key}"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (syncToken != null) {
            localVarHeaderParams.put("Sync-Token", localVarApiClient.parameterToString(syncToken));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/vnd.microsoft.appconfig.kv+json",
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteLockValidateBeforeCall(String key, String apiVersion, String label, String syncToken, String ifMatch, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteLock(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deleteLock(Async)");
        }

        return deleteLockCall(key, apiVersion, label, syncToken, ifMatch, ifNoneMatch, _callback);

    }

    /**
     * Unlocks a key-value.
     * 
     * @param key The key of the key-value to unlock. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label, if any, of the key-value to unlock. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @param ifNoneMatch Used to perform an operation only if the targeted resource&#39;s etag does not match the value provided. (optional)
     * @return KeyValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public KeyValue deleteLock(String key, String apiVersion, String label, String syncToken, String ifMatch, String ifNoneMatch) throws ApiException {
        ApiResponse<KeyValue> localVarResp = deleteLockWithHttpInfo(key, apiVersion, label, syncToken, ifMatch, ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * Unlocks a key-value.
     * 
     * @param key The key of the key-value to unlock. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label, if any, of the key-value to unlock. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @param ifNoneMatch Used to perform an operation only if the targeted resource&#39;s etag does not match the value provided. (optional)
     * @return ApiResponse&lt;KeyValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyValue> deleteLockWithHttpInfo(String key, String apiVersion, String label, String syncToken, String ifMatch, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteLockValidateBeforeCall(key, apiVersion, label, syncToken, ifMatch, ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<KeyValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unlocks a key-value. (asynchronously)
     * 
     * @param key The key of the key-value to unlock. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label, if any, of the key-value to unlock. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @param ifNoneMatch Used to perform an operation only if the targeted resource&#39;s etag does not match the value provided. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteLockAsync(String key, String apiVersion, String label, String syncToken, String ifMatch, String ifNoneMatch, final ApiCallback<KeyValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteLockValidateBeforeCall(key, apiVersion, label, syncToken, ifMatch, ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<KeyValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putLock
     * @param key The key of the key-value to lock. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label, if any, of the key-value to lock. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @param ifNoneMatch Used to perform an operation only if the targeted resource&#39;s etag does not match the value provided. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putLockCall(String key, String apiVersion, String label, String syncToken, String ifMatch, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locks/{key}"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (syncToken != null) {
            localVarHeaderParams.put("Sync-Token", localVarApiClient.parameterToString(syncToken));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/vnd.microsoft.appconfig.kv+json",
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putLockValidateBeforeCall(String key, String apiVersion, String label, String syncToken, String ifMatch, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling putLock(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling putLock(Async)");
        }

        return putLockCall(key, apiVersion, label, syncToken, ifMatch, ifNoneMatch, _callback);

    }

    /**
     * Locks a key-value.
     * 
     * @param key The key of the key-value to lock. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label, if any, of the key-value to lock. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @param ifNoneMatch Used to perform an operation only if the targeted resource&#39;s etag does not match the value provided. (optional)
     * @return KeyValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public KeyValue putLock(String key, String apiVersion, String label, String syncToken, String ifMatch, String ifNoneMatch) throws ApiException {
        ApiResponse<KeyValue> localVarResp = putLockWithHttpInfo(key, apiVersion, label, syncToken, ifMatch, ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * Locks a key-value.
     * 
     * @param key The key of the key-value to lock. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label, if any, of the key-value to lock. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @param ifNoneMatch Used to perform an operation only if the targeted resource&#39;s etag does not match the value provided. (optional)
     * @return ApiResponse&lt;KeyValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyValue> putLockWithHttpInfo(String key, String apiVersion, String label, String syncToken, String ifMatch, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = putLockValidateBeforeCall(key, apiVersion, label, syncToken, ifMatch, ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<KeyValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Locks a key-value. (asynchronously)
     * 
     * @param key The key of the key-value to lock. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label, if any, of the key-value to lock. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @param ifNoneMatch Used to perform an operation only if the targeted resource&#39;s etag does not match the value provided. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putLockAsync(String key, String apiVersion, String label, String syncToken, String ifMatch, String ifNoneMatch, final ApiCallback<KeyValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = putLockValidateBeforeCall(key, apiVersion, label, syncToken, ifMatch, ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<KeyValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
