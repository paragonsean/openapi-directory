/*
 * Azure App Configuration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.KeyValue;
import org.openapitools.client.model.KeyValueListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class KeyValuesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public KeyValuesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public KeyValuesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for checkKeyValue
     * @param key The key of the key-value to retrieve. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label of the key-value to retrieve. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @param ifNoneMatch Used to perform an operation only if the targeted resource&#39;s etag does not match the value provided. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  * Last-Modified - A UTC datetime that specifies the last time the resource was modified. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkKeyValueCall(String key, String apiVersion, String label, String syncToken, String acceptDatetime, String ifMatch, String ifNoneMatch, List<String> $select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kv/{key}"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "$Select", $select));
        }

        if (syncToken != null) {
            localVarHeaderParams.put("Sync-Token", localVarApiClient.parameterToString(syncToken));
        }

        if (acceptDatetime != null) {
            localVarHeaderParams.put("Accept-Datetime", localVarApiClient.parameterToString(acceptDatetime));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkKeyValueValidateBeforeCall(String key, String apiVersion, String label, String syncToken, String acceptDatetime, String ifMatch, String ifNoneMatch, List<String> $select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling checkKeyValue(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling checkKeyValue(Async)");
        }

        return checkKeyValueCall(key, apiVersion, label, syncToken, acceptDatetime, ifMatch, ifNoneMatch, $select, _callback);

    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param key The key of the key-value to retrieve. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label of the key-value to retrieve. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @param ifNoneMatch Used to perform an operation only if the targeted resource&#39;s etag does not match the value provided. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  * Last-Modified - A UTC datetime that specifies the last time the resource was modified. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public void checkKeyValue(String key, String apiVersion, String label, String syncToken, String acceptDatetime, String ifMatch, String ifNoneMatch, List<String> $select) throws ApiException {
        checkKeyValueWithHttpInfo(key, apiVersion, label, syncToken, acceptDatetime, ifMatch, ifNoneMatch, $select);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param key The key of the key-value to retrieve. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label of the key-value to retrieve. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @param ifNoneMatch Used to perform an operation only if the targeted resource&#39;s etag does not match the value provided. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  * Last-Modified - A UTC datetime that specifies the last time the resource was modified. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> checkKeyValueWithHttpInfo(String key, String apiVersion, String label, String syncToken, String acceptDatetime, String ifMatch, String ifNoneMatch, List<String> $select) throws ApiException {
        okhttp3.Call localVarCall = checkKeyValueValidateBeforeCall(key, apiVersion, label, syncToken, acceptDatetime, ifMatch, ifNoneMatch, $select, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Requests the headers and status of the given resource. (asynchronously)
     * 
     * @param key The key of the key-value to retrieve. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label of the key-value to retrieve. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @param ifNoneMatch Used to perform an operation only if the targeted resource&#39;s etag does not match the value provided. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  * Last-Modified - A UTC datetime that specifies the last time the resource was modified. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkKeyValueAsync(String key, String apiVersion, String label, String syncToken, String acceptDatetime, String ifMatch, String ifNoneMatch, List<String> $select, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkKeyValueValidateBeforeCall(key, apiVersion, label, syncToken, acceptDatetime, ifMatch, ifNoneMatch, $select, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for checkKeyValues
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param key A filter used to match keys. (optional)
     * @param label A filter used to match labels (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param after Instructs the server to return elements that appear after the element referred to by the specified token. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkKeyValuesCall(String apiVersion, String key, String label, String syncToken, String after, String acceptDatetime, List<String> $select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("After", after));
        }

        if ($select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "$Select", $select));
        }

        if (syncToken != null) {
            localVarHeaderParams.put("Sync-Token", localVarApiClient.parameterToString(syncToken));
        }

        if (acceptDatetime != null) {
            localVarHeaderParams.put("Accept-Datetime", localVarApiClient.parameterToString(acceptDatetime));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkKeyValuesValidateBeforeCall(String apiVersion, String key, String label, String syncToken, String after, String acceptDatetime, List<String> $select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling checkKeyValues(Async)");
        }

        return checkKeyValuesCall(apiVersion, key, label, syncToken, after, acceptDatetime, $select, _callback);

    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param key A filter used to match keys. (optional)
     * @param label A filter used to match labels (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param after Instructs the server to return elements that appear after the element referred to by the specified token. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public void checkKeyValues(String apiVersion, String key, String label, String syncToken, String after, String acceptDatetime, List<String> $select) throws ApiException {
        checkKeyValuesWithHttpInfo(apiVersion, key, label, syncToken, after, acceptDatetime, $select);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param key A filter used to match keys. (optional)
     * @param label A filter used to match labels (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param after Instructs the server to return elements that appear after the element referred to by the specified token. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> checkKeyValuesWithHttpInfo(String apiVersion, String key, String label, String syncToken, String after, String acceptDatetime, List<String> $select) throws ApiException {
        okhttp3.Call localVarCall = checkKeyValuesValidateBeforeCall(apiVersion, key, label, syncToken, after, acceptDatetime, $select, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Requests the headers and status of the given resource. (asynchronously)
     * 
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param key A filter used to match keys. (optional)
     * @param label A filter used to match labels (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param after Instructs the server to return elements that appear after the element referred to by the specified token. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkKeyValuesAsync(String apiVersion, String key, String label, String syncToken, String after, String acceptDatetime, List<String> $select, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkKeyValuesValidateBeforeCall(apiVersion, key, label, syncToken, after, acceptDatetime, $select, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteKeyValue
     * @param key The key of the key-value to delete. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label of the key-value to delete. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteKeyValueCall(String key, String apiVersion, String label, String syncToken, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kv/{key}"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (syncToken != null) {
            localVarHeaderParams.put("Sync-Token", localVarApiClient.parameterToString(syncToken));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/vnd.microsoft.appconfig.kv+json",
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteKeyValueValidateBeforeCall(String key, String apiVersion, String label, String syncToken, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteKeyValue(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deleteKeyValue(Async)");
        }

        return deleteKeyValueCall(key, apiVersion, label, syncToken, ifMatch, _callback);

    }

    /**
     * Deletes a key-value.
     * 
     * @param key The key of the key-value to delete. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label of the key-value to delete. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @return KeyValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public KeyValue deleteKeyValue(String key, String apiVersion, String label, String syncToken, String ifMatch) throws ApiException {
        ApiResponse<KeyValue> localVarResp = deleteKeyValueWithHttpInfo(key, apiVersion, label, syncToken, ifMatch);
        return localVarResp.getData();
    }

    /**
     * Deletes a key-value.
     * 
     * @param key The key of the key-value to delete. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label of the key-value to delete. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @return ApiResponse&lt;KeyValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyValue> deleteKeyValueWithHttpInfo(String key, String apiVersion, String label, String syncToken, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = deleteKeyValueValidateBeforeCall(key, apiVersion, label, syncToken, ifMatch, null);
        Type localVarReturnType = new TypeToken<KeyValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a key-value. (asynchronously)
     * 
     * @param key The key of the key-value to delete. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label of the key-value to delete. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteKeyValueAsync(String key, String apiVersion, String label, String syncToken, String ifMatch, final ApiCallback<KeyValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteKeyValueValidateBeforeCall(key, apiVersion, label, syncToken, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<KeyValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getKeyValue
     * @param key The key of the key-value to retrieve. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label of the key-value to retrieve. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @param ifNoneMatch Used to perform an operation only if the targeted resource&#39;s etag does not match the value provided. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  * Last-Modified - A UTC datetime that specifies the last time the resource was modified. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeyValueCall(String key, String apiVersion, String label, String syncToken, String acceptDatetime, String ifMatch, String ifNoneMatch, List<String> $select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kv/{key}"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "$Select", $select));
        }

        if (syncToken != null) {
            localVarHeaderParams.put("Sync-Token", localVarApiClient.parameterToString(syncToken));
        }

        if (acceptDatetime != null) {
            localVarHeaderParams.put("Accept-Datetime", localVarApiClient.parameterToString(acceptDatetime));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/vnd.microsoft.appconfig.kv+json",
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKeyValueValidateBeforeCall(String key, String apiVersion, String label, String syncToken, String acceptDatetime, String ifMatch, String ifNoneMatch, List<String> $select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getKeyValue(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getKeyValue(Async)");
        }

        return getKeyValueCall(key, apiVersion, label, syncToken, acceptDatetime, ifMatch, ifNoneMatch, $select, _callback);

    }

    /**
     * Gets a single key-value.
     * 
     * @param key The key of the key-value to retrieve. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label of the key-value to retrieve. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @param ifNoneMatch Used to perform an operation only if the targeted resource&#39;s etag does not match the value provided. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @return KeyValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  * Last-Modified - A UTC datetime that specifies the last time the resource was modified. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public KeyValue getKeyValue(String key, String apiVersion, String label, String syncToken, String acceptDatetime, String ifMatch, String ifNoneMatch, List<String> $select) throws ApiException {
        ApiResponse<KeyValue> localVarResp = getKeyValueWithHttpInfo(key, apiVersion, label, syncToken, acceptDatetime, ifMatch, ifNoneMatch, $select);
        return localVarResp.getData();
    }

    /**
     * Gets a single key-value.
     * 
     * @param key The key of the key-value to retrieve. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label of the key-value to retrieve. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @param ifNoneMatch Used to perform an operation only if the targeted resource&#39;s etag does not match the value provided. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @return ApiResponse&lt;KeyValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  * Last-Modified - A UTC datetime that specifies the last time the resource was modified. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyValue> getKeyValueWithHttpInfo(String key, String apiVersion, String label, String syncToken, String acceptDatetime, String ifMatch, String ifNoneMatch, List<String> $select) throws ApiException {
        okhttp3.Call localVarCall = getKeyValueValidateBeforeCall(key, apiVersion, label, syncToken, acceptDatetime, ifMatch, ifNoneMatch, $select, null);
        Type localVarReturnType = new TypeToken<KeyValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a single key-value. (asynchronously)
     * 
     * @param key The key of the key-value to retrieve. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label of the key-value to retrieve. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @param ifNoneMatch Used to perform an operation only if the targeted resource&#39;s etag does not match the value provided. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  * Last-Modified - A UTC datetime that specifies the last time the resource was modified. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeyValueAsync(String key, String apiVersion, String label, String syncToken, String acceptDatetime, String ifMatch, String ifNoneMatch, List<String> $select, final ApiCallback<KeyValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKeyValueValidateBeforeCall(key, apiVersion, label, syncToken, acceptDatetime, ifMatch, ifNoneMatch, $select, _callback);
        Type localVarReturnType = new TypeToken<KeyValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getKeyValues
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param key A filter used to match keys. (optional)
     * @param label A filter used to match labels (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param after Instructs the server to return elements that appear after the element referred to by the specified token. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeyValuesCall(String apiVersion, String key, String label, String syncToken, String after, String acceptDatetime, List<String> $select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/kv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("After", after));
        }

        if ($select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "$Select", $select));
        }

        if (syncToken != null) {
            localVarHeaderParams.put("Sync-Token", localVarApiClient.parameterToString(syncToken));
        }

        if (acceptDatetime != null) {
            localVarHeaderParams.put("Accept-Datetime", localVarApiClient.parameterToString(acceptDatetime));
        }

        final String[] localVarAccepts = {
            "application/vnd.microsoft.appconfig.kvset+json",
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKeyValuesValidateBeforeCall(String apiVersion, String key, String label, String syncToken, String after, String acceptDatetime, List<String> $select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getKeyValues(Async)");
        }

        return getKeyValuesCall(apiVersion, key, label, syncToken, after, acceptDatetime, $select, _callback);

    }

    /**
     * Gets a list of key-values.
     * 
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param key A filter used to match keys. (optional)
     * @param label A filter used to match labels (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param after Instructs the server to return elements that appear after the element referred to by the specified token. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @return KeyValueListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public KeyValueListResult getKeyValues(String apiVersion, String key, String label, String syncToken, String after, String acceptDatetime, List<String> $select) throws ApiException {
        ApiResponse<KeyValueListResult> localVarResp = getKeyValuesWithHttpInfo(apiVersion, key, label, syncToken, after, acceptDatetime, $select);
        return localVarResp.getData();
    }

    /**
     * Gets a list of key-values.
     * 
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param key A filter used to match keys. (optional)
     * @param label A filter used to match labels (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param after Instructs the server to return elements that appear after the element referred to by the specified token. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @return ApiResponse&lt;KeyValueListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyValueListResult> getKeyValuesWithHttpInfo(String apiVersion, String key, String label, String syncToken, String after, String acceptDatetime, List<String> $select) throws ApiException {
        okhttp3.Call localVarCall = getKeyValuesValidateBeforeCall(apiVersion, key, label, syncToken, after, acceptDatetime, $select, null);
        Type localVarReturnType = new TypeToken<KeyValueListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of key-values. (asynchronously)
     * 
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param key A filter used to match keys. (optional)
     * @param label A filter used to match labels (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param after Instructs the server to return elements that appear after the element referred to by the specified token. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeyValuesAsync(String apiVersion, String key, String label, String syncToken, String after, String acceptDatetime, List<String> $select, final ApiCallback<KeyValueListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKeyValuesValidateBeforeCall(apiVersion, key, label, syncToken, after, acceptDatetime, $select, _callback);
        Type localVarReturnType = new TypeToken<KeyValueListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putKeyValue
     * @param key The key of the key-value to create. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label of the key-value to create. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @param ifNoneMatch Used to perform an operation only if the targeted resource&#39;s etag does not match the value provided. (optional)
     * @param entity The key-value to create. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putKeyValueCall(String key, String apiVersion, String label, String syncToken, String ifMatch, String ifNoneMatch, KeyValue entity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entity;

        // create path and map variables
        String localVarPath = "/kv/{key}"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (label != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label", label));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (syncToken != null) {
            localVarHeaderParams.put("Sync-Token", localVarApiClient.parameterToString(syncToken));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        final String[] localVarAccepts = {
            "application/vnd.microsoft.appconfig.kv+json",
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.microsoft.appconfig.kv+json",
            "application/vnd.microsoft.appconfig.kvset+json",
            "application/json",
            "text/json",
            "application/*+json",
            "application/json-patch+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putKeyValueValidateBeforeCall(String key, String apiVersion, String label, String syncToken, String ifMatch, String ifNoneMatch, KeyValue entity, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling putKeyValue(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling putKeyValue(Async)");
        }

        return putKeyValueCall(key, apiVersion, label, syncToken, ifMatch, ifNoneMatch, entity, _callback);

    }

    /**
     * Creates a key-value.
     * 
     * @param key The key of the key-value to create. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label of the key-value to create. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @param ifNoneMatch Used to perform an operation only if the targeted resource&#39;s etag does not match the value provided. (optional)
     * @param entity The key-value to create. (optional)
     * @return KeyValue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public KeyValue putKeyValue(String key, String apiVersion, String label, String syncToken, String ifMatch, String ifNoneMatch, KeyValue entity) throws ApiException {
        ApiResponse<KeyValue> localVarResp = putKeyValueWithHttpInfo(key, apiVersion, label, syncToken, ifMatch, ifNoneMatch, entity);
        return localVarResp.getData();
    }

    /**
     * Creates a key-value.
     * 
     * @param key The key of the key-value to create. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label of the key-value to create. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @param ifNoneMatch Used to perform an operation only if the targeted resource&#39;s etag does not match the value provided. (optional)
     * @param entity The key-value to create. (optional)
     * @return ApiResponse&lt;KeyValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyValue> putKeyValueWithHttpInfo(String key, String apiVersion, String label, String syncToken, String ifMatch, String ifNoneMatch, KeyValue entity) throws ApiException {
        okhttp3.Call localVarCall = putKeyValueValidateBeforeCall(key, apiVersion, label, syncToken, ifMatch, ifNoneMatch, entity, null);
        Type localVarReturnType = new TypeToken<KeyValue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a key-value. (asynchronously)
     * 
     * @param key The key of the key-value to create. (required)
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param label The label of the key-value to create. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param ifMatch Used to perform an operation only if the targeted resource&#39;s etag matches the value provided. (optional)
     * @param ifNoneMatch Used to perform an operation only if the targeted resource&#39;s etag does not match the value provided. (optional)
     * @param entity The key-value to create. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * ETag - An identifier representing the returned state of the resource. <br>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putKeyValueAsync(String key, String apiVersion, String label, String syncToken, String ifMatch, String ifNoneMatch, KeyValue entity, final ApiCallback<KeyValue> _callback) throws ApiException {

        okhttp3.Call localVarCall = putKeyValueValidateBeforeCall(key, apiVersion, label, syncToken, ifMatch, ifNoneMatch, entity, _callback);
        Type localVarReturnType = new TypeToken<KeyValue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
