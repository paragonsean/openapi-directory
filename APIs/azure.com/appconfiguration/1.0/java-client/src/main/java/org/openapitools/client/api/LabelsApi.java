/*
 * Azure App Configuration
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.LabelListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LabelsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LabelsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LabelsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for checkLabels
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param name A filter for the name of the returned labels. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param after Instructs the server to return elements that appear after the element referred to by the specified token. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkLabelsCall(String apiVersion, String name, String syncToken, String after, String acceptDatetime, List<String> $select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/labels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("After", after));
        }

        if ($select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "$Select", $select));
        }

        if (syncToken != null) {
            localVarHeaderParams.put("Sync-Token", localVarApiClient.parameterToString(syncToken));
        }

        if (acceptDatetime != null) {
            localVarHeaderParams.put("Accept-Datetime", localVarApiClient.parameterToString(acceptDatetime));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkLabelsValidateBeforeCall(String apiVersion, String name, String syncToken, String after, String acceptDatetime, List<String> $select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling checkLabels(Async)");
        }

        return checkLabelsCall(apiVersion, name, syncToken, after, acceptDatetime, $select, _callback);

    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param name A filter for the name of the returned labels. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param after Instructs the server to return elements that appear after the element referred to by the specified token. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public void checkLabels(String apiVersion, String name, String syncToken, String after, String acceptDatetime, List<String> $select) throws ApiException {
        checkLabelsWithHttpInfo(apiVersion, name, syncToken, after, acceptDatetime, $select);
    }

    /**
     * Requests the headers and status of the given resource.
     * 
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param name A filter for the name of the returned labels. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param after Instructs the server to return elements that appear after the element referred to by the specified token. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> checkLabelsWithHttpInfo(String apiVersion, String name, String syncToken, String after, String acceptDatetime, List<String> $select) throws ApiException {
        okhttp3.Call localVarCall = checkLabelsValidateBeforeCall(apiVersion, name, syncToken, after, acceptDatetime, $select, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Requests the headers and status of the given resource. (asynchronously)
     * 
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param name A filter for the name of the returned labels. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param after Instructs the server to return elements that appear after the element referred to by the specified token. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkLabelsAsync(String apiVersion, String name, String syncToken, String after, String acceptDatetime, List<String> $select, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkLabelsValidateBeforeCall(apiVersion, name, syncToken, after, acceptDatetime, $select, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLabels
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param name A filter for the name of the returned labels. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param after Instructs the server to return elements that appear after the element referred to by the specified token. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLabelsCall(String apiVersion, String name, String syncToken, String after, String acceptDatetime, List<String> $select, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/labels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("After", after));
        }

        if ($select != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "$Select", $select));
        }

        if (syncToken != null) {
            localVarHeaderParams.put("Sync-Token", localVarApiClient.parameterToString(syncToken));
        }

        if (acceptDatetime != null) {
            localVarHeaderParams.put("Accept-Datetime", localVarApiClient.parameterToString(acceptDatetime));
        }

        final String[] localVarAccepts = {
            "application/vnd.microsoft.appconfig.labelset+json",
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLabelsValidateBeforeCall(String apiVersion, String name, String syncToken, String after, String acceptDatetime, List<String> $select, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getLabels(Async)");
        }

        return getLabelsCall(apiVersion, name, syncToken, after, acceptDatetime, $select, _callback);

    }

    /**
     * Gets a list of labels.
     * 
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param name A filter for the name of the returned labels. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param after Instructs the server to return elements that appear after the element referred to by the specified token. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @return LabelListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public LabelListResult getLabels(String apiVersion, String name, String syncToken, String after, String acceptDatetime, List<String> $select) throws ApiException {
        ApiResponse<LabelListResult> localVarResp = getLabelsWithHttpInfo(apiVersion, name, syncToken, after, acceptDatetime, $select);
        return localVarResp.getData();
    }

    /**
     * Gets a list of labels.
     * 
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param name A filter for the name of the returned labels. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param after Instructs the server to return elements that appear after the element referred to by the specified token. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @return ApiResponse&lt;LabelListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LabelListResult> getLabelsWithHttpInfo(String apiVersion, String name, String syncToken, String after, String acceptDatetime, List<String> $select) throws ApiException {
        okhttp3.Call localVarCall = getLabelsValidateBeforeCall(apiVersion, name, syncToken, after, acceptDatetime, $select, null);
        Type localVarReturnType = new TypeToken<LabelListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of labels. (asynchronously)
     * 
     * @param apiVersion The API version to be used with the HTTP request. (required)
     * @param name A filter for the name of the returned labels. (optional)
     * @param syncToken Used to guarantee real-time consistency between requests. (optional)
     * @param after Instructs the server to return elements that appear after the element referred to by the specified token. (optional)
     * @param acceptDatetime Requests the server to respond with the state of the resource at the specified time. (optional)
     * @param $select Used to select what fields are present in the returned resource(s). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Sync-Token - Enables real-time consistency between requests by providing the returned value in the next request made to the server. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLabelsAsync(String apiVersion, String name, String syncToken, String after, String acceptDatetime, List<String> $select, final ApiCallback<LabelListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLabelsValidateBeforeCall(apiVersion, name, syncToken, after, acceptDatetime, $select, _callback);
        Type localVarReturnType = new TypeToken<LabelListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
