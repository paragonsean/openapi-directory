/**
 * AppConfigurationManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserIdentity from './UserIdentity';

/**
 * The ResourceIdentity model module.
 * @module model/ResourceIdentity
 * @version 2019-10-01
 */
class ResourceIdentity {
    /**
     * Constructs a new <code>ResourceIdentity</code>.
     * @alias module:model/ResourceIdentity
     */
    constructor() { 
        
        ResourceIdentity.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResourceIdentity</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceIdentity} obj Optional instance to populate.
     * @return {module:model/ResourceIdentity} The populated <code>ResourceIdentity</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceIdentity();

            if (data.hasOwnProperty('principalId')) {
                obj['principalId'] = ApiClient.convertToType(data['principalId'], 'String');
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('userAssignedIdentities')) {
                obj['userAssignedIdentities'] = ApiClient.convertToType(data['userAssignedIdentities'], {'String': UserIdentity});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceIdentity</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceIdentity</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['principalId'] && !(typeof data['principalId'] === 'string' || data['principalId'] instanceof String)) {
            throw new Error("Expected the field `principalId` to be a primitive type in the JSON string but got " + data['principalId']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The principal id of the identity. This property will only be provided for a system-assigned identity.
 * @member {String} principalId
 */
ResourceIdentity.prototype['principalId'] = undefined;

/**
 * The tenant id associated with the resource's identity. This property will only be provided for a system-assigned identity.
 * @member {String} tenantId
 */
ResourceIdentity.prototype['tenantId'] = undefined;

/**
 * The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identities.
 * @member {module:model/ResourceIdentity.TypeEnum} type
 */
ResourceIdentity.prototype['type'] = undefined;

/**
 * The list of user-assigned identities associated with the resource. The user-assigned identity dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
 * @member {Object.<String, module:model/UserIdentity>} userAssignedIdentities
 */
ResourceIdentity.prototype['userAssignedIdentities'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ResourceIdentity['TypeEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "SystemAssigned"
     * @const
     */
    "SystemAssigned": "SystemAssigned",

    /**
     * value: "UserAssigned"
     * @const
     */
    "UserAssigned": "UserAssigned",

    /**
     * value: "SystemAssigned, UserAssigned"
     * @const
     */
    "SystemAssigned, UserAssigned": "SystemAssigned, UserAssigned"
};



export default ResourceIdentity;

