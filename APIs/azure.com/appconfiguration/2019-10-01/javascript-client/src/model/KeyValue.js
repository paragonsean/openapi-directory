/**
 * AppConfigurationManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The KeyValue model module.
 * @module model/KeyValue
 * @version 2019-10-01
 */
class KeyValue {
    /**
     * Constructs a new <code>KeyValue</code>.
     * The result of a request to retrieve a key-value from the specified configuration store.
     * @alias module:model/KeyValue
     */
    constructor() { 
        
        KeyValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>KeyValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/KeyValue} obj Optional instance to populate.
     * @return {module:model/KeyValue} The populated <code>KeyValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new KeyValue();

            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('eTag')) {
                obj['eTag'] = ApiClient.convertToType(data['eTag'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('lastModified')) {
                obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'Date');
            }
            if (data.hasOwnProperty('locked')) {
                obj['locked'] = ApiClient.convertToType(data['locked'], 'Boolean');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>KeyValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>KeyValue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }
        // ensure the json data is a string
        if (data['eTag'] && !(typeof data['eTag'] === 'string' || data['eTag'] instanceof String)) {
            throw new Error("Expected the field `eTag` to be a primitive type in the JSON string but got " + data['eTag']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * The content type of the key-value's value.  Providing a proper content-type can enable transformations of values when they are retrieved by applications.
 * @member {String} contentType
 */
KeyValue.prototype['contentType'] = undefined;

/**
 * An ETag indicating the state of a key-value within a configuration store.
 * @member {String} eTag
 */
KeyValue.prototype['eTag'] = undefined;

/**
 * The primary identifier of a key-value.  The key is used in unison with the label to uniquely identify a key-value.
 * @member {String} key
 */
KeyValue.prototype['key'] = undefined;

/**
 * A value used to group key-values.  The label is used in unison with the key to uniquely identify a key-value.
 * @member {String} label
 */
KeyValue.prototype['label'] = undefined;

/**
 * The last time a modifying operation was performed on the given key-value.
 * @member {Date} lastModified
 */
KeyValue.prototype['lastModified'] = undefined;

/**
 * A value indicating whether the key-value is locked.  A locked key-value may not be modified until it is unlocked.
 * @member {Boolean} locked
 */
KeyValue.prototype['locked'] = undefined;

/**
 * A dictionary of tags that can help identify what a key-value may be applicable for.
 * @member {Object.<String, String>} tags
 */
KeyValue.prototype['tags'] = undefined;

/**
 * The value of the key-value.
 * @member {String} value
 */
KeyValue.prototype['value'] = undefined;






export default KeyValue;

