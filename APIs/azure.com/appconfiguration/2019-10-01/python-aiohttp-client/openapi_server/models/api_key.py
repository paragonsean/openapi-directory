# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_string: str=None, id: str=None, last_modified: datetime=None, name: str=None, read_only: bool=None, value: str=None):
        """ApiKey - a model defined in OpenAPI

        :param connection_string: The connection_string of this ApiKey.
        :param id: The id of this ApiKey.
        :param last_modified: The last_modified of this ApiKey.
        :param name: The name of this ApiKey.
        :param read_only: The read_only of this ApiKey.
        :param value: The value of this ApiKey.
        """
        self.openapi_types = {
            'connection_string': str,
            'id': str,
            'last_modified': datetime,
            'name': str,
            'read_only': bool,
            'value': str
        }

        self.attribute_map = {
            'connection_string': 'connectionString',
            'id': 'id',
            'last_modified': 'lastModified',
            'name': 'name',
            'read_only': 'readOnly',
            'value': 'value'
        }

        self._connection_string = connection_string
        self._id = id
        self._last_modified = last_modified
        self._name = name
        self._read_only = read_only
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiKey of this ApiKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_string(self):
        """Gets the connection_string of this ApiKey.

        A connection string that can be used by supporting clients for authentication.

        :return: The connection_string of this ApiKey.
        :rtype: str
        """
        return self._connection_string

    @connection_string.setter
    def connection_string(self, connection_string):
        """Sets the connection_string of this ApiKey.

        A connection string that can be used by supporting clients for authentication.

        :param connection_string: The connection_string of this ApiKey.
        :type connection_string: str
        """

        self._connection_string = connection_string

    @property
    def id(self):
        """Gets the id of this ApiKey.

        The key ID.

        :return: The id of this ApiKey.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiKey.

        The key ID.

        :param id: The id of this ApiKey.
        :type id: str
        """

        self._id = id

    @property
    def last_modified(self):
        """Gets the last_modified of this ApiKey.

        The last time any of the key's properties were modified.

        :return: The last_modified of this ApiKey.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this ApiKey.

        The last time any of the key's properties were modified.

        :param last_modified: The last_modified of this ApiKey.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def name(self):
        """Gets the name of this ApiKey.

        A name for the key describing its usage.

        :return: The name of this ApiKey.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiKey.

        A name for the key describing its usage.

        :param name: The name of this ApiKey.
        :type name: str
        """

        self._name = name

    @property
    def read_only(self):
        """Gets the read_only of this ApiKey.

        Whether this key can only be used for read operations.

        :return: The read_only of this ApiKey.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this ApiKey.

        Whether this key can only be used for read operations.

        :param read_only: The read_only of this ApiKey.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def value(self):
        """Gets the value of this ApiKey.

        The value of the key that is used for authentication purposes.

        :return: The value of this ApiKey.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ApiKey.

        The value of the key that is used for authentication purposes.

        :param value: The value of this ApiKey.
        :type value: str
        """

        self._value = value
