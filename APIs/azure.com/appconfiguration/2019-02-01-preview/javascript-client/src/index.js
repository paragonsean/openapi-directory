/**
 * AppConfigurationManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import ApiKey from './model/ApiKey';
import ApiKeyListResult from './model/ApiKeyListResult';
import CheckNameAvailabilityParameters from './model/CheckNameAvailabilityParameters';
import ConfigurationStore from './model/ConfigurationStore';
import ConfigurationStoreListResult from './model/ConfigurationStoreListResult';
import ConfigurationStoreProperties from './model/ConfigurationStoreProperties';
import ConfigurationStoreUpdateParameters from './model/ConfigurationStoreUpdateParameters';
import Error from './model/Error';
import KeyValue from './model/KeyValue';
import ListKeyValueParameters from './model/ListKeyValueParameters';
import NameAvailabilityStatus from './model/NameAvailabilityStatus';
import OperationDefinition from './model/OperationDefinition';
import OperationDefinitionDisplay from './model/OperationDefinitionDisplay';
import OperationDefinitionListResult from './model/OperationDefinitionListResult';
import RegenerateKeyParameters from './model/RegenerateKeyParameters';
import Resource from './model/Resource';
import ConfigurationStoresApi from './api/ConfigurationStoresApi';
import OperationsApi from './api/OperationsApi';


/**
* JS API client generated by OpenAPI Generator.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var AppConfigurationManagementClient = require('index'); // See note below*.
* var xxxSvc = new AppConfigurationManagementClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new AppConfigurationManagementClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new AppConfigurationManagementClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new AppConfigurationManagementClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2019-02-01-preview
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ApiKey model constructor.
     * @property {module:model/ApiKey}
     */
    ApiKey,

    /**
     * The ApiKeyListResult model constructor.
     * @property {module:model/ApiKeyListResult}
     */
    ApiKeyListResult,

    /**
     * The CheckNameAvailabilityParameters model constructor.
     * @property {module:model/CheckNameAvailabilityParameters}
     */
    CheckNameAvailabilityParameters,

    /**
     * The ConfigurationStore model constructor.
     * @property {module:model/ConfigurationStore}
     */
    ConfigurationStore,

    /**
     * The ConfigurationStoreListResult model constructor.
     * @property {module:model/ConfigurationStoreListResult}
     */
    ConfigurationStoreListResult,

    /**
     * The ConfigurationStoreProperties model constructor.
     * @property {module:model/ConfigurationStoreProperties}
     */
    ConfigurationStoreProperties,

    /**
     * The ConfigurationStoreUpdateParameters model constructor.
     * @property {module:model/ConfigurationStoreUpdateParameters}
     */
    ConfigurationStoreUpdateParameters,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The KeyValue model constructor.
     * @property {module:model/KeyValue}
     */
    KeyValue,

    /**
     * The ListKeyValueParameters model constructor.
     * @property {module:model/ListKeyValueParameters}
     */
    ListKeyValueParameters,

    /**
     * The NameAvailabilityStatus model constructor.
     * @property {module:model/NameAvailabilityStatus}
     */
    NameAvailabilityStatus,

    /**
     * The OperationDefinition model constructor.
     * @property {module:model/OperationDefinition}
     */
    OperationDefinition,

    /**
     * The OperationDefinitionDisplay model constructor.
     * @property {module:model/OperationDefinitionDisplay}
     */
    OperationDefinitionDisplay,

    /**
     * The OperationDefinitionListResult model constructor.
     * @property {module:model/OperationDefinitionListResult}
     */
    OperationDefinitionListResult,

    /**
     * The RegenerateKeyParameters model constructor.
     * @property {module:model/RegenerateKeyParameters}
     */
    RegenerateKeyParameters,

    /**
     * The Resource model constructor.
     * @property {module:model/Resource}
     */
    Resource,

    /**
    * The ConfigurationStoresApi service constructor.
    * @property {module:api/ConfigurationStoresApi}
    */
    ConfigurationStoresApi,

    /**
    * The OperationsApi service constructor.
    * @property {module:api/OperationsApi}
    */
    OperationsApi
};
