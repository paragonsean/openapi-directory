/**
 * AppConfigurationManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiKey from '../model/ApiKey';
import ApiKeyListResult from '../model/ApiKeyListResult';
import ConfigurationStore from '../model/ConfigurationStore';
import ConfigurationStoreListResult from '../model/ConfigurationStoreListResult';
import ConfigurationStoreUpdateParameters from '../model/ConfigurationStoreUpdateParameters';
import Error from '../model/Error';
import KeyValue from '../model/KeyValue';
import ListKeyValueParameters from '../model/ListKeyValueParameters';
import RegenerateKeyParameters from '../model/RegenerateKeyParameters';

/**
* ConfigurationStores service.
* @module api/ConfigurationStoresApi
* @version 2019-11-01-preview
*/
export default class ConfigurationStoresApi {

    /**
    * Constructs a new ConfigurationStoresApi. 
    * @alias module:api/ConfigurationStoresApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the configurationStoresCreate operation.
     * @callback module:api/ConfigurationStoresApi~configurationStoresCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigurationStore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a configuration store with the specified parameters.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} configStoreName The name of the configuration store.
     * @param {String} apiVersion The client API version.
     * @param {module:model/ConfigurationStore} configStoreCreationParameters The parameters for creating a configuration store.
     * @param {module:api/ConfigurationStoresApi~configurationStoresCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigurationStore}
     */
    configurationStoresCreate(subscriptionId, resourceGroupName, configStoreName, apiVersion, configStoreCreationParameters, callback) {
      let postBody = configStoreCreationParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling configurationStoresCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling configurationStoresCreate");
      }
      // verify the required parameter 'configStoreName' is set
      if (configStoreName === undefined || configStoreName === null) {
        throw new Error("Missing the required parameter 'configStoreName' when calling configurationStoresCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling configurationStoresCreate");
      }
      // verify the required parameter 'configStoreCreationParameters' is set
      if (configStoreCreationParameters === undefined || configStoreCreationParameters === null) {
        throw new Error("Missing the required parameter 'configStoreCreationParameters' when calling configurationStoresCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'configStoreName': configStoreName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfigurationStore;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationStoresDelete operation.
     * @callback module:api/ConfigurationStoresApi~configurationStoresDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a configuration store.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} configStoreName The name of the configuration store.
     * @param {String} apiVersion The client API version.
     * @param {module:api/ConfigurationStoresApi~configurationStoresDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    configurationStoresDelete(subscriptionId, resourceGroupName, configStoreName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling configurationStoresDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling configurationStoresDelete");
      }
      // verify the required parameter 'configStoreName' is set
      if (configStoreName === undefined || configStoreName === null) {
        throw new Error("Missing the required parameter 'configStoreName' when calling configurationStoresDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling configurationStoresDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'configStoreName': configStoreName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationStoresGet operation.
     * @callback module:api/ConfigurationStoresApi~configurationStoresGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigurationStore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the properties of the specified configuration store.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} configStoreName The name of the configuration store.
     * @param {String} apiVersion The client API version.
     * @param {module:api/ConfigurationStoresApi~configurationStoresGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigurationStore}
     */
    configurationStoresGet(subscriptionId, resourceGroupName, configStoreName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling configurationStoresGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling configurationStoresGet");
      }
      // verify the required parameter 'configStoreName' is set
      if (configStoreName === undefined || configStoreName === null) {
        throw new Error("Missing the required parameter 'configStoreName' when calling configurationStoresGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling configurationStoresGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'configStoreName': configStoreName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigurationStore;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationStoresList operation.
     * @callback module:api/ConfigurationStoresApi~configurationStoresListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigurationStoreListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the configuration stores for a given subscription.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} apiVersion The client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [skipToken] A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.
     * @param {module:api/ConfigurationStoresApi~configurationStoresListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigurationStoreListResult}
     */
    configurationStoresList(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling configurationStoresList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling configurationStoresList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigurationStoreListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AppConfiguration/configurationStores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationStoresListByResourceGroup operation.
     * @callback module:api/ConfigurationStoresApi~configurationStoresListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigurationStoreListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the configuration stores for a given resource group.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} apiVersion The client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [skipToken] A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.
     * @param {module:api/ConfigurationStoresApi~configurationStoresListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigurationStoreListResult}
     */
    configurationStoresListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling configurationStoresListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling configurationStoresListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling configurationStoresListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConfigurationStoreListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationStoresListKeyValue operation.
     * @callback module:api/ConfigurationStoresApi~configurationStoresListKeyValueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyValue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists a configuration store key-value.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} configStoreName The name of the configuration store.
     * @param {String} apiVersion The client API version.
     * @param {module:model/ListKeyValueParameters} listKeyValueParameters The parameters for retrieving a key-value.
     * @param {module:api/ConfigurationStoresApi~configurationStoresListKeyValueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyValue}
     */
    configurationStoresListKeyValue(subscriptionId, resourceGroupName, configStoreName, apiVersion, listKeyValueParameters, callback) {
      let postBody = listKeyValueParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling configurationStoresListKeyValue");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling configurationStoresListKeyValue");
      }
      // verify the required parameter 'configStoreName' is set
      if (configStoreName === undefined || configStoreName === null) {
        throw new Error("Missing the required parameter 'configStoreName' when calling configurationStoresListKeyValue");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling configurationStoresListKeyValue");
      }
      // verify the required parameter 'listKeyValueParameters' is set
      if (listKeyValueParameters === undefined || listKeyValueParameters === null) {
        throw new Error("Missing the required parameter 'listKeyValueParameters' when calling configurationStoresListKeyValue");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'configStoreName': configStoreName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = KeyValue;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/listKeyValue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationStoresListKeys operation.
     * @callback module:api/ConfigurationStoresApi~configurationStoresListKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKeyListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the access key for the specified configuration store.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} configStoreName The name of the configuration store.
     * @param {String} apiVersion The client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [skipToken] A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.
     * @param {module:api/ConfigurationStoresApi~configurationStoresListKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKeyListResult}
     */
    configurationStoresListKeys(subscriptionId, resourceGroupName, configStoreName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling configurationStoresListKeys");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling configurationStoresListKeys");
      }
      // verify the required parameter 'configStoreName' is set
      if (configStoreName === undefined || configStoreName === null) {
        throw new Error("Missing the required parameter 'configStoreName' when calling configurationStoresListKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling configurationStoresListKeys");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'configStoreName': configStoreName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiKeyListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/ListKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationStoresRegenerateKey operation.
     * @callback module:api/ConfigurationStoresApi~configurationStoresRegenerateKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerates an access key for the specified configuration store.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} configStoreName The name of the configuration store.
     * @param {String} apiVersion The client API version.
     * @param {module:model/RegenerateKeyParameters} regenerateKeyParameters The parameters for regenerating an access key.
     * @param {module:api/ConfigurationStoresApi~configurationStoresRegenerateKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKey}
     */
    configurationStoresRegenerateKey(subscriptionId, resourceGroupName, configStoreName, apiVersion, regenerateKeyParameters, callback) {
      let postBody = regenerateKeyParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling configurationStoresRegenerateKey");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling configurationStoresRegenerateKey");
      }
      // verify the required parameter 'configStoreName' is set
      if (configStoreName === undefined || configStoreName === null) {
        throw new Error("Missing the required parameter 'configStoreName' when calling configurationStoresRegenerateKey");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling configurationStoresRegenerateKey");
      }
      // verify the required parameter 'regenerateKeyParameters' is set
      if (regenerateKeyParameters === undefined || regenerateKeyParameters === null) {
        throw new Error("Missing the required parameter 'regenerateKeyParameters' when calling configurationStoresRegenerateKey");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'configStoreName': configStoreName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiKey;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/RegenerateKey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationStoresUpdate operation.
     * @callback module:api/ConfigurationStoresApi~configurationStoresUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfigurationStore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a configuration store with the specified parameters.
     * @param {String} subscriptionId The Microsoft Azure subscription ID.
     * @param {String} resourceGroupName The name of the resource group to which the container registry belongs.
     * @param {String} configStoreName The name of the configuration store.
     * @param {String} apiVersion The client API version.
     * @param {module:model/ConfigurationStoreUpdateParameters} configStoreUpdateParameters The parameters for updating a configuration store.
     * @param {module:api/ConfigurationStoresApi~configurationStoresUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfigurationStore}
     */
    configurationStoresUpdate(subscriptionId, resourceGroupName, configStoreName, apiVersion, configStoreUpdateParameters, callback) {
      let postBody = configStoreUpdateParameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling configurationStoresUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling configurationStoresUpdate");
      }
      // verify the required parameter 'configStoreName' is set
      if (configStoreName === undefined || configStoreName === null) {
        throw new Error("Missing the required parameter 'configStoreName' when calling configurationStoresUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling configurationStoresUpdate");
      }
      // verify the required parameter 'configStoreUpdateParameters' is set
      if (configStoreUpdateParameters === undefined || configStoreUpdateParameters === null) {
        throw new Error("Missing the required parameter 'configStoreUpdateParameters' when calling configurationStoresUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'configStoreName': configStoreName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfigurationStore;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
