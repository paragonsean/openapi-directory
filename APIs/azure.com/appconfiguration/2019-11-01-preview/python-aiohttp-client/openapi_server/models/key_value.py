# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KeyValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, e_tag: str=None, key: str=None, label: str=None, last_modified: datetime=None, locked: bool=None, tags: Dict[str, str]=None, value: str=None):
        """KeyValue - a model defined in OpenAPI

        :param content_type: The content_type of this KeyValue.
        :param e_tag: The e_tag of this KeyValue.
        :param key: The key of this KeyValue.
        :param label: The label of this KeyValue.
        :param last_modified: The last_modified of this KeyValue.
        :param locked: The locked of this KeyValue.
        :param tags: The tags of this KeyValue.
        :param value: The value of this KeyValue.
        """
        self.openapi_types = {
            'content_type': str,
            'e_tag': str,
            'key': str,
            'label': str,
            'last_modified': datetime,
            'locked': bool,
            'tags': Dict[str, str],
            'value': str
        }

        self.attribute_map = {
            'content_type': 'contentType',
            'e_tag': 'eTag',
            'key': 'key',
            'label': 'label',
            'last_modified': 'lastModified',
            'locked': 'locked',
            'tags': 'tags',
            'value': 'value'
        }

        self._content_type = content_type
        self._e_tag = e_tag
        self._key = key
        self._label = label
        self._last_modified = last_modified
        self._locked = locked
        self._tags = tags
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyValue of this KeyValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this KeyValue.

        The content type of the key-value's value.  Providing a proper content-type can enable transformations of values when they are retrieved by applications.

        :return: The content_type of this KeyValue.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this KeyValue.

        The content type of the key-value's value.  Providing a proper content-type can enable transformations of values when they are retrieved by applications.

        :param content_type: The content_type of this KeyValue.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def e_tag(self):
        """Gets the e_tag of this KeyValue.

        An ETag indicating the state of a key-value within a configuration store.

        :return: The e_tag of this KeyValue.
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this KeyValue.

        An ETag indicating the state of a key-value within a configuration store.

        :param e_tag: The e_tag of this KeyValue.
        :type e_tag: str
        """

        self._e_tag = e_tag

    @property
    def key(self):
        """Gets the key of this KeyValue.

        The primary identifier of a key-value.  The key is used in unison with the label to uniquely identify a key-value.

        :return: The key of this KeyValue.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this KeyValue.

        The primary identifier of a key-value.  The key is used in unison with the label to uniquely identify a key-value.

        :param key: The key of this KeyValue.
        :type key: str
        """

        self._key = key

    @property
    def label(self):
        """Gets the label of this KeyValue.

        A value used to group key-values.  The label is used in unison with the key to uniquely identify a key-value.

        :return: The label of this KeyValue.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this KeyValue.

        A value used to group key-values.  The label is used in unison with the key to uniquely identify a key-value.

        :param label: The label of this KeyValue.
        :type label: str
        """

        self._label = label

    @property
    def last_modified(self):
        """Gets the last_modified of this KeyValue.

        The last time a modifying operation was performed on the given key-value.

        :return: The last_modified of this KeyValue.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this KeyValue.

        The last time a modifying operation was performed on the given key-value.

        :param last_modified: The last_modified of this KeyValue.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def locked(self):
        """Gets the locked of this KeyValue.

        A value indicating whether the key-value is locked.  A locked key-value may not be modified until it is unlocked.

        :return: The locked of this KeyValue.
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this KeyValue.

        A value indicating whether the key-value is locked.  A locked key-value may not be modified until it is unlocked.

        :param locked: The locked of this KeyValue.
        :type locked: bool
        """

        self._locked = locked

    @property
    def tags(self):
        """Gets the tags of this KeyValue.

        A dictionary of tags that can help identify what a key-value may be applicable for.

        :return: The tags of this KeyValue.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this KeyValue.

        A dictionary of tags that can help identify what a key-value may be applicable for.

        :param tags: The tags of this KeyValue.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def value(self):
        """Gets the value of this KeyValue.

        The value of the key-value.

        :return: The value of this KeyValue.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this KeyValue.

        The value of the key-value.

        :param value: The value of this KeyValue.
        :type value: str
        """

        self._value = value
