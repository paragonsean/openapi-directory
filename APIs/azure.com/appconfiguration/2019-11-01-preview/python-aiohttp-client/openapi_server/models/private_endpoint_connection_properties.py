# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.private_endpoint import PrivateEndpoint
from openapi_server.models.private_link_service_connection_state import PrivateLinkServiceConnectionState
from openapi_server import util


class PrivateEndpointConnectionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, private_endpoint: PrivateEndpoint=None, private_link_service_connection_state: PrivateLinkServiceConnectionState=None, provisioning_state: str=None):
        """PrivateEndpointConnectionProperties - a model defined in OpenAPI

        :param private_endpoint: The private_endpoint of this PrivateEndpointConnectionProperties.
        :param private_link_service_connection_state: The private_link_service_connection_state of this PrivateEndpointConnectionProperties.
        :param provisioning_state: The provisioning_state of this PrivateEndpointConnectionProperties.
        """
        self.openapi_types = {
            'private_endpoint': PrivateEndpoint,
            'private_link_service_connection_state': PrivateLinkServiceConnectionState,
            'provisioning_state': str
        }

        self.attribute_map = {
            'private_endpoint': 'privateEndpoint',
            'private_link_service_connection_state': 'privateLinkServiceConnectionState',
            'provisioning_state': 'provisioningState'
        }

        self._private_endpoint = private_endpoint
        self._private_link_service_connection_state = private_link_service_connection_state
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateEndpointConnectionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateEndpointConnectionProperties of this PrivateEndpointConnectionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def private_endpoint(self):
        """Gets the private_endpoint of this PrivateEndpointConnectionProperties.


        :return: The private_endpoint of this PrivateEndpointConnectionProperties.
        :rtype: PrivateEndpoint
        """
        return self._private_endpoint

    @private_endpoint.setter
    def private_endpoint(self, private_endpoint):
        """Sets the private_endpoint of this PrivateEndpointConnectionProperties.


        :param private_endpoint: The private_endpoint of this PrivateEndpointConnectionProperties.
        :type private_endpoint: PrivateEndpoint
        """

        self._private_endpoint = private_endpoint

    @property
    def private_link_service_connection_state(self):
        """Gets the private_link_service_connection_state of this PrivateEndpointConnectionProperties.


        :return: The private_link_service_connection_state of this PrivateEndpointConnectionProperties.
        :rtype: PrivateLinkServiceConnectionState
        """
        return self._private_link_service_connection_state

    @private_link_service_connection_state.setter
    def private_link_service_connection_state(self, private_link_service_connection_state):
        """Sets the private_link_service_connection_state of this PrivateEndpointConnectionProperties.


        :param private_link_service_connection_state: The private_link_service_connection_state of this PrivateEndpointConnectionProperties.
        :type private_link_service_connection_state: PrivateLinkServiceConnectionState
        """
        if private_link_service_connection_state is None:
            raise ValueError("Invalid value for `private_link_service_connection_state`, must not be `None`")

        self._private_link_service_connection_state = private_link_service_connection_state

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this PrivateEndpointConnectionProperties.

        The provisioning status of the private endpoint connection.

        :return: The provisioning_state of this PrivateEndpointConnectionProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this PrivateEndpointConnectionProperties.

        The provisioning status of the private endpoint connection.

        :param provisioning_state: The provisioning_state of this PrivateEndpointConnectionProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
