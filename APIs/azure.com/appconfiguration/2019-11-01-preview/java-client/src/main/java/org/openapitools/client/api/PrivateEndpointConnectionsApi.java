/*
 * AppConfigurationManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.PrivateEndpointConnection;
import org.openapitools.client.model.PrivateEndpointConnectionListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PrivateEndpointConnectionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PrivateEndpointConnectionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PrivateEndpointConnectionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for privateEndpointConnectionsCreateOrUpdate
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param configStoreName The name of the configuration store. (required)
     * @param apiVersion The client API version. (required)
     * @param privateEndpointConnectionName Private endpoint connection name (required)
     * @param privateEndpointConnection The private endpoint connection properties. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateEndpointConnectionsCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String configStoreName, String apiVersion, String privateEndpointConnectionName, PrivateEndpointConnection privateEndpointConnection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = privateEndpointConnection;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/privateEndpointConnections/{privateEndpointConnectionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "configStoreName" + "}", localVarApiClient.escapeString(configStoreName.toString()))
            .replace("{" + "privateEndpointConnectionName" + "}", localVarApiClient.escapeString(privateEndpointConnectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateEndpointConnectionsCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String configStoreName, String apiVersion, String privateEndpointConnectionName, PrivateEndpointConnection privateEndpointConnection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateEndpointConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateEndpointConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'configStoreName' is set
        if (configStoreName == null) {
            throw new ApiException("Missing the required parameter 'configStoreName' when calling privateEndpointConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateEndpointConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'privateEndpointConnectionName' is set
        if (privateEndpointConnectionName == null) {
            throw new ApiException("Missing the required parameter 'privateEndpointConnectionName' when calling privateEndpointConnectionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'privateEndpointConnection' is set
        if (privateEndpointConnection == null) {
            throw new ApiException("Missing the required parameter 'privateEndpointConnection' when calling privateEndpointConnectionsCreateOrUpdate(Async)");
        }

        return privateEndpointConnectionsCreateOrUpdateCall(subscriptionId, resourceGroupName, configStoreName, apiVersion, privateEndpointConnectionName, privateEndpointConnection, _callback);

    }

    /**
     * 
     * Update the state of the specified private endpoint connection associated with the configuration store.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param configStoreName The name of the configuration store. (required)
     * @param apiVersion The client API version. (required)
     * @param privateEndpointConnectionName Private endpoint connection name (required)
     * @param privateEndpointConnection The private endpoint connection properties. (required)
     * @return PrivateEndpointConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public PrivateEndpointConnection privateEndpointConnectionsCreateOrUpdate(String subscriptionId, String resourceGroupName, String configStoreName, String apiVersion, String privateEndpointConnectionName, PrivateEndpointConnection privateEndpointConnection) throws ApiException {
        ApiResponse<PrivateEndpointConnection> localVarResp = privateEndpointConnectionsCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, configStoreName, apiVersion, privateEndpointConnectionName, privateEndpointConnection);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the state of the specified private endpoint connection associated with the configuration store.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param configStoreName The name of the configuration store. (required)
     * @param apiVersion The client API version. (required)
     * @param privateEndpointConnectionName Private endpoint connection name (required)
     * @param privateEndpointConnection The private endpoint connection properties. (required)
     * @return ApiResponse&lt;PrivateEndpointConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateEndpointConnection> privateEndpointConnectionsCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String configStoreName, String apiVersion, String privateEndpointConnectionName, PrivateEndpointConnection privateEndpointConnection) throws ApiException {
        okhttp3.Call localVarCall = privateEndpointConnectionsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, configStoreName, apiVersion, privateEndpointConnectionName, privateEndpointConnection, null);
        Type localVarReturnType = new TypeToken<PrivateEndpointConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the state of the specified private endpoint connection associated with the configuration store.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param configStoreName The name of the configuration store. (required)
     * @param apiVersion The client API version. (required)
     * @param privateEndpointConnectionName Private endpoint connection name (required)
     * @param privateEndpointConnection The private endpoint connection properties. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successfully accepted; the operation will complete asynchronously. The provisioning state of the resource should indicate the current state of the resource. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateEndpointConnectionsCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String configStoreName, String apiVersion, String privateEndpointConnectionName, PrivateEndpointConnection privateEndpointConnection, final ApiCallback<PrivateEndpointConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateEndpointConnectionsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, configStoreName, apiVersion, privateEndpointConnectionName, privateEndpointConnection, _callback);
        Type localVarReturnType = new TypeToken<PrivateEndpointConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateEndpointConnectionsDelete
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param configStoreName The name of the configuration store. (required)
     * @param apiVersion The client API version. (required)
     * @param privateEndpointConnectionName Private endpoint connection name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successful; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified resource was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateEndpointConnectionsDeleteCall(String subscriptionId, String resourceGroupName, String configStoreName, String apiVersion, String privateEndpointConnectionName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/privateEndpointConnections/{privateEndpointConnectionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "configStoreName" + "}", localVarApiClient.escapeString(configStoreName.toString()))
            .replace("{" + "privateEndpointConnectionName" + "}", localVarApiClient.escapeString(privateEndpointConnectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateEndpointConnectionsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String configStoreName, String apiVersion, String privateEndpointConnectionName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateEndpointConnectionsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateEndpointConnectionsDelete(Async)");
        }

        // verify the required parameter 'configStoreName' is set
        if (configStoreName == null) {
            throw new ApiException("Missing the required parameter 'configStoreName' when calling privateEndpointConnectionsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateEndpointConnectionsDelete(Async)");
        }

        // verify the required parameter 'privateEndpointConnectionName' is set
        if (privateEndpointConnectionName == null) {
            throw new ApiException("Missing the required parameter 'privateEndpointConnectionName' when calling privateEndpointConnectionsDelete(Async)");
        }

        return privateEndpointConnectionsDeleteCall(subscriptionId, resourceGroupName, configStoreName, apiVersion, privateEndpointConnectionName, _callback);

    }

    /**
     * 
     * Deletes a private endpoint connection.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param configStoreName The name of the configuration store. (required)
     * @param apiVersion The client API version. (required)
     * @param privateEndpointConnectionName Private endpoint connection name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successful; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified resource was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public void privateEndpointConnectionsDelete(String subscriptionId, String resourceGroupName, String configStoreName, String apiVersion, String privateEndpointConnectionName) throws ApiException {
        privateEndpointConnectionsDeleteWithHttpInfo(subscriptionId, resourceGroupName, configStoreName, apiVersion, privateEndpointConnectionName);
    }

    /**
     * 
     * Deletes a private endpoint connection.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param configStoreName The name of the configuration store. (required)
     * @param apiVersion The client API version. (required)
     * @param privateEndpointConnectionName Private endpoint connection name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successful; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified resource was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> privateEndpointConnectionsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String configStoreName, String apiVersion, String privateEndpointConnectionName) throws ApiException {
        okhttp3.Call localVarCall = privateEndpointConnectionsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, configStoreName, apiVersion, privateEndpointConnectionName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a private endpoint connection.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param configStoreName The name of the configuration store. (required)
     * @param apiVersion The client API version. (required)
     * @param privateEndpointConnectionName Private endpoint connection name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request was successful; the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the specified resource was not found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateEndpointConnectionsDeleteAsync(String subscriptionId, String resourceGroupName, String configStoreName, String apiVersion, String privateEndpointConnectionName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateEndpointConnectionsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, configStoreName, apiVersion, privateEndpointConnectionName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateEndpointConnectionsGet
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param configStoreName The name of the configuration store. (required)
     * @param apiVersion The client API version. (required)
     * @param privateEndpointConnectionName Private endpoint connection name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateEndpointConnectionsGetCall(String subscriptionId, String resourceGroupName, String configStoreName, String apiVersion, String privateEndpointConnectionName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/privateEndpointConnections/{privateEndpointConnectionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "configStoreName" + "}", localVarApiClient.escapeString(configStoreName.toString()))
            .replace("{" + "privateEndpointConnectionName" + "}", localVarApiClient.escapeString(privateEndpointConnectionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateEndpointConnectionsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String configStoreName, String apiVersion, String privateEndpointConnectionName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateEndpointConnectionsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateEndpointConnectionsGet(Async)");
        }

        // verify the required parameter 'configStoreName' is set
        if (configStoreName == null) {
            throw new ApiException("Missing the required parameter 'configStoreName' when calling privateEndpointConnectionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateEndpointConnectionsGet(Async)");
        }

        // verify the required parameter 'privateEndpointConnectionName' is set
        if (privateEndpointConnectionName == null) {
            throw new ApiException("Missing the required parameter 'privateEndpointConnectionName' when calling privateEndpointConnectionsGet(Async)");
        }

        return privateEndpointConnectionsGetCall(subscriptionId, resourceGroupName, configStoreName, apiVersion, privateEndpointConnectionName, _callback);

    }

    /**
     * 
     * Gets the specified private endpoint connection associated with the configuration store.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param configStoreName The name of the configuration store. (required)
     * @param apiVersion The client API version. (required)
     * @param privateEndpointConnectionName Private endpoint connection name (required)
     * @return PrivateEndpointConnection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public PrivateEndpointConnection privateEndpointConnectionsGet(String subscriptionId, String resourceGroupName, String configStoreName, String apiVersion, String privateEndpointConnectionName) throws ApiException {
        ApiResponse<PrivateEndpointConnection> localVarResp = privateEndpointConnectionsGetWithHttpInfo(subscriptionId, resourceGroupName, configStoreName, apiVersion, privateEndpointConnectionName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the specified private endpoint connection associated with the configuration store.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param configStoreName The name of the configuration store. (required)
     * @param apiVersion The client API version. (required)
     * @param privateEndpointConnectionName Private endpoint connection name (required)
     * @return ApiResponse&lt;PrivateEndpointConnection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateEndpointConnection> privateEndpointConnectionsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String configStoreName, String apiVersion, String privateEndpointConnectionName) throws ApiException {
        okhttp3.Call localVarCall = privateEndpointConnectionsGetValidateBeforeCall(subscriptionId, resourceGroupName, configStoreName, apiVersion, privateEndpointConnectionName, null);
        Type localVarReturnType = new TypeToken<PrivateEndpointConnection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the specified private endpoint connection associated with the configuration store.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param configStoreName The name of the configuration store. (required)
     * @param apiVersion The client API version. (required)
     * @param privateEndpointConnectionName Private endpoint connection name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateEndpointConnectionsGetAsync(String subscriptionId, String resourceGroupName, String configStoreName, String apiVersion, String privateEndpointConnectionName, final ApiCallback<PrivateEndpointConnection> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateEndpointConnectionsGetValidateBeforeCall(subscriptionId, resourceGroupName, configStoreName, apiVersion, privateEndpointConnectionName, _callback);
        Type localVarReturnType = new TypeToken<PrivateEndpointConnection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for privateEndpointConnectionsListByConfigurationStore
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param configStoreName The name of the configuration store. (required)
     * @param apiVersion The client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateEndpointConnectionsListByConfigurationStoreCall(String subscriptionId, String resourceGroupName, String configStoreName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AppConfiguration/configurationStores/{configStoreName}/privateEndpointConnections"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "configStoreName" + "}", localVarApiClient.escapeString(configStoreName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call privateEndpointConnectionsListByConfigurationStoreValidateBeforeCall(String subscriptionId, String resourceGroupName, String configStoreName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling privateEndpointConnectionsListByConfigurationStore(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling privateEndpointConnectionsListByConfigurationStore(Async)");
        }

        // verify the required parameter 'configStoreName' is set
        if (configStoreName == null) {
            throw new ApiException("Missing the required parameter 'configStoreName' when calling privateEndpointConnectionsListByConfigurationStore(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling privateEndpointConnectionsListByConfigurationStore(Async)");
        }

        return privateEndpointConnectionsListByConfigurationStoreCall(subscriptionId, resourceGroupName, configStoreName, apiVersion, _callback);

    }

    /**
     * 
     * Lists all private endpoint connections for a configuration store.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param configStoreName The name of the configuration store. (required)
     * @param apiVersion The client API version. (required)
     * @return PrivateEndpointConnectionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public PrivateEndpointConnectionListResult privateEndpointConnectionsListByConfigurationStore(String subscriptionId, String resourceGroupName, String configStoreName, String apiVersion) throws ApiException {
        ApiResponse<PrivateEndpointConnectionListResult> localVarResp = privateEndpointConnectionsListByConfigurationStoreWithHttpInfo(subscriptionId, resourceGroupName, configStoreName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all private endpoint connections for a configuration store.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param configStoreName The name of the configuration store. (required)
     * @param apiVersion The client API version. (required)
     * @return ApiResponse&lt;PrivateEndpointConnectionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrivateEndpointConnectionListResult> privateEndpointConnectionsListByConfigurationStoreWithHttpInfo(String subscriptionId, String resourceGroupName, String configStoreName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = privateEndpointConnectionsListByConfigurationStoreValidateBeforeCall(subscriptionId, resourceGroupName, configStoreName, apiVersion, null);
        Type localVarReturnType = new TypeToken<PrivateEndpointConnectionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all private endpoint connections for a configuration store.
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the container registry belongs. (required)
     * @param configStoreName The name of the configuration store. (required)
     * @param apiVersion The client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call privateEndpointConnectionsListByConfigurationStoreAsync(String subscriptionId, String resourceGroupName, String configStoreName, String apiVersion, final ApiCallback<PrivateEndpointConnectionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = privateEndpointConnectionsListByConfigurationStoreValidateBeforeCall(subscriptionId, resourceGroupName, configStoreName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PrivateEndpointConnectionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
