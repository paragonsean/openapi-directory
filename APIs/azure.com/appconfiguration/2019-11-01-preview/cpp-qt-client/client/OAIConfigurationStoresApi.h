/**
 * AppConfigurationManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConfigurationStoresApi_H
#define OAI_OAIConfigurationStoresApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiKey.h"
#include "OAIApiKeyListResult.h"
#include "OAIConfigurationStore.h"
#include "OAIConfigurationStoreListResult.h"
#include "OAIConfigurationStoreUpdateParameters.h"
#include "OAIError.h"
#include "OAIKeyValue.h"
#include "OAIListKeyValueParameters.h"
#include "OAIRegenerateKeyParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConfigurationStoresApi : public QObject {
    Q_OBJECT

public:
    OAIConfigurationStoresApi(const int timeOut = 0);
    ~OAIConfigurationStoresApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  config_store_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  config_store_creation_parameters OAIConfigurationStore [required]
    */
    virtual void configurationStoresCreate(const QString &subscription_id, const QString &resource_group_name, const QString &config_store_name, const QString &api_version, const OAIConfigurationStore &config_store_creation_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  config_store_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void configurationStoresDelete(const QString &subscription_id, const QString &resource_group_name, const QString &config_store_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  config_store_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void configurationStoresGet(const QString &subscription_id, const QString &resource_group_name, const QString &config_store_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  skip_token QString [optional]
    */
    virtual void configurationStoresList(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  skip_token QString [optional]
    */
    virtual void configurationStoresListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  config_store_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  list_key_value_parameters OAIListKeyValueParameters [required]
    */
    virtual void configurationStoresListKeyValue(const QString &subscription_id, const QString &resource_group_name, const QString &config_store_name, const QString &api_version, const OAIListKeyValueParameters &list_key_value_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  config_store_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  skip_token QString [optional]
    */
    virtual void configurationStoresListKeys(const QString &subscription_id, const QString &resource_group_name, const QString &config_store_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  config_store_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  regenerate_key_parameters OAIRegenerateKeyParameters [required]
    */
    virtual void configurationStoresRegenerateKey(const QString &subscription_id, const QString &resource_group_name, const QString &config_store_name, const QString &api_version, const OAIRegenerateKeyParameters &regenerate_key_parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  config_store_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  config_store_update_parameters OAIConfigurationStoreUpdateParameters [required]
    */
    virtual void configurationStoresUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &config_store_name, const QString &api_version, const OAIConfigurationStoreUpdateParameters &config_store_update_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void configurationStoresCreateCallback(OAIHttpRequestWorker *worker);
    void configurationStoresDeleteCallback(OAIHttpRequestWorker *worker);
    void configurationStoresGetCallback(OAIHttpRequestWorker *worker);
    void configurationStoresListCallback(OAIHttpRequestWorker *worker);
    void configurationStoresListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void configurationStoresListKeyValueCallback(OAIHttpRequestWorker *worker);
    void configurationStoresListKeysCallback(OAIHttpRequestWorker *worker);
    void configurationStoresRegenerateKeyCallback(OAIHttpRequestWorker *worker);
    void configurationStoresUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void configurationStoresCreateSignal(OAIConfigurationStore summary);
    void configurationStoresDeleteSignal();
    void configurationStoresGetSignal(OAIConfigurationStore summary);
    void configurationStoresListSignal(OAIConfigurationStoreListResult summary);
    void configurationStoresListByResourceGroupSignal(OAIConfigurationStoreListResult summary);
    void configurationStoresListKeyValueSignal(OAIKeyValue summary);
    void configurationStoresListKeysSignal(OAIApiKeyListResult summary);
    void configurationStoresRegenerateKeySignal(OAIApiKey summary);
    void configurationStoresUpdateSignal(OAIConfigurationStore summary);


    void configurationStoresCreateSignalFull(OAIHttpRequestWorker *worker, OAIConfigurationStore summary);
    void configurationStoresDeleteSignalFull(OAIHttpRequestWorker *worker);
    void configurationStoresGetSignalFull(OAIHttpRequestWorker *worker, OAIConfigurationStore summary);
    void configurationStoresListSignalFull(OAIHttpRequestWorker *worker, OAIConfigurationStoreListResult summary);
    void configurationStoresListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIConfigurationStoreListResult summary);
    void configurationStoresListKeyValueSignalFull(OAIHttpRequestWorker *worker, OAIKeyValue summary);
    void configurationStoresListKeysSignalFull(OAIHttpRequestWorker *worker, OAIApiKeyListResult summary);
    void configurationStoresRegenerateKeySignalFull(OAIHttpRequestWorker *worker, OAIApiKey summary);
    void configurationStoresUpdateSignalFull(OAIHttpRequestWorker *worker, OAIConfigurationStore summary);

    Q_DECL_DEPRECATED_X("Use configurationStoresCreateSignalError() instead")
    void configurationStoresCreateSignalE(OAIConfigurationStore summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationStoresCreateSignalError(OAIConfigurationStore summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationStoresDeleteSignalError() instead")
    void configurationStoresDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void configurationStoresDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationStoresGetSignalError() instead")
    void configurationStoresGetSignalE(OAIConfigurationStore summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationStoresGetSignalError(OAIConfigurationStore summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationStoresListSignalError() instead")
    void configurationStoresListSignalE(OAIConfigurationStoreListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationStoresListSignalError(OAIConfigurationStoreListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationStoresListByResourceGroupSignalError() instead")
    void configurationStoresListByResourceGroupSignalE(OAIConfigurationStoreListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationStoresListByResourceGroupSignalError(OAIConfigurationStoreListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationStoresListKeyValueSignalError() instead")
    void configurationStoresListKeyValueSignalE(OAIKeyValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationStoresListKeyValueSignalError(OAIKeyValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationStoresListKeysSignalError() instead")
    void configurationStoresListKeysSignalE(OAIApiKeyListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationStoresListKeysSignalError(OAIApiKeyListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationStoresRegenerateKeySignalError() instead")
    void configurationStoresRegenerateKeySignalE(OAIApiKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationStoresRegenerateKeySignalError(OAIApiKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationStoresUpdateSignalError() instead")
    void configurationStoresUpdateSignalE(OAIConfigurationStore summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationStoresUpdateSignalError(OAIConfigurationStore summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use configurationStoresCreateSignalErrorFull() instead")
    void configurationStoresCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationStoresCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationStoresDeleteSignalErrorFull() instead")
    void configurationStoresDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationStoresDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationStoresGetSignalErrorFull() instead")
    void configurationStoresGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationStoresGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationStoresListSignalErrorFull() instead")
    void configurationStoresListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationStoresListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationStoresListByResourceGroupSignalErrorFull() instead")
    void configurationStoresListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationStoresListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationStoresListKeyValueSignalErrorFull() instead")
    void configurationStoresListKeyValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationStoresListKeyValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationStoresListKeysSignalErrorFull() instead")
    void configurationStoresListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationStoresListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationStoresRegenerateKeySignalErrorFull() instead")
    void configurationStoresRegenerateKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationStoresRegenerateKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configurationStoresUpdateSignalErrorFull() instead")
    void configurationStoresUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configurationStoresUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
