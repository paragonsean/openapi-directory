/*
 * AzureBridgeAdminClient
 * AzureBridge Admin Client.
 *
 * The version of the OpenAPI document: 2016-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProductsDownload200ResponsePropertiesLinksInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties for aggregate usage.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:48.639196-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductsDownload200ResponseProperties {
  public static final String SERIALIZED_NAME_GALLERY_PACKAGE_BLOB_SAS_URI = "galleryPackageBlobSasUri";
  @SerializedName(SERIALIZED_NAME_GALLERY_PACKAGE_BLOB_SAS_URI)
  private String galleryPackageBlobSasUri;

  public static final String SERIALIZED_NAME_LEGAL_TERMS = "legalTerms";
  @SerializedName(SERIALIZED_NAME_LEGAL_TERMS)
  private String legalTerms;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<ProductsDownload200ResponsePropertiesLinksInner> links = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRIVACY_POLICY = "privacyPolicy";
  @SerializedName(SERIALIZED_NAME_PRIVACY_POLICY)
  private String privacyPolicy;

  public static final String SERIALIZED_NAME_PRODUCT_DETAILS_PROPERTIES = "productDetailsProperties";
  @SerializedName(SERIALIZED_NAME_PRODUCT_DETAILS_PROPERTIES)
  private Object productDetailsProperties;

  /**
   * The provisioning state of the resource.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    STOPPED("Stopped"),
    
    STARTING("Starting"),
    
    RUNNING("Running"),
    
    STOPPING("Stopping"),
    
    SUCCEEDED("Succeeded"),
    
    DOWNLOADING("Downloading");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_VM_EXTENSION_TYPE = "vmExtensionType";
  @SerializedName(SERIALIZED_NAME_VM_EXTENSION_TYPE)
  private String vmExtensionType;

  public ProductsDownload200ResponseProperties() {
  }

  public ProductsDownload200ResponseProperties(
     String galleryPackageBlobSasUri
  ) {
    this();
    this.galleryPackageBlobSasUri = galleryPackageBlobSasUri;
  }

  /**
   * The URI to the .azpkg file that provides information required for showing product in the gallery.
   * @return galleryPackageBlobSasUri
   */
  @javax.annotation.Nullable
  public String getGalleryPackageBlobSasUri() {
    return galleryPackageBlobSasUri;
  }



  public ProductsDownload200ResponseProperties legalTerms(String legalTerms) {
    this.legalTerms = legalTerms;
    return this;
  }

  /**
   * Legal terms for the product.
   * @return legalTerms
   */
  @javax.annotation.Nullable
  public String getLegalTerms() {
    return legalTerms;
  }

  public void setLegalTerms(String legalTerms) {
    this.legalTerms = legalTerms;
  }


  public ProductsDownload200ResponseProperties links(List<ProductsDownload200ResponsePropertiesLinksInner> links) {
    this.links = links;
    return this;
  }

  public ProductsDownload200ResponseProperties addLinksItem(ProductsDownload200ResponsePropertiesLinksInner linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * List of product links.
   * @return links
   */
  @javax.annotation.Nullable
  public List<ProductsDownload200ResponsePropertiesLinksInner> getLinks() {
    return links;
  }

  public void setLinks(List<ProductsDownload200ResponsePropertiesLinksInner> links) {
    this.links = links;
  }


  public ProductsDownload200ResponseProperties privacyPolicy(String privacyPolicy) {
    this.privacyPolicy = privacyPolicy;
    return this;
  }

  /**
   * Privacy policy of the product.
   * @return privacyPolicy
   */
  @javax.annotation.Nullable
  public String getPrivacyPolicy() {
    return privacyPolicy;
  }

  public void setPrivacyPolicy(String privacyPolicy) {
    this.privacyPolicy = privacyPolicy;
  }


  public ProductsDownload200ResponseProperties productDetailsProperties(Object productDetailsProperties) {
    this.productDetailsProperties = productDetailsProperties;
    return this;
  }

  /**
   * Product information.
   * @return productDetailsProperties
   */
  @javax.annotation.Nullable
  public Object getProductDetailsProperties() {
    return productDetailsProperties;
  }

  public void setProductDetailsProperties(Object productDetailsProperties) {
    this.productDetailsProperties = productDetailsProperties;
  }


  public ProductsDownload200ResponseProperties provisioningState(ProvisioningStateEnum provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The provisioning state of the resource.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningStateEnum provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ProductsDownload200ResponseProperties vmExtensionType(String vmExtensionType) {
    this.vmExtensionType = vmExtensionType;
    return this;
  }

  /**
   * Extension type of the VM.
   * @return vmExtensionType
   */
  @javax.annotation.Nullable
  public String getVmExtensionType() {
    return vmExtensionType;
  }

  public void setVmExtensionType(String vmExtensionType) {
    this.vmExtensionType = vmExtensionType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductsDownload200ResponseProperties productsDownload200ResponseProperties = (ProductsDownload200ResponseProperties) o;
    return Objects.equals(this.galleryPackageBlobSasUri, productsDownload200ResponseProperties.galleryPackageBlobSasUri) &&
        Objects.equals(this.legalTerms, productsDownload200ResponseProperties.legalTerms) &&
        Objects.equals(this.links, productsDownload200ResponseProperties.links) &&
        Objects.equals(this.privacyPolicy, productsDownload200ResponseProperties.privacyPolicy) &&
        Objects.equals(this.productDetailsProperties, productsDownload200ResponseProperties.productDetailsProperties) &&
        Objects.equals(this.provisioningState, productsDownload200ResponseProperties.provisioningState) &&
        Objects.equals(this.vmExtensionType, productsDownload200ResponseProperties.vmExtensionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(galleryPackageBlobSasUri, legalTerms, links, privacyPolicy, productDetailsProperties, provisioningState, vmExtensionType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductsDownload200ResponseProperties {\n");
    sb.append("    galleryPackageBlobSasUri: ").append(toIndentedString(galleryPackageBlobSasUri)).append("\n");
    sb.append("    legalTerms: ").append(toIndentedString(legalTerms)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    privacyPolicy: ").append(toIndentedString(privacyPolicy)).append("\n");
    sb.append("    productDetailsProperties: ").append(toIndentedString(productDetailsProperties)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    vmExtensionType: ").append(toIndentedString(vmExtensionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("galleryPackageBlobSasUri");
    openapiFields.add("legalTerms");
    openapiFields.add("links");
    openapiFields.add("privacyPolicy");
    openapiFields.add("productDetailsProperties");
    openapiFields.add("provisioningState");
    openapiFields.add("vmExtensionType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductsDownload200ResponseProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductsDownload200ResponseProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductsDownload200ResponseProperties is not found in the empty JSON string", ProductsDownload200ResponseProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductsDownload200ResponseProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductsDownload200ResponseProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("galleryPackageBlobSasUri") != null && !jsonObj.get("galleryPackageBlobSasUri").isJsonNull()) && !jsonObj.get("galleryPackageBlobSasUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `galleryPackageBlobSasUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("galleryPackageBlobSasUri").toString()));
      }
      if ((jsonObj.get("legalTerms") != null && !jsonObj.get("legalTerms").isJsonNull()) && !jsonObj.get("legalTerms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalTerms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalTerms").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            ProductsDownload200ResponsePropertiesLinksInner.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      if ((jsonObj.get("privacyPolicy") != null && !jsonObj.get("privacyPolicy").isJsonNull()) && !jsonObj.get("privacyPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privacyPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privacyPolicy").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("vmExtensionType") != null && !jsonObj.get("vmExtensionType").isJsonNull()) && !jsonObj.get("vmExtensionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmExtensionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmExtensionType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductsDownload200ResponseProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductsDownload200ResponseProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductsDownload200ResponseProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductsDownload200ResponseProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductsDownload200ResponseProperties>() {
           @Override
           public void write(JsonWriter out, ProductsDownload200ResponseProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductsDownload200ResponseProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductsDownload200ResponseProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductsDownload200ResponseProperties
   * @throws IOException if the JSON string is invalid with respect to ProductsDownload200ResponseProperties
   */
  public static ProductsDownload200ResponseProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductsDownload200ResponseProperties.class);
  }

  /**
   * Convert an instance of ProductsDownload200ResponseProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

