/**
 * AzureBridgeAdminClient
 * AzureBridge Admin Client.
 *
 * The version of the OpenAPI document: 2016-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProductResource from '../model/ProductResource';
import ProductResourcesPage from '../model/ProductResourcesPage';
import ProductsDownload200Response from '../model/ProductsDownload200Response';

/**
* Products service.
* @module api/ProductsApi
* @version 2016-01-01
*/
export default class ProductsApi {

    /**
    * Constructs a new ProductsApi. 
    * @alias module:api/ProductsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productsDownload operation.
     * @callback module:api/ProductsApi~productsDownloadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductsDownload200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Downloads a product from azure marketplace.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroup The resource group the resource is located under.
     * @param {String} activationName Name of the activation.
     * @param {String} productName Name of the product.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/ProductsApi~productsDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductsDownload200Response}
     */
    productsDownload(subscriptionId, resourceGroup, activationName, productName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling productsDownload");
      }
      // verify the required parameter 'resourceGroup' is set
      if (resourceGroup === undefined || resourceGroup === null) {
        throw new Error("Missing the required parameter 'resourceGroup' when calling productsDownload");
      }
      // verify the required parameter 'activationName' is set
      if (activationName === undefined || activationName === null) {
        throw new Error("Missing the required parameter 'activationName' when calling productsDownload");
      }
      // verify the required parameter 'productName' is set
      if (productName === undefined || productName === null) {
        throw new Error("Missing the required parameter 'productName' when calling productsDownload");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productsDownload");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroup': resourceGroup,
        'activationName': activationName,
        'productName': productName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductsDownload200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.AzureBridge.Admin/activations/{activationName}/products/{productName}/download', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsGet operation.
     * @callback module:api/ProductsApi~productsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return product name.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroup The resource group the resource is located under.
     * @param {String} activationName Name of the activation.
     * @param {String} productName Name of the product.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/ProductsApi~productsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductResource}
     */
    productsGet(subscriptionId, resourceGroup, activationName, productName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling productsGet");
      }
      // verify the required parameter 'resourceGroup' is set
      if (resourceGroup === undefined || resourceGroup === null) {
        throw new Error("Missing the required parameter 'resourceGroup' when calling productsGet");
      }
      // verify the required parameter 'activationName' is set
      if (activationName === undefined || activationName === null) {
        throw new Error("Missing the required parameter 'activationName' when calling productsGet");
      }
      // verify the required parameter 'productName' is set
      if (productName === undefined || productName === null) {
        throw new Error("Missing the required parameter 'productName' when calling productsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroup': resourceGroup,
        'activationName': activationName,
        'productName': productName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.AzureBridge.Admin/activations/{activationName}/products/{productName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productsList operation.
     * @callback module:api/ProductsApi~productsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductResourcesPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return product name.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription.The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroup The resource group the resource is located under.
     * @param {String} activationName Name of the activation.
     * @param {String} apiVersion Client Api Version.
     * @param {module:api/ProductsApi~productsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductResourcesPage}
     */
    productsList(subscriptionId, resourceGroup, activationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling productsList");
      }
      // verify the required parameter 'resourceGroup' is set
      if (resourceGroup === undefined || resourceGroup === null) {
        throw new Error("Missing the required parameter 'resourceGroup' when calling productsList");
      }
      // verify the required parameter 'activationName' is set
      if (activationName === undefined || activationName === null) {
        throw new Error("Missing the required parameter 'activationName' when calling productsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroup': resourceGroup,
        'activationName': activationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductResourcesPage;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}/providers/Microsoft.AzureBridge.Admin/activations/{activationName}/products', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
