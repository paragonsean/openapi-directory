/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Property entity associated with your Azure API Management deployment. API Management policies are a powerful capability of the system that allow the publisher to change the behavior of the API through configuration. Policies are a collection of statements that are executed sequentially on the request or response of an API. Policy statements can be constructed using literal text values, policy expressions, and properties. Each API Management service instance has a properties collection of key/value pairs that are global to the service instance. These properties can be used to manage constant string values across all API configuration and policies.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PropertyGetDefaultResponseErrorDetailsInner from './PropertyGetDefaultResponseErrorDetailsInner';

/**
 * The PropertyGetDefaultResponseError model module.
 * @module model/PropertyGetDefaultResponseError
 * @version 2018-01-01
 */
class PropertyGetDefaultResponseError {
    /**
     * Constructs a new <code>PropertyGetDefaultResponseError</code>.
     * Error Body contract.
     * @alias module:model/PropertyGetDefaultResponseError
     */
    constructor() { 
        
        PropertyGetDefaultResponseError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PropertyGetDefaultResponseError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PropertyGetDefaultResponseError} obj Optional instance to populate.
     * @return {module:model/PropertyGetDefaultResponseError} The populated <code>PropertyGetDefaultResponseError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PropertyGetDefaultResponseError();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], [PropertyGetDefaultResponseErrorDetailsInner]);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PropertyGetDefaultResponseError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PropertyGetDefaultResponseError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        if (data['details']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['details'])) {
                throw new Error("Expected the field `details` to be an array in the JSON data but got " + data['details']);
            }
            // validate the optional field `details` (array)
            for (const item of data['details']) {
                PropertyGetDefaultResponseErrorDetailsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }

        return true;
    }


}



/**
 * Service-defined error code. This code serves as a sub-status for the HTTP error code specified in the response.
 * @member {String} code
 */
PropertyGetDefaultResponseError.prototype['code'] = undefined;

/**
 * The list of invalid fields send in request, in case of validation error.
 * @member {Array.<module:model/PropertyGetDefaultResponseErrorDetailsInner>} details
 */
PropertyGetDefaultResponseError.prototype['details'] = undefined;

/**
 * Human-readable representation of the error.
 * @member {String} message
 */
PropertyGetDefaultResponseError.prototype['message'] = undefined;






export default PropertyGetDefaultResponseError;

