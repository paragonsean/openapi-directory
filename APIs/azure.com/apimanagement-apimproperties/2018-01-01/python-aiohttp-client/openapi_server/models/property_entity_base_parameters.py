# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PropertyEntityBaseParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, secret: bool=None, tags: List[str]=None):
        """PropertyEntityBaseParameters - a model defined in OpenAPI

        :param secret: The secret of this PropertyEntityBaseParameters.
        :param tags: The tags of this PropertyEntityBaseParameters.
        """
        self.openapi_types = {
            'secret': bool,
            'tags': List[str]
        }

        self.attribute_map = {
            'secret': 'secret',
            'tags': 'tags'
        }

        self._secret = secret
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PropertyEntityBaseParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PropertyEntityBaseParameters of this PropertyEntityBaseParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def secret(self):
        """Gets the secret of this PropertyEntityBaseParameters.

        Determines whether the value is a secret and should be encrypted or not. Default value is false.

        :return: The secret of this PropertyEntityBaseParameters.
        :rtype: bool
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this PropertyEntityBaseParameters.

        Determines whether the value is a secret and should be encrypted or not. Default value is false.

        :param secret: The secret of this PropertyEntityBaseParameters.
        :type secret: bool
        """

        self._secret = secret

    @property
    def tags(self):
        """Gets the tags of this PropertyEntityBaseParameters.

        Optional tags that when provided can be used to filter the property list.

        :return: The tags of this PropertyEntityBaseParameters.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PropertyEntityBaseParameters.

        Optional tags that when provided can be used to filter the property list.

        :param tags: The tags of this PropertyEntityBaseParameters.
        :type tags: List[str]
        """
        if tags is not None and len(tags) > 32:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `32`")

        self._tags = tags
