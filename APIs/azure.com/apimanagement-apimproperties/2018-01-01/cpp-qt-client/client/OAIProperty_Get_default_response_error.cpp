/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Property entity associated with your Azure API Management deployment. API Management policies are a powerful capability of the system that allow the publisher to change the behavior of the API through configuration. Policies are a collection of statements that are executed sequentially on the request or response of an API. Policy statements can be constructed using literal text values, policy expressions, and properties. Each API Management service instance has a properties collection of key/value pairs that are global to the service instance. These properties can be used to manage constant string values across all API configuration and policies.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProperty_Get_default_response_error.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProperty_Get_default_response_error::OAIProperty_Get_default_response_error(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProperty_Get_default_response_error::OAIProperty_Get_default_response_error() {
    this->initializeModel();
}

OAIProperty_Get_default_response_error::~OAIProperty_Get_default_response_error() {}

void OAIProperty_Get_default_response_error::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIProperty_Get_default_response_error::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProperty_Get_default_response_error::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIProperty_Get_default_response_error::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProperty_Get_default_response_error::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAIProperty_Get_default_response_error::getCode() const {
    return m_code;
}
void OAIProperty_Get_default_response_error::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIProperty_Get_default_response_error::is_code_Set() const{
    return m_code_isSet;
}

bool OAIProperty_Get_default_response_error::is_code_Valid() const{
    return m_code_isValid;
}

QList<OAIProperty_Get_default_response_error_details_inner> OAIProperty_Get_default_response_error::getDetails() const {
    return m_details;
}
void OAIProperty_Get_default_response_error::setDetails(const QList<OAIProperty_Get_default_response_error_details_inner> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIProperty_Get_default_response_error::is_details_Set() const{
    return m_details_isSet;
}

bool OAIProperty_Get_default_response_error::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIProperty_Get_default_response_error::getMessage() const {
    return m_message;
}
void OAIProperty_Get_default_response_error::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIProperty_Get_default_response_error::is_message_Set() const{
    return m_message_isSet;
}

bool OAIProperty_Get_default_response_error::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIProperty_Get_default_response_error::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProperty_Get_default_response_error::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
