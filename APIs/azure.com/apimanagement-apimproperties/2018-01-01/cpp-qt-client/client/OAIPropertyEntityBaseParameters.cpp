/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Property entity associated with your Azure API Management deployment. API Management policies are a powerful capability of the system that allow the publisher to change the behavior of the API through configuration. Policies are a collection of statements that are executed sequentially on the request or response of an API. Policy statements can be constructed using literal text values, policy expressions, and properties. Each API Management service instance has a properties collection of key/value pairs that are global to the service instance. These properties can be used to manage constant string values across all API configuration and policies.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPropertyEntityBaseParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPropertyEntityBaseParameters::OAIPropertyEntityBaseParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPropertyEntityBaseParameters::OAIPropertyEntityBaseParameters() {
    this->initializeModel();
}

OAIPropertyEntityBaseParameters::~OAIPropertyEntityBaseParameters() {}

void OAIPropertyEntityBaseParameters::initializeModel() {

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIPropertyEntityBaseParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPropertyEntityBaseParameters::fromJsonObject(QJsonObject json) {

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIPropertyEntityBaseParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPropertyEntityBaseParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

bool OAIPropertyEntityBaseParameters::isSecret() const {
    return m_secret;
}
void OAIPropertyEntityBaseParameters::setSecret(const bool &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIPropertyEntityBaseParameters::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIPropertyEntityBaseParameters::is_secret_Valid() const{
    return m_secret_isValid;
}

QList<QString> OAIPropertyEntityBaseParameters::getTags() const {
    return m_tags;
}
void OAIPropertyEntityBaseParameters::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPropertyEntityBaseParameters::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPropertyEntityBaseParameters::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIPropertyEntityBaseParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPropertyEntityBaseParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
