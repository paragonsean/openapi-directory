/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Property entity associated with your Azure API Management deployment. API Management policies are a powerful capability of the system that allow the publisher to change the behavior of the API through configuration. Policies are a collection of statements that are executed sequentially on the request or response of an API. Policy statements can be constructed using literal text values, policy expressions, and properties. Each API Management service instance has a properties collection of key/value pairs that are global to the service instance. These properties can be used to manage constant string values across all API configuration and policies.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPropertyUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPropertyUpdateParameters::OAIPropertyUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPropertyUpdateParameters::OAIPropertyUpdateParameters() {
    this->initializeModel();
}

OAIPropertyUpdateParameters::~OAIPropertyUpdateParameters() {}

void OAIPropertyUpdateParameters::initializeModel() {

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAIPropertyUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPropertyUpdateParameters::fromJsonObject(QJsonObject json) {

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAIPropertyUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPropertyUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

OAIPropertyUpdateParameterProperties OAIPropertyUpdateParameters::getProperties() const {
    return m_properties;
}
void OAIPropertyUpdateParameters::setProperties(const OAIPropertyUpdateParameterProperties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIPropertyUpdateParameters::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIPropertyUpdateParameters::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAIPropertyUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPropertyUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
