/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Property entity associated with your Azure API Management deployment. API Management policies are a powerful capability of the system that allow the publisher to change the behavior of the API through configuration. Policies are a collection of statements that are executed sequentially on the request or response of an API. Policy statements can be constructed using literal text values, policy expressions, and properties. Each API Management service instance has a properties collection of key/value pairs that are global to the service instance. These properties can be used to manage constant string values across all API configuration and policies.
 *
 * The version of the OpenAPI document: 2016-10-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPropertyCreateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPropertyCreateParameters::OAIPropertyCreateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPropertyCreateParameters::OAIPropertyCreateParameters() {
    this->initializeModel();
}

OAIPropertyCreateParameters::~OAIPropertyCreateParameters() {}

void OAIPropertyCreateParameters::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIPropertyCreateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPropertyCreateParameters::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIPropertyCreateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPropertyCreateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIPropertyCreateParameters::getName() const {
    return m_name;
}
void OAIPropertyCreateParameters::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPropertyCreateParameters::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPropertyCreateParameters::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIPropertyCreateParameters::isSecret() const {
    return m_secret;
}
void OAIPropertyCreateParameters::setSecret(const bool &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAIPropertyCreateParameters::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIPropertyCreateParameters::is_secret_Valid() const{
    return m_secret_isValid;
}

QList<QString> OAIPropertyCreateParameters::getTags() const {
    return m_tags;
}
void OAIPropertyCreateParameters::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPropertyCreateParameters::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPropertyCreateParameters::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIPropertyCreateParameters::getValue() const {
    return m_value;
}
void OAIPropertyCreateParameters::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPropertyCreateParameters::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPropertyCreateParameters::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIPropertyCreateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPropertyCreateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
