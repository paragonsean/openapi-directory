/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Property entity associated with your Azure API Management deployment. API Management policies are a powerful capability of the system that allow the publisher to change the behavior of the API through configuration. Policies are a collection of statements that are executed sequentially on the request or response of an API. Policy statements can be constructed using literal text values, policy expressions, and properties. Each API Management service instance has a properties collection of key/value pairs that are global to the service instance. These properties can be used to manage constant string values across all API configuration and policies.
 *
 * The version of the OpenAPI document: 2016-10-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PropertyCreateParameters model module.
 * @module model/PropertyCreateParameters
 * @version 2016-10-10
 */
class PropertyCreateParameters {
    /**
     * Constructs a new <code>PropertyCreateParameters</code>.
     * Parameters supplied to the Create Property operation.
     * @alias module:model/PropertyCreateParameters
     * @param name {String} Unique name of Property. It may contain only letters, digits, period, dash, and underscore characters.
     * @param value {String} Value of the property. Can contain policy expressions. It may not be empty or consist only of whitespace.
     */
    constructor(name, value) { 
        
        PropertyCreateParameters.initialize(this, name, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, value) { 
        obj['name'] = name;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>PropertyCreateParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PropertyCreateParameters} obj Optional instance to populate.
     * @return {module:model/PropertyCreateParameters} The populated <code>PropertyCreateParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PropertyCreateParameters();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'Boolean');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PropertyCreateParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PropertyCreateParameters</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PropertyCreateParameters.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}

PropertyCreateParameters.RequiredProperties = ["name", "value"];

/**
 * Unique name of Property. It may contain only letters, digits, period, dash, and underscore characters.
 * @member {String} name
 */
PropertyCreateParameters.prototype['name'] = undefined;

/**
 * Determines whether the value is a secret and should be encrypted or not. Default value is false.
 * @member {Boolean} secret
 */
PropertyCreateParameters.prototype['secret'] = undefined;

/**
 * Optional tags that when provided can be used to filter the property list.
 * @member {Array.<String>} tags
 */
PropertyCreateParameters.prototype['tags'] = undefined;

/**
 * Value of the property. Can contain policy expressions. It may not be empty or consist only of whitespace.
 * @member {String} value
 */
PropertyCreateParameters.prototype['value'] = undefined;






export default PropertyCreateParameters;

