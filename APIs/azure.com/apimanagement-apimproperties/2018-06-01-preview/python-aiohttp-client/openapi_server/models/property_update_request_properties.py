# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PropertyUpdateRequestProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, value: str=None):
        """PropertyUpdateRequestProperties - a model defined in OpenAPI

        :param display_name: The display_name of this PropertyUpdateRequestProperties.
        :param value: The value of this PropertyUpdateRequestProperties.
        """
        self.openapi_types = {
            'display_name': str,
            'value': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'value': 'value'
        }

        self._display_name = display_name
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PropertyUpdateRequestProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Property_Update_request_properties of this PropertyUpdateRequestProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this PropertyUpdateRequestProperties.

        Unique name of Property. It may contain only letters, digits, period, dash, and underscore characters.

        :return: The display_name of this PropertyUpdateRequestProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PropertyUpdateRequestProperties.

        Unique name of Property. It may contain only letters, digits, period, dash, and underscore characters.

        :param display_name: The display_name of this PropertyUpdateRequestProperties.
        :type display_name: str
        """
        if display_name is not None and len(display_name) > 256:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `256`")
        if display_name is not None and len(display_name) < 1:
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")
        if display_name is not None and not re.search(r'^[A-Za-z0-9-._]+$', display_name):
            raise ValueError("Invalid value for `display_name`, must be a follow pattern or equal to `/^[A-Za-z0-9-._]+$/`")

        self._display_name = display_name

    @property
    def value(self):
        """Gets the value of this PropertyUpdateRequestProperties.

        Value of the property. Can contain policy expressions. It may not be empty or consist only of whitespace.

        :return: The value of this PropertyUpdateRequestProperties.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PropertyUpdateRequestProperties.

        Value of the property. Can contain policy expressions. It may not be empty or consist only of whitespace.

        :param value: The value of this PropertyUpdateRequestProperties.
        :type value: str
        """
        if value is not None and len(value) > 4096:
            raise ValueError("Invalid value for `value`, length must be less than or equal to `4096`")
        if value is not None and len(value) < 1:
            raise ValueError("Invalid value for `value`, length must be greater than or equal to `1`")

        self._value = value
