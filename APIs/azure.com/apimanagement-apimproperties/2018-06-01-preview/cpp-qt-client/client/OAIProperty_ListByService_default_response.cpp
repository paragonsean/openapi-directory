/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Property entity associated with your Azure API Management deployment. API Management policies are a powerful capability of the system that allow the publisher to change the behavior of the API through configuration. Policies are a collection of statements that are executed sequentially on the request or response of an API. Policy statements can be constructed using literal text values, policy expressions, and properties. Each API Management service instance has a properties collection of key/value pairs that are global to the service instance. These properties can be used to manage constant string values across all API configuration and policies.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProperty_ListByService_default_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProperty_ListByService_default_response::OAIProperty_ListByService_default_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProperty_ListByService_default_response::OAIProperty_ListByService_default_response() {
    this->initializeModel();
}

OAIProperty_ListByService_default_response::~OAIProperty_ListByService_default_response() {}

void OAIProperty_ListByService_default_response::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;
}

void OAIProperty_ListByService_default_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProperty_ListByService_default_response::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;
}

QString OAIProperty_ListByService_default_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProperty_ListByService_default_response::asJsonObject() const {
    QJsonObject obj;
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    return obj;
}

OAIProperty_ListByService_default_response_error OAIProperty_ListByService_default_response::getError() const {
    return m_error;
}
void OAIProperty_ListByService_default_response::setError(const OAIProperty_ListByService_default_response_error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIProperty_ListByService_default_response::is_error_Set() const{
    return m_error_isSet;
}

bool OAIProperty_ListByService_default_response::is_error_Valid() const{
    return m_error_isValid;
}

bool OAIProperty_ListByService_default_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProperty_ListByService_default_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
