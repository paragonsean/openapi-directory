/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Property entity associated with your Azure API Management deployment. API Management policies are a powerful capability of the system that allow the publisher to change the behavior of the API through configuration. Policies are a collection of statements that are executed sequentially on the request or response of an API. Policy statements can be constructed using literal text values, policy expressions, and properties. Each API Management service instance has a properties collection of key/value pairs that are global to the service instance. These properties can be used to manage constant string values across all API configuration and policies.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProperty_ListByService_200_response_value_inner_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProperty_ListByService_200_response_value_inner_properties::OAIProperty_ListByService_200_response_value_inner_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProperty_ListByService_200_response_value_inner_properties::OAIProperty_ListByService_200_response_value_inner_properties() {
    this->initializeModel();
}

OAIProperty_ListByService_200_response_value_inner_properties::~OAIProperty_ListByService_200_response_value_inner_properties() {}

void OAIProperty_ListByService_200_response_value_inner_properties::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIProperty_ListByService_200_response_value_inner_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProperty_ListByService_200_response_value_inner_properties::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIProperty_ListByService_200_response_value_inner_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProperty_ListByService_200_response_value_inner_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIProperty_ListByService_200_response_value_inner_properties::getDisplayName() const {
    return m_display_name;
}
void OAIProperty_ListByService_200_response_value_inner_properties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIProperty_ListByService_200_response_value_inner_properties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIProperty_ListByService_200_response_value_inner_properties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIProperty_ListByService_200_response_value_inner_properties::getValue() const {
    return m_value;
}
void OAIProperty_ListByService_200_response_value_inner_properties::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIProperty_ListByService_200_response_value_inner_properties::is_value_Set() const{
    return m_value_isSet;
}

bool OAIProperty_ListByService_200_response_value_inner_properties::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIProperty_ListByService_200_response_value_inner_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProperty_ListByService_200_response_value_inner_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_display_name_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
