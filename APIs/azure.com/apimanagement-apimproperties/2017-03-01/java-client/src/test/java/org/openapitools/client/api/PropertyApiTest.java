/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on Property entity associated with your Azure API Management deployment. API Management policies are a powerful capability of the system that allow the publisher to change the behavior of the API through configuration. Policies are a collection of statements that are executed sequentially on the request or response of an API. Policy statements can be constructed using literal text values, policy expressions, and properties. Each API Management service instance has a properties collection of key/value pairs that are global to the service instance. These properties can be used to manage constant string values across all API configuration and policies.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.PropertyCollection;
import org.openapitools.client.model.PropertyContract;
import org.openapitools.client.model.PropertyGetDefaultResponse;
import org.openapitools.client.model.PropertyUpdateParameters;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PropertyApi
 */
@Disabled
public class PropertyApiTest {

    private final PropertyApi api = new PropertyApi();

    /**
     * Creates or updates a property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void propertyCreateOrUpdateTest() throws ApiException {
        String propId = null;
        String apiVersion = null;
        PropertyContract parameters = null;
        PropertyContract response = api.propertyCreateOrUpdate(propId, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Deletes specific property from the API Management service instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void propertyDeleteTest() throws ApiException {
        String propId = null;
        String ifMatch = null;
        String apiVersion = null;
        api.propertyDelete(propId, ifMatch, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the details of the property specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void propertyGetTest() throws ApiException {
        String propId = null;
        String apiVersion = null;
        PropertyContract response = api.propertyGet(propId, apiVersion);
        // TODO: test validations
    }

    /**
     * Lists a collection of properties defined within a service instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void propertyListTest() throws ApiException {
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        PropertyCollection response = api.propertyList(apiVersion, $filter, $top, $skip);
        // TODO: test validations
    }

    /**
     * Updates the specific property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void propertyUpdateTest() throws ApiException {
        String propId = null;
        String ifMatch = null;
        String apiVersion = null;
        PropertyUpdateParameters parameters = null;
        api.propertyUpdate(propId, ifMatch, apiVersion, parameters);
        // TODO: test validations
    }

}
