# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class PropertyContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, value: str=None, secret: bool=None, tags: List[str]=None):
        """PropertyContract - a model defined in OpenAPI

        :param id: The id of this PropertyContract.
        :param name: The name of this PropertyContract.
        :param value: The value of this PropertyContract.
        :param secret: The secret of this PropertyContract.
        :param tags: The tags of this PropertyContract.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'value': str,
            'secret': bool,
            'tags': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'value': 'value',
            'secret': 'secret',
            'tags': 'tags'
        }

        self._id = id
        self._name = name
        self._value = value
        self._secret = secret
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PropertyContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PropertyContract of this PropertyContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this PropertyContract.

        Identifier of the Property.

        :return: The id of this PropertyContract.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PropertyContract.

        Identifier of the Property.

        :param id: The id of this PropertyContract.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PropertyContract.

        Unique name of Property. It may contain only letters, digits, period, dash, and underscore characters.

        :return: The name of this PropertyContract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PropertyContract.

        Unique name of Property. It may contain only letters, digits, period, dash, and underscore characters.

        :param name: The name of this PropertyContract.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[A-Za-z0-9-._]+$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[A-Za-z0-9-._]+$/`")

        self._name = name

    @property
    def value(self):
        """Gets the value of this PropertyContract.

        Value of the property. Can contain policy expressions. It may not be empty or consist only of whitespace.

        :return: The value of this PropertyContract.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PropertyContract.

        Value of the property. Can contain policy expressions. It may not be empty or consist only of whitespace.

        :param value: The value of this PropertyContract.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")
        if value is not None and len(value) > 4096:
            raise ValueError("Invalid value for `value`, length must be less than or equal to `4096`")
        if value is not None and len(value) < 1:
            raise ValueError("Invalid value for `value`, length must be greater than or equal to `1`")

        self._value = value

    @property
    def secret(self):
        """Gets the secret of this PropertyContract.

        Determines whether the value is a secret and should be encrypted or not. Default value is false.

        :return: The secret of this PropertyContract.
        :rtype: bool
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this PropertyContract.

        Determines whether the value is a secret and should be encrypted or not. Default value is false.

        :param secret: The secret of this PropertyContract.
        :type secret: bool
        """

        self._secret = secret

    @property
    def tags(self):
        """Gets the tags of this PropertyContract.

        Optional tags that when provided can be used to filter the property list.

        :return: The tags of this PropertyContract.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PropertyContract.

        Optional tags that when provided can be used to filter the property list.

        :param tags: The tags of this PropertyContract.
        :type tags: List[str]
        """
        if tags is not None and len(tags) > 32:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `32`")

        self._tags = tags
