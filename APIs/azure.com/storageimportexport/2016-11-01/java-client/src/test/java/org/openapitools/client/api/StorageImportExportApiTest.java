/*
 * StorageImportExport
 * The Storage Import/Export Resource Provider API.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GetBitLockerKeysResponse;
import org.openapitools.client.model.JobResponse;
import org.openapitools.client.model.ListJobsResponse;
import org.openapitools.client.model.ListOperationsResponse;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.LocationsResponse;
import org.openapitools.client.model.PutJobParameters;
import org.openapitools.client.model.UpdateJobParameters;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StorageImportExportApi
 */
@Disabled
public class StorageImportExportApiTest {

    private final StorageImportExportApi api = new StorageImportExportApi();

    /**
     * Returns the BitLocker Keys for all drives in the specified job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bitLockerKeysListTest() throws ApiException {
        String jobName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        GetBitLockerKeysResponse response = api.bitLockerKeysList(jobName, subscriptionId, resourceGroupName, apiVersion, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Creates a new job or updates an existing job in the specified subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobsCreateTest() throws ApiException {
        String jobName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        PutJobParameters body = null;
        String acceptLanguage = null;
        String xMsClientTenantId = null;
        JobResponse response = api.jobsCreate(jobName, subscriptionId, resourceGroupName, apiVersion, body, acceptLanguage, xMsClientTenantId);
        // TODO: test validations
    }

    /**
     * Deletes an existing job. Only jobs in the Creating or Completed states can be deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobsDeleteTest() throws ApiException {
        String jobName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        api.jobsDelete(jobName, subscriptionId, resourceGroupName, apiVersion, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Gets information about an existing job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobsGetTest() throws ApiException {
        String jobName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        JobResponse response = api.jobsGet(jobName, subscriptionId, resourceGroupName, apiVersion, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Returns all active and completed jobs in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobsListByResourceGroupTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        Integer $top = null;
        String $filter = null;
        String acceptLanguage = null;
        ListJobsResponse response = api.jobsListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, $top, $filter, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Returns all active and completed jobs in a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobsListBySubscriptionTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        Integer $top = null;
        String $filter = null;
        String acceptLanguage = null;
        ListJobsResponse response = api.jobsListBySubscription(subscriptionId, apiVersion, $top, $filter, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Updates specific properties of a job. You can call this operation to notify the Import/Export service that the hard drives comprising the import or export job have been shipped to the Microsoft data center. It can also be used to cancel an existing job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jobsUpdateTest() throws ApiException {
        String jobName = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        UpdateJobParameters body = null;
        String acceptLanguage = null;
        JobResponse response = api.jobsUpdate(jobName, subscriptionId, resourceGroupName, apiVersion, body, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Returns the details about a location to which you can ship the disks associated with an import or export job. A location is an Azure region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void locationsGetTest() throws ApiException {
        String locationName = null;
        String apiVersion = null;
        String acceptLanguage = null;
        Location response = api.locationsGet(locationName, apiVersion, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Returns a list of locations to which you can ship the disks associated with an import or export job. A location is a Microsoft data center region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void locationsListTest() throws ApiException {
        String apiVersion = null;
        String acceptLanguage = null;
        LocationsResponse response = api.locationsList(apiVersion, acceptLanguage);
        // TODO: test validations
    }

    /**
     * Returns the list of operations supported by the import/export resource provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void operationsListTest() throws ApiException {
        String apiVersion = null;
        String acceptLanguage = null;
        ListOperationsResponse response = api.operationsList(apiVersion, acceptLanguage);
        // TODO: test validations
    }

}
