/*
 * StorageImportExport
 * The Storage Import/Export Resource Provider API.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GetBitLockerKeysResponse;
import org.openapitools.client.model.JobResponse;
import org.openapitools.client.model.ListJobsResponse;
import org.openapitools.client.model.ListOperationsResponse;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.LocationsResponse;
import org.openapitools.client.model.PutJobParameters;
import org.openapitools.client.model.UpdateJobParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StorageImportExportApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StorageImportExportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StorageImportExportApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bitLockerKeysList
     * @param jobName The name of the import/export job. (required)
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public okhttp3.Call bitLockerKeysListCall(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}/listBitLockerKeys"
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bitLockerKeysListValidateBeforeCall(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling bitLockerKeysList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling bitLockerKeysList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling bitLockerKeysList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling bitLockerKeysList(Async)");
        }

        return bitLockerKeysListCall(jobName, subscriptionId, resourceGroupName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * 
     * Returns the BitLocker Keys for all drives in the specified job.
     * @param jobName The name of the import/export job. (required)
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @return GetBitLockerKeysResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public GetBitLockerKeysResponse bitLockerKeysList(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<GetBitLockerKeysResponse> localVarResp = bitLockerKeysListWithHttpInfo(jobName, subscriptionId, resourceGroupName, apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the BitLocker Keys for all drives in the specified job.
     * @param jobName The name of the import/export job. (required)
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @return ApiResponse&lt;GetBitLockerKeysResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public ApiResponse<GetBitLockerKeysResponse> bitLockerKeysListWithHttpInfo(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = bitLockerKeysListValidateBeforeCall(jobName, subscriptionId, resourceGroupName, apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<GetBitLockerKeysResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the BitLocker Keys for all drives in the specified job.
     * @param jobName The name of the import/export job. (required)
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public okhttp3.Call bitLockerKeysListAsync(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, String acceptLanguage, final ApiCallback<GetBitLockerKeysResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = bitLockerKeysListValidateBeforeCall(jobName, subscriptionId, resourceGroupName, apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<GetBitLockerKeysResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsCreate
     * @param jobName The name of the import/export job. (required)
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param body The parameters used for creating the job (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @param xMsClientTenantId The tenant ID of the client making the request. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public okhttp3.Call jobsCreateCall(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, PutJobParameters body, String acceptLanguage, String xMsClientTenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}"
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        if (xMsClientTenantId != null) {
            localVarHeaderParams.put("x-ms-client-tenant-id", localVarApiClient.parameterToString(xMsClientTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsCreateValidateBeforeCall(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, PutJobParameters body, String acceptLanguage, String xMsClientTenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsCreate(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling jobsCreate(Async)");
        }

        return jobsCreateCall(jobName, subscriptionId, resourceGroupName, apiVersion, body, acceptLanguage, xMsClientTenantId, _callback);

    }

    /**
     * 
     * Creates a new job or updates an existing job in the specified subscription.
     * @param jobName The name of the import/export job. (required)
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param body The parameters used for creating the job (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @param xMsClientTenantId The tenant ID of the client making the request. (optional)
     * @return JobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public JobResponse jobsCreate(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, PutJobParameters body, String acceptLanguage, String xMsClientTenantId) throws ApiException {
        ApiResponse<JobResponse> localVarResp = jobsCreateWithHttpInfo(jobName, subscriptionId, resourceGroupName, apiVersion, body, acceptLanguage, xMsClientTenantId);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new job or updates an existing job in the specified subscription.
     * @param jobName The name of the import/export job. (required)
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param body The parameters used for creating the job (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @param xMsClientTenantId The tenant ID of the client making the request. (optional)
     * @return ApiResponse&lt;JobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public ApiResponse<JobResponse> jobsCreateWithHttpInfo(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, PutJobParameters body, String acceptLanguage, String xMsClientTenantId) throws ApiException {
        okhttp3.Call localVarCall = jobsCreateValidateBeforeCall(jobName, subscriptionId, resourceGroupName, apiVersion, body, acceptLanguage, xMsClientTenantId, null);
        Type localVarReturnType = new TypeToken<JobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new job or updates an existing job in the specified subscription.
     * @param jobName The name of the import/export job. (required)
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param body The parameters used for creating the job (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @param xMsClientTenantId The tenant ID of the client making the request. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public okhttp3.Call jobsCreateAsync(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, PutJobParameters body, String acceptLanguage, String xMsClientTenantId, final ApiCallback<JobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsCreateValidateBeforeCall(jobName, subscriptionId, resourceGroupName, apiVersion, body, acceptLanguage, xMsClientTenantId, _callback);
        Type localVarReturnType = new TypeToken<JobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsDelete
     * @param jobName The name of the import/export job. (required)
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public okhttp3.Call jobsDeleteCall(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}"
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsDeleteValidateBeforeCall(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsDelete(Async)");
        }

        return jobsDeleteCall(jobName, subscriptionId, resourceGroupName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * 
     * Deletes an existing job. Only jobs in the Creating or Completed states can be deleted.
     * @param jobName The name of the import/export job. (required)
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public void jobsDelete(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, String acceptLanguage) throws ApiException {
        jobsDeleteWithHttpInfo(jobName, subscriptionId, resourceGroupName, apiVersion, acceptLanguage);
    }

    /**
     * 
     * Deletes an existing job. Only jobs in the Creating or Completed states can be deleted.
     * @param jobName The name of the import/export job. (required)
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public ApiResponse<Void> jobsDeleteWithHttpInfo(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = jobsDeleteValidateBeforeCall(jobName, subscriptionId, resourceGroupName, apiVersion, acceptLanguage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an existing job. Only jobs in the Creating or Completed states can be deleted.
     * @param jobName The name of the import/export job. (required)
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public okhttp3.Call jobsDeleteAsync(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, String acceptLanguage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsDeleteValidateBeforeCall(jobName, subscriptionId, resourceGroupName, apiVersion, acceptLanguage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsGet
     * @param jobName The name of the import/export job. (required)
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public okhttp3.Call jobsGetCall(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}"
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsGetValidateBeforeCall(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsGet(Async)");
        }

        return jobsGetCall(jobName, subscriptionId, resourceGroupName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * 
     * Gets information about an existing job.
     * @param jobName The name of the import/export job. (required)
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @return JobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public JobResponse jobsGet(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<JobResponse> localVarResp = jobsGetWithHttpInfo(jobName, subscriptionId, resourceGroupName, apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about an existing job.
     * @param jobName The name of the import/export job. (required)
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @return ApiResponse&lt;JobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public ApiResponse<JobResponse> jobsGetWithHttpInfo(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = jobsGetValidateBeforeCall(jobName, subscriptionId, resourceGroupName, apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<JobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about an existing job.
     * @param jobName The name of the import/export job. (required)
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public okhttp3.Call jobsGetAsync(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, String acceptLanguage, final ApiCallback<JobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsGetValidateBeforeCall(jobName, subscriptionId, resourceGroupName, apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<JobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsListByResourceGroup
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param $top An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100. (optional)
     * @param $filter Can be used to restrict the results to certain conditions. (optional)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public okhttp3.Call jobsListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String $filter, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String $filter, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsListByResourceGroup(Async)");
        }

        return jobsListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, $top, $filter, acceptLanguage, _callback);

    }

    /**
     * 
     * Returns all active and completed jobs in a resource group.
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param $top An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100. (optional)
     * @param $filter Can be used to restrict the results to certain conditions. (optional)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @return ListJobsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public ListJobsResponse jobsListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String $filter, String acceptLanguage) throws ApiException {
        ApiResponse<ListJobsResponse> localVarResp = jobsListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, $top, $filter, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all active and completed jobs in a resource group.
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param $top An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100. (optional)
     * @param $filter Can be used to restrict the results to certain conditions. (optional)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @return ApiResponse&lt;ListJobsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public ApiResponse<ListJobsResponse> jobsListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String $filter, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = jobsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $top, $filter, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<ListJobsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all active and completed jobs in a resource group.
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param $top An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100. (optional)
     * @param $filter Can be used to restrict the results to certain conditions. (optional)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public okhttp3.Call jobsListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String $filter, String acceptLanguage, final ApiCallback<ListJobsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $top, $filter, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<ListJobsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsListBySubscription
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param $top An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100. (optional)
     * @param $filter Can be used to restrict the results to certain conditions. (optional)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public okhttp3.Call jobsListBySubscriptionCall(String subscriptionId, String apiVersion, Integer $top, String $filter, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.ImportExport/jobs"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsListBySubscriptionValidateBeforeCall(String subscriptionId, String apiVersion, Integer $top, String $filter, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsListBySubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsListBySubscription(Async)");
        }

        return jobsListBySubscriptionCall(subscriptionId, apiVersion, $top, $filter, acceptLanguage, _callback);

    }

    /**
     * 
     * Returns all active and completed jobs in a subscription.
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param $top An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100. (optional)
     * @param $filter Can be used to restrict the results to certain conditions. (optional)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @return ListJobsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public ListJobsResponse jobsListBySubscription(String subscriptionId, String apiVersion, Integer $top, String $filter, String acceptLanguage) throws ApiException {
        ApiResponse<ListJobsResponse> localVarResp = jobsListBySubscriptionWithHttpInfo(subscriptionId, apiVersion, $top, $filter, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all active and completed jobs in a subscription.
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param $top An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100. (optional)
     * @param $filter Can be used to restrict the results to certain conditions. (optional)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @return ApiResponse&lt;ListJobsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public ApiResponse<ListJobsResponse> jobsListBySubscriptionWithHttpInfo(String subscriptionId, String apiVersion, Integer $top, String $filter, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = jobsListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, $top, $filter, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<ListJobsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all active and completed jobs in a subscription.
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param $top An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100. (optional)
     * @param $filter Can be used to restrict the results to certain conditions. (optional)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public okhttp3.Call jobsListBySubscriptionAsync(String subscriptionId, String apiVersion, Integer $top, String $filter, String acceptLanguage, final ApiCallback<ListJobsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, $top, $filter, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<ListJobsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsUpdate
     * @param jobName The name of the import/export job. (required)
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param body The parameters to update in the job (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public okhttp3.Call jobsUpdateCall(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, UpdateJobParameters body, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}"
            .replace("{" + "jobName" + "}", localVarApiClient.escapeString(jobName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsUpdateValidateBeforeCall(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, UpdateJobParameters body, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobName' is set
        if (jobName == null) {
            throw new ApiException("Missing the required parameter 'jobName' when calling jobsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsUpdate(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling jobsUpdate(Async)");
        }

        return jobsUpdateCall(jobName, subscriptionId, resourceGroupName, apiVersion, body, acceptLanguage, _callback);

    }

    /**
     * 
     * Updates specific properties of a job. You can call this operation to notify the Import/Export service that the hard drives comprising the import or export job have been shipped to the Microsoft data center. It can also be used to cancel an existing job.
     * @param jobName The name of the import/export job. (required)
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param body The parameters to update in the job (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @return JobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public JobResponse jobsUpdate(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, UpdateJobParameters body, String acceptLanguage) throws ApiException {
        ApiResponse<JobResponse> localVarResp = jobsUpdateWithHttpInfo(jobName, subscriptionId, resourceGroupName, apiVersion, body, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates specific properties of a job. You can call this operation to notify the Import/Export service that the hard drives comprising the import or export job have been shipped to the Microsoft data center. It can also be used to cancel an existing job.
     * @param jobName The name of the import/export job. (required)
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param body The parameters to update in the job (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @return ApiResponse&lt;JobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public ApiResponse<JobResponse> jobsUpdateWithHttpInfo(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, UpdateJobParameters body, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = jobsUpdateValidateBeforeCall(jobName, subscriptionId, resourceGroupName, apiVersion, body, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<JobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates specific properties of a job. You can call this operation to notify the Import/Export service that the hard drives comprising the import or export job have been shipped to the Microsoft data center. It can also be used to cancel an existing job.
     * @param jobName The name of the import/export job. (required)
     * @param subscriptionId The subscription ID for the Azure user. (required)
     * @param resourceGroupName The resource group name uniquely identifies the resource group within the user subscription. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param body The parameters to update in the job (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public okhttp3.Call jobsUpdateAsync(String jobName, String subscriptionId, String resourceGroupName, String apiVersion, UpdateJobParameters body, String acceptLanguage, final ApiCallback<JobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsUpdateValidateBeforeCall(jobName, subscriptionId, resourceGroupName, apiVersion, body, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<JobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for locationsGet
     * @param locationName The name of the location. For example, West US or westus. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public okhttp3.Call locationsGetCall(String locationName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ImportExport/locations/{locationName}"
            .replace("{" + "locationName" + "}", localVarApiClient.escapeString(locationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call locationsGetValidateBeforeCall(String locationName, String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locationName' is set
        if (locationName == null) {
            throw new ApiException("Missing the required parameter 'locationName' when calling locationsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling locationsGet(Async)");
        }

        return locationsGetCall(locationName, apiVersion, acceptLanguage, _callback);

    }

    /**
     * 
     * Returns the details about a location to which you can ship the disks associated with an import or export job. A location is an Azure region.
     * @param locationName The name of the location. For example, West US or westus. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public Location locationsGet(String locationName, String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<Location> localVarResp = locationsGetWithHttpInfo(locationName, apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the details about a location to which you can ship the disks associated with an import or export job. A location is an Azure region.
     * @param locationName The name of the location. For example, West US or westus. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public ApiResponse<Location> locationsGetWithHttpInfo(String locationName, String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = locationsGetValidateBeforeCall(locationName, apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the details about a location to which you can ship the disks associated with an import or export job. A location is an Azure region.
     * @param locationName The name of the location. For example, West US or westus. (required)
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public okhttp3.Call locationsGetAsync(String locationName, String apiVersion, String acceptLanguage, final ApiCallback<Location> _callback) throws ApiException {

        okhttp3.Call localVarCall = locationsGetValidateBeforeCall(locationName, apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for locationsList
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public okhttp3.Call locationsListCall(String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ImportExport/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call locationsListValidateBeforeCall(String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling locationsList(Async)");
        }

        return locationsListCall(apiVersion, acceptLanguage, _callback);

    }

    /**
     * 
     * Returns a list of locations to which you can ship the disks associated with an import or export job. A location is a Microsoft data center region.
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @return LocationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public LocationsResponse locationsList(String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<LocationsResponse> localVarResp = locationsListWithHttpInfo(apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of locations to which you can ship the disks associated with an import or export job. A location is a Microsoft data center region.
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @return ApiResponse&lt;LocationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public ApiResponse<LocationsResponse> locationsListWithHttpInfo(String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = locationsListValidateBeforeCall(apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<LocationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of locations to which you can ship the disks associated with an import or export job. A location is a Microsoft data center region.
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public okhttp3.Call locationsListAsync(String apiVersion, String acceptLanguage, final ApiCallback<LocationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = locationsListValidateBeforeCall(apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<LocationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for operationsList
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public okhttp3.Call operationsListCall(String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.ImportExport/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (acceptLanguage != null) {
            localVarHeaderParams.put("Accept-Language", localVarApiClient.parameterToString(acceptLanguage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operationsListValidateBeforeCall(String apiVersion, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling operationsList(Async)");
        }

        return operationsListCall(apiVersion, acceptLanguage, _callback);

    }

    /**
     * 
     * Returns the list of operations supported by the import/export resource provider.
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @return ListOperationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public ListOperationsResponse operationsList(String apiVersion, String acceptLanguage) throws ApiException {
        ApiResponse<ListOperationsResponse> localVarResp = operationsListWithHttpInfo(apiVersion, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the list of operations supported by the import/export resource provider.
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @return ApiResponse&lt;ListOperationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public ApiResponse<ListOperationsResponse> operationsListWithHttpInfo(String apiVersion, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = operationsListValidateBeforeCall(apiVersion, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<ListOperationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the list of operations supported by the import/export resource provider.
     * @param apiVersion Specifies the API version to use for this request. (required)
     * @param acceptLanguage Specifies the preferred language for the response. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error occurs. </td><td>  -  </td></tr>
     </table>
     * 
     * @see <a href=""> Documentation</a>
     */
    public okhttp3.Call operationsListAsync(String apiVersion, String acceptLanguage, final ApiCallback<ListOperationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = operationsListValidateBeforeCall(apiVersion, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<ListOperationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
