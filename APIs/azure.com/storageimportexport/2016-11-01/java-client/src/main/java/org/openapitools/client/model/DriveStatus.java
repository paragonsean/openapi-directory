/*
 * StorageImportExport
 * The Storage Import/Export Resource Provider API.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provides information about the drive&#39;s status
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:44:33.992396-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DriveStatus {
  public static final String SERIALIZED_NAME_BIT_LOCKER_KEY = "bitLockerKey";
  @SerializedName(SERIALIZED_NAME_BIT_LOCKER_KEY)
  private String bitLockerKey;

  public static final String SERIALIZED_NAME_BYTES_SUCCEEDED = "bytesSucceeded";
  @SerializedName(SERIALIZED_NAME_BYTES_SUCCEEDED)
  private Long bytesSucceeded;

  public static final String SERIALIZED_NAME_COPY_STATUS = "copyStatus";
  @SerializedName(SERIALIZED_NAME_COPY_STATUS)
  private String copyStatus;

  public static final String SERIALIZED_NAME_DRIVE_HEADER_HASH = "driveHeaderHash";
  @SerializedName(SERIALIZED_NAME_DRIVE_HEADER_HASH)
  private String driveHeaderHash;

  public static final String SERIALIZED_NAME_DRIVE_ID = "driveId";
  @SerializedName(SERIALIZED_NAME_DRIVE_ID)
  private String driveId;

  public static final String SERIALIZED_NAME_ERROR_LOG_URI = "errorLogUri";
  @SerializedName(SERIALIZED_NAME_ERROR_LOG_URI)
  private String errorLogUri;

  public static final String SERIALIZED_NAME_MANIFEST_FILE = "manifestFile";
  @SerializedName(SERIALIZED_NAME_MANIFEST_FILE)
  private String manifestFile;

  public static final String SERIALIZED_NAME_MANIFEST_HASH = "manifestHash";
  @SerializedName(SERIALIZED_NAME_MANIFEST_HASH)
  private String manifestHash;

  public static final String SERIALIZED_NAME_MANIFEST_URI = "manifestUri";
  @SerializedName(SERIALIZED_NAME_MANIFEST_URI)
  private String manifestUri;

  public static final String SERIALIZED_NAME_PERCENT_COMPLETE = "percentComplete";
  @SerializedName(SERIALIZED_NAME_PERCENT_COMPLETE)
  private Integer percentComplete;

  /**
   * The drive&#39;s current state. 
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    SPECIFIED("Specified"),
    
    RECEIVED("Received"),
    
    NEVER_RECEIVED("NeverReceived"),
    
    TRANSFERRING("Transferring"),
    
    COMPLETED("Completed"),
    
    COMPLETED_MORE_INFO("CompletedMoreInfo"),
    
    SHIPPED_BACK("ShippedBack");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_VERBOSE_LOG_URI = "verboseLogUri";
  @SerializedName(SERIALIZED_NAME_VERBOSE_LOG_URI)
  private String verboseLogUri;

  public DriveStatus() {
  }

  public DriveStatus bitLockerKey(String bitLockerKey) {
    this.bitLockerKey = bitLockerKey;
    return this;
  }

  /**
   * The BitLocker key used to encrypt the drive.
   * @return bitLockerKey
   */
  @javax.annotation.Nullable
  public String getBitLockerKey() {
    return bitLockerKey;
  }

  public void setBitLockerKey(String bitLockerKey) {
    this.bitLockerKey = bitLockerKey;
  }


  public DriveStatus bytesSucceeded(Long bytesSucceeded) {
    this.bytesSucceeded = bytesSucceeded;
    return this;
  }

  /**
   * Bytes successfully transferred for the drive.
   * @return bytesSucceeded
   */
  @javax.annotation.Nullable
  public Long getBytesSucceeded() {
    return bytesSucceeded;
  }

  public void setBytesSucceeded(Long bytesSucceeded) {
    this.bytesSucceeded = bytesSucceeded;
  }


  public DriveStatus copyStatus(String copyStatus) {
    this.copyStatus = copyStatus;
    return this;
  }

  /**
   * Detailed status about the data transfer process. This field is not returned in the response until the drive is in the Transferring state.
   * @return copyStatus
   */
  @javax.annotation.Nullable
  public String getCopyStatus() {
    return copyStatus;
  }

  public void setCopyStatus(String copyStatus) {
    this.copyStatus = copyStatus;
  }


  public DriveStatus driveHeaderHash(String driveHeaderHash) {
    this.driveHeaderHash = driveHeaderHash;
    return this;
  }

  /**
   * The drive header hash value.
   * @return driveHeaderHash
   */
  @javax.annotation.Nullable
  public String getDriveHeaderHash() {
    return driveHeaderHash;
  }

  public void setDriveHeaderHash(String driveHeaderHash) {
    this.driveHeaderHash = driveHeaderHash;
  }


  public DriveStatus driveId(String driveId) {
    this.driveId = driveId;
    return this;
  }

  /**
   * The drive&#39;s hardware serial number, without spaces.
   * @return driveId
   */
  @javax.annotation.Nullable
  public String getDriveId() {
    return driveId;
  }

  public void setDriveId(String driveId) {
    this.driveId = driveId;
  }


  public DriveStatus errorLogUri(String errorLogUri) {
    this.errorLogUri = errorLogUri;
    return this;
  }

  /**
   * A URI that points to the blob containing the error log for the data transfer operation.
   * @return errorLogUri
   */
  @javax.annotation.Nullable
  public String getErrorLogUri() {
    return errorLogUri;
  }

  public void setErrorLogUri(String errorLogUri) {
    this.errorLogUri = errorLogUri;
  }


  public DriveStatus manifestFile(String manifestFile) {
    this.manifestFile = manifestFile;
    return this;
  }

  /**
   * The relative path of the manifest file on the drive. 
   * @return manifestFile
   */
  @javax.annotation.Nullable
  public String getManifestFile() {
    return manifestFile;
  }

  public void setManifestFile(String manifestFile) {
    this.manifestFile = manifestFile;
  }


  public DriveStatus manifestHash(String manifestHash) {
    this.manifestHash = manifestHash;
    return this;
  }

  /**
   * The Base16-encoded MD5 hash of the manifest file on the drive.
   * @return manifestHash
   */
  @javax.annotation.Nullable
  public String getManifestHash() {
    return manifestHash;
  }

  public void setManifestHash(String manifestHash) {
    this.manifestHash = manifestHash;
  }


  public DriveStatus manifestUri(String manifestUri) {
    this.manifestUri = manifestUri;
    return this;
  }

  /**
   * A URI that points to the blob containing the drive manifest file. 
   * @return manifestUri
   */
  @javax.annotation.Nullable
  public String getManifestUri() {
    return manifestUri;
  }

  public void setManifestUri(String manifestUri) {
    this.manifestUri = manifestUri;
  }


  public DriveStatus percentComplete(Integer percentComplete) {
    this.percentComplete = percentComplete;
    return this;
  }

  /**
   * Percentage completed for the drive. 
   * @return percentComplete
   */
  @javax.annotation.Nullable
  public Integer getPercentComplete() {
    return percentComplete;
  }

  public void setPercentComplete(Integer percentComplete) {
    this.percentComplete = percentComplete;
  }


  public DriveStatus state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The drive&#39;s current state. 
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public DriveStatus verboseLogUri(String verboseLogUri) {
    this.verboseLogUri = verboseLogUri;
    return this;
  }

  /**
   * A URI that points to the blob containing the verbose log for the data transfer operation. 
   * @return verboseLogUri
   */
  @javax.annotation.Nullable
  public String getVerboseLogUri() {
    return verboseLogUri;
  }

  public void setVerboseLogUri(String verboseLogUri) {
    this.verboseLogUri = verboseLogUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DriveStatus driveStatus = (DriveStatus) o;
    return Objects.equals(this.bitLockerKey, driveStatus.bitLockerKey) &&
        Objects.equals(this.bytesSucceeded, driveStatus.bytesSucceeded) &&
        Objects.equals(this.copyStatus, driveStatus.copyStatus) &&
        Objects.equals(this.driveHeaderHash, driveStatus.driveHeaderHash) &&
        Objects.equals(this.driveId, driveStatus.driveId) &&
        Objects.equals(this.errorLogUri, driveStatus.errorLogUri) &&
        Objects.equals(this.manifestFile, driveStatus.manifestFile) &&
        Objects.equals(this.manifestHash, driveStatus.manifestHash) &&
        Objects.equals(this.manifestUri, driveStatus.manifestUri) &&
        Objects.equals(this.percentComplete, driveStatus.percentComplete) &&
        Objects.equals(this.state, driveStatus.state) &&
        Objects.equals(this.verboseLogUri, driveStatus.verboseLogUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bitLockerKey, bytesSucceeded, copyStatus, driveHeaderHash, driveId, errorLogUri, manifestFile, manifestHash, manifestUri, percentComplete, state, verboseLogUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DriveStatus {\n");
    sb.append("    bitLockerKey: ").append(toIndentedString(bitLockerKey)).append("\n");
    sb.append("    bytesSucceeded: ").append(toIndentedString(bytesSucceeded)).append("\n");
    sb.append("    copyStatus: ").append(toIndentedString(copyStatus)).append("\n");
    sb.append("    driveHeaderHash: ").append(toIndentedString(driveHeaderHash)).append("\n");
    sb.append("    driveId: ").append(toIndentedString(driveId)).append("\n");
    sb.append("    errorLogUri: ").append(toIndentedString(errorLogUri)).append("\n");
    sb.append("    manifestFile: ").append(toIndentedString(manifestFile)).append("\n");
    sb.append("    manifestHash: ").append(toIndentedString(manifestHash)).append("\n");
    sb.append("    manifestUri: ").append(toIndentedString(manifestUri)).append("\n");
    sb.append("    percentComplete: ").append(toIndentedString(percentComplete)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    verboseLogUri: ").append(toIndentedString(verboseLogUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bitLockerKey");
    openapiFields.add("bytesSucceeded");
    openapiFields.add("copyStatus");
    openapiFields.add("driveHeaderHash");
    openapiFields.add("driveId");
    openapiFields.add("errorLogUri");
    openapiFields.add("manifestFile");
    openapiFields.add("manifestHash");
    openapiFields.add("manifestUri");
    openapiFields.add("percentComplete");
    openapiFields.add("state");
    openapiFields.add("verboseLogUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DriveStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DriveStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DriveStatus is not found in the empty JSON string", DriveStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DriveStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DriveStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bitLockerKey") != null && !jsonObj.get("bitLockerKey").isJsonNull()) && !jsonObj.get("bitLockerKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bitLockerKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bitLockerKey").toString()));
      }
      if ((jsonObj.get("copyStatus") != null && !jsonObj.get("copyStatus").isJsonNull()) && !jsonObj.get("copyStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `copyStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("copyStatus").toString()));
      }
      if ((jsonObj.get("driveHeaderHash") != null && !jsonObj.get("driveHeaderHash").isJsonNull()) && !jsonObj.get("driveHeaderHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `driveHeaderHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("driveHeaderHash").toString()));
      }
      if ((jsonObj.get("driveId") != null && !jsonObj.get("driveId").isJsonNull()) && !jsonObj.get("driveId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `driveId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("driveId").toString()));
      }
      if ((jsonObj.get("errorLogUri") != null && !jsonObj.get("errorLogUri").isJsonNull()) && !jsonObj.get("errorLogUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorLogUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorLogUri").toString()));
      }
      if ((jsonObj.get("manifestFile") != null && !jsonObj.get("manifestFile").isJsonNull()) && !jsonObj.get("manifestFile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manifestFile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manifestFile").toString()));
      }
      if ((jsonObj.get("manifestHash") != null && !jsonObj.get("manifestHash").isJsonNull()) && !jsonObj.get("manifestHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manifestHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manifestHash").toString()));
      }
      if ((jsonObj.get("manifestUri") != null && !jsonObj.get("manifestUri").isJsonNull()) && !jsonObj.get("manifestUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manifestUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manifestUri").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("verboseLogUri") != null && !jsonObj.get("verboseLogUri").isJsonNull()) && !jsonObj.get("verboseLogUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verboseLogUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verboseLogUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DriveStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DriveStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DriveStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DriveStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<DriveStatus>() {
           @Override
           public void write(JsonWriter out, DriveStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DriveStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DriveStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DriveStatus
   * @throws IOException if the JSON string is invalid with respect to DriveStatus
   */
  public static DriveStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DriveStatus.class);
  }

  /**
   * Convert an instance of DriveStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

