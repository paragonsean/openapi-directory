/*
 * StorageImportExport
 * The Storage Import/Export Resource Provider API.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DriveStatus;
import org.openapitools.client.model.PackageInfomation;
import org.openapitools.client.model.ReturnAddress;
import org.openapitools.client.model.ReturnShipping;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the properties of a UpdateJob.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:44:33.992396-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateJobParametersProperties {
  public static final String SERIALIZED_NAME_BACKUP_DRIVE_MANIFEST = "backupDriveManifest";
  @SerializedName(SERIALIZED_NAME_BACKUP_DRIVE_MANIFEST)
  private Boolean backupDriveManifest;

  public static final String SERIALIZED_NAME_CANCEL_REQUESTED = "cancelRequested";
  @SerializedName(SERIALIZED_NAME_CANCEL_REQUESTED)
  private Boolean cancelRequested;

  public static final String SERIALIZED_NAME_DELIVERY_PACKAGE = "deliveryPackage";
  @SerializedName(SERIALIZED_NAME_DELIVERY_PACKAGE)
  private PackageInfomation deliveryPackage;

  public static final String SERIALIZED_NAME_DRIVE_LIST = "driveList";
  @SerializedName(SERIALIZED_NAME_DRIVE_LIST)
  private List<DriveStatus> driveList = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOG_LEVEL = "logLevel";
  @SerializedName(SERIALIZED_NAME_LOG_LEVEL)
  private String logLevel;

  public static final String SERIALIZED_NAME_RETURN_ADDRESS = "returnAddress";
  @SerializedName(SERIALIZED_NAME_RETURN_ADDRESS)
  private ReturnAddress returnAddress;

  public static final String SERIALIZED_NAME_RETURN_SHIPPING = "returnShipping";
  @SerializedName(SERIALIZED_NAME_RETURN_SHIPPING)
  private ReturnShipping returnShipping;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public UpdateJobParametersProperties() {
  }

  public UpdateJobParametersProperties backupDriveManifest(Boolean backupDriveManifest) {
    this.backupDriveManifest = backupDriveManifest;
    return this;
  }

  /**
   * Indicates whether the manifest files on the drives should be copied to block blobs.
   * @return backupDriveManifest
   */
  @javax.annotation.Nullable
  public Boolean getBackupDriveManifest() {
    return backupDriveManifest;
  }

  public void setBackupDriveManifest(Boolean backupDriveManifest) {
    this.backupDriveManifest = backupDriveManifest;
  }


  public UpdateJobParametersProperties cancelRequested(Boolean cancelRequested) {
    this.cancelRequested = cancelRequested;
    return this;
  }

  /**
   * If specified, the value must be true. The service will attempt to cancel the job. 
   * @return cancelRequested
   */
  @javax.annotation.Nullable
  public Boolean getCancelRequested() {
    return cancelRequested;
  }

  public void setCancelRequested(Boolean cancelRequested) {
    this.cancelRequested = cancelRequested;
  }


  public UpdateJobParametersProperties deliveryPackage(PackageInfomation deliveryPackage) {
    this.deliveryPackage = deliveryPackage;
    return this;
  }

  /**
   * Get deliveryPackage
   * @return deliveryPackage
   */
  @javax.annotation.Nullable
  public PackageInfomation getDeliveryPackage() {
    return deliveryPackage;
  }

  public void setDeliveryPackage(PackageInfomation deliveryPackage) {
    this.deliveryPackage = deliveryPackage;
  }


  public UpdateJobParametersProperties driveList(List<DriveStatus> driveList) {
    this.driveList = driveList;
    return this;
  }

  public UpdateJobParametersProperties addDriveListItem(DriveStatus driveListItem) {
    if (this.driveList == null) {
      this.driveList = new ArrayList<>();
    }
    this.driveList.add(driveListItem);
    return this;
  }

  /**
   * List of drives that comprise the job.
   * @return driveList
   */
  @javax.annotation.Nullable
  public List<DriveStatus> getDriveList() {
    return driveList;
  }

  public void setDriveList(List<DriveStatus> driveList) {
    this.driveList = driveList;
  }


  public UpdateJobParametersProperties logLevel(String logLevel) {
    this.logLevel = logLevel;
    return this;
  }

  /**
   * Indicates whether error logging or verbose logging is enabled.
   * @return logLevel
   */
  @javax.annotation.Nullable
  public String getLogLevel() {
    return logLevel;
  }

  public void setLogLevel(String logLevel) {
    this.logLevel = logLevel;
  }


  public UpdateJobParametersProperties returnAddress(ReturnAddress returnAddress) {
    this.returnAddress = returnAddress;
    return this;
  }

  /**
   * Get returnAddress
   * @return returnAddress
   */
  @javax.annotation.Nullable
  public ReturnAddress getReturnAddress() {
    return returnAddress;
  }

  public void setReturnAddress(ReturnAddress returnAddress) {
    this.returnAddress = returnAddress;
  }


  public UpdateJobParametersProperties returnShipping(ReturnShipping returnShipping) {
    this.returnShipping = returnShipping;
    return this;
  }

  /**
   * Get returnShipping
   * @return returnShipping
   */
  @javax.annotation.Nullable
  public ReturnShipping getReturnShipping() {
    return returnShipping;
  }

  public void setReturnShipping(ReturnShipping returnShipping) {
    this.returnShipping = returnShipping;
  }


  public UpdateJobParametersProperties state(String state) {
    this.state = state;
    return this;
  }

  /**
   * If specified, the value must be Shipping, which tells the Import/Export service that the package for the job has been shipped. The ReturnAddress and DeliveryPackage properties must have been set either in this request or in a previous request, otherwise the request will fail. 
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateJobParametersProperties updateJobParametersProperties = (UpdateJobParametersProperties) o;
    return Objects.equals(this.backupDriveManifest, updateJobParametersProperties.backupDriveManifest) &&
        Objects.equals(this.cancelRequested, updateJobParametersProperties.cancelRequested) &&
        Objects.equals(this.deliveryPackage, updateJobParametersProperties.deliveryPackage) &&
        Objects.equals(this.driveList, updateJobParametersProperties.driveList) &&
        Objects.equals(this.logLevel, updateJobParametersProperties.logLevel) &&
        Objects.equals(this.returnAddress, updateJobParametersProperties.returnAddress) &&
        Objects.equals(this.returnShipping, updateJobParametersProperties.returnShipping) &&
        Objects.equals(this.state, updateJobParametersProperties.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupDriveManifest, cancelRequested, deliveryPackage, driveList, logLevel, returnAddress, returnShipping, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateJobParametersProperties {\n");
    sb.append("    backupDriveManifest: ").append(toIndentedString(backupDriveManifest)).append("\n");
    sb.append("    cancelRequested: ").append(toIndentedString(cancelRequested)).append("\n");
    sb.append("    deliveryPackage: ").append(toIndentedString(deliveryPackage)).append("\n");
    sb.append("    driveList: ").append(toIndentedString(driveList)).append("\n");
    sb.append("    logLevel: ").append(toIndentedString(logLevel)).append("\n");
    sb.append("    returnAddress: ").append(toIndentedString(returnAddress)).append("\n");
    sb.append("    returnShipping: ").append(toIndentedString(returnShipping)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupDriveManifest");
    openapiFields.add("cancelRequested");
    openapiFields.add("deliveryPackage");
    openapiFields.add("driveList");
    openapiFields.add("logLevel");
    openapiFields.add("returnAddress");
    openapiFields.add("returnShipping");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateJobParametersProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateJobParametersProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateJobParametersProperties is not found in the empty JSON string", UpdateJobParametersProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateJobParametersProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateJobParametersProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deliveryPackage`
      if (jsonObj.get("deliveryPackage") != null && !jsonObj.get("deliveryPackage").isJsonNull()) {
        PackageInfomation.validateJsonElement(jsonObj.get("deliveryPackage"));
      }
      if (jsonObj.get("driveList") != null && !jsonObj.get("driveList").isJsonNull()) {
        JsonArray jsonArraydriveList = jsonObj.getAsJsonArray("driveList");
        if (jsonArraydriveList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("driveList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `driveList` to be an array in the JSON string but got `%s`", jsonObj.get("driveList").toString()));
          }

          // validate the optional field `driveList` (array)
          for (int i = 0; i < jsonArraydriveList.size(); i++) {
            DriveStatus.validateJsonElement(jsonArraydriveList.get(i));
          };
        }
      }
      if ((jsonObj.get("logLevel") != null && !jsonObj.get("logLevel").isJsonNull()) && !jsonObj.get("logLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logLevel").toString()));
      }
      // validate the optional field `returnAddress`
      if (jsonObj.get("returnAddress") != null && !jsonObj.get("returnAddress").isJsonNull()) {
        ReturnAddress.validateJsonElement(jsonObj.get("returnAddress"));
      }
      // validate the optional field `returnShipping`
      if (jsonObj.get("returnShipping") != null && !jsonObj.get("returnShipping").isJsonNull()) {
        ReturnShipping.validateJsonElement(jsonObj.get("returnShipping"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateJobParametersProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateJobParametersProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateJobParametersProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateJobParametersProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateJobParametersProperties>() {
           @Override
           public void write(JsonWriter out, UpdateJobParametersProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateJobParametersProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateJobParametersProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateJobParametersProperties
   * @throws IOException if the JSON string is invalid with respect to UpdateJobParametersProperties
   */
  public static UpdateJobParametersProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateJobParametersProperties.class);
  }

  /**
   * Convert an instance of UpdateJobParametersProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

