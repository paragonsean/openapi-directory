/*
 * StorageImportExport
 * The Storage Import/Export Resource Provider API.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DriveStatus;
import org.openapitools.client.model.Export;
import org.openapitools.client.model.PackageInfomation;
import org.openapitools.client.model.ReturnAddress;
import org.openapitools.client.model.ReturnShipping;
import org.openapitools.client.model.ShippingInformation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the job properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:44:33.992396-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobDetails {
  public static final String SERIALIZED_NAME_BACKUP_DRIVE_MANIFEST = "backupDriveManifest";
  @SerializedName(SERIALIZED_NAME_BACKUP_DRIVE_MANIFEST)
  private Boolean backupDriveManifest;

  public static final String SERIALIZED_NAME_CANCEL_REQUESTED = "cancelRequested";
  @SerializedName(SERIALIZED_NAME_CANCEL_REQUESTED)
  private Boolean cancelRequested;

  public static final String SERIALIZED_NAME_DELIVERY_PACKAGE = "deliveryPackage";
  @SerializedName(SERIALIZED_NAME_DELIVERY_PACKAGE)
  private PackageInfomation deliveryPackage;

  public static final String SERIALIZED_NAME_DIAGNOSTICS_PATH = "diagnosticsPath";
  @SerializedName(SERIALIZED_NAME_DIAGNOSTICS_PATH)
  private String diagnosticsPath;

  public static final String SERIALIZED_NAME_DRIVE_LIST = "driveList";
  @SerializedName(SERIALIZED_NAME_DRIVE_LIST)
  private List<DriveStatus> driveList = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPORT = "export";
  @SerializedName(SERIALIZED_NAME_EXPORT)
  private Export export;

  public static final String SERIALIZED_NAME_INCOMPLETE_BLOB_LIST_URI = "incompleteBlobListUri";
  @SerializedName(SERIALIZED_NAME_INCOMPLETE_BLOB_LIST_URI)
  private String incompleteBlobListUri;

  public static final String SERIALIZED_NAME_JOB_TYPE = "jobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private String jobType;

  public static final String SERIALIZED_NAME_LOG_LEVEL = "logLevel";
  @SerializedName(SERIALIZED_NAME_LOG_LEVEL)
  private String logLevel;

  public static final String SERIALIZED_NAME_PERCENT_COMPLETE = "percentComplete";
  @SerializedName(SERIALIZED_NAME_PERCENT_COMPLETE)
  private Integer percentComplete;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_RETURN_ADDRESS = "returnAddress";
  @SerializedName(SERIALIZED_NAME_RETURN_ADDRESS)
  private ReturnAddress returnAddress;

  public static final String SERIALIZED_NAME_RETURN_PACKAGE = "returnPackage";
  @SerializedName(SERIALIZED_NAME_RETURN_PACKAGE)
  private PackageInfomation returnPackage;

  public static final String SERIALIZED_NAME_RETURN_SHIPPING = "returnShipping";
  @SerializedName(SERIALIZED_NAME_RETURN_SHIPPING)
  private ReturnShipping returnShipping;

  public static final String SERIALIZED_NAME_SHIPPING_INFORMATION = "shippingInformation";
  @SerializedName(SERIALIZED_NAME_SHIPPING_INFORMATION)
  private ShippingInformation shippingInformation;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT_ID = "storageAccountId";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT_ID)
  private String storageAccountId;

  public JobDetails() {
  }

  public JobDetails backupDriveManifest(Boolean backupDriveManifest) {
    this.backupDriveManifest = backupDriveManifest;
    return this;
  }

  /**
   * Default value is false. Indicates whether the manifest files on the drives should be copied to block blobs.
   * @return backupDriveManifest
   */
  @javax.annotation.Nullable
  public Boolean getBackupDriveManifest() {
    return backupDriveManifest;
  }

  public void setBackupDriveManifest(Boolean backupDriveManifest) {
    this.backupDriveManifest = backupDriveManifest;
  }


  public JobDetails cancelRequested(Boolean cancelRequested) {
    this.cancelRequested = cancelRequested;
    return this;
  }

  /**
   * Indicates whether a request has been submitted to cancel the job.
   * @return cancelRequested
   */
  @javax.annotation.Nullable
  public Boolean getCancelRequested() {
    return cancelRequested;
  }

  public void setCancelRequested(Boolean cancelRequested) {
    this.cancelRequested = cancelRequested;
  }


  public JobDetails deliveryPackage(PackageInfomation deliveryPackage) {
    this.deliveryPackage = deliveryPackage;
    return this;
  }

  /**
   * Get deliveryPackage
   * @return deliveryPackage
   */
  @javax.annotation.Nullable
  public PackageInfomation getDeliveryPackage() {
    return deliveryPackage;
  }

  public void setDeliveryPackage(PackageInfomation deliveryPackage) {
    this.deliveryPackage = deliveryPackage;
  }


  public JobDetails diagnosticsPath(String diagnosticsPath) {
    this.diagnosticsPath = diagnosticsPath;
    return this;
  }

  /**
   * The virtual blob directory to which the copy logs and backups of drive manifest files (if enabled) will be stored.
   * @return diagnosticsPath
   */
  @javax.annotation.Nullable
  public String getDiagnosticsPath() {
    return diagnosticsPath;
  }

  public void setDiagnosticsPath(String diagnosticsPath) {
    this.diagnosticsPath = diagnosticsPath;
  }


  public JobDetails driveList(List<DriveStatus> driveList) {
    this.driveList = driveList;
    return this;
  }

  public JobDetails addDriveListItem(DriveStatus driveListItem) {
    if (this.driveList == null) {
      this.driveList = new ArrayList<>();
    }
    this.driveList.add(driveListItem);
    return this;
  }

  /**
   * List of up to ten drives that comprise the job. The drive list is a required element for an import job; it is not specified for export jobs.
   * @return driveList
   */
  @javax.annotation.Nullable
  public List<DriveStatus> getDriveList() {
    return driveList;
  }

  public void setDriveList(List<DriveStatus> driveList) {
    this.driveList = driveList;
  }


  public JobDetails export(Export export) {
    this.export = export;
    return this;
  }

  /**
   * Get export
   * @return export
   */
  @javax.annotation.Nullable
  public Export getExport() {
    return export;
  }

  public void setExport(Export export) {
    this.export = export;
  }


  public JobDetails incompleteBlobListUri(String incompleteBlobListUri) {
    this.incompleteBlobListUri = incompleteBlobListUri;
    return this;
  }

  /**
   * A blob path that points to a block blob containing a list of blob names that were not exported due to insufficient drive space. If all blobs were exported successfully, then this element is not included in the response.
   * @return incompleteBlobListUri
   */
  @javax.annotation.Nullable
  public String getIncompleteBlobListUri() {
    return incompleteBlobListUri;
  }

  public void setIncompleteBlobListUri(String incompleteBlobListUri) {
    this.incompleteBlobListUri = incompleteBlobListUri;
  }


  public JobDetails jobType(String jobType) {
    this.jobType = jobType;
    return this;
  }

  /**
   * The type of job
   * @return jobType
   */
  @javax.annotation.Nullable
  public String getJobType() {
    return jobType;
  }

  public void setJobType(String jobType) {
    this.jobType = jobType;
  }


  public JobDetails logLevel(String logLevel) {
    this.logLevel = logLevel;
    return this;
  }

  /**
   * Default value is Error. Indicates whether error logging or verbose logging will be enabled.
   * @return logLevel
   */
  @javax.annotation.Nullable
  public String getLogLevel() {
    return logLevel;
  }

  public void setLogLevel(String logLevel) {
    this.logLevel = logLevel;
  }


  public JobDetails percentComplete(Integer percentComplete) {
    this.percentComplete = percentComplete;
    return this;
  }

  /**
   * Overall percentage completed for the job.
   * @return percentComplete
   */
  @javax.annotation.Nullable
  public Integer getPercentComplete() {
    return percentComplete;
  }

  public void setPercentComplete(Integer percentComplete) {
    this.percentComplete = percentComplete;
  }


  public JobDetails provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Specifies the provisioning state of the job.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public JobDetails returnAddress(ReturnAddress returnAddress) {
    this.returnAddress = returnAddress;
    return this;
  }

  /**
   * Get returnAddress
   * @return returnAddress
   */
  @javax.annotation.Nullable
  public ReturnAddress getReturnAddress() {
    return returnAddress;
  }

  public void setReturnAddress(ReturnAddress returnAddress) {
    this.returnAddress = returnAddress;
  }


  public JobDetails returnPackage(PackageInfomation returnPackage) {
    this.returnPackage = returnPackage;
    return this;
  }

  /**
   * Get returnPackage
   * @return returnPackage
   */
  @javax.annotation.Nullable
  public PackageInfomation getReturnPackage() {
    return returnPackage;
  }

  public void setReturnPackage(PackageInfomation returnPackage) {
    this.returnPackage = returnPackage;
  }


  public JobDetails returnShipping(ReturnShipping returnShipping) {
    this.returnShipping = returnShipping;
    return this;
  }

  /**
   * Get returnShipping
   * @return returnShipping
   */
  @javax.annotation.Nullable
  public ReturnShipping getReturnShipping() {
    return returnShipping;
  }

  public void setReturnShipping(ReturnShipping returnShipping) {
    this.returnShipping = returnShipping;
  }


  public JobDetails shippingInformation(ShippingInformation shippingInformation) {
    this.shippingInformation = shippingInformation;
    return this;
  }

  /**
   * Get shippingInformation
   * @return shippingInformation
   */
  @javax.annotation.Nullable
  public ShippingInformation getShippingInformation() {
    return shippingInformation;
  }

  public void setShippingInformation(ShippingInformation shippingInformation) {
    this.shippingInformation = shippingInformation;
  }


  public JobDetails state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Current state of the job.
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public JobDetails storageAccountId(String storageAccountId) {
    this.storageAccountId = storageAccountId;
    return this;
  }

  /**
   * The resource identifier of the storage account where data will be imported to or exported from.
   * @return storageAccountId
   */
  @javax.annotation.Nullable
  public String getStorageAccountId() {
    return storageAccountId;
  }

  public void setStorageAccountId(String storageAccountId) {
    this.storageAccountId = storageAccountId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobDetails jobDetails = (JobDetails) o;
    return Objects.equals(this.backupDriveManifest, jobDetails.backupDriveManifest) &&
        Objects.equals(this.cancelRequested, jobDetails.cancelRequested) &&
        Objects.equals(this.deliveryPackage, jobDetails.deliveryPackage) &&
        Objects.equals(this.diagnosticsPath, jobDetails.diagnosticsPath) &&
        Objects.equals(this.driveList, jobDetails.driveList) &&
        Objects.equals(this.export, jobDetails.export) &&
        Objects.equals(this.incompleteBlobListUri, jobDetails.incompleteBlobListUri) &&
        Objects.equals(this.jobType, jobDetails.jobType) &&
        Objects.equals(this.logLevel, jobDetails.logLevel) &&
        Objects.equals(this.percentComplete, jobDetails.percentComplete) &&
        Objects.equals(this.provisioningState, jobDetails.provisioningState) &&
        Objects.equals(this.returnAddress, jobDetails.returnAddress) &&
        Objects.equals(this.returnPackage, jobDetails.returnPackage) &&
        Objects.equals(this.returnShipping, jobDetails.returnShipping) &&
        Objects.equals(this.shippingInformation, jobDetails.shippingInformation) &&
        Objects.equals(this.state, jobDetails.state) &&
        Objects.equals(this.storageAccountId, jobDetails.storageAccountId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupDriveManifest, cancelRequested, deliveryPackage, diagnosticsPath, driveList, export, incompleteBlobListUri, jobType, logLevel, percentComplete, provisioningState, returnAddress, returnPackage, returnShipping, shippingInformation, state, storageAccountId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobDetails {\n");
    sb.append("    backupDriveManifest: ").append(toIndentedString(backupDriveManifest)).append("\n");
    sb.append("    cancelRequested: ").append(toIndentedString(cancelRequested)).append("\n");
    sb.append("    deliveryPackage: ").append(toIndentedString(deliveryPackage)).append("\n");
    sb.append("    diagnosticsPath: ").append(toIndentedString(diagnosticsPath)).append("\n");
    sb.append("    driveList: ").append(toIndentedString(driveList)).append("\n");
    sb.append("    export: ").append(toIndentedString(export)).append("\n");
    sb.append("    incompleteBlobListUri: ").append(toIndentedString(incompleteBlobListUri)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    logLevel: ").append(toIndentedString(logLevel)).append("\n");
    sb.append("    percentComplete: ").append(toIndentedString(percentComplete)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    returnAddress: ").append(toIndentedString(returnAddress)).append("\n");
    sb.append("    returnPackage: ").append(toIndentedString(returnPackage)).append("\n");
    sb.append("    returnShipping: ").append(toIndentedString(returnShipping)).append("\n");
    sb.append("    shippingInformation: ").append(toIndentedString(shippingInformation)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    storageAccountId: ").append(toIndentedString(storageAccountId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupDriveManifest");
    openapiFields.add("cancelRequested");
    openapiFields.add("deliveryPackage");
    openapiFields.add("diagnosticsPath");
    openapiFields.add("driveList");
    openapiFields.add("export");
    openapiFields.add("incompleteBlobListUri");
    openapiFields.add("jobType");
    openapiFields.add("logLevel");
    openapiFields.add("percentComplete");
    openapiFields.add("provisioningState");
    openapiFields.add("returnAddress");
    openapiFields.add("returnPackage");
    openapiFields.add("returnShipping");
    openapiFields.add("shippingInformation");
    openapiFields.add("state");
    openapiFields.add("storageAccountId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobDetails is not found in the empty JSON string", JobDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deliveryPackage`
      if (jsonObj.get("deliveryPackage") != null && !jsonObj.get("deliveryPackage").isJsonNull()) {
        PackageInfomation.validateJsonElement(jsonObj.get("deliveryPackage"));
      }
      if ((jsonObj.get("diagnosticsPath") != null && !jsonObj.get("diagnosticsPath").isJsonNull()) && !jsonObj.get("diagnosticsPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diagnosticsPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diagnosticsPath").toString()));
      }
      if (jsonObj.get("driveList") != null && !jsonObj.get("driveList").isJsonNull()) {
        JsonArray jsonArraydriveList = jsonObj.getAsJsonArray("driveList");
        if (jsonArraydriveList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("driveList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `driveList` to be an array in the JSON string but got `%s`", jsonObj.get("driveList").toString()));
          }

          // validate the optional field `driveList` (array)
          for (int i = 0; i < jsonArraydriveList.size(); i++) {
            DriveStatus.validateJsonElement(jsonArraydriveList.get(i));
          };
        }
      }
      // validate the optional field `export`
      if (jsonObj.get("export") != null && !jsonObj.get("export").isJsonNull()) {
        Export.validateJsonElement(jsonObj.get("export"));
      }
      if ((jsonObj.get("incompleteBlobListUri") != null && !jsonObj.get("incompleteBlobListUri").isJsonNull()) && !jsonObj.get("incompleteBlobListUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `incompleteBlobListUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("incompleteBlobListUri").toString()));
      }
      if ((jsonObj.get("jobType") != null && !jsonObj.get("jobType").isJsonNull()) && !jsonObj.get("jobType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobType").toString()));
      }
      if ((jsonObj.get("logLevel") != null && !jsonObj.get("logLevel").isJsonNull()) && !jsonObj.get("logLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logLevel").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `returnAddress`
      if (jsonObj.get("returnAddress") != null && !jsonObj.get("returnAddress").isJsonNull()) {
        ReturnAddress.validateJsonElement(jsonObj.get("returnAddress"));
      }
      // validate the optional field `returnPackage`
      if (jsonObj.get("returnPackage") != null && !jsonObj.get("returnPackage").isJsonNull()) {
        PackageInfomation.validateJsonElement(jsonObj.get("returnPackage"));
      }
      // validate the optional field `returnShipping`
      if (jsonObj.get("returnShipping") != null && !jsonObj.get("returnShipping").isJsonNull()) {
        ReturnShipping.validateJsonElement(jsonObj.get("returnShipping"));
      }
      // validate the optional field `shippingInformation`
      if (jsonObj.get("shippingInformation") != null && !jsonObj.get("shippingInformation").isJsonNull()) {
        ShippingInformation.validateJsonElement(jsonObj.get("shippingInformation"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("storageAccountId") != null && !jsonObj.get("storageAccountId").isJsonNull()) && !jsonObj.get("storageAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageAccountId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<JobDetails>() {
           @Override
           public void write(JsonWriter out, JobDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobDetails
   * @throws IOException if the JSON string is invalid with respect to JobDetails
   */
  public static JobDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobDetails.class);
  }

  /**
   * Convert an instance of JobDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

