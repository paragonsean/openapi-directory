# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.drive_status import DriveStatus
from openapi_server.models.package_infomation import PackageInfomation
from openapi_server.models.return_address import ReturnAddress
from openapi_server.models.return_shipping import ReturnShipping
from openapi_server import util


class UpdateJobParametersProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_drive_manifest: bool=None, cancel_requested: bool=None, delivery_package: PackageInfomation=None, drive_list: List[DriveStatus]=None, log_level: str=None, return_address: ReturnAddress=None, return_shipping: ReturnShipping=None, state: str=None):
        """UpdateJobParametersProperties - a model defined in OpenAPI

        :param backup_drive_manifest: The backup_drive_manifest of this UpdateJobParametersProperties.
        :param cancel_requested: The cancel_requested of this UpdateJobParametersProperties.
        :param delivery_package: The delivery_package of this UpdateJobParametersProperties.
        :param drive_list: The drive_list of this UpdateJobParametersProperties.
        :param log_level: The log_level of this UpdateJobParametersProperties.
        :param return_address: The return_address of this UpdateJobParametersProperties.
        :param return_shipping: The return_shipping of this UpdateJobParametersProperties.
        :param state: The state of this UpdateJobParametersProperties.
        """
        self.openapi_types = {
            'backup_drive_manifest': bool,
            'cancel_requested': bool,
            'delivery_package': PackageInfomation,
            'drive_list': List[DriveStatus],
            'log_level': str,
            'return_address': ReturnAddress,
            'return_shipping': ReturnShipping,
            'state': str
        }

        self.attribute_map = {
            'backup_drive_manifest': 'backupDriveManifest',
            'cancel_requested': 'cancelRequested',
            'delivery_package': 'deliveryPackage',
            'drive_list': 'driveList',
            'log_level': 'logLevel',
            'return_address': 'returnAddress',
            'return_shipping': 'returnShipping',
            'state': 'state'
        }

        self._backup_drive_manifest = backup_drive_manifest
        self._cancel_requested = cancel_requested
        self._delivery_package = delivery_package
        self._drive_list = drive_list
        self._log_level = log_level
        self._return_address = return_address
        self._return_shipping = return_shipping
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateJobParametersProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateJobParameters_properties of this UpdateJobParametersProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_drive_manifest(self):
        """Gets the backup_drive_manifest of this UpdateJobParametersProperties.

        Indicates whether the manifest files on the drives should be copied to block blobs.

        :return: The backup_drive_manifest of this UpdateJobParametersProperties.
        :rtype: bool
        """
        return self._backup_drive_manifest

    @backup_drive_manifest.setter
    def backup_drive_manifest(self, backup_drive_manifest):
        """Sets the backup_drive_manifest of this UpdateJobParametersProperties.

        Indicates whether the manifest files on the drives should be copied to block blobs.

        :param backup_drive_manifest: The backup_drive_manifest of this UpdateJobParametersProperties.
        :type backup_drive_manifest: bool
        """

        self._backup_drive_manifest = backup_drive_manifest

    @property
    def cancel_requested(self):
        """Gets the cancel_requested of this UpdateJobParametersProperties.

        If specified, the value must be true. The service will attempt to cancel the job. 

        :return: The cancel_requested of this UpdateJobParametersProperties.
        :rtype: bool
        """
        return self._cancel_requested

    @cancel_requested.setter
    def cancel_requested(self, cancel_requested):
        """Sets the cancel_requested of this UpdateJobParametersProperties.

        If specified, the value must be true. The service will attempt to cancel the job. 

        :param cancel_requested: The cancel_requested of this UpdateJobParametersProperties.
        :type cancel_requested: bool
        """

        self._cancel_requested = cancel_requested

    @property
    def delivery_package(self):
        """Gets the delivery_package of this UpdateJobParametersProperties.


        :return: The delivery_package of this UpdateJobParametersProperties.
        :rtype: PackageInfomation
        """
        return self._delivery_package

    @delivery_package.setter
    def delivery_package(self, delivery_package):
        """Sets the delivery_package of this UpdateJobParametersProperties.


        :param delivery_package: The delivery_package of this UpdateJobParametersProperties.
        :type delivery_package: PackageInfomation
        """

        self._delivery_package = delivery_package

    @property
    def drive_list(self):
        """Gets the drive_list of this UpdateJobParametersProperties.

        List of drives that comprise the job.

        :return: The drive_list of this UpdateJobParametersProperties.
        :rtype: List[DriveStatus]
        """
        return self._drive_list

    @drive_list.setter
    def drive_list(self, drive_list):
        """Sets the drive_list of this UpdateJobParametersProperties.

        List of drives that comprise the job.

        :param drive_list: The drive_list of this UpdateJobParametersProperties.
        :type drive_list: List[DriveStatus]
        """

        self._drive_list = drive_list

    @property
    def log_level(self):
        """Gets the log_level of this UpdateJobParametersProperties.

        Indicates whether error logging or verbose logging is enabled.

        :return: The log_level of this UpdateJobParametersProperties.
        :rtype: str
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this UpdateJobParametersProperties.

        Indicates whether error logging or verbose logging is enabled.

        :param log_level: The log_level of this UpdateJobParametersProperties.
        :type log_level: str
        """

        self._log_level = log_level

    @property
    def return_address(self):
        """Gets the return_address of this UpdateJobParametersProperties.


        :return: The return_address of this UpdateJobParametersProperties.
        :rtype: ReturnAddress
        """
        return self._return_address

    @return_address.setter
    def return_address(self, return_address):
        """Sets the return_address of this UpdateJobParametersProperties.


        :param return_address: The return_address of this UpdateJobParametersProperties.
        :type return_address: ReturnAddress
        """

        self._return_address = return_address

    @property
    def return_shipping(self):
        """Gets the return_shipping of this UpdateJobParametersProperties.


        :return: The return_shipping of this UpdateJobParametersProperties.
        :rtype: ReturnShipping
        """
        return self._return_shipping

    @return_shipping.setter
    def return_shipping(self, return_shipping):
        """Sets the return_shipping of this UpdateJobParametersProperties.


        :param return_shipping: The return_shipping of this UpdateJobParametersProperties.
        :type return_shipping: ReturnShipping
        """

        self._return_shipping = return_shipping

    @property
    def state(self):
        """Gets the state of this UpdateJobParametersProperties.

        If specified, the value must be Shipping, which tells the Import/Export service that the package for the job has been shipped. The ReturnAddress and DeliveryPackage properties must have been set either in this request or in a previous request, otherwise the request will fail. 

        :return: The state of this UpdateJobParametersProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this UpdateJobParametersProperties.

        If specified, the value must be Shipping, which tells the Import/Export service that the package for the job has been shipped. The ReturnAddress and DeliveryPackage properties must have been set either in this request or in a previous request, otherwise the request will fail. 

        :param state: The state of this UpdateJobParametersProperties.
        :type state: str
        """

        self._state = state
