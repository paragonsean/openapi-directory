# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReturnShipping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, carrier_account_number: str=None, carrier_name: str=None):
        """ReturnShipping - a model defined in OpenAPI

        :param carrier_account_number: The carrier_account_number of this ReturnShipping.
        :param carrier_name: The carrier_name of this ReturnShipping.
        """
        self.openapi_types = {
            'carrier_account_number': str,
            'carrier_name': str
        }

        self.attribute_map = {
            'carrier_account_number': 'carrierAccountNumber',
            'carrier_name': 'carrierName'
        }

        self._carrier_account_number = carrier_account_number
        self._carrier_name = carrier_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReturnShipping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReturnShipping of this ReturnShipping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def carrier_account_number(self):
        """Gets the carrier_account_number of this ReturnShipping.

        The customer's account number with the carrier.

        :return: The carrier_account_number of this ReturnShipping.
        :rtype: str
        """
        return self._carrier_account_number

    @carrier_account_number.setter
    def carrier_account_number(self, carrier_account_number):
        """Sets the carrier_account_number of this ReturnShipping.

        The customer's account number with the carrier.

        :param carrier_account_number: The carrier_account_number of this ReturnShipping.
        :type carrier_account_number: str
        """
        if carrier_account_number is None:
            raise ValueError("Invalid value for `carrier_account_number`, must not be `None`")

        self._carrier_account_number = carrier_account_number

    @property
    def carrier_name(self):
        """Gets the carrier_name of this ReturnShipping.

        The carrier's name.

        :return: The carrier_name of this ReturnShipping.
        :rtype: str
        """
        return self._carrier_name

    @carrier_name.setter
    def carrier_name(self, carrier_name):
        """Sets the carrier_name of this ReturnShipping.

        The carrier's name.

        :param carrier_name: The carrier_name of this ReturnShipping.
        :type carrier_name: str
        """
        if carrier_name is None:
            raise ValueError("Invalid value for `carrier_name`, must not be `None`")

        self._carrier_name = carrier_name
