# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DriveStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bit_locker_key: str=None, bytes_succeeded: int=None, copy_status: str=None, drive_header_hash: str=None, drive_id: str=None, error_log_uri: str=None, manifest_file: str=None, manifest_hash: str=None, manifest_uri: str=None, percent_complete: int=None, state: str=None, verbose_log_uri: str=None):
        """DriveStatus - a model defined in OpenAPI

        :param bit_locker_key: The bit_locker_key of this DriveStatus.
        :param bytes_succeeded: The bytes_succeeded of this DriveStatus.
        :param copy_status: The copy_status of this DriveStatus.
        :param drive_header_hash: The drive_header_hash of this DriveStatus.
        :param drive_id: The drive_id of this DriveStatus.
        :param error_log_uri: The error_log_uri of this DriveStatus.
        :param manifest_file: The manifest_file of this DriveStatus.
        :param manifest_hash: The manifest_hash of this DriveStatus.
        :param manifest_uri: The manifest_uri of this DriveStatus.
        :param percent_complete: The percent_complete of this DriveStatus.
        :param state: The state of this DriveStatus.
        :param verbose_log_uri: The verbose_log_uri of this DriveStatus.
        """
        self.openapi_types = {
            'bit_locker_key': str,
            'bytes_succeeded': int,
            'copy_status': str,
            'drive_header_hash': str,
            'drive_id': str,
            'error_log_uri': str,
            'manifest_file': str,
            'manifest_hash': str,
            'manifest_uri': str,
            'percent_complete': int,
            'state': str,
            'verbose_log_uri': str
        }

        self.attribute_map = {
            'bit_locker_key': 'bitLockerKey',
            'bytes_succeeded': 'bytesSucceeded',
            'copy_status': 'copyStatus',
            'drive_header_hash': 'driveHeaderHash',
            'drive_id': 'driveId',
            'error_log_uri': 'errorLogUri',
            'manifest_file': 'manifestFile',
            'manifest_hash': 'manifestHash',
            'manifest_uri': 'manifestUri',
            'percent_complete': 'percentComplete',
            'state': 'state',
            'verbose_log_uri': 'verboseLogUri'
        }

        self._bit_locker_key = bit_locker_key
        self._bytes_succeeded = bytes_succeeded
        self._copy_status = copy_status
        self._drive_header_hash = drive_header_hash
        self._drive_id = drive_id
        self._error_log_uri = error_log_uri
        self._manifest_file = manifest_file
        self._manifest_hash = manifest_hash
        self._manifest_uri = manifest_uri
        self._percent_complete = percent_complete
        self._state = state
        self._verbose_log_uri = verbose_log_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DriveStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DriveStatus of this DriveStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bit_locker_key(self):
        """Gets the bit_locker_key of this DriveStatus.

        The BitLocker key used to encrypt the drive.

        :return: The bit_locker_key of this DriveStatus.
        :rtype: str
        """
        return self._bit_locker_key

    @bit_locker_key.setter
    def bit_locker_key(self, bit_locker_key):
        """Sets the bit_locker_key of this DriveStatus.

        The BitLocker key used to encrypt the drive.

        :param bit_locker_key: The bit_locker_key of this DriveStatus.
        :type bit_locker_key: str
        """

        self._bit_locker_key = bit_locker_key

    @property
    def bytes_succeeded(self):
        """Gets the bytes_succeeded of this DriveStatus.

        Bytes successfully transferred for the drive.

        :return: The bytes_succeeded of this DriveStatus.
        :rtype: int
        """
        return self._bytes_succeeded

    @bytes_succeeded.setter
    def bytes_succeeded(self, bytes_succeeded):
        """Sets the bytes_succeeded of this DriveStatus.

        Bytes successfully transferred for the drive.

        :param bytes_succeeded: The bytes_succeeded of this DriveStatus.
        :type bytes_succeeded: int
        """

        self._bytes_succeeded = bytes_succeeded

    @property
    def copy_status(self):
        """Gets the copy_status of this DriveStatus.

        Detailed status about the data transfer process. This field is not returned in the response until the drive is in the Transferring state.

        :return: The copy_status of this DriveStatus.
        :rtype: str
        """
        return self._copy_status

    @copy_status.setter
    def copy_status(self, copy_status):
        """Sets the copy_status of this DriveStatus.

        Detailed status about the data transfer process. This field is not returned in the response until the drive is in the Transferring state.

        :param copy_status: The copy_status of this DriveStatus.
        :type copy_status: str
        """

        self._copy_status = copy_status

    @property
    def drive_header_hash(self):
        """Gets the drive_header_hash of this DriveStatus.

        The drive header hash value.

        :return: The drive_header_hash of this DriveStatus.
        :rtype: str
        """
        return self._drive_header_hash

    @drive_header_hash.setter
    def drive_header_hash(self, drive_header_hash):
        """Sets the drive_header_hash of this DriveStatus.

        The drive header hash value.

        :param drive_header_hash: The drive_header_hash of this DriveStatus.
        :type drive_header_hash: str
        """

        self._drive_header_hash = drive_header_hash

    @property
    def drive_id(self):
        """Gets the drive_id of this DriveStatus.

        The drive's hardware serial number, without spaces.

        :return: The drive_id of this DriveStatus.
        :rtype: str
        """
        return self._drive_id

    @drive_id.setter
    def drive_id(self, drive_id):
        """Sets the drive_id of this DriveStatus.

        The drive's hardware serial number, without spaces.

        :param drive_id: The drive_id of this DriveStatus.
        :type drive_id: str
        """

        self._drive_id = drive_id

    @property
    def error_log_uri(self):
        """Gets the error_log_uri of this DriveStatus.

        A URI that points to the blob containing the error log for the data transfer operation.

        :return: The error_log_uri of this DriveStatus.
        :rtype: str
        """
        return self._error_log_uri

    @error_log_uri.setter
    def error_log_uri(self, error_log_uri):
        """Sets the error_log_uri of this DriveStatus.

        A URI that points to the blob containing the error log for the data transfer operation.

        :param error_log_uri: The error_log_uri of this DriveStatus.
        :type error_log_uri: str
        """

        self._error_log_uri = error_log_uri

    @property
    def manifest_file(self):
        """Gets the manifest_file of this DriveStatus.

        The relative path of the manifest file on the drive. 

        :return: The manifest_file of this DriveStatus.
        :rtype: str
        """
        return self._manifest_file

    @manifest_file.setter
    def manifest_file(self, manifest_file):
        """Sets the manifest_file of this DriveStatus.

        The relative path of the manifest file on the drive. 

        :param manifest_file: The manifest_file of this DriveStatus.
        :type manifest_file: str
        """

        self._manifest_file = manifest_file

    @property
    def manifest_hash(self):
        """Gets the manifest_hash of this DriveStatus.

        The Base16-encoded MD5 hash of the manifest file on the drive.

        :return: The manifest_hash of this DriveStatus.
        :rtype: str
        """
        return self._manifest_hash

    @manifest_hash.setter
    def manifest_hash(self, manifest_hash):
        """Sets the manifest_hash of this DriveStatus.

        The Base16-encoded MD5 hash of the manifest file on the drive.

        :param manifest_hash: The manifest_hash of this DriveStatus.
        :type manifest_hash: str
        """

        self._manifest_hash = manifest_hash

    @property
    def manifest_uri(self):
        """Gets the manifest_uri of this DriveStatus.

        A URI that points to the blob containing the drive manifest file. 

        :return: The manifest_uri of this DriveStatus.
        :rtype: str
        """
        return self._manifest_uri

    @manifest_uri.setter
    def manifest_uri(self, manifest_uri):
        """Sets the manifest_uri of this DriveStatus.

        A URI that points to the blob containing the drive manifest file. 

        :param manifest_uri: The manifest_uri of this DriveStatus.
        :type manifest_uri: str
        """

        self._manifest_uri = manifest_uri

    @property
    def percent_complete(self):
        """Gets the percent_complete of this DriveStatus.

        Percentage completed for the drive. 

        :return: The percent_complete of this DriveStatus.
        :rtype: int
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this DriveStatus.

        Percentage completed for the drive. 

        :param percent_complete: The percent_complete of this DriveStatus.
        :type percent_complete: int
        """

        self._percent_complete = percent_complete

    @property
    def state(self):
        """Gets the state of this DriveStatus.

        The drive's current state. 

        :return: The state of this DriveStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DriveStatus.

        The drive's current state. 

        :param state: The state of this DriveStatus.
        :type state: str
        """
        allowed_values = ["Specified", "Received", "NeverReceived", "Transferring", "Completed", "CompletedMoreInfo", "ShippedBack"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def verbose_log_uri(self):
        """Gets the verbose_log_uri of this DriveStatus.

        A URI that points to the blob containing the verbose log for the data transfer operation. 

        :return: The verbose_log_uri of this DriveStatus.
        :rtype: str
        """
        return self._verbose_log_uri

    @verbose_log_uri.setter
    def verbose_log_uri(self, verbose_log_uri):
        """Sets the verbose_log_uri of this DriveStatus.

        A URI that points to the blob containing the verbose log for the data transfer operation. 

        :param verbose_log_uri: The verbose_log_uri of this DriveStatus.
        :type verbose_log_uri: str
        """

        self._verbose_log_uri = verbose_log_uri
