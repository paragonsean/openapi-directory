# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.drive_status import DriveStatus
from openapi_server.models.export import Export
from openapi_server.models.package_infomation import PackageInfomation
from openapi_server.models.return_address import ReturnAddress
from openapi_server.models.return_shipping import ReturnShipping
from openapi_server.models.shipping_information import ShippingInformation
from openapi_server import util


class JobDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_drive_manifest: bool=None, cancel_requested: bool=None, delivery_package: PackageInfomation=None, diagnostics_path: str=None, drive_list: List[DriveStatus]=None, export: Export=None, incomplete_blob_list_uri: str=None, job_type: str=None, log_level: str=None, percent_complete: int=None, provisioning_state: str=None, return_address: ReturnAddress=None, return_package: PackageInfomation=None, return_shipping: ReturnShipping=None, shipping_information: ShippingInformation=None, state: str=None, storage_account_id: str=None):
        """JobDetails - a model defined in OpenAPI

        :param backup_drive_manifest: The backup_drive_manifest of this JobDetails.
        :param cancel_requested: The cancel_requested of this JobDetails.
        :param delivery_package: The delivery_package of this JobDetails.
        :param diagnostics_path: The diagnostics_path of this JobDetails.
        :param drive_list: The drive_list of this JobDetails.
        :param export: The export of this JobDetails.
        :param incomplete_blob_list_uri: The incomplete_blob_list_uri of this JobDetails.
        :param job_type: The job_type of this JobDetails.
        :param log_level: The log_level of this JobDetails.
        :param percent_complete: The percent_complete of this JobDetails.
        :param provisioning_state: The provisioning_state of this JobDetails.
        :param return_address: The return_address of this JobDetails.
        :param return_package: The return_package of this JobDetails.
        :param return_shipping: The return_shipping of this JobDetails.
        :param shipping_information: The shipping_information of this JobDetails.
        :param state: The state of this JobDetails.
        :param storage_account_id: The storage_account_id of this JobDetails.
        """
        self.openapi_types = {
            'backup_drive_manifest': bool,
            'cancel_requested': bool,
            'delivery_package': PackageInfomation,
            'diagnostics_path': str,
            'drive_list': List[DriveStatus],
            'export': Export,
            'incomplete_blob_list_uri': str,
            'job_type': str,
            'log_level': str,
            'percent_complete': int,
            'provisioning_state': str,
            'return_address': ReturnAddress,
            'return_package': PackageInfomation,
            'return_shipping': ReturnShipping,
            'shipping_information': ShippingInformation,
            'state': str,
            'storage_account_id': str
        }

        self.attribute_map = {
            'backup_drive_manifest': 'backupDriveManifest',
            'cancel_requested': 'cancelRequested',
            'delivery_package': 'deliveryPackage',
            'diagnostics_path': 'diagnosticsPath',
            'drive_list': 'driveList',
            'export': 'export',
            'incomplete_blob_list_uri': 'incompleteBlobListUri',
            'job_type': 'jobType',
            'log_level': 'logLevel',
            'percent_complete': 'percentComplete',
            'provisioning_state': 'provisioningState',
            'return_address': 'returnAddress',
            'return_package': 'returnPackage',
            'return_shipping': 'returnShipping',
            'shipping_information': 'shippingInformation',
            'state': 'state',
            'storage_account_id': 'storageAccountId'
        }

        self._backup_drive_manifest = backup_drive_manifest
        self._cancel_requested = cancel_requested
        self._delivery_package = delivery_package
        self._diagnostics_path = diagnostics_path
        self._drive_list = drive_list
        self._export = export
        self._incomplete_blob_list_uri = incomplete_blob_list_uri
        self._job_type = job_type
        self._log_level = log_level
        self._percent_complete = percent_complete
        self._provisioning_state = provisioning_state
        self._return_address = return_address
        self._return_package = return_package
        self._return_shipping = return_shipping
        self._shipping_information = shipping_information
        self._state = state
        self._storage_account_id = storage_account_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobDetails of this JobDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_drive_manifest(self):
        """Gets the backup_drive_manifest of this JobDetails.

        Default value is false. Indicates whether the manifest files on the drives should be copied to block blobs.

        :return: The backup_drive_manifest of this JobDetails.
        :rtype: bool
        """
        return self._backup_drive_manifest

    @backup_drive_manifest.setter
    def backup_drive_manifest(self, backup_drive_manifest):
        """Sets the backup_drive_manifest of this JobDetails.

        Default value is false. Indicates whether the manifest files on the drives should be copied to block blobs.

        :param backup_drive_manifest: The backup_drive_manifest of this JobDetails.
        :type backup_drive_manifest: bool
        """

        self._backup_drive_manifest = backup_drive_manifest

    @property
    def cancel_requested(self):
        """Gets the cancel_requested of this JobDetails.

        Indicates whether a request has been submitted to cancel the job.

        :return: The cancel_requested of this JobDetails.
        :rtype: bool
        """
        return self._cancel_requested

    @cancel_requested.setter
    def cancel_requested(self, cancel_requested):
        """Sets the cancel_requested of this JobDetails.

        Indicates whether a request has been submitted to cancel the job.

        :param cancel_requested: The cancel_requested of this JobDetails.
        :type cancel_requested: bool
        """

        self._cancel_requested = cancel_requested

    @property
    def delivery_package(self):
        """Gets the delivery_package of this JobDetails.


        :return: The delivery_package of this JobDetails.
        :rtype: PackageInfomation
        """
        return self._delivery_package

    @delivery_package.setter
    def delivery_package(self, delivery_package):
        """Sets the delivery_package of this JobDetails.


        :param delivery_package: The delivery_package of this JobDetails.
        :type delivery_package: PackageInfomation
        """

        self._delivery_package = delivery_package

    @property
    def diagnostics_path(self):
        """Gets the diagnostics_path of this JobDetails.

        The virtual blob directory to which the copy logs and backups of drive manifest files (if enabled) will be stored.

        :return: The diagnostics_path of this JobDetails.
        :rtype: str
        """
        return self._diagnostics_path

    @diagnostics_path.setter
    def diagnostics_path(self, diagnostics_path):
        """Sets the diagnostics_path of this JobDetails.

        The virtual blob directory to which the copy logs and backups of drive manifest files (if enabled) will be stored.

        :param diagnostics_path: The diagnostics_path of this JobDetails.
        :type diagnostics_path: str
        """

        self._diagnostics_path = diagnostics_path

    @property
    def drive_list(self):
        """Gets the drive_list of this JobDetails.

        List of up to ten drives that comprise the job. The drive list is a required element for an import job; it is not specified for export jobs.

        :return: The drive_list of this JobDetails.
        :rtype: List[DriveStatus]
        """
        return self._drive_list

    @drive_list.setter
    def drive_list(self, drive_list):
        """Sets the drive_list of this JobDetails.

        List of up to ten drives that comprise the job. The drive list is a required element for an import job; it is not specified for export jobs.

        :param drive_list: The drive_list of this JobDetails.
        :type drive_list: List[DriveStatus]
        """

        self._drive_list = drive_list

    @property
    def export(self):
        """Gets the export of this JobDetails.


        :return: The export of this JobDetails.
        :rtype: Export
        """
        return self._export

    @export.setter
    def export(self, export):
        """Sets the export of this JobDetails.


        :param export: The export of this JobDetails.
        :type export: Export
        """

        self._export = export

    @property
    def incomplete_blob_list_uri(self):
        """Gets the incomplete_blob_list_uri of this JobDetails.

        A blob path that points to a block blob containing a list of blob names that were not exported due to insufficient drive space. If all blobs were exported successfully, then this element is not included in the response.

        :return: The incomplete_blob_list_uri of this JobDetails.
        :rtype: str
        """
        return self._incomplete_blob_list_uri

    @incomplete_blob_list_uri.setter
    def incomplete_blob_list_uri(self, incomplete_blob_list_uri):
        """Sets the incomplete_blob_list_uri of this JobDetails.

        A blob path that points to a block blob containing a list of blob names that were not exported due to insufficient drive space. If all blobs were exported successfully, then this element is not included in the response.

        :param incomplete_blob_list_uri: The incomplete_blob_list_uri of this JobDetails.
        :type incomplete_blob_list_uri: str
        """

        self._incomplete_blob_list_uri = incomplete_blob_list_uri

    @property
    def job_type(self):
        """Gets the job_type of this JobDetails.

        The type of job

        :return: The job_type of this JobDetails.
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this JobDetails.

        The type of job

        :param job_type: The job_type of this JobDetails.
        :type job_type: str
        """

        self._job_type = job_type

    @property
    def log_level(self):
        """Gets the log_level of this JobDetails.

        Default value is Error. Indicates whether error logging or verbose logging will be enabled.

        :return: The log_level of this JobDetails.
        :rtype: str
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this JobDetails.

        Default value is Error. Indicates whether error logging or verbose logging will be enabled.

        :param log_level: The log_level of this JobDetails.
        :type log_level: str
        """

        self._log_level = log_level

    @property
    def percent_complete(self):
        """Gets the percent_complete of this JobDetails.

        Overall percentage completed for the job.

        :return: The percent_complete of this JobDetails.
        :rtype: int
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this JobDetails.

        Overall percentage completed for the job.

        :param percent_complete: The percent_complete of this JobDetails.
        :type percent_complete: int
        """

        self._percent_complete = percent_complete

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this JobDetails.

        Specifies the provisioning state of the job.

        :return: The provisioning_state of this JobDetails.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this JobDetails.

        Specifies the provisioning state of the job.

        :param provisioning_state: The provisioning_state of this JobDetails.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def return_address(self):
        """Gets the return_address of this JobDetails.


        :return: The return_address of this JobDetails.
        :rtype: ReturnAddress
        """
        return self._return_address

    @return_address.setter
    def return_address(self, return_address):
        """Sets the return_address of this JobDetails.


        :param return_address: The return_address of this JobDetails.
        :type return_address: ReturnAddress
        """

        self._return_address = return_address

    @property
    def return_package(self):
        """Gets the return_package of this JobDetails.


        :return: The return_package of this JobDetails.
        :rtype: PackageInfomation
        """
        return self._return_package

    @return_package.setter
    def return_package(self, return_package):
        """Sets the return_package of this JobDetails.


        :param return_package: The return_package of this JobDetails.
        :type return_package: PackageInfomation
        """

        self._return_package = return_package

    @property
    def return_shipping(self):
        """Gets the return_shipping of this JobDetails.


        :return: The return_shipping of this JobDetails.
        :rtype: ReturnShipping
        """
        return self._return_shipping

    @return_shipping.setter
    def return_shipping(self, return_shipping):
        """Sets the return_shipping of this JobDetails.


        :param return_shipping: The return_shipping of this JobDetails.
        :type return_shipping: ReturnShipping
        """

        self._return_shipping = return_shipping

    @property
    def shipping_information(self):
        """Gets the shipping_information of this JobDetails.


        :return: The shipping_information of this JobDetails.
        :rtype: ShippingInformation
        """
        return self._shipping_information

    @shipping_information.setter
    def shipping_information(self, shipping_information):
        """Sets the shipping_information of this JobDetails.


        :param shipping_information: The shipping_information of this JobDetails.
        :type shipping_information: ShippingInformation
        """

        self._shipping_information = shipping_information

    @property
    def state(self):
        """Gets the state of this JobDetails.

        Current state of the job.

        :return: The state of this JobDetails.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobDetails.

        Current state of the job.

        :param state: The state of this JobDetails.
        :type state: str
        """

        self._state = state

    @property
    def storage_account_id(self):
        """Gets the storage_account_id of this JobDetails.

        The resource identifier of the storage account where data will be imported to or exported from.

        :return: The storage_account_id of this JobDetails.
        :rtype: str
        """
        return self._storage_account_id

    @storage_account_id.setter
    def storage_account_id(self, storage_account_id):
        """Sets the storage_account_id of this JobDetails.

        The resource identifier of the storage account where data will be imported to or exported from.

        :param storage_account_id: The storage_account_id of this JobDetails.
        :type storage_account_id: str
        """

        self._storage_account_id = storage_account_id
