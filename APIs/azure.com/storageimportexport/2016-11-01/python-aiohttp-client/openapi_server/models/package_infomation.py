# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PackageInfomation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, carrier_name: str=None, drive_count: int=None, ship_date: str=None, tracking_number: str=None):
        """PackageInfomation - a model defined in OpenAPI

        :param carrier_name: The carrier_name of this PackageInfomation.
        :param drive_count: The drive_count of this PackageInfomation.
        :param ship_date: The ship_date of this PackageInfomation.
        :param tracking_number: The tracking_number of this PackageInfomation.
        """
        self.openapi_types = {
            'carrier_name': str,
            'drive_count': int,
            'ship_date': str,
            'tracking_number': str
        }

        self.attribute_map = {
            'carrier_name': 'carrierName',
            'drive_count': 'driveCount',
            'ship_date': 'shipDate',
            'tracking_number': 'trackingNumber'
        }

        self._carrier_name = carrier_name
        self._drive_count = drive_count
        self._ship_date = ship_date
        self._tracking_number = tracking_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PackageInfomation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PackageInfomation of this PackageInfomation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def carrier_name(self):
        """Gets the carrier_name of this PackageInfomation.

        The name of the carrier that is used to ship the import or export drives.

        :return: The carrier_name of this PackageInfomation.
        :rtype: str
        """
        return self._carrier_name

    @carrier_name.setter
    def carrier_name(self, carrier_name):
        """Sets the carrier_name of this PackageInfomation.

        The name of the carrier that is used to ship the import or export drives.

        :param carrier_name: The carrier_name of this PackageInfomation.
        :type carrier_name: str
        """
        if carrier_name is None:
            raise ValueError("Invalid value for `carrier_name`, must not be `None`")

        self._carrier_name = carrier_name

    @property
    def drive_count(self):
        """Gets the drive_count of this PackageInfomation.

        The number of drives included in the package.

        :return: The drive_count of this PackageInfomation.
        :rtype: int
        """
        return self._drive_count

    @drive_count.setter
    def drive_count(self, drive_count):
        """Sets the drive_count of this PackageInfomation.

        The number of drives included in the package.

        :param drive_count: The drive_count of this PackageInfomation.
        :type drive_count: int
        """
        if drive_count is None:
            raise ValueError("Invalid value for `drive_count`, must not be `None`")

        self._drive_count = drive_count

    @property
    def ship_date(self):
        """Gets the ship_date of this PackageInfomation.

        The date when the package is shipped.

        :return: The ship_date of this PackageInfomation.
        :rtype: str
        """
        return self._ship_date

    @ship_date.setter
    def ship_date(self, ship_date):
        """Sets the ship_date of this PackageInfomation.

        The date when the package is shipped.

        :param ship_date: The ship_date of this PackageInfomation.
        :type ship_date: str
        """
        if ship_date is None:
            raise ValueError("Invalid value for `ship_date`, must not be `None`")

        self._ship_date = ship_date

    @property
    def tracking_number(self):
        """Gets the tracking_number of this PackageInfomation.

        The tracking number of the package.

        :return: The tracking_number of this PackageInfomation.
        :rtype: str
        """
        return self._tracking_number

    @tracking_number.setter
    def tracking_number(self, tracking_number):
        """Sets the tracking_number of this PackageInfomation.

        The tracking number of the package.

        :param tracking_number: The tracking_number of this PackageInfomation.
        :type tracking_number: str
        """
        if tracking_number is None:
            raise ValueError("Invalid value for `tracking_number`, must not be `None`")

        self._tracking_number = tracking_number
