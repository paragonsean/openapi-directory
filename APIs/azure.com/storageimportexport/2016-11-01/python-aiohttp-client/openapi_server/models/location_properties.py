# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LocationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_locations: List[str]=None, city: str=None, country_or_region: str=None, phone: str=None, postal_code: str=None, recipient_name: str=None, state_or_province: str=None, street_address1: str=None, street_address2: str=None, supported_carriers: List[str]=None):
        """LocationProperties - a model defined in OpenAPI

        :param alternate_locations: The alternate_locations of this LocationProperties.
        :param city: The city of this LocationProperties.
        :param country_or_region: The country_or_region of this LocationProperties.
        :param phone: The phone of this LocationProperties.
        :param postal_code: The postal_code of this LocationProperties.
        :param recipient_name: The recipient_name of this LocationProperties.
        :param state_or_province: The state_or_province of this LocationProperties.
        :param street_address1: The street_address1 of this LocationProperties.
        :param street_address2: The street_address2 of this LocationProperties.
        :param supported_carriers: The supported_carriers of this LocationProperties.
        """
        self.openapi_types = {
            'alternate_locations': List[str],
            'city': str,
            'country_or_region': str,
            'phone': str,
            'postal_code': str,
            'recipient_name': str,
            'state_or_province': str,
            'street_address1': str,
            'street_address2': str,
            'supported_carriers': List[str]
        }

        self.attribute_map = {
            'alternate_locations': 'alternateLocations',
            'city': 'city',
            'country_or_region': 'countryOrRegion',
            'phone': 'phone',
            'postal_code': 'postalCode',
            'recipient_name': 'recipientName',
            'state_or_province': 'stateOrProvince',
            'street_address1': 'streetAddress1',
            'street_address2': 'streetAddress2',
            'supported_carriers': 'supportedCarriers'
        }

        self._alternate_locations = alternate_locations
        self._city = city
        self._country_or_region = country_or_region
        self._phone = phone
        self._postal_code = postal_code
        self._recipient_name = recipient_name
        self._state_or_province = state_or_province
        self._street_address1 = street_address1
        self._street_address2 = street_address2
        self._supported_carriers = supported_carriers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Location_properties of this LocationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_locations(self):
        """Gets the alternate_locations of this LocationProperties.

        A list of location IDs that should be used to ship shipping drives to for jobs created against the current location. If the current location is active, it will be part of the list. If it is temporarily closed due to maintenance, this list may contain other locations. 

        :return: The alternate_locations of this LocationProperties.
        :rtype: List[str]
        """
        return self._alternate_locations

    @alternate_locations.setter
    def alternate_locations(self, alternate_locations):
        """Sets the alternate_locations of this LocationProperties.

        A list of location IDs that should be used to ship shipping drives to for jobs created against the current location. If the current location is active, it will be part of the list. If it is temporarily closed due to maintenance, this list may contain other locations. 

        :param alternate_locations: The alternate_locations of this LocationProperties.
        :type alternate_locations: List[str]
        """

        self._alternate_locations = alternate_locations

    @property
    def city(self):
        """Gets the city of this LocationProperties.

        The city name to use when shipping the drives to the Azure data center. 

        :return: The city of this LocationProperties.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this LocationProperties.

        The city name to use when shipping the drives to the Azure data center. 

        :param city: The city of this LocationProperties.
        :type city: str
        """

        self._city = city

    @property
    def country_or_region(self):
        """Gets the country_or_region of this LocationProperties.

        The country or region to use when shipping the drives to the Azure data center. 

        :return: The country_or_region of this LocationProperties.
        :rtype: str
        """
        return self._country_or_region

    @country_or_region.setter
    def country_or_region(self, country_or_region):
        """Sets the country_or_region of this LocationProperties.

        The country or region to use when shipping the drives to the Azure data center. 

        :param country_or_region: The country_or_region of this LocationProperties.
        :type country_or_region: str
        """

        self._country_or_region = country_or_region

    @property
    def phone(self):
        """Gets the phone of this LocationProperties.

        The phone number for the Azure data center. 

        :return: The phone of this LocationProperties.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this LocationProperties.

        The phone number for the Azure data center. 

        :param phone: The phone of this LocationProperties.
        :type phone: str
        """

        self._phone = phone

    @property
    def postal_code(self):
        """Gets the postal_code of this LocationProperties.

        The postal code to use when shipping the drives to the Azure data center. 

        :return: The postal_code of this LocationProperties.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this LocationProperties.

        The postal code to use when shipping the drives to the Azure data center. 

        :param postal_code: The postal_code of this LocationProperties.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def recipient_name(self):
        """Gets the recipient_name of this LocationProperties.

        The recipient name to use when shipping the drives to the Azure data center. 

        :return: The recipient_name of this LocationProperties.
        :rtype: str
        """
        return self._recipient_name

    @recipient_name.setter
    def recipient_name(self, recipient_name):
        """Sets the recipient_name of this LocationProperties.

        The recipient name to use when shipping the drives to the Azure data center. 

        :param recipient_name: The recipient_name of this LocationProperties.
        :type recipient_name: str
        """

        self._recipient_name = recipient_name

    @property
    def state_or_province(self):
        """Gets the state_or_province of this LocationProperties.

        The state or province to use when shipping the drives to the Azure data center. 

        :return: The state_or_province of this LocationProperties.
        :rtype: str
        """
        return self._state_or_province

    @state_or_province.setter
    def state_or_province(self, state_or_province):
        """Sets the state_or_province of this LocationProperties.

        The state or province to use when shipping the drives to the Azure data center. 

        :param state_or_province: The state_or_province of this LocationProperties.
        :type state_or_province: str
        """

        self._state_or_province = state_or_province

    @property
    def street_address1(self):
        """Gets the street_address1 of this LocationProperties.

        The first line of the street address to use when shipping the drives to the Azure data center. 

        :return: The street_address1 of this LocationProperties.
        :rtype: str
        """
        return self._street_address1

    @street_address1.setter
    def street_address1(self, street_address1):
        """Sets the street_address1 of this LocationProperties.

        The first line of the street address to use when shipping the drives to the Azure data center. 

        :param street_address1: The street_address1 of this LocationProperties.
        :type street_address1: str
        """

        self._street_address1 = street_address1

    @property
    def street_address2(self):
        """Gets the street_address2 of this LocationProperties.

        The second line of the street address to use when shipping the drives to the Azure data center. 

        :return: The street_address2 of this LocationProperties.
        :rtype: str
        """
        return self._street_address2

    @street_address2.setter
    def street_address2(self, street_address2):
        """Sets the street_address2 of this LocationProperties.

        The second line of the street address to use when shipping the drives to the Azure data center. 

        :param street_address2: The street_address2 of this LocationProperties.
        :type street_address2: str
        """

        self._street_address2 = street_address2

    @property
    def supported_carriers(self):
        """Gets the supported_carriers of this LocationProperties.

        A list of carriers that are supported at this location. 

        :return: The supported_carriers of this LocationProperties.
        :rtype: List[str]
        """
        return self._supported_carriers

    @supported_carriers.setter
    def supported_carriers(self, supported_carriers):
        """Sets the supported_carriers of this LocationProperties.

        A list of carriers that are supported at this location. 

        :param supported_carriers: The supported_carriers of this LocationProperties.
        :type supported_carriers: List[str]
        """

        self._supported_carriers = supported_carriers
