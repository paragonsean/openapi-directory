# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShippingInformation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country_or_region: str=None, phone: str=None, postal_code: str=None, recipient_name: str=None, state_or_province: str=None, street_address1: str=None, street_address2: str=None):
        """ShippingInformation - a model defined in OpenAPI

        :param city: The city of this ShippingInformation.
        :param country_or_region: The country_or_region of this ShippingInformation.
        :param phone: The phone of this ShippingInformation.
        :param postal_code: The postal_code of this ShippingInformation.
        :param recipient_name: The recipient_name of this ShippingInformation.
        :param state_or_province: The state_or_province of this ShippingInformation.
        :param street_address1: The street_address1 of this ShippingInformation.
        :param street_address2: The street_address2 of this ShippingInformation.
        """
        self.openapi_types = {
            'city': str,
            'country_or_region': str,
            'phone': str,
            'postal_code': str,
            'recipient_name': str,
            'state_or_province': str,
            'street_address1': str,
            'street_address2': str
        }

        self.attribute_map = {
            'city': 'city',
            'country_or_region': 'countryOrRegion',
            'phone': 'phone',
            'postal_code': 'postalCode',
            'recipient_name': 'recipientName',
            'state_or_province': 'stateOrProvince',
            'street_address1': 'streetAddress1',
            'street_address2': 'streetAddress2'
        }

        self._city = city
        self._country_or_region = country_or_region
        self._phone = phone
        self._postal_code = postal_code
        self._recipient_name = recipient_name
        self._state_or_province = state_or_province
        self._street_address1 = street_address1
        self._street_address2 = street_address2

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShippingInformation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShippingInformation of this ShippingInformation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this ShippingInformation.

        The city name to use when returning the drives.

        :return: The city of this ShippingInformation.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ShippingInformation.

        The city name to use when returning the drives.

        :param city: The city of this ShippingInformation.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def country_or_region(self):
        """Gets the country_or_region of this ShippingInformation.

        The country or region to use when returning the drives. 

        :return: The country_or_region of this ShippingInformation.
        :rtype: str
        """
        return self._country_or_region

    @country_or_region.setter
    def country_or_region(self, country_or_region):
        """Sets the country_or_region of this ShippingInformation.

        The country or region to use when returning the drives. 

        :param country_or_region: The country_or_region of this ShippingInformation.
        :type country_or_region: str
        """
        if country_or_region is None:
            raise ValueError("Invalid value for `country_or_region`, must not be `None`")

        self._country_or_region = country_or_region

    @property
    def phone(self):
        """Gets the phone of this ShippingInformation.

        Phone number of the recipient of the returned drives.

        :return: The phone of this ShippingInformation.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ShippingInformation.

        Phone number of the recipient of the returned drives.

        :param phone: The phone of this ShippingInformation.
        :type phone: str
        """

        self._phone = phone

    @property
    def postal_code(self):
        """Gets the postal_code of this ShippingInformation.

        The postal code to use when returning the drives.

        :return: The postal_code of this ShippingInformation.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ShippingInformation.

        The postal code to use when returning the drives.

        :param postal_code: The postal_code of this ShippingInformation.
        :type postal_code: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")

        self._postal_code = postal_code

    @property
    def recipient_name(self):
        """Gets the recipient_name of this ShippingInformation.

        The name of the recipient who will receive the hard drives when they are returned. 

        :return: The recipient_name of this ShippingInformation.
        :rtype: str
        """
        return self._recipient_name

    @recipient_name.setter
    def recipient_name(self, recipient_name):
        """Sets the recipient_name of this ShippingInformation.

        The name of the recipient who will receive the hard drives when they are returned. 

        :param recipient_name: The recipient_name of this ShippingInformation.
        :type recipient_name: str
        """
        if recipient_name is None:
            raise ValueError("Invalid value for `recipient_name`, must not be `None`")

        self._recipient_name = recipient_name

    @property
    def state_or_province(self):
        """Gets the state_or_province of this ShippingInformation.

        The state or province to use when returning the drives.

        :return: The state_or_province of this ShippingInformation.
        :rtype: str
        """
        return self._state_or_province

    @state_or_province.setter
    def state_or_province(self, state_or_province):
        """Sets the state_or_province of this ShippingInformation.

        The state or province to use when returning the drives.

        :param state_or_province: The state_or_province of this ShippingInformation.
        :type state_or_province: str
        """
        if state_or_province is None:
            raise ValueError("Invalid value for `state_or_province`, must not be `None`")

        self._state_or_province = state_or_province

    @property
    def street_address1(self):
        """Gets the street_address1 of this ShippingInformation.

        The first line of the street address to use when returning the drives. 

        :return: The street_address1 of this ShippingInformation.
        :rtype: str
        """
        return self._street_address1

    @street_address1.setter
    def street_address1(self, street_address1):
        """Sets the street_address1 of this ShippingInformation.

        The first line of the street address to use when returning the drives. 

        :param street_address1: The street_address1 of this ShippingInformation.
        :type street_address1: str
        """
        if street_address1 is None:
            raise ValueError("Invalid value for `street_address1`, must not be `None`")

        self._street_address1 = street_address1

    @property
    def street_address2(self):
        """Gets the street_address2 of this ShippingInformation.

        The second line of the street address to use when returning the drives. 

        :return: The street_address2 of this ShippingInformation.
        :rtype: str
        """
        return self._street_address2

    @street_address2.setter
    def street_address2(self, street_address2):
        """Sets the street_address2 of this ShippingInformation.

        The second line of the street address to use when returning the drives. 

        :param street_address2: The street_address2 of this ShippingInformation.
        :type street_address2: str
        """

        self._street_address2 = street_address2
