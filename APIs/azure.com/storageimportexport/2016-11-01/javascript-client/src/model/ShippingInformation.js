/**
 * StorageImportExport
 * The Storage Import/Export Resource Provider API.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ShippingInformation model module.
 * @module model/ShippingInformation
 * @version 2016-11-01
 */
class ShippingInformation {
    /**
     * Constructs a new <code>ShippingInformation</code>.
     * Contains information about the Microsoft datacenter to which the drives should be shipped.
     * @alias module:model/ShippingInformation
     * @param city {String} The city name to use when returning the drives.
     * @param countryOrRegion {String} The country or region to use when returning the drives. 
     * @param postalCode {String} The postal code to use when returning the drives.
     * @param recipientName {String} The name of the recipient who will receive the hard drives when they are returned. 
     * @param stateOrProvince {String} The state or province to use when returning the drives.
     * @param streetAddress1 {String} The first line of the street address to use when returning the drives. 
     */
    constructor(city, countryOrRegion, postalCode, recipientName, stateOrProvince, streetAddress1) { 
        
        ShippingInformation.initialize(this, city, countryOrRegion, postalCode, recipientName, stateOrProvince, streetAddress1);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, city, countryOrRegion, postalCode, recipientName, stateOrProvince, streetAddress1) { 
        obj['city'] = city;
        obj['countryOrRegion'] = countryOrRegion;
        obj['postalCode'] = postalCode;
        obj['recipientName'] = recipientName;
        obj['stateOrProvince'] = stateOrProvince;
        obj['streetAddress1'] = streetAddress1;
    }

    /**
     * Constructs a <code>ShippingInformation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShippingInformation} obj Optional instance to populate.
     * @return {module:model/ShippingInformation} The populated <code>ShippingInformation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShippingInformation();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('countryOrRegion')) {
                obj['countryOrRegion'] = ApiClient.convertToType(data['countryOrRegion'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('recipientName')) {
                obj['recipientName'] = ApiClient.convertToType(data['recipientName'], 'String');
            }
            if (data.hasOwnProperty('stateOrProvince')) {
                obj['stateOrProvince'] = ApiClient.convertToType(data['stateOrProvince'], 'String');
            }
            if (data.hasOwnProperty('streetAddress1')) {
                obj['streetAddress1'] = ApiClient.convertToType(data['streetAddress1'], 'String');
            }
            if (data.hasOwnProperty('streetAddress2')) {
                obj['streetAddress2'] = ApiClient.convertToType(data['streetAddress2'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShippingInformation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShippingInformation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ShippingInformation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['countryOrRegion'] && !(typeof data['countryOrRegion'] === 'string' || data['countryOrRegion'] instanceof String)) {
            throw new Error("Expected the field `countryOrRegion` to be a primitive type in the JSON string but got " + data['countryOrRegion']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is a string
        if (data['recipientName'] && !(typeof data['recipientName'] === 'string' || data['recipientName'] instanceof String)) {
            throw new Error("Expected the field `recipientName` to be a primitive type in the JSON string but got " + data['recipientName']);
        }
        // ensure the json data is a string
        if (data['stateOrProvince'] && !(typeof data['stateOrProvince'] === 'string' || data['stateOrProvince'] instanceof String)) {
            throw new Error("Expected the field `stateOrProvince` to be a primitive type in the JSON string but got " + data['stateOrProvince']);
        }
        // ensure the json data is a string
        if (data['streetAddress1'] && !(typeof data['streetAddress1'] === 'string' || data['streetAddress1'] instanceof String)) {
            throw new Error("Expected the field `streetAddress1` to be a primitive type in the JSON string but got " + data['streetAddress1']);
        }
        // ensure the json data is a string
        if (data['streetAddress2'] && !(typeof data['streetAddress2'] === 'string' || data['streetAddress2'] instanceof String)) {
            throw new Error("Expected the field `streetAddress2` to be a primitive type in the JSON string but got " + data['streetAddress2']);
        }

        return true;
    }


}

ShippingInformation.RequiredProperties = ["city", "countryOrRegion", "postalCode", "recipientName", "stateOrProvince", "streetAddress1"];

/**
 * The city name to use when returning the drives.
 * @member {String} city
 */
ShippingInformation.prototype['city'] = undefined;

/**
 * The country or region to use when returning the drives. 
 * @member {String} countryOrRegion
 */
ShippingInformation.prototype['countryOrRegion'] = undefined;

/**
 * Phone number of the recipient of the returned drives.
 * @member {String} phone
 */
ShippingInformation.prototype['phone'] = undefined;

/**
 * The postal code to use when returning the drives.
 * @member {String} postalCode
 */
ShippingInformation.prototype['postalCode'] = undefined;

/**
 * The name of the recipient who will receive the hard drives when they are returned. 
 * @member {String} recipientName
 */
ShippingInformation.prototype['recipientName'] = undefined;

/**
 * The state or province to use when returning the drives.
 * @member {String} stateOrProvince
 */
ShippingInformation.prototype['stateOrProvince'] = undefined;

/**
 * The first line of the street address to use when returning the drives. 
 * @member {String} streetAddress1
 */
ShippingInformation.prototype['streetAddress1'] = undefined;

/**
 * The second line of the street address to use when returning the drives. 
 * @member {String} streetAddress2
 */
ShippingInformation.prototype['streetAddress2'] = undefined;






export default ShippingInformation;

