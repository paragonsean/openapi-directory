/**
 * StorageImportExport
 * The Storage Import/Export Resource Provider API.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExportBlobList model module.
 * @module model/ExportBlobList
 * @version 2016-11-01
 */
class ExportBlobList {
    /**
     * Constructs a new <code>ExportBlobList</code>.
     * A list of the blobs to be exported.
     * @alias module:model/ExportBlobList
     */
    constructor() { 
        
        ExportBlobList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExportBlobList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExportBlobList} obj Optional instance to populate.
     * @return {module:model/ExportBlobList} The populated <code>ExportBlobList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExportBlobList();

            if (data.hasOwnProperty('blobPath')) {
                obj['blobPath'] = ApiClient.convertToType(data['blobPath'], ['String']);
            }
            if (data.hasOwnProperty('blobPathPrefix')) {
                obj['blobPathPrefix'] = ApiClient.convertToType(data['blobPathPrefix'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExportBlobList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExportBlobList</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['blobPath'])) {
            throw new Error("Expected the field `blobPath` to be an array in the JSON data but got " + data['blobPath']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['blobPathPrefix'])) {
            throw new Error("Expected the field `blobPathPrefix` to be an array in the JSON data but got " + data['blobPathPrefix']);
        }

        return true;
    }


}



/**
 * A collection of blob-path strings.
 * @member {Array.<String>} blobPath
 */
ExportBlobList.prototype['blobPath'] = undefined;

/**
 * A collection of blob-prefix strings.
 * @member {Array.<String>} blobPathPrefix
 */
ExportBlobList.prototype['blobPathPrefix'] = undefined;






export default ExportBlobList;

