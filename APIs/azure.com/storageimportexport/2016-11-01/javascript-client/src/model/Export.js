/**
 * StorageImportExport
 * The Storage Import/Export Resource Provider API.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExportBlobList from './ExportBlobList';

/**
 * The Export model module.
 * @module model/Export
 * @version 2016-11-01
 */
class Export {
    /**
     * Constructs a new <code>Export</code>.
     * A property containing information about the blobs to be exported for an export job. This property is required for export jobs, but must not be specified for import jobs.
     * @alias module:model/Export
     */
    constructor() { 
        
        Export.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Export</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Export} obj Optional instance to populate.
     * @return {module:model/Export} The populated <code>Export</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Export();

            if (data.hasOwnProperty('blobList')) {
                obj['blobList'] = ExportBlobList.constructFromObject(data['blobList']);
            }
            if (data.hasOwnProperty('blobListblobPath')) {
                obj['blobListblobPath'] = ApiClient.convertToType(data['blobListblobPath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Export</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Export</code>.
     */
    static validateJSON(data) {
        // validate the optional field `blobList`
        if (data['blobList']) { // data not null
          ExportBlobList.validateJSON(data['blobList']);
        }
        // ensure the json data is a string
        if (data['blobListblobPath'] && !(typeof data['blobListblobPath'] === 'string' || data['blobListblobPath'] instanceof String)) {
            throw new Error("Expected the field `blobListblobPath` to be a primitive type in the JSON string but got " + data['blobListblobPath']);
        }

        return true;
    }


}



/**
 * @member {module:model/ExportBlobList} blobList
 */
Export.prototype['blobList'] = undefined;

/**
 * The relative URI to the block blob that contains the list of blob paths or blob path prefixes as defined above, beginning with the container name. If the blob is in root container, the URI must begin with $root. 
 * @member {String} blobListblobPath
 */
Export.prototype['blobListblobPath'] = undefined;






export default Export;

