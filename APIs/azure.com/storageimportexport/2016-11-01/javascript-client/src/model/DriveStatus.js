/**
 * StorageImportExport
 * The Storage Import/Export Resource Provider API.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DriveStatus model module.
 * @module model/DriveStatus
 * @version 2016-11-01
 */
class DriveStatus {
    /**
     * Constructs a new <code>DriveStatus</code>.
     * Provides information about the drive&#39;s status
     * @alias module:model/DriveStatus
     */
    constructor() { 
        
        DriveStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DriveStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DriveStatus} obj Optional instance to populate.
     * @return {module:model/DriveStatus} The populated <code>DriveStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DriveStatus();

            if (data.hasOwnProperty('bitLockerKey')) {
                obj['bitLockerKey'] = ApiClient.convertToType(data['bitLockerKey'], 'String');
            }
            if (data.hasOwnProperty('bytesSucceeded')) {
                obj['bytesSucceeded'] = ApiClient.convertToType(data['bytesSucceeded'], 'Number');
            }
            if (data.hasOwnProperty('copyStatus')) {
                obj['copyStatus'] = ApiClient.convertToType(data['copyStatus'], 'String');
            }
            if (data.hasOwnProperty('driveHeaderHash')) {
                obj['driveHeaderHash'] = ApiClient.convertToType(data['driveHeaderHash'], 'String');
            }
            if (data.hasOwnProperty('driveId')) {
                obj['driveId'] = ApiClient.convertToType(data['driveId'], 'String');
            }
            if (data.hasOwnProperty('errorLogUri')) {
                obj['errorLogUri'] = ApiClient.convertToType(data['errorLogUri'], 'String');
            }
            if (data.hasOwnProperty('manifestFile')) {
                obj['manifestFile'] = ApiClient.convertToType(data['manifestFile'], 'String');
            }
            if (data.hasOwnProperty('manifestHash')) {
                obj['manifestHash'] = ApiClient.convertToType(data['manifestHash'], 'String');
            }
            if (data.hasOwnProperty('manifestUri')) {
                obj['manifestUri'] = ApiClient.convertToType(data['manifestUri'], 'String');
            }
            if (data.hasOwnProperty('percentComplete')) {
                obj['percentComplete'] = ApiClient.convertToType(data['percentComplete'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('verboseLogUri')) {
                obj['verboseLogUri'] = ApiClient.convertToType(data['verboseLogUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DriveStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DriveStatus</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bitLockerKey'] && !(typeof data['bitLockerKey'] === 'string' || data['bitLockerKey'] instanceof String)) {
            throw new Error("Expected the field `bitLockerKey` to be a primitive type in the JSON string but got " + data['bitLockerKey']);
        }
        // ensure the json data is a string
        if (data['copyStatus'] && !(typeof data['copyStatus'] === 'string' || data['copyStatus'] instanceof String)) {
            throw new Error("Expected the field `copyStatus` to be a primitive type in the JSON string but got " + data['copyStatus']);
        }
        // ensure the json data is a string
        if (data['driveHeaderHash'] && !(typeof data['driveHeaderHash'] === 'string' || data['driveHeaderHash'] instanceof String)) {
            throw new Error("Expected the field `driveHeaderHash` to be a primitive type in the JSON string but got " + data['driveHeaderHash']);
        }
        // ensure the json data is a string
        if (data['driveId'] && !(typeof data['driveId'] === 'string' || data['driveId'] instanceof String)) {
            throw new Error("Expected the field `driveId` to be a primitive type in the JSON string but got " + data['driveId']);
        }
        // ensure the json data is a string
        if (data['errorLogUri'] && !(typeof data['errorLogUri'] === 'string' || data['errorLogUri'] instanceof String)) {
            throw new Error("Expected the field `errorLogUri` to be a primitive type in the JSON string but got " + data['errorLogUri']);
        }
        // ensure the json data is a string
        if (data['manifestFile'] && !(typeof data['manifestFile'] === 'string' || data['manifestFile'] instanceof String)) {
            throw new Error("Expected the field `manifestFile` to be a primitive type in the JSON string but got " + data['manifestFile']);
        }
        // ensure the json data is a string
        if (data['manifestHash'] && !(typeof data['manifestHash'] === 'string' || data['manifestHash'] instanceof String)) {
            throw new Error("Expected the field `manifestHash` to be a primitive type in the JSON string but got " + data['manifestHash']);
        }
        // ensure the json data is a string
        if (data['manifestUri'] && !(typeof data['manifestUri'] === 'string' || data['manifestUri'] instanceof String)) {
            throw new Error("Expected the field `manifestUri` to be a primitive type in the JSON string but got " + data['manifestUri']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['verboseLogUri'] && !(typeof data['verboseLogUri'] === 'string' || data['verboseLogUri'] instanceof String)) {
            throw new Error("Expected the field `verboseLogUri` to be a primitive type in the JSON string but got " + data['verboseLogUri']);
        }

        return true;
    }


}



/**
 * The BitLocker key used to encrypt the drive.
 * @member {String} bitLockerKey
 */
DriveStatus.prototype['bitLockerKey'] = undefined;

/**
 * Bytes successfully transferred for the drive.
 * @member {Number} bytesSucceeded
 */
DriveStatus.prototype['bytesSucceeded'] = undefined;

/**
 * Detailed status about the data transfer process. This field is not returned in the response until the drive is in the Transferring state.
 * @member {String} copyStatus
 */
DriveStatus.prototype['copyStatus'] = undefined;

/**
 * The drive header hash value.
 * @member {String} driveHeaderHash
 */
DriveStatus.prototype['driveHeaderHash'] = undefined;

/**
 * The drive's hardware serial number, without spaces.
 * @member {String} driveId
 */
DriveStatus.prototype['driveId'] = undefined;

/**
 * A URI that points to the blob containing the error log for the data transfer operation.
 * @member {String} errorLogUri
 */
DriveStatus.prototype['errorLogUri'] = undefined;

/**
 * The relative path of the manifest file on the drive. 
 * @member {String} manifestFile
 */
DriveStatus.prototype['manifestFile'] = undefined;

/**
 * The Base16-encoded MD5 hash of the manifest file on the drive.
 * @member {String} manifestHash
 */
DriveStatus.prototype['manifestHash'] = undefined;

/**
 * A URI that points to the blob containing the drive manifest file. 
 * @member {String} manifestUri
 */
DriveStatus.prototype['manifestUri'] = undefined;

/**
 * Percentage completed for the drive. 
 * @member {Number} percentComplete
 */
DriveStatus.prototype['percentComplete'] = undefined;

/**
 * The drive's current state. 
 * @member {module:model/DriveStatus.StateEnum} state
 */
DriveStatus.prototype['state'] = undefined;

/**
 * A URI that points to the blob containing the verbose log for the data transfer operation. 
 * @member {String} verboseLogUri
 */
DriveStatus.prototype['verboseLogUri'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
DriveStatus['StateEnum'] = {

    /**
     * value: "Specified"
     * @const
     */
    "Specified": "Specified",

    /**
     * value: "Received"
     * @const
     */
    "Received": "Received",

    /**
     * value: "NeverReceived"
     * @const
     */
    "NeverReceived": "NeverReceived",

    /**
     * value: "Transferring"
     * @const
     */
    "Transferring": "Transferring",

    /**
     * value: "Completed"
     * @const
     */
    "Completed": "Completed",

    /**
     * value: "CompletedMoreInfo"
     * @const
     */
    "CompletedMoreInfo": "CompletedMoreInfo",

    /**
     * value: "ShippedBack"
     * @const
     */
    "ShippedBack": "ShippedBack"
};



export default DriveStatus;

