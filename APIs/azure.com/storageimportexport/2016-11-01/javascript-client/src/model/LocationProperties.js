/**
 * StorageImportExport
 * The Storage Import/Export Resource Provider API.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LocationProperties model module.
 * @module model/LocationProperties
 * @version 2016-11-01
 */
class LocationProperties {
    /**
     * Constructs a new <code>LocationProperties</code>.
     * location properties
     * @alias module:model/LocationProperties
     */
    constructor() { 
        
        LocationProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LocationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LocationProperties} obj Optional instance to populate.
     * @return {module:model/LocationProperties} The populated <code>LocationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LocationProperties();

            if (data.hasOwnProperty('alternateLocations')) {
                obj['alternateLocations'] = ApiClient.convertToType(data['alternateLocations'], ['String']);
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('countryOrRegion')) {
                obj['countryOrRegion'] = ApiClient.convertToType(data['countryOrRegion'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('recipientName')) {
                obj['recipientName'] = ApiClient.convertToType(data['recipientName'], 'String');
            }
            if (data.hasOwnProperty('stateOrProvince')) {
                obj['stateOrProvince'] = ApiClient.convertToType(data['stateOrProvince'], 'String');
            }
            if (data.hasOwnProperty('streetAddress1')) {
                obj['streetAddress1'] = ApiClient.convertToType(data['streetAddress1'], 'String');
            }
            if (data.hasOwnProperty('streetAddress2')) {
                obj['streetAddress2'] = ApiClient.convertToType(data['streetAddress2'], 'String');
            }
            if (data.hasOwnProperty('supportedCarriers')) {
                obj['supportedCarriers'] = ApiClient.convertToType(data['supportedCarriers'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LocationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LocationProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['alternateLocations'])) {
            throw new Error("Expected the field `alternateLocations` to be an array in the JSON data but got " + data['alternateLocations']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['countryOrRegion'] && !(typeof data['countryOrRegion'] === 'string' || data['countryOrRegion'] instanceof String)) {
            throw new Error("Expected the field `countryOrRegion` to be a primitive type in the JSON string but got " + data['countryOrRegion']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is a string
        if (data['recipientName'] && !(typeof data['recipientName'] === 'string' || data['recipientName'] instanceof String)) {
            throw new Error("Expected the field `recipientName` to be a primitive type in the JSON string but got " + data['recipientName']);
        }
        // ensure the json data is a string
        if (data['stateOrProvince'] && !(typeof data['stateOrProvince'] === 'string' || data['stateOrProvince'] instanceof String)) {
            throw new Error("Expected the field `stateOrProvince` to be a primitive type in the JSON string but got " + data['stateOrProvince']);
        }
        // ensure the json data is a string
        if (data['streetAddress1'] && !(typeof data['streetAddress1'] === 'string' || data['streetAddress1'] instanceof String)) {
            throw new Error("Expected the field `streetAddress1` to be a primitive type in the JSON string but got " + data['streetAddress1']);
        }
        // ensure the json data is a string
        if (data['streetAddress2'] && !(typeof data['streetAddress2'] === 'string' || data['streetAddress2'] instanceof String)) {
            throw new Error("Expected the field `streetAddress2` to be a primitive type in the JSON string but got " + data['streetAddress2']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedCarriers'])) {
            throw new Error("Expected the field `supportedCarriers` to be an array in the JSON data but got " + data['supportedCarriers']);
        }

        return true;
    }


}



/**
 * A list of location IDs that should be used to ship shipping drives to for jobs created against the current location. If the current location is active, it will be part of the list. If it is temporarily closed due to maintenance, this list may contain other locations. 
 * @member {Array.<String>} alternateLocations
 */
LocationProperties.prototype['alternateLocations'] = undefined;

/**
 * The city name to use when shipping the drives to the Azure data center. 
 * @member {String} city
 */
LocationProperties.prototype['city'] = undefined;

/**
 * The country or region to use when shipping the drives to the Azure data center. 
 * @member {String} countryOrRegion
 */
LocationProperties.prototype['countryOrRegion'] = undefined;

/**
 * The phone number for the Azure data center. 
 * @member {String} phone
 */
LocationProperties.prototype['phone'] = undefined;

/**
 * The postal code to use when shipping the drives to the Azure data center. 
 * @member {String} postalCode
 */
LocationProperties.prototype['postalCode'] = undefined;

/**
 * The recipient name to use when shipping the drives to the Azure data center. 
 * @member {String} recipientName
 */
LocationProperties.prototype['recipientName'] = undefined;

/**
 * The state or province to use when shipping the drives to the Azure data center. 
 * @member {String} stateOrProvince
 */
LocationProperties.prototype['stateOrProvince'] = undefined;

/**
 * The first line of the street address to use when shipping the drives to the Azure data center. 
 * @member {String} streetAddress1
 */
LocationProperties.prototype['streetAddress1'] = undefined;

/**
 * The second line of the street address to use when shipping the drives to the Azure data center. 
 * @member {String} streetAddress2
 */
LocationProperties.prototype['streetAddress2'] = undefined;

/**
 * A list of carriers that are supported at this location. 
 * @member {Array.<String>} supportedCarriers
 */
LocationProperties.prototype['supportedCarriers'] = undefined;






export default LocationProperties;

