/**
 * StorageImportExport
 * The Storage Import/Export Resource Provider API.
 *
 * The version of the OpenAPI document: 2016-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import GetBitLockerKeysResponse from '../model/GetBitLockerKeysResponse';
import JobResponse from '../model/JobResponse';
import ListJobsResponse from '../model/ListJobsResponse';
import ListOperationsResponse from '../model/ListOperationsResponse';
import Location from '../model/Location';
import LocationsResponse from '../model/LocationsResponse';
import PutJobParameters from '../model/PutJobParameters';
import UpdateJobParameters from '../model/UpdateJobParameters';

/**
* StorageImportExport service.
* @module api/StorageImportExportApi
* @version 2016-11-01
*/
export default class StorageImportExportApi {

    /**
    * Constructs a new StorageImportExportApi. 
    * @alias module:api/StorageImportExportApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bitLockerKeysList operation.
     * @callback module:api/StorageImportExportApi~bitLockerKeysListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBitLockerKeysResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the BitLocker Keys for all drives in the specified job.
     * @param {String} jobName The name of the import/export job.
     * @param {String} subscriptionId The subscription ID for the Azure user.
     * @param {String} resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param {module:model/String} apiVersion Specifies the API version to use for this request.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Specifies the preferred language for the response.
     * @param {module:api/StorageImportExportApi~bitLockerKeysListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBitLockerKeysResponse}
     */
    bitLockerKeysList(jobName, subscriptionId, resourceGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling bitLockerKeysList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling bitLockerKeysList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling bitLockerKeysList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling bitLockerKeysList");
      }

      let pathParams = {
        'jobName': jobName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBitLockerKeysResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}/listBitLockerKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsCreate operation.
     * @callback module:api/StorageImportExportApi~jobsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new job or updates an existing job in the specified subscription.
     * @param {String} jobName The name of the import/export job.
     * @param {String} subscriptionId The subscription ID for the Azure user.
     * @param {String} resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param {module:model/String} apiVersion Specifies the API version to use for this request.
     * @param {module:model/PutJobParameters} body The parameters used for creating the job
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Specifies the preferred language for the response.
     * @param {String} [xMsClientTenantId] The tenant ID of the client making the request.
     * @param {module:api/StorageImportExportApi~jobsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobResponse}
     */
    jobsCreate(jobName, subscriptionId, resourceGroupName, apiVersion, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobsCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsCreate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsCreate");
      }

      let pathParams = {
        'jobName': jobName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage'],
        'x-ms-client-tenant-id': opts['xMsClientTenantId']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsDelete operation.
     * @callback module:api/StorageImportExportApi~jobsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing job. Only jobs in the Creating or Completed states can be deleted.
     * @param {String} jobName The name of the import/export job.
     * @param {String} subscriptionId The subscription ID for the Azure user.
     * @param {String} resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param {module:model/String} apiVersion Specifies the API version to use for this request.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Specifies the preferred language for the response.
     * @param {module:api/StorageImportExportApi~jobsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jobsDelete(jobName, subscriptionId, resourceGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsDelete");
      }

      let pathParams = {
        'jobName': jobName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsGet operation.
     * @callback module:api/StorageImportExportApi~jobsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about an existing job.
     * @param {String} jobName The name of the import/export job.
     * @param {String} subscriptionId The subscription ID for the Azure user.
     * @param {String} resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param {module:model/String} apiVersion Specifies the API version to use for this request.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Specifies the preferred language for the response.
     * @param {module:api/StorageImportExportApi~jobsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobResponse}
     */
    jobsGet(jobName, subscriptionId, resourceGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsGet");
      }

      let pathParams = {
        'jobName': jobName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsListByResourceGroup operation.
     * @callback module:api/StorageImportExportApi~jobsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all active and completed jobs in a resource group.
     * @param {String} subscriptionId The subscription ID for the Azure user.
     * @param {String} resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param {module:model/String} apiVersion Specifies the API version to use for this request.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100.
     * @param {String} [filter] Can be used to restrict the results to certain conditions.
     * @param {String} [acceptLanguage] Specifies the preferred language for the response.
     * @param {module:api/StorageImportExportApi~jobsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListJobsResponse}
     */
    jobsListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        '$top': opts['top'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListJobsResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsListBySubscription operation.
     * @callback module:api/StorageImportExportApi~jobsListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all active and completed jobs in a subscription.
     * @param {String} subscriptionId The subscription ID for the Azure user.
     * @param {module:model/String} apiVersion Specifies the API version to use for this request.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] An integer value that specifies how many jobs at most should be returned. The value cannot exceed 100.
     * @param {String} [filter] Can be used to restrict the results to certain conditions.
     * @param {String} [acceptLanguage] Specifies the preferred language for the response.
     * @param {module:api/StorageImportExportApi~jobsListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListJobsResponse}
     */
    jobsListBySubscription(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsListBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        '$top': opts['top'],
        '$filter': opts['filter'],
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListJobsResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.ImportExport/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsUpdate operation.
     * @callback module:api/StorageImportExportApi~jobsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates specific properties of a job. You can call this operation to notify the Import/Export service that the hard drives comprising the import or export job have been shipped to the Microsoft data center. It can also be used to cancel an existing job.
     * @param {String} jobName The name of the import/export job.
     * @param {String} subscriptionId The subscription ID for the Azure user.
     * @param {String} resourceGroupName The resource group name uniquely identifies the resource group within the user subscription.
     * @param {module:model/String} apiVersion Specifies the API version to use for this request.
     * @param {module:model/UpdateJobParameters} body The parameters to update in the job
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Specifies the preferred language for the response.
     * @param {module:api/StorageImportExportApi~jobsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobResponse}
     */
    jobsUpdate(jobName, subscriptionId, resourceGroupName, apiVersion, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'jobName' is set
      if (jobName === undefined || jobName === null) {
        throw new Error("Missing the required parameter 'jobName' when calling jobsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jobsUpdate");
      }

      let pathParams = {
        'jobName': jobName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the locationsGet operation.
     * @callback module:api/StorageImportExportApi~locationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Location} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details about a location to which you can ship the disks associated with an import or export job. A location is an Azure region.
     * @param {String} locationName The name of the location. For example, West US or westus.
     * @param {module:model/String} apiVersion Specifies the API version to use for this request.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Specifies the preferred language for the response.
     * @param {module:api/StorageImportExportApi~locationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Location}
     */
    locationsGet(locationName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locationName' is set
      if (locationName === undefined || locationName === null) {
        throw new Error("Missing the required parameter 'locationName' when calling locationsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling locationsGet");
      }

      let pathParams = {
        'locationName': locationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Location;
      return this.apiClient.callApi(
        '/providers/Microsoft.ImportExport/locations/{locationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the locationsList operation.
     * @callback module:api/StorageImportExportApi~locationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LocationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of locations to which you can ship the disks associated with an import or export job. A location is a Microsoft data center region.
     * @param {module:model/String} apiVersion Specifies the API version to use for this request.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Specifies the preferred language for the response.
     * @param {module:api/StorageImportExportApi~locationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LocationsResponse}
     */
    locationsList(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling locationsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LocationsResponse;
      return this.apiClient.callApi(
        '/providers/Microsoft.ImportExport/locations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the operationsList operation.
     * @callback module:api/StorageImportExportApi~operationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListOperationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of operations supported by the import/export resource provider.
     * @param {module:model/String} apiVersion Specifies the API version to use for this request.
     * @param {Object} opts Optional parameters
     * @param {String} [acceptLanguage] Specifies the preferred language for the response.
     * @param {module:api/StorageImportExportApi~operationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListOperationsResponse}
     */
    operationsList(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling operationsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Accept-Language': opts['acceptLanguage']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListOperationsResponse;
      return this.apiClient.callApi(
        '/providers/Microsoft.ImportExport/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
