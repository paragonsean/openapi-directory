/**
 * ML Team Account Management Client
 * These APIs allow end users to operate on Azure Machine Learning Team Account resources. They support CRUD operations for Azure Machine Learning Team Accounts.
 *
 * The version of the OpenAPI document: 2017-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountProperties::OAIAccountProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountProperties::OAIAccountProperties() {
    this->initializeModel();
}

OAIAccountProperties::~OAIAccountProperties() {}

void OAIAccountProperties::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_discovery_uri_isSet = false;
    m_discovery_uri_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_key_vault_id_isSet = false;
    m_key_vault_id_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_seats_isSet = false;
    m_seats_isValid = false;

    m_storage_account_isSet = false;
    m_storage_account_isValid = false;

    m_vso_account_id_isSet = false;
    m_vso_account_id_isValid = false;
}

void OAIAccountProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountProperties::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_discovery_uri_isValid = ::OpenAPI::fromJsonValue(m_discovery_uri, json[QString("discoveryUri")]);
    m_discovery_uri_isSet = !json[QString("discoveryUri")].isNull() && m_discovery_uri_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_key_vault_id_isValid = ::OpenAPI::fromJsonValue(m_key_vault_id, json[QString("keyVaultId")]);
    m_key_vault_id_isSet = !json[QString("keyVaultId")].isNull() && m_key_vault_id_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_seats_isValid = ::OpenAPI::fromJsonValue(m_seats, json[QString("seats")]);
    m_seats_isSet = !json[QString("seats")].isNull() && m_seats_isValid;

    m_storage_account_isValid = ::OpenAPI::fromJsonValue(m_storage_account, json[QString("storageAccount")]);
    m_storage_account_isSet = !json[QString("storageAccount")].isNull() && m_storage_account_isValid;

    m_vso_account_id_isValid = ::OpenAPI::fromJsonValue(m_vso_account_id, json[QString("vsoAccountId")]);
    m_vso_account_id_isSet = !json[QString("vsoAccountId")].isNull() && m_vso_account_id_isValid;
}

QString OAIAccountProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_discovery_uri_isSet) {
        obj.insert(QString("discoveryUri"), ::OpenAPI::toJsonValue(m_discovery_uri));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_key_vault_id_isSet) {
        obj.insert(QString("keyVaultId"), ::OpenAPI::toJsonValue(m_key_vault_id));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_seats_isSet) {
        obj.insert(QString("seats"), ::OpenAPI::toJsonValue(m_seats));
    }
    if (m_storage_account.isSet()) {
        obj.insert(QString("storageAccount"), ::OpenAPI::toJsonValue(m_storage_account));
    }
    if (m_vso_account_id_isSet) {
        obj.insert(QString("vsoAccountId"), ::OpenAPI::toJsonValue(m_vso_account_id));
    }
    return obj;
}

QString OAIAccountProperties::getAccountId() const {
    return m_account_id;
}
void OAIAccountProperties::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAccountProperties::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAccountProperties::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QDateTime OAIAccountProperties::getCreationDate() const {
    return m_creation_date;
}
void OAIAccountProperties::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIAccountProperties::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIAccountProperties::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIAccountProperties::getDescription() const {
    return m_description;
}
void OAIAccountProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAccountProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAccountProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAccountProperties::getDiscoveryUri() const {
    return m_discovery_uri;
}
void OAIAccountProperties::setDiscoveryUri(const QString &discovery_uri) {
    m_discovery_uri = discovery_uri;
    m_discovery_uri_isSet = true;
}

bool OAIAccountProperties::is_discovery_uri_Set() const{
    return m_discovery_uri_isSet;
}

bool OAIAccountProperties::is_discovery_uri_Valid() const{
    return m_discovery_uri_isValid;
}

QString OAIAccountProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAIAccountProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIAccountProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIAccountProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIAccountProperties::getKeyVaultId() const {
    return m_key_vault_id;
}
void OAIAccountProperties::setKeyVaultId(const QString &key_vault_id) {
    m_key_vault_id = key_vault_id;
    m_key_vault_id_isSet = true;
}

bool OAIAccountProperties::is_key_vault_id_Set() const{
    return m_key_vault_id_isSet;
}

bool OAIAccountProperties::is_key_vault_id_Valid() const{
    return m_key_vault_id_isValid;
}

QString OAIAccountProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIAccountProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIAccountProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIAccountProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIAccountProperties::getSeats() const {
    return m_seats;
}
void OAIAccountProperties::setSeats(const QString &seats) {
    m_seats = seats;
    m_seats_isSet = true;
}

bool OAIAccountProperties::is_seats_Set() const{
    return m_seats_isSet;
}

bool OAIAccountProperties::is_seats_Valid() const{
    return m_seats_isValid;
}

OAIStorageAccountProperties OAIAccountProperties::getStorageAccount() const {
    return m_storage_account;
}
void OAIAccountProperties::setStorageAccount(const OAIStorageAccountProperties &storage_account) {
    m_storage_account = storage_account;
    m_storage_account_isSet = true;
}

bool OAIAccountProperties::is_storage_account_Set() const{
    return m_storage_account_isSet;
}

bool OAIAccountProperties::is_storage_account_Valid() const{
    return m_storage_account_isValid;
}

QString OAIAccountProperties::getVsoAccountId() const {
    return m_vso_account_id;
}
void OAIAccountProperties::setVsoAccountId(const QString &vso_account_id) {
    m_vso_account_id = vso_account_id;
    m_vso_account_id_isSet = true;
}

bool OAIAccountProperties::is_vso_account_id_Set() const{
    return m_vso_account_id_isSet;
}

bool OAIAccountProperties::is_vso_account_id_Valid() const{
    return m_vso_account_id_isValid;
}

bool OAIAccountProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discovery_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_vault_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vso_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_vault_id_isValid && m_storage_account_isValid && m_vso_account_id_isValid && true;
}

} // namespace OpenAPI
