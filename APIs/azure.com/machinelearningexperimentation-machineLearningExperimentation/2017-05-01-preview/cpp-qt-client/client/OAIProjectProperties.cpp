/**
 * ML Team Account Management Client
 * These APIs allow end users to operate on Azure Machine Learning Team Account resources. They support CRUD operations for Azure Machine Learning Team Accounts.
 *
 * The version of the OpenAPI document: 2017-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectProperties::OAIProjectProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectProperties::OAIProjectProperties() {
    this->initializeModel();
}

OAIProjectProperties::~OAIProjectProperties() {}

void OAIProjectProperties::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_gitrepo_isSet = false;
    m_gitrepo_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_workspace_id_isSet = false;
    m_workspace_id_isValid = false;
}

void OAIProjectProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectProperties::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_gitrepo_isValid = ::OpenAPI::fromJsonValue(m_gitrepo, json[QString("gitrepo")]);
    m_gitrepo_isSet = !json[QString("gitrepo")].isNull() && m_gitrepo_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_workspace_id_isValid = ::OpenAPI::fromJsonValue(m_workspace_id, json[QString("workspaceId")]);
    m_workspace_id_isSet = !json[QString("workspaceId")].isNull() && m_workspace_id_isValid;
}

QString OAIProjectProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_gitrepo_isSet) {
        obj.insert(QString("gitrepo"), ::OpenAPI::toJsonValue(m_gitrepo));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_workspace_id_isSet) {
        obj.insert(QString("workspaceId"), ::OpenAPI::toJsonValue(m_workspace_id));
    }
    return obj;
}

QString OAIProjectProperties::getAccountId() const {
    return m_account_id;
}
void OAIProjectProperties::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIProjectProperties::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIProjectProperties::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QDateTime OAIProjectProperties::getCreationDate() const {
    return m_creation_date;
}
void OAIProjectProperties::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIProjectProperties::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIProjectProperties::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIProjectProperties::getDescription() const {
    return m_description;
}
void OAIProjectProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProjectProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProjectProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIProjectProperties::getFriendlyName() const {
    return m_friendly_name;
}
void OAIProjectProperties::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIProjectProperties::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIProjectProperties::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIProjectProperties::getGitrepo() const {
    return m_gitrepo;
}
void OAIProjectProperties::setGitrepo(const QString &gitrepo) {
    m_gitrepo = gitrepo;
    m_gitrepo_isSet = true;
}

bool OAIProjectProperties::is_gitrepo_Set() const{
    return m_gitrepo_isSet;
}

bool OAIProjectProperties::is_gitrepo_Valid() const{
    return m_gitrepo_isValid;
}

QString OAIProjectProperties::getProjectId() const {
    return m_project_id;
}
void OAIProjectProperties::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIProjectProperties::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIProjectProperties::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIProjectProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIProjectProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIProjectProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIProjectProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIProjectProperties::getWorkspaceId() const {
    return m_workspace_id;
}
void OAIProjectProperties::setWorkspaceId(const QString &workspace_id) {
    m_workspace_id = workspace_id;
    m_workspace_id_isSet = true;
}

bool OAIProjectProperties::is_workspace_id_Set() const{
    return m_workspace_id_isSet;
}

bool OAIProjectProperties::is_workspace_id_Valid() const{
    return m_workspace_id_isValid;
}

bool OAIProjectProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gitrepo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workspace_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_friendly_name_isValid && true;
}

} // namespace OpenAPI
