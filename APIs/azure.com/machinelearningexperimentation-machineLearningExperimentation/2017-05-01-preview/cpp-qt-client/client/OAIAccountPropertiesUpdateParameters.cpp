/**
 * ML Team Account Management Client
 * These APIs allow end users to operate on Azure Machine Learning Team Account resources. They support CRUD operations for Azure Machine Learning Team Accounts.
 *
 * The version of the OpenAPI document: 2017-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountPropertiesUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountPropertiesUpdateParameters::OAIAccountPropertiesUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountPropertiesUpdateParameters::OAIAccountPropertiesUpdateParameters() {
    this->initializeModel();
}

OAIAccountPropertiesUpdateParameters::~OAIAccountPropertiesUpdateParameters() {}

void OAIAccountPropertiesUpdateParameters::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_friendly_name_isSet = false;
    m_friendly_name_isValid = false;

    m_seats_isSet = false;
    m_seats_isValid = false;

    m_storage_account_key_isSet = false;
    m_storage_account_key_isValid = false;
}

void OAIAccountPropertiesUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountPropertiesUpdateParameters::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_friendly_name_isValid = ::OpenAPI::fromJsonValue(m_friendly_name, json[QString("friendlyName")]);
    m_friendly_name_isSet = !json[QString("friendlyName")].isNull() && m_friendly_name_isValid;

    m_seats_isValid = ::OpenAPI::fromJsonValue(m_seats, json[QString("seats")]);
    m_seats_isSet = !json[QString("seats")].isNull() && m_seats_isValid;

    m_storage_account_key_isValid = ::OpenAPI::fromJsonValue(m_storage_account_key, json[QString("storageAccountKey")]);
    m_storage_account_key_isSet = !json[QString("storageAccountKey")].isNull() && m_storage_account_key_isValid;
}

QString OAIAccountPropertiesUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountPropertiesUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_friendly_name_isSet) {
        obj.insert(QString("friendlyName"), ::OpenAPI::toJsonValue(m_friendly_name));
    }
    if (m_seats_isSet) {
        obj.insert(QString("seats"), ::OpenAPI::toJsonValue(m_seats));
    }
    if (m_storage_account_key_isSet) {
        obj.insert(QString("storageAccountKey"), ::OpenAPI::toJsonValue(m_storage_account_key));
    }
    return obj;
}

QString OAIAccountPropertiesUpdateParameters::getDescription() const {
    return m_description;
}
void OAIAccountPropertiesUpdateParameters::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAccountPropertiesUpdateParameters::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAccountPropertiesUpdateParameters::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAccountPropertiesUpdateParameters::getFriendlyName() const {
    return m_friendly_name;
}
void OAIAccountPropertiesUpdateParameters::setFriendlyName(const QString &friendly_name) {
    m_friendly_name = friendly_name;
    m_friendly_name_isSet = true;
}

bool OAIAccountPropertiesUpdateParameters::is_friendly_name_Set() const{
    return m_friendly_name_isSet;
}

bool OAIAccountPropertiesUpdateParameters::is_friendly_name_Valid() const{
    return m_friendly_name_isValid;
}

QString OAIAccountPropertiesUpdateParameters::getSeats() const {
    return m_seats;
}
void OAIAccountPropertiesUpdateParameters::setSeats(const QString &seats) {
    m_seats = seats;
    m_seats_isSet = true;
}

bool OAIAccountPropertiesUpdateParameters::is_seats_Set() const{
    return m_seats_isSet;
}

bool OAIAccountPropertiesUpdateParameters::is_seats_Valid() const{
    return m_seats_isValid;
}

QString OAIAccountPropertiesUpdateParameters::getStorageAccountKey() const {
    return m_storage_account_key;
}
void OAIAccountPropertiesUpdateParameters::setStorageAccountKey(const QString &storage_account_key) {
    m_storage_account_key = storage_account_key;
    m_storage_account_key_isSet = true;
}

bool OAIAccountPropertiesUpdateParameters::is_storage_account_key_Set() const{
    return m_storage_account_key_isSet;
}

bool OAIAccountPropertiesUpdateParameters::is_storage_account_key_Valid() const{
    return m_storage_account_key_isValid;
}

bool OAIAccountPropertiesUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_friendly_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_seats_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountPropertiesUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
