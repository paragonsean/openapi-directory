/**
 * ML Team Account Management Client
 * These APIs allow end users to operate on Azure Machine Learning Team Account resources. They support CRUD operations for Azure Machine Learning Team Accounts.
 *
 * The version of the OpenAPI document: 2017-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIProject.h"
#include "OAIProjectListResult.h"
#include "OAIProjectUpdateParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  parameters OAIProject [required]
    */
    virtual void projectsCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &workspace_name, const QString &project_name, const OAIProject &parameters);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  project_name QString [required]
    */
    virtual void projectsDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &workspace_name, const QString &project_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  project_name QString [required]
    */
    virtual void projectsGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &workspace_name, const QString &project_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void projectsListByWorkspace(const QString &api_version, const QString &subscription_id, const QString &account_name, const QString &workspace_name, const QString &resource_group_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  workspace_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  parameters OAIProjectUpdateParameters [required]
    */
    virtual void projectsUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &workspace_name, const QString &project_name, const OAIProjectUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void projectsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void projectsDeleteCallback(OAIHttpRequestWorker *worker);
    void projectsGetCallback(OAIHttpRequestWorker *worker);
    void projectsListByWorkspaceCallback(OAIHttpRequestWorker *worker);
    void projectsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void projectsCreateOrUpdateSignal(OAIProject summary);
    void projectsDeleteSignal();
    void projectsGetSignal(OAIProject summary);
    void projectsListByWorkspaceSignal(OAIProjectListResult summary);
    void projectsUpdateSignal(OAIProject summary);


    void projectsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void projectsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void projectsGetSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);
    void projectsListByWorkspaceSignalFull(OAIHttpRequestWorker *worker, OAIProjectListResult summary);
    void projectsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIProject summary);

    Q_DECL_DEPRECATED_X("Use projectsCreateOrUpdateSignalError() instead")
    void projectsCreateOrUpdateSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsCreateOrUpdateSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsDeleteSignalError() instead")
    void projectsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void projectsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsGetSignalError() instead")
    void projectsGetSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsGetSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsListByWorkspaceSignalError() instead")
    void projectsListByWorkspaceSignalE(OAIProjectListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsListByWorkspaceSignalError(OAIProjectListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsUpdateSignalError() instead")
    void projectsUpdateSignalE(OAIProject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsUpdateSignalError(OAIProject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use projectsCreateOrUpdateSignalErrorFull() instead")
    void projectsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsDeleteSignalErrorFull() instead")
    void projectsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsGetSignalErrorFull() instead")
    void projectsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsListByWorkspaceSignalErrorFull() instead")
    void projectsListByWorkspaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsListByWorkspaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsUpdateSignalErrorFull() instead")
    void projectsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
