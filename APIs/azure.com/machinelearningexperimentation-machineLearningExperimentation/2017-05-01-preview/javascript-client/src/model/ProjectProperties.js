/**
 * ML Team Account Management Client
 * These APIs allow end users to operate on Azure Machine Learning Team Account resources. They support CRUD operations for Azure Machine Learning Team Accounts.
 *
 * The version of the OpenAPI document: 2017-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProjectProperties model module.
 * @module model/ProjectProperties
 * @version 2017-05-01-preview
 */
class ProjectProperties {
    /**
     * Constructs a new <code>ProjectProperties</code>.
     * The properties of a machine learning project.
     * @alias module:model/ProjectProperties
     * @param friendlyName {String} The friendly name for this project.
     */
    constructor(friendlyName) { 
        
        ProjectProperties.initialize(this, friendlyName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, friendlyName) { 
        obj['friendlyName'] = friendlyName;
    }

    /**
     * Constructs a <code>ProjectProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectProperties} obj Optional instance to populate.
     * @return {module:model/ProjectProperties} The populated <code>ProjectProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectProperties();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('friendlyName')) {
                obj['friendlyName'] = ApiClient.convertToType(data['friendlyName'], 'String');
            }
            if (data.hasOwnProperty('gitrepo')) {
                obj['gitrepo'] = ApiClient.convertToType(data['gitrepo'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('workspaceId')) {
                obj['workspaceId'] = ApiClient.convertToType(data['workspaceId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProjectProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['friendlyName'] && !(typeof data['friendlyName'] === 'string' || data['friendlyName'] instanceof String)) {
            throw new Error("Expected the field `friendlyName` to be a primitive type in the JSON string but got " + data['friendlyName']);
        }
        // ensure the json data is a string
        if (data['gitrepo'] && !(typeof data['gitrepo'] === 'string' || data['gitrepo'] instanceof String)) {
            throw new Error("Expected the field `gitrepo` to be a primitive type in the JSON string but got " + data['gitrepo']);
        }
        // ensure the json data is a string
        if (data['projectId'] && !(typeof data['projectId'] === 'string' || data['projectId'] instanceof String)) {
            throw new Error("Expected the field `projectId` to be a primitive type in the JSON string but got " + data['projectId']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['workspaceId'] && !(typeof data['workspaceId'] === 'string' || data['workspaceId'] instanceof String)) {
            throw new Error("Expected the field `workspaceId` to be a primitive type in the JSON string but got " + data['workspaceId']);
        }

        return true;
    }


}

ProjectProperties.RequiredProperties = ["friendlyName"];

/**
 * The immutable id of the team account which contains this project.
 * @member {String} accountId
 */
ProjectProperties.prototype['accountId'] = undefined;

/**
 * The creation date of the project in ISO8601 format.
 * @member {Date} creationDate
 */
ProjectProperties.prototype['creationDate'] = undefined;

/**
 * The description of this project.
 * @member {String} description
 */
ProjectProperties.prototype['description'] = undefined;

/**
 * The friendly name for this project.
 * @member {String} friendlyName
 */
ProjectProperties.prototype['friendlyName'] = undefined;

/**
 * The reference to git repo for this project.
 * @member {String} gitrepo
 */
ProjectProperties.prototype['gitrepo'] = undefined;

/**
 * The immutable id of this project.
 * @member {String} projectId
 */
ProjectProperties.prototype['projectId'] = undefined;

/**
 * The current deployment state of project resource. The provisioningState is to indicate states for resource provisioning.
 * @member {module:model/ProjectProperties.ProvisioningStateEnum} provisioningState
 */
ProjectProperties.prototype['provisioningState'] = undefined;

/**
 * The immutable id of the workspace which contains this project.
 * @member {String} workspaceId
 */
ProjectProperties.prototype['workspaceId'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
ProjectProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};



export default ProjectProperties;

