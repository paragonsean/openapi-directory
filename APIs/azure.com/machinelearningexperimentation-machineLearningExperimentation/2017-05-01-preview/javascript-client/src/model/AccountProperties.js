/**
 * ML Team Account Management Client
 * These APIs allow end users to operate on Azure Machine Learning Team Account resources. They support CRUD operations for Azure Machine Learning Team Accounts.
 *
 * The version of the OpenAPI document: 2017-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StorageAccountProperties from './StorageAccountProperties';

/**
 * The AccountProperties model module.
 * @module model/AccountProperties
 * @version 2017-05-01-preview
 */
class AccountProperties {
    /**
     * Constructs a new <code>AccountProperties</code>.
     * The properties of a machine learning team account.
     * @alias module:model/AccountProperties
     * @param keyVaultId {String} The fully qualified arm id of the user key vault.
     * @param storageAccount {module:model/StorageAccountProperties} 
     * @param vsoAccountId {String} The fully qualified arm id of the vso account to be used for this team account.
     */
    constructor(keyVaultId, storageAccount, vsoAccountId) { 
        
        AccountProperties.initialize(this, keyVaultId, storageAccount, vsoAccountId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, keyVaultId, storageAccount, vsoAccountId) { 
        obj['keyVaultId'] = keyVaultId;
        obj['storageAccount'] = storageAccount;
        obj['vsoAccountId'] = vsoAccountId;
    }

    /**
     * Constructs a <code>AccountProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccountProperties} obj Optional instance to populate.
     * @return {module:model/AccountProperties} The populated <code>AccountProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccountProperties();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('discoveryUri')) {
                obj['discoveryUri'] = ApiClient.convertToType(data['discoveryUri'], 'String');
            }
            if (data.hasOwnProperty('friendlyName')) {
                obj['friendlyName'] = ApiClient.convertToType(data['friendlyName'], 'String');
            }
            if (data.hasOwnProperty('keyVaultId')) {
                obj['keyVaultId'] = ApiClient.convertToType(data['keyVaultId'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('seats')) {
                obj['seats'] = ApiClient.convertToType(data['seats'], 'String');
            }
            if (data.hasOwnProperty('storageAccount')) {
                obj['storageAccount'] = StorageAccountProperties.constructFromObject(data['storageAccount']);
            }
            if (data.hasOwnProperty('vsoAccountId')) {
                obj['vsoAccountId'] = ApiClient.convertToType(data['vsoAccountId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccountProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccountProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AccountProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['discoveryUri'] && !(typeof data['discoveryUri'] === 'string' || data['discoveryUri'] instanceof String)) {
            throw new Error("Expected the field `discoveryUri` to be a primitive type in the JSON string but got " + data['discoveryUri']);
        }
        // ensure the json data is a string
        if (data['friendlyName'] && !(typeof data['friendlyName'] === 'string' || data['friendlyName'] instanceof String)) {
            throw new Error("Expected the field `friendlyName` to be a primitive type in the JSON string but got " + data['friendlyName']);
        }
        // ensure the json data is a string
        if (data['keyVaultId'] && !(typeof data['keyVaultId'] === 'string' || data['keyVaultId'] instanceof String)) {
            throw new Error("Expected the field `keyVaultId` to be a primitive type in the JSON string but got " + data['keyVaultId']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['seats'] && !(typeof data['seats'] === 'string' || data['seats'] instanceof String)) {
            throw new Error("Expected the field `seats` to be a primitive type in the JSON string but got " + data['seats']);
        }
        // validate the optional field `storageAccount`
        if (data['storageAccount']) { // data not null
          StorageAccountProperties.validateJSON(data['storageAccount']);
        }
        // ensure the json data is a string
        if (data['vsoAccountId'] && !(typeof data['vsoAccountId'] === 'string' || data['vsoAccountId'] instanceof String)) {
            throw new Error("Expected the field `vsoAccountId` to be a primitive type in the JSON string but got " + data['vsoAccountId']);
        }

        return true;
    }


}

AccountProperties.RequiredProperties = ["keyVaultId", "storageAccount", "vsoAccountId"];

/**
 * The immutable id associated with this team account.
 * @member {String} accountId
 */
AccountProperties.prototype['accountId'] = undefined;

/**
 * The creation date of the machine learning team account in ISO8601 format.
 * @member {Date} creationDate
 */
AccountProperties.prototype['creationDate'] = undefined;

/**
 * The description of this workspace.
 * @member {String} description
 */
AccountProperties.prototype['description'] = undefined;

/**
 * The uri for this machine learning team account.
 * @member {String} discoveryUri
 */
AccountProperties.prototype['discoveryUri'] = undefined;

/**
 * The friendly name for this workspace. This will be the workspace name in the arm id when the workspace object gets created
 * @member {String} friendlyName
 */
AccountProperties.prototype['friendlyName'] = undefined;

/**
 * The fully qualified arm id of the user key vault.
 * @member {String} keyVaultId
 */
AccountProperties.prototype['keyVaultId'] = undefined;

/**
 * The current deployment state of team account resource. The provisioningState is to indicate states for resource provisioning.
 * @member {module:model/AccountProperties.ProvisioningStateEnum} provisioningState
 */
AccountProperties.prototype['provisioningState'] = undefined;

/**
 * The no of users/seats who can access this team account. This property defines the charge on the team account.
 * @member {String} seats
 */
AccountProperties.prototype['seats'] = undefined;

/**
 * @member {module:model/StorageAccountProperties} storageAccount
 */
AccountProperties.prototype['storageAccount'] = undefined;

/**
 * The fully qualified arm id of the vso account to be used for this team account.
 * @member {String} vsoAccountId
 */
AccountProperties.prototype['vsoAccountId'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
AccountProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};



export default AccountProperties;

