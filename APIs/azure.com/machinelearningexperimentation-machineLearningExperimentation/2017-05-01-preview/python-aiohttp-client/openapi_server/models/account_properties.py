# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.storage_account_properties import StorageAccountProperties
from openapi_server import util


class AccountProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, creation_date: datetime=None, description: str=None, discovery_uri: str=None, friendly_name: str=None, key_vault_id: str=None, provisioning_state: str=None, seats: str=None, storage_account: StorageAccountProperties=None, vso_account_id: str=None):
        """AccountProperties - a model defined in OpenAPI

        :param account_id: The account_id of this AccountProperties.
        :param creation_date: The creation_date of this AccountProperties.
        :param description: The description of this AccountProperties.
        :param discovery_uri: The discovery_uri of this AccountProperties.
        :param friendly_name: The friendly_name of this AccountProperties.
        :param key_vault_id: The key_vault_id of this AccountProperties.
        :param provisioning_state: The provisioning_state of this AccountProperties.
        :param seats: The seats of this AccountProperties.
        :param storage_account: The storage_account of this AccountProperties.
        :param vso_account_id: The vso_account_id of this AccountProperties.
        """
        self.openapi_types = {
            'account_id': str,
            'creation_date': datetime,
            'description': str,
            'discovery_uri': str,
            'friendly_name': str,
            'key_vault_id': str,
            'provisioning_state': str,
            'seats': str,
            'storage_account': StorageAccountProperties,
            'vso_account_id': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'creation_date': 'creationDate',
            'description': 'description',
            'discovery_uri': 'discoveryUri',
            'friendly_name': 'friendlyName',
            'key_vault_id': 'keyVaultId',
            'provisioning_state': 'provisioningState',
            'seats': 'seats',
            'storage_account': 'storageAccount',
            'vso_account_id': 'vsoAccountId'
        }

        self._account_id = account_id
        self._creation_date = creation_date
        self._description = description
        self._discovery_uri = discovery_uri
        self._friendly_name = friendly_name
        self._key_vault_id = key_vault_id
        self._provisioning_state = provisioning_state
        self._seats = seats
        self._storage_account = storage_account
        self._vso_account_id = vso_account_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountProperties of this AccountProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this AccountProperties.

        The immutable id associated with this team account.

        :return: The account_id of this AccountProperties.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountProperties.

        The immutable id associated with this team account.

        :param account_id: The account_id of this AccountProperties.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def creation_date(self):
        """Gets the creation_date of this AccountProperties.

        The creation date of the machine learning team account in ISO8601 format.

        :return: The creation_date of this AccountProperties.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this AccountProperties.

        The creation date of the machine learning team account in ISO8601 format.

        :param creation_date: The creation_date of this AccountProperties.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def description(self):
        """Gets the description of this AccountProperties.

        The description of this workspace.

        :return: The description of this AccountProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccountProperties.

        The description of this workspace.

        :param description: The description of this AccountProperties.
        :type description: str
        """

        self._description = description

    @property
    def discovery_uri(self):
        """Gets the discovery_uri of this AccountProperties.

        The uri for this machine learning team account.

        :return: The discovery_uri of this AccountProperties.
        :rtype: str
        """
        return self._discovery_uri

    @discovery_uri.setter
    def discovery_uri(self, discovery_uri):
        """Sets the discovery_uri of this AccountProperties.

        The uri for this machine learning team account.

        :param discovery_uri: The discovery_uri of this AccountProperties.
        :type discovery_uri: str
        """

        self._discovery_uri = discovery_uri

    @property
    def friendly_name(self):
        """Gets the friendly_name of this AccountProperties.

        The friendly name for this workspace. This will be the workspace name in the arm id when the workspace object gets created

        :return: The friendly_name of this AccountProperties.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this AccountProperties.

        The friendly name for this workspace. This will be the workspace name in the arm id when the workspace object gets created

        :param friendly_name: The friendly_name of this AccountProperties.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def key_vault_id(self):
        """Gets the key_vault_id of this AccountProperties.

        The fully qualified arm id of the user key vault.

        :return: The key_vault_id of this AccountProperties.
        :rtype: str
        """
        return self._key_vault_id

    @key_vault_id.setter
    def key_vault_id(self, key_vault_id):
        """Sets the key_vault_id of this AccountProperties.

        The fully qualified arm id of the user key vault.

        :param key_vault_id: The key_vault_id of this AccountProperties.
        :type key_vault_id: str
        """
        if key_vault_id is None:
            raise ValueError("Invalid value for `key_vault_id`, must not be `None`")

        self._key_vault_id = key_vault_id

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this AccountProperties.

        The current deployment state of team account resource. The provisioningState is to indicate states for resource provisioning.

        :return: The provisioning_state of this AccountProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this AccountProperties.

        The current deployment state of team account resource. The provisioningState is to indicate states for resource provisioning.

        :param provisioning_state: The provisioning_state of this AccountProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Creating", "Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def seats(self):
        """Gets the seats of this AccountProperties.

        The no of users/seats who can access this team account. This property defines the charge on the team account.

        :return: The seats of this AccountProperties.
        :rtype: str
        """
        return self._seats

    @seats.setter
    def seats(self, seats):
        """Sets the seats of this AccountProperties.

        The no of users/seats who can access this team account. This property defines the charge on the team account.

        :param seats: The seats of this AccountProperties.
        :type seats: str
        """

        self._seats = seats

    @property
    def storage_account(self):
        """Gets the storage_account of this AccountProperties.


        :return: The storage_account of this AccountProperties.
        :rtype: StorageAccountProperties
        """
        return self._storage_account

    @storage_account.setter
    def storage_account(self, storage_account):
        """Sets the storage_account of this AccountProperties.


        :param storage_account: The storage_account of this AccountProperties.
        :type storage_account: StorageAccountProperties
        """
        if storage_account is None:
            raise ValueError("Invalid value for `storage_account`, must not be `None`")

        self._storage_account = storage_account

    @property
    def vso_account_id(self):
        """Gets the vso_account_id of this AccountProperties.

        The fully qualified arm id of the vso account to be used for this team account.

        :return: The vso_account_id of this AccountProperties.
        :rtype: str
        """
        return self._vso_account_id

    @vso_account_id.setter
    def vso_account_id(self, vso_account_id):
        """Sets the vso_account_id of this AccountProperties.

        The fully qualified arm id of the vso account to be used for this team account.

        :param vso_account_id: The vso_account_id of this AccountProperties.
        :type vso_account_id: str
        """
        if vso_account_id is None:
            raise ValueError("Invalid value for `vso_account_id`, must not be `None`")

        self._vso_account_id = vso_account_id
