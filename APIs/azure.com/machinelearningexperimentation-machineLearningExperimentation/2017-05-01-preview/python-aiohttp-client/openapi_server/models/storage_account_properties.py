# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StorageAccountProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_key: str=None, storage_account_id: str=None):
        """StorageAccountProperties - a model defined in OpenAPI

        :param access_key: The access_key of this StorageAccountProperties.
        :param storage_account_id: The storage_account_id of this StorageAccountProperties.
        """
        self.openapi_types = {
            'access_key': str,
            'storage_account_id': str
        }

        self.attribute_map = {
            'access_key': 'accessKey',
            'storage_account_id': 'storageAccountId'
        }

        self._access_key = access_key
        self._storage_account_id = storage_account_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorageAccountProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorageAccountProperties of this StorageAccountProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_key(self):
        """Gets the access_key of this StorageAccountProperties.

        The access key to the storage account.

        :return: The access_key of this StorageAccountProperties.
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this StorageAccountProperties.

        The access key to the storage account.

        :param access_key: The access_key of this StorageAccountProperties.
        :type access_key: str
        """
        if access_key is None:
            raise ValueError("Invalid value for `access_key`, must not be `None`")

        self._access_key = access_key

    @property
    def storage_account_id(self):
        """Gets the storage_account_id of this StorageAccountProperties.

        The fully qualified arm Id of the storage account.

        :return: The storage_account_id of this StorageAccountProperties.
        :rtype: str
        """
        return self._storage_account_id

    @storage_account_id.setter
    def storage_account_id(self, storage_account_id):
        """Sets the storage_account_id of this StorageAccountProperties.

        The fully qualified arm Id of the storage account.

        :param storage_account_id: The storage_account_id of this StorageAccountProperties.
        :type storage_account_id: str
        """
        if storage_account_id is None:
            raise ValueError("Invalid value for `storage_account_id`, must not be `None`")

        self._storage_account_id = storage_account_id
