# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, creation_date: datetime=None, description: str=None, friendly_name: str=None, gitrepo: str=None, project_id: str=None, provisioning_state: str=None, workspace_id: str=None):
        """ProjectProperties - a model defined in OpenAPI

        :param account_id: The account_id of this ProjectProperties.
        :param creation_date: The creation_date of this ProjectProperties.
        :param description: The description of this ProjectProperties.
        :param friendly_name: The friendly_name of this ProjectProperties.
        :param gitrepo: The gitrepo of this ProjectProperties.
        :param project_id: The project_id of this ProjectProperties.
        :param provisioning_state: The provisioning_state of this ProjectProperties.
        :param workspace_id: The workspace_id of this ProjectProperties.
        """
        self.openapi_types = {
            'account_id': str,
            'creation_date': datetime,
            'description': str,
            'friendly_name': str,
            'gitrepo': str,
            'project_id': str,
            'provisioning_state': str,
            'workspace_id': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'creation_date': 'creationDate',
            'description': 'description',
            'friendly_name': 'friendlyName',
            'gitrepo': 'gitrepo',
            'project_id': 'projectId',
            'provisioning_state': 'provisioningState',
            'workspace_id': 'workspaceId'
        }

        self._account_id = account_id
        self._creation_date = creation_date
        self._description = description
        self._friendly_name = friendly_name
        self._gitrepo = gitrepo
        self._project_id = project_id
        self._provisioning_state = provisioning_state
        self._workspace_id = workspace_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectProperties of this ProjectProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this ProjectProperties.

        The immutable id of the team account which contains this project.

        :return: The account_id of this ProjectProperties.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ProjectProperties.

        The immutable id of the team account which contains this project.

        :param account_id: The account_id of this ProjectProperties.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def creation_date(self):
        """Gets the creation_date of this ProjectProperties.

        The creation date of the project in ISO8601 format.

        :return: The creation_date of this ProjectProperties.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this ProjectProperties.

        The creation date of the project in ISO8601 format.

        :param creation_date: The creation_date of this ProjectProperties.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def description(self):
        """Gets the description of this ProjectProperties.

        The description of this project.

        :return: The description of this ProjectProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProjectProperties.

        The description of this project.

        :param description: The description of this ProjectProperties.
        :type description: str
        """

        self._description = description

    @property
    def friendly_name(self):
        """Gets the friendly_name of this ProjectProperties.

        The friendly name for this project.

        :return: The friendly_name of this ProjectProperties.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name):
        """Sets the friendly_name of this ProjectProperties.

        The friendly name for this project.

        :param friendly_name: The friendly_name of this ProjectProperties.
        :type friendly_name: str
        """
        if friendly_name is None:
            raise ValueError("Invalid value for `friendly_name`, must not be `None`")

        self._friendly_name = friendly_name

    @property
    def gitrepo(self):
        """Gets the gitrepo of this ProjectProperties.

        The reference to git repo for this project.

        :return: The gitrepo of this ProjectProperties.
        :rtype: str
        """
        return self._gitrepo

    @gitrepo.setter
    def gitrepo(self, gitrepo):
        """Sets the gitrepo of this ProjectProperties.

        The reference to git repo for this project.

        :param gitrepo: The gitrepo of this ProjectProperties.
        :type gitrepo: str
        """

        self._gitrepo = gitrepo

    @property
    def project_id(self):
        """Gets the project_id of this ProjectProperties.

        The immutable id of this project.

        :return: The project_id of this ProjectProperties.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ProjectProperties.

        The immutable id of this project.

        :param project_id: The project_id of this ProjectProperties.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ProjectProperties.

        The current deployment state of project resource. The provisioningState is to indicate states for resource provisioning.

        :return: The provisioning_state of this ProjectProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ProjectProperties.

        The current deployment state of project resource. The provisioningState is to indicate states for resource provisioning.

        :param provisioning_state: The provisioning_state of this ProjectProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Creating", "Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def workspace_id(self):
        """Gets the workspace_id of this ProjectProperties.

        The immutable id of the workspace which contains this project.

        :return: The workspace_id of this ProjectProperties.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this ProjectProperties.

        The immutable id of the workspace which contains this project.

        :param workspace_id: The workspace_id of this ProjectProperties.
        :type workspace_id: str
        """

        self._workspace_id = workspace_id
