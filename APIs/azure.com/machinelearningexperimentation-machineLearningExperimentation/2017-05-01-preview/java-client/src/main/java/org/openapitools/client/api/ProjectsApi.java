/*
 * ML Team Account Management Client
 * These APIs allow end users to operate on Azure Machine Learning Team Account resources. They support CRUD operations for Azure Machine Learning Team Accounts.
 *
 * The version of the OpenAPI document: 2017-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectListResult;
import org.openapitools.client.model.ProjectUpdateParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for projectsCreateOrUpdate
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the machine learning team account belongs. (required)
     * @param accountName The name of the machine learning team account. (required)
     * @param workspaceName The name of the machine learning team account workspace. (required)
     * @param projectName The name of the machine learning project under a team account workspace. (required)
     * @param parameters The parameters for creating or updating a project. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the resource already exists and was updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsCreateOrUpdateCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String workspaceName, String projectName, Project parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}/projects/{projectName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsCreateOrUpdateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String workspaceName, String projectName, Project parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling projectsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling projectsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling projectsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling projectsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling projectsCreateOrUpdate(Async)");
        }

        return projectsCreateOrUpdateCall(apiVersion, subscriptionId, resourceGroupName, accountName, workspaceName, projectName, parameters, _callback);

    }

    /**
     * 
     * Creates or updates a project with the specified parameters.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the machine learning team account belongs. (required)
     * @param accountName The name of the machine learning team account. (required)
     * @param workspaceName The name of the machine learning team account workspace. (required)
     * @param projectName The name of the machine learning project under a team account workspace. (required)
     * @param parameters The parameters for creating or updating a project. (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the resource already exists and was updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public Project projectsCreateOrUpdate(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String workspaceName, String projectName, Project parameters) throws ApiException {
        ApiResponse<Project> localVarResp = projectsCreateOrUpdateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, accountName, workspaceName, projectName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a project with the specified parameters.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the machine learning team account belongs. (required)
     * @param accountName The name of the machine learning team account. (required)
     * @param workspaceName The name of the machine learning team account workspace. (required)
     * @param projectName The name of the machine learning project under a team account workspace. (required)
     * @param parameters The parameters for creating or updating a project. (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the resource already exists and was updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> projectsCreateOrUpdateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String workspaceName, String projectName, Project parameters) throws ApiException {
        okhttp3.Call localVarCall = projectsCreateOrUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, workspaceName, projectName, parameters, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a project with the specified parameters.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the machine learning team account belongs. (required)
     * @param accountName The name of the machine learning team account. (required)
     * @param workspaceName The name of the machine learning team account workspace. (required)
     * @param projectName The name of the machine learning project under a team account workspace. (required)
     * @param parameters The parameters for creating or updating a project. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the resource already exists and was updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsCreateOrUpdateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String workspaceName, String projectName, Project parameters, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsCreateOrUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, workspaceName, projectName, parameters, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsDelete
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the machine learning team account belongs. (required)
     * @param accountName The name of the machine learning team account. (required)
     * @param workspaceName The name of the machine learning team account workspace. (required)
     * @param projectName The name of the machine learning project under a team account workspace. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The machine learning team account does not exist in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsDeleteCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String workspaceName, String projectName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}/projects/{projectName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsDeleteValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String workspaceName, String projectName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling projectsDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling projectsDelete(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling projectsDelete(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling projectsDelete(Async)");
        }

        return projectsDeleteCall(apiVersion, subscriptionId, resourceGroupName, accountName, workspaceName, projectName, _callback);

    }

    /**
     * 
     * Deletes a project.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the machine learning team account belongs. (required)
     * @param accountName The name of the machine learning team account. (required)
     * @param workspaceName The name of the machine learning team account workspace. (required)
     * @param projectName The name of the machine learning project under a team account workspace. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The machine learning team account does not exist in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public void projectsDelete(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String workspaceName, String projectName) throws ApiException {
        projectsDeleteWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, accountName, workspaceName, projectName);
    }

    /**
     * 
     * Deletes a project.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the machine learning team account belongs. (required)
     * @param accountName The name of the machine learning team account. (required)
     * @param workspaceName The name of the machine learning team account workspace. (required)
     * @param projectName The name of the machine learning project under a team account workspace. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The machine learning team account does not exist in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectsDeleteWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String workspaceName, String projectName) throws ApiException {
        okhttp3.Call localVarCall = projectsDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, workspaceName, projectName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a project.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the machine learning team account belongs. (required)
     * @param accountName The name of the machine learning team account. (required)
     * @param workspaceName The name of the machine learning team account workspace. (required)
     * @param projectName The name of the machine learning project under a team account workspace. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The machine learning team account does not exist in the subscription. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsDeleteAsync(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String workspaceName, String projectName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, workspaceName, projectName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsGet
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the machine learning team account belongs. (required)
     * @param accountName The name of the machine learning team account. (required)
     * @param workspaceName The name of the machine learning team account workspace. (required)
     * @param projectName The name of the machine learning project under a team account workspace. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsGetCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String workspaceName, String projectName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}/projects/{projectName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsGetValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String workspaceName, String projectName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling projectsGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling projectsGet(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling projectsGet(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling projectsGet(Async)");
        }

        return projectsGetCall(apiVersion, subscriptionId, resourceGroupName, accountName, workspaceName, projectName, _callback);

    }

    /**
     * 
     * Gets the properties of the specified machine learning project.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the machine learning team account belongs. (required)
     * @param accountName The name of the machine learning team account. (required)
     * @param workspaceName The name of the machine learning team account workspace. (required)
     * @param projectName The name of the machine learning project under a team account workspace. (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public Project projectsGet(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String workspaceName, String projectName) throws ApiException {
        ApiResponse<Project> localVarResp = projectsGetWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, accountName, workspaceName, projectName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the properties of the specified machine learning project.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the machine learning team account belongs. (required)
     * @param accountName The name of the machine learning team account. (required)
     * @param workspaceName The name of the machine learning team account workspace. (required)
     * @param projectName The name of the machine learning project under a team account workspace. (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> projectsGetWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String workspaceName, String projectName) throws ApiException {
        okhttp3.Call localVarCall = projectsGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, workspaceName, projectName, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the properties of the specified machine learning project.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the machine learning team account belongs. (required)
     * @param accountName The name of the machine learning team account. (required)
     * @param workspaceName The name of the machine learning team account workspace. (required)
     * @param projectName The name of the machine learning project under a team account workspace. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsGetAsync(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String workspaceName, String projectName, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, workspaceName, projectName, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsListByWorkspace
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param accountName The name of the machine learning team account. (required)
     * @param workspaceName The name of the machine learning team account workspace. (required)
     * @param resourceGroupName The name of the resource group to which the machine learning team account belongs. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsListByWorkspaceCall(String apiVersion, String subscriptionId, String accountName, String workspaceName, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces{workspaceName}/projects"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsListByWorkspaceValidateBeforeCall(String apiVersion, String subscriptionId, String accountName, String workspaceName, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsListByWorkspace(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsListByWorkspace(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling projectsListByWorkspace(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling projectsListByWorkspace(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling projectsListByWorkspace(Async)");
        }

        return projectsListByWorkspaceCall(apiVersion, subscriptionId, accountName, workspaceName, resourceGroupName, _callback);

    }

    /**
     * 
     * Lists all the available machine learning projects under the specified workspace.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param accountName The name of the machine learning team account. (required)
     * @param workspaceName The name of the machine learning team account workspace. (required)
     * @param resourceGroupName The name of the resource group to which the machine learning team account belongs. (required)
     * @return ProjectListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ProjectListResult projectsListByWorkspace(String apiVersion, String subscriptionId, String accountName, String workspaceName, String resourceGroupName) throws ApiException {
        ApiResponse<ProjectListResult> localVarResp = projectsListByWorkspaceWithHttpInfo(apiVersion, subscriptionId, accountName, workspaceName, resourceGroupName);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the available machine learning projects under the specified workspace.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param accountName The name of the machine learning team account. (required)
     * @param workspaceName The name of the machine learning team account workspace. (required)
     * @param resourceGroupName The name of the resource group to which the machine learning team account belongs. (required)
     * @return ApiResponse&lt;ProjectListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectListResult> projectsListByWorkspaceWithHttpInfo(String apiVersion, String subscriptionId, String accountName, String workspaceName, String resourceGroupName) throws ApiException {
        okhttp3.Call localVarCall = projectsListByWorkspaceValidateBeforeCall(apiVersion, subscriptionId, accountName, workspaceName, resourceGroupName, null);
        Type localVarReturnType = new TypeToken<ProjectListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the available machine learning projects under the specified workspace.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param accountName The name of the machine learning team account. (required)
     * @param workspaceName The name of the machine learning team account workspace. (required)
     * @param resourceGroupName The name of the resource group to which the machine learning team account belongs. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsListByWorkspaceAsync(String apiVersion, String subscriptionId, String accountName, String workspaceName, String resourceGroupName, final ApiCallback<ProjectListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsListByWorkspaceValidateBeforeCall(apiVersion, subscriptionId, accountName, workspaceName, resourceGroupName, _callback);
        Type localVarReturnType = new TypeToken<ProjectListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsUpdate
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the machine learning team account belongs. (required)
     * @param accountName The name of the machine learning team account. (required)
     * @param workspaceName The name of the machine learning team account workspace. (required)
     * @param projectName The name of the machine learning project under a team account workspace. (required)
     * @param parameters The parameters for updating a machine learning team account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsUpdateCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String workspaceName, String projectName, ProjectUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningExperimentation/accounts/{accountName}/workspaces/{workspaceName}/projects/{projectName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "workspaceName" + "}", localVarApiClient.escapeString(workspaceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsUpdateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String workspaceName, String projectName, ProjectUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling projectsUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling projectsUpdate(Async)");
        }

        // verify the required parameter 'workspaceName' is set
        if (workspaceName == null) {
            throw new ApiException("Missing the required parameter 'workspaceName' when calling projectsUpdate(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling projectsUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling projectsUpdate(Async)");
        }

        return projectsUpdateCall(apiVersion, subscriptionId, resourceGroupName, accountName, workspaceName, projectName, parameters, _callback);

    }

    /**
     * 
     * Updates a project with the specified parameters.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the machine learning team account belongs. (required)
     * @param accountName The name of the machine learning team account. (required)
     * @param workspaceName The name of the machine learning team account workspace. (required)
     * @param projectName The name of the machine learning project under a team account workspace. (required)
     * @param parameters The parameters for updating a machine learning team account. (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public Project projectsUpdate(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String workspaceName, String projectName, ProjectUpdateParameters parameters) throws ApiException {
        ApiResponse<Project> localVarResp = projectsUpdateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, accountName, workspaceName, projectName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a project with the specified parameters.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the machine learning team account belongs. (required)
     * @param accountName The name of the machine learning team account. (required)
     * @param workspaceName The name of the machine learning team account workspace. (required)
     * @param projectName The name of the machine learning project under a team account workspace. (required)
     * @param parameters The parameters for updating a machine learning team account. (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> projectsUpdateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String workspaceName, String projectName, ProjectUpdateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = projectsUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, workspaceName, projectName, parameters, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a project with the specified parameters.
     * @param apiVersion The client API version. (required)
     * @param subscriptionId The Microsoft Azure subscription ID. (required)
     * @param resourceGroupName The name of the resource group to which the machine learning team account belongs. (required)
     * @param accountName The name of the machine learning team account. (required)
     * @param workspaceName The name of the machine learning team account workspace. (required)
     * @param projectName The name of the machine learning project under a team account workspace. (required)
     * @param parameters The parameters for updating a machine learning team account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful; the request was well-formed and received properly. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsUpdateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, String workspaceName, String projectName, ProjectUpdateParameters parameters, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, workspaceName, projectName, parameters, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
