/*
 * ML Team Account Management Client
 * These APIs allow end users to operate on Azure Machine Learning Team Account resources. They support CRUD operations for Azure Machine Learning Team Accounts.
 *
 * The version of the OpenAPI document: 2017-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The parameters for updating the properties of a machine learning team account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:01:07.184502-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountPropertiesUpdateParameters {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_SEATS = "seats";
  @SerializedName(SERIALIZED_NAME_SEATS)
  private String seats;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT_KEY = "storageAccountKey";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT_KEY)
  private String storageAccountKey;

  public AccountPropertiesUpdateParameters() {
  }

  public AccountPropertiesUpdateParameters description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of this workspace.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AccountPropertiesUpdateParameters friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * The friendly name for this workspace. This will be the workspace name in the arm id when the workspace object gets created
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public AccountPropertiesUpdateParameters seats(String seats) {
    this.seats = seats;
    return this;
  }

  /**
   * The no of users/seats who can access this team account. This property defines the charge on the team account.
   * @return seats
   */
  @javax.annotation.Nullable
  public String getSeats() {
    return seats;
  }

  public void setSeats(String seats) {
    this.seats = seats;
  }


  public AccountPropertiesUpdateParameters storageAccountKey(String storageAccountKey) {
    this.storageAccountKey = storageAccountKey;
    return this;
  }

  /**
   * The key for storage account associated with this team account
   * @return storageAccountKey
   */
  @javax.annotation.Nullable
  public String getStorageAccountKey() {
    return storageAccountKey;
  }

  public void setStorageAccountKey(String storageAccountKey) {
    this.storageAccountKey = storageAccountKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountPropertiesUpdateParameters accountPropertiesUpdateParameters = (AccountPropertiesUpdateParameters) o;
    return Objects.equals(this.description, accountPropertiesUpdateParameters.description) &&
        Objects.equals(this.friendlyName, accountPropertiesUpdateParameters.friendlyName) &&
        Objects.equals(this.seats, accountPropertiesUpdateParameters.seats) &&
        Objects.equals(this.storageAccountKey, accountPropertiesUpdateParameters.storageAccountKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, friendlyName, seats, storageAccountKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountPropertiesUpdateParameters {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    seats: ").append(toIndentedString(seats)).append("\n");
    sb.append("    storageAccountKey: ").append(toIndentedString(storageAccountKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("friendlyName");
    openapiFields.add("seats");
    openapiFields.add("storageAccountKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountPropertiesUpdateParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountPropertiesUpdateParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountPropertiesUpdateParameters is not found in the empty JSON string", AccountPropertiesUpdateParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountPropertiesUpdateParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountPropertiesUpdateParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      if ((jsonObj.get("seats") != null && !jsonObj.get("seats").isJsonNull()) && !jsonObj.get("seats").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seats` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seats").toString()));
      }
      if ((jsonObj.get("storageAccountKey") != null && !jsonObj.get("storageAccountKey").isJsonNull()) && !jsonObj.get("storageAccountKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAccountKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageAccountKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountPropertiesUpdateParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountPropertiesUpdateParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountPropertiesUpdateParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountPropertiesUpdateParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountPropertiesUpdateParameters>() {
           @Override
           public void write(JsonWriter out, AccountPropertiesUpdateParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountPropertiesUpdateParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountPropertiesUpdateParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountPropertiesUpdateParameters
   * @throws IOException if the JSON string is invalid with respect to AccountPropertiesUpdateParameters
   */
  public static AccountPropertiesUpdateParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountPropertiesUpdateParameters.class);
  }

  /**
   * Convert an instance of AccountPropertiesUpdateParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

