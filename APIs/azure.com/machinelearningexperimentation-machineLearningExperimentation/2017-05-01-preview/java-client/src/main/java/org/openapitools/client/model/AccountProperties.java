/*
 * ML Team Account Management Client
 * These APIs allow end users to operate on Azure Machine Learning Team Account resources. They support CRUD operations for Azure Machine Learning Team Accounts.
 *
 * The version of the OpenAPI document: 2017-05-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.StorageAccountProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of a machine learning team account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:01:07.184502-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountProperties {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creationDate";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISCOVERY_URI = "discoveryUri";
  @SerializedName(SERIALIZED_NAME_DISCOVERY_URI)
  private String discoveryUri;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendlyName";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_KEY_VAULT_ID = "keyVaultId";
  @SerializedName(SERIALIZED_NAME_KEY_VAULT_ID)
  private String keyVaultId;

  /**
   * The current deployment state of team account resource. The provisioningState is to indicate states for resource provisioning.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    CREATING("Creating"),
    
    SUCCEEDED("Succeeded"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    FAILED("Failed");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_SEATS = "seats";
  @SerializedName(SERIALIZED_NAME_SEATS)
  private String seats;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT = "storageAccount";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT)
  private StorageAccountProperties storageAccount;

  public static final String SERIALIZED_NAME_VSO_ACCOUNT_ID = "vsoAccountId";
  @SerializedName(SERIALIZED_NAME_VSO_ACCOUNT_ID)
  private String vsoAccountId;

  public AccountProperties() {
  }

  public AccountProperties(
     String accountId, 
     OffsetDateTime creationDate, 
     String discoveryUri, 
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.accountId = accountId;
    this.creationDate = creationDate;
    this.discoveryUri = discoveryUri;
    this.provisioningState = provisioningState;
  }

  /**
   * The immutable id associated with this team account.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }



  /**
   * The creation date of the machine learning team account in ISO8601 format.
   * @return creationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }



  public AccountProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of this workspace.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * The uri for this machine learning team account.
   * @return discoveryUri
   */
  @javax.annotation.Nullable
  public String getDiscoveryUri() {
    return discoveryUri;
  }



  public AccountProperties friendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
    return this;
  }

  /**
   * The friendly name for this workspace. This will be the workspace name in the arm id when the workspace object gets created
   * @return friendlyName
   */
  @javax.annotation.Nullable
  public String getFriendlyName() {
    return friendlyName;
  }

  public void setFriendlyName(String friendlyName) {
    this.friendlyName = friendlyName;
  }


  public AccountProperties keyVaultId(String keyVaultId) {
    this.keyVaultId = keyVaultId;
    return this;
  }

  /**
   * The fully qualified arm id of the user key vault.
   * @return keyVaultId
   */
  @javax.annotation.Nonnull
  public String getKeyVaultId() {
    return keyVaultId;
  }

  public void setKeyVaultId(String keyVaultId) {
    this.keyVaultId = keyVaultId;
  }


  /**
   * The current deployment state of team account resource. The provisioningState is to indicate states for resource provisioning.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public AccountProperties seats(String seats) {
    this.seats = seats;
    return this;
  }

  /**
   * The no of users/seats who can access this team account. This property defines the charge on the team account.
   * @return seats
   */
  @javax.annotation.Nullable
  public String getSeats() {
    return seats;
  }

  public void setSeats(String seats) {
    this.seats = seats;
  }


  public AccountProperties storageAccount(StorageAccountProperties storageAccount) {
    this.storageAccount = storageAccount;
    return this;
  }

  /**
   * Get storageAccount
   * @return storageAccount
   */
  @javax.annotation.Nonnull
  public StorageAccountProperties getStorageAccount() {
    return storageAccount;
  }

  public void setStorageAccount(StorageAccountProperties storageAccount) {
    this.storageAccount = storageAccount;
  }


  public AccountProperties vsoAccountId(String vsoAccountId) {
    this.vsoAccountId = vsoAccountId;
    return this;
  }

  /**
   * The fully qualified arm id of the vso account to be used for this team account.
   * @return vsoAccountId
   */
  @javax.annotation.Nonnull
  public String getVsoAccountId() {
    return vsoAccountId;
  }

  public void setVsoAccountId(String vsoAccountId) {
    this.vsoAccountId = vsoAccountId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountProperties accountProperties = (AccountProperties) o;
    return Objects.equals(this.accountId, accountProperties.accountId) &&
        Objects.equals(this.creationDate, accountProperties.creationDate) &&
        Objects.equals(this.description, accountProperties.description) &&
        Objects.equals(this.discoveryUri, accountProperties.discoveryUri) &&
        Objects.equals(this.friendlyName, accountProperties.friendlyName) &&
        Objects.equals(this.keyVaultId, accountProperties.keyVaultId) &&
        Objects.equals(this.provisioningState, accountProperties.provisioningState) &&
        Objects.equals(this.seats, accountProperties.seats) &&
        Objects.equals(this.storageAccount, accountProperties.storageAccount) &&
        Objects.equals(this.vsoAccountId, accountProperties.vsoAccountId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, creationDate, description, discoveryUri, friendlyName, keyVaultId, provisioningState, seats, storageAccount, vsoAccountId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountProperties {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    discoveryUri: ").append(toIndentedString(discoveryUri)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    keyVaultId: ").append(toIndentedString(keyVaultId)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    seats: ").append(toIndentedString(seats)).append("\n");
    sb.append("    storageAccount: ").append(toIndentedString(storageAccount)).append("\n");
    sb.append("    vsoAccountId: ").append(toIndentedString(vsoAccountId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("creationDate");
    openapiFields.add("description");
    openapiFields.add("discoveryUri");
    openapiFields.add("friendlyName");
    openapiFields.add("keyVaultId");
    openapiFields.add("provisioningState");
    openapiFields.add("seats");
    openapiFields.add("storageAccount");
    openapiFields.add("vsoAccountId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("keyVaultId");
    openapiRequiredFields.add("storageAccount");
    openapiRequiredFields.add("vsoAccountId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountProperties is not found in the empty JSON string", AccountProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccountProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("discoveryUri") != null && !jsonObj.get("discoveryUri").isJsonNull()) && !jsonObj.get("discoveryUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discoveryUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discoveryUri").toString()));
      }
      if ((jsonObj.get("friendlyName") != null && !jsonObj.get("friendlyName").isJsonNull()) && !jsonObj.get("friendlyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendlyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendlyName").toString()));
      }
      if (!jsonObj.get("keyVaultId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyVaultId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyVaultId").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("seats") != null && !jsonObj.get("seats").isJsonNull()) && !jsonObj.get("seats").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seats` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seats").toString()));
      }
      // validate the required field `storageAccount`
      StorageAccountProperties.validateJsonElement(jsonObj.get("storageAccount"));
      if (!jsonObj.get("vsoAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vsoAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vsoAccountId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountProperties>() {
           @Override
           public void write(JsonWriter out, AccountProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountProperties
   * @throws IOException if the JSON string is invalid with respect to AccountProperties
   */
  public static AccountProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountProperties.class);
  }

  /**
   * Convert an instance of AccountProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

