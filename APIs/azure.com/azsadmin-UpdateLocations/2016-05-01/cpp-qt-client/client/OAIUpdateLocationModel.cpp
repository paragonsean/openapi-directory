/**
 * UpdateAdminClient
 * Update location operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2016-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateLocationModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateLocationModel::OAIUpdateLocationModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateLocationModel::OAIUpdateLocationModel() {
    this->initializeModel();
}

OAIUpdateLocationModel::~OAIUpdateLocationModel() {}

void OAIUpdateLocationModel::initializeModel() {

    m_current_oem_version_isSet = false;
    m_current_oem_version_isValid = false;

    m_current_version_isSet = false;
    m_current_version_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIUpdateLocationModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateLocationModel::fromJsonObject(QJsonObject json) {

    m_current_oem_version_isValid = ::OpenAPI::fromJsonValue(m_current_oem_version, json[QString("currentOemVersion")]);
    m_current_oem_version_isSet = !json[QString("currentOemVersion")].isNull() && m_current_oem_version_isValid;

    m_current_version_isValid = ::OpenAPI::fromJsonValue(m_current_version, json[QString("currentVersion")]);
    m_current_version_isSet = !json[QString("currentVersion")].isNull() && m_current_version_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIUpdateLocationModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateLocationModel::asJsonObject() const {
    QJsonObject obj;
    if (m_current_oem_version_isSet) {
        obj.insert(QString("currentOemVersion"), ::OpenAPI::toJsonValue(m_current_oem_version));
    }
    if (m_current_version_isSet) {
        obj.insert(QString("currentVersion"), ::OpenAPI::toJsonValue(m_current_version));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIUpdateLocationModel::getCurrentOemVersion() const {
    return m_current_oem_version;
}
void OAIUpdateLocationModel::setCurrentOemVersion(const QString &current_oem_version) {
    m_current_oem_version = current_oem_version;
    m_current_oem_version_isSet = true;
}

bool OAIUpdateLocationModel::is_current_oem_version_Set() const{
    return m_current_oem_version_isSet;
}

bool OAIUpdateLocationModel::is_current_oem_version_Valid() const{
    return m_current_oem_version_isValid;
}

QString OAIUpdateLocationModel::getCurrentVersion() const {
    return m_current_version;
}
void OAIUpdateLocationModel::setCurrentVersion(const QString &current_version) {
    m_current_version = current_version;
    m_current_version_isSet = true;
}

bool OAIUpdateLocationModel::is_current_version_Set() const{
    return m_current_version_isSet;
}

bool OAIUpdateLocationModel::is_current_version_Valid() const{
    return m_current_version_isValid;
}

QDateTime OAIUpdateLocationModel::getLastUpdated() const {
    return m_last_updated;
}
void OAIUpdateLocationModel::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIUpdateLocationModel::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIUpdateLocationModel::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

OAIRegionUpdateState OAIUpdateLocationModel::getState() const {
    return m_state;
}
void OAIUpdateLocationModel::setState(const OAIRegionUpdateState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIUpdateLocationModel::is_state_Set() const{
    return m_state_isSet;
}

bool OAIUpdateLocationModel::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIUpdateLocationModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_oem_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateLocationModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
