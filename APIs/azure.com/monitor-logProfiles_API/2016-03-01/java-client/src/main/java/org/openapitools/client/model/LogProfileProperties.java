/*
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RetentionPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The log profile properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:48:25.318194-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LogProfileProperties {
  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<String> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<String> locations = new ArrayList<>();

  public static final String SERIALIZED_NAME_RETENTION_POLICY = "retentionPolicy";
  @SerializedName(SERIALIZED_NAME_RETENTION_POLICY)
  private RetentionPolicy retentionPolicy;

  public static final String SERIALIZED_NAME_SERVICE_BUS_RULE_ID = "serviceBusRuleId";
  @SerializedName(SERIALIZED_NAME_SERVICE_BUS_RULE_ID)
  private String serviceBusRuleId;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT_ID = "storageAccountId";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT_ID)
  private String storageAccountId;

  public LogProfileProperties() {
  }

  public LogProfileProperties categories(List<String> categories) {
    this.categories = categories;
    return this;
  }

  public LogProfileProperties addCategoriesItem(String categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * the categories of the logs. These categories are created as is convenient to the user. Some values are: &#39;Write&#39;, &#39;Delete&#39;, and/or &#39;Action.&#39;
   * @return categories
   */
  @javax.annotation.Nonnull
  public List<String> getCategories() {
    return categories;
  }

  public void setCategories(List<String> categories) {
    this.categories = categories;
  }


  public LogProfileProperties locations(List<String> locations) {
    this.locations = locations;
    return this;
  }

  public LogProfileProperties addLocationsItem(String locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * List of regions for which Activity Log events should be stored or streamed. It is a comma separated list of valid ARM locations including the &#39;global&#39; location.
   * @return locations
   */
  @javax.annotation.Nonnull
  public List<String> getLocations() {
    return locations;
  }

  public void setLocations(List<String> locations) {
    this.locations = locations;
  }


  public LogProfileProperties retentionPolicy(RetentionPolicy retentionPolicy) {
    this.retentionPolicy = retentionPolicy;
    return this;
  }

  /**
   * Get retentionPolicy
   * @return retentionPolicy
   */
  @javax.annotation.Nonnull
  public RetentionPolicy getRetentionPolicy() {
    return retentionPolicy;
  }

  public void setRetentionPolicy(RetentionPolicy retentionPolicy) {
    this.retentionPolicy = retentionPolicy;
  }


  public LogProfileProperties serviceBusRuleId(String serviceBusRuleId) {
    this.serviceBusRuleId = serviceBusRuleId;
    return this;
  }

  /**
   * The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: &#39;{service bus resource ID}/authorizationrules/{key name}&#39;.
   * @return serviceBusRuleId
   */
  @javax.annotation.Nullable
  public String getServiceBusRuleId() {
    return serviceBusRuleId;
  }

  public void setServiceBusRuleId(String serviceBusRuleId) {
    this.serviceBusRuleId = serviceBusRuleId;
  }


  public LogProfileProperties storageAccountId(String storageAccountId) {
    this.storageAccountId = storageAccountId;
    return this;
  }

  /**
   * the resource id of the storage account to which you would like to send the Activity Log.
   * @return storageAccountId
   */
  @javax.annotation.Nullable
  public String getStorageAccountId() {
    return storageAccountId;
  }

  public void setStorageAccountId(String storageAccountId) {
    this.storageAccountId = storageAccountId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogProfileProperties logProfileProperties = (LogProfileProperties) o;
    return Objects.equals(this.categories, logProfileProperties.categories) &&
        Objects.equals(this.locations, logProfileProperties.locations) &&
        Objects.equals(this.retentionPolicy, logProfileProperties.retentionPolicy) &&
        Objects.equals(this.serviceBusRuleId, logProfileProperties.serviceBusRuleId) &&
        Objects.equals(this.storageAccountId, logProfileProperties.storageAccountId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categories, locations, retentionPolicy, serviceBusRuleId, storageAccountId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogProfileProperties {\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    retentionPolicy: ").append(toIndentedString(retentionPolicy)).append("\n");
    sb.append("    serviceBusRuleId: ").append(toIndentedString(serviceBusRuleId)).append("\n");
    sb.append("    storageAccountId: ").append(toIndentedString(storageAccountId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categories");
    openapiFields.add("locations");
    openapiFields.add("retentionPolicy");
    openapiFields.add("serviceBusRuleId");
    openapiFields.add("storageAccountId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("categories");
    openapiRequiredFields.add("locations");
    openapiRequiredFields.add("retentionPolicy");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LogProfileProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LogProfileProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LogProfileProperties is not found in the empty JSON string", LogProfileProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LogProfileProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LogProfileProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LogProfileProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("categories") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("categories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("locations") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("locations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
      }
      // validate the required field `retentionPolicy`
      RetentionPolicy.validateJsonElement(jsonObj.get("retentionPolicy"));
      if ((jsonObj.get("serviceBusRuleId") != null && !jsonObj.get("serviceBusRuleId").isJsonNull()) && !jsonObj.get("serviceBusRuleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceBusRuleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceBusRuleId").toString()));
      }
      if ((jsonObj.get("storageAccountId") != null && !jsonObj.get("storageAccountId").isJsonNull()) && !jsonObj.get("storageAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageAccountId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LogProfileProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LogProfileProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LogProfileProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LogProfileProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<LogProfileProperties>() {
           @Override
           public void write(JsonWriter out, LogProfileProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LogProfileProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LogProfileProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LogProfileProperties
   * @throws IOException if the JSON string is invalid with respect to LogProfileProperties
   */
  public static LogProfileProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LogProfileProperties.class);
  }

  /**
   * Convert an instance of LogProfileProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

