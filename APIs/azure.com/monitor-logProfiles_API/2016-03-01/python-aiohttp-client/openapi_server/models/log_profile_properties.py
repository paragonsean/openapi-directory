# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.retention_policy import RetentionPolicy
from openapi_server import util


class LogProfileProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories: List[str]=None, locations: List[str]=None, retention_policy: RetentionPolicy=None, service_bus_rule_id: str=None, storage_account_id: str=None):
        """LogProfileProperties - a model defined in OpenAPI

        :param categories: The categories of this LogProfileProperties.
        :param locations: The locations of this LogProfileProperties.
        :param retention_policy: The retention_policy of this LogProfileProperties.
        :param service_bus_rule_id: The service_bus_rule_id of this LogProfileProperties.
        :param storage_account_id: The storage_account_id of this LogProfileProperties.
        """
        self.openapi_types = {
            'categories': List[str],
            'locations': List[str],
            'retention_policy': RetentionPolicy,
            'service_bus_rule_id': str,
            'storage_account_id': str
        }

        self.attribute_map = {
            'categories': 'categories',
            'locations': 'locations',
            'retention_policy': 'retentionPolicy',
            'service_bus_rule_id': 'serviceBusRuleId',
            'storage_account_id': 'storageAccountId'
        }

        self._categories = categories
        self._locations = locations
        self._retention_policy = retention_policy
        self._service_bus_rule_id = service_bus_rule_id
        self._storage_account_id = storage_account_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogProfileProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogProfileProperties of this LogProfileProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self):
        """Gets the categories of this LogProfileProperties.

        the categories of the logs. These categories are created as is convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'

        :return: The categories of this LogProfileProperties.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this LogProfileProperties.

        the categories of the logs. These categories are created as is convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'

        :param categories: The categories of this LogProfileProperties.
        :type categories: List[str]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")

        self._categories = categories

    @property
    def locations(self):
        """Gets the locations of this LogProfileProperties.

        List of regions for which Activity Log events should be stored or streamed. It is a comma separated list of valid ARM locations including the 'global' location.

        :return: The locations of this LogProfileProperties.
        :rtype: List[str]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this LogProfileProperties.

        List of regions for which Activity Log events should be stored or streamed. It is a comma separated list of valid ARM locations including the 'global' location.

        :param locations: The locations of this LogProfileProperties.
        :type locations: List[str]
        """
        if locations is None:
            raise ValueError("Invalid value for `locations`, must not be `None`")

        self._locations = locations

    @property
    def retention_policy(self):
        """Gets the retention_policy of this LogProfileProperties.


        :return: The retention_policy of this LogProfileProperties.
        :rtype: RetentionPolicy
        """
        return self._retention_policy

    @retention_policy.setter
    def retention_policy(self, retention_policy):
        """Sets the retention_policy of this LogProfileProperties.


        :param retention_policy: The retention_policy of this LogProfileProperties.
        :type retention_policy: RetentionPolicy
        """
        if retention_policy is None:
            raise ValueError("Invalid value for `retention_policy`, must not be `None`")

        self._retention_policy = retention_policy

    @property
    def service_bus_rule_id(self):
        """Gets the service_bus_rule_id of this LogProfileProperties.

        The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'.

        :return: The service_bus_rule_id of this LogProfileProperties.
        :rtype: str
        """
        return self._service_bus_rule_id

    @service_bus_rule_id.setter
    def service_bus_rule_id(self, service_bus_rule_id):
        """Sets the service_bus_rule_id of this LogProfileProperties.

        The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'.

        :param service_bus_rule_id: The service_bus_rule_id of this LogProfileProperties.
        :type service_bus_rule_id: str
        """

        self._service_bus_rule_id = service_bus_rule_id

    @property
    def storage_account_id(self):
        """Gets the storage_account_id of this LogProfileProperties.

        the resource id of the storage account to which you would like to send the Activity Log.

        :return: The storage_account_id of this LogProfileProperties.
        :rtype: str
        """
        return self._storage_account_id

    @storage_account_id.setter
    def storage_account_id(self, storage_account_id):
        """Sets the storage_account_id of this LogProfileProperties.

        the resource id of the storage account to which you would like to send the Activity Log.

        :param storage_account_id: The storage_account_id of this LogProfileProperties.
        :type storage_account_id: str
        """

        self._storage_account_id = storage_account_id
