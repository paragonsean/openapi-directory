/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import LogProfileCollection from '../model/LogProfileCollection';
import LogProfileResource from '../model/LogProfileResource';

/**
* LogProfiles service.
* @module api/LogProfilesApi
* @version 2016-03-01
*/
export default class LogProfilesApi {

    /**
    * Constructs a new LogProfilesApi. 
    * @alias module:api/LogProfilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the logProfilesCreateOrUpdate operation.
     * @callback module:api/LogProfilesApi~logProfilesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogProfileResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a log profile in Azure Monitoring REST API.
     * @param {String} logProfileName The name of the log profile.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {module:model/LogProfileResource} parameters Parameters supplied to the operation.
     * @param {module:api/LogProfilesApi~logProfilesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogProfileResource}
     */
    logProfilesCreateOrUpdate(logProfileName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'logProfileName' is set
      if (logProfileName === undefined || logProfileName === null) {
        throw new Error("Missing the required parameter 'logProfileName' when calling logProfilesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling logProfilesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling logProfilesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling logProfilesCreateOrUpdate");
      }

      let pathParams = {
        'logProfileName': logProfileName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogProfileResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles/{logProfileName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logProfilesDelete operation.
     * @callback module:api/LogProfilesApi~logProfilesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the log profile.
     * @param {String} logProfileName The name of the log profile.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {module:api/LogProfilesApi~logProfilesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logProfilesDelete(logProfileName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'logProfileName' is set
      if (logProfileName === undefined || logProfileName === null) {
        throw new Error("Missing the required parameter 'logProfileName' when calling logProfilesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling logProfilesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling logProfilesDelete");
      }

      let pathParams = {
        'logProfileName': logProfileName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles/{logProfileName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logProfilesGet operation.
     * @callback module:api/LogProfilesApi~logProfilesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogProfileResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the log profile.
     * @param {String} logProfileName The name of the log profile.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {module:api/LogProfilesApi~logProfilesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogProfileResource}
     */
    logProfilesGet(logProfileName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'logProfileName' is set
      if (logProfileName === undefined || logProfileName === null) {
        throw new Error("Missing the required parameter 'logProfileName' when calling logProfilesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling logProfilesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling logProfilesGet");
      }

      let pathParams = {
        'logProfileName': logProfileName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogProfileResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles/{logProfileName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logProfilesList operation.
     * @callback module:api/LogProfilesApi~logProfilesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogProfileCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the log profiles.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId The Azure subscription Id.
     * @param {module:api/LogProfilesApi~logProfilesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogProfileCollection}
     */
    logProfilesList(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling logProfilesList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling logProfilesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogProfileCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/microsoft.insights/logprofiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
