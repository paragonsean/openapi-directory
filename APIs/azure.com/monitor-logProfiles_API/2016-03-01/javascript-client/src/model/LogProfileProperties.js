/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RetentionPolicy from './RetentionPolicy';

/**
 * The LogProfileProperties model module.
 * @module model/LogProfileProperties
 * @version 2016-03-01
 */
class LogProfileProperties {
    /**
     * Constructs a new <code>LogProfileProperties</code>.
     * The log profile properties.
     * @alias module:model/LogProfileProperties
     * @param categories {Array.<String>} the categories of the logs. These categories are created as is convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'
     * @param locations {Array.<String>} List of regions for which Activity Log events should be stored or streamed. It is a comma separated list of valid ARM locations including the 'global' location.
     * @param retentionPolicy {module:model/RetentionPolicy} 
     */
    constructor(categories, locations, retentionPolicy) { 
        
        LogProfileProperties.initialize(this, categories, locations, retentionPolicy);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, categories, locations, retentionPolicy) { 
        obj['categories'] = categories;
        obj['locations'] = locations;
        obj['retentionPolicy'] = retentionPolicy;
    }

    /**
     * Constructs a <code>LogProfileProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogProfileProperties} obj Optional instance to populate.
     * @return {module:model/LogProfileProperties} The populated <code>LogProfileProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogProfileProperties();

            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['String']);
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], ['String']);
            }
            if (data.hasOwnProperty('retentionPolicy')) {
                obj['retentionPolicy'] = RetentionPolicy.constructFromObject(data['retentionPolicy']);
            }
            if (data.hasOwnProperty('serviceBusRuleId')) {
                obj['serviceBusRuleId'] = ApiClient.convertToType(data['serviceBusRuleId'], 'String');
            }
            if (data.hasOwnProperty('storageAccountId')) {
                obj['storageAccountId'] = ApiClient.convertToType(data['storageAccountId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogProfileProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogProfileProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LogProfileProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['locations'])) {
            throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
        }
        // validate the optional field `retentionPolicy`
        if (data['retentionPolicy']) { // data not null
          RetentionPolicy.validateJSON(data['retentionPolicy']);
        }
        // ensure the json data is a string
        if (data['serviceBusRuleId'] && !(typeof data['serviceBusRuleId'] === 'string' || data['serviceBusRuleId'] instanceof String)) {
            throw new Error("Expected the field `serviceBusRuleId` to be a primitive type in the JSON string but got " + data['serviceBusRuleId']);
        }
        // ensure the json data is a string
        if (data['storageAccountId'] && !(typeof data['storageAccountId'] === 'string' || data['storageAccountId'] instanceof String)) {
            throw new Error("Expected the field `storageAccountId` to be a primitive type in the JSON string but got " + data['storageAccountId']);
        }

        return true;
    }


}

LogProfileProperties.RequiredProperties = ["categories", "locations", "retentionPolicy"];

/**
 * the categories of the logs. These categories are created as is convenient to the user. Some values are: 'Write', 'Delete', and/or 'Action.'
 * @member {Array.<String>} categories
 */
LogProfileProperties.prototype['categories'] = undefined;

/**
 * List of regions for which Activity Log events should be stored or streamed. It is a comma separated list of valid ARM locations including the 'global' location.
 * @member {Array.<String>} locations
 */
LogProfileProperties.prototype['locations'] = undefined;

/**
 * @member {module:model/RetentionPolicy} retentionPolicy
 */
LogProfileProperties.prototype['retentionPolicy'] = undefined;

/**
 * The service bus rule ID of the service bus namespace in which you would like to have Event Hubs created for streaming the Activity Log. The rule ID is of the format: '{service bus resource ID}/authorizationrules/{key name}'.
 * @member {String} serviceBusRuleId
 */
LogProfileProperties.prototype['serviceBusRuleId'] = undefined;

/**
 * the resource id of the storage account to which you would like to send the Activity Log.
 * @member {String} storageAccountId
 */
LogProfileProperties.prototype['storageAccountId'] = undefined;






export default LogProfileProperties;

