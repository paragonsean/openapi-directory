/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogProfileProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogProfileProperties::OAILogProfileProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogProfileProperties::OAILogProfileProperties() {
    this->initializeModel();
}

OAILogProfileProperties::~OAILogProfileProperties() {}

void OAILogProfileProperties::initializeModel() {

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_retention_policy_isSet = false;
    m_retention_policy_isValid = false;

    m_service_bus_rule_id_isSet = false;
    m_service_bus_rule_id_isValid = false;

    m_storage_account_id_isSet = false;
    m_storage_account_id_isValid = false;
}

void OAILogProfileProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogProfileProperties::fromJsonObject(QJsonObject json) {

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_retention_policy_isValid = ::OpenAPI::fromJsonValue(m_retention_policy, json[QString("retentionPolicy")]);
    m_retention_policy_isSet = !json[QString("retentionPolicy")].isNull() && m_retention_policy_isValid;

    m_service_bus_rule_id_isValid = ::OpenAPI::fromJsonValue(m_service_bus_rule_id, json[QString("serviceBusRuleId")]);
    m_service_bus_rule_id_isSet = !json[QString("serviceBusRuleId")].isNull() && m_service_bus_rule_id_isValid;

    m_storage_account_id_isValid = ::OpenAPI::fromJsonValue(m_storage_account_id, json[QString("storageAccountId")]);
    m_storage_account_id_isSet = !json[QString("storageAccountId")].isNull() && m_storage_account_id_isValid;
}

QString OAILogProfileProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogProfileProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_retention_policy.isSet()) {
        obj.insert(QString("retentionPolicy"), ::OpenAPI::toJsonValue(m_retention_policy));
    }
    if (m_service_bus_rule_id_isSet) {
        obj.insert(QString("serviceBusRuleId"), ::OpenAPI::toJsonValue(m_service_bus_rule_id));
    }
    if (m_storage_account_id_isSet) {
        obj.insert(QString("storageAccountId"), ::OpenAPI::toJsonValue(m_storage_account_id));
    }
    return obj;
}

QList<QString> OAILogProfileProperties::getCategories() const {
    return m_categories;
}
void OAILogProfileProperties::setCategories(const QList<QString> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAILogProfileProperties::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAILogProfileProperties::is_categories_Valid() const{
    return m_categories_isValid;
}

QList<QString> OAILogProfileProperties::getLocations() const {
    return m_locations;
}
void OAILogProfileProperties::setLocations(const QList<QString> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAILogProfileProperties::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAILogProfileProperties::is_locations_Valid() const{
    return m_locations_isValid;
}

OAIRetentionPolicy OAILogProfileProperties::getRetentionPolicy() const {
    return m_retention_policy;
}
void OAILogProfileProperties::setRetentionPolicy(const OAIRetentionPolicy &retention_policy) {
    m_retention_policy = retention_policy;
    m_retention_policy_isSet = true;
}

bool OAILogProfileProperties::is_retention_policy_Set() const{
    return m_retention_policy_isSet;
}

bool OAILogProfileProperties::is_retention_policy_Valid() const{
    return m_retention_policy_isValid;
}

QString OAILogProfileProperties::getServiceBusRuleId() const {
    return m_service_bus_rule_id;
}
void OAILogProfileProperties::setServiceBusRuleId(const QString &service_bus_rule_id) {
    m_service_bus_rule_id = service_bus_rule_id;
    m_service_bus_rule_id_isSet = true;
}

bool OAILogProfileProperties::is_service_bus_rule_id_Set() const{
    return m_service_bus_rule_id_isSet;
}

bool OAILogProfileProperties::is_service_bus_rule_id_Valid() const{
    return m_service_bus_rule_id_isValid;
}

QString OAILogProfileProperties::getStorageAccountId() const {
    return m_storage_account_id;
}
void OAILogProfileProperties::setStorageAccountId(const QString &storage_account_id) {
    m_storage_account_id = storage_account_id;
    m_storage_account_id_isSet = true;
}

bool OAILogProfileProperties::is_storage_account_id_Set() const{
    return m_storage_account_id_isSet;
}

bool OAILogProfileProperties::is_storage_account_id_Valid() const{
    return m_storage_account_id_isValid;
}

bool OAILogProfileProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_bus_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogProfileProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_categories_isValid && m_locations_isValid && m_retention_policy_isValid && true;
}

} // namespace OpenAPI
