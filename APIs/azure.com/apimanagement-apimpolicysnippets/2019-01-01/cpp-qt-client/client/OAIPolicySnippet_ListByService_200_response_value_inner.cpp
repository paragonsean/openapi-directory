/**
 * ApiManagementClient
 * Use these REST APIs for performing retrieving a collection of policy snippets available in Azure API Management deployment.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicySnippet_ListByService_200_response_value_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicySnippet_ListByService_200_response_value_inner::OAIPolicySnippet_ListByService_200_response_value_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicySnippet_ListByService_200_response_value_inner::OAIPolicySnippet_ListByService_200_response_value_inner() {
    this->initializeModel();
}

OAIPolicySnippet_ListByService_200_response_value_inner::~OAIPolicySnippet_ListByService_200_response_value_inner() {}

void OAIPolicySnippet_ListByService_200_response_value_inner::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_tool_tip_isSet = false;
    m_tool_tip_isValid = false;
}

void OAIPolicySnippet_ListByService_200_response_value_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicySnippet_ListByService_200_response_value_inner::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_tool_tip_isValid = ::OpenAPI::fromJsonValue(m_tool_tip, json[QString("toolTip")]);
    m_tool_tip_isSet = !json[QString("toolTip")].isNull() && m_tool_tip_isValid;
}

QString OAIPolicySnippet_ListByService_200_response_value_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicySnippet_ListByService_200_response_value_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_tool_tip_isSet) {
        obj.insert(QString("toolTip"), ::OpenAPI::toJsonValue(m_tool_tip));
    }
    return obj;
}

QString OAIPolicySnippet_ListByService_200_response_value_inner::getContent() const {
    return m_content;
}
void OAIPolicySnippet_ListByService_200_response_value_inner::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIPolicySnippet_ListByService_200_response_value_inner::is_content_Set() const{
    return m_content_isSet;
}

bool OAIPolicySnippet_ListByService_200_response_value_inner::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIPolicySnippet_ListByService_200_response_value_inner::getName() const {
    return m_name;
}
void OAIPolicySnippet_ListByService_200_response_value_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPolicySnippet_ListByService_200_response_value_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPolicySnippet_ListByService_200_response_value_inner::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIPolicySnippet_ListByService_200_response_value_inner::getScope() const {
    return m_scope;
}
void OAIPolicySnippet_ListByService_200_response_value_inner::setScope(const qint32 &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIPolicySnippet_ListByService_200_response_value_inner::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIPolicySnippet_ListByService_200_response_value_inner::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAIPolicySnippet_ListByService_200_response_value_inner::getToolTip() const {
    return m_tool_tip;
}
void OAIPolicySnippet_ListByService_200_response_value_inner::setToolTip(const QString &tool_tip) {
    m_tool_tip = tool_tip;
    m_tool_tip_isSet = true;
}

bool OAIPolicySnippet_ListByService_200_response_value_inner::is_tool_tip_Set() const{
    return m_tool_tip_isSet;
}

bool OAIPolicySnippet_ListByService_200_response_value_inner::is_tool_tip_Valid() const{
    return m_tool_tip_isValid;
}

bool OAIPolicySnippet_ListByService_200_response_value_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tool_tip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicySnippet_ListByService_200_response_value_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
