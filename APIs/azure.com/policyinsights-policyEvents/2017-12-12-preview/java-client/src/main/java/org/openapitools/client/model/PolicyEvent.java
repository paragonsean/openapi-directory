/*
 * PolicyEventsClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-12-12-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Policy event record.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:54:00.890077-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PolicyEvent {
  public static final String SERIALIZED_NAME_AT_ODATA_CONTEXT = "@odata.context";
  @SerializedName(SERIALIZED_NAME_AT_ODATA_CONTEXT)
  private String atOdataContext;

  public static final String SERIALIZED_NAME_AT_ODATA_ID = "@odata.id";
  @SerializedName(SERIALIZED_NAME_AT_ODATA_ID)
  private String atOdataId;

  public static final String SERIALIZED_NAME_EFFECTIVE_PARAMETERS = "effectiveParameters";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_PARAMETERS)
  private String effectiveParameters;

  public static final String SERIALIZED_NAME_IS_COMPLIANT = "isCompliant";
  @SerializedName(SERIALIZED_NAME_IS_COMPLIANT)
  private Boolean isCompliant;

  public static final String SERIALIZED_NAME_MANAGEMENT_GROUP_IDS = "managementGroupIds";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT_GROUP_IDS)
  private String managementGroupIds;

  public static final String SERIALIZED_NAME_POLICY_ASSIGNMENT_ID = "policyAssignmentId";
  @SerializedName(SERIALIZED_NAME_POLICY_ASSIGNMENT_ID)
  private String policyAssignmentId;

  public static final String SERIALIZED_NAME_POLICY_ASSIGNMENT_NAME = "policyAssignmentName";
  @SerializedName(SERIALIZED_NAME_POLICY_ASSIGNMENT_NAME)
  private String policyAssignmentName;

  public static final String SERIALIZED_NAME_POLICY_ASSIGNMENT_OWNER = "policyAssignmentOwner";
  @SerializedName(SERIALIZED_NAME_POLICY_ASSIGNMENT_OWNER)
  private String policyAssignmentOwner;

  public static final String SERIALIZED_NAME_POLICY_ASSIGNMENT_PARAMETERS = "policyAssignmentParameters";
  @SerializedName(SERIALIZED_NAME_POLICY_ASSIGNMENT_PARAMETERS)
  private String policyAssignmentParameters;

  public static final String SERIALIZED_NAME_POLICY_ASSIGNMENT_SCOPE = "policyAssignmentScope";
  @SerializedName(SERIALIZED_NAME_POLICY_ASSIGNMENT_SCOPE)
  private String policyAssignmentScope;

  public static final String SERIALIZED_NAME_POLICY_DEFINITION_ACTION = "policyDefinitionAction";
  @SerializedName(SERIALIZED_NAME_POLICY_DEFINITION_ACTION)
  private String policyDefinitionAction;

  public static final String SERIALIZED_NAME_POLICY_DEFINITION_CATEGORY = "policyDefinitionCategory";
  @SerializedName(SERIALIZED_NAME_POLICY_DEFINITION_CATEGORY)
  private String policyDefinitionCategory;

  public static final String SERIALIZED_NAME_POLICY_DEFINITION_ID = "policyDefinitionId";
  @SerializedName(SERIALIZED_NAME_POLICY_DEFINITION_ID)
  private String policyDefinitionId;

  public static final String SERIALIZED_NAME_POLICY_DEFINITION_NAME = "policyDefinitionName";
  @SerializedName(SERIALIZED_NAME_POLICY_DEFINITION_NAME)
  private String policyDefinitionName;

  public static final String SERIALIZED_NAME_POLICY_DEFINITION_REFERENCE_ID = "policyDefinitionReferenceId";
  @SerializedName(SERIALIZED_NAME_POLICY_DEFINITION_REFERENCE_ID)
  private String policyDefinitionReferenceId;

  public static final String SERIALIZED_NAME_POLICY_SET_DEFINITION_CATEGORY = "policySetDefinitionCategory";
  @SerializedName(SERIALIZED_NAME_POLICY_SET_DEFINITION_CATEGORY)
  private String policySetDefinitionCategory;

  public static final String SERIALIZED_NAME_POLICY_SET_DEFINITION_ID = "policySetDefinitionId";
  @SerializedName(SERIALIZED_NAME_POLICY_SET_DEFINITION_ID)
  private String policySetDefinitionId;

  public static final String SERIALIZED_NAME_POLICY_SET_DEFINITION_NAME = "policySetDefinitionName";
  @SerializedName(SERIALIZED_NAME_POLICY_SET_DEFINITION_NAME)
  private String policySetDefinitionName;

  public static final String SERIALIZED_NAME_POLICY_SET_DEFINITION_OWNER = "policySetDefinitionOwner";
  @SerializedName(SERIALIZED_NAME_POLICY_SET_DEFINITION_OWNER)
  private String policySetDefinitionOwner;

  public static final String SERIALIZED_NAME_POLICY_SET_DEFINITION_PARAMETERS = "policySetDefinitionParameters";
  @SerializedName(SERIALIZED_NAME_POLICY_SET_DEFINITION_PARAMETERS)
  private String policySetDefinitionParameters;

  public static final String SERIALIZED_NAME_PRINCIPAL_OID = "principalOid";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_OID)
  private String principalOid;

  public static final String SERIALIZED_NAME_RESOURCE_GROUP = "resourceGroup";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUP)
  private String resourceGroup;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_RESOURCE_LOCATION = "resourceLocation";
  @SerializedName(SERIALIZED_NAME_RESOURCE_LOCATION)
  private String resourceLocation;

  public static final String SERIALIZED_NAME_RESOURCE_TAGS = "resourceTags";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TAGS)
  private String resourceTags;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public PolicyEvent() {
  }

  public PolicyEvent atOdataContext(String atOdataContext) {
    this.atOdataContext = atOdataContext;
    return this;
  }

  /**
   * OData context string; used by OData clients to resolve type information based on metadata.
   * @return atOdataContext
   */
  @javax.annotation.Nullable
  public String getAtOdataContext() {
    return atOdataContext;
  }

  public void setAtOdataContext(String atOdataContext) {
    this.atOdataContext = atOdataContext;
  }


  public PolicyEvent atOdataId(String atOdataId) {
    this.atOdataId = atOdataId;
    return this;
  }

  /**
   * OData entity ID; always set to null since policy event records do not have an entity ID.
   * @return atOdataId
   */
  @javax.annotation.Nullable
  public String getAtOdataId() {
    return atOdataId;
  }

  public void setAtOdataId(String atOdataId) {
    this.atOdataId = atOdataId;
  }


  public PolicyEvent effectiveParameters(String effectiveParameters) {
    this.effectiveParameters = effectiveParameters;
    return this;
  }

  /**
   * Effective parameters for the policy assignment.
   * @return effectiveParameters
   */
  @javax.annotation.Nullable
  public String getEffectiveParameters() {
    return effectiveParameters;
  }

  public void setEffectiveParameters(String effectiveParameters) {
    this.effectiveParameters = effectiveParameters;
  }


  public PolicyEvent isCompliant(Boolean isCompliant) {
    this.isCompliant = isCompliant;
    return this;
  }

  /**
   * Flag which states whether the resource is compliant against the policy assignment it was evaluated against.
   * @return isCompliant
   */
  @javax.annotation.Nullable
  public Boolean getIsCompliant() {
    return isCompliant;
  }

  public void setIsCompliant(Boolean isCompliant) {
    this.isCompliant = isCompliant;
  }


  public PolicyEvent managementGroupIds(String managementGroupIds) {
    this.managementGroupIds = managementGroupIds;
    return this;
  }

  /**
   * Comma separated list of management group IDs, which represent the hierarchy of the management groups the resource is under.
   * @return managementGroupIds
   */
  @javax.annotation.Nullable
  public String getManagementGroupIds() {
    return managementGroupIds;
  }

  public void setManagementGroupIds(String managementGroupIds) {
    this.managementGroupIds = managementGroupIds;
  }


  public PolicyEvent policyAssignmentId(String policyAssignmentId) {
    this.policyAssignmentId = policyAssignmentId;
    return this;
  }

  /**
   * Policy assignment ID.
   * @return policyAssignmentId
   */
  @javax.annotation.Nullable
  public String getPolicyAssignmentId() {
    return policyAssignmentId;
  }

  public void setPolicyAssignmentId(String policyAssignmentId) {
    this.policyAssignmentId = policyAssignmentId;
  }


  public PolicyEvent policyAssignmentName(String policyAssignmentName) {
    this.policyAssignmentName = policyAssignmentName;
    return this;
  }

  /**
   * Policy assignment name.
   * @return policyAssignmentName
   */
  @javax.annotation.Nullable
  public String getPolicyAssignmentName() {
    return policyAssignmentName;
  }

  public void setPolicyAssignmentName(String policyAssignmentName) {
    this.policyAssignmentName = policyAssignmentName;
  }


  public PolicyEvent policyAssignmentOwner(String policyAssignmentOwner) {
    this.policyAssignmentOwner = policyAssignmentOwner;
    return this;
  }

  /**
   * Policy assignment owner.
   * @return policyAssignmentOwner
   */
  @javax.annotation.Nullable
  public String getPolicyAssignmentOwner() {
    return policyAssignmentOwner;
  }

  public void setPolicyAssignmentOwner(String policyAssignmentOwner) {
    this.policyAssignmentOwner = policyAssignmentOwner;
  }


  public PolicyEvent policyAssignmentParameters(String policyAssignmentParameters) {
    this.policyAssignmentParameters = policyAssignmentParameters;
    return this;
  }

  /**
   * Policy assignment parameters.
   * @return policyAssignmentParameters
   */
  @javax.annotation.Nullable
  public String getPolicyAssignmentParameters() {
    return policyAssignmentParameters;
  }

  public void setPolicyAssignmentParameters(String policyAssignmentParameters) {
    this.policyAssignmentParameters = policyAssignmentParameters;
  }


  public PolicyEvent policyAssignmentScope(String policyAssignmentScope) {
    this.policyAssignmentScope = policyAssignmentScope;
    return this;
  }

  /**
   * Policy assignment scope.
   * @return policyAssignmentScope
   */
  @javax.annotation.Nullable
  public String getPolicyAssignmentScope() {
    return policyAssignmentScope;
  }

  public void setPolicyAssignmentScope(String policyAssignmentScope) {
    this.policyAssignmentScope = policyAssignmentScope;
  }


  public PolicyEvent policyDefinitionAction(String policyDefinitionAction) {
    this.policyDefinitionAction = policyDefinitionAction;
    return this;
  }

  /**
   * Policy definition action, i.e. effect.
   * @return policyDefinitionAction
   */
  @javax.annotation.Nullable
  public String getPolicyDefinitionAction() {
    return policyDefinitionAction;
  }

  public void setPolicyDefinitionAction(String policyDefinitionAction) {
    this.policyDefinitionAction = policyDefinitionAction;
  }


  public PolicyEvent policyDefinitionCategory(String policyDefinitionCategory) {
    this.policyDefinitionCategory = policyDefinitionCategory;
    return this;
  }

  /**
   * Policy definition category.
   * @return policyDefinitionCategory
   */
  @javax.annotation.Nullable
  public String getPolicyDefinitionCategory() {
    return policyDefinitionCategory;
  }

  public void setPolicyDefinitionCategory(String policyDefinitionCategory) {
    this.policyDefinitionCategory = policyDefinitionCategory;
  }


  public PolicyEvent policyDefinitionId(String policyDefinitionId) {
    this.policyDefinitionId = policyDefinitionId;
    return this;
  }

  /**
   * Policy definition ID.
   * @return policyDefinitionId
   */
  @javax.annotation.Nullable
  public String getPolicyDefinitionId() {
    return policyDefinitionId;
  }

  public void setPolicyDefinitionId(String policyDefinitionId) {
    this.policyDefinitionId = policyDefinitionId;
  }


  public PolicyEvent policyDefinitionName(String policyDefinitionName) {
    this.policyDefinitionName = policyDefinitionName;
    return this;
  }

  /**
   * Policy definition name.
   * @return policyDefinitionName
   */
  @javax.annotation.Nullable
  public String getPolicyDefinitionName() {
    return policyDefinitionName;
  }

  public void setPolicyDefinitionName(String policyDefinitionName) {
    this.policyDefinitionName = policyDefinitionName;
  }


  public PolicyEvent policyDefinitionReferenceId(String policyDefinitionReferenceId) {
    this.policyDefinitionReferenceId = policyDefinitionReferenceId;
    return this;
  }

  /**
   * Reference ID for the policy definition inside the policy set, if the policy assignment is for a policy set.
   * @return policyDefinitionReferenceId
   */
  @javax.annotation.Nullable
  public String getPolicyDefinitionReferenceId() {
    return policyDefinitionReferenceId;
  }

  public void setPolicyDefinitionReferenceId(String policyDefinitionReferenceId) {
    this.policyDefinitionReferenceId = policyDefinitionReferenceId;
  }


  public PolicyEvent policySetDefinitionCategory(String policySetDefinitionCategory) {
    this.policySetDefinitionCategory = policySetDefinitionCategory;
    return this;
  }

  /**
   * Policy set definition category, if the policy assignment is for a policy set.
   * @return policySetDefinitionCategory
   */
  @javax.annotation.Nullable
  public String getPolicySetDefinitionCategory() {
    return policySetDefinitionCategory;
  }

  public void setPolicySetDefinitionCategory(String policySetDefinitionCategory) {
    this.policySetDefinitionCategory = policySetDefinitionCategory;
  }


  public PolicyEvent policySetDefinitionId(String policySetDefinitionId) {
    this.policySetDefinitionId = policySetDefinitionId;
    return this;
  }

  /**
   * Policy set definition ID, if the policy assignment is for a policy set.
   * @return policySetDefinitionId
   */
  @javax.annotation.Nullable
  public String getPolicySetDefinitionId() {
    return policySetDefinitionId;
  }

  public void setPolicySetDefinitionId(String policySetDefinitionId) {
    this.policySetDefinitionId = policySetDefinitionId;
  }


  public PolicyEvent policySetDefinitionName(String policySetDefinitionName) {
    this.policySetDefinitionName = policySetDefinitionName;
    return this;
  }

  /**
   * Policy set definition name, if the policy assignment is for a policy set.
   * @return policySetDefinitionName
   */
  @javax.annotation.Nullable
  public String getPolicySetDefinitionName() {
    return policySetDefinitionName;
  }

  public void setPolicySetDefinitionName(String policySetDefinitionName) {
    this.policySetDefinitionName = policySetDefinitionName;
  }


  public PolicyEvent policySetDefinitionOwner(String policySetDefinitionOwner) {
    this.policySetDefinitionOwner = policySetDefinitionOwner;
    return this;
  }

  /**
   * Policy set definition owner, if the policy assignment is for a policy set.
   * @return policySetDefinitionOwner
   */
  @javax.annotation.Nullable
  public String getPolicySetDefinitionOwner() {
    return policySetDefinitionOwner;
  }

  public void setPolicySetDefinitionOwner(String policySetDefinitionOwner) {
    this.policySetDefinitionOwner = policySetDefinitionOwner;
  }


  public PolicyEvent policySetDefinitionParameters(String policySetDefinitionParameters) {
    this.policySetDefinitionParameters = policySetDefinitionParameters;
    return this;
  }

  /**
   * Policy set definition parameters, if the policy assignment is for a policy set.
   * @return policySetDefinitionParameters
   */
  @javax.annotation.Nullable
  public String getPolicySetDefinitionParameters() {
    return policySetDefinitionParameters;
  }

  public void setPolicySetDefinitionParameters(String policySetDefinitionParameters) {
    this.policySetDefinitionParameters = policySetDefinitionParameters;
  }


  public PolicyEvent principalOid(String principalOid) {
    this.principalOid = principalOid;
    return this;
  }

  /**
   * Principal object ID for the user who initiated the resource operation that triggered the policy event.
   * @return principalOid
   */
  @javax.annotation.Nullable
  public String getPrincipalOid() {
    return principalOid;
  }

  public void setPrincipalOid(String principalOid) {
    this.principalOid = principalOid;
  }


  public PolicyEvent resourceGroup(String resourceGroup) {
    this.resourceGroup = resourceGroup;
    return this;
  }

  /**
   * Resource group name.
   * @return resourceGroup
   */
  @javax.annotation.Nullable
  public String getResourceGroup() {
    return resourceGroup;
  }

  public void setResourceGroup(String resourceGroup) {
    this.resourceGroup = resourceGroup;
  }


  public PolicyEvent resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

  /**
   * Resource ID.
   * @return resourceId
   */
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public PolicyEvent resourceLocation(String resourceLocation) {
    this.resourceLocation = resourceLocation;
    return this;
  }

  /**
   * Resource location.
   * @return resourceLocation
   */
  @javax.annotation.Nullable
  public String getResourceLocation() {
    return resourceLocation;
  }

  public void setResourceLocation(String resourceLocation) {
    this.resourceLocation = resourceLocation;
  }


  public PolicyEvent resourceTags(String resourceTags) {
    this.resourceTags = resourceTags;
    return this;
  }

  /**
   * List of resource tags.
   * @return resourceTags
   */
  @javax.annotation.Nullable
  public String getResourceTags() {
    return resourceTags;
  }

  public void setResourceTags(String resourceTags) {
    this.resourceTags = resourceTags;
  }


  public PolicyEvent resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Resource type.
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public PolicyEvent subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * Subscription ID.
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public PolicyEvent tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * Tenant ID for the policy event record.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public PolicyEvent timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Timestamp for the policy event record.
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PolicyEvent instance itself
   */
  public PolicyEvent putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyEvent policyEvent = (PolicyEvent) o;
    return Objects.equals(this.atOdataContext, policyEvent.atOdataContext) &&
        Objects.equals(this.atOdataId, policyEvent.atOdataId) &&
        Objects.equals(this.effectiveParameters, policyEvent.effectiveParameters) &&
        Objects.equals(this.isCompliant, policyEvent.isCompliant) &&
        Objects.equals(this.managementGroupIds, policyEvent.managementGroupIds) &&
        Objects.equals(this.policyAssignmentId, policyEvent.policyAssignmentId) &&
        Objects.equals(this.policyAssignmentName, policyEvent.policyAssignmentName) &&
        Objects.equals(this.policyAssignmentOwner, policyEvent.policyAssignmentOwner) &&
        Objects.equals(this.policyAssignmentParameters, policyEvent.policyAssignmentParameters) &&
        Objects.equals(this.policyAssignmentScope, policyEvent.policyAssignmentScope) &&
        Objects.equals(this.policyDefinitionAction, policyEvent.policyDefinitionAction) &&
        Objects.equals(this.policyDefinitionCategory, policyEvent.policyDefinitionCategory) &&
        Objects.equals(this.policyDefinitionId, policyEvent.policyDefinitionId) &&
        Objects.equals(this.policyDefinitionName, policyEvent.policyDefinitionName) &&
        Objects.equals(this.policyDefinitionReferenceId, policyEvent.policyDefinitionReferenceId) &&
        Objects.equals(this.policySetDefinitionCategory, policyEvent.policySetDefinitionCategory) &&
        Objects.equals(this.policySetDefinitionId, policyEvent.policySetDefinitionId) &&
        Objects.equals(this.policySetDefinitionName, policyEvent.policySetDefinitionName) &&
        Objects.equals(this.policySetDefinitionOwner, policyEvent.policySetDefinitionOwner) &&
        Objects.equals(this.policySetDefinitionParameters, policyEvent.policySetDefinitionParameters) &&
        Objects.equals(this.principalOid, policyEvent.principalOid) &&
        Objects.equals(this.resourceGroup, policyEvent.resourceGroup) &&
        Objects.equals(this.resourceId, policyEvent.resourceId) &&
        Objects.equals(this.resourceLocation, policyEvent.resourceLocation) &&
        Objects.equals(this.resourceTags, policyEvent.resourceTags) &&
        Objects.equals(this.resourceType, policyEvent.resourceType) &&
        Objects.equals(this.subscriptionId, policyEvent.subscriptionId) &&
        Objects.equals(this.tenantId, policyEvent.tenantId) &&
        Objects.equals(this.timestamp, policyEvent.timestamp)&&
        Objects.equals(this.additionalProperties, policyEvent.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atOdataContext, atOdataId, effectiveParameters, isCompliant, managementGroupIds, policyAssignmentId, policyAssignmentName, policyAssignmentOwner, policyAssignmentParameters, policyAssignmentScope, policyDefinitionAction, policyDefinitionCategory, policyDefinitionId, policyDefinitionName, policyDefinitionReferenceId, policySetDefinitionCategory, policySetDefinitionId, policySetDefinitionName, policySetDefinitionOwner, policySetDefinitionParameters, principalOid, resourceGroup, resourceId, resourceLocation, resourceTags, resourceType, subscriptionId, tenantId, timestamp, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyEvent {\n");
    sb.append("    atOdataContext: ").append(toIndentedString(atOdataContext)).append("\n");
    sb.append("    atOdataId: ").append(toIndentedString(atOdataId)).append("\n");
    sb.append("    effectiveParameters: ").append(toIndentedString(effectiveParameters)).append("\n");
    sb.append("    isCompliant: ").append(toIndentedString(isCompliant)).append("\n");
    sb.append("    managementGroupIds: ").append(toIndentedString(managementGroupIds)).append("\n");
    sb.append("    policyAssignmentId: ").append(toIndentedString(policyAssignmentId)).append("\n");
    sb.append("    policyAssignmentName: ").append(toIndentedString(policyAssignmentName)).append("\n");
    sb.append("    policyAssignmentOwner: ").append(toIndentedString(policyAssignmentOwner)).append("\n");
    sb.append("    policyAssignmentParameters: ").append(toIndentedString(policyAssignmentParameters)).append("\n");
    sb.append("    policyAssignmentScope: ").append(toIndentedString(policyAssignmentScope)).append("\n");
    sb.append("    policyDefinitionAction: ").append(toIndentedString(policyDefinitionAction)).append("\n");
    sb.append("    policyDefinitionCategory: ").append(toIndentedString(policyDefinitionCategory)).append("\n");
    sb.append("    policyDefinitionId: ").append(toIndentedString(policyDefinitionId)).append("\n");
    sb.append("    policyDefinitionName: ").append(toIndentedString(policyDefinitionName)).append("\n");
    sb.append("    policyDefinitionReferenceId: ").append(toIndentedString(policyDefinitionReferenceId)).append("\n");
    sb.append("    policySetDefinitionCategory: ").append(toIndentedString(policySetDefinitionCategory)).append("\n");
    sb.append("    policySetDefinitionId: ").append(toIndentedString(policySetDefinitionId)).append("\n");
    sb.append("    policySetDefinitionName: ").append(toIndentedString(policySetDefinitionName)).append("\n");
    sb.append("    policySetDefinitionOwner: ").append(toIndentedString(policySetDefinitionOwner)).append("\n");
    sb.append("    policySetDefinitionParameters: ").append(toIndentedString(policySetDefinitionParameters)).append("\n");
    sb.append("    principalOid: ").append(toIndentedString(principalOid)).append("\n");
    sb.append("    resourceGroup: ").append(toIndentedString(resourceGroup)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    resourceLocation: ").append(toIndentedString(resourceLocation)).append("\n");
    sb.append("    resourceTags: ").append(toIndentedString(resourceTags)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@odata.context");
    openapiFields.add("@odata.id");
    openapiFields.add("effectiveParameters");
    openapiFields.add("isCompliant");
    openapiFields.add("managementGroupIds");
    openapiFields.add("policyAssignmentId");
    openapiFields.add("policyAssignmentName");
    openapiFields.add("policyAssignmentOwner");
    openapiFields.add("policyAssignmentParameters");
    openapiFields.add("policyAssignmentScope");
    openapiFields.add("policyDefinitionAction");
    openapiFields.add("policyDefinitionCategory");
    openapiFields.add("policyDefinitionId");
    openapiFields.add("policyDefinitionName");
    openapiFields.add("policyDefinitionReferenceId");
    openapiFields.add("policySetDefinitionCategory");
    openapiFields.add("policySetDefinitionId");
    openapiFields.add("policySetDefinitionName");
    openapiFields.add("policySetDefinitionOwner");
    openapiFields.add("policySetDefinitionParameters");
    openapiFields.add("principalOid");
    openapiFields.add("resourceGroup");
    openapiFields.add("resourceId");
    openapiFields.add("resourceLocation");
    openapiFields.add("resourceTags");
    openapiFields.add("resourceType");
    openapiFields.add("subscriptionId");
    openapiFields.add("tenantId");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyEvent is not found in the empty JSON string", PolicyEvent.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("@odata.context") != null && !jsonObj.get("@odata.context").isJsonNull()) && !jsonObj.get("@odata.context").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@odata.context` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@odata.context").toString()));
      }
      if ((jsonObj.get("@odata.id") != null && !jsonObj.get("@odata.id").isJsonNull()) && !jsonObj.get("@odata.id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@odata.id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@odata.id").toString()));
      }
      if ((jsonObj.get("effectiveParameters") != null && !jsonObj.get("effectiveParameters").isJsonNull()) && !jsonObj.get("effectiveParameters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectiveParameters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectiveParameters").toString()));
      }
      if ((jsonObj.get("managementGroupIds") != null && !jsonObj.get("managementGroupIds").isJsonNull()) && !jsonObj.get("managementGroupIds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managementGroupIds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managementGroupIds").toString()));
      }
      if ((jsonObj.get("policyAssignmentId") != null && !jsonObj.get("policyAssignmentId").isJsonNull()) && !jsonObj.get("policyAssignmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyAssignmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyAssignmentId").toString()));
      }
      if ((jsonObj.get("policyAssignmentName") != null && !jsonObj.get("policyAssignmentName").isJsonNull()) && !jsonObj.get("policyAssignmentName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyAssignmentName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyAssignmentName").toString()));
      }
      if ((jsonObj.get("policyAssignmentOwner") != null && !jsonObj.get("policyAssignmentOwner").isJsonNull()) && !jsonObj.get("policyAssignmentOwner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyAssignmentOwner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyAssignmentOwner").toString()));
      }
      if ((jsonObj.get("policyAssignmentParameters") != null && !jsonObj.get("policyAssignmentParameters").isJsonNull()) && !jsonObj.get("policyAssignmentParameters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyAssignmentParameters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyAssignmentParameters").toString()));
      }
      if ((jsonObj.get("policyAssignmentScope") != null && !jsonObj.get("policyAssignmentScope").isJsonNull()) && !jsonObj.get("policyAssignmentScope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyAssignmentScope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyAssignmentScope").toString()));
      }
      if ((jsonObj.get("policyDefinitionAction") != null && !jsonObj.get("policyDefinitionAction").isJsonNull()) && !jsonObj.get("policyDefinitionAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyDefinitionAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyDefinitionAction").toString()));
      }
      if ((jsonObj.get("policyDefinitionCategory") != null && !jsonObj.get("policyDefinitionCategory").isJsonNull()) && !jsonObj.get("policyDefinitionCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyDefinitionCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyDefinitionCategory").toString()));
      }
      if ((jsonObj.get("policyDefinitionId") != null && !jsonObj.get("policyDefinitionId").isJsonNull()) && !jsonObj.get("policyDefinitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyDefinitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyDefinitionId").toString()));
      }
      if ((jsonObj.get("policyDefinitionName") != null && !jsonObj.get("policyDefinitionName").isJsonNull()) && !jsonObj.get("policyDefinitionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyDefinitionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyDefinitionName").toString()));
      }
      if ((jsonObj.get("policyDefinitionReferenceId") != null && !jsonObj.get("policyDefinitionReferenceId").isJsonNull()) && !jsonObj.get("policyDefinitionReferenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyDefinitionReferenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyDefinitionReferenceId").toString()));
      }
      if ((jsonObj.get("policySetDefinitionCategory") != null && !jsonObj.get("policySetDefinitionCategory").isJsonNull()) && !jsonObj.get("policySetDefinitionCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policySetDefinitionCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policySetDefinitionCategory").toString()));
      }
      if ((jsonObj.get("policySetDefinitionId") != null && !jsonObj.get("policySetDefinitionId").isJsonNull()) && !jsonObj.get("policySetDefinitionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policySetDefinitionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policySetDefinitionId").toString()));
      }
      if ((jsonObj.get("policySetDefinitionName") != null && !jsonObj.get("policySetDefinitionName").isJsonNull()) && !jsonObj.get("policySetDefinitionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policySetDefinitionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policySetDefinitionName").toString()));
      }
      if ((jsonObj.get("policySetDefinitionOwner") != null && !jsonObj.get("policySetDefinitionOwner").isJsonNull()) && !jsonObj.get("policySetDefinitionOwner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policySetDefinitionOwner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policySetDefinitionOwner").toString()));
      }
      if ((jsonObj.get("policySetDefinitionParameters") != null && !jsonObj.get("policySetDefinitionParameters").isJsonNull()) && !jsonObj.get("policySetDefinitionParameters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policySetDefinitionParameters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policySetDefinitionParameters").toString()));
      }
      if ((jsonObj.get("principalOid") != null && !jsonObj.get("principalOid").isJsonNull()) && !jsonObj.get("principalOid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `principalOid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("principalOid").toString()));
      }
      if ((jsonObj.get("resourceGroup") != null && !jsonObj.get("resourceGroup").isJsonNull()) && !jsonObj.get("resourceGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGroup").toString()));
      }
      if ((jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) && !jsonObj.get("resourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceId").toString()));
      }
      if ((jsonObj.get("resourceLocation") != null && !jsonObj.get("resourceLocation").isJsonNull()) && !jsonObj.get("resourceLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceLocation").toString()));
      }
      if ((jsonObj.get("resourceTags") != null && !jsonObj.get("resourceTags").isJsonNull()) && !jsonObj.get("resourceTags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceTags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceTags").toString()));
      }
      if ((jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) && !jsonObj.get("resourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceType").toString()));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyEvent>() {
           @Override
           public void write(JsonWriter out, PolicyEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             PolicyEvent instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyEvent
   * @throws IOException if the JSON string is invalid with respect to PolicyEvent
   */
  public static PolicyEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyEvent.class);
  }

  /**
   * Convert an instance of PolicyEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

