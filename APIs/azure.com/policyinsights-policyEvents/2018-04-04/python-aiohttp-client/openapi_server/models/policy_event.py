# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PolicyEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, odata_context: str=None, odata_id: str=None, effective_parameters: str=None, is_compliant: bool=None, management_group_ids: str=None, policy_assignment_id: str=None, policy_assignment_name: str=None, policy_assignment_owner: str=None, policy_assignment_parameters: str=None, policy_assignment_scope: str=None, policy_definition_action: str=None, policy_definition_category: str=None, policy_definition_id: str=None, policy_definition_name: str=None, policy_definition_reference_id: str=None, policy_set_definition_category: str=None, policy_set_definition_id: str=None, policy_set_definition_name: str=None, policy_set_definition_owner: str=None, policy_set_definition_parameters: str=None, principal_oid: str=None, resource_group: str=None, resource_id: str=None, resource_location: str=None, resource_tags: str=None, resource_type: str=None, subscription_id: str=None, tenant_id: str=None, timestamp: datetime=None):
        """PolicyEvent - a model defined in OpenAPI

        :param odata_context: The odata_context of this PolicyEvent.
        :param odata_id: The odata_id of this PolicyEvent.
        :param effective_parameters: The effective_parameters of this PolicyEvent.
        :param is_compliant: The is_compliant of this PolicyEvent.
        :param management_group_ids: The management_group_ids of this PolicyEvent.
        :param policy_assignment_id: The policy_assignment_id of this PolicyEvent.
        :param policy_assignment_name: The policy_assignment_name of this PolicyEvent.
        :param policy_assignment_owner: The policy_assignment_owner of this PolicyEvent.
        :param policy_assignment_parameters: The policy_assignment_parameters of this PolicyEvent.
        :param policy_assignment_scope: The policy_assignment_scope of this PolicyEvent.
        :param policy_definition_action: The policy_definition_action of this PolicyEvent.
        :param policy_definition_category: The policy_definition_category of this PolicyEvent.
        :param policy_definition_id: The policy_definition_id of this PolicyEvent.
        :param policy_definition_name: The policy_definition_name of this PolicyEvent.
        :param policy_definition_reference_id: The policy_definition_reference_id of this PolicyEvent.
        :param policy_set_definition_category: The policy_set_definition_category of this PolicyEvent.
        :param policy_set_definition_id: The policy_set_definition_id of this PolicyEvent.
        :param policy_set_definition_name: The policy_set_definition_name of this PolicyEvent.
        :param policy_set_definition_owner: The policy_set_definition_owner of this PolicyEvent.
        :param policy_set_definition_parameters: The policy_set_definition_parameters of this PolicyEvent.
        :param principal_oid: The principal_oid of this PolicyEvent.
        :param resource_group: The resource_group of this PolicyEvent.
        :param resource_id: The resource_id of this PolicyEvent.
        :param resource_location: The resource_location of this PolicyEvent.
        :param resource_tags: The resource_tags of this PolicyEvent.
        :param resource_type: The resource_type of this PolicyEvent.
        :param subscription_id: The subscription_id of this PolicyEvent.
        :param tenant_id: The tenant_id of this PolicyEvent.
        :param timestamp: The timestamp of this PolicyEvent.
        """
        self.openapi_types = {
            'odata_context': str,
            'odata_id': str,
            'effective_parameters': str,
            'is_compliant': bool,
            'management_group_ids': str,
            'policy_assignment_id': str,
            'policy_assignment_name': str,
            'policy_assignment_owner': str,
            'policy_assignment_parameters': str,
            'policy_assignment_scope': str,
            'policy_definition_action': str,
            'policy_definition_category': str,
            'policy_definition_id': str,
            'policy_definition_name': str,
            'policy_definition_reference_id': str,
            'policy_set_definition_category': str,
            'policy_set_definition_id': str,
            'policy_set_definition_name': str,
            'policy_set_definition_owner': str,
            'policy_set_definition_parameters': str,
            'principal_oid': str,
            'resource_group': str,
            'resource_id': str,
            'resource_location': str,
            'resource_tags': str,
            'resource_type': str,
            'subscription_id': str,
            'tenant_id': str,
            'timestamp': datetime
        }

        self.attribute_map = {
            'odata_context': '@odata.context',
            'odata_id': '@odata.id',
            'effective_parameters': 'effectiveParameters',
            'is_compliant': 'isCompliant',
            'management_group_ids': 'managementGroupIds',
            'policy_assignment_id': 'policyAssignmentId',
            'policy_assignment_name': 'policyAssignmentName',
            'policy_assignment_owner': 'policyAssignmentOwner',
            'policy_assignment_parameters': 'policyAssignmentParameters',
            'policy_assignment_scope': 'policyAssignmentScope',
            'policy_definition_action': 'policyDefinitionAction',
            'policy_definition_category': 'policyDefinitionCategory',
            'policy_definition_id': 'policyDefinitionId',
            'policy_definition_name': 'policyDefinitionName',
            'policy_definition_reference_id': 'policyDefinitionReferenceId',
            'policy_set_definition_category': 'policySetDefinitionCategory',
            'policy_set_definition_id': 'policySetDefinitionId',
            'policy_set_definition_name': 'policySetDefinitionName',
            'policy_set_definition_owner': 'policySetDefinitionOwner',
            'policy_set_definition_parameters': 'policySetDefinitionParameters',
            'principal_oid': 'principalOid',
            'resource_group': 'resourceGroup',
            'resource_id': 'resourceId',
            'resource_location': 'resourceLocation',
            'resource_tags': 'resourceTags',
            'resource_type': 'resourceType',
            'subscription_id': 'subscriptionId',
            'tenant_id': 'tenantId',
            'timestamp': 'timestamp'
        }

        self._odata_context = odata_context
        self._odata_id = odata_id
        self._effective_parameters = effective_parameters
        self._is_compliant = is_compliant
        self._management_group_ids = management_group_ids
        self._policy_assignment_id = policy_assignment_id
        self._policy_assignment_name = policy_assignment_name
        self._policy_assignment_owner = policy_assignment_owner
        self._policy_assignment_parameters = policy_assignment_parameters
        self._policy_assignment_scope = policy_assignment_scope
        self._policy_definition_action = policy_definition_action
        self._policy_definition_category = policy_definition_category
        self._policy_definition_id = policy_definition_id
        self._policy_definition_name = policy_definition_name
        self._policy_definition_reference_id = policy_definition_reference_id
        self._policy_set_definition_category = policy_set_definition_category
        self._policy_set_definition_id = policy_set_definition_id
        self._policy_set_definition_name = policy_set_definition_name
        self._policy_set_definition_owner = policy_set_definition_owner
        self._policy_set_definition_parameters = policy_set_definition_parameters
        self._principal_oid = principal_oid
        self._resource_group = resource_group
        self._resource_id = resource_id
        self._resource_location = resource_location
        self._resource_tags = resource_tags
        self._resource_type = resource_type
        self._subscription_id = subscription_id
        self._tenant_id = tenant_id
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyEvent of this PolicyEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def odata_context(self):
        """Gets the odata_context of this PolicyEvent.

        OData context string; used by OData clients to resolve type information based on metadata.

        :return: The odata_context of this PolicyEvent.
        :rtype: str
        """
        return self._odata_context

    @odata_context.setter
    def odata_context(self, odata_context):
        """Sets the odata_context of this PolicyEvent.

        OData context string; used by OData clients to resolve type information based on metadata.

        :param odata_context: The odata_context of this PolicyEvent.
        :type odata_context: str
        """

        self._odata_context = odata_context

    @property
    def odata_id(self):
        """Gets the odata_id of this PolicyEvent.

        OData entity ID; always set to null since policy event records do not have an entity ID.

        :return: The odata_id of this PolicyEvent.
        :rtype: str
        """
        return self._odata_id

    @odata_id.setter
    def odata_id(self, odata_id):
        """Sets the odata_id of this PolicyEvent.

        OData entity ID; always set to null since policy event records do not have an entity ID.

        :param odata_id: The odata_id of this PolicyEvent.
        :type odata_id: str
        """

        self._odata_id = odata_id

    @property
    def effective_parameters(self):
        """Gets the effective_parameters of this PolicyEvent.

        Effective parameters for the policy assignment.

        :return: The effective_parameters of this PolicyEvent.
        :rtype: str
        """
        return self._effective_parameters

    @effective_parameters.setter
    def effective_parameters(self, effective_parameters):
        """Sets the effective_parameters of this PolicyEvent.

        Effective parameters for the policy assignment.

        :param effective_parameters: The effective_parameters of this PolicyEvent.
        :type effective_parameters: str
        """

        self._effective_parameters = effective_parameters

    @property
    def is_compliant(self):
        """Gets the is_compliant of this PolicyEvent.

        Flag which states whether the resource is compliant against the policy assignment it was evaluated against.

        :return: The is_compliant of this PolicyEvent.
        :rtype: bool
        """
        return self._is_compliant

    @is_compliant.setter
    def is_compliant(self, is_compliant):
        """Sets the is_compliant of this PolicyEvent.

        Flag which states whether the resource is compliant against the policy assignment it was evaluated against.

        :param is_compliant: The is_compliant of this PolicyEvent.
        :type is_compliant: bool
        """

        self._is_compliant = is_compliant

    @property
    def management_group_ids(self):
        """Gets the management_group_ids of this PolicyEvent.

        Comma separated list of management group IDs, which represent the hierarchy of the management groups the resource is under.

        :return: The management_group_ids of this PolicyEvent.
        :rtype: str
        """
        return self._management_group_ids

    @management_group_ids.setter
    def management_group_ids(self, management_group_ids):
        """Sets the management_group_ids of this PolicyEvent.

        Comma separated list of management group IDs, which represent the hierarchy of the management groups the resource is under.

        :param management_group_ids: The management_group_ids of this PolicyEvent.
        :type management_group_ids: str
        """

        self._management_group_ids = management_group_ids

    @property
    def policy_assignment_id(self):
        """Gets the policy_assignment_id of this PolicyEvent.

        Policy assignment ID.

        :return: The policy_assignment_id of this PolicyEvent.
        :rtype: str
        """
        return self._policy_assignment_id

    @policy_assignment_id.setter
    def policy_assignment_id(self, policy_assignment_id):
        """Sets the policy_assignment_id of this PolicyEvent.

        Policy assignment ID.

        :param policy_assignment_id: The policy_assignment_id of this PolicyEvent.
        :type policy_assignment_id: str
        """

        self._policy_assignment_id = policy_assignment_id

    @property
    def policy_assignment_name(self):
        """Gets the policy_assignment_name of this PolicyEvent.

        Policy assignment name.

        :return: The policy_assignment_name of this PolicyEvent.
        :rtype: str
        """
        return self._policy_assignment_name

    @policy_assignment_name.setter
    def policy_assignment_name(self, policy_assignment_name):
        """Sets the policy_assignment_name of this PolicyEvent.

        Policy assignment name.

        :param policy_assignment_name: The policy_assignment_name of this PolicyEvent.
        :type policy_assignment_name: str
        """

        self._policy_assignment_name = policy_assignment_name

    @property
    def policy_assignment_owner(self):
        """Gets the policy_assignment_owner of this PolicyEvent.

        Policy assignment owner.

        :return: The policy_assignment_owner of this PolicyEvent.
        :rtype: str
        """
        return self._policy_assignment_owner

    @policy_assignment_owner.setter
    def policy_assignment_owner(self, policy_assignment_owner):
        """Sets the policy_assignment_owner of this PolicyEvent.

        Policy assignment owner.

        :param policy_assignment_owner: The policy_assignment_owner of this PolicyEvent.
        :type policy_assignment_owner: str
        """

        self._policy_assignment_owner = policy_assignment_owner

    @property
    def policy_assignment_parameters(self):
        """Gets the policy_assignment_parameters of this PolicyEvent.

        Policy assignment parameters.

        :return: The policy_assignment_parameters of this PolicyEvent.
        :rtype: str
        """
        return self._policy_assignment_parameters

    @policy_assignment_parameters.setter
    def policy_assignment_parameters(self, policy_assignment_parameters):
        """Sets the policy_assignment_parameters of this PolicyEvent.

        Policy assignment parameters.

        :param policy_assignment_parameters: The policy_assignment_parameters of this PolicyEvent.
        :type policy_assignment_parameters: str
        """

        self._policy_assignment_parameters = policy_assignment_parameters

    @property
    def policy_assignment_scope(self):
        """Gets the policy_assignment_scope of this PolicyEvent.

        Policy assignment scope.

        :return: The policy_assignment_scope of this PolicyEvent.
        :rtype: str
        """
        return self._policy_assignment_scope

    @policy_assignment_scope.setter
    def policy_assignment_scope(self, policy_assignment_scope):
        """Sets the policy_assignment_scope of this PolicyEvent.

        Policy assignment scope.

        :param policy_assignment_scope: The policy_assignment_scope of this PolicyEvent.
        :type policy_assignment_scope: str
        """

        self._policy_assignment_scope = policy_assignment_scope

    @property
    def policy_definition_action(self):
        """Gets the policy_definition_action of this PolicyEvent.

        Policy definition action, i.e. effect.

        :return: The policy_definition_action of this PolicyEvent.
        :rtype: str
        """
        return self._policy_definition_action

    @policy_definition_action.setter
    def policy_definition_action(self, policy_definition_action):
        """Sets the policy_definition_action of this PolicyEvent.

        Policy definition action, i.e. effect.

        :param policy_definition_action: The policy_definition_action of this PolicyEvent.
        :type policy_definition_action: str
        """

        self._policy_definition_action = policy_definition_action

    @property
    def policy_definition_category(self):
        """Gets the policy_definition_category of this PolicyEvent.

        Policy definition category.

        :return: The policy_definition_category of this PolicyEvent.
        :rtype: str
        """
        return self._policy_definition_category

    @policy_definition_category.setter
    def policy_definition_category(self, policy_definition_category):
        """Sets the policy_definition_category of this PolicyEvent.

        Policy definition category.

        :param policy_definition_category: The policy_definition_category of this PolicyEvent.
        :type policy_definition_category: str
        """

        self._policy_definition_category = policy_definition_category

    @property
    def policy_definition_id(self):
        """Gets the policy_definition_id of this PolicyEvent.

        Policy definition ID.

        :return: The policy_definition_id of this PolicyEvent.
        :rtype: str
        """
        return self._policy_definition_id

    @policy_definition_id.setter
    def policy_definition_id(self, policy_definition_id):
        """Sets the policy_definition_id of this PolicyEvent.

        Policy definition ID.

        :param policy_definition_id: The policy_definition_id of this PolicyEvent.
        :type policy_definition_id: str
        """

        self._policy_definition_id = policy_definition_id

    @property
    def policy_definition_name(self):
        """Gets the policy_definition_name of this PolicyEvent.

        Policy definition name.

        :return: The policy_definition_name of this PolicyEvent.
        :rtype: str
        """
        return self._policy_definition_name

    @policy_definition_name.setter
    def policy_definition_name(self, policy_definition_name):
        """Sets the policy_definition_name of this PolicyEvent.

        Policy definition name.

        :param policy_definition_name: The policy_definition_name of this PolicyEvent.
        :type policy_definition_name: str
        """

        self._policy_definition_name = policy_definition_name

    @property
    def policy_definition_reference_id(self):
        """Gets the policy_definition_reference_id of this PolicyEvent.

        Reference ID for the policy definition inside the policy set, if the policy assignment is for a policy set.

        :return: The policy_definition_reference_id of this PolicyEvent.
        :rtype: str
        """
        return self._policy_definition_reference_id

    @policy_definition_reference_id.setter
    def policy_definition_reference_id(self, policy_definition_reference_id):
        """Sets the policy_definition_reference_id of this PolicyEvent.

        Reference ID for the policy definition inside the policy set, if the policy assignment is for a policy set.

        :param policy_definition_reference_id: The policy_definition_reference_id of this PolicyEvent.
        :type policy_definition_reference_id: str
        """

        self._policy_definition_reference_id = policy_definition_reference_id

    @property
    def policy_set_definition_category(self):
        """Gets the policy_set_definition_category of this PolicyEvent.

        Policy set definition category, if the policy assignment is for a policy set.

        :return: The policy_set_definition_category of this PolicyEvent.
        :rtype: str
        """
        return self._policy_set_definition_category

    @policy_set_definition_category.setter
    def policy_set_definition_category(self, policy_set_definition_category):
        """Sets the policy_set_definition_category of this PolicyEvent.

        Policy set definition category, if the policy assignment is for a policy set.

        :param policy_set_definition_category: The policy_set_definition_category of this PolicyEvent.
        :type policy_set_definition_category: str
        """

        self._policy_set_definition_category = policy_set_definition_category

    @property
    def policy_set_definition_id(self):
        """Gets the policy_set_definition_id of this PolicyEvent.

        Policy set definition ID, if the policy assignment is for a policy set.

        :return: The policy_set_definition_id of this PolicyEvent.
        :rtype: str
        """
        return self._policy_set_definition_id

    @policy_set_definition_id.setter
    def policy_set_definition_id(self, policy_set_definition_id):
        """Sets the policy_set_definition_id of this PolicyEvent.

        Policy set definition ID, if the policy assignment is for a policy set.

        :param policy_set_definition_id: The policy_set_definition_id of this PolicyEvent.
        :type policy_set_definition_id: str
        """

        self._policy_set_definition_id = policy_set_definition_id

    @property
    def policy_set_definition_name(self):
        """Gets the policy_set_definition_name of this PolicyEvent.

        Policy set definition name, if the policy assignment is for a policy set.

        :return: The policy_set_definition_name of this PolicyEvent.
        :rtype: str
        """
        return self._policy_set_definition_name

    @policy_set_definition_name.setter
    def policy_set_definition_name(self, policy_set_definition_name):
        """Sets the policy_set_definition_name of this PolicyEvent.

        Policy set definition name, if the policy assignment is for a policy set.

        :param policy_set_definition_name: The policy_set_definition_name of this PolicyEvent.
        :type policy_set_definition_name: str
        """

        self._policy_set_definition_name = policy_set_definition_name

    @property
    def policy_set_definition_owner(self):
        """Gets the policy_set_definition_owner of this PolicyEvent.

        Policy set definition owner, if the policy assignment is for a policy set.

        :return: The policy_set_definition_owner of this PolicyEvent.
        :rtype: str
        """
        return self._policy_set_definition_owner

    @policy_set_definition_owner.setter
    def policy_set_definition_owner(self, policy_set_definition_owner):
        """Sets the policy_set_definition_owner of this PolicyEvent.

        Policy set definition owner, if the policy assignment is for a policy set.

        :param policy_set_definition_owner: The policy_set_definition_owner of this PolicyEvent.
        :type policy_set_definition_owner: str
        """

        self._policy_set_definition_owner = policy_set_definition_owner

    @property
    def policy_set_definition_parameters(self):
        """Gets the policy_set_definition_parameters of this PolicyEvent.

        Policy set definition parameters, if the policy assignment is for a policy set.

        :return: The policy_set_definition_parameters of this PolicyEvent.
        :rtype: str
        """
        return self._policy_set_definition_parameters

    @policy_set_definition_parameters.setter
    def policy_set_definition_parameters(self, policy_set_definition_parameters):
        """Sets the policy_set_definition_parameters of this PolicyEvent.

        Policy set definition parameters, if the policy assignment is for a policy set.

        :param policy_set_definition_parameters: The policy_set_definition_parameters of this PolicyEvent.
        :type policy_set_definition_parameters: str
        """

        self._policy_set_definition_parameters = policy_set_definition_parameters

    @property
    def principal_oid(self):
        """Gets the principal_oid of this PolicyEvent.

        Principal object ID for the user who initiated the resource operation that triggered the policy event.

        :return: The principal_oid of this PolicyEvent.
        :rtype: str
        """
        return self._principal_oid

    @principal_oid.setter
    def principal_oid(self, principal_oid):
        """Sets the principal_oid of this PolicyEvent.

        Principal object ID for the user who initiated the resource operation that triggered the policy event.

        :param principal_oid: The principal_oid of this PolicyEvent.
        :type principal_oid: str
        """

        self._principal_oid = principal_oid

    @property
    def resource_group(self):
        """Gets the resource_group of this PolicyEvent.

        Resource group name.

        :return: The resource_group of this PolicyEvent.
        :rtype: str
        """
        return self._resource_group

    @resource_group.setter
    def resource_group(self, resource_group):
        """Sets the resource_group of this PolicyEvent.

        Resource group name.

        :param resource_group: The resource_group of this PolicyEvent.
        :type resource_group: str
        """

        self._resource_group = resource_group

    @property
    def resource_id(self):
        """Gets the resource_id of this PolicyEvent.

        Resource ID.

        :return: The resource_id of this PolicyEvent.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this PolicyEvent.

        Resource ID.

        :param resource_id: The resource_id of this PolicyEvent.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def resource_location(self):
        """Gets the resource_location of this PolicyEvent.

        Resource location.

        :return: The resource_location of this PolicyEvent.
        :rtype: str
        """
        return self._resource_location

    @resource_location.setter
    def resource_location(self, resource_location):
        """Sets the resource_location of this PolicyEvent.

        Resource location.

        :param resource_location: The resource_location of this PolicyEvent.
        :type resource_location: str
        """

        self._resource_location = resource_location

    @property
    def resource_tags(self):
        """Gets the resource_tags of this PolicyEvent.

        List of resource tags.

        :return: The resource_tags of this PolicyEvent.
        :rtype: str
        """
        return self._resource_tags

    @resource_tags.setter
    def resource_tags(self, resource_tags):
        """Sets the resource_tags of this PolicyEvent.

        List of resource tags.

        :param resource_tags: The resource_tags of this PolicyEvent.
        :type resource_tags: str
        """

        self._resource_tags = resource_tags

    @property
    def resource_type(self):
        """Gets the resource_type of this PolicyEvent.

        Resource type.

        :return: The resource_type of this PolicyEvent.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this PolicyEvent.

        Resource type.

        :param resource_type: The resource_type of this PolicyEvent.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def subscription_id(self):
        """Gets the subscription_id of this PolicyEvent.

        Subscription ID.

        :return: The subscription_id of this PolicyEvent.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this PolicyEvent.

        Subscription ID.

        :param subscription_id: The subscription_id of this PolicyEvent.
        :type subscription_id: str
        """

        self._subscription_id = subscription_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this PolicyEvent.

        Tenant ID for the policy event record.

        :return: The tenant_id of this PolicyEvent.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this PolicyEvent.

        Tenant ID for the policy event record.

        :param tenant_id: The tenant_id of this PolicyEvent.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id

    @property
    def timestamp(self):
        """Gets the timestamp of this PolicyEvent.

        Timestamp for the policy event record.

        :return: The timestamp of this PolicyEvent.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this PolicyEvent.

        Timestamp for the policy event record.

        :param timestamp: The timestamp of this PolicyEvent.
        :type timestamp: datetime
        """

        self._timestamp = timestamp
