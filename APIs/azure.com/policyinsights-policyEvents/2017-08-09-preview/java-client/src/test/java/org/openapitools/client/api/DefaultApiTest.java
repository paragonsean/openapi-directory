/*
 * PolicyEventsClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-08-09-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PolicyEventsQueryResults;
import org.openapitools.client.model.QueryFailure;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Queries policy events for the resources under the management group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyEventsListQueryResultsForManagementGroupTest() throws ApiException {
        String policyEventsResource = null;
        String managementGroupsNamespace = null;
        String managementGroupName = null;
        String apiVersion = null;
        Integer $top = null;
        String $orderby = null;
        String $select = null;
        OffsetDateTime $from = null;
        OffsetDateTime $to = null;
        String $filter = null;
        String $apply = null;
        PolicyEventsQueryResults response = api.policyEventsListQueryResultsForManagementGroup(policyEventsResource, managementGroupsNamespace, managementGroupName, apiVersion, $top, $orderby, $select, $from, $to, $filter, $apply);
        // TODO: test validations
    }

    /**
     * Queries policy events for the resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyEventsListQueryResultsForResourceTest() throws ApiException {
        String policyEventsResource = null;
        String resourceId = null;
        String apiVersion = null;
        Integer $top = null;
        String $orderby = null;
        String $select = null;
        OffsetDateTime $from = null;
        OffsetDateTime $to = null;
        String $filter = null;
        String $apply = null;
        PolicyEventsQueryResults response = api.policyEventsListQueryResultsForResource(policyEventsResource, resourceId, apiVersion, $top, $orderby, $select, $from, $to, $filter, $apply);
        // TODO: test validations
    }

    /**
     * Queries policy events for the resources under the resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyEventsListQueryResultsForResourceGroupTest() throws ApiException {
        String policyEventsResource = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        Integer $top = null;
        String $orderby = null;
        String $select = null;
        OffsetDateTime $from = null;
        OffsetDateTime $to = null;
        String $filter = null;
        String $apply = null;
        PolicyEventsQueryResults response = api.policyEventsListQueryResultsForResourceGroup(policyEventsResource, subscriptionId, resourceGroupName, apiVersion, $top, $orderby, $select, $from, $to, $filter, $apply);
        // TODO: test validations
    }

    /**
     * Queries policy events for the resources under the subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void policyEventsListQueryResultsForSubscriptionTest() throws ApiException {
        String policyEventsResource = null;
        String subscriptionId = null;
        String apiVersion = null;
        Integer $top = null;
        String $orderby = null;
        String $select = null;
        OffsetDateTime $from = null;
        OffsetDateTime $to = null;
        String $filter = null;
        String $apply = null;
        PolicyEventsQueryResults response = api.policyEventsListQueryResultsForSubscription(policyEventsResource, subscriptionId, apiVersion, $top, $orderby, $select, $from, $to, $filter, $apply);
        // TODO: test validations
    }

}
