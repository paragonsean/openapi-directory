# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Column(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_type: str=None, name: str=None, ordinal: int=None):
        """Column - a model defined in OpenAPI

        :param data_type: The data_type of this Column.
        :param name: The name of this Column.
        :param ordinal: The ordinal of this Column.
        """
        self.openapi_types = {
            'data_type': str,
            'name': str,
            'ordinal': int
        }

        self.attribute_map = {
            'data_type': 'dataType',
            'name': 'name',
            'ordinal': 'ordinal'
        }

        self._data_type = data_type
        self._name = name
        self._ordinal = ordinal

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Column':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Column of this Column.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_type(self):
        """Gets the data_type of this Column.

        Data type of the column.

        :return: The data_type of this Column.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this Column.

        Data type of the column.

        :param data_type: The data_type of this Column.
        :type data_type: str
        """

        self._data_type = data_type

    @property
    def name(self):
        """Gets the name of this Column.

        Name of the column.

        :return: The name of this Column.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Column.

        Name of the column.

        :param name: The name of this Column.
        :type name: str
        """

        self._name = name

    @property
    def ordinal(self):
        """Gets the ordinal of this Column.

        Ordinal value of the column in a record.

        :return: The ordinal of this Column.
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """Sets the ordinal of this Column.

        Ordinal value of the column in a record.

        :param ordinal: The ordinal of this Column.
        :type ordinal: int
        """

        self._ordinal = ordinal
