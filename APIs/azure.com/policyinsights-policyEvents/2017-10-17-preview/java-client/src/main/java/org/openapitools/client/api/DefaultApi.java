/*
 * PolicyEventsClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-10-17-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import org.openapitools.client.model.PolicyEventsQueryResults;
import org.openapitools.client.model.QueryFailure;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for policyEventsGetMetadata
     * @param scope A valid scope, i.e. management group, subscription, resource group, or resource ID. Scope used has no effect on metadata returned. (required)
     * @param apiVersion API version to use with the client requests. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OData metadata XML document. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyEventsGetMetadataCall(String scope, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.PolicyInsights/policyEvents/$metadata"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyEventsGetMetadataValidateBeforeCall(String scope, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling policyEventsGetMetadata(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policyEventsGetMetadata(Async)");
        }

        return policyEventsGetMetadataCall(scope, apiVersion, _callback);

    }

    /**
     * 
     * Gets OData metadata XML document.
     * @param scope A valid scope, i.e. management group, subscription, resource group, or resource ID. Scope used has no effect on metadata returned. (required)
     * @param apiVersion API version to use with the client requests. (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OData metadata XML document. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public String policyEventsGetMetadata(String scope, String apiVersion) throws ApiException {
        ApiResponse<String> localVarResp = policyEventsGetMetadataWithHttpInfo(scope, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets OData metadata XML document.
     * @param scope A valid scope, i.e. management group, subscription, resource group, or resource ID. Scope used has no effect on metadata returned. (required)
     * @param apiVersion API version to use with the client requests. (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OData metadata XML document. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> policyEventsGetMetadataWithHttpInfo(String scope, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = policyEventsGetMetadataValidateBeforeCall(scope, apiVersion, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets OData metadata XML document.
     * @param scope A valid scope, i.e. management group, subscription, resource group, or resource ID. Scope used has no effect on metadata returned. (required)
     * @param apiVersion API version to use with the client requests. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OData metadata XML document. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyEventsGetMetadataAsync(String scope, String apiVersion, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyEventsGetMetadataValidateBeforeCall(scope, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyEventsListQueryResultsForManagementGroup
     * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only \&quot;default\&quot; is allowed. (required)
     * @param managementGroupsNamespace The namespace for Microsoft Management resource provider; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupName Management group name. (required)
     * @param apiVersion API version to use with the client requests. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $orderby Ordering expression using OData notation. One or more comma-separated column names with an optional \&quot;desc\&quot; (the default) or \&quot;asc\&quot;, e.g. \&quot;$orderby&#x3D;PolicyAssignmentId, ResourceId asc\&quot;. (optional)
     * @param $select Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \&quot;$select&#x3D;PolicyAssignmentId, ResourceId\&quot;. (optional)
     * @param $from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day). (optional)
     * @param $to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time. (optional)
     * @param $filter OData filter expression. (optional)
     * @param $apply OData apply expression for aggregations. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query results. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyEventsListQueryResultsForManagementGroupCall(String policyEventsResource, String managementGroupsNamespace, String managementGroupName, String apiVersion, Integer $top, String $orderby, String $select, OffsetDateTime $from, OffsetDateTime $to, String $filter, String $apply, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults"
            .replace("{" + "policyEventsResource" + "}", localVarApiClient.escapeString(policyEventsResource.toString()))
            .replace("{" + "managementGroupsNamespace" + "}", localVarApiClient.escapeString(managementGroupsNamespace.toString()))
            .replace("{" + "managementGroupName" + "}", localVarApiClient.escapeString(managementGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$from", $from));
        }

        if ($to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$to", $to));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($apply != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$apply", $apply));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyEventsListQueryResultsForManagementGroupValidateBeforeCall(String policyEventsResource, String managementGroupsNamespace, String managementGroupName, String apiVersion, Integer $top, String $orderby, String $select, OffsetDateTime $from, OffsetDateTime $to, String $filter, String $apply, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyEventsResource' is set
        if (policyEventsResource == null) {
            throw new ApiException("Missing the required parameter 'policyEventsResource' when calling policyEventsListQueryResultsForManagementGroup(Async)");
        }

        // verify the required parameter 'managementGroupsNamespace' is set
        if (managementGroupsNamespace == null) {
            throw new ApiException("Missing the required parameter 'managementGroupsNamespace' when calling policyEventsListQueryResultsForManagementGroup(Async)");
        }

        // verify the required parameter 'managementGroupName' is set
        if (managementGroupName == null) {
            throw new ApiException("Missing the required parameter 'managementGroupName' when calling policyEventsListQueryResultsForManagementGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policyEventsListQueryResultsForManagementGroup(Async)");
        }

        return policyEventsListQueryResultsForManagementGroupCall(policyEventsResource, managementGroupsNamespace, managementGroupName, apiVersion, $top, $orderby, $select, $from, $to, $filter, $apply, _callback);

    }

    /**
     * 
     * Queries policy events for the resources under the management group.
     * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only \&quot;default\&quot; is allowed. (required)
     * @param managementGroupsNamespace The namespace for Microsoft Management resource provider; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupName Management group name. (required)
     * @param apiVersion API version to use with the client requests. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $orderby Ordering expression using OData notation. One or more comma-separated column names with an optional \&quot;desc\&quot; (the default) or \&quot;asc\&quot;, e.g. \&quot;$orderby&#x3D;PolicyAssignmentId, ResourceId asc\&quot;. (optional)
     * @param $select Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \&quot;$select&#x3D;PolicyAssignmentId, ResourceId\&quot;. (optional)
     * @param $from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day). (optional)
     * @param $to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time. (optional)
     * @param $filter OData filter expression. (optional)
     * @param $apply OData apply expression for aggregations. (optional)
     * @return PolicyEventsQueryResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query results. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PolicyEventsQueryResults policyEventsListQueryResultsForManagementGroup(String policyEventsResource, String managementGroupsNamespace, String managementGroupName, String apiVersion, Integer $top, String $orderby, String $select, OffsetDateTime $from, OffsetDateTime $to, String $filter, String $apply) throws ApiException {
        ApiResponse<PolicyEventsQueryResults> localVarResp = policyEventsListQueryResultsForManagementGroupWithHttpInfo(policyEventsResource, managementGroupsNamespace, managementGroupName, apiVersion, $top, $orderby, $select, $from, $to, $filter, $apply);
        return localVarResp.getData();
    }

    /**
     * 
     * Queries policy events for the resources under the management group.
     * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only \&quot;default\&quot; is allowed. (required)
     * @param managementGroupsNamespace The namespace for Microsoft Management resource provider; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupName Management group name. (required)
     * @param apiVersion API version to use with the client requests. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $orderby Ordering expression using OData notation. One or more comma-separated column names with an optional \&quot;desc\&quot; (the default) or \&quot;asc\&quot;, e.g. \&quot;$orderby&#x3D;PolicyAssignmentId, ResourceId asc\&quot;. (optional)
     * @param $select Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \&quot;$select&#x3D;PolicyAssignmentId, ResourceId\&quot;. (optional)
     * @param $from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day). (optional)
     * @param $to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time. (optional)
     * @param $filter OData filter expression. (optional)
     * @param $apply OData apply expression for aggregations. (optional)
     * @return ApiResponse&lt;PolicyEventsQueryResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query results. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyEventsQueryResults> policyEventsListQueryResultsForManagementGroupWithHttpInfo(String policyEventsResource, String managementGroupsNamespace, String managementGroupName, String apiVersion, Integer $top, String $orderby, String $select, OffsetDateTime $from, OffsetDateTime $to, String $filter, String $apply) throws ApiException {
        okhttp3.Call localVarCall = policyEventsListQueryResultsForManagementGroupValidateBeforeCall(policyEventsResource, managementGroupsNamespace, managementGroupName, apiVersion, $top, $orderby, $select, $from, $to, $filter, $apply, null);
        Type localVarReturnType = new TypeToken<PolicyEventsQueryResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Queries policy events for the resources under the management group.
     * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only \&quot;default\&quot; is allowed. (required)
     * @param managementGroupsNamespace The namespace for Microsoft Management resource provider; only \&quot;Microsoft.Management\&quot; is allowed. (required)
     * @param managementGroupName Management group name. (required)
     * @param apiVersion API version to use with the client requests. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $orderby Ordering expression using OData notation. One or more comma-separated column names with an optional \&quot;desc\&quot; (the default) or \&quot;asc\&quot;, e.g. \&quot;$orderby&#x3D;PolicyAssignmentId, ResourceId asc\&quot;. (optional)
     * @param $select Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \&quot;$select&#x3D;PolicyAssignmentId, ResourceId\&quot;. (optional)
     * @param $from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day). (optional)
     * @param $to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time. (optional)
     * @param $filter OData filter expression. (optional)
     * @param $apply OData apply expression for aggregations. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query results. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyEventsListQueryResultsForManagementGroupAsync(String policyEventsResource, String managementGroupsNamespace, String managementGroupName, String apiVersion, Integer $top, String $orderby, String $select, OffsetDateTime $from, OffsetDateTime $to, String $filter, String $apply, final ApiCallback<PolicyEventsQueryResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyEventsListQueryResultsForManagementGroupValidateBeforeCall(policyEventsResource, managementGroupsNamespace, managementGroupName, apiVersion, $top, $orderby, $select, $from, $to, $filter, $apply, _callback);
        Type localVarReturnType = new TypeToken<PolicyEventsQueryResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyEventsListQueryResultsForResource
     * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only \&quot;default\&quot; is allowed. (required)
     * @param resourceId Resource ID. (required)
     * @param apiVersion API version to use with the client requests. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $orderby Ordering expression using OData notation. One or more comma-separated column names with an optional \&quot;desc\&quot; (the default) or \&quot;asc\&quot;, e.g. \&quot;$orderby&#x3D;PolicyAssignmentId, ResourceId asc\&quot;. (optional)
     * @param $select Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \&quot;$select&#x3D;PolicyAssignmentId, ResourceId\&quot;. (optional)
     * @param $from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day). (optional)
     * @param $to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time. (optional)
     * @param $filter OData filter expression. (optional)
     * @param $apply OData apply expression for aggregations. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query results. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyEventsListQueryResultsForResourceCall(String policyEventsResource, String resourceId, String apiVersion, Integer $top, String $orderby, String $select, OffsetDateTime $from, OffsetDateTime $to, String $filter, String $apply, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{resourceId}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults"
            .replace("{" + "policyEventsResource" + "}", localVarApiClient.escapeString(policyEventsResource.toString()))
            .replace("{" + "resourceId" + "}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$from", $from));
        }

        if ($to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$to", $to));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($apply != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$apply", $apply));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyEventsListQueryResultsForResourceValidateBeforeCall(String policyEventsResource, String resourceId, String apiVersion, Integer $top, String $orderby, String $select, OffsetDateTime $from, OffsetDateTime $to, String $filter, String $apply, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyEventsResource' is set
        if (policyEventsResource == null) {
            throw new ApiException("Missing the required parameter 'policyEventsResource' when calling policyEventsListQueryResultsForResource(Async)");
        }

        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling policyEventsListQueryResultsForResource(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policyEventsListQueryResultsForResource(Async)");
        }

        return policyEventsListQueryResultsForResourceCall(policyEventsResource, resourceId, apiVersion, $top, $orderby, $select, $from, $to, $filter, $apply, _callback);

    }

    /**
     * 
     * Queries policy events for the resource.
     * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only \&quot;default\&quot; is allowed. (required)
     * @param resourceId Resource ID. (required)
     * @param apiVersion API version to use with the client requests. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $orderby Ordering expression using OData notation. One or more comma-separated column names with an optional \&quot;desc\&quot; (the default) or \&quot;asc\&quot;, e.g. \&quot;$orderby&#x3D;PolicyAssignmentId, ResourceId asc\&quot;. (optional)
     * @param $select Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \&quot;$select&#x3D;PolicyAssignmentId, ResourceId\&quot;. (optional)
     * @param $from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day). (optional)
     * @param $to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time. (optional)
     * @param $filter OData filter expression. (optional)
     * @param $apply OData apply expression for aggregations. (optional)
     * @return PolicyEventsQueryResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query results. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PolicyEventsQueryResults policyEventsListQueryResultsForResource(String policyEventsResource, String resourceId, String apiVersion, Integer $top, String $orderby, String $select, OffsetDateTime $from, OffsetDateTime $to, String $filter, String $apply) throws ApiException {
        ApiResponse<PolicyEventsQueryResults> localVarResp = policyEventsListQueryResultsForResourceWithHttpInfo(policyEventsResource, resourceId, apiVersion, $top, $orderby, $select, $from, $to, $filter, $apply);
        return localVarResp.getData();
    }

    /**
     * 
     * Queries policy events for the resource.
     * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only \&quot;default\&quot; is allowed. (required)
     * @param resourceId Resource ID. (required)
     * @param apiVersion API version to use with the client requests. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $orderby Ordering expression using OData notation. One or more comma-separated column names with an optional \&quot;desc\&quot; (the default) or \&quot;asc\&quot;, e.g. \&quot;$orderby&#x3D;PolicyAssignmentId, ResourceId asc\&quot;. (optional)
     * @param $select Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \&quot;$select&#x3D;PolicyAssignmentId, ResourceId\&quot;. (optional)
     * @param $from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day). (optional)
     * @param $to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time. (optional)
     * @param $filter OData filter expression. (optional)
     * @param $apply OData apply expression for aggregations. (optional)
     * @return ApiResponse&lt;PolicyEventsQueryResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query results. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyEventsQueryResults> policyEventsListQueryResultsForResourceWithHttpInfo(String policyEventsResource, String resourceId, String apiVersion, Integer $top, String $orderby, String $select, OffsetDateTime $from, OffsetDateTime $to, String $filter, String $apply) throws ApiException {
        okhttp3.Call localVarCall = policyEventsListQueryResultsForResourceValidateBeforeCall(policyEventsResource, resourceId, apiVersion, $top, $orderby, $select, $from, $to, $filter, $apply, null);
        Type localVarReturnType = new TypeToken<PolicyEventsQueryResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Queries policy events for the resource.
     * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only \&quot;default\&quot; is allowed. (required)
     * @param resourceId Resource ID. (required)
     * @param apiVersion API version to use with the client requests. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $orderby Ordering expression using OData notation. One or more comma-separated column names with an optional \&quot;desc\&quot; (the default) or \&quot;asc\&quot;, e.g. \&quot;$orderby&#x3D;PolicyAssignmentId, ResourceId asc\&quot;. (optional)
     * @param $select Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \&quot;$select&#x3D;PolicyAssignmentId, ResourceId\&quot;. (optional)
     * @param $from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day). (optional)
     * @param $to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time. (optional)
     * @param $filter OData filter expression. (optional)
     * @param $apply OData apply expression for aggregations. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query results. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyEventsListQueryResultsForResourceAsync(String policyEventsResource, String resourceId, String apiVersion, Integer $top, String $orderby, String $select, OffsetDateTime $from, OffsetDateTime $to, String $filter, String $apply, final ApiCallback<PolicyEventsQueryResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyEventsListQueryResultsForResourceValidateBeforeCall(policyEventsResource, resourceId, apiVersion, $top, $orderby, $select, $from, $to, $filter, $apply, _callback);
        Type localVarReturnType = new TypeToken<PolicyEventsQueryResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyEventsListQueryResultsForResourceGroup
     * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only \&quot;default\&quot; is allowed. (required)
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param apiVersion API version to use with the client requests. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $orderby Ordering expression using OData notation. One or more comma-separated column names with an optional \&quot;desc\&quot; (the default) or \&quot;asc\&quot;, e.g. \&quot;$orderby&#x3D;PolicyAssignmentId, ResourceId asc\&quot;. (optional)
     * @param $select Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \&quot;$select&#x3D;PolicyAssignmentId, ResourceId\&quot;. (optional)
     * @param $from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day). (optional)
     * @param $to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time. (optional)
     * @param $filter OData filter expression. (optional)
     * @param $apply OData apply expression for aggregations. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query results. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyEventsListQueryResultsForResourceGroupCall(String policyEventsResource, String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String $orderby, String $select, OffsetDateTime $from, OffsetDateTime $to, String $filter, String $apply, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults"
            .replace("{" + "policyEventsResource" + "}", localVarApiClient.escapeString(policyEventsResource.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$from", $from));
        }

        if ($to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$to", $to));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($apply != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$apply", $apply));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyEventsListQueryResultsForResourceGroupValidateBeforeCall(String policyEventsResource, String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String $orderby, String $select, OffsetDateTime $from, OffsetDateTime $to, String $filter, String $apply, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyEventsResource' is set
        if (policyEventsResource == null) {
            throw new ApiException("Missing the required parameter 'policyEventsResource' when calling policyEventsListQueryResultsForResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling policyEventsListQueryResultsForResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling policyEventsListQueryResultsForResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policyEventsListQueryResultsForResourceGroup(Async)");
        }

        return policyEventsListQueryResultsForResourceGroupCall(policyEventsResource, subscriptionId, resourceGroupName, apiVersion, $top, $orderby, $select, $from, $to, $filter, $apply, _callback);

    }

    /**
     * 
     * Queries policy events for the resources under the resource group.
     * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only \&quot;default\&quot; is allowed. (required)
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param apiVersion API version to use with the client requests. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $orderby Ordering expression using OData notation. One or more comma-separated column names with an optional \&quot;desc\&quot; (the default) or \&quot;asc\&quot;, e.g. \&quot;$orderby&#x3D;PolicyAssignmentId, ResourceId asc\&quot;. (optional)
     * @param $select Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \&quot;$select&#x3D;PolicyAssignmentId, ResourceId\&quot;. (optional)
     * @param $from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day). (optional)
     * @param $to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time. (optional)
     * @param $filter OData filter expression. (optional)
     * @param $apply OData apply expression for aggregations. (optional)
     * @return PolicyEventsQueryResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query results. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PolicyEventsQueryResults policyEventsListQueryResultsForResourceGroup(String policyEventsResource, String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String $orderby, String $select, OffsetDateTime $from, OffsetDateTime $to, String $filter, String $apply) throws ApiException {
        ApiResponse<PolicyEventsQueryResults> localVarResp = policyEventsListQueryResultsForResourceGroupWithHttpInfo(policyEventsResource, subscriptionId, resourceGroupName, apiVersion, $top, $orderby, $select, $from, $to, $filter, $apply);
        return localVarResp.getData();
    }

    /**
     * 
     * Queries policy events for the resources under the resource group.
     * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only \&quot;default\&quot; is allowed. (required)
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param apiVersion API version to use with the client requests. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $orderby Ordering expression using OData notation. One or more comma-separated column names with an optional \&quot;desc\&quot; (the default) or \&quot;asc\&quot;, e.g. \&quot;$orderby&#x3D;PolicyAssignmentId, ResourceId asc\&quot;. (optional)
     * @param $select Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \&quot;$select&#x3D;PolicyAssignmentId, ResourceId\&quot;. (optional)
     * @param $from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day). (optional)
     * @param $to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time. (optional)
     * @param $filter OData filter expression. (optional)
     * @param $apply OData apply expression for aggregations. (optional)
     * @return ApiResponse&lt;PolicyEventsQueryResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query results. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyEventsQueryResults> policyEventsListQueryResultsForResourceGroupWithHttpInfo(String policyEventsResource, String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String $orderby, String $select, OffsetDateTime $from, OffsetDateTime $to, String $filter, String $apply) throws ApiException {
        okhttp3.Call localVarCall = policyEventsListQueryResultsForResourceGroupValidateBeforeCall(policyEventsResource, subscriptionId, resourceGroupName, apiVersion, $top, $orderby, $select, $from, $to, $filter, $apply, null);
        Type localVarReturnType = new TypeToken<PolicyEventsQueryResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Queries policy events for the resources under the resource group.
     * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only \&quot;default\&quot; is allowed. (required)
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param resourceGroupName Resource group name. (required)
     * @param apiVersion API version to use with the client requests. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $orderby Ordering expression using OData notation. One or more comma-separated column names with an optional \&quot;desc\&quot; (the default) or \&quot;asc\&quot;, e.g. \&quot;$orderby&#x3D;PolicyAssignmentId, ResourceId asc\&quot;. (optional)
     * @param $select Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \&quot;$select&#x3D;PolicyAssignmentId, ResourceId\&quot;. (optional)
     * @param $from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day). (optional)
     * @param $to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time. (optional)
     * @param $filter OData filter expression. (optional)
     * @param $apply OData apply expression for aggregations. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query results. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyEventsListQueryResultsForResourceGroupAsync(String policyEventsResource, String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String $orderby, String $select, OffsetDateTime $from, OffsetDateTime $to, String $filter, String $apply, final ApiCallback<PolicyEventsQueryResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyEventsListQueryResultsForResourceGroupValidateBeforeCall(policyEventsResource, subscriptionId, resourceGroupName, apiVersion, $top, $orderby, $select, $from, $to, $filter, $apply, _callback);
        Type localVarReturnType = new TypeToken<PolicyEventsQueryResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyEventsListQueryResultsForSubscription
     * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only \&quot;default\&quot; is allowed. (required)
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param apiVersion API version to use with the client requests. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $orderby Ordering expression using OData notation. One or more comma-separated column names with an optional \&quot;desc\&quot; (the default) or \&quot;asc\&quot;, e.g. \&quot;$orderby&#x3D;PolicyAssignmentId, ResourceId asc\&quot;. (optional)
     * @param $select Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \&quot;$select&#x3D;PolicyAssignmentId, ResourceId\&quot;. (optional)
     * @param $from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day). (optional)
     * @param $to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time. (optional)
     * @param $filter OData filter expression. (optional)
     * @param $apply OData apply expression for aggregations. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query results. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyEventsListQueryResultsForSubscriptionCall(String policyEventsResource, String subscriptionId, String apiVersion, Integer $top, String $orderby, String $select, OffsetDateTime $from, OffsetDateTime $to, String $filter, String $apply, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults"
            .replace("{" + "policyEventsResource" + "}", localVarApiClient.escapeString(policyEventsResource.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$orderby", $orderby));
        }

        if ($select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$select", $select));
        }

        if ($from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$from", $from));
        }

        if ($to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$to", $to));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($apply != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$apply", $apply));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyEventsListQueryResultsForSubscriptionValidateBeforeCall(String policyEventsResource, String subscriptionId, String apiVersion, Integer $top, String $orderby, String $select, OffsetDateTime $from, OffsetDateTime $to, String $filter, String $apply, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyEventsResource' is set
        if (policyEventsResource == null) {
            throw new ApiException("Missing the required parameter 'policyEventsResource' when calling policyEventsListQueryResultsForSubscription(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling policyEventsListQueryResultsForSubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling policyEventsListQueryResultsForSubscription(Async)");
        }

        return policyEventsListQueryResultsForSubscriptionCall(policyEventsResource, subscriptionId, apiVersion, $top, $orderby, $select, $from, $to, $filter, $apply, _callback);

    }

    /**
     * 
     * Queries policy events for the resources under the subscription.
     * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only \&quot;default\&quot; is allowed. (required)
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param apiVersion API version to use with the client requests. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $orderby Ordering expression using OData notation. One or more comma-separated column names with an optional \&quot;desc\&quot; (the default) or \&quot;asc\&quot;, e.g. \&quot;$orderby&#x3D;PolicyAssignmentId, ResourceId asc\&quot;. (optional)
     * @param $select Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \&quot;$select&#x3D;PolicyAssignmentId, ResourceId\&quot;. (optional)
     * @param $from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day). (optional)
     * @param $to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time. (optional)
     * @param $filter OData filter expression. (optional)
     * @param $apply OData apply expression for aggregations. (optional)
     * @return PolicyEventsQueryResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query results. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public PolicyEventsQueryResults policyEventsListQueryResultsForSubscription(String policyEventsResource, String subscriptionId, String apiVersion, Integer $top, String $orderby, String $select, OffsetDateTime $from, OffsetDateTime $to, String $filter, String $apply) throws ApiException {
        ApiResponse<PolicyEventsQueryResults> localVarResp = policyEventsListQueryResultsForSubscriptionWithHttpInfo(policyEventsResource, subscriptionId, apiVersion, $top, $orderby, $select, $from, $to, $filter, $apply);
        return localVarResp.getData();
    }

    /**
     * 
     * Queries policy events for the resources under the subscription.
     * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only \&quot;default\&quot; is allowed. (required)
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param apiVersion API version to use with the client requests. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $orderby Ordering expression using OData notation. One or more comma-separated column names with an optional \&quot;desc\&quot; (the default) or \&quot;asc\&quot;, e.g. \&quot;$orderby&#x3D;PolicyAssignmentId, ResourceId asc\&quot;. (optional)
     * @param $select Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \&quot;$select&#x3D;PolicyAssignmentId, ResourceId\&quot;. (optional)
     * @param $from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day). (optional)
     * @param $to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time. (optional)
     * @param $filter OData filter expression. (optional)
     * @param $apply OData apply expression for aggregations. (optional)
     * @return ApiResponse&lt;PolicyEventsQueryResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query results. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PolicyEventsQueryResults> policyEventsListQueryResultsForSubscriptionWithHttpInfo(String policyEventsResource, String subscriptionId, String apiVersion, Integer $top, String $orderby, String $select, OffsetDateTime $from, OffsetDateTime $to, String $filter, String $apply) throws ApiException {
        okhttp3.Call localVarCall = policyEventsListQueryResultsForSubscriptionValidateBeforeCall(policyEventsResource, subscriptionId, apiVersion, $top, $orderby, $select, $from, $to, $filter, $apply, null);
        Type localVarReturnType = new TypeToken<PolicyEventsQueryResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Queries policy events for the resources under the subscription.
     * @param policyEventsResource The name of the virtual resource under PolicyEvents resource type; only \&quot;default\&quot; is allowed. (required)
     * @param subscriptionId Microsoft Azure subscription ID. (required)
     * @param apiVersion API version to use with the client requests. (required)
     * @param $top Maximum number of records to return. (optional)
     * @param $orderby Ordering expression using OData notation. One or more comma-separated column names with an optional \&quot;desc\&quot; (the default) or \&quot;asc\&quot;, e.g. \&quot;$orderby&#x3D;PolicyAssignmentId, ResourceId asc\&quot;. (optional)
     * @param $select Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \&quot;$select&#x3D;PolicyAssignmentId, ResourceId\&quot;. (optional)
     * @param $from ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day). (optional)
     * @param $to ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time. (optional)
     * @param $filter OData filter expression. (optional)
     * @param $apply OData apply expression for aggregations. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Query results. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyEventsListQueryResultsForSubscriptionAsync(String policyEventsResource, String subscriptionId, String apiVersion, Integer $top, String $orderby, String $select, OffsetDateTime $from, OffsetDateTime $to, String $filter, String $apply, final ApiCallback<PolicyEventsQueryResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyEventsListQueryResultsForSubscriptionValidateBeforeCall(policyEventsResource, subscriptionId, apiVersion, $top, $orderby, $select, $from, $to, $filter, $apply, _callback);
        Type localVarReturnType = new TypeToken<PolicyEventsQueryResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
