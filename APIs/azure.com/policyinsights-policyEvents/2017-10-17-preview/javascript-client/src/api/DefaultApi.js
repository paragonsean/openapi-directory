/**
 * PolicyEventsClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-10-17-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PolicyEventsQueryResults from '../model/PolicyEventsQueryResults';
import QueryFailure from '../model/QueryFailure';

/**
* Default service.
* @module api/DefaultApi
* @version 2017-10-17-preview
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the policyEventsGetMetadata operation.
     * @callback module:api/DefaultApi~policyEventsGetMetadataCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets OData metadata XML document.
     * @param {String} scope A valid scope, i.e. management group, subscription, resource group, or resource ID. Scope used has no effect on metadata returned.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {module:api/DefaultApi~policyEventsGetMetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    policyEventsGetMetadata(scope, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling policyEventsGetMetadata");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyEventsGetMetadata");
      }

      let pathParams = {
        'scope': scope
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.PolicyInsights/policyEvents/$metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyEventsListQueryResultsForManagementGroup operation.
     * @callback module:api/DefaultApi~policyEventsListQueryResultsForManagementGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyEventsQueryResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries policy events for the resources under the management group.
     * @param {module:model/String} policyEventsResource The name of the virtual resource under PolicyEvents resource type; only \"default\" is allowed.
     * @param {module:model/String} managementGroupsNamespace The namespace for Microsoft Management resource provider; only \"Microsoft.Management\" is allowed.
     * @param {String} managementGroupName Management group name.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {String} [orderby] Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
     * @param {String} [select] Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {String} [apply] OData apply expression for aggregations.
     * @param {module:api/DefaultApi~policyEventsListQueryResultsForManagementGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyEventsQueryResults}
     */
    policyEventsListQueryResultsForManagementGroup(policyEventsResource, managementGroupsNamespace, managementGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyEventsResource' is set
      if (policyEventsResource === undefined || policyEventsResource === null) {
        throw new Error("Missing the required parameter 'policyEventsResource' when calling policyEventsListQueryResultsForManagementGroup");
      }
      // verify the required parameter 'managementGroupsNamespace' is set
      if (managementGroupsNamespace === undefined || managementGroupsNamespace === null) {
        throw new Error("Missing the required parameter 'managementGroupsNamespace' when calling policyEventsListQueryResultsForManagementGroup");
      }
      // verify the required parameter 'managementGroupName' is set
      if (managementGroupName === undefined || managementGroupName === null) {
        throw new Error("Missing the required parameter 'managementGroupName' when calling policyEventsListQueryResultsForManagementGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyEventsListQueryResultsForManagementGroup");
      }

      let pathParams = {
        'policyEventsResource': policyEventsResource,
        'managementGroupsNamespace': managementGroupsNamespace,
        'managementGroupName': managementGroupName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        '$select': opts['select'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter'],
        '$apply': opts['apply']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyEventsQueryResults;
      return this.apiClient.callApi(
        '/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyEventsListQueryResultsForResource operation.
     * @callback module:api/DefaultApi~policyEventsListQueryResultsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyEventsQueryResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries policy events for the resource.
     * @param {module:model/String} policyEventsResource The name of the virtual resource under PolicyEvents resource type; only \"default\" is allowed.
     * @param {String} resourceId Resource ID.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {String} [orderby] Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
     * @param {String} [select] Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {String} [apply] OData apply expression for aggregations.
     * @param {module:api/DefaultApi~policyEventsListQueryResultsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyEventsQueryResults}
     */
    policyEventsListQueryResultsForResource(policyEventsResource, resourceId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyEventsResource' is set
      if (policyEventsResource === undefined || policyEventsResource === null) {
        throw new Error("Missing the required parameter 'policyEventsResource' when calling policyEventsListQueryResultsForResource");
      }
      // verify the required parameter 'resourceId' is set
      if (resourceId === undefined || resourceId === null) {
        throw new Error("Missing the required parameter 'resourceId' when calling policyEventsListQueryResultsForResource");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyEventsListQueryResultsForResource");
      }

      let pathParams = {
        'policyEventsResource': policyEventsResource,
        'resourceId': resourceId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        '$select': opts['select'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter'],
        '$apply': opts['apply']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyEventsQueryResults;
      return this.apiClient.callApi(
        '/{resourceId}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyEventsListQueryResultsForResourceGroup operation.
     * @callback module:api/DefaultApi~policyEventsListQueryResultsForResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyEventsQueryResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries policy events for the resources under the resource group.
     * @param {module:model/String} policyEventsResource The name of the virtual resource under PolicyEvents resource type; only \"default\" is allowed.
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {String} resourceGroupName Resource group name.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {String} [orderby] Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
     * @param {String} [select] Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {String} [apply] OData apply expression for aggregations.
     * @param {module:api/DefaultApi~policyEventsListQueryResultsForResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyEventsQueryResults}
     */
    policyEventsListQueryResultsForResourceGroup(policyEventsResource, subscriptionId, resourceGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyEventsResource' is set
      if (policyEventsResource === undefined || policyEventsResource === null) {
        throw new Error("Missing the required parameter 'policyEventsResource' when calling policyEventsListQueryResultsForResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policyEventsListQueryResultsForResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling policyEventsListQueryResultsForResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyEventsListQueryResultsForResourceGroup");
      }

      let pathParams = {
        'policyEventsResource': policyEventsResource,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        '$select': opts['select'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter'],
        '$apply': opts['apply']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyEventsQueryResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the policyEventsListQueryResultsForSubscription operation.
     * @callback module:api/DefaultApi~policyEventsListQueryResultsForSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PolicyEventsQueryResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Queries policy events for the resources under the subscription.
     * @param {module:model/String} policyEventsResource The name of the virtual resource under PolicyEvents resource type; only \"default\" is allowed.
     * @param {String} subscriptionId Microsoft Azure subscription ID.
     * @param {String} apiVersion API version to use with the client requests.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] Maximum number of records to return.
     * @param {String} [orderby] Ordering expression using OData notation. One or more comma-separated column names with an optional \"desc\" (the default) or \"asc\", e.g. \"$orderby=PolicyAssignmentId, ResourceId asc\".
     * @param {String} [select] Select expression using OData notation. Limits the columns on each record to just those requested, e.g. \"$select=PolicyAssignmentId, ResourceId\".
     * @param {Date} [from] ISO 8601 formatted timestamp specifying the start time of the interval to query. When not specified, the service uses ($to - 1-day).
     * @param {Date} [to] ISO 8601 formatted timestamp specifying the end time of the interval to query. When not specified, the service uses request time.
     * @param {String} [filter] OData filter expression.
     * @param {String} [apply] OData apply expression for aggregations.
     * @param {module:api/DefaultApi~policyEventsListQueryResultsForSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PolicyEventsQueryResults}
     */
    policyEventsListQueryResultsForSubscription(policyEventsResource, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'policyEventsResource' is set
      if (policyEventsResource === undefined || policyEventsResource === null) {
        throw new Error("Missing the required parameter 'policyEventsResource' when calling policyEventsListQueryResultsForSubscription");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling policyEventsListQueryResultsForSubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling policyEventsListQueryResultsForSubscription");
      }

      let pathParams = {
        'policyEventsResource': policyEventsResource,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$orderby': opts['orderby'],
        '$select': opts['select'],
        '$from': opts['from'],
        '$to': opts['to'],
        '$filter': opts['filter'],
        '$apply': opts['apply']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PolicyEventsQueryResults;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
