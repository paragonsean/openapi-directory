/**
 * PolicyEventsClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-10-17-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPolicyEventsQueryResults.h"
#include "OAIQueryFailure.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void policyEventsGetMetadata(const QString &scope, const QString &api_version);

    /**
    * @param[in]  policy_events_resource QString [required]
    * @param[in]  management_groups_namespace QString [required]
    * @param[in]  management_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void policyEventsListQueryResultsForManagementGroup(const QString &policy_events_resource, const QString &management_groups_namespace, const QString &management_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_events_resource QString [required]
    * @param[in]  resource_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void policyEventsListQueryResultsForResource(const QString &policy_events_resource, const QString &resource_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_events_resource QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void policyEventsListQueryResultsForResourceGroup(const QString &policy_events_resource, const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  policy_events_resource QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  from QDateTime [optional]
    * @param[in]  to QDateTime [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  apply QString [optional]
    */
    virtual void policyEventsListQueryResultsForSubscription(const QString &policy_events_resource, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &from = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &to = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &apply = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void policyEventsGetMetadataCallback(OAIHttpRequestWorker *worker);
    void policyEventsListQueryResultsForManagementGroupCallback(OAIHttpRequestWorker *worker);
    void policyEventsListQueryResultsForResourceCallback(OAIHttpRequestWorker *worker);
    void policyEventsListQueryResultsForResourceGroupCallback(OAIHttpRequestWorker *worker);
    void policyEventsListQueryResultsForSubscriptionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void policyEventsGetMetadataSignal(QString summary);
    void policyEventsListQueryResultsForManagementGroupSignal(OAIPolicyEventsQueryResults summary);
    void policyEventsListQueryResultsForResourceSignal(OAIPolicyEventsQueryResults summary);
    void policyEventsListQueryResultsForResourceGroupSignal(OAIPolicyEventsQueryResults summary);
    void policyEventsListQueryResultsForSubscriptionSignal(OAIPolicyEventsQueryResults summary);


    void policyEventsGetMetadataSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void policyEventsListQueryResultsForManagementGroupSignalFull(OAIHttpRequestWorker *worker, OAIPolicyEventsQueryResults summary);
    void policyEventsListQueryResultsForResourceSignalFull(OAIHttpRequestWorker *worker, OAIPolicyEventsQueryResults summary);
    void policyEventsListQueryResultsForResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIPolicyEventsQueryResults summary);
    void policyEventsListQueryResultsForSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIPolicyEventsQueryResults summary);

    Q_DECL_DEPRECATED_X("Use policyEventsGetMetadataSignalError() instead")
    void policyEventsGetMetadataSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyEventsGetMetadataSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyEventsListQueryResultsForManagementGroupSignalError() instead")
    void policyEventsListQueryResultsForManagementGroupSignalE(OAIPolicyEventsQueryResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyEventsListQueryResultsForManagementGroupSignalError(OAIPolicyEventsQueryResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyEventsListQueryResultsForResourceSignalError() instead")
    void policyEventsListQueryResultsForResourceSignalE(OAIPolicyEventsQueryResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyEventsListQueryResultsForResourceSignalError(OAIPolicyEventsQueryResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyEventsListQueryResultsForResourceGroupSignalError() instead")
    void policyEventsListQueryResultsForResourceGroupSignalE(OAIPolicyEventsQueryResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyEventsListQueryResultsForResourceGroupSignalError(OAIPolicyEventsQueryResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyEventsListQueryResultsForSubscriptionSignalError() instead")
    void policyEventsListQueryResultsForSubscriptionSignalE(OAIPolicyEventsQueryResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void policyEventsListQueryResultsForSubscriptionSignalError(OAIPolicyEventsQueryResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use policyEventsGetMetadataSignalErrorFull() instead")
    void policyEventsGetMetadataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyEventsGetMetadataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyEventsListQueryResultsForManagementGroupSignalErrorFull() instead")
    void policyEventsListQueryResultsForManagementGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyEventsListQueryResultsForManagementGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyEventsListQueryResultsForResourceSignalErrorFull() instead")
    void policyEventsListQueryResultsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyEventsListQueryResultsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyEventsListQueryResultsForResourceGroupSignalErrorFull() instead")
    void policyEventsListQueryResultsForResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyEventsListQueryResultsForResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use policyEventsListQueryResultsForSubscriptionSignalErrorFull() instead")
    void policyEventsListQueryResultsForSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void policyEventsListQueryResultsForSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
