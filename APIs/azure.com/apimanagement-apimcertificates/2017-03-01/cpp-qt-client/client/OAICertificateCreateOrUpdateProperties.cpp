/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Certificate entity in your Azure API Management deployment. Certificates can be used to setup mutual authentication with your Backend in API Management. For more information refer to [How to secure backend using Mutual Auth Certificate](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-mutual-certificates).
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateCreateOrUpdateProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateCreateOrUpdateProperties::OAICertificateCreateOrUpdateProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateCreateOrUpdateProperties::OAICertificateCreateOrUpdateProperties() {
    this->initializeModel();
}

OAICertificateCreateOrUpdateProperties::~OAICertificateCreateOrUpdateProperties() {}

void OAICertificateCreateOrUpdateProperties::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;
}

void OAICertificateCreateOrUpdateProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateCreateOrUpdateProperties::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;
}

QString OAICertificateCreateOrUpdateProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateCreateOrUpdateProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    return obj;
}

QString OAICertificateCreateOrUpdateProperties::getData() const {
    return m_data;
}
void OAICertificateCreateOrUpdateProperties::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAICertificateCreateOrUpdateProperties::is_data_Set() const{
    return m_data_isSet;
}

bool OAICertificateCreateOrUpdateProperties::is_data_Valid() const{
    return m_data_isValid;
}

QString OAICertificateCreateOrUpdateProperties::getPassword() const {
    return m_password;
}
void OAICertificateCreateOrUpdateProperties::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAICertificateCreateOrUpdateProperties::is_password_Set() const{
    return m_password_isSet;
}

bool OAICertificateCreateOrUpdateProperties::is_password_Valid() const{
    return m_password_isValid;
}

bool OAICertificateCreateOrUpdateProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateCreateOrUpdateProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && m_password_isValid && true;
}

} // namespace OpenAPI
