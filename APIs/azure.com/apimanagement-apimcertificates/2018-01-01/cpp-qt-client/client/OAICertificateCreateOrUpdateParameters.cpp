/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Certificate entity in your Azure API Management deployment. Certificates can be used to setup mutual authentication with your Backend in API Management. For more information refer to [How to secure backend using Mutual Auth Certificate](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-mutual-certificates).
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateCreateOrUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateCreateOrUpdateParameters::OAICertificateCreateOrUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateCreateOrUpdateParameters::OAICertificateCreateOrUpdateParameters() {
    this->initializeModel();
}

OAICertificateCreateOrUpdateParameters::~OAICertificateCreateOrUpdateParameters() {}

void OAICertificateCreateOrUpdateParameters::initializeModel() {

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAICertificateCreateOrUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateCreateOrUpdateParameters::fromJsonObject(QJsonObject json) {

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAICertificateCreateOrUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateCreateOrUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

OAICertificateCreateOrUpdateProperties OAICertificateCreateOrUpdateParameters::getProperties() const {
    return m_properties;
}
void OAICertificateCreateOrUpdateParameters::setProperties(const OAICertificateCreateOrUpdateProperties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAICertificateCreateOrUpdateParameters::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAICertificateCreateOrUpdateParameters::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAICertificateCreateOrUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateCreateOrUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
