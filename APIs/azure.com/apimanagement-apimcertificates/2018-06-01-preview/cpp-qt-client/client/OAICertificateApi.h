/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Certificate entity in your Azure API Management deployment. Certificates can be used to setup mutual authentication with your Backend in API Management. For more information refer to [How to secure backend using Mutual Auth Certificate](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-mutual-certificates).
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICertificateApi_H
#define OAI_OAICertificateApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICertificate_CreateOrUpdate_request.h"
#include "OAICertificate_Get_200_response.h"
#include "OAICertificate_ListByService_200_response.h"
#include "OAICertificate_ListByService_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICertificateApi : public QObject {
    Q_OBJECT

public:
    OAICertificateApi(const int timeOut = 0);
    ~OAICertificateApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  certificate_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAICertificate_CreateOrUpdate_request [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void certificateCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &certificate_id, const QString &api_version, const QString &subscription_id, const OAICertificate_CreateOrUpdate_request &parameters, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  certificate_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void certificateDelete(const QString &resource_group_name, const QString &service_name, const QString &certificate_id, const QString &if_match, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  certificate_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void certificateGet(const QString &resource_group_name, const QString &service_name, const QString &certificate_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  certificate_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void certificateGetEntityTag(const QString &resource_group_name, const QString &service_name, const QString &certificate_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    */
    virtual void certificateListByService(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void certificateCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void certificateDeleteCallback(OAIHttpRequestWorker *worker);
    void certificateGetCallback(OAIHttpRequestWorker *worker);
    void certificateGetEntityTagCallback(OAIHttpRequestWorker *worker);
    void certificateListByServiceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void certificateCreateOrUpdateSignal(OAICertificate_Get_200_response summary);
    void certificateDeleteSignal();
    void certificateGetSignal(OAICertificate_Get_200_response summary);
    void certificateGetEntityTagSignal();
    void certificateListByServiceSignal(OAICertificate_ListByService_200_response summary);


    void certificateCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAICertificate_Get_200_response summary);
    void certificateDeleteSignalFull(OAIHttpRequestWorker *worker);
    void certificateGetSignalFull(OAIHttpRequestWorker *worker, OAICertificate_Get_200_response summary);
    void certificateGetEntityTagSignalFull(OAIHttpRequestWorker *worker);
    void certificateListByServiceSignalFull(OAIHttpRequestWorker *worker, OAICertificate_ListByService_200_response summary);

    Q_DECL_DEPRECATED_X("Use certificateCreateOrUpdateSignalError() instead")
    void certificateCreateOrUpdateSignalE(OAICertificate_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateCreateOrUpdateSignalError(OAICertificate_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateDeleteSignalError() instead")
    void certificateDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void certificateDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateGetSignalError() instead")
    void certificateGetSignalE(OAICertificate_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateGetSignalError(OAICertificate_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateGetEntityTagSignalError() instead")
    void certificateGetEntityTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void certificateGetEntityTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateListByServiceSignalError() instead")
    void certificateListByServiceSignalE(OAICertificate_ListByService_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateListByServiceSignalError(OAICertificate_ListByService_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use certificateCreateOrUpdateSignalErrorFull() instead")
    void certificateCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateDeleteSignalErrorFull() instead")
    void certificateDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateGetSignalErrorFull() instead")
    void certificateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateGetEntityTagSignalErrorFull() instead")
    void certificateGetEntityTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateGetEntityTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificateListByServiceSignalErrorFull() instead")
    void certificateListByServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificateListByServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
