/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on Certificate entity in your Azure API Management deployment. Certificates can be used to setup mutual authentication with your Backend in API Management. For more information refer to [How to secure backend using Mutual Auth Certificate](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-mutual-certificates).
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CertificateCreateOrUpdateRequest;
import org.openapitools.client.model.CertificateGet200Response;
import org.openapitools.client.model.CertificateListByService200Response;
import org.openapitools.client.model.CertificateListByServiceDefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CertificateApi
 */
@Disabled
public class CertificateApiTest {

    private final CertificateApi api = new CertificateApi();

    /**
     * Creates or updates the certificate being used for authentication with the backend.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String certificateId = null;
        String apiVersion = null;
        String subscriptionId = null;
        CertificateCreateOrUpdateRequest parameters = null;
        String ifMatch = null;
        CertificateGet200Response response = api.certificateCreateOrUpdate(resourceGroupName, serviceName, certificateId, apiVersion, subscriptionId, parameters, ifMatch);
        // TODO: test validations
    }

    /**
     * Deletes specific certificate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String certificateId = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.certificateDelete(resourceGroupName, serviceName, certificateId, ifMatch, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the details of the certificate specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateGetTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String certificateId = null;
        String apiVersion = null;
        String subscriptionId = null;
        CertificateGet200Response response = api.certificateGet(resourceGroupName, serviceName, certificateId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the entity state (Etag) version of the certificate specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateGetEntityTagTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String certificateId = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.certificateGetEntityTag(resourceGroupName, serviceName, certificateId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists a collection of all certificates in the specified service instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void certificateListByServiceTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        CertificateListByService200Response response = api.certificateListByService(resourceGroupName, serviceName, apiVersion, subscriptionId, $filter, $top, $skip);
        // TODO: test validations
    }

}
