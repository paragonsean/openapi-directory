# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CertificateListByService200ResponseValueInnerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiration_date: datetime=None, subject: str=None, thumbprint: str=None):
        """CertificateListByService200ResponseValueInnerProperties - a model defined in OpenAPI

        :param expiration_date: The expiration_date of this CertificateListByService200ResponseValueInnerProperties.
        :param subject: The subject of this CertificateListByService200ResponseValueInnerProperties.
        :param thumbprint: The thumbprint of this CertificateListByService200ResponseValueInnerProperties.
        """
        self.openapi_types = {
            'expiration_date': datetime,
            'subject': str,
            'thumbprint': str
        }

        self.attribute_map = {
            'expiration_date': 'expirationDate',
            'subject': 'subject',
            'thumbprint': 'thumbprint'
        }

        self._expiration_date = expiration_date
        self._subject = subject
        self._thumbprint = thumbprint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CertificateListByService200ResponseValueInnerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Certificate_ListByService_200_response_value_inner_properties of this CertificateListByService200ResponseValueInnerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiration_date(self):
        """Gets the expiration_date of this CertificateListByService200ResponseValueInnerProperties.

        Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :return: The expiration_date of this CertificateListByService200ResponseValueInnerProperties.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this CertificateListByService200ResponseValueInnerProperties.

        Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :param expiration_date: The expiration_date of this CertificateListByService200ResponseValueInnerProperties.
        :type expiration_date: datetime
        """
        if expiration_date is None:
            raise ValueError("Invalid value for `expiration_date`, must not be `None`")

        self._expiration_date = expiration_date

    @property
    def subject(self):
        """Gets the subject of this CertificateListByService200ResponseValueInnerProperties.

        Subject attribute of the certificate.

        :return: The subject of this CertificateListByService200ResponseValueInnerProperties.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CertificateListByService200ResponseValueInnerProperties.

        Subject attribute of the certificate.

        :param subject: The subject of this CertificateListByService200ResponseValueInnerProperties.
        :type subject: str
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def thumbprint(self):
        """Gets the thumbprint of this CertificateListByService200ResponseValueInnerProperties.

        Thumbprint of the certificate.

        :return: The thumbprint of this CertificateListByService200ResponseValueInnerProperties.
        :rtype: str
        """
        return self._thumbprint

    @thumbprint.setter
    def thumbprint(self, thumbprint):
        """Sets the thumbprint of this CertificateListByService200ResponseValueInnerProperties.

        Thumbprint of the certificate.

        :param thumbprint: The thumbprint of this CertificateListByService200ResponseValueInnerProperties.
        :type thumbprint: str
        """
        if thumbprint is None:
            raise ValueError("Invalid value for `thumbprint`, must not be `None`")

        self._thumbprint = thumbprint
