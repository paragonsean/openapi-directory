/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Certificate entity in your Azure API Management deployment. Certificates can be used to setup mutual authentication with your Backend in API Management. For more information refer to [How to secure backend using Mutual Auth Certificate](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-mutual-certificates).
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificate_ListByService_200_response_value_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificate_ListByService_200_response_value_inner::OAICertificate_ListByService_200_response_value_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificate_ListByService_200_response_value_inner::OAICertificate_ListByService_200_response_value_inner() {
    this->initializeModel();
}

OAICertificate_ListByService_200_response_value_inner::~OAICertificate_ListByService_200_response_value_inner() {}

void OAICertificate_ListByService_200_response_value_inner::initializeModel() {

    m_properties_isSet = false;
    m_properties_isValid = false;
}

void OAICertificate_ListByService_200_response_value_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificate_ListByService_200_response_value_inner::fromJsonObject(QJsonObject json) {

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;
}

QString OAICertificate_ListByService_200_response_value_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificate_ListByService_200_response_value_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    return obj;
}

OAICertificate_ListByService_200_response_value_inner_properties OAICertificate_ListByService_200_response_value_inner::getProperties() const {
    return m_properties;
}
void OAICertificate_ListByService_200_response_value_inner::setProperties(const OAICertificate_ListByService_200_response_value_inner_properties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAICertificate_ListByService_200_response_value_inner::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAICertificate_ListByService_200_response_value_inner::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAICertificate_ListByService_200_response_value_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificate_ListByService_200_response_value_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
