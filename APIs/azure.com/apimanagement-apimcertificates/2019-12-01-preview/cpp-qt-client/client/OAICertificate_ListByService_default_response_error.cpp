/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Certificate entity in your Azure API Management deployment. Certificates can be used to setup mutual authentication with your Backend in API Management. For more information refer to [How to secure backend using Mutual Auth Certificate](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-mutual-certificates).
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificate_ListByService_default_response_error.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificate_ListByService_default_response_error::OAICertificate_ListByService_default_response_error(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificate_ListByService_default_response_error::OAICertificate_ListByService_default_response_error() {
    this->initializeModel();
}

OAICertificate_ListByService_default_response_error::~OAICertificate_ListByService_default_response_error() {}

void OAICertificate_ListByService_default_response_error::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAICertificate_ListByService_default_response_error::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificate_ListByService_default_response_error::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAICertificate_ListByService_default_response_error::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificate_ListByService_default_response_error::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAICertificate_ListByService_default_response_error::getCode() const {
    return m_code;
}
void OAICertificate_ListByService_default_response_error::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAICertificate_ListByService_default_response_error::is_code_Set() const{
    return m_code_isSet;
}

bool OAICertificate_ListByService_default_response_error::is_code_Valid() const{
    return m_code_isValid;
}

QList<OAICertificate_ListByService_default_response_error_details_inner> OAICertificate_ListByService_default_response_error::getDetails() const {
    return m_details;
}
void OAICertificate_ListByService_default_response_error::setDetails(const QList<OAICertificate_ListByService_default_response_error_details_inner> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAICertificate_ListByService_default_response_error::is_details_Set() const{
    return m_details_isSet;
}

bool OAICertificate_ListByService_default_response_error::is_details_Valid() const{
    return m_details_isValid;
}

QString OAICertificate_ListByService_default_response_error::getMessage() const {
    return m_message;
}
void OAICertificate_ListByService_default_response_error::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICertificate_ListByService_default_response_error::is_message_Set() const{
    return m_message_isSet;
}

bool OAICertificate_ListByService_default_response_error::is_message_Valid() const{
    return m_message_isValid;
}

bool OAICertificate_ListByService_default_response_error::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificate_ListByService_default_response_error::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
