/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Certificate entity in your Azure API Management deployment. Certificates can be used to setup mutual authentication with your Backend in API Management. For more information refer to [How to secure backend using Mutual Auth Certificate](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-mutual-certificates).
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CertificateListByService200ResponseValueInnerProperties model module.
 * @module model/CertificateListByService200ResponseValueInnerProperties
 * @version 2019-12-01-preview
 */
class CertificateListByService200ResponseValueInnerProperties {
    /**
     * Constructs a new <code>CertificateListByService200ResponseValueInnerProperties</code>.
     * Properties of the Certificate contract.
     * @alias module:model/CertificateListByService200ResponseValueInnerProperties
     * @param expirationDate {Date} Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
     * @param subject {String} Subject attribute of the certificate.
     * @param thumbprint {String} Thumbprint of the certificate.
     */
    constructor(expirationDate, subject, thumbprint) { 
        
        CertificateListByService200ResponseValueInnerProperties.initialize(this, expirationDate, subject, thumbprint);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expirationDate, subject, thumbprint) { 
        obj['expirationDate'] = expirationDate;
        obj['subject'] = subject;
        obj['thumbprint'] = thumbprint;
    }

    /**
     * Constructs a <code>CertificateListByService200ResponseValueInnerProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CertificateListByService200ResponseValueInnerProperties} obj Optional instance to populate.
     * @return {module:model/CertificateListByService200ResponseValueInnerProperties} The populated <code>CertificateListByService200ResponseValueInnerProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CertificateListByService200ResponseValueInnerProperties();

            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ApiClient.convertToType(data['expirationDate'], 'Date');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('thumbprint')) {
                obj['thumbprint'] = ApiClient.convertToType(data['thumbprint'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CertificateListByService200ResponseValueInnerProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CertificateListByService200ResponseValueInnerProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CertificateListByService200ResponseValueInnerProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // ensure the json data is a string
        if (data['thumbprint'] && !(typeof data['thumbprint'] === 'string' || data['thumbprint'] instanceof String)) {
            throw new Error("Expected the field `thumbprint` to be a primitive type in the JSON string but got " + data['thumbprint']);
        }

        return true;
    }


}

CertificateListByService200ResponseValueInnerProperties.RequiredProperties = ["expirationDate", "subject", "thumbprint"];

/**
 * Expiration date of the certificate. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
 * @member {Date} expirationDate
 */
CertificateListByService200ResponseValueInnerProperties.prototype['expirationDate'] = undefined;

/**
 * Subject attribute of the certificate.
 * @member {String} subject
 */
CertificateListByService200ResponseValueInnerProperties.prototype['subject'] = undefined;

/**
 * Thumbprint of the certificate.
 * @member {String} thumbprint
 */
CertificateListByService200ResponseValueInnerProperties.prototype['thumbprint'] = undefined;






export default CertificateListByService200ResponseValueInnerProperties;

