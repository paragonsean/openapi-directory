/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Certificate entity in your Azure API Management deployment. Certificates can be used to setup mutual authentication with your Backend in API Management. For more information refer to [How to secure backend using Mutual Auth Certificate](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-mutual-certificates).
 *
 * The version of the OpenAPI document: 2016-10-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICertificatesApi_H
#define OAI_OAICertificatesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICertificateCollection.h"
#include "OAICertificateContract.h"
#include "OAICertificateCreateOrUpdateParameters.h"
#include "OAICertificates_ListByService_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICertificatesApi : public QObject {
    Q_OBJECT

public:
    OAICertificatesApi(const int timeOut = 0);
    ~OAICertificatesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  certificate_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAICertificateCreateOrUpdateParameters [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void certificatesCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &certificate_id, const QString &api_version, const QString &subscription_id, const OAICertificateCreateOrUpdateParameters &parameters, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  certificate_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void certificatesDelete(const QString &resource_group_name, const QString &service_name, const QString &certificate_id, const QString &if_match, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  certificate_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void certificatesGet(const QString &resource_group_name, const QString &service_name, const QString &certificate_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    */
    virtual void certificatesListByService(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void certificatesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void certificatesDeleteCallback(OAIHttpRequestWorker *worker);
    void certificatesGetCallback(OAIHttpRequestWorker *worker);
    void certificatesListByServiceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void certificatesCreateOrUpdateSignal();
    void certificatesDeleteSignal();
    void certificatesGetSignal(OAICertificateContract summary);
    void certificatesListByServiceSignal(OAICertificateCollection summary);


    void certificatesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker);
    void certificatesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void certificatesGetSignalFull(OAIHttpRequestWorker *worker, OAICertificateContract summary);
    void certificatesListByServiceSignalFull(OAIHttpRequestWorker *worker, OAICertificateCollection summary);

    Q_DECL_DEPRECATED_X("Use certificatesCreateOrUpdateSignalError() instead")
    void certificatesCreateOrUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesCreateOrUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesDeleteSignalError() instead")
    void certificatesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesGetSignalError() instead")
    void certificatesGetSignalE(OAICertificateContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesGetSignalError(OAICertificateContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesListByServiceSignalError() instead")
    void certificatesListByServiceSignalE(OAICertificateCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesListByServiceSignalError(OAICertificateCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use certificatesCreateOrUpdateSignalErrorFull() instead")
    void certificatesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesDeleteSignalErrorFull() instead")
    void certificatesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesGetSignalErrorFull() instead")
    void certificatesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use certificatesListByServiceSignalErrorFull() instead")
    void certificatesListByServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void certificatesListByServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
