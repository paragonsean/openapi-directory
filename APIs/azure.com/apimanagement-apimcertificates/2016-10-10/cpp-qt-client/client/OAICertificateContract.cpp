/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Certificate entity in your Azure API Management deployment. Certificates can be used to setup mutual authentication with your Backend in API Management. For more information refer to [How to secure backend using Mutual Auth Certificate](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-mutual-certificates).
 *
 * The version of the OpenAPI document: 2016-10-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICertificateContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICertificateContract::OAICertificateContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICertificateContract::OAICertificateContract() {
    this->initializeModel();
}

OAICertificateContract::~OAICertificateContract() {}

void OAICertificateContract::initializeModel() {

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_thumbprint_isSet = false;
    m_thumbprint_isValid = false;
}

void OAICertificateContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICertificateContract::fromJsonObject(QJsonObject json) {

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_thumbprint, json[QString("thumbprint")]);
    m_thumbprint_isSet = !json[QString("thumbprint")].isNull() && m_thumbprint_isValid;
}

QString OAICertificateContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICertificateContract::asJsonObject() const {
    QJsonObject obj;
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_thumbprint_isSet) {
        obj.insert(QString("thumbprint"), ::OpenAPI::toJsonValue(m_thumbprint));
    }
    return obj;
}

QDateTime OAICertificateContract::getExpirationDate() const {
    return m_expiration_date;
}
void OAICertificateContract::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAICertificateContract::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAICertificateContract::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAICertificateContract::getId() const {
    return m_id;
}
void OAICertificateContract::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICertificateContract::is_id_Set() const{
    return m_id_isSet;
}

bool OAICertificateContract::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICertificateContract::getSubject() const {
    return m_subject;
}
void OAICertificateContract::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAICertificateContract::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAICertificateContract::is_subject_Valid() const{
    return m_subject_isValid;
}

QString OAICertificateContract::getThumbprint() const {
    return m_thumbprint;
}
void OAICertificateContract::setThumbprint(const QString &thumbprint) {
    m_thumbprint = thumbprint;
    m_thumbprint_isSet = true;
}

bool OAICertificateContract::is_thumbprint_Set() const{
    return m_thumbprint_isSet;
}

bool OAICertificateContract::is_thumbprint_Valid() const{
    return m_thumbprint_isValid;
}

bool OAICertificateContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICertificateContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expiration_date_isValid && m_subject_isValid && m_thumbprint_isValid && true;
}

} // namespace OpenAPI
