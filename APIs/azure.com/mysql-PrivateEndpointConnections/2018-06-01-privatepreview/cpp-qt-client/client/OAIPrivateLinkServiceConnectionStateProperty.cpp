/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files and configurations with new business model.
 *
 * The version of the OpenAPI document: 2018-06-01-privatepreview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateLinkServiceConnectionStateProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateLinkServiceConnectionStateProperty::OAIPrivateLinkServiceConnectionStateProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateLinkServiceConnectionStateProperty::OAIPrivateLinkServiceConnectionStateProperty() {
    this->initializeModel();
}

OAIPrivateLinkServiceConnectionStateProperty::~OAIPrivateLinkServiceConnectionStateProperty() {}

void OAIPrivateLinkServiceConnectionStateProperty::initializeModel() {

    m_actions_required_isSet = false;
    m_actions_required_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIPrivateLinkServiceConnectionStateProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateLinkServiceConnectionStateProperty::fromJsonObject(QJsonObject json) {

    m_actions_required_isValid = ::OpenAPI::fromJsonValue(m_actions_required, json[QString("actionsRequired")]);
    m_actions_required_isSet = !json[QString("actionsRequired")].isNull() && m_actions_required_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIPrivateLinkServiceConnectionStateProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateLinkServiceConnectionStateProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_actions_required_isSet) {
        obj.insert(QString("actionsRequired"), ::OpenAPI::toJsonValue(m_actions_required));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIPrivateLinkServiceConnectionStateProperty::getActionsRequired() const {
    return m_actions_required;
}
void OAIPrivateLinkServiceConnectionStateProperty::setActionsRequired(const QString &actions_required) {
    m_actions_required = actions_required;
    m_actions_required_isSet = true;
}

bool OAIPrivateLinkServiceConnectionStateProperty::is_actions_required_Set() const{
    return m_actions_required_isSet;
}

bool OAIPrivateLinkServiceConnectionStateProperty::is_actions_required_Valid() const{
    return m_actions_required_isValid;
}

QString OAIPrivateLinkServiceConnectionStateProperty::getDescription() const {
    return m_description;
}
void OAIPrivateLinkServiceConnectionStateProperty::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPrivateLinkServiceConnectionStateProperty::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPrivateLinkServiceConnectionStateProperty::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPrivateLinkServiceConnectionStateProperty::getStatus() const {
    return m_status;
}
void OAIPrivateLinkServiceConnectionStateProperty::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPrivateLinkServiceConnectionStateProperty::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPrivateLinkServiceConnectionStateProperty::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIPrivateLinkServiceConnectionStateProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateLinkServiceConnectionStateProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
