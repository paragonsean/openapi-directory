/**
 * AuthorizationManagementClient
 * Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to manage role definitions and role assignments. A role definition describes the set of actions that can be performed on resources. A role assignment grants access to Azure Active Directory users.
 *
 * The version of the OpenAPI document: 2015-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Permission from './Permission';

/**
 * The RoleDefinitionProperties model module.
 * @module model/RoleDefinitionProperties
 * @version 2015-07-01
 */
class RoleDefinitionProperties {
    /**
     * Constructs a new <code>RoleDefinitionProperties</code>.
     * Role definition properties.
     * @alias module:model/RoleDefinitionProperties
     */
    constructor() { 
        
        RoleDefinitionProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RoleDefinitionProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RoleDefinitionProperties} obj Optional instance to populate.
     * @return {module:model/RoleDefinitionProperties} The populated <code>RoleDefinitionProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RoleDefinitionProperties();

            if (data.hasOwnProperty('assignableScopes')) {
                obj['assignableScopes'] = ApiClient.convertToType(data['assignableScopes'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], [Permission]);
            }
            if (data.hasOwnProperty('roleName')) {
                obj['roleName'] = ApiClient.convertToType(data['roleName'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RoleDefinitionProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RoleDefinitionProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['assignableScopes'])) {
            throw new Error("Expected the field `assignableScopes` to be an array in the JSON data but got " + data['assignableScopes']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['permissions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['permissions'])) {
                throw new Error("Expected the field `permissions` to be an array in the JSON data but got " + data['permissions']);
            }
            // validate the optional field `permissions` (array)
            for (const item of data['permissions']) {
                Permission.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['roleName'] && !(typeof data['roleName'] === 'string' || data['roleName'] instanceof String)) {
            throw new Error("Expected the field `roleName` to be a primitive type in the JSON string but got " + data['roleName']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Role definition assignable scopes.
 * @member {Array.<String>} assignableScopes
 */
RoleDefinitionProperties.prototype['assignableScopes'] = undefined;

/**
 * The role definition description.
 * @member {String} description
 */
RoleDefinitionProperties.prototype['description'] = undefined;

/**
 * Role definition permissions.
 * @member {Array.<module:model/Permission>} permissions
 */
RoleDefinitionProperties.prototype['permissions'] = undefined;

/**
 * The role name.
 * @member {String} roleName
 */
RoleDefinitionProperties.prototype['roleName'] = undefined;

/**
 * The role type.
 * @member {String} type
 */
RoleDefinitionProperties.prototype['type'] = undefined;






export default RoleDefinitionProperties;

