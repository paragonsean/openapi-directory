/**
 * AuthorizationManagementClient
 * Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to manage role definitions and role assignments. A role definition describes the set of actions that can be performed on resources. A role assignment grants access to Azure Active Directory users.
 *
 * The version of the OpenAPI document: 2015-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoleDefinitionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoleDefinitionProperties::OAIRoleDefinitionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoleDefinitionProperties::OAIRoleDefinitionProperties() {
    this->initializeModel();
}

OAIRoleDefinitionProperties::~OAIRoleDefinitionProperties() {}

void OAIRoleDefinitionProperties::initializeModel() {

    m_assignable_scopes_isSet = false;
    m_assignable_scopes_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_role_name_isSet = false;
    m_role_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRoleDefinitionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoleDefinitionProperties::fromJsonObject(QJsonObject json) {

    m_assignable_scopes_isValid = ::OpenAPI::fromJsonValue(m_assignable_scopes, json[QString("assignableScopes")]);
    m_assignable_scopes_isSet = !json[QString("assignableScopes")].isNull() && m_assignable_scopes_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_role_name_isValid = ::OpenAPI::fromJsonValue(m_role_name, json[QString("roleName")]);
    m_role_name_isSet = !json[QString("roleName")].isNull() && m_role_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRoleDefinitionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoleDefinitionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_assignable_scopes.size() > 0) {
        obj.insert(QString("assignableScopes"), ::OpenAPI::toJsonValue(m_assignable_scopes));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_role_name_isSet) {
        obj.insert(QString("roleName"), ::OpenAPI::toJsonValue(m_role_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAIRoleDefinitionProperties::getAssignableScopes() const {
    return m_assignable_scopes;
}
void OAIRoleDefinitionProperties::setAssignableScopes(const QList<QString> &assignable_scopes) {
    m_assignable_scopes = assignable_scopes;
    m_assignable_scopes_isSet = true;
}

bool OAIRoleDefinitionProperties::is_assignable_scopes_Set() const{
    return m_assignable_scopes_isSet;
}

bool OAIRoleDefinitionProperties::is_assignable_scopes_Valid() const{
    return m_assignable_scopes_isValid;
}

QString OAIRoleDefinitionProperties::getDescription() const {
    return m_description;
}
void OAIRoleDefinitionProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRoleDefinitionProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRoleDefinitionProperties::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIPermission> OAIRoleDefinitionProperties::getPermissions() const {
    return m_permissions;
}
void OAIRoleDefinitionProperties::setPermissions(const QList<OAIPermission> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIRoleDefinitionProperties::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIRoleDefinitionProperties::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIRoleDefinitionProperties::getRoleName() const {
    return m_role_name;
}
void OAIRoleDefinitionProperties::setRoleName(const QString &role_name) {
    m_role_name = role_name;
    m_role_name_isSet = true;
}

bool OAIRoleDefinitionProperties::is_role_name_Set() const{
    return m_role_name_isSet;
}

bool OAIRoleDefinitionProperties::is_role_name_Valid() const{
    return m_role_name_isValid;
}

QString OAIRoleDefinitionProperties::getType() const {
    return m_type;
}
void OAIRoleDefinitionProperties::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRoleDefinitionProperties::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRoleDefinitionProperties::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRoleDefinitionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignable_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoleDefinitionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
