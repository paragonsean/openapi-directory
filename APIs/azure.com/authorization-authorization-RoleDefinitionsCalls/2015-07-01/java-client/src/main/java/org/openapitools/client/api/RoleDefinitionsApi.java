/*
 * AuthorizationManagementClient
 * Role based access control provides you a way to apply granular level policy administration down to individual resources or resource groups. These operations enable you to manage role definitions and role assignments. A role definition describes the set of actions that can be performed on resources. A role assignment grants access to Azure Active Directory users.
 *
 * The version of the OpenAPI document: 2015-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RoleDefinition;
import org.openapitools.client.model.RoleDefinitionListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RoleDefinitionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RoleDefinitionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RoleDefinitionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for roleDefinitionsCreateOrUpdate
     * @param scope The scope of the role definition. (required)
     * @param roleDefinitionId The ID of the role definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param roleDefinition The values for the role definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK - Returns information about the role definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleDefinitionsCreateOrUpdateCall(String scope, String roleDefinitionId, String apiVersion, RoleDefinition roleDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = roleDefinition;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "roleDefinitionId" + "}", localVarApiClient.escapeString(roleDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleDefinitionsCreateOrUpdateValidateBeforeCall(String scope, String roleDefinitionId, String apiVersion, RoleDefinition roleDefinition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling roleDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'roleDefinitionId' is set
        if (roleDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'roleDefinitionId' when calling roleDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling roleDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'roleDefinition' is set
        if (roleDefinition == null) {
            throw new ApiException("Missing the required parameter 'roleDefinition' when calling roleDefinitionsCreateOrUpdate(Async)");
        }

        return roleDefinitionsCreateOrUpdateCall(scope, roleDefinitionId, apiVersion, roleDefinition, _callback);

    }

    /**
     * 
     * Creates or updates a role definition.
     * @param scope The scope of the role definition. (required)
     * @param roleDefinitionId The ID of the role definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param roleDefinition The values for the role definition. (required)
     * @return RoleDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK - Returns information about the role definition. </td><td>  -  </td></tr>
     </table>
     */
    public RoleDefinition roleDefinitionsCreateOrUpdate(String scope, String roleDefinitionId, String apiVersion, RoleDefinition roleDefinition) throws ApiException {
        ApiResponse<RoleDefinition> localVarResp = roleDefinitionsCreateOrUpdateWithHttpInfo(scope, roleDefinitionId, apiVersion, roleDefinition);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a role definition.
     * @param scope The scope of the role definition. (required)
     * @param roleDefinitionId The ID of the role definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param roleDefinition The values for the role definition. (required)
     * @return ApiResponse&lt;RoleDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK - Returns information about the role definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleDefinition> roleDefinitionsCreateOrUpdateWithHttpInfo(String scope, String roleDefinitionId, String apiVersion, RoleDefinition roleDefinition) throws ApiException {
        okhttp3.Call localVarCall = roleDefinitionsCreateOrUpdateValidateBeforeCall(scope, roleDefinitionId, apiVersion, roleDefinition, null);
        Type localVarReturnType = new TypeToken<RoleDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a role definition.
     * @param scope The scope of the role definition. (required)
     * @param roleDefinitionId The ID of the role definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param roleDefinition The values for the role definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK - Returns information about the role definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleDefinitionsCreateOrUpdateAsync(String scope, String roleDefinitionId, String apiVersion, RoleDefinition roleDefinition, final ApiCallback<RoleDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleDefinitionsCreateOrUpdateValidateBeforeCall(scope, roleDefinitionId, apiVersion, roleDefinition, _callback);
        Type localVarReturnType = new TypeToken<RoleDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleDefinitionsDelete
     * @param scope The scope of the role definition. (required)
     * @param roleDefinitionId The ID of the role definition to delete. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleDefinitionsDeleteCall(String scope, String roleDefinitionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "roleDefinitionId" + "}", localVarApiClient.escapeString(roleDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleDefinitionsDeleteValidateBeforeCall(String scope, String roleDefinitionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling roleDefinitionsDelete(Async)");
        }

        // verify the required parameter 'roleDefinitionId' is set
        if (roleDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'roleDefinitionId' when calling roleDefinitionsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling roleDefinitionsDelete(Async)");
        }

        return roleDefinitionsDeleteCall(scope, roleDefinitionId, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a role definition.
     * @param scope The scope of the role definition. (required)
     * @param roleDefinitionId The ID of the role definition to delete. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return RoleDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role definition. </td><td>  -  </td></tr>
     </table>
     */
    public RoleDefinition roleDefinitionsDelete(String scope, String roleDefinitionId, String apiVersion) throws ApiException {
        ApiResponse<RoleDefinition> localVarResp = roleDefinitionsDeleteWithHttpInfo(scope, roleDefinitionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Deletes a role definition.
     * @param scope The scope of the role definition. (required)
     * @param roleDefinitionId The ID of the role definition to delete. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return ApiResponse&lt;RoleDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleDefinition> roleDefinitionsDeleteWithHttpInfo(String scope, String roleDefinitionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = roleDefinitionsDeleteValidateBeforeCall(scope, roleDefinitionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<RoleDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deletes a role definition.
     * @param scope The scope of the role definition. (required)
     * @param roleDefinitionId The ID of the role definition to delete. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleDefinitionsDeleteAsync(String scope, String roleDefinitionId, String apiVersion, final ApiCallback<RoleDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleDefinitionsDeleteValidateBeforeCall(scope, roleDefinitionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RoleDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleDefinitionsGet
     * @param scope The scope of the role definition. (required)
     * @param roleDefinitionId The ID of the role definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleDefinitionsGetCall(String scope, String roleDefinitionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "roleDefinitionId" + "}", localVarApiClient.escapeString(roleDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleDefinitionsGetValidateBeforeCall(String scope, String roleDefinitionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling roleDefinitionsGet(Async)");
        }

        // verify the required parameter 'roleDefinitionId' is set
        if (roleDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'roleDefinitionId' when calling roleDefinitionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling roleDefinitionsGet(Async)");
        }

        return roleDefinitionsGetCall(scope, roleDefinitionId, apiVersion, _callback);

    }

    /**
     * 
     * Get role definition by name (GUID).
     * @param scope The scope of the role definition. (required)
     * @param roleDefinitionId The ID of the role definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return RoleDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role definition. </td><td>  -  </td></tr>
     </table>
     */
    public RoleDefinition roleDefinitionsGet(String scope, String roleDefinitionId, String apiVersion) throws ApiException {
        ApiResponse<RoleDefinition> localVarResp = roleDefinitionsGetWithHttpInfo(scope, roleDefinitionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get role definition by name (GUID).
     * @param scope The scope of the role definition. (required)
     * @param roleDefinitionId The ID of the role definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return ApiResponse&lt;RoleDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleDefinition> roleDefinitionsGetWithHttpInfo(String scope, String roleDefinitionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = roleDefinitionsGetValidateBeforeCall(scope, roleDefinitionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<RoleDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get role definition by name (GUID).
     * @param scope The scope of the role definition. (required)
     * @param roleDefinitionId The ID of the role definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleDefinitionsGetAsync(String scope, String roleDefinitionId, String apiVersion, final ApiCallback<RoleDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleDefinitionsGetValidateBeforeCall(scope, roleDefinitionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RoleDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleDefinitionsGetById
     * @param roleDefinitionId The fully qualified role definition ID. Use the format, /subscriptions/{guid}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for subscription level role definitions, or /providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for tenant level role definitions. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleDefinitionsGetByIdCall(String roleDefinitionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{roleDefinitionId}"
            .replace("{" + "roleDefinitionId" + "}", localVarApiClient.escapeString(roleDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleDefinitionsGetByIdValidateBeforeCall(String roleDefinitionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleDefinitionId' is set
        if (roleDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'roleDefinitionId' when calling roleDefinitionsGetById(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling roleDefinitionsGetById(Async)");
        }

        return roleDefinitionsGetByIdCall(roleDefinitionId, apiVersion, _callback);

    }

    /**
     * 
     * Gets a role definition by ID.
     * @param roleDefinitionId The fully qualified role definition ID. Use the format, /subscriptions/{guid}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for subscription level role definitions, or /providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for tenant level role definitions. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return RoleDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role definition. </td><td>  -  </td></tr>
     </table>
     */
    public RoleDefinition roleDefinitionsGetById(String roleDefinitionId, String apiVersion) throws ApiException {
        ApiResponse<RoleDefinition> localVarResp = roleDefinitionsGetByIdWithHttpInfo(roleDefinitionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a role definition by ID.
     * @param roleDefinitionId The fully qualified role definition ID. Use the format, /subscriptions/{guid}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for subscription level role definitions, or /providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for tenant level role definitions. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @return ApiResponse&lt;RoleDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role definition. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleDefinition> roleDefinitionsGetByIdWithHttpInfo(String roleDefinitionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = roleDefinitionsGetByIdValidateBeforeCall(roleDefinitionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<RoleDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a role definition by ID.
     * @param roleDefinitionId The fully qualified role definition ID. Use the format, /subscriptions/{guid}/providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for subscription level role definitions, or /providers/Microsoft.Authorization/roleDefinitions/{roleDefinitionId} for tenant level role definitions. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns information about the role definition. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleDefinitionsGetByIdAsync(String roleDefinitionId, String apiVersion, final ApiCallback<RoleDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleDefinitionsGetByIdValidateBeforeCall(roleDefinitionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RoleDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for roleDefinitionsList
     * @param scope The scope of the role definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as well. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of role definitions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleDefinitionsListCall(String scope, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.Authorization/roleDefinitions"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call roleDefinitionsListValidateBeforeCall(String scope, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling roleDefinitionsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling roleDefinitionsList(Async)");
        }

        return roleDefinitionsListCall(scope, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Get all role definitions that are applicable at scope and above.
     * @param scope The scope of the role definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as well. (optional)
     * @return RoleDefinitionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of role definitions. </td><td>  -  </td></tr>
     </table>
     */
    public RoleDefinitionListResult roleDefinitionsList(String scope, String apiVersion, String $filter) throws ApiException {
        ApiResponse<RoleDefinitionListResult> localVarResp = roleDefinitionsListWithHttpInfo(scope, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all role definitions that are applicable at scope and above.
     * @param scope The scope of the role definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as well. (optional)
     * @return ApiResponse&lt;RoleDefinitionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of role definitions. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoleDefinitionListResult> roleDefinitionsListWithHttpInfo(String scope, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = roleDefinitionsListValidateBeforeCall(scope, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<RoleDefinitionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all role definitions that are applicable at scope and above.
     * @param scope The scope of the role definition. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param $filter The filter to apply on the operation. Use atScopeAndBelow filter to search below the given scope as well. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - Returns an array of role definitions. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call roleDefinitionsListAsync(String scope, String apiVersion, String $filter, final ApiCallback<RoleDefinitionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = roleDefinitionsListValidateBeforeCall(scope, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<RoleDefinitionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
