/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IntegrationAccountAgreement from '../model/IntegrationAccountAgreement';
import IntegrationAccountAgreementListResult from '../model/IntegrationAccountAgreementListResult';

/**
* IntegrationAccountAgreements service.
* @module api/IntegrationAccountAgreementsApi
* @version 2015-08-01-preview
*/
export default class IntegrationAccountAgreementsApi {

    /**
    * Constructs a new IntegrationAccountAgreementsApi. 
    * @alias module:api/IntegrationAccountAgreementsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the integrationAccountAgreementsCreateOrUpdate operation.
     * @callback module:api/IntegrationAccountAgreementsApi~integrationAccountAgreementsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationAccountAgreement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates an integration account agreement.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} integrationAccountName The integration account name.
     * @param {String} agreementName The integration account agreement name.
     * @param {String} apiVersion The API version.
     * @param {module:model/IntegrationAccountAgreement} agreement The integration account agreement.
     * @param {module:api/IntegrationAccountAgreementsApi~integrationAccountAgreementsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationAccountAgreement}
     */
    integrationAccountAgreementsCreateOrUpdate(subscriptionId, resourceGroupName, integrationAccountName, agreementName, apiVersion, agreement, callback) {
      let postBody = agreement;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationAccountAgreementsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationAccountAgreementsCreateOrUpdate");
      }
      // verify the required parameter 'integrationAccountName' is set
      if (integrationAccountName === undefined || integrationAccountName === null) {
        throw new Error("Missing the required parameter 'integrationAccountName' when calling integrationAccountAgreementsCreateOrUpdate");
      }
      // verify the required parameter 'agreementName' is set
      if (agreementName === undefined || agreementName === null) {
        throw new Error("Missing the required parameter 'agreementName' when calling integrationAccountAgreementsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationAccountAgreementsCreateOrUpdate");
      }
      // verify the required parameter 'agreement' is set
      if (agreement === undefined || agreement === null) {
        throw new Error("Missing the required parameter 'agreement' when calling integrationAccountAgreementsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'integrationAccountName': integrationAccountName,
        'agreementName': agreementName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = IntegrationAccountAgreement;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/agreements/{agreementName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationAccountAgreementsDelete operation.
     * @callback module:api/IntegrationAccountAgreementsApi~integrationAccountAgreementsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an integration account agreement.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} integrationAccountName The integration account name.
     * @param {String} agreementName The integration account agreement name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationAccountAgreementsApi~integrationAccountAgreementsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    integrationAccountAgreementsDelete(subscriptionId, resourceGroupName, integrationAccountName, agreementName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationAccountAgreementsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationAccountAgreementsDelete");
      }
      // verify the required parameter 'integrationAccountName' is set
      if (integrationAccountName === undefined || integrationAccountName === null) {
        throw new Error("Missing the required parameter 'integrationAccountName' when calling integrationAccountAgreementsDelete");
      }
      // verify the required parameter 'agreementName' is set
      if (agreementName === undefined || agreementName === null) {
        throw new Error("Missing the required parameter 'agreementName' when calling integrationAccountAgreementsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationAccountAgreementsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'integrationAccountName': integrationAccountName,
        'agreementName': agreementName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/agreements/{agreementName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationAccountAgreementsGet operation.
     * @callback module:api/IntegrationAccountAgreementsApi~integrationAccountAgreementsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationAccountAgreement} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an integration account agreement.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} integrationAccountName The integration account name.
     * @param {String} agreementName The integration account agreement name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationAccountAgreementsApi~integrationAccountAgreementsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationAccountAgreement}
     */
    integrationAccountAgreementsGet(subscriptionId, resourceGroupName, integrationAccountName, agreementName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationAccountAgreementsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationAccountAgreementsGet");
      }
      // verify the required parameter 'integrationAccountName' is set
      if (integrationAccountName === undefined || integrationAccountName === null) {
        throw new Error("Missing the required parameter 'integrationAccountName' when calling integrationAccountAgreementsGet");
      }
      // verify the required parameter 'agreementName' is set
      if (agreementName === undefined || agreementName === null) {
        throw new Error("Missing the required parameter 'agreementName' when calling integrationAccountAgreementsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationAccountAgreementsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'integrationAccountName': integrationAccountName,
        'agreementName': agreementName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = IntegrationAccountAgreement;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/agreements/{agreementName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationAccountAgreementsList operation.
     * @callback module:api/IntegrationAccountAgreementsApi~integrationAccountAgreementsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationAccountAgreementListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of integration account agreements.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} integrationAccountName The integration account name.
     * @param {String} apiVersion The API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] The number of items to be included in the result.
     * @param {String} [filter] The filter to apply on the operation.
     * @param {module:api/IntegrationAccountAgreementsApi~integrationAccountAgreementsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationAccountAgreementListResult}
     */
    integrationAccountAgreementsList(subscriptionId, resourceGroupName, integrationAccountName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationAccountAgreementsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationAccountAgreementsList");
      }
      // verify the required parameter 'integrationAccountName' is set
      if (integrationAccountName === undefined || integrationAccountName === null) {
        throw new Error("Missing the required parameter 'integrationAccountName' when calling integrationAccountAgreementsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationAccountAgreementsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'integrationAccountName': integrationAccountName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = IntegrationAccountAgreementListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/agreements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
