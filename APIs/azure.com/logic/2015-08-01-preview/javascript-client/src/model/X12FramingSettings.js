/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SegmentTerminatorSuffix from './SegmentTerminatorSuffix';
import X12CharacterSet from './X12CharacterSet';

/**
 * The X12FramingSettings model module.
 * @module model/X12FramingSettings
 * @version 2015-08-01-preview
 */
class X12FramingSettings {
    /**
     * Constructs a new <code>X12FramingSettings</code>.
     * @alias module:model/X12FramingSettings
     */
    constructor() { 
        
        X12FramingSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>X12FramingSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/X12FramingSettings} obj Optional instance to populate.
     * @return {module:model/X12FramingSettings} The populated <code>X12FramingSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new X12FramingSettings();

            if (data.hasOwnProperty('characterSet')) {
                obj['characterSet'] = X12CharacterSet.constructFromObject(data['characterSet']);
            }
            if (data.hasOwnProperty('componentSeparator')) {
                obj['componentSeparator'] = ApiClient.convertToType(data['componentSeparator'], 'Number');
            }
            if (data.hasOwnProperty('dataElementSeparator')) {
                obj['dataElementSeparator'] = ApiClient.convertToType(data['dataElementSeparator'], 'Number');
            }
            if (data.hasOwnProperty('replaceCharacter')) {
                obj['replaceCharacter'] = ApiClient.convertToType(data['replaceCharacter'], 'Number');
            }
            if (data.hasOwnProperty('replaceSeparatorsInPayload')) {
                obj['replaceSeparatorsInPayload'] = ApiClient.convertToType(data['replaceSeparatorsInPayload'], 'Boolean');
            }
            if (data.hasOwnProperty('segmentTerminator')) {
                obj['segmentTerminator'] = ApiClient.convertToType(data['segmentTerminator'], 'Number');
            }
            if (data.hasOwnProperty('segmentTerminatorSuffix')) {
                obj['segmentTerminatorSuffix'] = SegmentTerminatorSuffix.constructFromObject(data['segmentTerminatorSuffix']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>X12FramingSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>X12FramingSettings</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * @member {module:model/X12CharacterSet} characterSet
 */
X12FramingSettings.prototype['characterSet'] = undefined;

/**
 * The component separator.
 * @member {Number} componentSeparator
 */
X12FramingSettings.prototype['componentSeparator'] = undefined;

/**
 * The data element separator.
 * @member {Number} dataElementSeparator
 */
X12FramingSettings.prototype['dataElementSeparator'] = undefined;

/**
 * The replacement character.
 * @member {Number} replaceCharacter
 */
X12FramingSettings.prototype['replaceCharacter'] = undefined;

/**
 * The value indicating whether to replace separators in payload.
 * @member {Boolean} replaceSeparatorsInPayload
 */
X12FramingSettings.prototype['replaceSeparatorsInPayload'] = undefined;

/**
 * The segment terminator.
 * @member {Number} segmentTerminator
 */
X12FramingSettings.prototype['segmentTerminator'] = undefined;

/**
 * @member {module:model/SegmentTerminatorSuffix} segmentTerminatorSuffix
 */
X12FramingSettings.prototype['segmentTerminatorSuffix'] = undefined;






export default X12FramingSettings;

