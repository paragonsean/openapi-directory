/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UsageIndicator from './UsageIndicator';
import X12DateFormat from './X12DateFormat';
import X12TimeFormat from './X12TimeFormat';

/**
 * The X12EnvelopeSettings model module.
 * @module model/X12EnvelopeSettings
 * @version 2015-08-01-preview
 */
class X12EnvelopeSettings {
    /**
     * Constructs a new <code>X12EnvelopeSettings</code>.
     * @alias module:model/X12EnvelopeSettings
     */
    constructor() { 
        
        X12EnvelopeSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>X12EnvelopeSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/X12EnvelopeSettings} obj Optional instance to populate.
     * @return {module:model/X12EnvelopeSettings} The populated <code>X12EnvelopeSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new X12EnvelopeSettings();

            if (data.hasOwnProperty('controlStandardsId')) {
                obj['controlStandardsId'] = ApiClient.convertToType(data['controlStandardsId'], 'Number');
            }
            if (data.hasOwnProperty('controlVersionNumber')) {
                obj['controlVersionNumber'] = ApiClient.convertToType(data['controlVersionNumber'], 'String');
            }
            if (data.hasOwnProperty('enableDefaultGroupHeaders')) {
                obj['enableDefaultGroupHeaders'] = ApiClient.convertToType(data['enableDefaultGroupHeaders'], 'Boolean');
            }
            if (data.hasOwnProperty('functionalGroupId')) {
                obj['functionalGroupId'] = ApiClient.convertToType(data['functionalGroupId'], 'String');
            }
            if (data.hasOwnProperty('groupControlNumberLowerBound')) {
                obj['groupControlNumberLowerBound'] = ApiClient.convertToType(data['groupControlNumberLowerBound'], 'Number');
            }
            if (data.hasOwnProperty('groupControlNumberUpperBound')) {
                obj['groupControlNumberUpperBound'] = ApiClient.convertToType(data['groupControlNumberUpperBound'], 'Number');
            }
            if (data.hasOwnProperty('groupHeaderAgencyCode')) {
                obj['groupHeaderAgencyCode'] = ApiClient.convertToType(data['groupHeaderAgencyCode'], 'String');
            }
            if (data.hasOwnProperty('groupHeaderDateFormat')) {
                obj['groupHeaderDateFormat'] = X12DateFormat.constructFromObject(data['groupHeaderDateFormat']);
            }
            if (data.hasOwnProperty('groupHeaderTimeFormat')) {
                obj['groupHeaderTimeFormat'] = X12TimeFormat.constructFromObject(data['groupHeaderTimeFormat']);
            }
            if (data.hasOwnProperty('groupHeaderVersion')) {
                obj['groupHeaderVersion'] = ApiClient.convertToType(data['groupHeaderVersion'], 'String');
            }
            if (data.hasOwnProperty('interchangeControlNumberLowerBound')) {
                obj['interchangeControlNumberLowerBound'] = ApiClient.convertToType(data['interchangeControlNumberLowerBound'], 'Number');
            }
            if (data.hasOwnProperty('interchangeControlNumberUpperBound')) {
                obj['interchangeControlNumberUpperBound'] = ApiClient.convertToType(data['interchangeControlNumberUpperBound'], 'Number');
            }
            if (data.hasOwnProperty('overwriteExistingTransactionSetControlNumber')) {
                obj['overwriteExistingTransactionSetControlNumber'] = ApiClient.convertToType(data['overwriteExistingTransactionSetControlNumber'], 'Boolean');
            }
            if (data.hasOwnProperty('receiverApplicationId')) {
                obj['receiverApplicationId'] = ApiClient.convertToType(data['receiverApplicationId'], 'String');
            }
            if (data.hasOwnProperty('rolloverGroupControlNumber')) {
                obj['rolloverGroupControlNumber'] = ApiClient.convertToType(data['rolloverGroupControlNumber'], 'Boolean');
            }
            if (data.hasOwnProperty('rolloverInterchangeControlNumber')) {
                obj['rolloverInterchangeControlNumber'] = ApiClient.convertToType(data['rolloverInterchangeControlNumber'], 'Boolean');
            }
            if (data.hasOwnProperty('rolloverTransactionSetControlNumber')) {
                obj['rolloverTransactionSetControlNumber'] = ApiClient.convertToType(data['rolloverTransactionSetControlNumber'], 'Boolean');
            }
            if (data.hasOwnProperty('senderApplicationId')) {
                obj['senderApplicationId'] = ApiClient.convertToType(data['senderApplicationId'], 'String');
            }
            if (data.hasOwnProperty('transactionSetControlNumberLowerBound')) {
                obj['transactionSetControlNumberLowerBound'] = ApiClient.convertToType(data['transactionSetControlNumberLowerBound'], 'Number');
            }
            if (data.hasOwnProperty('transactionSetControlNumberPrefix')) {
                obj['transactionSetControlNumberPrefix'] = ApiClient.convertToType(data['transactionSetControlNumberPrefix'], 'String');
            }
            if (data.hasOwnProperty('transactionSetControlNumberSuffix')) {
                obj['transactionSetControlNumberSuffix'] = ApiClient.convertToType(data['transactionSetControlNumberSuffix'], 'String');
            }
            if (data.hasOwnProperty('transactionSetControlNumberUpperBound')) {
                obj['transactionSetControlNumberUpperBound'] = ApiClient.convertToType(data['transactionSetControlNumberUpperBound'], 'Number');
            }
            if (data.hasOwnProperty('usageIndicator')) {
                obj['usageIndicator'] = UsageIndicator.constructFromObject(data['usageIndicator']);
            }
            if (data.hasOwnProperty('useControlStandardsIdAsRepetitionCharacter')) {
                obj['useControlStandardsIdAsRepetitionCharacter'] = ApiClient.convertToType(data['useControlStandardsIdAsRepetitionCharacter'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>X12EnvelopeSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>X12EnvelopeSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['controlVersionNumber'] && !(typeof data['controlVersionNumber'] === 'string' || data['controlVersionNumber'] instanceof String)) {
            throw new Error("Expected the field `controlVersionNumber` to be a primitive type in the JSON string but got " + data['controlVersionNumber']);
        }
        // ensure the json data is a string
        if (data['functionalGroupId'] && !(typeof data['functionalGroupId'] === 'string' || data['functionalGroupId'] instanceof String)) {
            throw new Error("Expected the field `functionalGroupId` to be a primitive type in the JSON string but got " + data['functionalGroupId']);
        }
        // ensure the json data is a string
        if (data['groupHeaderAgencyCode'] && !(typeof data['groupHeaderAgencyCode'] === 'string' || data['groupHeaderAgencyCode'] instanceof String)) {
            throw new Error("Expected the field `groupHeaderAgencyCode` to be a primitive type in the JSON string but got " + data['groupHeaderAgencyCode']);
        }
        // ensure the json data is a string
        if (data['groupHeaderVersion'] && !(typeof data['groupHeaderVersion'] === 'string' || data['groupHeaderVersion'] instanceof String)) {
            throw new Error("Expected the field `groupHeaderVersion` to be a primitive type in the JSON string but got " + data['groupHeaderVersion']);
        }
        // ensure the json data is a string
        if (data['receiverApplicationId'] && !(typeof data['receiverApplicationId'] === 'string' || data['receiverApplicationId'] instanceof String)) {
            throw new Error("Expected the field `receiverApplicationId` to be a primitive type in the JSON string but got " + data['receiverApplicationId']);
        }
        // ensure the json data is a string
        if (data['senderApplicationId'] && !(typeof data['senderApplicationId'] === 'string' || data['senderApplicationId'] instanceof String)) {
            throw new Error("Expected the field `senderApplicationId` to be a primitive type in the JSON string but got " + data['senderApplicationId']);
        }
        // ensure the json data is a string
        if (data['transactionSetControlNumberPrefix'] && !(typeof data['transactionSetControlNumberPrefix'] === 'string' || data['transactionSetControlNumberPrefix'] instanceof String)) {
            throw new Error("Expected the field `transactionSetControlNumberPrefix` to be a primitive type in the JSON string but got " + data['transactionSetControlNumberPrefix']);
        }
        // ensure the json data is a string
        if (data['transactionSetControlNumberSuffix'] && !(typeof data['transactionSetControlNumberSuffix'] === 'string' || data['transactionSetControlNumberSuffix'] instanceof String)) {
            throw new Error("Expected the field `transactionSetControlNumberSuffix` to be a primitive type in the JSON string but got " + data['transactionSetControlNumberSuffix']);
        }

        return true;
    }


}



/**
 * The controls standards id.
 * @member {Number} controlStandardsId
 */
X12EnvelopeSettings.prototype['controlStandardsId'] = undefined;

/**
 * The control version number.
 * @member {String} controlVersionNumber
 */
X12EnvelopeSettings.prototype['controlVersionNumber'] = undefined;

/**
 * The value indicating whether to enable default group headers.
 * @member {Boolean} enableDefaultGroupHeaders
 */
X12EnvelopeSettings.prototype['enableDefaultGroupHeaders'] = undefined;

/**
 * The functional group id.
 * @member {String} functionalGroupId
 */
X12EnvelopeSettings.prototype['functionalGroupId'] = undefined;

/**
 * The group control number lower bound.
 * @member {Number} groupControlNumberLowerBound
 */
X12EnvelopeSettings.prototype['groupControlNumberLowerBound'] = undefined;

/**
 * The group control number upper bound.
 * @member {Number} groupControlNumberUpperBound
 */
X12EnvelopeSettings.prototype['groupControlNumberUpperBound'] = undefined;

/**
 * The group header agency code.
 * @member {String} groupHeaderAgencyCode
 */
X12EnvelopeSettings.prototype['groupHeaderAgencyCode'] = undefined;

/**
 * @member {module:model/X12DateFormat} groupHeaderDateFormat
 */
X12EnvelopeSettings.prototype['groupHeaderDateFormat'] = undefined;

/**
 * @member {module:model/X12TimeFormat} groupHeaderTimeFormat
 */
X12EnvelopeSettings.prototype['groupHeaderTimeFormat'] = undefined;

/**
 * The group header version.
 * @member {String} groupHeaderVersion
 */
X12EnvelopeSettings.prototype['groupHeaderVersion'] = undefined;

/**
 * The interchange  control number lower bound.
 * @member {Number} interchangeControlNumberLowerBound
 */
X12EnvelopeSettings.prototype['interchangeControlNumberLowerBound'] = undefined;

/**
 * The interchange  control number upper bound.
 * @member {Number} interchangeControlNumberUpperBound
 */
X12EnvelopeSettings.prototype['interchangeControlNumberUpperBound'] = undefined;

/**
 * The value indicating whether to overwrite existing transaction set control number.
 * @member {Boolean} overwriteExistingTransactionSetControlNumber
 */
X12EnvelopeSettings.prototype['overwriteExistingTransactionSetControlNumber'] = undefined;

/**
 * The receiver application id.
 * @member {String} receiverApplicationId
 */
X12EnvelopeSettings.prototype['receiverApplicationId'] = undefined;

/**
 * The value indicating whether to rollover group control number.
 * @member {Boolean} rolloverGroupControlNumber
 */
X12EnvelopeSettings.prototype['rolloverGroupControlNumber'] = undefined;

/**
 * The value indicating whether to rollover interchange control number.
 * @member {Boolean} rolloverInterchangeControlNumber
 */
X12EnvelopeSettings.prototype['rolloverInterchangeControlNumber'] = undefined;

/**
 * The value indicating whether to rollover transaction set control number.
 * @member {Boolean} rolloverTransactionSetControlNumber
 */
X12EnvelopeSettings.prototype['rolloverTransactionSetControlNumber'] = undefined;

/**
 * The sender application id.
 * @member {String} senderApplicationId
 */
X12EnvelopeSettings.prototype['senderApplicationId'] = undefined;

/**
 * The transaction set control number lower bound.
 * @member {Number} transactionSetControlNumberLowerBound
 */
X12EnvelopeSettings.prototype['transactionSetControlNumberLowerBound'] = undefined;

/**
 * The transaction set control number prefix.
 * @member {String} transactionSetControlNumberPrefix
 */
X12EnvelopeSettings.prototype['transactionSetControlNumberPrefix'] = undefined;

/**
 * The transaction set control number suffix.
 * @member {String} transactionSetControlNumberSuffix
 */
X12EnvelopeSettings.prototype['transactionSetControlNumberSuffix'] = undefined;

/**
 * The transaction set control number upper bound.
 * @member {Number} transactionSetControlNumberUpperBound
 */
X12EnvelopeSettings.prototype['transactionSetControlNumberUpperBound'] = undefined;

/**
 * @member {module:model/UsageIndicator} usageIndicator
 */
X12EnvelopeSettings.prototype['usageIndicator'] = undefined;

/**
 * The value indicating whether to use control standards id as repetition character.
 * @member {Boolean} useControlStandardsIdAsRepetitionCharacter
 */
X12EnvelopeSettings.prototype['useControlStandardsIdAsRepetitionCharacter'] = undefined;






export default X12EnvelopeSettings;

