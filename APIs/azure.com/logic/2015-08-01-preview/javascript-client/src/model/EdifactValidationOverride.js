/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TrailingSeparatorPolicy from './TrailingSeparatorPolicy';

/**
 * The EdifactValidationOverride model module.
 * @module model/EdifactValidationOverride
 * @version 2015-08-01-preview
 */
class EdifactValidationOverride {
    /**
     * Constructs a new <code>EdifactValidationOverride</code>.
     * @alias module:model/EdifactValidationOverride
     */
    constructor() { 
        
        EdifactValidationOverride.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EdifactValidationOverride</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EdifactValidationOverride} obj Optional instance to populate.
     * @return {module:model/EdifactValidationOverride} The populated <code>EdifactValidationOverride</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EdifactValidationOverride();

            if (data.hasOwnProperty('allowLeadingAndTrailingSpacesAndZeroes')) {
                obj['allowLeadingAndTrailingSpacesAndZeroes'] = ApiClient.convertToType(data['allowLeadingAndTrailingSpacesAndZeroes'], 'Boolean');
            }
            if (data.hasOwnProperty('enforceCharacterSet')) {
                obj['enforceCharacterSet'] = ApiClient.convertToType(data['enforceCharacterSet'], 'Boolean');
            }
            if (data.hasOwnProperty('messageId')) {
                obj['messageId'] = ApiClient.convertToType(data['messageId'], 'String');
            }
            if (data.hasOwnProperty('trailingSeparatorPolicy')) {
                obj['trailingSeparatorPolicy'] = TrailingSeparatorPolicy.constructFromObject(data['trailingSeparatorPolicy']);
            }
            if (data.hasOwnProperty('trimLeadingAndTrailingSpacesAndZeroes')) {
                obj['trimLeadingAndTrailingSpacesAndZeroes'] = ApiClient.convertToType(data['trimLeadingAndTrailingSpacesAndZeroes'], 'Boolean');
            }
            if (data.hasOwnProperty('validateEDITypes')) {
                obj['validateEDITypes'] = ApiClient.convertToType(data['validateEDITypes'], 'Boolean');
            }
            if (data.hasOwnProperty('validateXSDTypes')) {
                obj['validateXSDTypes'] = ApiClient.convertToType(data['validateXSDTypes'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EdifactValidationOverride</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EdifactValidationOverride</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['messageId'] && !(typeof data['messageId'] === 'string' || data['messageId'] instanceof String)) {
            throw new Error("Expected the field `messageId` to be a primitive type in the JSON string but got " + data['messageId']);
        }

        return true;
    }


}



/**
 * The value indicating whether to allow leading and trailing spaces and zeroes.
 * @member {Boolean} allowLeadingAndTrailingSpacesAndZeroes
 */
EdifactValidationOverride.prototype['allowLeadingAndTrailingSpacesAndZeroes'] = undefined;

/**
 * The value indicating whether to validate character Set.
 * @member {Boolean} enforceCharacterSet
 */
EdifactValidationOverride.prototype['enforceCharacterSet'] = undefined;

/**
 * The message id on which the validation settings has to be applied.
 * @member {String} messageId
 */
EdifactValidationOverride.prototype['messageId'] = undefined;

/**
 * @member {module:model/TrailingSeparatorPolicy} trailingSeparatorPolicy
 */
EdifactValidationOverride.prototype['trailingSeparatorPolicy'] = undefined;

/**
 * The value indicating whether to trim leading and trailing spaces and zeroes.
 * @member {Boolean} trimLeadingAndTrailingSpacesAndZeroes
 */
EdifactValidationOverride.prototype['trimLeadingAndTrailingSpacesAndZeroes'] = undefined;

/**
 * The value indicating whether to validate EDI types.
 * @member {Boolean} validateEDITypes
 */
EdifactValidationOverride.prototype['validateEDITypes'] = undefined;

/**
 * The value indicating whether to validate XSD types.
 * @member {Boolean} validateXSDTypes
 */
EdifactValidationOverride.prototype['validateXSDTypes'] = undefined;






export default EdifactValidationOverride;

