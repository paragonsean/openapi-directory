/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LogicManagementClient);
  }
}(this, function(expect, LogicManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LogicManagementClient.X12EnvelopeSettings();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('X12EnvelopeSettings', function() {
    it('should create an instance of X12EnvelopeSettings', function() {
      // uncomment below and update the code to test X12EnvelopeSettings
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be.a(LogicManagementClient.X12EnvelopeSettings);
    });

    it('should have the property controlStandardsId (base name: "controlStandardsId")', function() {
      // uncomment below and update the code to test the property controlStandardsId
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property controlVersionNumber (base name: "controlVersionNumber")', function() {
      // uncomment below and update the code to test the property controlVersionNumber
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property enableDefaultGroupHeaders (base name: "enableDefaultGroupHeaders")', function() {
      // uncomment below and update the code to test the property enableDefaultGroupHeaders
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property functionalGroupId (base name: "functionalGroupId")', function() {
      // uncomment below and update the code to test the property functionalGroupId
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property groupControlNumberLowerBound (base name: "groupControlNumberLowerBound")', function() {
      // uncomment below and update the code to test the property groupControlNumberLowerBound
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property groupControlNumberUpperBound (base name: "groupControlNumberUpperBound")', function() {
      // uncomment below and update the code to test the property groupControlNumberUpperBound
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property groupHeaderAgencyCode (base name: "groupHeaderAgencyCode")', function() {
      // uncomment below and update the code to test the property groupHeaderAgencyCode
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property groupHeaderDateFormat (base name: "groupHeaderDateFormat")', function() {
      // uncomment below and update the code to test the property groupHeaderDateFormat
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property groupHeaderTimeFormat (base name: "groupHeaderTimeFormat")', function() {
      // uncomment below and update the code to test the property groupHeaderTimeFormat
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property groupHeaderVersion (base name: "groupHeaderVersion")', function() {
      // uncomment below and update the code to test the property groupHeaderVersion
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property interchangeControlNumberLowerBound (base name: "interchangeControlNumberLowerBound")', function() {
      // uncomment below and update the code to test the property interchangeControlNumberLowerBound
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property interchangeControlNumberUpperBound (base name: "interchangeControlNumberUpperBound")', function() {
      // uncomment below and update the code to test the property interchangeControlNumberUpperBound
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property overwriteExistingTransactionSetControlNumber (base name: "overwriteExistingTransactionSetControlNumber")', function() {
      // uncomment below and update the code to test the property overwriteExistingTransactionSetControlNumber
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property receiverApplicationId (base name: "receiverApplicationId")', function() {
      // uncomment below and update the code to test the property receiverApplicationId
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property rolloverGroupControlNumber (base name: "rolloverGroupControlNumber")', function() {
      // uncomment below and update the code to test the property rolloverGroupControlNumber
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property rolloverInterchangeControlNumber (base name: "rolloverInterchangeControlNumber")', function() {
      // uncomment below and update the code to test the property rolloverInterchangeControlNumber
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property rolloverTransactionSetControlNumber (base name: "rolloverTransactionSetControlNumber")', function() {
      // uncomment below and update the code to test the property rolloverTransactionSetControlNumber
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property senderApplicationId (base name: "senderApplicationId")', function() {
      // uncomment below and update the code to test the property senderApplicationId
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property transactionSetControlNumberLowerBound (base name: "transactionSetControlNumberLowerBound")', function() {
      // uncomment below and update the code to test the property transactionSetControlNumberLowerBound
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property transactionSetControlNumberPrefix (base name: "transactionSetControlNumberPrefix")', function() {
      // uncomment below and update the code to test the property transactionSetControlNumberPrefix
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property transactionSetControlNumberSuffix (base name: "transactionSetControlNumberSuffix")', function() {
      // uncomment below and update the code to test the property transactionSetControlNumberSuffix
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property transactionSetControlNumberUpperBound (base name: "transactionSetControlNumberUpperBound")', function() {
      // uncomment below and update the code to test the property transactionSetControlNumberUpperBound
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property usageIndicator (base name: "usageIndicator")', function() {
      // uncomment below and update the code to test the property usageIndicator
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property useControlStandardsIdAsRepetitionCharacter (base name: "useControlStandardsIdAsRepetitionCharacter")', function() {
      // uncomment below and update the code to test the property useControlStandardsIdAsRepetitionCharacter
      //var instance = new LogicManagementClient.X12EnvelopeSettings();
      //expect(instance).to.be();
    });

  });

}));
