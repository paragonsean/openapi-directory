/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LogicManagementClient);
  }
}(this, function(expect, LogicManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LogicManagementClient.AS2ValidationSettings();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AS2ValidationSettings', function() {
    it('should create an instance of AS2ValidationSettings', function() {
      // uncomment below and update the code to test AS2ValidationSettings
      //var instance = new LogicManagementClient.AS2ValidationSettings();
      //expect(instance).to.be.a(LogicManagementClient.AS2ValidationSettings);
    });

    it('should have the property checkCertificateRevocationListOnReceive (base name: "checkCertificateRevocationListOnReceive")', function() {
      // uncomment below and update the code to test the property checkCertificateRevocationListOnReceive
      //var instance = new LogicManagementClient.AS2ValidationSettings();
      //expect(instance).to.be();
    });

    it('should have the property checkCertificateRevocationListOnSend (base name: "checkCertificateRevocationListOnSend")', function() {
      // uncomment below and update the code to test the property checkCertificateRevocationListOnSend
      //var instance = new LogicManagementClient.AS2ValidationSettings();
      //expect(instance).to.be();
    });

    it('should have the property checkDuplicateMessage (base name: "checkDuplicateMessage")', function() {
      // uncomment below and update the code to test the property checkDuplicateMessage
      //var instance = new LogicManagementClient.AS2ValidationSettings();
      //expect(instance).to.be();
    });

    it('should have the property compressMessage (base name: "compressMessage")', function() {
      // uncomment below and update the code to test the property compressMessage
      //var instance = new LogicManagementClient.AS2ValidationSettings();
      //expect(instance).to.be();
    });

    it('should have the property encryptMessage (base name: "encryptMessage")', function() {
      // uncomment below and update the code to test the property encryptMessage
      //var instance = new LogicManagementClient.AS2ValidationSettings();
      //expect(instance).to.be();
    });

    it('should have the property encryptionAlgorithm (base name: "encryptionAlgorithm")', function() {
      // uncomment below and update the code to test the property encryptionAlgorithm
      //var instance = new LogicManagementClient.AS2ValidationSettings();
      //expect(instance).to.be();
    });

    it('should have the property interchangeDuplicatesValidityDays (base name: "interchangeDuplicatesValidityDays")', function() {
      // uncomment below and update the code to test the property interchangeDuplicatesValidityDays
      //var instance = new LogicManagementClient.AS2ValidationSettings();
      //expect(instance).to.be();
    });

    it('should have the property overrideMessageProperties (base name: "overrideMessageProperties")', function() {
      // uncomment below and update the code to test the property overrideMessageProperties
      //var instance = new LogicManagementClient.AS2ValidationSettings();
      //expect(instance).to.be();
    });

    it('should have the property signMessage (base name: "signMessage")', function() {
      // uncomment below and update the code to test the property signMessage
      //var instance = new LogicManagementClient.AS2ValidationSettings();
      //expect(instance).to.be();
    });

  });

}));
