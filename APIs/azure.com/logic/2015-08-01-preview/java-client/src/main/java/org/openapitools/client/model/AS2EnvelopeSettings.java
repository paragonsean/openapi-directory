/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AS2EnvelopeSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:04.435317-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AS2EnvelopeSettings {
  public static final String SERIALIZED_NAME_AUTOGENERATE_FILE_NAME = "AutogenerateFileName";
  @SerializedName(SERIALIZED_NAME_AUTOGENERATE_FILE_NAME)
  private Boolean autogenerateFileName;

  public static final String SERIALIZED_NAME_SUSPEND_MESSAGE_ON_FILE_NAME_GENERATION_ERROR = "SuspendMessageOnFileNameGenerationError";
  @SerializedName(SERIALIZED_NAME_SUSPEND_MESSAGE_ON_FILE_NAME_GENERATION_ERROR)
  private Boolean suspendMessageOnFileNameGenerationError;

  public static final String SERIALIZED_NAME_FILE_NAME_TEMPLATE = "fileNameTemplate";
  @SerializedName(SERIALIZED_NAME_FILE_NAME_TEMPLATE)
  private String fileNameTemplate;

  public static final String SERIALIZED_NAME_MESSAGE_CONTENT_TYPE = "messageContentType";
  @SerializedName(SERIALIZED_NAME_MESSAGE_CONTENT_TYPE)
  private String messageContentType;

  public static final String SERIALIZED_NAME_TRANSMIT_FILE_NAME_IN_MIME_HEADER = "transmitFileNameInMimeHeader";
  @SerializedName(SERIALIZED_NAME_TRANSMIT_FILE_NAME_IN_MIME_HEADER)
  private Boolean transmitFileNameInMimeHeader;

  public AS2EnvelopeSettings() {
  }

  public AS2EnvelopeSettings autogenerateFileName(Boolean autogenerateFileName) {
    this.autogenerateFileName = autogenerateFileName;
    return this;
  }

  /**
   * The value indicating whether to auto generate file name.
   * @return autogenerateFileName
   */
  @javax.annotation.Nullable
  public Boolean getAutogenerateFileName() {
    return autogenerateFileName;
  }

  public void setAutogenerateFileName(Boolean autogenerateFileName) {
    this.autogenerateFileName = autogenerateFileName;
  }


  public AS2EnvelopeSettings suspendMessageOnFileNameGenerationError(Boolean suspendMessageOnFileNameGenerationError) {
    this.suspendMessageOnFileNameGenerationError = suspendMessageOnFileNameGenerationError;
    return this;
  }

  /**
   * The value indicating whether to suspend message on file name generation error.
   * @return suspendMessageOnFileNameGenerationError
   */
  @javax.annotation.Nullable
  public Boolean getSuspendMessageOnFileNameGenerationError() {
    return suspendMessageOnFileNameGenerationError;
  }

  public void setSuspendMessageOnFileNameGenerationError(Boolean suspendMessageOnFileNameGenerationError) {
    this.suspendMessageOnFileNameGenerationError = suspendMessageOnFileNameGenerationError;
  }


  public AS2EnvelopeSettings fileNameTemplate(String fileNameTemplate) {
    this.fileNameTemplate = fileNameTemplate;
    return this;
  }

  /**
   * The template for file name.
   * @return fileNameTemplate
   */
  @javax.annotation.Nullable
  public String getFileNameTemplate() {
    return fileNameTemplate;
  }

  public void setFileNameTemplate(String fileNameTemplate) {
    this.fileNameTemplate = fileNameTemplate;
  }


  public AS2EnvelopeSettings messageContentType(String messageContentType) {
    this.messageContentType = messageContentType;
    return this;
  }

  /**
   * The message content type.
   * @return messageContentType
   */
  @javax.annotation.Nullable
  public String getMessageContentType() {
    return messageContentType;
  }

  public void setMessageContentType(String messageContentType) {
    this.messageContentType = messageContentType;
  }


  public AS2EnvelopeSettings transmitFileNameInMimeHeader(Boolean transmitFileNameInMimeHeader) {
    this.transmitFileNameInMimeHeader = transmitFileNameInMimeHeader;
    return this;
  }

  /**
   * The value indicating whether to transmit file name in mime header.
   * @return transmitFileNameInMimeHeader
   */
  @javax.annotation.Nullable
  public Boolean getTransmitFileNameInMimeHeader() {
    return transmitFileNameInMimeHeader;
  }

  public void setTransmitFileNameInMimeHeader(Boolean transmitFileNameInMimeHeader) {
    this.transmitFileNameInMimeHeader = transmitFileNameInMimeHeader;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AS2EnvelopeSettings as2EnvelopeSettings = (AS2EnvelopeSettings) o;
    return Objects.equals(this.autogenerateFileName, as2EnvelopeSettings.autogenerateFileName) &&
        Objects.equals(this.suspendMessageOnFileNameGenerationError, as2EnvelopeSettings.suspendMessageOnFileNameGenerationError) &&
        Objects.equals(this.fileNameTemplate, as2EnvelopeSettings.fileNameTemplate) &&
        Objects.equals(this.messageContentType, as2EnvelopeSettings.messageContentType) &&
        Objects.equals(this.transmitFileNameInMimeHeader, as2EnvelopeSettings.transmitFileNameInMimeHeader);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autogenerateFileName, suspendMessageOnFileNameGenerationError, fileNameTemplate, messageContentType, transmitFileNameInMimeHeader);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AS2EnvelopeSettings {\n");
    sb.append("    autogenerateFileName: ").append(toIndentedString(autogenerateFileName)).append("\n");
    sb.append("    suspendMessageOnFileNameGenerationError: ").append(toIndentedString(suspendMessageOnFileNameGenerationError)).append("\n");
    sb.append("    fileNameTemplate: ").append(toIndentedString(fileNameTemplate)).append("\n");
    sb.append("    messageContentType: ").append(toIndentedString(messageContentType)).append("\n");
    sb.append("    transmitFileNameInMimeHeader: ").append(toIndentedString(transmitFileNameInMimeHeader)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AutogenerateFileName");
    openapiFields.add("SuspendMessageOnFileNameGenerationError");
    openapiFields.add("fileNameTemplate");
    openapiFields.add("messageContentType");
    openapiFields.add("transmitFileNameInMimeHeader");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AS2EnvelopeSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AS2EnvelopeSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AS2EnvelopeSettings is not found in the empty JSON string", AS2EnvelopeSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AS2EnvelopeSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AS2EnvelopeSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("fileNameTemplate") != null && !jsonObj.get("fileNameTemplate").isJsonNull()) && !jsonObj.get("fileNameTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileNameTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileNameTemplate").toString()));
      }
      if ((jsonObj.get("messageContentType") != null && !jsonObj.get("messageContentType").isJsonNull()) && !jsonObj.get("messageContentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageContentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageContentType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AS2EnvelopeSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AS2EnvelopeSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AS2EnvelopeSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AS2EnvelopeSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AS2EnvelopeSettings>() {
           @Override
           public void write(JsonWriter out, AS2EnvelopeSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AS2EnvelopeSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AS2EnvelopeSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AS2EnvelopeSettings
   * @throws IOException if the JSON string is invalid with respect to AS2EnvelopeSettings
   */
  public static AS2EnvelopeSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AS2EnvelopeSettings.class);
  }

  /**
   * Convert an instance of AS2EnvelopeSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

