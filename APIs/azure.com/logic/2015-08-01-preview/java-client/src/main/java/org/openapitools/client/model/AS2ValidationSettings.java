/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.EncryptionAlgorithm;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AS2ValidationSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:04.435317-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AS2ValidationSettings {
  public static final String SERIALIZED_NAME_CHECK_CERTIFICATE_REVOCATION_LIST_ON_RECEIVE = "checkCertificateRevocationListOnReceive";
  @SerializedName(SERIALIZED_NAME_CHECK_CERTIFICATE_REVOCATION_LIST_ON_RECEIVE)
  private Boolean checkCertificateRevocationListOnReceive;

  public static final String SERIALIZED_NAME_CHECK_CERTIFICATE_REVOCATION_LIST_ON_SEND = "checkCertificateRevocationListOnSend";
  @SerializedName(SERIALIZED_NAME_CHECK_CERTIFICATE_REVOCATION_LIST_ON_SEND)
  private Boolean checkCertificateRevocationListOnSend;

  public static final String SERIALIZED_NAME_CHECK_DUPLICATE_MESSAGE = "checkDuplicateMessage";
  @SerializedName(SERIALIZED_NAME_CHECK_DUPLICATE_MESSAGE)
  private Boolean checkDuplicateMessage;

  public static final String SERIALIZED_NAME_COMPRESS_MESSAGE = "compressMessage";
  @SerializedName(SERIALIZED_NAME_COMPRESS_MESSAGE)
  private Boolean compressMessage;

  public static final String SERIALIZED_NAME_ENCRYPT_MESSAGE = "encryptMessage";
  @SerializedName(SERIALIZED_NAME_ENCRYPT_MESSAGE)
  private Boolean encryptMessage;

  public static final String SERIALIZED_NAME_ENCRYPTION_ALGORITHM = "encryptionAlgorithm";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_ALGORITHM)
  private EncryptionAlgorithm encryptionAlgorithm;

  public static final String SERIALIZED_NAME_INTERCHANGE_DUPLICATES_VALIDITY_DAYS = "interchangeDuplicatesValidityDays";
  @SerializedName(SERIALIZED_NAME_INTERCHANGE_DUPLICATES_VALIDITY_DAYS)
  private Integer interchangeDuplicatesValidityDays;

  public static final String SERIALIZED_NAME_OVERRIDE_MESSAGE_PROPERTIES = "overrideMessageProperties";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_MESSAGE_PROPERTIES)
  private Boolean overrideMessageProperties;

  public static final String SERIALIZED_NAME_SIGN_MESSAGE = "signMessage";
  @SerializedName(SERIALIZED_NAME_SIGN_MESSAGE)
  private Boolean signMessage;

  public AS2ValidationSettings() {
  }

  public AS2ValidationSettings checkCertificateRevocationListOnReceive(Boolean checkCertificateRevocationListOnReceive) {
    this.checkCertificateRevocationListOnReceive = checkCertificateRevocationListOnReceive;
    return this;
  }

  /**
   * The value indicating whether to check for certificate revocation list on receive.
   * @return checkCertificateRevocationListOnReceive
   */
  @javax.annotation.Nullable
  public Boolean getCheckCertificateRevocationListOnReceive() {
    return checkCertificateRevocationListOnReceive;
  }

  public void setCheckCertificateRevocationListOnReceive(Boolean checkCertificateRevocationListOnReceive) {
    this.checkCertificateRevocationListOnReceive = checkCertificateRevocationListOnReceive;
  }


  public AS2ValidationSettings checkCertificateRevocationListOnSend(Boolean checkCertificateRevocationListOnSend) {
    this.checkCertificateRevocationListOnSend = checkCertificateRevocationListOnSend;
    return this;
  }

  /**
   * The value indicating whether to check for certificate revocation list on send.
   * @return checkCertificateRevocationListOnSend
   */
  @javax.annotation.Nullable
  public Boolean getCheckCertificateRevocationListOnSend() {
    return checkCertificateRevocationListOnSend;
  }

  public void setCheckCertificateRevocationListOnSend(Boolean checkCertificateRevocationListOnSend) {
    this.checkCertificateRevocationListOnSend = checkCertificateRevocationListOnSend;
  }


  public AS2ValidationSettings checkDuplicateMessage(Boolean checkDuplicateMessage) {
    this.checkDuplicateMessage = checkDuplicateMessage;
    return this;
  }

  /**
   * The value indicating whether to check for duplicate message.
   * @return checkDuplicateMessage
   */
  @javax.annotation.Nullable
  public Boolean getCheckDuplicateMessage() {
    return checkDuplicateMessage;
  }

  public void setCheckDuplicateMessage(Boolean checkDuplicateMessage) {
    this.checkDuplicateMessage = checkDuplicateMessage;
  }


  public AS2ValidationSettings compressMessage(Boolean compressMessage) {
    this.compressMessage = compressMessage;
    return this;
  }

  /**
   * The value indicating whether the message has to be compressed.
   * @return compressMessage
   */
  @javax.annotation.Nullable
  public Boolean getCompressMessage() {
    return compressMessage;
  }

  public void setCompressMessage(Boolean compressMessage) {
    this.compressMessage = compressMessage;
  }


  public AS2ValidationSettings encryptMessage(Boolean encryptMessage) {
    this.encryptMessage = encryptMessage;
    return this;
  }

  /**
   * The value indicating whether the message has to be encrypted.
   * @return encryptMessage
   */
  @javax.annotation.Nullable
  public Boolean getEncryptMessage() {
    return encryptMessage;
  }

  public void setEncryptMessage(Boolean encryptMessage) {
    this.encryptMessage = encryptMessage;
  }


  public AS2ValidationSettings encryptionAlgorithm(EncryptionAlgorithm encryptionAlgorithm) {
    this.encryptionAlgorithm = encryptionAlgorithm;
    return this;
  }

  /**
   * Get encryptionAlgorithm
   * @return encryptionAlgorithm
   */
  @javax.annotation.Nullable
  public EncryptionAlgorithm getEncryptionAlgorithm() {
    return encryptionAlgorithm;
  }

  public void setEncryptionAlgorithm(EncryptionAlgorithm encryptionAlgorithm) {
    this.encryptionAlgorithm = encryptionAlgorithm;
  }


  public AS2ValidationSettings interchangeDuplicatesValidityDays(Integer interchangeDuplicatesValidityDays) {
    this.interchangeDuplicatesValidityDays = interchangeDuplicatesValidityDays;
    return this;
  }

  /**
   * The number of days to look back for duplicate interchange.
   * @return interchangeDuplicatesValidityDays
   */
  @javax.annotation.Nullable
  public Integer getInterchangeDuplicatesValidityDays() {
    return interchangeDuplicatesValidityDays;
  }

  public void setInterchangeDuplicatesValidityDays(Integer interchangeDuplicatesValidityDays) {
    this.interchangeDuplicatesValidityDays = interchangeDuplicatesValidityDays;
  }


  public AS2ValidationSettings overrideMessageProperties(Boolean overrideMessageProperties) {
    this.overrideMessageProperties = overrideMessageProperties;
    return this;
  }

  /**
   * The value indicating whether to override incoming message properties with those in agreement.
   * @return overrideMessageProperties
   */
  @javax.annotation.Nullable
  public Boolean getOverrideMessageProperties() {
    return overrideMessageProperties;
  }

  public void setOverrideMessageProperties(Boolean overrideMessageProperties) {
    this.overrideMessageProperties = overrideMessageProperties;
  }


  public AS2ValidationSettings signMessage(Boolean signMessage) {
    this.signMessage = signMessage;
    return this;
  }

  /**
   * The value indicating whether the message has to be signed.
   * @return signMessage
   */
  @javax.annotation.Nullable
  public Boolean getSignMessage() {
    return signMessage;
  }

  public void setSignMessage(Boolean signMessage) {
    this.signMessage = signMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AS2ValidationSettings as2ValidationSettings = (AS2ValidationSettings) o;
    return Objects.equals(this.checkCertificateRevocationListOnReceive, as2ValidationSettings.checkCertificateRevocationListOnReceive) &&
        Objects.equals(this.checkCertificateRevocationListOnSend, as2ValidationSettings.checkCertificateRevocationListOnSend) &&
        Objects.equals(this.checkDuplicateMessage, as2ValidationSettings.checkDuplicateMessage) &&
        Objects.equals(this.compressMessage, as2ValidationSettings.compressMessage) &&
        Objects.equals(this.encryptMessage, as2ValidationSettings.encryptMessage) &&
        Objects.equals(this.encryptionAlgorithm, as2ValidationSettings.encryptionAlgorithm) &&
        Objects.equals(this.interchangeDuplicatesValidityDays, as2ValidationSettings.interchangeDuplicatesValidityDays) &&
        Objects.equals(this.overrideMessageProperties, as2ValidationSettings.overrideMessageProperties) &&
        Objects.equals(this.signMessage, as2ValidationSettings.signMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkCertificateRevocationListOnReceive, checkCertificateRevocationListOnSend, checkDuplicateMessage, compressMessage, encryptMessage, encryptionAlgorithm, interchangeDuplicatesValidityDays, overrideMessageProperties, signMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AS2ValidationSettings {\n");
    sb.append("    checkCertificateRevocationListOnReceive: ").append(toIndentedString(checkCertificateRevocationListOnReceive)).append("\n");
    sb.append("    checkCertificateRevocationListOnSend: ").append(toIndentedString(checkCertificateRevocationListOnSend)).append("\n");
    sb.append("    checkDuplicateMessage: ").append(toIndentedString(checkDuplicateMessage)).append("\n");
    sb.append("    compressMessage: ").append(toIndentedString(compressMessage)).append("\n");
    sb.append("    encryptMessage: ").append(toIndentedString(encryptMessage)).append("\n");
    sb.append("    encryptionAlgorithm: ").append(toIndentedString(encryptionAlgorithm)).append("\n");
    sb.append("    interchangeDuplicatesValidityDays: ").append(toIndentedString(interchangeDuplicatesValidityDays)).append("\n");
    sb.append("    overrideMessageProperties: ").append(toIndentedString(overrideMessageProperties)).append("\n");
    sb.append("    signMessage: ").append(toIndentedString(signMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checkCertificateRevocationListOnReceive");
    openapiFields.add("checkCertificateRevocationListOnSend");
    openapiFields.add("checkDuplicateMessage");
    openapiFields.add("compressMessage");
    openapiFields.add("encryptMessage");
    openapiFields.add("encryptionAlgorithm");
    openapiFields.add("interchangeDuplicatesValidityDays");
    openapiFields.add("overrideMessageProperties");
    openapiFields.add("signMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AS2ValidationSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AS2ValidationSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AS2ValidationSettings is not found in the empty JSON string", AS2ValidationSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AS2ValidationSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AS2ValidationSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `encryptionAlgorithm`
      if (jsonObj.get("encryptionAlgorithm") != null && !jsonObj.get("encryptionAlgorithm").isJsonNull()) {
        EncryptionAlgorithm.validateJsonElement(jsonObj.get("encryptionAlgorithm"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AS2ValidationSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AS2ValidationSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AS2ValidationSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AS2ValidationSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AS2ValidationSettings>() {
           @Override
           public void write(JsonWriter out, AS2ValidationSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AS2ValidationSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AS2ValidationSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AS2ValidationSettings
   * @throws IOException if the JSON string is invalid with respect to AS2ValidationSettings
   */
  public static AS2ValidationSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AS2ValidationSettings.class);
  }

  /**
   * Convert an instance of AS2ValidationSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

