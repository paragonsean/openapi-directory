/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HashingAlgorithm;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AS2MdnSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:04.435317-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AS2MdnSettings {
  public static final String SERIALIZED_NAME_DISPOSITION_NOTIFICATION_TO = "dispositionNotificationTo";
  @SerializedName(SERIALIZED_NAME_DISPOSITION_NOTIFICATION_TO)
  private String dispositionNotificationTo;

  public static final String SERIALIZED_NAME_MDN_TEXT = "mdnText";
  @SerializedName(SERIALIZED_NAME_MDN_TEXT)
  private String mdnText;

  public static final String SERIALIZED_NAME_MIC_HASHING_ALGORITHM = "micHashingAlgorithm";
  @SerializedName(SERIALIZED_NAME_MIC_HASHING_ALGORITHM)
  private HashingAlgorithm micHashingAlgorithm;

  public static final String SERIALIZED_NAME_NEED_MDN = "needMdn";
  @SerializedName(SERIALIZED_NAME_NEED_MDN)
  private Boolean needMdn;

  public static final String SERIALIZED_NAME_RECEIPT_DELIVERY_URL = "receiptDeliveryUrl";
  @SerializedName(SERIALIZED_NAME_RECEIPT_DELIVERY_URL)
  private String receiptDeliveryUrl;

  public static final String SERIALIZED_NAME_SEND_INBOUND_MDN_TO_MESSAGE_BOX = "sendInboundMdnToMessageBox";
  @SerializedName(SERIALIZED_NAME_SEND_INBOUND_MDN_TO_MESSAGE_BOX)
  private Boolean sendInboundMdnToMessageBox;

  public static final String SERIALIZED_NAME_SEND_MDN_ASYNCHRONOUSLY = "sendMdnAsynchronously";
  @SerializedName(SERIALIZED_NAME_SEND_MDN_ASYNCHRONOUSLY)
  private Boolean sendMdnAsynchronously;

  public static final String SERIALIZED_NAME_SIGN_MDN = "signMdn";
  @SerializedName(SERIALIZED_NAME_SIGN_MDN)
  private Boolean signMdn;

  public static final String SERIALIZED_NAME_SIGN_OUTBOUND_MDN_IF_OPTIONAL = "signOutboundMdnIfOptional";
  @SerializedName(SERIALIZED_NAME_SIGN_OUTBOUND_MDN_IF_OPTIONAL)
  private Boolean signOutboundMdnIfOptional;

  public AS2MdnSettings() {
  }

  public AS2MdnSettings dispositionNotificationTo(String dispositionNotificationTo) {
    this.dispositionNotificationTo = dispositionNotificationTo;
    return this;
  }

  /**
   * The disposition notification to header value.
   * @return dispositionNotificationTo
   */
  @javax.annotation.Nullable
  public String getDispositionNotificationTo() {
    return dispositionNotificationTo;
  }

  public void setDispositionNotificationTo(String dispositionNotificationTo) {
    this.dispositionNotificationTo = dispositionNotificationTo;
  }


  public AS2MdnSettings mdnText(String mdnText) {
    this.mdnText = mdnText;
    return this;
  }

  /**
   * The MDN text.
   * @return mdnText
   */
  @javax.annotation.Nullable
  public String getMdnText() {
    return mdnText;
  }

  public void setMdnText(String mdnText) {
    this.mdnText = mdnText;
  }


  public AS2MdnSettings micHashingAlgorithm(HashingAlgorithm micHashingAlgorithm) {
    this.micHashingAlgorithm = micHashingAlgorithm;
    return this;
  }

  /**
   * Get micHashingAlgorithm
   * @return micHashingAlgorithm
   */
  @javax.annotation.Nullable
  public HashingAlgorithm getMicHashingAlgorithm() {
    return micHashingAlgorithm;
  }

  public void setMicHashingAlgorithm(HashingAlgorithm micHashingAlgorithm) {
    this.micHashingAlgorithm = micHashingAlgorithm;
  }


  public AS2MdnSettings needMdn(Boolean needMdn) {
    this.needMdn = needMdn;
    return this;
  }

  /**
   * The value indicating whether to send or request a MDN.
   * @return needMdn
   */
  @javax.annotation.Nullable
  public Boolean getNeedMdn() {
    return needMdn;
  }

  public void setNeedMdn(Boolean needMdn) {
    this.needMdn = needMdn;
  }


  public AS2MdnSettings receiptDeliveryUrl(String receiptDeliveryUrl) {
    this.receiptDeliveryUrl = receiptDeliveryUrl;
    return this;
  }

  /**
   * The receipt delivery URL.
   * @return receiptDeliveryUrl
   */
  @javax.annotation.Nullable
  public String getReceiptDeliveryUrl() {
    return receiptDeliveryUrl;
  }

  public void setReceiptDeliveryUrl(String receiptDeliveryUrl) {
    this.receiptDeliveryUrl = receiptDeliveryUrl;
  }


  public AS2MdnSettings sendInboundMdnToMessageBox(Boolean sendInboundMdnToMessageBox) {
    this.sendInboundMdnToMessageBox = sendInboundMdnToMessageBox;
    return this;
  }

  /**
   * The value indicating whether to send inbound MDN to message box.
   * @return sendInboundMdnToMessageBox
   */
  @javax.annotation.Nullable
  public Boolean getSendInboundMdnToMessageBox() {
    return sendInboundMdnToMessageBox;
  }

  public void setSendInboundMdnToMessageBox(Boolean sendInboundMdnToMessageBox) {
    this.sendInboundMdnToMessageBox = sendInboundMdnToMessageBox;
  }


  public AS2MdnSettings sendMdnAsynchronously(Boolean sendMdnAsynchronously) {
    this.sendMdnAsynchronously = sendMdnAsynchronously;
    return this;
  }

  /**
   * The value indicating whether to send the asynchronous MDN.
   * @return sendMdnAsynchronously
   */
  @javax.annotation.Nullable
  public Boolean getSendMdnAsynchronously() {
    return sendMdnAsynchronously;
  }

  public void setSendMdnAsynchronously(Boolean sendMdnAsynchronously) {
    this.sendMdnAsynchronously = sendMdnAsynchronously;
  }


  public AS2MdnSettings signMdn(Boolean signMdn) {
    this.signMdn = signMdn;
    return this;
  }

  /**
   * The value indicating whether the MDN needs to be signed or not.
   * @return signMdn
   */
  @javax.annotation.Nullable
  public Boolean getSignMdn() {
    return signMdn;
  }

  public void setSignMdn(Boolean signMdn) {
    this.signMdn = signMdn;
  }


  public AS2MdnSettings signOutboundMdnIfOptional(Boolean signOutboundMdnIfOptional) {
    this.signOutboundMdnIfOptional = signOutboundMdnIfOptional;
    return this;
  }

  /**
   * The value indicating whether to sign the outbound MDN if optional.
   * @return signOutboundMdnIfOptional
   */
  @javax.annotation.Nullable
  public Boolean getSignOutboundMdnIfOptional() {
    return signOutboundMdnIfOptional;
  }

  public void setSignOutboundMdnIfOptional(Boolean signOutboundMdnIfOptional) {
    this.signOutboundMdnIfOptional = signOutboundMdnIfOptional;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AS2MdnSettings as2MdnSettings = (AS2MdnSettings) o;
    return Objects.equals(this.dispositionNotificationTo, as2MdnSettings.dispositionNotificationTo) &&
        Objects.equals(this.mdnText, as2MdnSettings.mdnText) &&
        Objects.equals(this.micHashingAlgorithm, as2MdnSettings.micHashingAlgorithm) &&
        Objects.equals(this.needMdn, as2MdnSettings.needMdn) &&
        Objects.equals(this.receiptDeliveryUrl, as2MdnSettings.receiptDeliveryUrl) &&
        Objects.equals(this.sendInboundMdnToMessageBox, as2MdnSettings.sendInboundMdnToMessageBox) &&
        Objects.equals(this.sendMdnAsynchronously, as2MdnSettings.sendMdnAsynchronously) &&
        Objects.equals(this.signMdn, as2MdnSettings.signMdn) &&
        Objects.equals(this.signOutboundMdnIfOptional, as2MdnSettings.signOutboundMdnIfOptional);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dispositionNotificationTo, mdnText, micHashingAlgorithm, needMdn, receiptDeliveryUrl, sendInboundMdnToMessageBox, sendMdnAsynchronously, signMdn, signOutboundMdnIfOptional);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AS2MdnSettings {\n");
    sb.append("    dispositionNotificationTo: ").append(toIndentedString(dispositionNotificationTo)).append("\n");
    sb.append("    mdnText: ").append(toIndentedString(mdnText)).append("\n");
    sb.append("    micHashingAlgorithm: ").append(toIndentedString(micHashingAlgorithm)).append("\n");
    sb.append("    needMdn: ").append(toIndentedString(needMdn)).append("\n");
    sb.append("    receiptDeliveryUrl: ").append(toIndentedString(receiptDeliveryUrl)).append("\n");
    sb.append("    sendInboundMdnToMessageBox: ").append(toIndentedString(sendInboundMdnToMessageBox)).append("\n");
    sb.append("    sendMdnAsynchronously: ").append(toIndentedString(sendMdnAsynchronously)).append("\n");
    sb.append("    signMdn: ").append(toIndentedString(signMdn)).append("\n");
    sb.append("    signOutboundMdnIfOptional: ").append(toIndentedString(signOutboundMdnIfOptional)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dispositionNotificationTo");
    openapiFields.add("mdnText");
    openapiFields.add("micHashingAlgorithm");
    openapiFields.add("needMdn");
    openapiFields.add("receiptDeliveryUrl");
    openapiFields.add("sendInboundMdnToMessageBox");
    openapiFields.add("sendMdnAsynchronously");
    openapiFields.add("signMdn");
    openapiFields.add("signOutboundMdnIfOptional");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AS2MdnSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AS2MdnSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AS2MdnSettings is not found in the empty JSON string", AS2MdnSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AS2MdnSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AS2MdnSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dispositionNotificationTo") != null && !jsonObj.get("dispositionNotificationTo").isJsonNull()) && !jsonObj.get("dispositionNotificationTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dispositionNotificationTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dispositionNotificationTo").toString()));
      }
      if ((jsonObj.get("mdnText") != null && !jsonObj.get("mdnText").isJsonNull()) && !jsonObj.get("mdnText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mdnText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mdnText").toString()));
      }
      // validate the optional field `micHashingAlgorithm`
      if (jsonObj.get("micHashingAlgorithm") != null && !jsonObj.get("micHashingAlgorithm").isJsonNull()) {
        HashingAlgorithm.validateJsonElement(jsonObj.get("micHashingAlgorithm"));
      }
      if ((jsonObj.get("receiptDeliveryUrl") != null && !jsonObj.get("receiptDeliveryUrl").isJsonNull()) && !jsonObj.get("receiptDeliveryUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiptDeliveryUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiptDeliveryUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AS2MdnSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AS2MdnSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AS2MdnSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AS2MdnSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AS2MdnSettings>() {
           @Override
           public void write(JsonWriter out, AS2MdnSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AS2MdnSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AS2MdnSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AS2MdnSettings
   * @throws IOException if the JSON string is invalid with respect to AS2MdnSettings
   */
  public static AS2MdnSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AS2MdnSettings.class);
  }

  /**
   * Convert an instance of AS2MdnSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

