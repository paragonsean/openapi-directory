/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SegmentTerminatorSuffix;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * X12DelimiterOverrides
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:04.435317-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class X12DelimiterOverrides {
  public static final String SERIALIZED_NAME_COMPONENT_SEPARATOR = "componentSeparator";
  @SerializedName(SERIALIZED_NAME_COMPONENT_SEPARATOR)
  private Integer componentSeparator;

  public static final String SERIALIZED_NAME_DATA_ELEMENT_SEPARATOR = "dataElementSeparator";
  @SerializedName(SERIALIZED_NAME_DATA_ELEMENT_SEPARATOR)
  private Integer dataElementSeparator;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "messageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private String messageId;

  public static final String SERIALIZED_NAME_PROTOCOL_VERSION = "protocolVersion";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_VERSION)
  private String protocolVersion;

  public static final String SERIALIZED_NAME_REPLACE_CHARACTER = "replaceCharacter";
  @SerializedName(SERIALIZED_NAME_REPLACE_CHARACTER)
  private Integer replaceCharacter;

  public static final String SERIALIZED_NAME_REPLACE_SEPARATORS_IN_PAYLOAD = "replaceSeparatorsInPayload";
  @SerializedName(SERIALIZED_NAME_REPLACE_SEPARATORS_IN_PAYLOAD)
  private Boolean replaceSeparatorsInPayload;

  public static final String SERIALIZED_NAME_SEGMENT_TERMINATOR = "segmentTerminator";
  @SerializedName(SERIALIZED_NAME_SEGMENT_TERMINATOR)
  private Integer segmentTerminator;

  public static final String SERIALIZED_NAME_SEGMENT_TERMINATOR_SUFFIX = "segmentTerminatorSuffix";
  @SerializedName(SERIALIZED_NAME_SEGMENT_TERMINATOR_SUFFIX)
  private SegmentTerminatorSuffix segmentTerminatorSuffix;

  public static final String SERIALIZED_NAME_TARGET_NAMESPACE = "targetNamespace";
  @SerializedName(SERIALIZED_NAME_TARGET_NAMESPACE)
  private String targetNamespace;

  public X12DelimiterOverrides() {
  }

  public X12DelimiterOverrides componentSeparator(Integer componentSeparator) {
    this.componentSeparator = componentSeparator;
    return this;
  }

  /**
   * The component separator.
   * @return componentSeparator
   */
  @javax.annotation.Nullable
  public Integer getComponentSeparator() {
    return componentSeparator;
  }

  public void setComponentSeparator(Integer componentSeparator) {
    this.componentSeparator = componentSeparator;
  }


  public X12DelimiterOverrides dataElementSeparator(Integer dataElementSeparator) {
    this.dataElementSeparator = dataElementSeparator;
    return this;
  }

  /**
   * The data element separator.
   * @return dataElementSeparator
   */
  @javax.annotation.Nullable
  public Integer getDataElementSeparator() {
    return dataElementSeparator;
  }

  public void setDataElementSeparator(Integer dataElementSeparator) {
    this.dataElementSeparator = dataElementSeparator;
  }


  public X12DelimiterOverrides messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * The message id.
   * @return messageId
   */
  @javax.annotation.Nullable
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }


  public X12DelimiterOverrides protocolVersion(String protocolVersion) {
    this.protocolVersion = protocolVersion;
    return this;
  }

  /**
   * The protocol version.
   * @return protocolVersion
   */
  @javax.annotation.Nullable
  public String getProtocolVersion() {
    return protocolVersion;
  }

  public void setProtocolVersion(String protocolVersion) {
    this.protocolVersion = protocolVersion;
  }


  public X12DelimiterOverrides replaceCharacter(Integer replaceCharacter) {
    this.replaceCharacter = replaceCharacter;
    return this;
  }

  /**
   * The replacement character.
   * @return replaceCharacter
   */
  @javax.annotation.Nullable
  public Integer getReplaceCharacter() {
    return replaceCharacter;
  }

  public void setReplaceCharacter(Integer replaceCharacter) {
    this.replaceCharacter = replaceCharacter;
  }


  public X12DelimiterOverrides replaceSeparatorsInPayload(Boolean replaceSeparatorsInPayload) {
    this.replaceSeparatorsInPayload = replaceSeparatorsInPayload;
    return this;
  }

  /**
   * The value indicating whether to replace separators in payload.
   * @return replaceSeparatorsInPayload
   */
  @javax.annotation.Nullable
  public Boolean getReplaceSeparatorsInPayload() {
    return replaceSeparatorsInPayload;
  }

  public void setReplaceSeparatorsInPayload(Boolean replaceSeparatorsInPayload) {
    this.replaceSeparatorsInPayload = replaceSeparatorsInPayload;
  }


  public X12DelimiterOverrides segmentTerminator(Integer segmentTerminator) {
    this.segmentTerminator = segmentTerminator;
    return this;
  }

  /**
   * The segment terminator.
   * @return segmentTerminator
   */
  @javax.annotation.Nullable
  public Integer getSegmentTerminator() {
    return segmentTerminator;
  }

  public void setSegmentTerminator(Integer segmentTerminator) {
    this.segmentTerminator = segmentTerminator;
  }


  public X12DelimiterOverrides segmentTerminatorSuffix(SegmentTerminatorSuffix segmentTerminatorSuffix) {
    this.segmentTerminatorSuffix = segmentTerminatorSuffix;
    return this;
  }

  /**
   * Get segmentTerminatorSuffix
   * @return segmentTerminatorSuffix
   */
  @javax.annotation.Nullable
  public SegmentTerminatorSuffix getSegmentTerminatorSuffix() {
    return segmentTerminatorSuffix;
  }

  public void setSegmentTerminatorSuffix(SegmentTerminatorSuffix segmentTerminatorSuffix) {
    this.segmentTerminatorSuffix = segmentTerminatorSuffix;
  }


  public X12DelimiterOverrides targetNamespace(String targetNamespace) {
    this.targetNamespace = targetNamespace;
    return this;
  }

  /**
   * The target namespace on which this delimiter settings has to be applied.
   * @return targetNamespace
   */
  @javax.annotation.Nullable
  public String getTargetNamespace() {
    return targetNamespace;
  }

  public void setTargetNamespace(String targetNamespace) {
    this.targetNamespace = targetNamespace;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    X12DelimiterOverrides x12DelimiterOverrides = (X12DelimiterOverrides) o;
    return Objects.equals(this.componentSeparator, x12DelimiterOverrides.componentSeparator) &&
        Objects.equals(this.dataElementSeparator, x12DelimiterOverrides.dataElementSeparator) &&
        Objects.equals(this.messageId, x12DelimiterOverrides.messageId) &&
        Objects.equals(this.protocolVersion, x12DelimiterOverrides.protocolVersion) &&
        Objects.equals(this.replaceCharacter, x12DelimiterOverrides.replaceCharacter) &&
        Objects.equals(this.replaceSeparatorsInPayload, x12DelimiterOverrides.replaceSeparatorsInPayload) &&
        Objects.equals(this.segmentTerminator, x12DelimiterOverrides.segmentTerminator) &&
        Objects.equals(this.segmentTerminatorSuffix, x12DelimiterOverrides.segmentTerminatorSuffix) &&
        Objects.equals(this.targetNamespace, x12DelimiterOverrides.targetNamespace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(componentSeparator, dataElementSeparator, messageId, protocolVersion, replaceCharacter, replaceSeparatorsInPayload, segmentTerminator, segmentTerminatorSuffix, targetNamespace);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class X12DelimiterOverrides {\n");
    sb.append("    componentSeparator: ").append(toIndentedString(componentSeparator)).append("\n");
    sb.append("    dataElementSeparator: ").append(toIndentedString(dataElementSeparator)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    protocolVersion: ").append(toIndentedString(protocolVersion)).append("\n");
    sb.append("    replaceCharacter: ").append(toIndentedString(replaceCharacter)).append("\n");
    sb.append("    replaceSeparatorsInPayload: ").append(toIndentedString(replaceSeparatorsInPayload)).append("\n");
    sb.append("    segmentTerminator: ").append(toIndentedString(segmentTerminator)).append("\n");
    sb.append("    segmentTerminatorSuffix: ").append(toIndentedString(segmentTerminatorSuffix)).append("\n");
    sb.append("    targetNamespace: ").append(toIndentedString(targetNamespace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("componentSeparator");
    openapiFields.add("dataElementSeparator");
    openapiFields.add("messageId");
    openapiFields.add("protocolVersion");
    openapiFields.add("replaceCharacter");
    openapiFields.add("replaceSeparatorsInPayload");
    openapiFields.add("segmentTerminator");
    openapiFields.add("segmentTerminatorSuffix");
    openapiFields.add("targetNamespace");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to X12DelimiterOverrides
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!X12DelimiterOverrides.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in X12DelimiterOverrides is not found in the empty JSON string", X12DelimiterOverrides.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!X12DelimiterOverrides.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `X12DelimiterOverrides` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("messageId") != null && !jsonObj.get("messageId").isJsonNull()) && !jsonObj.get("messageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageId").toString()));
      }
      if ((jsonObj.get("protocolVersion") != null && !jsonObj.get("protocolVersion").isJsonNull()) && !jsonObj.get("protocolVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocolVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocolVersion").toString()));
      }
      // validate the optional field `segmentTerminatorSuffix`
      if (jsonObj.get("segmentTerminatorSuffix") != null && !jsonObj.get("segmentTerminatorSuffix").isJsonNull()) {
        SegmentTerminatorSuffix.validateJsonElement(jsonObj.get("segmentTerminatorSuffix"));
      }
      if ((jsonObj.get("targetNamespace") != null && !jsonObj.get("targetNamespace").isJsonNull()) && !jsonObj.get("targetNamespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetNamespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetNamespace").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!X12DelimiterOverrides.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'X12DelimiterOverrides' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<X12DelimiterOverrides> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(X12DelimiterOverrides.class));

       return (TypeAdapter<T>) new TypeAdapter<X12DelimiterOverrides>() {
           @Override
           public void write(JsonWriter out, X12DelimiterOverrides value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public X12DelimiterOverrides read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of X12DelimiterOverrides given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of X12DelimiterOverrides
   * @throws IOException if the JSON string is invalid with respect to X12DelimiterOverrides
   */
  public static X12DelimiterOverrides fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, X12DelimiterOverrides.class);
  }

  /**
   * Convert an instance of X12DelimiterOverrides to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

