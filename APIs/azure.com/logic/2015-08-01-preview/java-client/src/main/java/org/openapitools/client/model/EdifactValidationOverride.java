/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TrailingSeparatorPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EdifactValidationOverride
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:04.435317-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EdifactValidationOverride {
  public static final String SERIALIZED_NAME_ALLOW_LEADING_AND_TRAILING_SPACES_AND_ZEROES = "allowLeadingAndTrailingSpacesAndZeroes";
  @SerializedName(SERIALIZED_NAME_ALLOW_LEADING_AND_TRAILING_SPACES_AND_ZEROES)
  private Boolean allowLeadingAndTrailingSpacesAndZeroes;

  public static final String SERIALIZED_NAME_ENFORCE_CHARACTER_SET = "enforceCharacterSet";
  @SerializedName(SERIALIZED_NAME_ENFORCE_CHARACTER_SET)
  private Boolean enforceCharacterSet;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "messageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private String messageId;

  public static final String SERIALIZED_NAME_TRAILING_SEPARATOR_POLICY = "trailingSeparatorPolicy";
  @SerializedName(SERIALIZED_NAME_TRAILING_SEPARATOR_POLICY)
  private TrailingSeparatorPolicy trailingSeparatorPolicy;

  public static final String SERIALIZED_NAME_TRIM_LEADING_AND_TRAILING_SPACES_AND_ZEROES = "trimLeadingAndTrailingSpacesAndZeroes";
  @SerializedName(SERIALIZED_NAME_TRIM_LEADING_AND_TRAILING_SPACES_AND_ZEROES)
  private Boolean trimLeadingAndTrailingSpacesAndZeroes;

  public static final String SERIALIZED_NAME_VALIDATE_E_D_I_TYPES = "validateEDITypes";
  @SerializedName(SERIALIZED_NAME_VALIDATE_E_D_I_TYPES)
  private Boolean validateEDITypes;

  public static final String SERIALIZED_NAME_VALIDATE_X_S_D_TYPES = "validateXSDTypes";
  @SerializedName(SERIALIZED_NAME_VALIDATE_X_S_D_TYPES)
  private Boolean validateXSDTypes;

  public EdifactValidationOverride() {
  }

  public EdifactValidationOverride allowLeadingAndTrailingSpacesAndZeroes(Boolean allowLeadingAndTrailingSpacesAndZeroes) {
    this.allowLeadingAndTrailingSpacesAndZeroes = allowLeadingAndTrailingSpacesAndZeroes;
    return this;
  }

  /**
   * The value indicating whether to allow leading and trailing spaces and zeroes.
   * @return allowLeadingAndTrailingSpacesAndZeroes
   */
  @javax.annotation.Nullable
  public Boolean getAllowLeadingAndTrailingSpacesAndZeroes() {
    return allowLeadingAndTrailingSpacesAndZeroes;
  }

  public void setAllowLeadingAndTrailingSpacesAndZeroes(Boolean allowLeadingAndTrailingSpacesAndZeroes) {
    this.allowLeadingAndTrailingSpacesAndZeroes = allowLeadingAndTrailingSpacesAndZeroes;
  }


  public EdifactValidationOverride enforceCharacterSet(Boolean enforceCharacterSet) {
    this.enforceCharacterSet = enforceCharacterSet;
    return this;
  }

  /**
   * The value indicating whether to validate character Set.
   * @return enforceCharacterSet
   */
  @javax.annotation.Nullable
  public Boolean getEnforceCharacterSet() {
    return enforceCharacterSet;
  }

  public void setEnforceCharacterSet(Boolean enforceCharacterSet) {
    this.enforceCharacterSet = enforceCharacterSet;
  }


  public EdifactValidationOverride messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * The message id on which the validation settings has to be applied.
   * @return messageId
   */
  @javax.annotation.Nullable
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }


  public EdifactValidationOverride trailingSeparatorPolicy(TrailingSeparatorPolicy trailingSeparatorPolicy) {
    this.trailingSeparatorPolicy = trailingSeparatorPolicy;
    return this;
  }

  /**
   * Get trailingSeparatorPolicy
   * @return trailingSeparatorPolicy
   */
  @javax.annotation.Nullable
  public TrailingSeparatorPolicy getTrailingSeparatorPolicy() {
    return trailingSeparatorPolicy;
  }

  public void setTrailingSeparatorPolicy(TrailingSeparatorPolicy trailingSeparatorPolicy) {
    this.trailingSeparatorPolicy = trailingSeparatorPolicy;
  }


  public EdifactValidationOverride trimLeadingAndTrailingSpacesAndZeroes(Boolean trimLeadingAndTrailingSpacesAndZeroes) {
    this.trimLeadingAndTrailingSpacesAndZeroes = trimLeadingAndTrailingSpacesAndZeroes;
    return this;
  }

  /**
   * The value indicating whether to trim leading and trailing spaces and zeroes.
   * @return trimLeadingAndTrailingSpacesAndZeroes
   */
  @javax.annotation.Nullable
  public Boolean getTrimLeadingAndTrailingSpacesAndZeroes() {
    return trimLeadingAndTrailingSpacesAndZeroes;
  }

  public void setTrimLeadingAndTrailingSpacesAndZeroes(Boolean trimLeadingAndTrailingSpacesAndZeroes) {
    this.trimLeadingAndTrailingSpacesAndZeroes = trimLeadingAndTrailingSpacesAndZeroes;
  }


  public EdifactValidationOverride validateEDITypes(Boolean validateEDITypes) {
    this.validateEDITypes = validateEDITypes;
    return this;
  }

  /**
   * The value indicating whether to validate EDI types.
   * @return validateEDITypes
   */
  @javax.annotation.Nullable
  public Boolean getValidateEDITypes() {
    return validateEDITypes;
  }

  public void setValidateEDITypes(Boolean validateEDITypes) {
    this.validateEDITypes = validateEDITypes;
  }


  public EdifactValidationOverride validateXSDTypes(Boolean validateXSDTypes) {
    this.validateXSDTypes = validateXSDTypes;
    return this;
  }

  /**
   * The value indicating whether to validate XSD types.
   * @return validateXSDTypes
   */
  @javax.annotation.Nullable
  public Boolean getValidateXSDTypes() {
    return validateXSDTypes;
  }

  public void setValidateXSDTypes(Boolean validateXSDTypes) {
    this.validateXSDTypes = validateXSDTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EdifactValidationOverride edifactValidationOverride = (EdifactValidationOverride) o;
    return Objects.equals(this.allowLeadingAndTrailingSpacesAndZeroes, edifactValidationOverride.allowLeadingAndTrailingSpacesAndZeroes) &&
        Objects.equals(this.enforceCharacterSet, edifactValidationOverride.enforceCharacterSet) &&
        Objects.equals(this.messageId, edifactValidationOverride.messageId) &&
        Objects.equals(this.trailingSeparatorPolicy, edifactValidationOverride.trailingSeparatorPolicy) &&
        Objects.equals(this.trimLeadingAndTrailingSpacesAndZeroes, edifactValidationOverride.trimLeadingAndTrailingSpacesAndZeroes) &&
        Objects.equals(this.validateEDITypes, edifactValidationOverride.validateEDITypes) &&
        Objects.equals(this.validateXSDTypes, edifactValidationOverride.validateXSDTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowLeadingAndTrailingSpacesAndZeroes, enforceCharacterSet, messageId, trailingSeparatorPolicy, trimLeadingAndTrailingSpacesAndZeroes, validateEDITypes, validateXSDTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EdifactValidationOverride {\n");
    sb.append("    allowLeadingAndTrailingSpacesAndZeroes: ").append(toIndentedString(allowLeadingAndTrailingSpacesAndZeroes)).append("\n");
    sb.append("    enforceCharacterSet: ").append(toIndentedString(enforceCharacterSet)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    trailingSeparatorPolicy: ").append(toIndentedString(trailingSeparatorPolicy)).append("\n");
    sb.append("    trimLeadingAndTrailingSpacesAndZeroes: ").append(toIndentedString(trimLeadingAndTrailingSpacesAndZeroes)).append("\n");
    sb.append("    validateEDITypes: ").append(toIndentedString(validateEDITypes)).append("\n");
    sb.append("    validateXSDTypes: ").append(toIndentedString(validateXSDTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowLeadingAndTrailingSpacesAndZeroes");
    openapiFields.add("enforceCharacterSet");
    openapiFields.add("messageId");
    openapiFields.add("trailingSeparatorPolicy");
    openapiFields.add("trimLeadingAndTrailingSpacesAndZeroes");
    openapiFields.add("validateEDITypes");
    openapiFields.add("validateXSDTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EdifactValidationOverride
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EdifactValidationOverride.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EdifactValidationOverride is not found in the empty JSON string", EdifactValidationOverride.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EdifactValidationOverride.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EdifactValidationOverride` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("messageId") != null && !jsonObj.get("messageId").isJsonNull()) && !jsonObj.get("messageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageId").toString()));
      }
      // validate the optional field `trailingSeparatorPolicy`
      if (jsonObj.get("trailingSeparatorPolicy") != null && !jsonObj.get("trailingSeparatorPolicy").isJsonNull()) {
        TrailingSeparatorPolicy.validateJsonElement(jsonObj.get("trailingSeparatorPolicy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EdifactValidationOverride.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EdifactValidationOverride' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EdifactValidationOverride> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EdifactValidationOverride.class));

       return (TypeAdapter<T>) new TypeAdapter<EdifactValidationOverride>() {
           @Override
           public void write(JsonWriter out, EdifactValidationOverride value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EdifactValidationOverride read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EdifactValidationOverride given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EdifactValidationOverride
   * @throws IOException if the JSON string is invalid with respect to EdifactValidationOverride
   */
  public static EdifactValidationOverride fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EdifactValidationOverride.class);
  }

  /**
   * Convert an instance of EdifactValidationOverride to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

