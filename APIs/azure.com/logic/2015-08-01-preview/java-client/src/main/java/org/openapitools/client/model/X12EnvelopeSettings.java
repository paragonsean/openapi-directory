/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UsageIndicator;
import org.openapitools.client.model.X12DateFormat;
import org.openapitools.client.model.X12TimeFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * X12EnvelopeSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:04.435317-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class X12EnvelopeSettings {
  public static final String SERIALIZED_NAME_CONTROL_STANDARDS_ID = "controlStandardsId";
  @SerializedName(SERIALIZED_NAME_CONTROL_STANDARDS_ID)
  private Integer controlStandardsId;

  public static final String SERIALIZED_NAME_CONTROL_VERSION_NUMBER = "controlVersionNumber";
  @SerializedName(SERIALIZED_NAME_CONTROL_VERSION_NUMBER)
  private String controlVersionNumber;

  public static final String SERIALIZED_NAME_ENABLE_DEFAULT_GROUP_HEADERS = "enableDefaultGroupHeaders";
  @SerializedName(SERIALIZED_NAME_ENABLE_DEFAULT_GROUP_HEADERS)
  private Boolean enableDefaultGroupHeaders;

  public static final String SERIALIZED_NAME_FUNCTIONAL_GROUP_ID = "functionalGroupId";
  @SerializedName(SERIALIZED_NAME_FUNCTIONAL_GROUP_ID)
  private String functionalGroupId;

  public static final String SERIALIZED_NAME_GROUP_CONTROL_NUMBER_LOWER_BOUND = "groupControlNumberLowerBound";
  @SerializedName(SERIALIZED_NAME_GROUP_CONTROL_NUMBER_LOWER_BOUND)
  private Integer groupControlNumberLowerBound;

  public static final String SERIALIZED_NAME_GROUP_CONTROL_NUMBER_UPPER_BOUND = "groupControlNumberUpperBound";
  @SerializedName(SERIALIZED_NAME_GROUP_CONTROL_NUMBER_UPPER_BOUND)
  private Integer groupControlNumberUpperBound;

  public static final String SERIALIZED_NAME_GROUP_HEADER_AGENCY_CODE = "groupHeaderAgencyCode";
  @SerializedName(SERIALIZED_NAME_GROUP_HEADER_AGENCY_CODE)
  private String groupHeaderAgencyCode;

  public static final String SERIALIZED_NAME_GROUP_HEADER_DATE_FORMAT = "groupHeaderDateFormat";
  @SerializedName(SERIALIZED_NAME_GROUP_HEADER_DATE_FORMAT)
  private X12DateFormat groupHeaderDateFormat;

  public static final String SERIALIZED_NAME_GROUP_HEADER_TIME_FORMAT = "groupHeaderTimeFormat";
  @SerializedName(SERIALIZED_NAME_GROUP_HEADER_TIME_FORMAT)
  private X12TimeFormat groupHeaderTimeFormat;

  public static final String SERIALIZED_NAME_GROUP_HEADER_VERSION = "groupHeaderVersion";
  @SerializedName(SERIALIZED_NAME_GROUP_HEADER_VERSION)
  private String groupHeaderVersion;

  public static final String SERIALIZED_NAME_INTERCHANGE_CONTROL_NUMBER_LOWER_BOUND = "interchangeControlNumberLowerBound";
  @SerializedName(SERIALIZED_NAME_INTERCHANGE_CONTROL_NUMBER_LOWER_BOUND)
  private Integer interchangeControlNumberLowerBound;

  public static final String SERIALIZED_NAME_INTERCHANGE_CONTROL_NUMBER_UPPER_BOUND = "interchangeControlNumberUpperBound";
  @SerializedName(SERIALIZED_NAME_INTERCHANGE_CONTROL_NUMBER_UPPER_BOUND)
  private Integer interchangeControlNumberUpperBound;

  public static final String SERIALIZED_NAME_OVERWRITE_EXISTING_TRANSACTION_SET_CONTROL_NUMBER = "overwriteExistingTransactionSetControlNumber";
  @SerializedName(SERIALIZED_NAME_OVERWRITE_EXISTING_TRANSACTION_SET_CONTROL_NUMBER)
  private Boolean overwriteExistingTransactionSetControlNumber;

  public static final String SERIALIZED_NAME_RECEIVER_APPLICATION_ID = "receiverApplicationId";
  @SerializedName(SERIALIZED_NAME_RECEIVER_APPLICATION_ID)
  private String receiverApplicationId;

  public static final String SERIALIZED_NAME_ROLLOVER_GROUP_CONTROL_NUMBER = "rolloverGroupControlNumber";
  @SerializedName(SERIALIZED_NAME_ROLLOVER_GROUP_CONTROL_NUMBER)
  private Boolean rolloverGroupControlNumber;

  public static final String SERIALIZED_NAME_ROLLOVER_INTERCHANGE_CONTROL_NUMBER = "rolloverInterchangeControlNumber";
  @SerializedName(SERIALIZED_NAME_ROLLOVER_INTERCHANGE_CONTROL_NUMBER)
  private Boolean rolloverInterchangeControlNumber;

  public static final String SERIALIZED_NAME_ROLLOVER_TRANSACTION_SET_CONTROL_NUMBER = "rolloverTransactionSetControlNumber";
  @SerializedName(SERIALIZED_NAME_ROLLOVER_TRANSACTION_SET_CONTROL_NUMBER)
  private Boolean rolloverTransactionSetControlNumber;

  public static final String SERIALIZED_NAME_SENDER_APPLICATION_ID = "senderApplicationId";
  @SerializedName(SERIALIZED_NAME_SENDER_APPLICATION_ID)
  private String senderApplicationId;

  public static final String SERIALIZED_NAME_TRANSACTION_SET_CONTROL_NUMBER_LOWER_BOUND = "transactionSetControlNumberLowerBound";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_SET_CONTROL_NUMBER_LOWER_BOUND)
  private Integer transactionSetControlNumberLowerBound;

  public static final String SERIALIZED_NAME_TRANSACTION_SET_CONTROL_NUMBER_PREFIX = "transactionSetControlNumberPrefix";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_SET_CONTROL_NUMBER_PREFIX)
  private String transactionSetControlNumberPrefix;

  public static final String SERIALIZED_NAME_TRANSACTION_SET_CONTROL_NUMBER_SUFFIX = "transactionSetControlNumberSuffix";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_SET_CONTROL_NUMBER_SUFFIX)
  private String transactionSetControlNumberSuffix;

  public static final String SERIALIZED_NAME_TRANSACTION_SET_CONTROL_NUMBER_UPPER_BOUND = "transactionSetControlNumberUpperBound";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_SET_CONTROL_NUMBER_UPPER_BOUND)
  private Integer transactionSetControlNumberUpperBound;

  public static final String SERIALIZED_NAME_USAGE_INDICATOR = "usageIndicator";
  @SerializedName(SERIALIZED_NAME_USAGE_INDICATOR)
  private UsageIndicator usageIndicator;

  public static final String SERIALIZED_NAME_USE_CONTROL_STANDARDS_ID_AS_REPETITION_CHARACTER = "useControlStandardsIdAsRepetitionCharacter";
  @SerializedName(SERIALIZED_NAME_USE_CONTROL_STANDARDS_ID_AS_REPETITION_CHARACTER)
  private Boolean useControlStandardsIdAsRepetitionCharacter;

  public X12EnvelopeSettings() {
  }

  public X12EnvelopeSettings controlStandardsId(Integer controlStandardsId) {
    this.controlStandardsId = controlStandardsId;
    return this;
  }

  /**
   * The controls standards id.
   * @return controlStandardsId
   */
  @javax.annotation.Nullable
  public Integer getControlStandardsId() {
    return controlStandardsId;
  }

  public void setControlStandardsId(Integer controlStandardsId) {
    this.controlStandardsId = controlStandardsId;
  }


  public X12EnvelopeSettings controlVersionNumber(String controlVersionNumber) {
    this.controlVersionNumber = controlVersionNumber;
    return this;
  }

  /**
   * The control version number.
   * @return controlVersionNumber
   */
  @javax.annotation.Nullable
  public String getControlVersionNumber() {
    return controlVersionNumber;
  }

  public void setControlVersionNumber(String controlVersionNumber) {
    this.controlVersionNumber = controlVersionNumber;
  }


  public X12EnvelopeSettings enableDefaultGroupHeaders(Boolean enableDefaultGroupHeaders) {
    this.enableDefaultGroupHeaders = enableDefaultGroupHeaders;
    return this;
  }

  /**
   * The value indicating whether to enable default group headers.
   * @return enableDefaultGroupHeaders
   */
  @javax.annotation.Nullable
  public Boolean getEnableDefaultGroupHeaders() {
    return enableDefaultGroupHeaders;
  }

  public void setEnableDefaultGroupHeaders(Boolean enableDefaultGroupHeaders) {
    this.enableDefaultGroupHeaders = enableDefaultGroupHeaders;
  }


  public X12EnvelopeSettings functionalGroupId(String functionalGroupId) {
    this.functionalGroupId = functionalGroupId;
    return this;
  }

  /**
   * The functional group id.
   * @return functionalGroupId
   */
  @javax.annotation.Nullable
  public String getFunctionalGroupId() {
    return functionalGroupId;
  }

  public void setFunctionalGroupId(String functionalGroupId) {
    this.functionalGroupId = functionalGroupId;
  }


  public X12EnvelopeSettings groupControlNumberLowerBound(Integer groupControlNumberLowerBound) {
    this.groupControlNumberLowerBound = groupControlNumberLowerBound;
    return this;
  }

  /**
   * The group control number lower bound.
   * @return groupControlNumberLowerBound
   */
  @javax.annotation.Nullable
  public Integer getGroupControlNumberLowerBound() {
    return groupControlNumberLowerBound;
  }

  public void setGroupControlNumberLowerBound(Integer groupControlNumberLowerBound) {
    this.groupControlNumberLowerBound = groupControlNumberLowerBound;
  }


  public X12EnvelopeSettings groupControlNumberUpperBound(Integer groupControlNumberUpperBound) {
    this.groupControlNumberUpperBound = groupControlNumberUpperBound;
    return this;
  }

  /**
   * The group control number upper bound.
   * @return groupControlNumberUpperBound
   */
  @javax.annotation.Nullable
  public Integer getGroupControlNumberUpperBound() {
    return groupControlNumberUpperBound;
  }

  public void setGroupControlNumberUpperBound(Integer groupControlNumberUpperBound) {
    this.groupControlNumberUpperBound = groupControlNumberUpperBound;
  }


  public X12EnvelopeSettings groupHeaderAgencyCode(String groupHeaderAgencyCode) {
    this.groupHeaderAgencyCode = groupHeaderAgencyCode;
    return this;
  }

  /**
   * The group header agency code.
   * @return groupHeaderAgencyCode
   */
  @javax.annotation.Nullable
  public String getGroupHeaderAgencyCode() {
    return groupHeaderAgencyCode;
  }

  public void setGroupHeaderAgencyCode(String groupHeaderAgencyCode) {
    this.groupHeaderAgencyCode = groupHeaderAgencyCode;
  }


  public X12EnvelopeSettings groupHeaderDateFormat(X12DateFormat groupHeaderDateFormat) {
    this.groupHeaderDateFormat = groupHeaderDateFormat;
    return this;
  }

  /**
   * Get groupHeaderDateFormat
   * @return groupHeaderDateFormat
   */
  @javax.annotation.Nullable
  public X12DateFormat getGroupHeaderDateFormat() {
    return groupHeaderDateFormat;
  }

  public void setGroupHeaderDateFormat(X12DateFormat groupHeaderDateFormat) {
    this.groupHeaderDateFormat = groupHeaderDateFormat;
  }


  public X12EnvelopeSettings groupHeaderTimeFormat(X12TimeFormat groupHeaderTimeFormat) {
    this.groupHeaderTimeFormat = groupHeaderTimeFormat;
    return this;
  }

  /**
   * Get groupHeaderTimeFormat
   * @return groupHeaderTimeFormat
   */
  @javax.annotation.Nullable
  public X12TimeFormat getGroupHeaderTimeFormat() {
    return groupHeaderTimeFormat;
  }

  public void setGroupHeaderTimeFormat(X12TimeFormat groupHeaderTimeFormat) {
    this.groupHeaderTimeFormat = groupHeaderTimeFormat;
  }


  public X12EnvelopeSettings groupHeaderVersion(String groupHeaderVersion) {
    this.groupHeaderVersion = groupHeaderVersion;
    return this;
  }

  /**
   * The group header version.
   * @return groupHeaderVersion
   */
  @javax.annotation.Nullable
  public String getGroupHeaderVersion() {
    return groupHeaderVersion;
  }

  public void setGroupHeaderVersion(String groupHeaderVersion) {
    this.groupHeaderVersion = groupHeaderVersion;
  }


  public X12EnvelopeSettings interchangeControlNumberLowerBound(Integer interchangeControlNumberLowerBound) {
    this.interchangeControlNumberLowerBound = interchangeControlNumberLowerBound;
    return this;
  }

  /**
   * The interchange  control number lower bound.
   * @return interchangeControlNumberLowerBound
   */
  @javax.annotation.Nullable
  public Integer getInterchangeControlNumberLowerBound() {
    return interchangeControlNumberLowerBound;
  }

  public void setInterchangeControlNumberLowerBound(Integer interchangeControlNumberLowerBound) {
    this.interchangeControlNumberLowerBound = interchangeControlNumberLowerBound;
  }


  public X12EnvelopeSettings interchangeControlNumberUpperBound(Integer interchangeControlNumberUpperBound) {
    this.interchangeControlNumberUpperBound = interchangeControlNumberUpperBound;
    return this;
  }

  /**
   * The interchange  control number upper bound.
   * @return interchangeControlNumberUpperBound
   */
  @javax.annotation.Nullable
  public Integer getInterchangeControlNumberUpperBound() {
    return interchangeControlNumberUpperBound;
  }

  public void setInterchangeControlNumberUpperBound(Integer interchangeControlNumberUpperBound) {
    this.interchangeControlNumberUpperBound = interchangeControlNumberUpperBound;
  }


  public X12EnvelopeSettings overwriteExistingTransactionSetControlNumber(Boolean overwriteExistingTransactionSetControlNumber) {
    this.overwriteExistingTransactionSetControlNumber = overwriteExistingTransactionSetControlNumber;
    return this;
  }

  /**
   * The value indicating whether to overwrite existing transaction set control number.
   * @return overwriteExistingTransactionSetControlNumber
   */
  @javax.annotation.Nullable
  public Boolean getOverwriteExistingTransactionSetControlNumber() {
    return overwriteExistingTransactionSetControlNumber;
  }

  public void setOverwriteExistingTransactionSetControlNumber(Boolean overwriteExistingTransactionSetControlNumber) {
    this.overwriteExistingTransactionSetControlNumber = overwriteExistingTransactionSetControlNumber;
  }


  public X12EnvelopeSettings receiverApplicationId(String receiverApplicationId) {
    this.receiverApplicationId = receiverApplicationId;
    return this;
  }

  /**
   * The receiver application id.
   * @return receiverApplicationId
   */
  @javax.annotation.Nullable
  public String getReceiverApplicationId() {
    return receiverApplicationId;
  }

  public void setReceiverApplicationId(String receiverApplicationId) {
    this.receiverApplicationId = receiverApplicationId;
  }


  public X12EnvelopeSettings rolloverGroupControlNumber(Boolean rolloverGroupControlNumber) {
    this.rolloverGroupControlNumber = rolloverGroupControlNumber;
    return this;
  }

  /**
   * The value indicating whether to rollover group control number.
   * @return rolloverGroupControlNumber
   */
  @javax.annotation.Nullable
  public Boolean getRolloverGroupControlNumber() {
    return rolloverGroupControlNumber;
  }

  public void setRolloverGroupControlNumber(Boolean rolloverGroupControlNumber) {
    this.rolloverGroupControlNumber = rolloverGroupControlNumber;
  }


  public X12EnvelopeSettings rolloverInterchangeControlNumber(Boolean rolloverInterchangeControlNumber) {
    this.rolloverInterchangeControlNumber = rolloverInterchangeControlNumber;
    return this;
  }

  /**
   * The value indicating whether to rollover interchange control number.
   * @return rolloverInterchangeControlNumber
   */
  @javax.annotation.Nullable
  public Boolean getRolloverInterchangeControlNumber() {
    return rolloverInterchangeControlNumber;
  }

  public void setRolloverInterchangeControlNumber(Boolean rolloverInterchangeControlNumber) {
    this.rolloverInterchangeControlNumber = rolloverInterchangeControlNumber;
  }


  public X12EnvelopeSettings rolloverTransactionSetControlNumber(Boolean rolloverTransactionSetControlNumber) {
    this.rolloverTransactionSetControlNumber = rolloverTransactionSetControlNumber;
    return this;
  }

  /**
   * The value indicating whether to rollover transaction set control number.
   * @return rolloverTransactionSetControlNumber
   */
  @javax.annotation.Nullable
  public Boolean getRolloverTransactionSetControlNumber() {
    return rolloverTransactionSetControlNumber;
  }

  public void setRolloverTransactionSetControlNumber(Boolean rolloverTransactionSetControlNumber) {
    this.rolloverTransactionSetControlNumber = rolloverTransactionSetControlNumber;
  }


  public X12EnvelopeSettings senderApplicationId(String senderApplicationId) {
    this.senderApplicationId = senderApplicationId;
    return this;
  }

  /**
   * The sender application id.
   * @return senderApplicationId
   */
  @javax.annotation.Nullable
  public String getSenderApplicationId() {
    return senderApplicationId;
  }

  public void setSenderApplicationId(String senderApplicationId) {
    this.senderApplicationId = senderApplicationId;
  }


  public X12EnvelopeSettings transactionSetControlNumberLowerBound(Integer transactionSetControlNumberLowerBound) {
    this.transactionSetControlNumberLowerBound = transactionSetControlNumberLowerBound;
    return this;
  }

  /**
   * The transaction set control number lower bound.
   * @return transactionSetControlNumberLowerBound
   */
  @javax.annotation.Nullable
  public Integer getTransactionSetControlNumberLowerBound() {
    return transactionSetControlNumberLowerBound;
  }

  public void setTransactionSetControlNumberLowerBound(Integer transactionSetControlNumberLowerBound) {
    this.transactionSetControlNumberLowerBound = transactionSetControlNumberLowerBound;
  }


  public X12EnvelopeSettings transactionSetControlNumberPrefix(String transactionSetControlNumberPrefix) {
    this.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
    return this;
  }

  /**
   * The transaction set control number prefix.
   * @return transactionSetControlNumberPrefix
   */
  @javax.annotation.Nullable
  public String getTransactionSetControlNumberPrefix() {
    return transactionSetControlNumberPrefix;
  }

  public void setTransactionSetControlNumberPrefix(String transactionSetControlNumberPrefix) {
    this.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
  }


  public X12EnvelopeSettings transactionSetControlNumberSuffix(String transactionSetControlNumberSuffix) {
    this.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
    return this;
  }

  /**
   * The transaction set control number suffix.
   * @return transactionSetControlNumberSuffix
   */
  @javax.annotation.Nullable
  public String getTransactionSetControlNumberSuffix() {
    return transactionSetControlNumberSuffix;
  }

  public void setTransactionSetControlNumberSuffix(String transactionSetControlNumberSuffix) {
    this.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
  }


  public X12EnvelopeSettings transactionSetControlNumberUpperBound(Integer transactionSetControlNumberUpperBound) {
    this.transactionSetControlNumberUpperBound = transactionSetControlNumberUpperBound;
    return this;
  }

  /**
   * The transaction set control number upper bound.
   * @return transactionSetControlNumberUpperBound
   */
  @javax.annotation.Nullable
  public Integer getTransactionSetControlNumberUpperBound() {
    return transactionSetControlNumberUpperBound;
  }

  public void setTransactionSetControlNumberUpperBound(Integer transactionSetControlNumberUpperBound) {
    this.transactionSetControlNumberUpperBound = transactionSetControlNumberUpperBound;
  }


  public X12EnvelopeSettings usageIndicator(UsageIndicator usageIndicator) {
    this.usageIndicator = usageIndicator;
    return this;
  }

  /**
   * Get usageIndicator
   * @return usageIndicator
   */
  @javax.annotation.Nullable
  public UsageIndicator getUsageIndicator() {
    return usageIndicator;
  }

  public void setUsageIndicator(UsageIndicator usageIndicator) {
    this.usageIndicator = usageIndicator;
  }


  public X12EnvelopeSettings useControlStandardsIdAsRepetitionCharacter(Boolean useControlStandardsIdAsRepetitionCharacter) {
    this.useControlStandardsIdAsRepetitionCharacter = useControlStandardsIdAsRepetitionCharacter;
    return this;
  }

  /**
   * The value indicating whether to use control standards id as repetition character.
   * @return useControlStandardsIdAsRepetitionCharacter
   */
  @javax.annotation.Nullable
  public Boolean getUseControlStandardsIdAsRepetitionCharacter() {
    return useControlStandardsIdAsRepetitionCharacter;
  }

  public void setUseControlStandardsIdAsRepetitionCharacter(Boolean useControlStandardsIdAsRepetitionCharacter) {
    this.useControlStandardsIdAsRepetitionCharacter = useControlStandardsIdAsRepetitionCharacter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    X12EnvelopeSettings x12EnvelopeSettings = (X12EnvelopeSettings) o;
    return Objects.equals(this.controlStandardsId, x12EnvelopeSettings.controlStandardsId) &&
        Objects.equals(this.controlVersionNumber, x12EnvelopeSettings.controlVersionNumber) &&
        Objects.equals(this.enableDefaultGroupHeaders, x12EnvelopeSettings.enableDefaultGroupHeaders) &&
        Objects.equals(this.functionalGroupId, x12EnvelopeSettings.functionalGroupId) &&
        Objects.equals(this.groupControlNumberLowerBound, x12EnvelopeSettings.groupControlNumberLowerBound) &&
        Objects.equals(this.groupControlNumberUpperBound, x12EnvelopeSettings.groupControlNumberUpperBound) &&
        Objects.equals(this.groupHeaderAgencyCode, x12EnvelopeSettings.groupHeaderAgencyCode) &&
        Objects.equals(this.groupHeaderDateFormat, x12EnvelopeSettings.groupHeaderDateFormat) &&
        Objects.equals(this.groupHeaderTimeFormat, x12EnvelopeSettings.groupHeaderTimeFormat) &&
        Objects.equals(this.groupHeaderVersion, x12EnvelopeSettings.groupHeaderVersion) &&
        Objects.equals(this.interchangeControlNumberLowerBound, x12EnvelopeSettings.interchangeControlNumberLowerBound) &&
        Objects.equals(this.interchangeControlNumberUpperBound, x12EnvelopeSettings.interchangeControlNumberUpperBound) &&
        Objects.equals(this.overwriteExistingTransactionSetControlNumber, x12EnvelopeSettings.overwriteExistingTransactionSetControlNumber) &&
        Objects.equals(this.receiverApplicationId, x12EnvelopeSettings.receiverApplicationId) &&
        Objects.equals(this.rolloverGroupControlNumber, x12EnvelopeSettings.rolloverGroupControlNumber) &&
        Objects.equals(this.rolloverInterchangeControlNumber, x12EnvelopeSettings.rolloverInterchangeControlNumber) &&
        Objects.equals(this.rolloverTransactionSetControlNumber, x12EnvelopeSettings.rolloverTransactionSetControlNumber) &&
        Objects.equals(this.senderApplicationId, x12EnvelopeSettings.senderApplicationId) &&
        Objects.equals(this.transactionSetControlNumberLowerBound, x12EnvelopeSettings.transactionSetControlNumberLowerBound) &&
        Objects.equals(this.transactionSetControlNumberPrefix, x12EnvelopeSettings.transactionSetControlNumberPrefix) &&
        Objects.equals(this.transactionSetControlNumberSuffix, x12EnvelopeSettings.transactionSetControlNumberSuffix) &&
        Objects.equals(this.transactionSetControlNumberUpperBound, x12EnvelopeSettings.transactionSetControlNumberUpperBound) &&
        Objects.equals(this.usageIndicator, x12EnvelopeSettings.usageIndicator) &&
        Objects.equals(this.useControlStandardsIdAsRepetitionCharacter, x12EnvelopeSettings.useControlStandardsIdAsRepetitionCharacter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(controlStandardsId, controlVersionNumber, enableDefaultGroupHeaders, functionalGroupId, groupControlNumberLowerBound, groupControlNumberUpperBound, groupHeaderAgencyCode, groupHeaderDateFormat, groupHeaderTimeFormat, groupHeaderVersion, interchangeControlNumberLowerBound, interchangeControlNumberUpperBound, overwriteExistingTransactionSetControlNumber, receiverApplicationId, rolloverGroupControlNumber, rolloverInterchangeControlNumber, rolloverTransactionSetControlNumber, senderApplicationId, transactionSetControlNumberLowerBound, transactionSetControlNumberPrefix, transactionSetControlNumberSuffix, transactionSetControlNumberUpperBound, usageIndicator, useControlStandardsIdAsRepetitionCharacter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class X12EnvelopeSettings {\n");
    sb.append("    controlStandardsId: ").append(toIndentedString(controlStandardsId)).append("\n");
    sb.append("    controlVersionNumber: ").append(toIndentedString(controlVersionNumber)).append("\n");
    sb.append("    enableDefaultGroupHeaders: ").append(toIndentedString(enableDefaultGroupHeaders)).append("\n");
    sb.append("    functionalGroupId: ").append(toIndentedString(functionalGroupId)).append("\n");
    sb.append("    groupControlNumberLowerBound: ").append(toIndentedString(groupControlNumberLowerBound)).append("\n");
    sb.append("    groupControlNumberUpperBound: ").append(toIndentedString(groupControlNumberUpperBound)).append("\n");
    sb.append("    groupHeaderAgencyCode: ").append(toIndentedString(groupHeaderAgencyCode)).append("\n");
    sb.append("    groupHeaderDateFormat: ").append(toIndentedString(groupHeaderDateFormat)).append("\n");
    sb.append("    groupHeaderTimeFormat: ").append(toIndentedString(groupHeaderTimeFormat)).append("\n");
    sb.append("    groupHeaderVersion: ").append(toIndentedString(groupHeaderVersion)).append("\n");
    sb.append("    interchangeControlNumberLowerBound: ").append(toIndentedString(interchangeControlNumberLowerBound)).append("\n");
    sb.append("    interchangeControlNumberUpperBound: ").append(toIndentedString(interchangeControlNumberUpperBound)).append("\n");
    sb.append("    overwriteExistingTransactionSetControlNumber: ").append(toIndentedString(overwriteExistingTransactionSetControlNumber)).append("\n");
    sb.append("    receiverApplicationId: ").append(toIndentedString(receiverApplicationId)).append("\n");
    sb.append("    rolloverGroupControlNumber: ").append(toIndentedString(rolloverGroupControlNumber)).append("\n");
    sb.append("    rolloverInterchangeControlNumber: ").append(toIndentedString(rolloverInterchangeControlNumber)).append("\n");
    sb.append("    rolloverTransactionSetControlNumber: ").append(toIndentedString(rolloverTransactionSetControlNumber)).append("\n");
    sb.append("    senderApplicationId: ").append(toIndentedString(senderApplicationId)).append("\n");
    sb.append("    transactionSetControlNumberLowerBound: ").append(toIndentedString(transactionSetControlNumberLowerBound)).append("\n");
    sb.append("    transactionSetControlNumberPrefix: ").append(toIndentedString(transactionSetControlNumberPrefix)).append("\n");
    sb.append("    transactionSetControlNumberSuffix: ").append(toIndentedString(transactionSetControlNumberSuffix)).append("\n");
    sb.append("    transactionSetControlNumberUpperBound: ").append(toIndentedString(transactionSetControlNumberUpperBound)).append("\n");
    sb.append("    usageIndicator: ").append(toIndentedString(usageIndicator)).append("\n");
    sb.append("    useControlStandardsIdAsRepetitionCharacter: ").append(toIndentedString(useControlStandardsIdAsRepetitionCharacter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("controlStandardsId");
    openapiFields.add("controlVersionNumber");
    openapiFields.add("enableDefaultGroupHeaders");
    openapiFields.add("functionalGroupId");
    openapiFields.add("groupControlNumberLowerBound");
    openapiFields.add("groupControlNumberUpperBound");
    openapiFields.add("groupHeaderAgencyCode");
    openapiFields.add("groupHeaderDateFormat");
    openapiFields.add("groupHeaderTimeFormat");
    openapiFields.add("groupHeaderVersion");
    openapiFields.add("interchangeControlNumberLowerBound");
    openapiFields.add("interchangeControlNumberUpperBound");
    openapiFields.add("overwriteExistingTransactionSetControlNumber");
    openapiFields.add("receiverApplicationId");
    openapiFields.add("rolloverGroupControlNumber");
    openapiFields.add("rolloverInterchangeControlNumber");
    openapiFields.add("rolloverTransactionSetControlNumber");
    openapiFields.add("senderApplicationId");
    openapiFields.add("transactionSetControlNumberLowerBound");
    openapiFields.add("transactionSetControlNumberPrefix");
    openapiFields.add("transactionSetControlNumberSuffix");
    openapiFields.add("transactionSetControlNumberUpperBound");
    openapiFields.add("usageIndicator");
    openapiFields.add("useControlStandardsIdAsRepetitionCharacter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to X12EnvelopeSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!X12EnvelopeSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in X12EnvelopeSettings is not found in the empty JSON string", X12EnvelopeSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!X12EnvelopeSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `X12EnvelopeSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("controlVersionNumber") != null && !jsonObj.get("controlVersionNumber").isJsonNull()) && !jsonObj.get("controlVersionNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controlVersionNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controlVersionNumber").toString()));
      }
      if ((jsonObj.get("functionalGroupId") != null && !jsonObj.get("functionalGroupId").isJsonNull()) && !jsonObj.get("functionalGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionalGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionalGroupId").toString()));
      }
      if ((jsonObj.get("groupHeaderAgencyCode") != null && !jsonObj.get("groupHeaderAgencyCode").isJsonNull()) && !jsonObj.get("groupHeaderAgencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupHeaderAgencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupHeaderAgencyCode").toString()));
      }
      // validate the optional field `groupHeaderDateFormat`
      if (jsonObj.get("groupHeaderDateFormat") != null && !jsonObj.get("groupHeaderDateFormat").isJsonNull()) {
        X12DateFormat.validateJsonElement(jsonObj.get("groupHeaderDateFormat"));
      }
      // validate the optional field `groupHeaderTimeFormat`
      if (jsonObj.get("groupHeaderTimeFormat") != null && !jsonObj.get("groupHeaderTimeFormat").isJsonNull()) {
        X12TimeFormat.validateJsonElement(jsonObj.get("groupHeaderTimeFormat"));
      }
      if ((jsonObj.get("groupHeaderVersion") != null && !jsonObj.get("groupHeaderVersion").isJsonNull()) && !jsonObj.get("groupHeaderVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupHeaderVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupHeaderVersion").toString()));
      }
      if ((jsonObj.get("receiverApplicationId") != null && !jsonObj.get("receiverApplicationId").isJsonNull()) && !jsonObj.get("receiverApplicationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverApplicationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverApplicationId").toString()));
      }
      if ((jsonObj.get("senderApplicationId") != null && !jsonObj.get("senderApplicationId").isJsonNull()) && !jsonObj.get("senderApplicationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `senderApplicationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("senderApplicationId").toString()));
      }
      if ((jsonObj.get("transactionSetControlNumberPrefix") != null && !jsonObj.get("transactionSetControlNumberPrefix").isJsonNull()) && !jsonObj.get("transactionSetControlNumberPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionSetControlNumberPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionSetControlNumberPrefix").toString()));
      }
      if ((jsonObj.get("transactionSetControlNumberSuffix") != null && !jsonObj.get("transactionSetControlNumberSuffix").isJsonNull()) && !jsonObj.get("transactionSetControlNumberSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionSetControlNumberSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionSetControlNumberSuffix").toString()));
      }
      // validate the optional field `usageIndicator`
      if (jsonObj.get("usageIndicator") != null && !jsonObj.get("usageIndicator").isJsonNull()) {
        UsageIndicator.validateJsonElement(jsonObj.get("usageIndicator"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!X12EnvelopeSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'X12EnvelopeSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<X12EnvelopeSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(X12EnvelopeSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<X12EnvelopeSettings>() {
           @Override
           public void write(JsonWriter out, X12EnvelopeSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public X12EnvelopeSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of X12EnvelopeSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of X12EnvelopeSettings
   * @throws IOException if the JSON string is invalid with respect to X12EnvelopeSettings
   */
  public static X12EnvelopeSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, X12EnvelopeSettings.class);
  }

  /**
   * Convert an instance of X12EnvelopeSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

