/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.X12DateFormat;
import org.openapitools.client.model.X12TimeFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * X12EnvelopeOverride
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:04.435317-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class X12EnvelopeOverride {
  public static final String SERIALIZED_NAME_DATE_FORMAT = "dateFormat";
  @SerializedName(SERIALIZED_NAME_DATE_FORMAT)
  private X12DateFormat dateFormat;

  public static final String SERIALIZED_NAME_FUNCTIONAL_IDENTIFIER_CODE = "functionalIdentifierCode";
  @SerializedName(SERIALIZED_NAME_FUNCTIONAL_IDENTIFIER_CODE)
  private String functionalIdentifierCode;

  public static final String SERIALIZED_NAME_HEADER_VERSION = "headerVersion";
  @SerializedName(SERIALIZED_NAME_HEADER_VERSION)
  private String headerVersion;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "messageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private String messageId;

  public static final String SERIALIZED_NAME_PROTOCOL_VERSION = "protocolVersion";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_VERSION)
  private String protocolVersion;

  public static final String SERIALIZED_NAME_RECEIVER_APPLICATION_ID = "receiverApplicationId";
  @SerializedName(SERIALIZED_NAME_RECEIVER_APPLICATION_ID)
  private String receiverApplicationId;

  public static final String SERIALIZED_NAME_RESPONSIBLE_AGENCY_CODE = "responsibleAgencyCode";
  @SerializedName(SERIALIZED_NAME_RESPONSIBLE_AGENCY_CODE)
  private Integer responsibleAgencyCode;

  public static final String SERIALIZED_NAME_SENDER_APPLICATION_ID = "senderApplicationId";
  @SerializedName(SERIALIZED_NAME_SENDER_APPLICATION_ID)
  private String senderApplicationId;

  public static final String SERIALIZED_NAME_TARGET_NAMESPACE = "targetNamespace";
  @SerializedName(SERIALIZED_NAME_TARGET_NAMESPACE)
  private String targetNamespace;

  public static final String SERIALIZED_NAME_TIME_FORMAT = "timeFormat";
  @SerializedName(SERIALIZED_NAME_TIME_FORMAT)
  private X12TimeFormat timeFormat;

  public X12EnvelopeOverride() {
  }

  public X12EnvelopeOverride dateFormat(X12DateFormat dateFormat) {
    this.dateFormat = dateFormat;
    return this;
  }

  /**
   * Get dateFormat
   * @return dateFormat
   */
  @javax.annotation.Nullable
  public X12DateFormat getDateFormat() {
    return dateFormat;
  }

  public void setDateFormat(X12DateFormat dateFormat) {
    this.dateFormat = dateFormat;
  }


  public X12EnvelopeOverride functionalIdentifierCode(String functionalIdentifierCode) {
    this.functionalIdentifierCode = functionalIdentifierCode;
    return this;
  }

  /**
   * The functional identifier code.
   * @return functionalIdentifierCode
   */
  @javax.annotation.Nullable
  public String getFunctionalIdentifierCode() {
    return functionalIdentifierCode;
  }

  public void setFunctionalIdentifierCode(String functionalIdentifierCode) {
    this.functionalIdentifierCode = functionalIdentifierCode;
  }


  public X12EnvelopeOverride headerVersion(String headerVersion) {
    this.headerVersion = headerVersion;
    return this;
  }

  /**
   * The header version.
   * @return headerVersion
   */
  @javax.annotation.Nullable
  public String getHeaderVersion() {
    return headerVersion;
  }

  public void setHeaderVersion(String headerVersion) {
    this.headerVersion = headerVersion;
  }


  public X12EnvelopeOverride messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * The message id on which this envelope settings has to be applied.
   * @return messageId
   */
  @javax.annotation.Nullable
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }


  public X12EnvelopeOverride protocolVersion(String protocolVersion) {
    this.protocolVersion = protocolVersion;
    return this;
  }

  /**
   * The protocol version on which this envelope settings has to be applied.
   * @return protocolVersion
   */
  @javax.annotation.Nullable
  public String getProtocolVersion() {
    return protocolVersion;
  }

  public void setProtocolVersion(String protocolVersion) {
    this.protocolVersion = protocolVersion;
  }


  public X12EnvelopeOverride receiverApplicationId(String receiverApplicationId) {
    this.receiverApplicationId = receiverApplicationId;
    return this;
  }

  /**
   * The receiver application id.
   * @return receiverApplicationId
   */
  @javax.annotation.Nullable
  public String getReceiverApplicationId() {
    return receiverApplicationId;
  }

  public void setReceiverApplicationId(String receiverApplicationId) {
    this.receiverApplicationId = receiverApplicationId;
  }


  public X12EnvelopeOverride responsibleAgencyCode(Integer responsibleAgencyCode) {
    this.responsibleAgencyCode = responsibleAgencyCode;
    return this;
  }

  /**
   * The responsible agency code.
   * @return responsibleAgencyCode
   */
  @javax.annotation.Nullable
  public Integer getResponsibleAgencyCode() {
    return responsibleAgencyCode;
  }

  public void setResponsibleAgencyCode(Integer responsibleAgencyCode) {
    this.responsibleAgencyCode = responsibleAgencyCode;
  }


  public X12EnvelopeOverride senderApplicationId(String senderApplicationId) {
    this.senderApplicationId = senderApplicationId;
    return this;
  }

  /**
   * The sender application id.
   * @return senderApplicationId
   */
  @javax.annotation.Nullable
  public String getSenderApplicationId() {
    return senderApplicationId;
  }

  public void setSenderApplicationId(String senderApplicationId) {
    this.senderApplicationId = senderApplicationId;
  }


  public X12EnvelopeOverride targetNamespace(String targetNamespace) {
    this.targetNamespace = targetNamespace;
    return this;
  }

  /**
   * The target namespace on which this envelope settings has to be applied.
   * @return targetNamespace
   */
  @javax.annotation.Nullable
  public String getTargetNamespace() {
    return targetNamespace;
  }

  public void setTargetNamespace(String targetNamespace) {
    this.targetNamespace = targetNamespace;
  }


  public X12EnvelopeOverride timeFormat(X12TimeFormat timeFormat) {
    this.timeFormat = timeFormat;
    return this;
  }

  /**
   * Get timeFormat
   * @return timeFormat
   */
  @javax.annotation.Nullable
  public X12TimeFormat getTimeFormat() {
    return timeFormat;
  }

  public void setTimeFormat(X12TimeFormat timeFormat) {
    this.timeFormat = timeFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    X12EnvelopeOverride x12EnvelopeOverride = (X12EnvelopeOverride) o;
    return Objects.equals(this.dateFormat, x12EnvelopeOverride.dateFormat) &&
        Objects.equals(this.functionalIdentifierCode, x12EnvelopeOverride.functionalIdentifierCode) &&
        Objects.equals(this.headerVersion, x12EnvelopeOverride.headerVersion) &&
        Objects.equals(this.messageId, x12EnvelopeOverride.messageId) &&
        Objects.equals(this.protocolVersion, x12EnvelopeOverride.protocolVersion) &&
        Objects.equals(this.receiverApplicationId, x12EnvelopeOverride.receiverApplicationId) &&
        Objects.equals(this.responsibleAgencyCode, x12EnvelopeOverride.responsibleAgencyCode) &&
        Objects.equals(this.senderApplicationId, x12EnvelopeOverride.senderApplicationId) &&
        Objects.equals(this.targetNamespace, x12EnvelopeOverride.targetNamespace) &&
        Objects.equals(this.timeFormat, x12EnvelopeOverride.timeFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateFormat, functionalIdentifierCode, headerVersion, messageId, protocolVersion, receiverApplicationId, responsibleAgencyCode, senderApplicationId, targetNamespace, timeFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class X12EnvelopeOverride {\n");
    sb.append("    dateFormat: ").append(toIndentedString(dateFormat)).append("\n");
    sb.append("    functionalIdentifierCode: ").append(toIndentedString(functionalIdentifierCode)).append("\n");
    sb.append("    headerVersion: ").append(toIndentedString(headerVersion)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    protocolVersion: ").append(toIndentedString(protocolVersion)).append("\n");
    sb.append("    receiverApplicationId: ").append(toIndentedString(receiverApplicationId)).append("\n");
    sb.append("    responsibleAgencyCode: ").append(toIndentedString(responsibleAgencyCode)).append("\n");
    sb.append("    senderApplicationId: ").append(toIndentedString(senderApplicationId)).append("\n");
    sb.append("    targetNamespace: ").append(toIndentedString(targetNamespace)).append("\n");
    sb.append("    timeFormat: ").append(toIndentedString(timeFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dateFormat");
    openapiFields.add("functionalIdentifierCode");
    openapiFields.add("headerVersion");
    openapiFields.add("messageId");
    openapiFields.add("protocolVersion");
    openapiFields.add("receiverApplicationId");
    openapiFields.add("responsibleAgencyCode");
    openapiFields.add("senderApplicationId");
    openapiFields.add("targetNamespace");
    openapiFields.add("timeFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to X12EnvelopeOverride
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!X12EnvelopeOverride.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in X12EnvelopeOverride is not found in the empty JSON string", X12EnvelopeOverride.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!X12EnvelopeOverride.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `X12EnvelopeOverride` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dateFormat`
      if (jsonObj.get("dateFormat") != null && !jsonObj.get("dateFormat").isJsonNull()) {
        X12DateFormat.validateJsonElement(jsonObj.get("dateFormat"));
      }
      if ((jsonObj.get("functionalIdentifierCode") != null && !jsonObj.get("functionalIdentifierCode").isJsonNull()) && !jsonObj.get("functionalIdentifierCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionalIdentifierCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionalIdentifierCode").toString()));
      }
      if ((jsonObj.get("headerVersion") != null && !jsonObj.get("headerVersion").isJsonNull()) && !jsonObj.get("headerVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headerVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headerVersion").toString()));
      }
      if ((jsonObj.get("messageId") != null && !jsonObj.get("messageId").isJsonNull()) && !jsonObj.get("messageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageId").toString()));
      }
      if ((jsonObj.get("protocolVersion") != null && !jsonObj.get("protocolVersion").isJsonNull()) && !jsonObj.get("protocolVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocolVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocolVersion").toString()));
      }
      if ((jsonObj.get("receiverApplicationId") != null && !jsonObj.get("receiverApplicationId").isJsonNull()) && !jsonObj.get("receiverApplicationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverApplicationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverApplicationId").toString()));
      }
      if ((jsonObj.get("senderApplicationId") != null && !jsonObj.get("senderApplicationId").isJsonNull()) && !jsonObj.get("senderApplicationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `senderApplicationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("senderApplicationId").toString()));
      }
      if ((jsonObj.get("targetNamespace") != null && !jsonObj.get("targetNamespace").isJsonNull()) && !jsonObj.get("targetNamespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetNamespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetNamespace").toString()));
      }
      // validate the optional field `timeFormat`
      if (jsonObj.get("timeFormat") != null && !jsonObj.get("timeFormat").isJsonNull()) {
        X12TimeFormat.validateJsonElement(jsonObj.get("timeFormat"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!X12EnvelopeOverride.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'X12EnvelopeOverride' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<X12EnvelopeOverride> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(X12EnvelopeOverride.class));

       return (TypeAdapter<T>) new TypeAdapter<X12EnvelopeOverride>() {
           @Override
           public void write(JsonWriter out, X12EnvelopeOverride value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public X12EnvelopeOverride read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of X12EnvelopeOverride given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of X12EnvelopeOverride
   * @throws IOException if the JSON string is invalid with respect to X12EnvelopeOverride
   */
  public static X12EnvelopeOverride fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, X12EnvelopeOverride.class);
  }

  /**
   * Convert an instance of X12EnvelopeOverride to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

