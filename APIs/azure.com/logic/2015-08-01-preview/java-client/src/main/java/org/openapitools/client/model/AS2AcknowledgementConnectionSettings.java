/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AS2AcknowledgementConnectionSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:04.435317-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AS2AcknowledgementConnectionSettings {
  public static final String SERIALIZED_NAME_IGNORE_CERTIFICATE_NAME_MISMATCH = "ignoreCertificateNameMismatch";
  @SerializedName(SERIALIZED_NAME_IGNORE_CERTIFICATE_NAME_MISMATCH)
  private Boolean ignoreCertificateNameMismatch;

  public static final String SERIALIZED_NAME_KEEP_HTTP_CONNECTION_ALIVE = "keepHttpConnectionAlive";
  @SerializedName(SERIALIZED_NAME_KEEP_HTTP_CONNECTION_ALIVE)
  private Boolean keepHttpConnectionAlive;

  public static final String SERIALIZED_NAME_SUPPORT_HTTP_STATUS_CODE_CONTINUE = "supportHttpStatusCodeContinue";
  @SerializedName(SERIALIZED_NAME_SUPPORT_HTTP_STATUS_CODE_CONTINUE)
  private Boolean supportHttpStatusCodeContinue;

  public static final String SERIALIZED_NAME_UNFOLD_HTTP_HEADERS = "unfoldHttpHeaders";
  @SerializedName(SERIALIZED_NAME_UNFOLD_HTTP_HEADERS)
  private Boolean unfoldHttpHeaders;

  public AS2AcknowledgementConnectionSettings() {
  }

  public AS2AcknowledgementConnectionSettings ignoreCertificateNameMismatch(Boolean ignoreCertificateNameMismatch) {
    this.ignoreCertificateNameMismatch = ignoreCertificateNameMismatch;
    return this;
  }

  /**
   * The value indicating whether to ignore mismatch in certificate name.
   * @return ignoreCertificateNameMismatch
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreCertificateNameMismatch() {
    return ignoreCertificateNameMismatch;
  }

  public void setIgnoreCertificateNameMismatch(Boolean ignoreCertificateNameMismatch) {
    this.ignoreCertificateNameMismatch = ignoreCertificateNameMismatch;
  }


  public AS2AcknowledgementConnectionSettings keepHttpConnectionAlive(Boolean keepHttpConnectionAlive) {
    this.keepHttpConnectionAlive = keepHttpConnectionAlive;
    return this;
  }

  /**
   * The value indicating whether to keep the connection alive.
   * @return keepHttpConnectionAlive
   */
  @javax.annotation.Nullable
  public Boolean getKeepHttpConnectionAlive() {
    return keepHttpConnectionAlive;
  }

  public void setKeepHttpConnectionAlive(Boolean keepHttpConnectionAlive) {
    this.keepHttpConnectionAlive = keepHttpConnectionAlive;
  }


  public AS2AcknowledgementConnectionSettings supportHttpStatusCodeContinue(Boolean supportHttpStatusCodeContinue) {
    this.supportHttpStatusCodeContinue = supportHttpStatusCodeContinue;
    return this;
  }

  /**
   * The value indicating whether to support HTTP status code &#39;CONTINUE&#39;.
   * @return supportHttpStatusCodeContinue
   */
  @javax.annotation.Nullable
  public Boolean getSupportHttpStatusCodeContinue() {
    return supportHttpStatusCodeContinue;
  }

  public void setSupportHttpStatusCodeContinue(Boolean supportHttpStatusCodeContinue) {
    this.supportHttpStatusCodeContinue = supportHttpStatusCodeContinue;
  }


  public AS2AcknowledgementConnectionSettings unfoldHttpHeaders(Boolean unfoldHttpHeaders) {
    this.unfoldHttpHeaders = unfoldHttpHeaders;
    return this;
  }

  /**
   * The value indicating whether to unfold the HTTP headers.
   * @return unfoldHttpHeaders
   */
  @javax.annotation.Nullable
  public Boolean getUnfoldHttpHeaders() {
    return unfoldHttpHeaders;
  }

  public void setUnfoldHttpHeaders(Boolean unfoldHttpHeaders) {
    this.unfoldHttpHeaders = unfoldHttpHeaders;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AS2AcknowledgementConnectionSettings as2AcknowledgementConnectionSettings = (AS2AcknowledgementConnectionSettings) o;
    return Objects.equals(this.ignoreCertificateNameMismatch, as2AcknowledgementConnectionSettings.ignoreCertificateNameMismatch) &&
        Objects.equals(this.keepHttpConnectionAlive, as2AcknowledgementConnectionSettings.keepHttpConnectionAlive) &&
        Objects.equals(this.supportHttpStatusCodeContinue, as2AcknowledgementConnectionSettings.supportHttpStatusCodeContinue) &&
        Objects.equals(this.unfoldHttpHeaders, as2AcknowledgementConnectionSettings.unfoldHttpHeaders);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ignoreCertificateNameMismatch, keepHttpConnectionAlive, supportHttpStatusCodeContinue, unfoldHttpHeaders);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AS2AcknowledgementConnectionSettings {\n");
    sb.append("    ignoreCertificateNameMismatch: ").append(toIndentedString(ignoreCertificateNameMismatch)).append("\n");
    sb.append("    keepHttpConnectionAlive: ").append(toIndentedString(keepHttpConnectionAlive)).append("\n");
    sb.append("    supportHttpStatusCodeContinue: ").append(toIndentedString(supportHttpStatusCodeContinue)).append("\n");
    sb.append("    unfoldHttpHeaders: ").append(toIndentedString(unfoldHttpHeaders)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ignoreCertificateNameMismatch");
    openapiFields.add("keepHttpConnectionAlive");
    openapiFields.add("supportHttpStatusCodeContinue");
    openapiFields.add("unfoldHttpHeaders");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AS2AcknowledgementConnectionSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AS2AcknowledgementConnectionSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AS2AcknowledgementConnectionSettings is not found in the empty JSON string", AS2AcknowledgementConnectionSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AS2AcknowledgementConnectionSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AS2AcknowledgementConnectionSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AS2AcknowledgementConnectionSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AS2AcknowledgementConnectionSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AS2AcknowledgementConnectionSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AS2AcknowledgementConnectionSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AS2AcknowledgementConnectionSettings>() {
           @Override
           public void write(JsonWriter out, AS2AcknowledgementConnectionSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AS2AcknowledgementConnectionSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AS2AcknowledgementConnectionSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AS2AcknowledgementConnectionSettings
   * @throws IOException if the JSON string is invalid with respect to AS2AcknowledgementConnectionSettings
   */
  public static AS2AcknowledgementConnectionSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AS2AcknowledgementConnectionSettings.class);
  }

  /**
   * Convert an instance of AS2AcknowledgementConnectionSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

