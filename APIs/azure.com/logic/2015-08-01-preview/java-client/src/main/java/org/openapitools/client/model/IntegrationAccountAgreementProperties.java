/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AgreementContent;
import org.openapitools.client.model.AgreementType;
import org.openapitools.client.model.BusinessIdentity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IntegrationAccountAgreementProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:04.435317-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IntegrationAccountAgreementProperties {
  public static final String SERIALIZED_NAME_AGREEMENT_TYPE = "agreementType";
  @SerializedName(SERIALIZED_NAME_AGREEMENT_TYPE)
  private AgreementType agreementType;

  public static final String SERIALIZED_NAME_CHANGED_TIME = "changedTime";
  @SerializedName(SERIALIZED_NAME_CHANGED_TIME)
  private OffsetDateTime changedTime;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private AgreementContent content;

  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_GUEST_IDENTITY = "guestIdentity";
  @SerializedName(SERIALIZED_NAME_GUEST_IDENTITY)
  private BusinessIdentity guestIdentity;

  public static final String SERIALIZED_NAME_GUEST_PARTNER = "guestPartner";
  @SerializedName(SERIALIZED_NAME_GUEST_PARTNER)
  private String guestPartner;

  public static final String SERIALIZED_NAME_HOST_IDENTITY = "hostIdentity";
  @SerializedName(SERIALIZED_NAME_HOST_IDENTITY)
  private BusinessIdentity hostIdentity;

  public static final String SERIALIZED_NAME_HOST_PARTNER = "hostPartner";
  @SerializedName(SERIALIZED_NAME_HOST_PARTNER)
  private String hostPartner;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public IntegrationAccountAgreementProperties() {
  }

  public IntegrationAccountAgreementProperties(
     OffsetDateTime changedTime, 
     OffsetDateTime createdTime
  ) {
    this();
    this.changedTime = changedTime;
    this.createdTime = createdTime;
  }

  public IntegrationAccountAgreementProperties agreementType(AgreementType agreementType) {
    this.agreementType = agreementType;
    return this;
  }

  /**
   * Get agreementType
   * @return agreementType
   */
  @javax.annotation.Nullable
  public AgreementType getAgreementType() {
    return agreementType;
  }

  public void setAgreementType(AgreementType agreementType) {
    this.agreementType = agreementType;
  }


  /**
   * The changed time.
   * @return changedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getChangedTime() {
    return changedTime;
  }



  public IntegrationAccountAgreementProperties content(AgreementContent content) {
    this.content = content;
    return this;
  }

  /**
   * Get content
   * @return content
   */
  @javax.annotation.Nullable
  public AgreementContent getContent() {
    return content;
  }

  public void setContent(AgreementContent content) {
    this.content = content;
  }


  /**
   * The created time.
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }



  public IntegrationAccountAgreementProperties guestIdentity(BusinessIdentity guestIdentity) {
    this.guestIdentity = guestIdentity;
    return this;
  }

  /**
   * Get guestIdentity
   * @return guestIdentity
   */
  @javax.annotation.Nullable
  public BusinessIdentity getGuestIdentity() {
    return guestIdentity;
  }

  public void setGuestIdentity(BusinessIdentity guestIdentity) {
    this.guestIdentity = guestIdentity;
  }


  public IntegrationAccountAgreementProperties guestPartner(String guestPartner) {
    this.guestPartner = guestPartner;
    return this;
  }

  /**
   * The guest partner.
   * @return guestPartner
   */
  @javax.annotation.Nullable
  public String getGuestPartner() {
    return guestPartner;
  }

  public void setGuestPartner(String guestPartner) {
    this.guestPartner = guestPartner;
  }


  public IntegrationAccountAgreementProperties hostIdentity(BusinessIdentity hostIdentity) {
    this.hostIdentity = hostIdentity;
    return this;
  }

  /**
   * Get hostIdentity
   * @return hostIdentity
   */
  @javax.annotation.Nullable
  public BusinessIdentity getHostIdentity() {
    return hostIdentity;
  }

  public void setHostIdentity(BusinessIdentity hostIdentity) {
    this.hostIdentity = hostIdentity;
  }


  public IntegrationAccountAgreementProperties hostPartner(String hostPartner) {
    this.hostPartner = hostPartner;
    return this;
  }

  /**
   * The host partner.
   * @return hostPartner
   */
  @javax.annotation.Nullable
  public String getHostPartner() {
    return hostPartner;
  }

  public void setHostPartner(String hostPartner) {
    this.hostPartner = hostPartner;
  }


  public IntegrationAccountAgreementProperties metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * The metadata.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationAccountAgreementProperties integrationAccountAgreementProperties = (IntegrationAccountAgreementProperties) o;
    return Objects.equals(this.agreementType, integrationAccountAgreementProperties.agreementType) &&
        Objects.equals(this.changedTime, integrationAccountAgreementProperties.changedTime) &&
        Objects.equals(this.content, integrationAccountAgreementProperties.content) &&
        Objects.equals(this.createdTime, integrationAccountAgreementProperties.createdTime) &&
        Objects.equals(this.guestIdentity, integrationAccountAgreementProperties.guestIdentity) &&
        Objects.equals(this.guestPartner, integrationAccountAgreementProperties.guestPartner) &&
        Objects.equals(this.hostIdentity, integrationAccountAgreementProperties.hostIdentity) &&
        Objects.equals(this.hostPartner, integrationAccountAgreementProperties.hostPartner) &&
        Objects.equals(this.metadata, integrationAccountAgreementProperties.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agreementType, changedTime, content, createdTime, guestIdentity, guestPartner, hostIdentity, hostPartner, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationAccountAgreementProperties {\n");
    sb.append("    agreementType: ").append(toIndentedString(agreementType)).append("\n");
    sb.append("    changedTime: ").append(toIndentedString(changedTime)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    guestIdentity: ").append(toIndentedString(guestIdentity)).append("\n");
    sb.append("    guestPartner: ").append(toIndentedString(guestPartner)).append("\n");
    sb.append("    hostIdentity: ").append(toIndentedString(hostIdentity)).append("\n");
    sb.append("    hostPartner: ").append(toIndentedString(hostPartner)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agreementType");
    openapiFields.add("changedTime");
    openapiFields.add("content");
    openapiFields.add("createdTime");
    openapiFields.add("guestIdentity");
    openapiFields.add("guestPartner");
    openapiFields.add("hostIdentity");
    openapiFields.add("hostPartner");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IntegrationAccountAgreementProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IntegrationAccountAgreementProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntegrationAccountAgreementProperties is not found in the empty JSON string", IntegrationAccountAgreementProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IntegrationAccountAgreementProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntegrationAccountAgreementProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `agreementType`
      if (jsonObj.get("agreementType") != null && !jsonObj.get("agreementType").isJsonNull()) {
        AgreementType.validateJsonElement(jsonObj.get("agreementType"));
      }
      // validate the optional field `content`
      if (jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) {
        AgreementContent.validateJsonElement(jsonObj.get("content"));
      }
      // validate the optional field `guestIdentity`
      if (jsonObj.get("guestIdentity") != null && !jsonObj.get("guestIdentity").isJsonNull()) {
        BusinessIdentity.validateJsonElement(jsonObj.get("guestIdentity"));
      }
      if ((jsonObj.get("guestPartner") != null && !jsonObj.get("guestPartner").isJsonNull()) && !jsonObj.get("guestPartner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guestPartner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guestPartner").toString()));
      }
      // validate the optional field `hostIdentity`
      if (jsonObj.get("hostIdentity") != null && !jsonObj.get("hostIdentity").isJsonNull()) {
        BusinessIdentity.validateJsonElement(jsonObj.get("hostIdentity"));
      }
      if ((jsonObj.get("hostPartner") != null && !jsonObj.get("hostPartner").isJsonNull()) && !jsonObj.get("hostPartner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostPartner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostPartner").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntegrationAccountAgreementProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntegrationAccountAgreementProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntegrationAccountAgreementProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntegrationAccountAgreementProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<IntegrationAccountAgreementProperties>() {
           @Override
           public void write(JsonWriter out, IntegrationAccountAgreementProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntegrationAccountAgreementProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IntegrationAccountAgreementProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IntegrationAccountAgreementProperties
   * @throws IOException if the JSON string is invalid with respect to IntegrationAccountAgreementProperties
   */
  public static IntegrationAccountAgreementProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntegrationAccountAgreementProperties.class);
  }

  /**
   * Convert an instance of IntegrationAccountAgreementProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

