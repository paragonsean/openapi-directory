/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.IntegrationAccountContentLink;
import org.openapitools.client.model.MapType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IntegrationAccountMapProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:04.435317-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IntegrationAccountMapProperties {
  public static final String SERIALIZED_NAME_CHANGED_TIME = "changedTime";
  @SerializedName(SERIALIZED_NAME_CHANGED_TIME)
  private OffsetDateTime changedTime;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private Object content;

  public static final String SERIALIZED_NAME_CONTENT_LINK = "contentLink";
  @SerializedName(SERIALIZED_NAME_CONTENT_LINK)
  private IntegrationAccountContentLink contentLink;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_MAP_TYPE = "mapType";
  @SerializedName(SERIALIZED_NAME_MAP_TYPE)
  private MapType mapType;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public IntegrationAccountMapProperties() {
  }

  public IntegrationAccountMapProperties(
     OffsetDateTime changedTime, 
     OffsetDateTime createdTime
  ) {
    this();
    this.changedTime = changedTime;
    this.createdTime = createdTime;
  }

  /**
   * The changed time.
   * @return changedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getChangedTime() {
    return changedTime;
  }



  public IntegrationAccountMapProperties content(Object content) {
    this.content = content;
    return this;
  }

  /**
   * The content.
   * @return content
   */
  @javax.annotation.Nullable
  public Object getContent() {
    return content;
  }

  public void setContent(Object content) {
    this.content = content;
  }


  public IntegrationAccountMapProperties contentLink(IntegrationAccountContentLink contentLink) {
    this.contentLink = contentLink;
    return this;
  }

  /**
   * Get contentLink
   * @return contentLink
   */
  @javax.annotation.Nullable
  public IntegrationAccountContentLink getContentLink() {
    return contentLink;
  }

  public void setContentLink(IntegrationAccountContentLink contentLink) {
    this.contentLink = contentLink;
  }


  public IntegrationAccountMapProperties contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * The content type.
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  /**
   * The created time.
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }



  public IntegrationAccountMapProperties mapType(MapType mapType) {
    this.mapType = mapType;
    return this;
  }

  /**
   * Get mapType
   * @return mapType
   */
  @javax.annotation.Nullable
  public MapType getMapType() {
    return mapType;
  }

  public void setMapType(MapType mapType) {
    this.mapType = mapType;
  }


  public IntegrationAccountMapProperties metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * The metadata.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationAccountMapProperties integrationAccountMapProperties = (IntegrationAccountMapProperties) o;
    return Objects.equals(this.changedTime, integrationAccountMapProperties.changedTime) &&
        Objects.equals(this.content, integrationAccountMapProperties.content) &&
        Objects.equals(this.contentLink, integrationAccountMapProperties.contentLink) &&
        Objects.equals(this.contentType, integrationAccountMapProperties.contentType) &&
        Objects.equals(this.createdTime, integrationAccountMapProperties.createdTime) &&
        Objects.equals(this.mapType, integrationAccountMapProperties.mapType) &&
        Objects.equals(this.metadata, integrationAccountMapProperties.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changedTime, content, contentLink, contentType, createdTime, mapType, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationAccountMapProperties {\n");
    sb.append("    changedTime: ").append(toIndentedString(changedTime)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    contentLink: ").append(toIndentedString(contentLink)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    mapType: ").append(toIndentedString(mapType)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changedTime");
    openapiFields.add("content");
    openapiFields.add("contentLink");
    openapiFields.add("contentType");
    openapiFields.add("createdTime");
    openapiFields.add("mapType");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IntegrationAccountMapProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IntegrationAccountMapProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntegrationAccountMapProperties is not found in the empty JSON string", IntegrationAccountMapProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IntegrationAccountMapProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntegrationAccountMapProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `contentLink`
      if (jsonObj.get("contentLink") != null && !jsonObj.get("contentLink").isJsonNull()) {
        IntegrationAccountContentLink.validateJsonElement(jsonObj.get("contentLink"));
      }
      if ((jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) && !jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
      // validate the optional field `mapType`
      if (jsonObj.get("mapType") != null && !jsonObj.get("mapType").isJsonNull()) {
        MapType.validateJsonElement(jsonObj.get("mapType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntegrationAccountMapProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntegrationAccountMapProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntegrationAccountMapProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntegrationAccountMapProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<IntegrationAccountMapProperties>() {
           @Override
           public void write(JsonWriter out, IntegrationAccountMapProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntegrationAccountMapProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IntegrationAccountMapProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IntegrationAccountMapProperties
   * @throws IOException if the JSON string is invalid with respect to IntegrationAccountMapProperties
   */
  public static IntegrationAccountMapProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntegrationAccountMapProperties.class);
  }

  /**
   * Convert an instance of IntegrationAccountMapProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

