/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegrationAccountPartnerProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntegrationAccountPartnerProperties::OAIIntegrationAccountPartnerProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntegrationAccountPartnerProperties::OAIIntegrationAccountPartnerProperties() {
    this->initializeModel();
}

OAIIntegrationAccountPartnerProperties::~OAIIntegrationAccountPartnerProperties() {}

void OAIIntegrationAccountPartnerProperties::initializeModel() {

    m_changed_time_isSet = false;
    m_changed_time_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_partner_type_isSet = false;
    m_partner_type_isValid = false;
}

void OAIIntegrationAccountPartnerProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntegrationAccountPartnerProperties::fromJsonObject(QJsonObject json) {

    m_changed_time_isValid = ::OpenAPI::fromJsonValue(m_changed_time, json[QString("changedTime")]);
    m_changed_time_isSet = !json[QString("changedTime")].isNull() && m_changed_time_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_partner_type_isValid = ::OpenAPI::fromJsonValue(m_partner_type, json[QString("partnerType")]);
    m_partner_type_isSet = !json[QString("partnerType")].isNull() && m_partner_type_isValid;
}

QString OAIIntegrationAccountPartnerProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntegrationAccountPartnerProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_changed_time_isSet) {
        obj.insert(QString("changedTime"), ::OpenAPI::toJsonValue(m_changed_time));
    }
    if (m_content.isSet()) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_partner_type.isSet()) {
        obj.insert(QString("partnerType"), ::OpenAPI::toJsonValue(m_partner_type));
    }
    return obj;
}

QDateTime OAIIntegrationAccountPartnerProperties::getChangedTime() const {
    return m_changed_time;
}
void OAIIntegrationAccountPartnerProperties::setChangedTime(const QDateTime &changed_time) {
    m_changed_time = changed_time;
    m_changed_time_isSet = true;
}

bool OAIIntegrationAccountPartnerProperties::is_changed_time_Set() const{
    return m_changed_time_isSet;
}

bool OAIIntegrationAccountPartnerProperties::is_changed_time_Valid() const{
    return m_changed_time_isValid;
}

OAIPartnerContent OAIIntegrationAccountPartnerProperties::getContent() const {
    return m_content;
}
void OAIIntegrationAccountPartnerProperties::setContent(const OAIPartnerContent &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIIntegrationAccountPartnerProperties::is_content_Set() const{
    return m_content_isSet;
}

bool OAIIntegrationAccountPartnerProperties::is_content_Valid() const{
    return m_content_isValid;
}

QDateTime OAIIntegrationAccountPartnerProperties::getCreatedTime() const {
    return m_created_time;
}
void OAIIntegrationAccountPartnerProperties::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIIntegrationAccountPartnerProperties::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIIntegrationAccountPartnerProperties::is_created_time_Valid() const{
    return m_created_time_isValid;
}

OAIObject OAIIntegrationAccountPartnerProperties::getMetadata() const {
    return m_metadata;
}
void OAIIntegrationAccountPartnerProperties::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIIntegrationAccountPartnerProperties::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIIntegrationAccountPartnerProperties::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIPartnerType OAIIntegrationAccountPartnerProperties::getPartnerType() const {
    return m_partner_type;
}
void OAIIntegrationAccountPartnerProperties::setPartnerType(const OAIPartnerType &partner_type) {
    m_partner_type = partner_type;
    m_partner_type_isSet = true;
}

bool OAIIntegrationAccountPartnerProperties::is_partner_type_Set() const{
    return m_partner_type_isSet;
}

bool OAIIntegrationAccountPartnerProperties::is_partner_type_Valid() const{
    return m_partner_type_isValid;
}

bool OAIIntegrationAccountPartnerProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_changed_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntegrationAccountPartnerProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
