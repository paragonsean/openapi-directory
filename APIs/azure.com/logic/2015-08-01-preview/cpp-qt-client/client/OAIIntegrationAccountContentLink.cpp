/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegrationAccountContentLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntegrationAccountContentLink::OAIIntegrationAccountContentLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntegrationAccountContentLink::OAIIntegrationAccountContentLink() {
    this->initializeModel();
}

OAIIntegrationAccountContentLink::~OAIIntegrationAccountContentLink() {}

void OAIIntegrationAccountContentLink::initializeModel() {

    m_content_hash_isSet = false;
    m_content_hash_isValid = false;

    m_content_size_isSet = false;
    m_content_size_isValid = false;

    m_content_version_isSet = false;
    m_content_version_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIIntegrationAccountContentLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntegrationAccountContentLink::fromJsonObject(QJsonObject json) {

    m_content_hash_isValid = ::OpenAPI::fromJsonValue(m_content_hash, json[QString("contentHash")]);
    m_content_hash_isSet = !json[QString("contentHash")].isNull() && m_content_hash_isValid;

    m_content_size_isValid = ::OpenAPI::fromJsonValue(m_content_size, json[QString("contentSize")]);
    m_content_size_isSet = !json[QString("contentSize")].isNull() && m_content_size_isValid;

    m_content_version_isValid = ::OpenAPI::fromJsonValue(m_content_version, json[QString("contentVersion")]);
    m_content_version_isSet = !json[QString("contentVersion")].isNull() && m_content_version_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIIntegrationAccountContentLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntegrationAccountContentLink::asJsonObject() const {
    QJsonObject obj;
    if (m_content_hash.isSet()) {
        obj.insert(QString("contentHash"), ::OpenAPI::toJsonValue(m_content_hash));
    }
    if (m_content_size_isSet) {
        obj.insert(QString("contentSize"), ::OpenAPI::toJsonValue(m_content_size));
    }
    if (m_content_version_isSet) {
        obj.insert(QString("contentVersion"), ::OpenAPI::toJsonValue(m_content_version));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

OAIIntegrationAccountContentHash OAIIntegrationAccountContentLink::getContentHash() const {
    return m_content_hash;
}
void OAIIntegrationAccountContentLink::setContentHash(const OAIIntegrationAccountContentHash &content_hash) {
    m_content_hash = content_hash;
    m_content_hash_isSet = true;
}

bool OAIIntegrationAccountContentLink::is_content_hash_Set() const{
    return m_content_hash_isSet;
}

bool OAIIntegrationAccountContentLink::is_content_hash_Valid() const{
    return m_content_hash_isValid;
}

qint64 OAIIntegrationAccountContentLink::getContentSize() const {
    return m_content_size;
}
void OAIIntegrationAccountContentLink::setContentSize(const qint64 &content_size) {
    m_content_size = content_size;
    m_content_size_isSet = true;
}

bool OAIIntegrationAccountContentLink::is_content_size_Set() const{
    return m_content_size_isSet;
}

bool OAIIntegrationAccountContentLink::is_content_size_Valid() const{
    return m_content_size_isValid;
}

QString OAIIntegrationAccountContentLink::getContentVersion() const {
    return m_content_version;
}
void OAIIntegrationAccountContentLink::setContentVersion(const QString &content_version) {
    m_content_version = content_version;
    m_content_version_isSet = true;
}

bool OAIIntegrationAccountContentLink::is_content_version_Set() const{
    return m_content_version_isSet;
}

bool OAIIntegrationAccountContentLink::is_content_version_Valid() const{
    return m_content_version_isValid;
}

OAIObject OAIIntegrationAccountContentLink::getMetadata() const {
    return m_metadata;
}
void OAIIntegrationAccountContentLink::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIIntegrationAccountContentLink::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIIntegrationAccountContentLink::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIIntegrationAccountContentLink::getUri() const {
    return m_uri;
}
void OAIIntegrationAccountContentLink::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIIntegrationAccountContentLink::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIIntegrationAccountContentLink::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIIntegrationAccountContentLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_hash.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntegrationAccountContentLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
