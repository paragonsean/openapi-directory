/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdifactFramingSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdifactFramingSettings::OAIEdifactFramingSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdifactFramingSettings::OAIEdifactFramingSettings() {
    this->initializeModel();
}

OAIEdifactFramingSettings::~OAIEdifactFramingSettings() {}

void OAIEdifactFramingSettings::initializeModel() {

    m_character_encoding_isSet = false;
    m_character_encoding_isValid = false;

    m_character_set_isSet = false;
    m_character_set_isValid = false;

    m_component_separator_isSet = false;
    m_component_separator_isValid = false;

    m_data_element_separator_isSet = false;
    m_data_element_separator_isValid = false;

    m_decimal_point_indicator_isSet = false;
    m_decimal_point_indicator_isValid = false;

    m_protocol_version_isSet = false;
    m_protocol_version_isValid = false;

    m_release_indicator_isSet = false;
    m_release_indicator_isValid = false;

    m_repetition_separator_isSet = false;
    m_repetition_separator_isValid = false;

    m_segment_terminator_isSet = false;
    m_segment_terminator_isValid = false;

    m_segment_terminator_suffix_isSet = false;
    m_segment_terminator_suffix_isValid = false;

    m_service_code_list_directory_version_isSet = false;
    m_service_code_list_directory_version_isValid = false;
}

void OAIEdifactFramingSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdifactFramingSettings::fromJsonObject(QJsonObject json) {

    m_character_encoding_isValid = ::OpenAPI::fromJsonValue(m_character_encoding, json[QString("characterEncoding")]);
    m_character_encoding_isSet = !json[QString("characterEncoding")].isNull() && m_character_encoding_isValid;

    m_character_set_isValid = ::OpenAPI::fromJsonValue(m_character_set, json[QString("characterSet")]);
    m_character_set_isSet = !json[QString("characterSet")].isNull() && m_character_set_isValid;

    m_component_separator_isValid = ::OpenAPI::fromJsonValue(m_component_separator, json[QString("componentSeparator")]);
    m_component_separator_isSet = !json[QString("componentSeparator")].isNull() && m_component_separator_isValid;

    m_data_element_separator_isValid = ::OpenAPI::fromJsonValue(m_data_element_separator, json[QString("dataElementSeparator")]);
    m_data_element_separator_isSet = !json[QString("dataElementSeparator")].isNull() && m_data_element_separator_isValid;

    m_decimal_point_indicator_isValid = ::OpenAPI::fromJsonValue(m_decimal_point_indicator, json[QString("decimalPointIndicator")]);
    m_decimal_point_indicator_isSet = !json[QString("decimalPointIndicator")].isNull() && m_decimal_point_indicator_isValid;

    m_protocol_version_isValid = ::OpenAPI::fromJsonValue(m_protocol_version, json[QString("protocolVersion")]);
    m_protocol_version_isSet = !json[QString("protocolVersion")].isNull() && m_protocol_version_isValid;

    m_release_indicator_isValid = ::OpenAPI::fromJsonValue(m_release_indicator, json[QString("releaseIndicator")]);
    m_release_indicator_isSet = !json[QString("releaseIndicator")].isNull() && m_release_indicator_isValid;

    m_repetition_separator_isValid = ::OpenAPI::fromJsonValue(m_repetition_separator, json[QString("repetitionSeparator")]);
    m_repetition_separator_isSet = !json[QString("repetitionSeparator")].isNull() && m_repetition_separator_isValid;

    m_segment_terminator_isValid = ::OpenAPI::fromJsonValue(m_segment_terminator, json[QString("segmentTerminator")]);
    m_segment_terminator_isSet = !json[QString("segmentTerminator")].isNull() && m_segment_terminator_isValid;

    m_segment_terminator_suffix_isValid = ::OpenAPI::fromJsonValue(m_segment_terminator_suffix, json[QString("segmentTerminatorSuffix")]);
    m_segment_terminator_suffix_isSet = !json[QString("segmentTerminatorSuffix")].isNull() && m_segment_terminator_suffix_isValid;

    m_service_code_list_directory_version_isValid = ::OpenAPI::fromJsonValue(m_service_code_list_directory_version, json[QString("serviceCodeListDirectoryVersion")]);
    m_service_code_list_directory_version_isSet = !json[QString("serviceCodeListDirectoryVersion")].isNull() && m_service_code_list_directory_version_isValid;
}

QString OAIEdifactFramingSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdifactFramingSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_character_encoding_isSet) {
        obj.insert(QString("characterEncoding"), ::OpenAPI::toJsonValue(m_character_encoding));
    }
    if (m_character_set.isSet()) {
        obj.insert(QString("characterSet"), ::OpenAPI::toJsonValue(m_character_set));
    }
    if (m_component_separator_isSet) {
        obj.insert(QString("componentSeparator"), ::OpenAPI::toJsonValue(m_component_separator));
    }
    if (m_data_element_separator_isSet) {
        obj.insert(QString("dataElementSeparator"), ::OpenAPI::toJsonValue(m_data_element_separator));
    }
    if (m_decimal_point_indicator.isSet()) {
        obj.insert(QString("decimalPointIndicator"), ::OpenAPI::toJsonValue(m_decimal_point_indicator));
    }
    if (m_protocol_version_isSet) {
        obj.insert(QString("protocolVersion"), ::OpenAPI::toJsonValue(m_protocol_version));
    }
    if (m_release_indicator_isSet) {
        obj.insert(QString("releaseIndicator"), ::OpenAPI::toJsonValue(m_release_indicator));
    }
    if (m_repetition_separator_isSet) {
        obj.insert(QString("repetitionSeparator"), ::OpenAPI::toJsonValue(m_repetition_separator));
    }
    if (m_segment_terminator_isSet) {
        obj.insert(QString("segmentTerminator"), ::OpenAPI::toJsonValue(m_segment_terminator));
    }
    if (m_segment_terminator_suffix.isSet()) {
        obj.insert(QString("segmentTerminatorSuffix"), ::OpenAPI::toJsonValue(m_segment_terminator_suffix));
    }
    if (m_service_code_list_directory_version_isSet) {
        obj.insert(QString("serviceCodeListDirectoryVersion"), ::OpenAPI::toJsonValue(m_service_code_list_directory_version));
    }
    return obj;
}

QString OAIEdifactFramingSettings::getCharacterEncoding() const {
    return m_character_encoding;
}
void OAIEdifactFramingSettings::setCharacterEncoding(const QString &character_encoding) {
    m_character_encoding = character_encoding;
    m_character_encoding_isSet = true;
}

bool OAIEdifactFramingSettings::is_character_encoding_Set() const{
    return m_character_encoding_isSet;
}

bool OAIEdifactFramingSettings::is_character_encoding_Valid() const{
    return m_character_encoding_isValid;
}

OAIEdifactCharacterSet OAIEdifactFramingSettings::getCharacterSet() const {
    return m_character_set;
}
void OAIEdifactFramingSettings::setCharacterSet(const OAIEdifactCharacterSet &character_set) {
    m_character_set = character_set;
    m_character_set_isSet = true;
}

bool OAIEdifactFramingSettings::is_character_set_Set() const{
    return m_character_set_isSet;
}

bool OAIEdifactFramingSettings::is_character_set_Valid() const{
    return m_character_set_isValid;
}

qint32 OAIEdifactFramingSettings::getComponentSeparator() const {
    return m_component_separator;
}
void OAIEdifactFramingSettings::setComponentSeparator(const qint32 &component_separator) {
    m_component_separator = component_separator;
    m_component_separator_isSet = true;
}

bool OAIEdifactFramingSettings::is_component_separator_Set() const{
    return m_component_separator_isSet;
}

bool OAIEdifactFramingSettings::is_component_separator_Valid() const{
    return m_component_separator_isValid;
}

qint32 OAIEdifactFramingSettings::getDataElementSeparator() const {
    return m_data_element_separator;
}
void OAIEdifactFramingSettings::setDataElementSeparator(const qint32 &data_element_separator) {
    m_data_element_separator = data_element_separator;
    m_data_element_separator_isSet = true;
}

bool OAIEdifactFramingSettings::is_data_element_separator_Set() const{
    return m_data_element_separator_isSet;
}

bool OAIEdifactFramingSettings::is_data_element_separator_Valid() const{
    return m_data_element_separator_isValid;
}

OAIEdifactDecimalIndicator OAIEdifactFramingSettings::getDecimalPointIndicator() const {
    return m_decimal_point_indicator;
}
void OAIEdifactFramingSettings::setDecimalPointIndicator(const OAIEdifactDecimalIndicator &decimal_point_indicator) {
    m_decimal_point_indicator = decimal_point_indicator;
    m_decimal_point_indicator_isSet = true;
}

bool OAIEdifactFramingSettings::is_decimal_point_indicator_Set() const{
    return m_decimal_point_indicator_isSet;
}

bool OAIEdifactFramingSettings::is_decimal_point_indicator_Valid() const{
    return m_decimal_point_indicator_isValid;
}

qint32 OAIEdifactFramingSettings::getProtocolVersion() const {
    return m_protocol_version;
}
void OAIEdifactFramingSettings::setProtocolVersion(const qint32 &protocol_version) {
    m_protocol_version = protocol_version;
    m_protocol_version_isSet = true;
}

bool OAIEdifactFramingSettings::is_protocol_version_Set() const{
    return m_protocol_version_isSet;
}

bool OAIEdifactFramingSettings::is_protocol_version_Valid() const{
    return m_protocol_version_isValid;
}

qint32 OAIEdifactFramingSettings::getReleaseIndicator() const {
    return m_release_indicator;
}
void OAIEdifactFramingSettings::setReleaseIndicator(const qint32 &release_indicator) {
    m_release_indicator = release_indicator;
    m_release_indicator_isSet = true;
}

bool OAIEdifactFramingSettings::is_release_indicator_Set() const{
    return m_release_indicator_isSet;
}

bool OAIEdifactFramingSettings::is_release_indicator_Valid() const{
    return m_release_indicator_isValid;
}

qint32 OAIEdifactFramingSettings::getRepetitionSeparator() const {
    return m_repetition_separator;
}
void OAIEdifactFramingSettings::setRepetitionSeparator(const qint32 &repetition_separator) {
    m_repetition_separator = repetition_separator;
    m_repetition_separator_isSet = true;
}

bool OAIEdifactFramingSettings::is_repetition_separator_Set() const{
    return m_repetition_separator_isSet;
}

bool OAIEdifactFramingSettings::is_repetition_separator_Valid() const{
    return m_repetition_separator_isValid;
}

qint32 OAIEdifactFramingSettings::getSegmentTerminator() const {
    return m_segment_terminator;
}
void OAIEdifactFramingSettings::setSegmentTerminator(const qint32 &segment_terminator) {
    m_segment_terminator = segment_terminator;
    m_segment_terminator_isSet = true;
}

bool OAIEdifactFramingSettings::is_segment_terminator_Set() const{
    return m_segment_terminator_isSet;
}

bool OAIEdifactFramingSettings::is_segment_terminator_Valid() const{
    return m_segment_terminator_isValid;
}

OAISegmentTerminatorSuffix OAIEdifactFramingSettings::getSegmentTerminatorSuffix() const {
    return m_segment_terminator_suffix;
}
void OAIEdifactFramingSettings::setSegmentTerminatorSuffix(const OAISegmentTerminatorSuffix &segment_terminator_suffix) {
    m_segment_terminator_suffix = segment_terminator_suffix;
    m_segment_terminator_suffix_isSet = true;
}

bool OAIEdifactFramingSettings::is_segment_terminator_suffix_Set() const{
    return m_segment_terminator_suffix_isSet;
}

bool OAIEdifactFramingSettings::is_segment_terminator_suffix_Valid() const{
    return m_segment_terminator_suffix_isValid;
}

QString OAIEdifactFramingSettings::getServiceCodeListDirectoryVersion() const {
    return m_service_code_list_directory_version;
}
void OAIEdifactFramingSettings::setServiceCodeListDirectoryVersion(const QString &service_code_list_directory_version) {
    m_service_code_list_directory_version = service_code_list_directory_version;
    m_service_code_list_directory_version_isSet = true;
}

bool OAIEdifactFramingSettings::is_service_code_list_directory_version_Set() const{
    return m_service_code_list_directory_version_isSet;
}

bool OAIEdifactFramingSettings::is_service_code_list_directory_version_Valid() const{
    return m_service_code_list_directory_version_isValid;
}

bool OAIEdifactFramingSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_character_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_character_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_element_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimal_point_indicator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repetition_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_terminator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_terminator_suffix.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_code_list_directory_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdifactFramingSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
