/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIX12DelimiterOverrides.h
 *
 * 
 */

#ifndef OAIX12DelimiterOverrides_H
#define OAIX12DelimiterOverrides_H

#include <QJsonObject>

#include "OAISegmentTerminatorSuffix.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIX12DelimiterOverrides : public OAIObject {
public:
    OAIX12DelimiterOverrides();
    OAIX12DelimiterOverrides(QString json);
    ~OAIX12DelimiterOverrides() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getComponentSeparator() const;
    void setComponentSeparator(const qint32 &component_separator);
    bool is_component_separator_Set() const;
    bool is_component_separator_Valid() const;

    qint32 getDataElementSeparator() const;
    void setDataElementSeparator(const qint32 &data_element_separator);
    bool is_data_element_separator_Set() const;
    bool is_data_element_separator_Valid() const;

    QString getMessageId() const;
    void setMessageId(const QString &message_id);
    bool is_message_id_Set() const;
    bool is_message_id_Valid() const;

    QString getProtocolVersion() const;
    void setProtocolVersion(const QString &protocol_version);
    bool is_protocol_version_Set() const;
    bool is_protocol_version_Valid() const;

    qint32 getReplaceCharacter() const;
    void setReplaceCharacter(const qint32 &replace_character);
    bool is_replace_character_Set() const;
    bool is_replace_character_Valid() const;

    bool isReplaceSeparatorsInPayload() const;
    void setReplaceSeparatorsInPayload(const bool &replace_separators_in_payload);
    bool is_replace_separators_in_payload_Set() const;
    bool is_replace_separators_in_payload_Valid() const;

    qint32 getSegmentTerminator() const;
    void setSegmentTerminator(const qint32 &segment_terminator);
    bool is_segment_terminator_Set() const;
    bool is_segment_terminator_Valid() const;

    OAISegmentTerminatorSuffix getSegmentTerminatorSuffix() const;
    void setSegmentTerminatorSuffix(const OAISegmentTerminatorSuffix &segment_terminator_suffix);
    bool is_segment_terminator_suffix_Set() const;
    bool is_segment_terminator_suffix_Valid() const;

    QString getTargetNamespace() const;
    void setTargetNamespace(const QString &target_namespace);
    bool is_target_namespace_Set() const;
    bool is_target_namespace_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_component_separator;
    bool m_component_separator_isSet;
    bool m_component_separator_isValid;

    qint32 m_data_element_separator;
    bool m_data_element_separator_isSet;
    bool m_data_element_separator_isValid;

    QString m_message_id;
    bool m_message_id_isSet;
    bool m_message_id_isValid;

    QString m_protocol_version;
    bool m_protocol_version_isSet;
    bool m_protocol_version_isValid;

    qint32 m_replace_character;
    bool m_replace_character_isSet;
    bool m_replace_character_isValid;

    bool m_replace_separators_in_payload;
    bool m_replace_separators_in_payload_isSet;
    bool m_replace_separators_in_payload_isValid;

    qint32 m_segment_terminator;
    bool m_segment_terminator_isSet;
    bool m_segment_terminator_isValid;

    OAISegmentTerminatorSuffix m_segment_terminator_suffix;
    bool m_segment_terminator_suffix_isSet;
    bool m_segment_terminator_suffix_isValid;

    QString m_target_namespace;
    bool m_target_namespace_isSet;
    bool m_target_namespace_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIX12DelimiterOverrides)

#endif // OAIX12DelimiterOverrides_H
