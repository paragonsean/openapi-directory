/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdifactCharacterSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdifactCharacterSet::OAIEdifactCharacterSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdifactCharacterSet::OAIEdifactCharacterSet() {
    this->initializeModel();
}

OAIEdifactCharacterSet::~OAIEdifactCharacterSet() {}

void OAIEdifactCharacterSet::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEdifactCharacterSet::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEdifactCharacterSet::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NotSpecified", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEdifactCharacterSet::NOTSPECIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNOB", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEdifactCharacterSet::UNOB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNOA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEdifactCharacterSet::UNOA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNOC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEdifactCharacterSet::UNOC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNOD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEdifactCharacterSet::UNOD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNOE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEdifactCharacterSet::UNOE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNOF", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEdifactCharacterSet::UNOF;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNOG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEdifactCharacterSet::UNOG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNOH", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEdifactCharacterSet::UNOH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNOI", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEdifactCharacterSet::UNOI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNOJ", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEdifactCharacterSet::UNOJ;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNOK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEdifactCharacterSet::UNOK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNOX", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEdifactCharacterSet::UNOX;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNOY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEdifactCharacterSet::UNOY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KECA", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEdifactCharacterSet::KECA;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEdifactCharacterSet::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEdifactCharacterSet::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEdifactCharacterSet::NOTSPECIFIED:
            val = "NotSpecified";
            break;
        case eOAIEdifactCharacterSet::UNOB:
            val = "UNOB";
            break;
        case eOAIEdifactCharacterSet::UNOA:
            val = "UNOA";
            break;
        case eOAIEdifactCharacterSet::UNOC:
            val = "UNOC";
            break;
        case eOAIEdifactCharacterSet::UNOD:
            val = "UNOD";
            break;
        case eOAIEdifactCharacterSet::UNOE:
            val = "UNOE";
            break;
        case eOAIEdifactCharacterSet::UNOF:
            val = "UNOF";
            break;
        case eOAIEdifactCharacterSet::UNOG:
            val = "UNOG";
            break;
        case eOAIEdifactCharacterSet::UNOH:
            val = "UNOH";
            break;
        case eOAIEdifactCharacterSet::UNOI:
            val = "UNOI";
            break;
        case eOAIEdifactCharacterSet::UNOJ:
            val = "UNOJ";
            break;
        case eOAIEdifactCharacterSet::UNOK:
            val = "UNOK";
            break;
        case eOAIEdifactCharacterSet::UNOX:
            val = "UNOX";
            break;
        case eOAIEdifactCharacterSet::UNOY:
            val = "UNOY";
            break;
        case eOAIEdifactCharacterSet::KECA:
            val = "KECA";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEdifactCharacterSet::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEdifactCharacterSet::eOAIEdifactCharacterSet OAIEdifactCharacterSet::getValue() const {
    return m_value;
}

void OAIEdifactCharacterSet::setValue(const OAIEdifactCharacterSet::eOAIEdifactCharacterSet& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEdifactCharacterSet::isSet() const {
    
    return m_value_isSet;
}

bool OAIEdifactCharacterSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
