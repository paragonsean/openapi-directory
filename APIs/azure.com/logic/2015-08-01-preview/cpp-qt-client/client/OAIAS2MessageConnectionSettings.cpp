/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAS2MessageConnectionSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAS2MessageConnectionSettings::OAIAS2MessageConnectionSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAS2MessageConnectionSettings::OAIAS2MessageConnectionSettings() {
    this->initializeModel();
}

OAIAS2MessageConnectionSettings::~OAIAS2MessageConnectionSettings() {}

void OAIAS2MessageConnectionSettings::initializeModel() {

    m_ignore_certificate_name_mismatch_isSet = false;
    m_ignore_certificate_name_mismatch_isValid = false;

    m_keep_http_connection_alive_isSet = false;
    m_keep_http_connection_alive_isValid = false;

    m_support_http_status_code_continue_isSet = false;
    m_support_http_status_code_continue_isValid = false;

    m_unfold_http_headers_isSet = false;
    m_unfold_http_headers_isValid = false;
}

void OAIAS2MessageConnectionSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAS2MessageConnectionSettings::fromJsonObject(QJsonObject json) {

    m_ignore_certificate_name_mismatch_isValid = ::OpenAPI::fromJsonValue(m_ignore_certificate_name_mismatch, json[QString("ignoreCertificateNameMismatch")]);
    m_ignore_certificate_name_mismatch_isSet = !json[QString("ignoreCertificateNameMismatch")].isNull() && m_ignore_certificate_name_mismatch_isValid;

    m_keep_http_connection_alive_isValid = ::OpenAPI::fromJsonValue(m_keep_http_connection_alive, json[QString("keepHttpConnectionAlive")]);
    m_keep_http_connection_alive_isSet = !json[QString("keepHttpConnectionAlive")].isNull() && m_keep_http_connection_alive_isValid;

    m_support_http_status_code_continue_isValid = ::OpenAPI::fromJsonValue(m_support_http_status_code_continue, json[QString("supportHttpStatusCodeContinue")]);
    m_support_http_status_code_continue_isSet = !json[QString("supportHttpStatusCodeContinue")].isNull() && m_support_http_status_code_continue_isValid;

    m_unfold_http_headers_isValid = ::OpenAPI::fromJsonValue(m_unfold_http_headers, json[QString("unfoldHttpHeaders")]);
    m_unfold_http_headers_isSet = !json[QString("unfoldHttpHeaders")].isNull() && m_unfold_http_headers_isValid;
}

QString OAIAS2MessageConnectionSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAS2MessageConnectionSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_ignore_certificate_name_mismatch_isSet) {
        obj.insert(QString("ignoreCertificateNameMismatch"), ::OpenAPI::toJsonValue(m_ignore_certificate_name_mismatch));
    }
    if (m_keep_http_connection_alive_isSet) {
        obj.insert(QString("keepHttpConnectionAlive"), ::OpenAPI::toJsonValue(m_keep_http_connection_alive));
    }
    if (m_support_http_status_code_continue_isSet) {
        obj.insert(QString("supportHttpStatusCodeContinue"), ::OpenAPI::toJsonValue(m_support_http_status_code_continue));
    }
    if (m_unfold_http_headers_isSet) {
        obj.insert(QString("unfoldHttpHeaders"), ::OpenAPI::toJsonValue(m_unfold_http_headers));
    }
    return obj;
}

bool OAIAS2MessageConnectionSettings::isIgnoreCertificateNameMismatch() const {
    return m_ignore_certificate_name_mismatch;
}
void OAIAS2MessageConnectionSettings::setIgnoreCertificateNameMismatch(const bool &ignore_certificate_name_mismatch) {
    m_ignore_certificate_name_mismatch = ignore_certificate_name_mismatch;
    m_ignore_certificate_name_mismatch_isSet = true;
}

bool OAIAS2MessageConnectionSettings::is_ignore_certificate_name_mismatch_Set() const{
    return m_ignore_certificate_name_mismatch_isSet;
}

bool OAIAS2MessageConnectionSettings::is_ignore_certificate_name_mismatch_Valid() const{
    return m_ignore_certificate_name_mismatch_isValid;
}

bool OAIAS2MessageConnectionSettings::isKeepHttpConnectionAlive() const {
    return m_keep_http_connection_alive;
}
void OAIAS2MessageConnectionSettings::setKeepHttpConnectionAlive(const bool &keep_http_connection_alive) {
    m_keep_http_connection_alive = keep_http_connection_alive;
    m_keep_http_connection_alive_isSet = true;
}

bool OAIAS2MessageConnectionSettings::is_keep_http_connection_alive_Set() const{
    return m_keep_http_connection_alive_isSet;
}

bool OAIAS2MessageConnectionSettings::is_keep_http_connection_alive_Valid() const{
    return m_keep_http_connection_alive_isValid;
}

bool OAIAS2MessageConnectionSettings::isSupportHttpStatusCodeContinue() const {
    return m_support_http_status_code_continue;
}
void OAIAS2MessageConnectionSettings::setSupportHttpStatusCodeContinue(const bool &support_http_status_code_continue) {
    m_support_http_status_code_continue = support_http_status_code_continue;
    m_support_http_status_code_continue_isSet = true;
}

bool OAIAS2MessageConnectionSettings::is_support_http_status_code_continue_Set() const{
    return m_support_http_status_code_continue_isSet;
}

bool OAIAS2MessageConnectionSettings::is_support_http_status_code_continue_Valid() const{
    return m_support_http_status_code_continue_isValid;
}

bool OAIAS2MessageConnectionSettings::isUnfoldHttpHeaders() const {
    return m_unfold_http_headers;
}
void OAIAS2MessageConnectionSettings::setUnfoldHttpHeaders(const bool &unfold_http_headers) {
    m_unfold_http_headers = unfold_http_headers;
    m_unfold_http_headers_isSet = true;
}

bool OAIAS2MessageConnectionSettings::is_unfold_http_headers_Set() const{
    return m_unfold_http_headers_isSet;
}

bool OAIAS2MessageConnectionSettings::is_unfold_http_headers_Valid() const{
    return m_unfold_http_headers_isValid;
}

bool OAIAS2MessageConnectionSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ignore_certificate_name_mismatch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keep_http_connection_alive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_support_http_status_code_continue_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unfold_http_headers_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAS2MessageConnectionSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
