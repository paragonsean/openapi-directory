/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIX12ProtocolSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIX12ProtocolSettings::OAIX12ProtocolSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIX12ProtocolSettings::OAIX12ProtocolSettings() {
    this->initializeModel();
}

OAIX12ProtocolSettings::~OAIX12ProtocolSettings() {}

void OAIX12ProtocolSettings::initializeModel() {

    m_acknowledgement_settings_isSet = false;
    m_acknowledgement_settings_isValid = false;

    m_envelope_overrides_isSet = false;
    m_envelope_overrides_isValid = false;

    m_envelope_settings_isSet = false;
    m_envelope_settings_isValid = false;

    m_framing_settings_isSet = false;
    m_framing_settings_isValid = false;

    m_message_filter_isSet = false;
    m_message_filter_isValid = false;

    m_message_filter_list_isSet = false;
    m_message_filter_list_isValid = false;

    m_processing_settings_isSet = false;
    m_processing_settings_isValid = false;

    m_schema_references_isSet = false;
    m_schema_references_isValid = false;

    m_security_settings_isSet = false;
    m_security_settings_isValid = false;

    m_validation_overrides_isSet = false;
    m_validation_overrides_isValid = false;

    m_validation_settings_isSet = false;
    m_validation_settings_isValid = false;

    m_x12_delimiter_overrides_isSet = false;
    m_x12_delimiter_overrides_isValid = false;
}

void OAIX12ProtocolSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIX12ProtocolSettings::fromJsonObject(QJsonObject json) {

    m_acknowledgement_settings_isValid = ::OpenAPI::fromJsonValue(m_acknowledgement_settings, json[QString("acknowledgementSettings")]);
    m_acknowledgement_settings_isSet = !json[QString("acknowledgementSettings")].isNull() && m_acknowledgement_settings_isValid;

    m_envelope_overrides_isValid = ::OpenAPI::fromJsonValue(m_envelope_overrides, json[QString("envelopeOverrides")]);
    m_envelope_overrides_isSet = !json[QString("envelopeOverrides")].isNull() && m_envelope_overrides_isValid;

    m_envelope_settings_isValid = ::OpenAPI::fromJsonValue(m_envelope_settings, json[QString("envelopeSettings")]);
    m_envelope_settings_isSet = !json[QString("envelopeSettings")].isNull() && m_envelope_settings_isValid;

    m_framing_settings_isValid = ::OpenAPI::fromJsonValue(m_framing_settings, json[QString("framingSettings")]);
    m_framing_settings_isSet = !json[QString("framingSettings")].isNull() && m_framing_settings_isValid;

    m_message_filter_isValid = ::OpenAPI::fromJsonValue(m_message_filter, json[QString("messageFilter")]);
    m_message_filter_isSet = !json[QString("messageFilter")].isNull() && m_message_filter_isValid;

    m_message_filter_list_isValid = ::OpenAPI::fromJsonValue(m_message_filter_list, json[QString("messageFilterList")]);
    m_message_filter_list_isSet = !json[QString("messageFilterList")].isNull() && m_message_filter_list_isValid;

    m_processing_settings_isValid = ::OpenAPI::fromJsonValue(m_processing_settings, json[QString("processingSettings")]);
    m_processing_settings_isSet = !json[QString("processingSettings")].isNull() && m_processing_settings_isValid;

    m_schema_references_isValid = ::OpenAPI::fromJsonValue(m_schema_references, json[QString("schemaReferences")]);
    m_schema_references_isSet = !json[QString("schemaReferences")].isNull() && m_schema_references_isValid;

    m_security_settings_isValid = ::OpenAPI::fromJsonValue(m_security_settings, json[QString("securitySettings")]);
    m_security_settings_isSet = !json[QString("securitySettings")].isNull() && m_security_settings_isValid;

    m_validation_overrides_isValid = ::OpenAPI::fromJsonValue(m_validation_overrides, json[QString("validationOverrides")]);
    m_validation_overrides_isSet = !json[QString("validationOverrides")].isNull() && m_validation_overrides_isValid;

    m_validation_settings_isValid = ::OpenAPI::fromJsonValue(m_validation_settings, json[QString("validationSettings")]);
    m_validation_settings_isSet = !json[QString("validationSettings")].isNull() && m_validation_settings_isValid;

    m_x12_delimiter_overrides_isValid = ::OpenAPI::fromJsonValue(m_x12_delimiter_overrides, json[QString("x12DelimiterOverrides")]);
    m_x12_delimiter_overrides_isSet = !json[QString("x12DelimiterOverrides")].isNull() && m_x12_delimiter_overrides_isValid;
}

QString OAIX12ProtocolSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIX12ProtocolSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_acknowledgement_settings.isSet()) {
        obj.insert(QString("acknowledgementSettings"), ::OpenAPI::toJsonValue(m_acknowledgement_settings));
    }
    if (m_envelope_overrides.size() > 0) {
        obj.insert(QString("envelopeOverrides"), ::OpenAPI::toJsonValue(m_envelope_overrides));
    }
    if (m_envelope_settings.isSet()) {
        obj.insert(QString("envelopeSettings"), ::OpenAPI::toJsonValue(m_envelope_settings));
    }
    if (m_framing_settings.isSet()) {
        obj.insert(QString("framingSettings"), ::OpenAPI::toJsonValue(m_framing_settings));
    }
    if (m_message_filter.isSet()) {
        obj.insert(QString("messageFilter"), ::OpenAPI::toJsonValue(m_message_filter));
    }
    if (m_message_filter_list.size() > 0) {
        obj.insert(QString("messageFilterList"), ::OpenAPI::toJsonValue(m_message_filter_list));
    }
    if (m_processing_settings.isSet()) {
        obj.insert(QString("processingSettings"), ::OpenAPI::toJsonValue(m_processing_settings));
    }
    if (m_schema_references.size() > 0) {
        obj.insert(QString("schemaReferences"), ::OpenAPI::toJsonValue(m_schema_references));
    }
    if (m_security_settings.isSet()) {
        obj.insert(QString("securitySettings"), ::OpenAPI::toJsonValue(m_security_settings));
    }
    if (m_validation_overrides.size() > 0) {
        obj.insert(QString("validationOverrides"), ::OpenAPI::toJsonValue(m_validation_overrides));
    }
    if (m_validation_settings.isSet()) {
        obj.insert(QString("validationSettings"), ::OpenAPI::toJsonValue(m_validation_settings));
    }
    if (m_x12_delimiter_overrides.size() > 0) {
        obj.insert(QString("x12DelimiterOverrides"), ::OpenAPI::toJsonValue(m_x12_delimiter_overrides));
    }
    return obj;
}

OAIX12AcknowledgementSettings OAIX12ProtocolSettings::getAcknowledgementSettings() const {
    return m_acknowledgement_settings;
}
void OAIX12ProtocolSettings::setAcknowledgementSettings(const OAIX12AcknowledgementSettings &acknowledgement_settings) {
    m_acknowledgement_settings = acknowledgement_settings;
    m_acknowledgement_settings_isSet = true;
}

bool OAIX12ProtocolSettings::is_acknowledgement_settings_Set() const{
    return m_acknowledgement_settings_isSet;
}

bool OAIX12ProtocolSettings::is_acknowledgement_settings_Valid() const{
    return m_acknowledgement_settings_isValid;
}

QList<OAIX12EnvelopeOverride> OAIX12ProtocolSettings::getEnvelopeOverrides() const {
    return m_envelope_overrides;
}
void OAIX12ProtocolSettings::setEnvelopeOverrides(const QList<OAIX12EnvelopeOverride> &envelope_overrides) {
    m_envelope_overrides = envelope_overrides;
    m_envelope_overrides_isSet = true;
}

bool OAIX12ProtocolSettings::is_envelope_overrides_Set() const{
    return m_envelope_overrides_isSet;
}

bool OAIX12ProtocolSettings::is_envelope_overrides_Valid() const{
    return m_envelope_overrides_isValid;
}

OAIX12EnvelopeSettings OAIX12ProtocolSettings::getEnvelopeSettings() const {
    return m_envelope_settings;
}
void OAIX12ProtocolSettings::setEnvelopeSettings(const OAIX12EnvelopeSettings &envelope_settings) {
    m_envelope_settings = envelope_settings;
    m_envelope_settings_isSet = true;
}

bool OAIX12ProtocolSettings::is_envelope_settings_Set() const{
    return m_envelope_settings_isSet;
}

bool OAIX12ProtocolSettings::is_envelope_settings_Valid() const{
    return m_envelope_settings_isValid;
}

OAIX12FramingSettings OAIX12ProtocolSettings::getFramingSettings() const {
    return m_framing_settings;
}
void OAIX12ProtocolSettings::setFramingSettings(const OAIX12FramingSettings &framing_settings) {
    m_framing_settings = framing_settings;
    m_framing_settings_isSet = true;
}

bool OAIX12ProtocolSettings::is_framing_settings_Set() const{
    return m_framing_settings_isSet;
}

bool OAIX12ProtocolSettings::is_framing_settings_Valid() const{
    return m_framing_settings_isValid;
}

OAIX12MessageFilter OAIX12ProtocolSettings::getMessageFilter() const {
    return m_message_filter;
}
void OAIX12ProtocolSettings::setMessageFilter(const OAIX12MessageFilter &message_filter) {
    m_message_filter = message_filter;
    m_message_filter_isSet = true;
}

bool OAIX12ProtocolSettings::is_message_filter_Set() const{
    return m_message_filter_isSet;
}

bool OAIX12ProtocolSettings::is_message_filter_Valid() const{
    return m_message_filter_isValid;
}

QList<OAIX12MessageIdentifier> OAIX12ProtocolSettings::getMessageFilterList() const {
    return m_message_filter_list;
}
void OAIX12ProtocolSettings::setMessageFilterList(const QList<OAIX12MessageIdentifier> &message_filter_list) {
    m_message_filter_list = message_filter_list;
    m_message_filter_list_isSet = true;
}

bool OAIX12ProtocolSettings::is_message_filter_list_Set() const{
    return m_message_filter_list_isSet;
}

bool OAIX12ProtocolSettings::is_message_filter_list_Valid() const{
    return m_message_filter_list_isValid;
}

OAIX12ProcessingSettings OAIX12ProtocolSettings::getProcessingSettings() const {
    return m_processing_settings;
}
void OAIX12ProtocolSettings::setProcessingSettings(const OAIX12ProcessingSettings &processing_settings) {
    m_processing_settings = processing_settings;
    m_processing_settings_isSet = true;
}

bool OAIX12ProtocolSettings::is_processing_settings_Set() const{
    return m_processing_settings_isSet;
}

bool OAIX12ProtocolSettings::is_processing_settings_Valid() const{
    return m_processing_settings_isValid;
}

QList<OAIX12SchemaReference> OAIX12ProtocolSettings::getSchemaReferences() const {
    return m_schema_references;
}
void OAIX12ProtocolSettings::setSchemaReferences(const QList<OAIX12SchemaReference> &schema_references) {
    m_schema_references = schema_references;
    m_schema_references_isSet = true;
}

bool OAIX12ProtocolSettings::is_schema_references_Set() const{
    return m_schema_references_isSet;
}

bool OAIX12ProtocolSettings::is_schema_references_Valid() const{
    return m_schema_references_isValid;
}

OAIX12SecuritySettings OAIX12ProtocolSettings::getSecuritySettings() const {
    return m_security_settings;
}
void OAIX12ProtocolSettings::setSecuritySettings(const OAIX12SecuritySettings &security_settings) {
    m_security_settings = security_settings;
    m_security_settings_isSet = true;
}

bool OAIX12ProtocolSettings::is_security_settings_Set() const{
    return m_security_settings_isSet;
}

bool OAIX12ProtocolSettings::is_security_settings_Valid() const{
    return m_security_settings_isValid;
}

QList<OAIX12ValidationOverride> OAIX12ProtocolSettings::getValidationOverrides() const {
    return m_validation_overrides;
}
void OAIX12ProtocolSettings::setValidationOverrides(const QList<OAIX12ValidationOverride> &validation_overrides) {
    m_validation_overrides = validation_overrides;
    m_validation_overrides_isSet = true;
}

bool OAIX12ProtocolSettings::is_validation_overrides_Set() const{
    return m_validation_overrides_isSet;
}

bool OAIX12ProtocolSettings::is_validation_overrides_Valid() const{
    return m_validation_overrides_isValid;
}

OAIX12ValidationSettings OAIX12ProtocolSettings::getValidationSettings() const {
    return m_validation_settings;
}
void OAIX12ProtocolSettings::setValidationSettings(const OAIX12ValidationSettings &validation_settings) {
    m_validation_settings = validation_settings;
    m_validation_settings_isSet = true;
}

bool OAIX12ProtocolSettings::is_validation_settings_Set() const{
    return m_validation_settings_isSet;
}

bool OAIX12ProtocolSettings::is_validation_settings_Valid() const{
    return m_validation_settings_isValid;
}

QList<OAIX12DelimiterOverrides> OAIX12ProtocolSettings::getX12DelimiterOverrides() const {
    return m_x12_delimiter_overrides;
}
void OAIX12ProtocolSettings::setX12DelimiterOverrides(const QList<OAIX12DelimiterOverrides> &x12_delimiter_overrides) {
    m_x12_delimiter_overrides = x12_delimiter_overrides;
    m_x12_delimiter_overrides_isSet = true;
}

bool OAIX12ProtocolSettings::is_x12_delimiter_overrides_Set() const{
    return m_x12_delimiter_overrides_isSet;
}

bool OAIX12ProtocolSettings::is_x12_delimiter_overrides_Valid() const{
    return m_x12_delimiter_overrides_isValid;
}

bool OAIX12ProtocolSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acknowledgement_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_envelope_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_envelope_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_framing_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_filter_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_references.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x12_delimiter_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIX12ProtocolSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
