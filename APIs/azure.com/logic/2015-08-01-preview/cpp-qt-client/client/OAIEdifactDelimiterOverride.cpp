/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdifactDelimiterOverride.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdifactDelimiterOverride::OAIEdifactDelimiterOverride(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdifactDelimiterOverride::OAIEdifactDelimiterOverride() {
    this->initializeModel();
}

OAIEdifactDelimiterOverride::~OAIEdifactDelimiterOverride() {}

void OAIEdifactDelimiterOverride::initializeModel() {

    m_component_separator_isSet = false;
    m_component_separator_isValid = false;

    m_data_element_separator_isSet = false;
    m_data_element_separator_isValid = false;

    m_decimal_point_indicator_isSet = false;
    m_decimal_point_indicator_isValid = false;

    m_message_association_assigned_code_isSet = false;
    m_message_association_assigned_code_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_message_release_isSet = false;
    m_message_release_isValid = false;

    m_message_version_isSet = false;
    m_message_version_isValid = false;

    m_release_indicator_isSet = false;
    m_release_indicator_isValid = false;

    m_repetition_separator_isSet = false;
    m_repetition_separator_isValid = false;

    m_segment_terminator_isSet = false;
    m_segment_terminator_isValid = false;

    m_segment_terminator_suffix_isSet = false;
    m_segment_terminator_suffix_isValid = false;

    m_target_namespace_isSet = false;
    m_target_namespace_isValid = false;
}

void OAIEdifactDelimiterOverride::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdifactDelimiterOverride::fromJsonObject(QJsonObject json) {

    m_component_separator_isValid = ::OpenAPI::fromJsonValue(m_component_separator, json[QString("componentSeparator")]);
    m_component_separator_isSet = !json[QString("componentSeparator")].isNull() && m_component_separator_isValid;

    m_data_element_separator_isValid = ::OpenAPI::fromJsonValue(m_data_element_separator, json[QString("dataElementSeparator")]);
    m_data_element_separator_isSet = !json[QString("dataElementSeparator")].isNull() && m_data_element_separator_isValid;

    m_decimal_point_indicator_isValid = ::OpenAPI::fromJsonValue(m_decimal_point_indicator, json[QString("decimalPointIndicator")]);
    m_decimal_point_indicator_isSet = !json[QString("decimalPointIndicator")].isNull() && m_decimal_point_indicator_isValid;

    m_message_association_assigned_code_isValid = ::OpenAPI::fromJsonValue(m_message_association_assigned_code, json[QString("messageAssociationAssignedCode")]);
    m_message_association_assigned_code_isSet = !json[QString("messageAssociationAssignedCode")].isNull() && m_message_association_assigned_code_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_message_release_isValid = ::OpenAPI::fromJsonValue(m_message_release, json[QString("messageRelease")]);
    m_message_release_isSet = !json[QString("messageRelease")].isNull() && m_message_release_isValid;

    m_message_version_isValid = ::OpenAPI::fromJsonValue(m_message_version, json[QString("messageVersion")]);
    m_message_version_isSet = !json[QString("messageVersion")].isNull() && m_message_version_isValid;

    m_release_indicator_isValid = ::OpenAPI::fromJsonValue(m_release_indicator, json[QString("releaseIndicator")]);
    m_release_indicator_isSet = !json[QString("releaseIndicator")].isNull() && m_release_indicator_isValid;

    m_repetition_separator_isValid = ::OpenAPI::fromJsonValue(m_repetition_separator, json[QString("repetitionSeparator")]);
    m_repetition_separator_isSet = !json[QString("repetitionSeparator")].isNull() && m_repetition_separator_isValid;

    m_segment_terminator_isValid = ::OpenAPI::fromJsonValue(m_segment_terminator, json[QString("segmentTerminator")]);
    m_segment_terminator_isSet = !json[QString("segmentTerminator")].isNull() && m_segment_terminator_isValid;

    m_segment_terminator_suffix_isValid = ::OpenAPI::fromJsonValue(m_segment_terminator_suffix, json[QString("segmentTerminatorSuffix")]);
    m_segment_terminator_suffix_isSet = !json[QString("segmentTerminatorSuffix")].isNull() && m_segment_terminator_suffix_isValid;

    m_target_namespace_isValid = ::OpenAPI::fromJsonValue(m_target_namespace, json[QString("targetNamespace")]);
    m_target_namespace_isSet = !json[QString("targetNamespace")].isNull() && m_target_namespace_isValid;
}

QString OAIEdifactDelimiterOverride::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdifactDelimiterOverride::asJsonObject() const {
    QJsonObject obj;
    if (m_component_separator_isSet) {
        obj.insert(QString("componentSeparator"), ::OpenAPI::toJsonValue(m_component_separator));
    }
    if (m_data_element_separator_isSet) {
        obj.insert(QString("dataElementSeparator"), ::OpenAPI::toJsonValue(m_data_element_separator));
    }
    if (m_decimal_point_indicator.isSet()) {
        obj.insert(QString("decimalPointIndicator"), ::OpenAPI::toJsonValue(m_decimal_point_indicator));
    }
    if (m_message_association_assigned_code_isSet) {
        obj.insert(QString("messageAssociationAssignedCode"), ::OpenAPI::toJsonValue(m_message_association_assigned_code));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_message_release_isSet) {
        obj.insert(QString("messageRelease"), ::OpenAPI::toJsonValue(m_message_release));
    }
    if (m_message_version_isSet) {
        obj.insert(QString("messageVersion"), ::OpenAPI::toJsonValue(m_message_version));
    }
    if (m_release_indicator_isSet) {
        obj.insert(QString("releaseIndicator"), ::OpenAPI::toJsonValue(m_release_indicator));
    }
    if (m_repetition_separator_isSet) {
        obj.insert(QString("repetitionSeparator"), ::OpenAPI::toJsonValue(m_repetition_separator));
    }
    if (m_segment_terminator_isSet) {
        obj.insert(QString("segmentTerminator"), ::OpenAPI::toJsonValue(m_segment_terminator));
    }
    if (m_segment_terminator_suffix.isSet()) {
        obj.insert(QString("segmentTerminatorSuffix"), ::OpenAPI::toJsonValue(m_segment_terminator_suffix));
    }
    if (m_target_namespace_isSet) {
        obj.insert(QString("targetNamespace"), ::OpenAPI::toJsonValue(m_target_namespace));
    }
    return obj;
}

qint32 OAIEdifactDelimiterOverride::getComponentSeparator() const {
    return m_component_separator;
}
void OAIEdifactDelimiterOverride::setComponentSeparator(const qint32 &component_separator) {
    m_component_separator = component_separator;
    m_component_separator_isSet = true;
}

bool OAIEdifactDelimiterOverride::is_component_separator_Set() const{
    return m_component_separator_isSet;
}

bool OAIEdifactDelimiterOverride::is_component_separator_Valid() const{
    return m_component_separator_isValid;
}

qint32 OAIEdifactDelimiterOverride::getDataElementSeparator() const {
    return m_data_element_separator;
}
void OAIEdifactDelimiterOverride::setDataElementSeparator(const qint32 &data_element_separator) {
    m_data_element_separator = data_element_separator;
    m_data_element_separator_isSet = true;
}

bool OAIEdifactDelimiterOverride::is_data_element_separator_Set() const{
    return m_data_element_separator_isSet;
}

bool OAIEdifactDelimiterOverride::is_data_element_separator_Valid() const{
    return m_data_element_separator_isValid;
}

OAIEdifactDecimalIndicator OAIEdifactDelimiterOverride::getDecimalPointIndicator() const {
    return m_decimal_point_indicator;
}
void OAIEdifactDelimiterOverride::setDecimalPointIndicator(const OAIEdifactDecimalIndicator &decimal_point_indicator) {
    m_decimal_point_indicator = decimal_point_indicator;
    m_decimal_point_indicator_isSet = true;
}

bool OAIEdifactDelimiterOverride::is_decimal_point_indicator_Set() const{
    return m_decimal_point_indicator_isSet;
}

bool OAIEdifactDelimiterOverride::is_decimal_point_indicator_Valid() const{
    return m_decimal_point_indicator_isValid;
}

QString OAIEdifactDelimiterOverride::getMessageAssociationAssignedCode() const {
    return m_message_association_assigned_code;
}
void OAIEdifactDelimiterOverride::setMessageAssociationAssignedCode(const QString &message_association_assigned_code) {
    m_message_association_assigned_code = message_association_assigned_code;
    m_message_association_assigned_code_isSet = true;
}

bool OAIEdifactDelimiterOverride::is_message_association_assigned_code_Set() const{
    return m_message_association_assigned_code_isSet;
}

bool OAIEdifactDelimiterOverride::is_message_association_assigned_code_Valid() const{
    return m_message_association_assigned_code_isValid;
}

QString OAIEdifactDelimiterOverride::getMessageId() const {
    return m_message_id;
}
void OAIEdifactDelimiterOverride::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIEdifactDelimiterOverride::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIEdifactDelimiterOverride::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIEdifactDelimiterOverride::getMessageRelease() const {
    return m_message_release;
}
void OAIEdifactDelimiterOverride::setMessageRelease(const QString &message_release) {
    m_message_release = message_release;
    m_message_release_isSet = true;
}

bool OAIEdifactDelimiterOverride::is_message_release_Set() const{
    return m_message_release_isSet;
}

bool OAIEdifactDelimiterOverride::is_message_release_Valid() const{
    return m_message_release_isValid;
}

QString OAIEdifactDelimiterOverride::getMessageVersion() const {
    return m_message_version;
}
void OAIEdifactDelimiterOverride::setMessageVersion(const QString &message_version) {
    m_message_version = message_version;
    m_message_version_isSet = true;
}

bool OAIEdifactDelimiterOverride::is_message_version_Set() const{
    return m_message_version_isSet;
}

bool OAIEdifactDelimiterOverride::is_message_version_Valid() const{
    return m_message_version_isValid;
}

qint32 OAIEdifactDelimiterOverride::getReleaseIndicator() const {
    return m_release_indicator;
}
void OAIEdifactDelimiterOverride::setReleaseIndicator(const qint32 &release_indicator) {
    m_release_indicator = release_indicator;
    m_release_indicator_isSet = true;
}

bool OAIEdifactDelimiterOverride::is_release_indicator_Set() const{
    return m_release_indicator_isSet;
}

bool OAIEdifactDelimiterOverride::is_release_indicator_Valid() const{
    return m_release_indicator_isValid;
}

qint32 OAIEdifactDelimiterOverride::getRepetitionSeparator() const {
    return m_repetition_separator;
}
void OAIEdifactDelimiterOverride::setRepetitionSeparator(const qint32 &repetition_separator) {
    m_repetition_separator = repetition_separator;
    m_repetition_separator_isSet = true;
}

bool OAIEdifactDelimiterOverride::is_repetition_separator_Set() const{
    return m_repetition_separator_isSet;
}

bool OAIEdifactDelimiterOverride::is_repetition_separator_Valid() const{
    return m_repetition_separator_isValid;
}

qint32 OAIEdifactDelimiterOverride::getSegmentTerminator() const {
    return m_segment_terminator;
}
void OAIEdifactDelimiterOverride::setSegmentTerminator(const qint32 &segment_terminator) {
    m_segment_terminator = segment_terminator;
    m_segment_terminator_isSet = true;
}

bool OAIEdifactDelimiterOverride::is_segment_terminator_Set() const{
    return m_segment_terminator_isSet;
}

bool OAIEdifactDelimiterOverride::is_segment_terminator_Valid() const{
    return m_segment_terminator_isValid;
}

OAISegmentTerminatorSuffix OAIEdifactDelimiterOverride::getSegmentTerminatorSuffix() const {
    return m_segment_terminator_suffix;
}
void OAIEdifactDelimiterOverride::setSegmentTerminatorSuffix(const OAISegmentTerminatorSuffix &segment_terminator_suffix) {
    m_segment_terminator_suffix = segment_terminator_suffix;
    m_segment_terminator_suffix_isSet = true;
}

bool OAIEdifactDelimiterOverride::is_segment_terminator_suffix_Set() const{
    return m_segment_terminator_suffix_isSet;
}

bool OAIEdifactDelimiterOverride::is_segment_terminator_suffix_Valid() const{
    return m_segment_terminator_suffix_isValid;
}

QString OAIEdifactDelimiterOverride::getTargetNamespace() const {
    return m_target_namespace;
}
void OAIEdifactDelimiterOverride::setTargetNamespace(const QString &target_namespace) {
    m_target_namespace = target_namespace;
    m_target_namespace_isSet = true;
}

bool OAIEdifactDelimiterOverride::is_target_namespace_Set() const{
    return m_target_namespace_isSet;
}

bool OAIEdifactDelimiterOverride::is_target_namespace_Valid() const{
    return m_target_namespace_isValid;
}

bool OAIEdifactDelimiterOverride::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_component_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_element_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimal_point_indicator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_association_assigned_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_release_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repetition_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_terminator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_terminator_suffix.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdifactDelimiterOverride::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
