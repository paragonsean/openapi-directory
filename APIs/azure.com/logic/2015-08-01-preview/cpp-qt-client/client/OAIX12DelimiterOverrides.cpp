/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIX12DelimiterOverrides.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIX12DelimiterOverrides::OAIX12DelimiterOverrides(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIX12DelimiterOverrides::OAIX12DelimiterOverrides() {
    this->initializeModel();
}

OAIX12DelimiterOverrides::~OAIX12DelimiterOverrides() {}

void OAIX12DelimiterOverrides::initializeModel() {

    m_component_separator_isSet = false;
    m_component_separator_isValid = false;

    m_data_element_separator_isSet = false;
    m_data_element_separator_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_protocol_version_isSet = false;
    m_protocol_version_isValid = false;

    m_replace_character_isSet = false;
    m_replace_character_isValid = false;

    m_replace_separators_in_payload_isSet = false;
    m_replace_separators_in_payload_isValid = false;

    m_segment_terminator_isSet = false;
    m_segment_terminator_isValid = false;

    m_segment_terminator_suffix_isSet = false;
    m_segment_terminator_suffix_isValid = false;

    m_target_namespace_isSet = false;
    m_target_namespace_isValid = false;
}

void OAIX12DelimiterOverrides::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIX12DelimiterOverrides::fromJsonObject(QJsonObject json) {

    m_component_separator_isValid = ::OpenAPI::fromJsonValue(m_component_separator, json[QString("componentSeparator")]);
    m_component_separator_isSet = !json[QString("componentSeparator")].isNull() && m_component_separator_isValid;

    m_data_element_separator_isValid = ::OpenAPI::fromJsonValue(m_data_element_separator, json[QString("dataElementSeparator")]);
    m_data_element_separator_isSet = !json[QString("dataElementSeparator")].isNull() && m_data_element_separator_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_protocol_version_isValid = ::OpenAPI::fromJsonValue(m_protocol_version, json[QString("protocolVersion")]);
    m_protocol_version_isSet = !json[QString("protocolVersion")].isNull() && m_protocol_version_isValid;

    m_replace_character_isValid = ::OpenAPI::fromJsonValue(m_replace_character, json[QString("replaceCharacter")]);
    m_replace_character_isSet = !json[QString("replaceCharacter")].isNull() && m_replace_character_isValid;

    m_replace_separators_in_payload_isValid = ::OpenAPI::fromJsonValue(m_replace_separators_in_payload, json[QString("replaceSeparatorsInPayload")]);
    m_replace_separators_in_payload_isSet = !json[QString("replaceSeparatorsInPayload")].isNull() && m_replace_separators_in_payload_isValid;

    m_segment_terminator_isValid = ::OpenAPI::fromJsonValue(m_segment_terminator, json[QString("segmentTerminator")]);
    m_segment_terminator_isSet = !json[QString("segmentTerminator")].isNull() && m_segment_terminator_isValid;

    m_segment_terminator_suffix_isValid = ::OpenAPI::fromJsonValue(m_segment_terminator_suffix, json[QString("segmentTerminatorSuffix")]);
    m_segment_terminator_suffix_isSet = !json[QString("segmentTerminatorSuffix")].isNull() && m_segment_terminator_suffix_isValid;

    m_target_namespace_isValid = ::OpenAPI::fromJsonValue(m_target_namespace, json[QString("targetNamespace")]);
    m_target_namespace_isSet = !json[QString("targetNamespace")].isNull() && m_target_namespace_isValid;
}

QString OAIX12DelimiterOverrides::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIX12DelimiterOverrides::asJsonObject() const {
    QJsonObject obj;
    if (m_component_separator_isSet) {
        obj.insert(QString("componentSeparator"), ::OpenAPI::toJsonValue(m_component_separator));
    }
    if (m_data_element_separator_isSet) {
        obj.insert(QString("dataElementSeparator"), ::OpenAPI::toJsonValue(m_data_element_separator));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_protocol_version_isSet) {
        obj.insert(QString("protocolVersion"), ::OpenAPI::toJsonValue(m_protocol_version));
    }
    if (m_replace_character_isSet) {
        obj.insert(QString("replaceCharacter"), ::OpenAPI::toJsonValue(m_replace_character));
    }
    if (m_replace_separators_in_payload_isSet) {
        obj.insert(QString("replaceSeparatorsInPayload"), ::OpenAPI::toJsonValue(m_replace_separators_in_payload));
    }
    if (m_segment_terminator_isSet) {
        obj.insert(QString("segmentTerminator"), ::OpenAPI::toJsonValue(m_segment_terminator));
    }
    if (m_segment_terminator_suffix.isSet()) {
        obj.insert(QString("segmentTerminatorSuffix"), ::OpenAPI::toJsonValue(m_segment_terminator_suffix));
    }
    if (m_target_namespace_isSet) {
        obj.insert(QString("targetNamespace"), ::OpenAPI::toJsonValue(m_target_namespace));
    }
    return obj;
}

qint32 OAIX12DelimiterOverrides::getComponentSeparator() const {
    return m_component_separator;
}
void OAIX12DelimiterOverrides::setComponentSeparator(const qint32 &component_separator) {
    m_component_separator = component_separator;
    m_component_separator_isSet = true;
}

bool OAIX12DelimiterOverrides::is_component_separator_Set() const{
    return m_component_separator_isSet;
}

bool OAIX12DelimiterOverrides::is_component_separator_Valid() const{
    return m_component_separator_isValid;
}

qint32 OAIX12DelimiterOverrides::getDataElementSeparator() const {
    return m_data_element_separator;
}
void OAIX12DelimiterOverrides::setDataElementSeparator(const qint32 &data_element_separator) {
    m_data_element_separator = data_element_separator;
    m_data_element_separator_isSet = true;
}

bool OAIX12DelimiterOverrides::is_data_element_separator_Set() const{
    return m_data_element_separator_isSet;
}

bool OAIX12DelimiterOverrides::is_data_element_separator_Valid() const{
    return m_data_element_separator_isValid;
}

QString OAIX12DelimiterOverrides::getMessageId() const {
    return m_message_id;
}
void OAIX12DelimiterOverrides::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIX12DelimiterOverrides::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIX12DelimiterOverrides::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIX12DelimiterOverrides::getProtocolVersion() const {
    return m_protocol_version;
}
void OAIX12DelimiterOverrides::setProtocolVersion(const QString &protocol_version) {
    m_protocol_version = protocol_version;
    m_protocol_version_isSet = true;
}

bool OAIX12DelimiterOverrides::is_protocol_version_Set() const{
    return m_protocol_version_isSet;
}

bool OAIX12DelimiterOverrides::is_protocol_version_Valid() const{
    return m_protocol_version_isValid;
}

qint32 OAIX12DelimiterOverrides::getReplaceCharacter() const {
    return m_replace_character;
}
void OAIX12DelimiterOverrides::setReplaceCharacter(const qint32 &replace_character) {
    m_replace_character = replace_character;
    m_replace_character_isSet = true;
}

bool OAIX12DelimiterOverrides::is_replace_character_Set() const{
    return m_replace_character_isSet;
}

bool OAIX12DelimiterOverrides::is_replace_character_Valid() const{
    return m_replace_character_isValid;
}

bool OAIX12DelimiterOverrides::isReplaceSeparatorsInPayload() const {
    return m_replace_separators_in_payload;
}
void OAIX12DelimiterOverrides::setReplaceSeparatorsInPayload(const bool &replace_separators_in_payload) {
    m_replace_separators_in_payload = replace_separators_in_payload;
    m_replace_separators_in_payload_isSet = true;
}

bool OAIX12DelimiterOverrides::is_replace_separators_in_payload_Set() const{
    return m_replace_separators_in_payload_isSet;
}

bool OAIX12DelimiterOverrides::is_replace_separators_in_payload_Valid() const{
    return m_replace_separators_in_payload_isValid;
}

qint32 OAIX12DelimiterOverrides::getSegmentTerminator() const {
    return m_segment_terminator;
}
void OAIX12DelimiterOverrides::setSegmentTerminator(const qint32 &segment_terminator) {
    m_segment_terminator = segment_terminator;
    m_segment_terminator_isSet = true;
}

bool OAIX12DelimiterOverrides::is_segment_terminator_Set() const{
    return m_segment_terminator_isSet;
}

bool OAIX12DelimiterOverrides::is_segment_terminator_Valid() const{
    return m_segment_terminator_isValid;
}

OAISegmentTerminatorSuffix OAIX12DelimiterOverrides::getSegmentTerminatorSuffix() const {
    return m_segment_terminator_suffix;
}
void OAIX12DelimiterOverrides::setSegmentTerminatorSuffix(const OAISegmentTerminatorSuffix &segment_terminator_suffix) {
    m_segment_terminator_suffix = segment_terminator_suffix;
    m_segment_terminator_suffix_isSet = true;
}

bool OAIX12DelimiterOverrides::is_segment_terminator_suffix_Set() const{
    return m_segment_terminator_suffix_isSet;
}

bool OAIX12DelimiterOverrides::is_segment_terminator_suffix_Valid() const{
    return m_segment_terminator_suffix_isValid;
}

QString OAIX12DelimiterOverrides::getTargetNamespace() const {
    return m_target_namespace;
}
void OAIX12DelimiterOverrides::setTargetNamespace(const QString &target_namespace) {
    m_target_namespace = target_namespace;
    m_target_namespace_isSet = true;
}

bool OAIX12DelimiterOverrides::is_target_namespace_Set() const{
    return m_target_namespace_isSet;
}

bool OAIX12DelimiterOverrides::is_target_namespace_Valid() const{
    return m_target_namespace_isValid;
}

bool OAIX12DelimiterOverrides::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_component_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_element_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_character_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_separators_in_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_terminator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_terminator_suffix.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIX12DelimiterOverrides::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
