/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIX12AcknowledgementSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIX12AcknowledgementSettings::OAIX12AcknowledgementSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIX12AcknowledgementSettings::OAIX12AcknowledgementSettings() {
    this->initializeModel();
}

OAIX12AcknowledgementSettings::~OAIX12AcknowledgementSettings() {}

void OAIX12AcknowledgementSettings::initializeModel() {

    m_acknowledgement_control_number_lower_bound_isSet = false;
    m_acknowledgement_control_number_lower_bound_isValid = false;

    m_acknowledgement_control_number_prefix_isSet = false;
    m_acknowledgement_control_number_prefix_isValid = false;

    m_acknowledgement_control_number_suffix_isSet = false;
    m_acknowledgement_control_number_suffix_isValid = false;

    m_acknowledgement_control_number_upper_bound_isSet = false;
    m_acknowledgement_control_number_upper_bound_isValid = false;

    m_batch_functional_acknowledgements_isSet = false;
    m_batch_functional_acknowledgements_isValid = false;

    m_batch_implementation_acknowledgements_isSet = false;
    m_batch_implementation_acknowledgements_isValid = false;

    m_batch_technical_acknowledgements_isSet = false;
    m_batch_technical_acknowledgements_isValid = false;

    m_functional_acknowledgement_version_isSet = false;
    m_functional_acknowledgement_version_isValid = false;

    m_implementation_acknowledgement_version_isSet = false;
    m_implementation_acknowledgement_version_isValid = false;

    m_need_functional_acknowledgement_isSet = false;
    m_need_functional_acknowledgement_isValid = false;

    m_need_implementation_acknowledgement_isSet = false;
    m_need_implementation_acknowledgement_isValid = false;

    m_need_loop_for_valid_messages_isSet = false;
    m_need_loop_for_valid_messages_isValid = false;

    m_need_technical_acknowledgement_isSet = false;
    m_need_technical_acknowledgement_isValid = false;

    m_rollover_acknowledgement_control_number_isSet = false;
    m_rollover_acknowledgement_control_number_isValid = false;

    m_send_synchronous_acknowledgement_isSet = false;
    m_send_synchronous_acknowledgement_isValid = false;
}

void OAIX12AcknowledgementSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIX12AcknowledgementSettings::fromJsonObject(QJsonObject json) {

    m_acknowledgement_control_number_lower_bound_isValid = ::OpenAPI::fromJsonValue(m_acknowledgement_control_number_lower_bound, json[QString("acknowledgementControlNumberLowerBound")]);
    m_acknowledgement_control_number_lower_bound_isSet = !json[QString("acknowledgementControlNumberLowerBound")].isNull() && m_acknowledgement_control_number_lower_bound_isValid;

    m_acknowledgement_control_number_prefix_isValid = ::OpenAPI::fromJsonValue(m_acknowledgement_control_number_prefix, json[QString("acknowledgementControlNumberPrefix")]);
    m_acknowledgement_control_number_prefix_isSet = !json[QString("acknowledgementControlNumberPrefix")].isNull() && m_acknowledgement_control_number_prefix_isValid;

    m_acknowledgement_control_number_suffix_isValid = ::OpenAPI::fromJsonValue(m_acknowledgement_control_number_suffix, json[QString("acknowledgementControlNumberSuffix")]);
    m_acknowledgement_control_number_suffix_isSet = !json[QString("acknowledgementControlNumberSuffix")].isNull() && m_acknowledgement_control_number_suffix_isValid;

    m_acknowledgement_control_number_upper_bound_isValid = ::OpenAPI::fromJsonValue(m_acknowledgement_control_number_upper_bound, json[QString("acknowledgementControlNumberUpperBound")]);
    m_acknowledgement_control_number_upper_bound_isSet = !json[QString("acknowledgementControlNumberUpperBound")].isNull() && m_acknowledgement_control_number_upper_bound_isValid;

    m_batch_functional_acknowledgements_isValid = ::OpenAPI::fromJsonValue(m_batch_functional_acknowledgements, json[QString("batchFunctionalAcknowledgements")]);
    m_batch_functional_acknowledgements_isSet = !json[QString("batchFunctionalAcknowledgements")].isNull() && m_batch_functional_acknowledgements_isValid;

    m_batch_implementation_acknowledgements_isValid = ::OpenAPI::fromJsonValue(m_batch_implementation_acknowledgements, json[QString("batchImplementationAcknowledgements")]);
    m_batch_implementation_acknowledgements_isSet = !json[QString("batchImplementationAcknowledgements")].isNull() && m_batch_implementation_acknowledgements_isValid;

    m_batch_technical_acknowledgements_isValid = ::OpenAPI::fromJsonValue(m_batch_technical_acknowledgements, json[QString("batchTechnicalAcknowledgements")]);
    m_batch_technical_acknowledgements_isSet = !json[QString("batchTechnicalAcknowledgements")].isNull() && m_batch_technical_acknowledgements_isValid;

    m_functional_acknowledgement_version_isValid = ::OpenAPI::fromJsonValue(m_functional_acknowledgement_version, json[QString("functionalAcknowledgementVersion")]);
    m_functional_acknowledgement_version_isSet = !json[QString("functionalAcknowledgementVersion")].isNull() && m_functional_acknowledgement_version_isValid;

    m_implementation_acknowledgement_version_isValid = ::OpenAPI::fromJsonValue(m_implementation_acknowledgement_version, json[QString("implementationAcknowledgementVersion")]);
    m_implementation_acknowledgement_version_isSet = !json[QString("implementationAcknowledgementVersion")].isNull() && m_implementation_acknowledgement_version_isValid;

    m_need_functional_acknowledgement_isValid = ::OpenAPI::fromJsonValue(m_need_functional_acknowledgement, json[QString("needFunctionalAcknowledgement")]);
    m_need_functional_acknowledgement_isSet = !json[QString("needFunctionalAcknowledgement")].isNull() && m_need_functional_acknowledgement_isValid;

    m_need_implementation_acknowledgement_isValid = ::OpenAPI::fromJsonValue(m_need_implementation_acknowledgement, json[QString("needImplementationAcknowledgement")]);
    m_need_implementation_acknowledgement_isSet = !json[QString("needImplementationAcknowledgement")].isNull() && m_need_implementation_acknowledgement_isValid;

    m_need_loop_for_valid_messages_isValid = ::OpenAPI::fromJsonValue(m_need_loop_for_valid_messages, json[QString("needLoopForValidMessages")]);
    m_need_loop_for_valid_messages_isSet = !json[QString("needLoopForValidMessages")].isNull() && m_need_loop_for_valid_messages_isValid;

    m_need_technical_acknowledgement_isValid = ::OpenAPI::fromJsonValue(m_need_technical_acknowledgement, json[QString("needTechnicalAcknowledgement")]);
    m_need_technical_acknowledgement_isSet = !json[QString("needTechnicalAcknowledgement")].isNull() && m_need_technical_acknowledgement_isValid;

    m_rollover_acknowledgement_control_number_isValid = ::OpenAPI::fromJsonValue(m_rollover_acknowledgement_control_number, json[QString("rolloverAcknowledgementControlNumber")]);
    m_rollover_acknowledgement_control_number_isSet = !json[QString("rolloverAcknowledgementControlNumber")].isNull() && m_rollover_acknowledgement_control_number_isValid;

    m_send_synchronous_acknowledgement_isValid = ::OpenAPI::fromJsonValue(m_send_synchronous_acknowledgement, json[QString("sendSynchronousAcknowledgement")]);
    m_send_synchronous_acknowledgement_isSet = !json[QString("sendSynchronousAcknowledgement")].isNull() && m_send_synchronous_acknowledgement_isValid;
}

QString OAIX12AcknowledgementSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIX12AcknowledgementSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_acknowledgement_control_number_lower_bound_isSet) {
        obj.insert(QString("acknowledgementControlNumberLowerBound"), ::OpenAPI::toJsonValue(m_acknowledgement_control_number_lower_bound));
    }
    if (m_acknowledgement_control_number_prefix_isSet) {
        obj.insert(QString("acknowledgementControlNumberPrefix"), ::OpenAPI::toJsonValue(m_acknowledgement_control_number_prefix));
    }
    if (m_acknowledgement_control_number_suffix_isSet) {
        obj.insert(QString("acknowledgementControlNumberSuffix"), ::OpenAPI::toJsonValue(m_acknowledgement_control_number_suffix));
    }
    if (m_acknowledgement_control_number_upper_bound_isSet) {
        obj.insert(QString("acknowledgementControlNumberUpperBound"), ::OpenAPI::toJsonValue(m_acknowledgement_control_number_upper_bound));
    }
    if (m_batch_functional_acknowledgements_isSet) {
        obj.insert(QString("batchFunctionalAcknowledgements"), ::OpenAPI::toJsonValue(m_batch_functional_acknowledgements));
    }
    if (m_batch_implementation_acknowledgements_isSet) {
        obj.insert(QString("batchImplementationAcknowledgements"), ::OpenAPI::toJsonValue(m_batch_implementation_acknowledgements));
    }
    if (m_batch_technical_acknowledgements_isSet) {
        obj.insert(QString("batchTechnicalAcknowledgements"), ::OpenAPI::toJsonValue(m_batch_technical_acknowledgements));
    }
    if (m_functional_acknowledgement_version_isSet) {
        obj.insert(QString("functionalAcknowledgementVersion"), ::OpenAPI::toJsonValue(m_functional_acknowledgement_version));
    }
    if (m_implementation_acknowledgement_version_isSet) {
        obj.insert(QString("implementationAcknowledgementVersion"), ::OpenAPI::toJsonValue(m_implementation_acknowledgement_version));
    }
    if (m_need_functional_acknowledgement_isSet) {
        obj.insert(QString("needFunctionalAcknowledgement"), ::OpenAPI::toJsonValue(m_need_functional_acknowledgement));
    }
    if (m_need_implementation_acknowledgement_isSet) {
        obj.insert(QString("needImplementationAcknowledgement"), ::OpenAPI::toJsonValue(m_need_implementation_acknowledgement));
    }
    if (m_need_loop_for_valid_messages_isSet) {
        obj.insert(QString("needLoopForValidMessages"), ::OpenAPI::toJsonValue(m_need_loop_for_valid_messages));
    }
    if (m_need_technical_acknowledgement_isSet) {
        obj.insert(QString("needTechnicalAcknowledgement"), ::OpenAPI::toJsonValue(m_need_technical_acknowledgement));
    }
    if (m_rollover_acknowledgement_control_number_isSet) {
        obj.insert(QString("rolloverAcknowledgementControlNumber"), ::OpenAPI::toJsonValue(m_rollover_acknowledgement_control_number));
    }
    if (m_send_synchronous_acknowledgement_isSet) {
        obj.insert(QString("sendSynchronousAcknowledgement"), ::OpenAPI::toJsonValue(m_send_synchronous_acknowledgement));
    }
    return obj;
}

qint32 OAIX12AcknowledgementSettings::getAcknowledgementControlNumberLowerBound() const {
    return m_acknowledgement_control_number_lower_bound;
}
void OAIX12AcknowledgementSettings::setAcknowledgementControlNumberLowerBound(const qint32 &acknowledgement_control_number_lower_bound) {
    m_acknowledgement_control_number_lower_bound = acknowledgement_control_number_lower_bound;
    m_acknowledgement_control_number_lower_bound_isSet = true;
}

bool OAIX12AcknowledgementSettings::is_acknowledgement_control_number_lower_bound_Set() const{
    return m_acknowledgement_control_number_lower_bound_isSet;
}

bool OAIX12AcknowledgementSettings::is_acknowledgement_control_number_lower_bound_Valid() const{
    return m_acknowledgement_control_number_lower_bound_isValid;
}

QString OAIX12AcknowledgementSettings::getAcknowledgementControlNumberPrefix() const {
    return m_acknowledgement_control_number_prefix;
}
void OAIX12AcknowledgementSettings::setAcknowledgementControlNumberPrefix(const QString &acknowledgement_control_number_prefix) {
    m_acknowledgement_control_number_prefix = acknowledgement_control_number_prefix;
    m_acknowledgement_control_number_prefix_isSet = true;
}

bool OAIX12AcknowledgementSettings::is_acknowledgement_control_number_prefix_Set() const{
    return m_acknowledgement_control_number_prefix_isSet;
}

bool OAIX12AcknowledgementSettings::is_acknowledgement_control_number_prefix_Valid() const{
    return m_acknowledgement_control_number_prefix_isValid;
}

QString OAIX12AcknowledgementSettings::getAcknowledgementControlNumberSuffix() const {
    return m_acknowledgement_control_number_suffix;
}
void OAIX12AcknowledgementSettings::setAcknowledgementControlNumberSuffix(const QString &acknowledgement_control_number_suffix) {
    m_acknowledgement_control_number_suffix = acknowledgement_control_number_suffix;
    m_acknowledgement_control_number_suffix_isSet = true;
}

bool OAIX12AcknowledgementSettings::is_acknowledgement_control_number_suffix_Set() const{
    return m_acknowledgement_control_number_suffix_isSet;
}

bool OAIX12AcknowledgementSettings::is_acknowledgement_control_number_suffix_Valid() const{
    return m_acknowledgement_control_number_suffix_isValid;
}

qint32 OAIX12AcknowledgementSettings::getAcknowledgementControlNumberUpperBound() const {
    return m_acknowledgement_control_number_upper_bound;
}
void OAIX12AcknowledgementSettings::setAcknowledgementControlNumberUpperBound(const qint32 &acknowledgement_control_number_upper_bound) {
    m_acknowledgement_control_number_upper_bound = acknowledgement_control_number_upper_bound;
    m_acknowledgement_control_number_upper_bound_isSet = true;
}

bool OAIX12AcknowledgementSettings::is_acknowledgement_control_number_upper_bound_Set() const{
    return m_acknowledgement_control_number_upper_bound_isSet;
}

bool OAIX12AcknowledgementSettings::is_acknowledgement_control_number_upper_bound_Valid() const{
    return m_acknowledgement_control_number_upper_bound_isValid;
}

bool OAIX12AcknowledgementSettings::isBatchFunctionalAcknowledgements() const {
    return m_batch_functional_acknowledgements;
}
void OAIX12AcknowledgementSettings::setBatchFunctionalAcknowledgements(const bool &batch_functional_acknowledgements) {
    m_batch_functional_acknowledgements = batch_functional_acknowledgements;
    m_batch_functional_acknowledgements_isSet = true;
}

bool OAIX12AcknowledgementSettings::is_batch_functional_acknowledgements_Set() const{
    return m_batch_functional_acknowledgements_isSet;
}

bool OAIX12AcknowledgementSettings::is_batch_functional_acknowledgements_Valid() const{
    return m_batch_functional_acknowledgements_isValid;
}

bool OAIX12AcknowledgementSettings::isBatchImplementationAcknowledgements() const {
    return m_batch_implementation_acknowledgements;
}
void OAIX12AcknowledgementSettings::setBatchImplementationAcknowledgements(const bool &batch_implementation_acknowledgements) {
    m_batch_implementation_acknowledgements = batch_implementation_acknowledgements;
    m_batch_implementation_acknowledgements_isSet = true;
}

bool OAIX12AcknowledgementSettings::is_batch_implementation_acknowledgements_Set() const{
    return m_batch_implementation_acknowledgements_isSet;
}

bool OAIX12AcknowledgementSettings::is_batch_implementation_acknowledgements_Valid() const{
    return m_batch_implementation_acknowledgements_isValid;
}

bool OAIX12AcknowledgementSettings::isBatchTechnicalAcknowledgements() const {
    return m_batch_technical_acknowledgements;
}
void OAIX12AcknowledgementSettings::setBatchTechnicalAcknowledgements(const bool &batch_technical_acknowledgements) {
    m_batch_technical_acknowledgements = batch_technical_acknowledgements;
    m_batch_technical_acknowledgements_isSet = true;
}

bool OAIX12AcknowledgementSettings::is_batch_technical_acknowledgements_Set() const{
    return m_batch_technical_acknowledgements_isSet;
}

bool OAIX12AcknowledgementSettings::is_batch_technical_acknowledgements_Valid() const{
    return m_batch_technical_acknowledgements_isValid;
}

QString OAIX12AcknowledgementSettings::getFunctionalAcknowledgementVersion() const {
    return m_functional_acknowledgement_version;
}
void OAIX12AcknowledgementSettings::setFunctionalAcknowledgementVersion(const QString &functional_acknowledgement_version) {
    m_functional_acknowledgement_version = functional_acknowledgement_version;
    m_functional_acknowledgement_version_isSet = true;
}

bool OAIX12AcknowledgementSettings::is_functional_acknowledgement_version_Set() const{
    return m_functional_acknowledgement_version_isSet;
}

bool OAIX12AcknowledgementSettings::is_functional_acknowledgement_version_Valid() const{
    return m_functional_acknowledgement_version_isValid;
}

QString OAIX12AcknowledgementSettings::getImplementationAcknowledgementVersion() const {
    return m_implementation_acknowledgement_version;
}
void OAIX12AcknowledgementSettings::setImplementationAcknowledgementVersion(const QString &implementation_acknowledgement_version) {
    m_implementation_acknowledgement_version = implementation_acknowledgement_version;
    m_implementation_acknowledgement_version_isSet = true;
}

bool OAIX12AcknowledgementSettings::is_implementation_acknowledgement_version_Set() const{
    return m_implementation_acknowledgement_version_isSet;
}

bool OAIX12AcknowledgementSettings::is_implementation_acknowledgement_version_Valid() const{
    return m_implementation_acknowledgement_version_isValid;
}

bool OAIX12AcknowledgementSettings::isNeedFunctionalAcknowledgement() const {
    return m_need_functional_acknowledgement;
}
void OAIX12AcknowledgementSettings::setNeedFunctionalAcknowledgement(const bool &need_functional_acknowledgement) {
    m_need_functional_acknowledgement = need_functional_acknowledgement;
    m_need_functional_acknowledgement_isSet = true;
}

bool OAIX12AcknowledgementSettings::is_need_functional_acknowledgement_Set() const{
    return m_need_functional_acknowledgement_isSet;
}

bool OAIX12AcknowledgementSettings::is_need_functional_acknowledgement_Valid() const{
    return m_need_functional_acknowledgement_isValid;
}

bool OAIX12AcknowledgementSettings::isNeedImplementationAcknowledgement() const {
    return m_need_implementation_acknowledgement;
}
void OAIX12AcknowledgementSettings::setNeedImplementationAcknowledgement(const bool &need_implementation_acknowledgement) {
    m_need_implementation_acknowledgement = need_implementation_acknowledgement;
    m_need_implementation_acknowledgement_isSet = true;
}

bool OAIX12AcknowledgementSettings::is_need_implementation_acknowledgement_Set() const{
    return m_need_implementation_acknowledgement_isSet;
}

bool OAIX12AcknowledgementSettings::is_need_implementation_acknowledgement_Valid() const{
    return m_need_implementation_acknowledgement_isValid;
}

bool OAIX12AcknowledgementSettings::isNeedLoopForValidMessages() const {
    return m_need_loop_for_valid_messages;
}
void OAIX12AcknowledgementSettings::setNeedLoopForValidMessages(const bool &need_loop_for_valid_messages) {
    m_need_loop_for_valid_messages = need_loop_for_valid_messages;
    m_need_loop_for_valid_messages_isSet = true;
}

bool OAIX12AcknowledgementSettings::is_need_loop_for_valid_messages_Set() const{
    return m_need_loop_for_valid_messages_isSet;
}

bool OAIX12AcknowledgementSettings::is_need_loop_for_valid_messages_Valid() const{
    return m_need_loop_for_valid_messages_isValid;
}

bool OAIX12AcknowledgementSettings::isNeedTechnicalAcknowledgement() const {
    return m_need_technical_acknowledgement;
}
void OAIX12AcknowledgementSettings::setNeedTechnicalAcknowledgement(const bool &need_technical_acknowledgement) {
    m_need_technical_acknowledgement = need_technical_acknowledgement;
    m_need_technical_acknowledgement_isSet = true;
}

bool OAIX12AcknowledgementSettings::is_need_technical_acknowledgement_Set() const{
    return m_need_technical_acknowledgement_isSet;
}

bool OAIX12AcknowledgementSettings::is_need_technical_acknowledgement_Valid() const{
    return m_need_technical_acknowledgement_isValid;
}

bool OAIX12AcknowledgementSettings::isRolloverAcknowledgementControlNumber() const {
    return m_rollover_acknowledgement_control_number;
}
void OAIX12AcknowledgementSettings::setRolloverAcknowledgementControlNumber(const bool &rollover_acknowledgement_control_number) {
    m_rollover_acknowledgement_control_number = rollover_acknowledgement_control_number;
    m_rollover_acknowledgement_control_number_isSet = true;
}

bool OAIX12AcknowledgementSettings::is_rollover_acknowledgement_control_number_Set() const{
    return m_rollover_acknowledgement_control_number_isSet;
}

bool OAIX12AcknowledgementSettings::is_rollover_acknowledgement_control_number_Valid() const{
    return m_rollover_acknowledgement_control_number_isValid;
}

bool OAIX12AcknowledgementSettings::isSendSynchronousAcknowledgement() const {
    return m_send_synchronous_acknowledgement;
}
void OAIX12AcknowledgementSettings::setSendSynchronousAcknowledgement(const bool &send_synchronous_acknowledgement) {
    m_send_synchronous_acknowledgement = send_synchronous_acknowledgement;
    m_send_synchronous_acknowledgement_isSet = true;
}

bool OAIX12AcknowledgementSettings::is_send_synchronous_acknowledgement_Set() const{
    return m_send_synchronous_acknowledgement_isSet;
}

bool OAIX12AcknowledgementSettings::is_send_synchronous_acknowledgement_Valid() const{
    return m_send_synchronous_acknowledgement_isValid;
}

bool OAIX12AcknowledgementSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acknowledgement_control_number_lower_bound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acknowledgement_control_number_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acknowledgement_control_number_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acknowledgement_control_number_upper_bound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_functional_acknowledgements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_implementation_acknowledgements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_technical_acknowledgements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_functional_acknowledgement_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_implementation_acknowledgement_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_need_functional_acknowledgement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_need_implementation_acknowledgement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_need_loop_for_valid_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_need_technical_acknowledgement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollover_acknowledgement_control_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_synchronous_acknowledgement_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIX12AcknowledgementSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
