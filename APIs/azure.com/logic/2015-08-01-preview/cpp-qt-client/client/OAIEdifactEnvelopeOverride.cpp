/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdifactEnvelopeOverride.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdifactEnvelopeOverride::OAIEdifactEnvelopeOverride(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdifactEnvelopeOverride::OAIEdifactEnvelopeOverride() {
    this->initializeModel();
}

OAIEdifactEnvelopeOverride::~OAIEdifactEnvelopeOverride() {}

void OAIEdifactEnvelopeOverride::initializeModel() {

    m_application_password_isSet = false;
    m_application_password_isValid = false;

    m_association_assigned_code_isSet = false;
    m_association_assigned_code_isValid = false;

    m_controlling_agency_code_isSet = false;
    m_controlling_agency_code_isValid = false;

    m_functional_group_id_isSet = false;
    m_functional_group_id_isValid = false;

    m_group_header_message_release_isSet = false;
    m_group_header_message_release_isValid = false;

    m_group_header_message_version_isSet = false;
    m_group_header_message_version_isValid = false;

    m_message_association_assigned_code_isSet = false;
    m_message_association_assigned_code_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_message_release_isSet = false;
    m_message_release_isValid = false;

    m_message_version_isSet = false;
    m_message_version_isValid = false;

    m_receiver_application_id_isSet = false;
    m_receiver_application_id_isValid = false;

    m_receiver_application_qualifier_isSet = false;
    m_receiver_application_qualifier_isValid = false;

    m_sender_application_id_isSet = false;
    m_sender_application_id_isValid = false;

    m_sender_application_qualifier_isSet = false;
    m_sender_application_qualifier_isValid = false;

    m_target_namespace_isSet = false;
    m_target_namespace_isValid = false;
}

void OAIEdifactEnvelopeOverride::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdifactEnvelopeOverride::fromJsonObject(QJsonObject json) {

    m_application_password_isValid = ::OpenAPI::fromJsonValue(m_application_password, json[QString("applicationPassword")]);
    m_application_password_isSet = !json[QString("applicationPassword")].isNull() && m_application_password_isValid;

    m_association_assigned_code_isValid = ::OpenAPI::fromJsonValue(m_association_assigned_code, json[QString("associationAssignedCode")]);
    m_association_assigned_code_isSet = !json[QString("associationAssignedCode")].isNull() && m_association_assigned_code_isValid;

    m_controlling_agency_code_isValid = ::OpenAPI::fromJsonValue(m_controlling_agency_code, json[QString("controllingAgencyCode")]);
    m_controlling_agency_code_isSet = !json[QString("controllingAgencyCode")].isNull() && m_controlling_agency_code_isValid;

    m_functional_group_id_isValid = ::OpenAPI::fromJsonValue(m_functional_group_id, json[QString("functionalGroupId")]);
    m_functional_group_id_isSet = !json[QString("functionalGroupId")].isNull() && m_functional_group_id_isValid;

    m_group_header_message_release_isValid = ::OpenAPI::fromJsonValue(m_group_header_message_release, json[QString("groupHeaderMessageRelease")]);
    m_group_header_message_release_isSet = !json[QString("groupHeaderMessageRelease")].isNull() && m_group_header_message_release_isValid;

    m_group_header_message_version_isValid = ::OpenAPI::fromJsonValue(m_group_header_message_version, json[QString("groupHeaderMessageVersion")]);
    m_group_header_message_version_isSet = !json[QString("groupHeaderMessageVersion")].isNull() && m_group_header_message_version_isValid;

    m_message_association_assigned_code_isValid = ::OpenAPI::fromJsonValue(m_message_association_assigned_code, json[QString("messageAssociationAssignedCode")]);
    m_message_association_assigned_code_isSet = !json[QString("messageAssociationAssignedCode")].isNull() && m_message_association_assigned_code_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_message_release_isValid = ::OpenAPI::fromJsonValue(m_message_release, json[QString("messageRelease")]);
    m_message_release_isSet = !json[QString("messageRelease")].isNull() && m_message_release_isValid;

    m_message_version_isValid = ::OpenAPI::fromJsonValue(m_message_version, json[QString("messageVersion")]);
    m_message_version_isSet = !json[QString("messageVersion")].isNull() && m_message_version_isValid;

    m_receiver_application_id_isValid = ::OpenAPI::fromJsonValue(m_receiver_application_id, json[QString("receiverApplicationId")]);
    m_receiver_application_id_isSet = !json[QString("receiverApplicationId")].isNull() && m_receiver_application_id_isValid;

    m_receiver_application_qualifier_isValid = ::OpenAPI::fromJsonValue(m_receiver_application_qualifier, json[QString("receiverApplicationQualifier")]);
    m_receiver_application_qualifier_isSet = !json[QString("receiverApplicationQualifier")].isNull() && m_receiver_application_qualifier_isValid;

    m_sender_application_id_isValid = ::OpenAPI::fromJsonValue(m_sender_application_id, json[QString("senderApplicationId")]);
    m_sender_application_id_isSet = !json[QString("senderApplicationId")].isNull() && m_sender_application_id_isValid;

    m_sender_application_qualifier_isValid = ::OpenAPI::fromJsonValue(m_sender_application_qualifier, json[QString("senderApplicationQualifier")]);
    m_sender_application_qualifier_isSet = !json[QString("senderApplicationQualifier")].isNull() && m_sender_application_qualifier_isValid;

    m_target_namespace_isValid = ::OpenAPI::fromJsonValue(m_target_namespace, json[QString("targetNamespace")]);
    m_target_namespace_isSet = !json[QString("targetNamespace")].isNull() && m_target_namespace_isValid;
}

QString OAIEdifactEnvelopeOverride::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdifactEnvelopeOverride::asJsonObject() const {
    QJsonObject obj;
    if (m_application_password_isSet) {
        obj.insert(QString("applicationPassword"), ::OpenAPI::toJsonValue(m_application_password));
    }
    if (m_association_assigned_code_isSet) {
        obj.insert(QString("associationAssignedCode"), ::OpenAPI::toJsonValue(m_association_assigned_code));
    }
    if (m_controlling_agency_code_isSet) {
        obj.insert(QString("controllingAgencyCode"), ::OpenAPI::toJsonValue(m_controlling_agency_code));
    }
    if (m_functional_group_id_isSet) {
        obj.insert(QString("functionalGroupId"), ::OpenAPI::toJsonValue(m_functional_group_id));
    }
    if (m_group_header_message_release_isSet) {
        obj.insert(QString("groupHeaderMessageRelease"), ::OpenAPI::toJsonValue(m_group_header_message_release));
    }
    if (m_group_header_message_version_isSet) {
        obj.insert(QString("groupHeaderMessageVersion"), ::OpenAPI::toJsonValue(m_group_header_message_version));
    }
    if (m_message_association_assigned_code_isSet) {
        obj.insert(QString("messageAssociationAssignedCode"), ::OpenAPI::toJsonValue(m_message_association_assigned_code));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_message_release_isSet) {
        obj.insert(QString("messageRelease"), ::OpenAPI::toJsonValue(m_message_release));
    }
    if (m_message_version_isSet) {
        obj.insert(QString("messageVersion"), ::OpenAPI::toJsonValue(m_message_version));
    }
    if (m_receiver_application_id_isSet) {
        obj.insert(QString("receiverApplicationId"), ::OpenAPI::toJsonValue(m_receiver_application_id));
    }
    if (m_receiver_application_qualifier_isSet) {
        obj.insert(QString("receiverApplicationQualifier"), ::OpenAPI::toJsonValue(m_receiver_application_qualifier));
    }
    if (m_sender_application_id_isSet) {
        obj.insert(QString("senderApplicationId"), ::OpenAPI::toJsonValue(m_sender_application_id));
    }
    if (m_sender_application_qualifier_isSet) {
        obj.insert(QString("senderApplicationQualifier"), ::OpenAPI::toJsonValue(m_sender_application_qualifier));
    }
    if (m_target_namespace_isSet) {
        obj.insert(QString("targetNamespace"), ::OpenAPI::toJsonValue(m_target_namespace));
    }
    return obj;
}

QString OAIEdifactEnvelopeOverride::getApplicationPassword() const {
    return m_application_password;
}
void OAIEdifactEnvelopeOverride::setApplicationPassword(const QString &application_password) {
    m_application_password = application_password;
    m_application_password_isSet = true;
}

bool OAIEdifactEnvelopeOverride::is_application_password_Set() const{
    return m_application_password_isSet;
}

bool OAIEdifactEnvelopeOverride::is_application_password_Valid() const{
    return m_application_password_isValid;
}

QString OAIEdifactEnvelopeOverride::getAssociationAssignedCode() const {
    return m_association_assigned_code;
}
void OAIEdifactEnvelopeOverride::setAssociationAssignedCode(const QString &association_assigned_code) {
    m_association_assigned_code = association_assigned_code;
    m_association_assigned_code_isSet = true;
}

bool OAIEdifactEnvelopeOverride::is_association_assigned_code_Set() const{
    return m_association_assigned_code_isSet;
}

bool OAIEdifactEnvelopeOverride::is_association_assigned_code_Valid() const{
    return m_association_assigned_code_isValid;
}

QString OAIEdifactEnvelopeOverride::getControllingAgencyCode() const {
    return m_controlling_agency_code;
}
void OAIEdifactEnvelopeOverride::setControllingAgencyCode(const QString &controlling_agency_code) {
    m_controlling_agency_code = controlling_agency_code;
    m_controlling_agency_code_isSet = true;
}

bool OAIEdifactEnvelopeOverride::is_controlling_agency_code_Set() const{
    return m_controlling_agency_code_isSet;
}

bool OAIEdifactEnvelopeOverride::is_controlling_agency_code_Valid() const{
    return m_controlling_agency_code_isValid;
}

QString OAIEdifactEnvelopeOverride::getFunctionalGroupId() const {
    return m_functional_group_id;
}
void OAIEdifactEnvelopeOverride::setFunctionalGroupId(const QString &functional_group_id) {
    m_functional_group_id = functional_group_id;
    m_functional_group_id_isSet = true;
}

bool OAIEdifactEnvelopeOverride::is_functional_group_id_Set() const{
    return m_functional_group_id_isSet;
}

bool OAIEdifactEnvelopeOverride::is_functional_group_id_Valid() const{
    return m_functional_group_id_isValid;
}

QString OAIEdifactEnvelopeOverride::getGroupHeaderMessageRelease() const {
    return m_group_header_message_release;
}
void OAIEdifactEnvelopeOverride::setGroupHeaderMessageRelease(const QString &group_header_message_release) {
    m_group_header_message_release = group_header_message_release;
    m_group_header_message_release_isSet = true;
}

bool OAIEdifactEnvelopeOverride::is_group_header_message_release_Set() const{
    return m_group_header_message_release_isSet;
}

bool OAIEdifactEnvelopeOverride::is_group_header_message_release_Valid() const{
    return m_group_header_message_release_isValid;
}

QString OAIEdifactEnvelopeOverride::getGroupHeaderMessageVersion() const {
    return m_group_header_message_version;
}
void OAIEdifactEnvelopeOverride::setGroupHeaderMessageVersion(const QString &group_header_message_version) {
    m_group_header_message_version = group_header_message_version;
    m_group_header_message_version_isSet = true;
}

bool OAIEdifactEnvelopeOverride::is_group_header_message_version_Set() const{
    return m_group_header_message_version_isSet;
}

bool OAIEdifactEnvelopeOverride::is_group_header_message_version_Valid() const{
    return m_group_header_message_version_isValid;
}

QString OAIEdifactEnvelopeOverride::getMessageAssociationAssignedCode() const {
    return m_message_association_assigned_code;
}
void OAIEdifactEnvelopeOverride::setMessageAssociationAssignedCode(const QString &message_association_assigned_code) {
    m_message_association_assigned_code = message_association_assigned_code;
    m_message_association_assigned_code_isSet = true;
}

bool OAIEdifactEnvelopeOverride::is_message_association_assigned_code_Set() const{
    return m_message_association_assigned_code_isSet;
}

bool OAIEdifactEnvelopeOverride::is_message_association_assigned_code_Valid() const{
    return m_message_association_assigned_code_isValid;
}

QString OAIEdifactEnvelopeOverride::getMessageId() const {
    return m_message_id;
}
void OAIEdifactEnvelopeOverride::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIEdifactEnvelopeOverride::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIEdifactEnvelopeOverride::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIEdifactEnvelopeOverride::getMessageRelease() const {
    return m_message_release;
}
void OAIEdifactEnvelopeOverride::setMessageRelease(const QString &message_release) {
    m_message_release = message_release;
    m_message_release_isSet = true;
}

bool OAIEdifactEnvelopeOverride::is_message_release_Set() const{
    return m_message_release_isSet;
}

bool OAIEdifactEnvelopeOverride::is_message_release_Valid() const{
    return m_message_release_isValid;
}

QString OAIEdifactEnvelopeOverride::getMessageVersion() const {
    return m_message_version;
}
void OAIEdifactEnvelopeOverride::setMessageVersion(const QString &message_version) {
    m_message_version = message_version;
    m_message_version_isSet = true;
}

bool OAIEdifactEnvelopeOverride::is_message_version_Set() const{
    return m_message_version_isSet;
}

bool OAIEdifactEnvelopeOverride::is_message_version_Valid() const{
    return m_message_version_isValid;
}

QString OAIEdifactEnvelopeOverride::getReceiverApplicationId() const {
    return m_receiver_application_id;
}
void OAIEdifactEnvelopeOverride::setReceiverApplicationId(const QString &receiver_application_id) {
    m_receiver_application_id = receiver_application_id;
    m_receiver_application_id_isSet = true;
}

bool OAIEdifactEnvelopeOverride::is_receiver_application_id_Set() const{
    return m_receiver_application_id_isSet;
}

bool OAIEdifactEnvelopeOverride::is_receiver_application_id_Valid() const{
    return m_receiver_application_id_isValid;
}

QString OAIEdifactEnvelopeOverride::getReceiverApplicationQualifier() const {
    return m_receiver_application_qualifier;
}
void OAIEdifactEnvelopeOverride::setReceiverApplicationQualifier(const QString &receiver_application_qualifier) {
    m_receiver_application_qualifier = receiver_application_qualifier;
    m_receiver_application_qualifier_isSet = true;
}

bool OAIEdifactEnvelopeOverride::is_receiver_application_qualifier_Set() const{
    return m_receiver_application_qualifier_isSet;
}

bool OAIEdifactEnvelopeOverride::is_receiver_application_qualifier_Valid() const{
    return m_receiver_application_qualifier_isValid;
}

QString OAIEdifactEnvelopeOverride::getSenderApplicationId() const {
    return m_sender_application_id;
}
void OAIEdifactEnvelopeOverride::setSenderApplicationId(const QString &sender_application_id) {
    m_sender_application_id = sender_application_id;
    m_sender_application_id_isSet = true;
}

bool OAIEdifactEnvelopeOverride::is_sender_application_id_Set() const{
    return m_sender_application_id_isSet;
}

bool OAIEdifactEnvelopeOverride::is_sender_application_id_Valid() const{
    return m_sender_application_id_isValid;
}

QString OAIEdifactEnvelopeOverride::getSenderApplicationQualifier() const {
    return m_sender_application_qualifier;
}
void OAIEdifactEnvelopeOverride::setSenderApplicationQualifier(const QString &sender_application_qualifier) {
    m_sender_application_qualifier = sender_application_qualifier;
    m_sender_application_qualifier_isSet = true;
}

bool OAIEdifactEnvelopeOverride::is_sender_application_qualifier_Set() const{
    return m_sender_application_qualifier_isSet;
}

bool OAIEdifactEnvelopeOverride::is_sender_application_qualifier_Valid() const{
    return m_sender_application_qualifier_isValid;
}

QString OAIEdifactEnvelopeOverride::getTargetNamespace() const {
    return m_target_namespace;
}
void OAIEdifactEnvelopeOverride::setTargetNamespace(const QString &target_namespace) {
    m_target_namespace = target_namespace;
    m_target_namespace_isSet = true;
}

bool OAIEdifactEnvelopeOverride::is_target_namespace_Set() const{
    return m_target_namespace_isSet;
}

bool OAIEdifactEnvelopeOverride::is_target_namespace_Valid() const{
    return m_target_namespace_isValid;
}

bool OAIEdifactEnvelopeOverride::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_association_assigned_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_controlling_agency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_functional_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_header_message_release_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_header_message_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_association_assigned_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_release_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_application_qualifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_application_qualifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdifactEnvelopeOverride::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
