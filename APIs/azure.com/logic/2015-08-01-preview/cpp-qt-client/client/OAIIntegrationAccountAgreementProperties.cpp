/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegrationAccountAgreementProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntegrationAccountAgreementProperties::OAIIntegrationAccountAgreementProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntegrationAccountAgreementProperties::OAIIntegrationAccountAgreementProperties() {
    this->initializeModel();
}

OAIIntegrationAccountAgreementProperties::~OAIIntegrationAccountAgreementProperties() {}

void OAIIntegrationAccountAgreementProperties::initializeModel() {

    m_agreement_type_isSet = false;
    m_agreement_type_isValid = false;

    m_changed_time_isSet = false;
    m_changed_time_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_guest_identity_isSet = false;
    m_guest_identity_isValid = false;

    m_guest_partner_isSet = false;
    m_guest_partner_isValid = false;

    m_host_identity_isSet = false;
    m_host_identity_isValid = false;

    m_host_partner_isSet = false;
    m_host_partner_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;
}

void OAIIntegrationAccountAgreementProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntegrationAccountAgreementProperties::fromJsonObject(QJsonObject json) {

    m_agreement_type_isValid = ::OpenAPI::fromJsonValue(m_agreement_type, json[QString("agreementType")]);
    m_agreement_type_isSet = !json[QString("agreementType")].isNull() && m_agreement_type_isValid;

    m_changed_time_isValid = ::OpenAPI::fromJsonValue(m_changed_time, json[QString("changedTime")]);
    m_changed_time_isSet = !json[QString("changedTime")].isNull() && m_changed_time_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_guest_identity_isValid = ::OpenAPI::fromJsonValue(m_guest_identity, json[QString("guestIdentity")]);
    m_guest_identity_isSet = !json[QString("guestIdentity")].isNull() && m_guest_identity_isValid;

    m_guest_partner_isValid = ::OpenAPI::fromJsonValue(m_guest_partner, json[QString("guestPartner")]);
    m_guest_partner_isSet = !json[QString("guestPartner")].isNull() && m_guest_partner_isValid;

    m_host_identity_isValid = ::OpenAPI::fromJsonValue(m_host_identity, json[QString("hostIdentity")]);
    m_host_identity_isSet = !json[QString("hostIdentity")].isNull() && m_host_identity_isValid;

    m_host_partner_isValid = ::OpenAPI::fromJsonValue(m_host_partner, json[QString("hostPartner")]);
    m_host_partner_isSet = !json[QString("hostPartner")].isNull() && m_host_partner_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;
}

QString OAIIntegrationAccountAgreementProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntegrationAccountAgreementProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_agreement_type.isSet()) {
        obj.insert(QString("agreementType"), ::OpenAPI::toJsonValue(m_agreement_type));
    }
    if (m_changed_time_isSet) {
        obj.insert(QString("changedTime"), ::OpenAPI::toJsonValue(m_changed_time));
    }
    if (m_content.isSet()) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_guest_identity.isSet()) {
        obj.insert(QString("guestIdentity"), ::OpenAPI::toJsonValue(m_guest_identity));
    }
    if (m_guest_partner_isSet) {
        obj.insert(QString("guestPartner"), ::OpenAPI::toJsonValue(m_guest_partner));
    }
    if (m_host_identity.isSet()) {
        obj.insert(QString("hostIdentity"), ::OpenAPI::toJsonValue(m_host_identity));
    }
    if (m_host_partner_isSet) {
        obj.insert(QString("hostPartner"), ::OpenAPI::toJsonValue(m_host_partner));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    return obj;
}

OAIAgreementType OAIIntegrationAccountAgreementProperties::getAgreementType() const {
    return m_agreement_type;
}
void OAIIntegrationAccountAgreementProperties::setAgreementType(const OAIAgreementType &agreement_type) {
    m_agreement_type = agreement_type;
    m_agreement_type_isSet = true;
}

bool OAIIntegrationAccountAgreementProperties::is_agreement_type_Set() const{
    return m_agreement_type_isSet;
}

bool OAIIntegrationAccountAgreementProperties::is_agreement_type_Valid() const{
    return m_agreement_type_isValid;
}

QDateTime OAIIntegrationAccountAgreementProperties::getChangedTime() const {
    return m_changed_time;
}
void OAIIntegrationAccountAgreementProperties::setChangedTime(const QDateTime &changed_time) {
    m_changed_time = changed_time;
    m_changed_time_isSet = true;
}

bool OAIIntegrationAccountAgreementProperties::is_changed_time_Set() const{
    return m_changed_time_isSet;
}

bool OAIIntegrationAccountAgreementProperties::is_changed_time_Valid() const{
    return m_changed_time_isValid;
}

OAIAgreementContent OAIIntegrationAccountAgreementProperties::getContent() const {
    return m_content;
}
void OAIIntegrationAccountAgreementProperties::setContent(const OAIAgreementContent &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIIntegrationAccountAgreementProperties::is_content_Set() const{
    return m_content_isSet;
}

bool OAIIntegrationAccountAgreementProperties::is_content_Valid() const{
    return m_content_isValid;
}

QDateTime OAIIntegrationAccountAgreementProperties::getCreatedTime() const {
    return m_created_time;
}
void OAIIntegrationAccountAgreementProperties::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIIntegrationAccountAgreementProperties::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIIntegrationAccountAgreementProperties::is_created_time_Valid() const{
    return m_created_time_isValid;
}

OAIBusinessIdentity OAIIntegrationAccountAgreementProperties::getGuestIdentity() const {
    return m_guest_identity;
}
void OAIIntegrationAccountAgreementProperties::setGuestIdentity(const OAIBusinessIdentity &guest_identity) {
    m_guest_identity = guest_identity;
    m_guest_identity_isSet = true;
}

bool OAIIntegrationAccountAgreementProperties::is_guest_identity_Set() const{
    return m_guest_identity_isSet;
}

bool OAIIntegrationAccountAgreementProperties::is_guest_identity_Valid() const{
    return m_guest_identity_isValid;
}

QString OAIIntegrationAccountAgreementProperties::getGuestPartner() const {
    return m_guest_partner;
}
void OAIIntegrationAccountAgreementProperties::setGuestPartner(const QString &guest_partner) {
    m_guest_partner = guest_partner;
    m_guest_partner_isSet = true;
}

bool OAIIntegrationAccountAgreementProperties::is_guest_partner_Set() const{
    return m_guest_partner_isSet;
}

bool OAIIntegrationAccountAgreementProperties::is_guest_partner_Valid() const{
    return m_guest_partner_isValid;
}

OAIBusinessIdentity OAIIntegrationAccountAgreementProperties::getHostIdentity() const {
    return m_host_identity;
}
void OAIIntegrationAccountAgreementProperties::setHostIdentity(const OAIBusinessIdentity &host_identity) {
    m_host_identity = host_identity;
    m_host_identity_isSet = true;
}

bool OAIIntegrationAccountAgreementProperties::is_host_identity_Set() const{
    return m_host_identity_isSet;
}

bool OAIIntegrationAccountAgreementProperties::is_host_identity_Valid() const{
    return m_host_identity_isValid;
}

QString OAIIntegrationAccountAgreementProperties::getHostPartner() const {
    return m_host_partner;
}
void OAIIntegrationAccountAgreementProperties::setHostPartner(const QString &host_partner) {
    m_host_partner = host_partner;
    m_host_partner_isSet = true;
}

bool OAIIntegrationAccountAgreementProperties::is_host_partner_Set() const{
    return m_host_partner_isSet;
}

bool OAIIntegrationAccountAgreementProperties::is_host_partner_Valid() const{
    return m_host_partner_isValid;
}

OAIObject OAIIntegrationAccountAgreementProperties::getMetadata() const {
    return m_metadata;
}
void OAIIntegrationAccountAgreementProperties::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIIntegrationAccountAgreementProperties::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIIntegrationAccountAgreementProperties::is_metadata_Valid() const{
    return m_metadata_isValid;
}

bool OAIIntegrationAccountAgreementProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agreement_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guest_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_guest_partner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_partner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntegrationAccountAgreementProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
