/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIntegrationAccountsApi_H
#define OAI_OAIIntegrationAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICallbackUrl.h"
#include "OAIIntegrationAccount.h"
#include "OAIIntegrationAccountListResult.h"
#include "OAIListCallbackUrlParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIntegrationAccountsApi : public QObject {
    Q_OBJECT

public:
    OAIIntegrationAccountsApi(const int timeOut = 0);
    ~OAIIntegrationAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  integration_account OAIIntegrationAccount [required]
    */
    virtual void integrationAccountsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &api_version, const OAIIntegrationAccount &integration_account);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void integrationAccountsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void integrationAccountsGet(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void integrationAccountsListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void integrationAccountsListBySubscription(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIListCallbackUrlParameters [required]
    */
    virtual void integrationAccountsListCallbackUrl(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &api_version, const OAIListCallbackUrlParameters &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  integration_account OAIIntegrationAccount [required]
    */
    virtual void integrationAccountsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &api_version, const OAIIntegrationAccount &integration_account);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void integrationAccountsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void integrationAccountsDeleteCallback(OAIHttpRequestWorker *worker);
    void integrationAccountsGetCallback(OAIHttpRequestWorker *worker);
    void integrationAccountsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void integrationAccountsListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void integrationAccountsListCallbackUrlCallback(OAIHttpRequestWorker *worker);
    void integrationAccountsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void integrationAccountsCreateOrUpdateSignal(OAIIntegrationAccount summary);
    void integrationAccountsDeleteSignal();
    void integrationAccountsGetSignal(OAIIntegrationAccount summary);
    void integrationAccountsListByResourceGroupSignal(OAIIntegrationAccountListResult summary);
    void integrationAccountsListBySubscriptionSignal(OAIIntegrationAccountListResult summary);
    void integrationAccountsListCallbackUrlSignal(OAICallbackUrl summary);
    void integrationAccountsUpdateSignal(OAIIntegrationAccount summary);


    void integrationAccountsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationAccount summary);
    void integrationAccountsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void integrationAccountsGetSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationAccount summary);
    void integrationAccountsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationAccountListResult summary);
    void integrationAccountsListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationAccountListResult summary);
    void integrationAccountsListCallbackUrlSignalFull(OAIHttpRequestWorker *worker, OAICallbackUrl summary);
    void integrationAccountsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationAccount summary);

    Q_DECL_DEPRECATED_X("Use integrationAccountsCreateOrUpdateSignalError() instead")
    void integrationAccountsCreateOrUpdateSignalE(OAIIntegrationAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountsCreateOrUpdateSignalError(OAIIntegrationAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountsDeleteSignalError() instead")
    void integrationAccountsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountsGetSignalError() instead")
    void integrationAccountsGetSignalE(OAIIntegrationAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountsGetSignalError(OAIIntegrationAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountsListByResourceGroupSignalError() instead")
    void integrationAccountsListByResourceGroupSignalE(OAIIntegrationAccountListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountsListByResourceGroupSignalError(OAIIntegrationAccountListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountsListBySubscriptionSignalError() instead")
    void integrationAccountsListBySubscriptionSignalE(OAIIntegrationAccountListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountsListBySubscriptionSignalError(OAIIntegrationAccountListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountsListCallbackUrlSignalError() instead")
    void integrationAccountsListCallbackUrlSignalE(OAICallbackUrl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountsListCallbackUrlSignalError(OAICallbackUrl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountsUpdateSignalError() instead")
    void integrationAccountsUpdateSignalE(OAIIntegrationAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountsUpdateSignalError(OAIIntegrationAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use integrationAccountsCreateOrUpdateSignalErrorFull() instead")
    void integrationAccountsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountsDeleteSignalErrorFull() instead")
    void integrationAccountsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountsGetSignalErrorFull() instead")
    void integrationAccountsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountsListByResourceGroupSignalErrorFull() instead")
    void integrationAccountsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountsListBySubscriptionSignalErrorFull() instead")
    void integrationAccountsListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountsListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountsListCallbackUrlSignalErrorFull() instead")
    void integrationAccountsListCallbackUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountsListCallbackUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountsUpdateSignalErrorFull() instead")
    void integrationAccountsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
