/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdifactValidationSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdifactValidationSettings::OAIEdifactValidationSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdifactValidationSettings::OAIEdifactValidationSettings() {
    this->initializeModel();
}

OAIEdifactValidationSettings::~OAIEdifactValidationSettings() {}

void OAIEdifactValidationSettings::initializeModel() {

    m_allow_leading_and_trailing_spaces_and_zeroes_isSet = false;
    m_allow_leading_and_trailing_spaces_and_zeroes_isValid = false;

    m_check_duplicate_group_control_number_isSet = false;
    m_check_duplicate_group_control_number_isValid = false;

    m_check_duplicate_interchange_control_number_isSet = false;
    m_check_duplicate_interchange_control_number_isValid = false;

    m_check_duplicate_transaction_set_control_number_isSet = false;
    m_check_duplicate_transaction_set_control_number_isValid = false;

    m_interchange_control_number_validity_days_isSet = false;
    m_interchange_control_number_validity_days_isValid = false;

    m_trailing_separator_policy_isSet = false;
    m_trailing_separator_policy_isValid = false;

    m_trim_leading_and_trailing_spaces_and_zeroes_isSet = false;
    m_trim_leading_and_trailing_spaces_and_zeroes_isValid = false;

    m_validate_character_set_isSet = false;
    m_validate_character_set_isValid = false;

    m_validate_edi_types_isSet = false;
    m_validate_edi_types_isValid = false;

    m_validate_xsd_types_isSet = false;
    m_validate_xsd_types_isValid = false;
}

void OAIEdifactValidationSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdifactValidationSettings::fromJsonObject(QJsonObject json) {

    m_allow_leading_and_trailing_spaces_and_zeroes_isValid = ::OpenAPI::fromJsonValue(m_allow_leading_and_trailing_spaces_and_zeroes, json[QString("allowLeadingAndTrailingSpacesAndZeroes")]);
    m_allow_leading_and_trailing_spaces_and_zeroes_isSet = !json[QString("allowLeadingAndTrailingSpacesAndZeroes")].isNull() && m_allow_leading_and_trailing_spaces_and_zeroes_isValid;

    m_check_duplicate_group_control_number_isValid = ::OpenAPI::fromJsonValue(m_check_duplicate_group_control_number, json[QString("checkDuplicateGroupControlNumber")]);
    m_check_duplicate_group_control_number_isSet = !json[QString("checkDuplicateGroupControlNumber")].isNull() && m_check_duplicate_group_control_number_isValid;

    m_check_duplicate_interchange_control_number_isValid = ::OpenAPI::fromJsonValue(m_check_duplicate_interchange_control_number, json[QString("checkDuplicateInterchangeControlNumber")]);
    m_check_duplicate_interchange_control_number_isSet = !json[QString("checkDuplicateInterchangeControlNumber")].isNull() && m_check_duplicate_interchange_control_number_isValid;

    m_check_duplicate_transaction_set_control_number_isValid = ::OpenAPI::fromJsonValue(m_check_duplicate_transaction_set_control_number, json[QString("checkDuplicateTransactionSetControlNumber")]);
    m_check_duplicate_transaction_set_control_number_isSet = !json[QString("checkDuplicateTransactionSetControlNumber")].isNull() && m_check_duplicate_transaction_set_control_number_isValid;

    m_interchange_control_number_validity_days_isValid = ::OpenAPI::fromJsonValue(m_interchange_control_number_validity_days, json[QString("interchangeControlNumberValidityDays")]);
    m_interchange_control_number_validity_days_isSet = !json[QString("interchangeControlNumberValidityDays")].isNull() && m_interchange_control_number_validity_days_isValid;

    m_trailing_separator_policy_isValid = ::OpenAPI::fromJsonValue(m_trailing_separator_policy, json[QString("trailingSeparatorPolicy")]);
    m_trailing_separator_policy_isSet = !json[QString("trailingSeparatorPolicy")].isNull() && m_trailing_separator_policy_isValid;

    m_trim_leading_and_trailing_spaces_and_zeroes_isValid = ::OpenAPI::fromJsonValue(m_trim_leading_and_trailing_spaces_and_zeroes, json[QString("trimLeadingAndTrailingSpacesAndZeroes")]);
    m_trim_leading_and_trailing_spaces_and_zeroes_isSet = !json[QString("trimLeadingAndTrailingSpacesAndZeroes")].isNull() && m_trim_leading_and_trailing_spaces_and_zeroes_isValid;

    m_validate_character_set_isValid = ::OpenAPI::fromJsonValue(m_validate_character_set, json[QString("validateCharacterSet")]);
    m_validate_character_set_isSet = !json[QString("validateCharacterSet")].isNull() && m_validate_character_set_isValid;

    m_validate_edi_types_isValid = ::OpenAPI::fromJsonValue(m_validate_edi_types, json[QString("validateEDITypes")]);
    m_validate_edi_types_isSet = !json[QString("validateEDITypes")].isNull() && m_validate_edi_types_isValid;

    m_validate_xsd_types_isValid = ::OpenAPI::fromJsonValue(m_validate_xsd_types, json[QString("validateXSDTypes")]);
    m_validate_xsd_types_isSet = !json[QString("validateXSDTypes")].isNull() && m_validate_xsd_types_isValid;
}

QString OAIEdifactValidationSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdifactValidationSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_leading_and_trailing_spaces_and_zeroes_isSet) {
        obj.insert(QString("allowLeadingAndTrailingSpacesAndZeroes"), ::OpenAPI::toJsonValue(m_allow_leading_and_trailing_spaces_and_zeroes));
    }
    if (m_check_duplicate_group_control_number_isSet) {
        obj.insert(QString("checkDuplicateGroupControlNumber"), ::OpenAPI::toJsonValue(m_check_duplicate_group_control_number));
    }
    if (m_check_duplicate_interchange_control_number_isSet) {
        obj.insert(QString("checkDuplicateInterchangeControlNumber"), ::OpenAPI::toJsonValue(m_check_duplicate_interchange_control_number));
    }
    if (m_check_duplicate_transaction_set_control_number_isSet) {
        obj.insert(QString("checkDuplicateTransactionSetControlNumber"), ::OpenAPI::toJsonValue(m_check_duplicate_transaction_set_control_number));
    }
    if (m_interchange_control_number_validity_days_isSet) {
        obj.insert(QString("interchangeControlNumberValidityDays"), ::OpenAPI::toJsonValue(m_interchange_control_number_validity_days));
    }
    if (m_trailing_separator_policy.isSet()) {
        obj.insert(QString("trailingSeparatorPolicy"), ::OpenAPI::toJsonValue(m_trailing_separator_policy));
    }
    if (m_trim_leading_and_trailing_spaces_and_zeroes_isSet) {
        obj.insert(QString("trimLeadingAndTrailingSpacesAndZeroes"), ::OpenAPI::toJsonValue(m_trim_leading_and_trailing_spaces_and_zeroes));
    }
    if (m_validate_character_set_isSet) {
        obj.insert(QString("validateCharacterSet"), ::OpenAPI::toJsonValue(m_validate_character_set));
    }
    if (m_validate_edi_types_isSet) {
        obj.insert(QString("validateEDITypes"), ::OpenAPI::toJsonValue(m_validate_edi_types));
    }
    if (m_validate_xsd_types_isSet) {
        obj.insert(QString("validateXSDTypes"), ::OpenAPI::toJsonValue(m_validate_xsd_types));
    }
    return obj;
}

bool OAIEdifactValidationSettings::isAllowLeadingAndTrailingSpacesAndZeroes() const {
    return m_allow_leading_and_trailing_spaces_and_zeroes;
}
void OAIEdifactValidationSettings::setAllowLeadingAndTrailingSpacesAndZeroes(const bool &allow_leading_and_trailing_spaces_and_zeroes) {
    m_allow_leading_and_trailing_spaces_and_zeroes = allow_leading_and_trailing_spaces_and_zeroes;
    m_allow_leading_and_trailing_spaces_and_zeroes_isSet = true;
}

bool OAIEdifactValidationSettings::is_allow_leading_and_trailing_spaces_and_zeroes_Set() const{
    return m_allow_leading_and_trailing_spaces_and_zeroes_isSet;
}

bool OAIEdifactValidationSettings::is_allow_leading_and_trailing_spaces_and_zeroes_Valid() const{
    return m_allow_leading_and_trailing_spaces_and_zeroes_isValid;
}

bool OAIEdifactValidationSettings::isCheckDuplicateGroupControlNumber() const {
    return m_check_duplicate_group_control_number;
}
void OAIEdifactValidationSettings::setCheckDuplicateGroupControlNumber(const bool &check_duplicate_group_control_number) {
    m_check_duplicate_group_control_number = check_duplicate_group_control_number;
    m_check_duplicate_group_control_number_isSet = true;
}

bool OAIEdifactValidationSettings::is_check_duplicate_group_control_number_Set() const{
    return m_check_duplicate_group_control_number_isSet;
}

bool OAIEdifactValidationSettings::is_check_duplicate_group_control_number_Valid() const{
    return m_check_duplicate_group_control_number_isValid;
}

bool OAIEdifactValidationSettings::isCheckDuplicateInterchangeControlNumber() const {
    return m_check_duplicate_interchange_control_number;
}
void OAIEdifactValidationSettings::setCheckDuplicateInterchangeControlNumber(const bool &check_duplicate_interchange_control_number) {
    m_check_duplicate_interchange_control_number = check_duplicate_interchange_control_number;
    m_check_duplicate_interchange_control_number_isSet = true;
}

bool OAIEdifactValidationSettings::is_check_duplicate_interchange_control_number_Set() const{
    return m_check_duplicate_interchange_control_number_isSet;
}

bool OAIEdifactValidationSettings::is_check_duplicate_interchange_control_number_Valid() const{
    return m_check_duplicate_interchange_control_number_isValid;
}

bool OAIEdifactValidationSettings::isCheckDuplicateTransactionSetControlNumber() const {
    return m_check_duplicate_transaction_set_control_number;
}
void OAIEdifactValidationSettings::setCheckDuplicateTransactionSetControlNumber(const bool &check_duplicate_transaction_set_control_number) {
    m_check_duplicate_transaction_set_control_number = check_duplicate_transaction_set_control_number;
    m_check_duplicate_transaction_set_control_number_isSet = true;
}

bool OAIEdifactValidationSettings::is_check_duplicate_transaction_set_control_number_Set() const{
    return m_check_duplicate_transaction_set_control_number_isSet;
}

bool OAIEdifactValidationSettings::is_check_duplicate_transaction_set_control_number_Valid() const{
    return m_check_duplicate_transaction_set_control_number_isValid;
}

qint32 OAIEdifactValidationSettings::getInterchangeControlNumberValidityDays() const {
    return m_interchange_control_number_validity_days;
}
void OAIEdifactValidationSettings::setInterchangeControlNumberValidityDays(const qint32 &interchange_control_number_validity_days) {
    m_interchange_control_number_validity_days = interchange_control_number_validity_days;
    m_interchange_control_number_validity_days_isSet = true;
}

bool OAIEdifactValidationSettings::is_interchange_control_number_validity_days_Set() const{
    return m_interchange_control_number_validity_days_isSet;
}

bool OAIEdifactValidationSettings::is_interchange_control_number_validity_days_Valid() const{
    return m_interchange_control_number_validity_days_isValid;
}

OAITrailingSeparatorPolicy OAIEdifactValidationSettings::getTrailingSeparatorPolicy() const {
    return m_trailing_separator_policy;
}
void OAIEdifactValidationSettings::setTrailingSeparatorPolicy(const OAITrailingSeparatorPolicy &trailing_separator_policy) {
    m_trailing_separator_policy = trailing_separator_policy;
    m_trailing_separator_policy_isSet = true;
}

bool OAIEdifactValidationSettings::is_trailing_separator_policy_Set() const{
    return m_trailing_separator_policy_isSet;
}

bool OAIEdifactValidationSettings::is_trailing_separator_policy_Valid() const{
    return m_trailing_separator_policy_isValid;
}

bool OAIEdifactValidationSettings::isTrimLeadingAndTrailingSpacesAndZeroes() const {
    return m_trim_leading_and_trailing_spaces_and_zeroes;
}
void OAIEdifactValidationSettings::setTrimLeadingAndTrailingSpacesAndZeroes(const bool &trim_leading_and_trailing_spaces_and_zeroes) {
    m_trim_leading_and_trailing_spaces_and_zeroes = trim_leading_and_trailing_spaces_and_zeroes;
    m_trim_leading_and_trailing_spaces_and_zeroes_isSet = true;
}

bool OAIEdifactValidationSettings::is_trim_leading_and_trailing_spaces_and_zeroes_Set() const{
    return m_trim_leading_and_trailing_spaces_and_zeroes_isSet;
}

bool OAIEdifactValidationSettings::is_trim_leading_and_trailing_spaces_and_zeroes_Valid() const{
    return m_trim_leading_and_trailing_spaces_and_zeroes_isValid;
}

bool OAIEdifactValidationSettings::isValidateCharacterSet() const {
    return m_validate_character_set;
}
void OAIEdifactValidationSettings::setValidateCharacterSet(const bool &validate_character_set) {
    m_validate_character_set = validate_character_set;
    m_validate_character_set_isSet = true;
}

bool OAIEdifactValidationSettings::is_validate_character_set_Set() const{
    return m_validate_character_set_isSet;
}

bool OAIEdifactValidationSettings::is_validate_character_set_Valid() const{
    return m_validate_character_set_isValid;
}

bool OAIEdifactValidationSettings::isValidateEdiTypes() const {
    return m_validate_edi_types;
}
void OAIEdifactValidationSettings::setValidateEdiTypes(const bool &validate_edi_types) {
    m_validate_edi_types = validate_edi_types;
    m_validate_edi_types_isSet = true;
}

bool OAIEdifactValidationSettings::is_validate_edi_types_Set() const{
    return m_validate_edi_types_isSet;
}

bool OAIEdifactValidationSettings::is_validate_edi_types_Valid() const{
    return m_validate_edi_types_isValid;
}

bool OAIEdifactValidationSettings::isValidateXsdTypes() const {
    return m_validate_xsd_types;
}
void OAIEdifactValidationSettings::setValidateXsdTypes(const bool &validate_xsd_types) {
    m_validate_xsd_types = validate_xsd_types;
    m_validate_xsd_types_isSet = true;
}

bool OAIEdifactValidationSettings::is_validate_xsd_types_Set() const{
    return m_validate_xsd_types_isSet;
}

bool OAIEdifactValidationSettings::is_validate_xsd_types_Valid() const{
    return m_validate_xsd_types_isValid;
}

bool OAIEdifactValidationSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_leading_and_trailing_spaces_and_zeroes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_duplicate_group_control_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_duplicate_interchange_control_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_duplicate_transaction_set_control_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interchange_control_number_validity_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trailing_separator_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trim_leading_and_trailing_spaces_and_zeroes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_character_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_edi_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_xsd_types_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdifactValidationSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
