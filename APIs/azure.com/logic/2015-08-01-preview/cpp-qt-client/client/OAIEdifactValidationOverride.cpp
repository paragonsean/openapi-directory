/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdifactValidationOverride.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdifactValidationOverride::OAIEdifactValidationOverride(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdifactValidationOverride::OAIEdifactValidationOverride() {
    this->initializeModel();
}

OAIEdifactValidationOverride::~OAIEdifactValidationOverride() {}

void OAIEdifactValidationOverride::initializeModel() {

    m_allow_leading_and_trailing_spaces_and_zeroes_isSet = false;
    m_allow_leading_and_trailing_spaces_and_zeroes_isValid = false;

    m_enforce_character_set_isSet = false;
    m_enforce_character_set_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_trailing_separator_policy_isSet = false;
    m_trailing_separator_policy_isValid = false;

    m_trim_leading_and_trailing_spaces_and_zeroes_isSet = false;
    m_trim_leading_and_trailing_spaces_and_zeroes_isValid = false;

    m_validate_edi_types_isSet = false;
    m_validate_edi_types_isValid = false;

    m_validate_xsd_types_isSet = false;
    m_validate_xsd_types_isValid = false;
}

void OAIEdifactValidationOverride::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdifactValidationOverride::fromJsonObject(QJsonObject json) {

    m_allow_leading_and_trailing_spaces_and_zeroes_isValid = ::OpenAPI::fromJsonValue(m_allow_leading_and_trailing_spaces_and_zeroes, json[QString("allowLeadingAndTrailingSpacesAndZeroes")]);
    m_allow_leading_and_trailing_spaces_and_zeroes_isSet = !json[QString("allowLeadingAndTrailingSpacesAndZeroes")].isNull() && m_allow_leading_and_trailing_spaces_and_zeroes_isValid;

    m_enforce_character_set_isValid = ::OpenAPI::fromJsonValue(m_enforce_character_set, json[QString("enforceCharacterSet")]);
    m_enforce_character_set_isSet = !json[QString("enforceCharacterSet")].isNull() && m_enforce_character_set_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_trailing_separator_policy_isValid = ::OpenAPI::fromJsonValue(m_trailing_separator_policy, json[QString("trailingSeparatorPolicy")]);
    m_trailing_separator_policy_isSet = !json[QString("trailingSeparatorPolicy")].isNull() && m_trailing_separator_policy_isValid;

    m_trim_leading_and_trailing_spaces_and_zeroes_isValid = ::OpenAPI::fromJsonValue(m_trim_leading_and_trailing_spaces_and_zeroes, json[QString("trimLeadingAndTrailingSpacesAndZeroes")]);
    m_trim_leading_and_trailing_spaces_and_zeroes_isSet = !json[QString("trimLeadingAndTrailingSpacesAndZeroes")].isNull() && m_trim_leading_and_trailing_spaces_and_zeroes_isValid;

    m_validate_edi_types_isValid = ::OpenAPI::fromJsonValue(m_validate_edi_types, json[QString("validateEDITypes")]);
    m_validate_edi_types_isSet = !json[QString("validateEDITypes")].isNull() && m_validate_edi_types_isValid;

    m_validate_xsd_types_isValid = ::OpenAPI::fromJsonValue(m_validate_xsd_types, json[QString("validateXSDTypes")]);
    m_validate_xsd_types_isSet = !json[QString("validateXSDTypes")].isNull() && m_validate_xsd_types_isValid;
}

QString OAIEdifactValidationOverride::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdifactValidationOverride::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_leading_and_trailing_spaces_and_zeroes_isSet) {
        obj.insert(QString("allowLeadingAndTrailingSpacesAndZeroes"), ::OpenAPI::toJsonValue(m_allow_leading_and_trailing_spaces_and_zeroes));
    }
    if (m_enforce_character_set_isSet) {
        obj.insert(QString("enforceCharacterSet"), ::OpenAPI::toJsonValue(m_enforce_character_set));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_trailing_separator_policy.isSet()) {
        obj.insert(QString("trailingSeparatorPolicy"), ::OpenAPI::toJsonValue(m_trailing_separator_policy));
    }
    if (m_trim_leading_and_trailing_spaces_and_zeroes_isSet) {
        obj.insert(QString("trimLeadingAndTrailingSpacesAndZeroes"), ::OpenAPI::toJsonValue(m_trim_leading_and_trailing_spaces_and_zeroes));
    }
    if (m_validate_edi_types_isSet) {
        obj.insert(QString("validateEDITypes"), ::OpenAPI::toJsonValue(m_validate_edi_types));
    }
    if (m_validate_xsd_types_isSet) {
        obj.insert(QString("validateXSDTypes"), ::OpenAPI::toJsonValue(m_validate_xsd_types));
    }
    return obj;
}

bool OAIEdifactValidationOverride::isAllowLeadingAndTrailingSpacesAndZeroes() const {
    return m_allow_leading_and_trailing_spaces_and_zeroes;
}
void OAIEdifactValidationOverride::setAllowLeadingAndTrailingSpacesAndZeroes(const bool &allow_leading_and_trailing_spaces_and_zeroes) {
    m_allow_leading_and_trailing_spaces_and_zeroes = allow_leading_and_trailing_spaces_and_zeroes;
    m_allow_leading_and_trailing_spaces_and_zeroes_isSet = true;
}

bool OAIEdifactValidationOverride::is_allow_leading_and_trailing_spaces_and_zeroes_Set() const{
    return m_allow_leading_and_trailing_spaces_and_zeroes_isSet;
}

bool OAIEdifactValidationOverride::is_allow_leading_and_trailing_spaces_and_zeroes_Valid() const{
    return m_allow_leading_and_trailing_spaces_and_zeroes_isValid;
}

bool OAIEdifactValidationOverride::isEnforceCharacterSet() const {
    return m_enforce_character_set;
}
void OAIEdifactValidationOverride::setEnforceCharacterSet(const bool &enforce_character_set) {
    m_enforce_character_set = enforce_character_set;
    m_enforce_character_set_isSet = true;
}

bool OAIEdifactValidationOverride::is_enforce_character_set_Set() const{
    return m_enforce_character_set_isSet;
}

bool OAIEdifactValidationOverride::is_enforce_character_set_Valid() const{
    return m_enforce_character_set_isValid;
}

QString OAIEdifactValidationOverride::getMessageId() const {
    return m_message_id;
}
void OAIEdifactValidationOverride::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIEdifactValidationOverride::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIEdifactValidationOverride::is_message_id_Valid() const{
    return m_message_id_isValid;
}

OAITrailingSeparatorPolicy OAIEdifactValidationOverride::getTrailingSeparatorPolicy() const {
    return m_trailing_separator_policy;
}
void OAIEdifactValidationOverride::setTrailingSeparatorPolicy(const OAITrailingSeparatorPolicy &trailing_separator_policy) {
    m_trailing_separator_policy = trailing_separator_policy;
    m_trailing_separator_policy_isSet = true;
}

bool OAIEdifactValidationOverride::is_trailing_separator_policy_Set() const{
    return m_trailing_separator_policy_isSet;
}

bool OAIEdifactValidationOverride::is_trailing_separator_policy_Valid() const{
    return m_trailing_separator_policy_isValid;
}

bool OAIEdifactValidationOverride::isTrimLeadingAndTrailingSpacesAndZeroes() const {
    return m_trim_leading_and_trailing_spaces_and_zeroes;
}
void OAIEdifactValidationOverride::setTrimLeadingAndTrailingSpacesAndZeroes(const bool &trim_leading_and_trailing_spaces_and_zeroes) {
    m_trim_leading_and_trailing_spaces_and_zeroes = trim_leading_and_trailing_spaces_and_zeroes;
    m_trim_leading_and_trailing_spaces_and_zeroes_isSet = true;
}

bool OAIEdifactValidationOverride::is_trim_leading_and_trailing_spaces_and_zeroes_Set() const{
    return m_trim_leading_and_trailing_spaces_and_zeroes_isSet;
}

bool OAIEdifactValidationOverride::is_trim_leading_and_trailing_spaces_and_zeroes_Valid() const{
    return m_trim_leading_and_trailing_spaces_and_zeroes_isValid;
}

bool OAIEdifactValidationOverride::isValidateEdiTypes() const {
    return m_validate_edi_types;
}
void OAIEdifactValidationOverride::setValidateEdiTypes(const bool &validate_edi_types) {
    m_validate_edi_types = validate_edi_types;
    m_validate_edi_types_isSet = true;
}

bool OAIEdifactValidationOverride::is_validate_edi_types_Set() const{
    return m_validate_edi_types_isSet;
}

bool OAIEdifactValidationOverride::is_validate_edi_types_Valid() const{
    return m_validate_edi_types_isValid;
}

bool OAIEdifactValidationOverride::isValidateXsdTypes() const {
    return m_validate_xsd_types;
}
void OAIEdifactValidationOverride::setValidateXsdTypes(const bool &validate_xsd_types) {
    m_validate_xsd_types = validate_xsd_types;
    m_validate_xsd_types_isSet = true;
}

bool OAIEdifactValidationOverride::is_validate_xsd_types_Set() const{
    return m_validate_xsd_types_isSet;
}

bool OAIEdifactValidationOverride::is_validate_xsd_types_Valid() const{
    return m_validate_xsd_types_isValid;
}

bool OAIEdifactValidationOverride::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_leading_and_trailing_spaces_and_zeroes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforce_character_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trailing_separator_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trim_leading_and_trailing_spaces_and_zeroes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_edi_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_xsd_types_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdifactValidationOverride::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
