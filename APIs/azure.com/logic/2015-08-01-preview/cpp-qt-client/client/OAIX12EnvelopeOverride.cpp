/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIX12EnvelopeOverride.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIX12EnvelopeOverride::OAIX12EnvelopeOverride(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIX12EnvelopeOverride::OAIX12EnvelopeOverride() {
    this->initializeModel();
}

OAIX12EnvelopeOverride::~OAIX12EnvelopeOverride() {}

void OAIX12EnvelopeOverride::initializeModel() {

    m_date_format_isSet = false;
    m_date_format_isValid = false;

    m_functional_identifier_code_isSet = false;
    m_functional_identifier_code_isValid = false;

    m_header_version_isSet = false;
    m_header_version_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_protocol_version_isSet = false;
    m_protocol_version_isValid = false;

    m_receiver_application_id_isSet = false;
    m_receiver_application_id_isValid = false;

    m_responsible_agency_code_isSet = false;
    m_responsible_agency_code_isValid = false;

    m_sender_application_id_isSet = false;
    m_sender_application_id_isValid = false;

    m_target_namespace_isSet = false;
    m_target_namespace_isValid = false;

    m_time_format_isSet = false;
    m_time_format_isValid = false;
}

void OAIX12EnvelopeOverride::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIX12EnvelopeOverride::fromJsonObject(QJsonObject json) {

    m_date_format_isValid = ::OpenAPI::fromJsonValue(m_date_format, json[QString("dateFormat")]);
    m_date_format_isSet = !json[QString("dateFormat")].isNull() && m_date_format_isValid;

    m_functional_identifier_code_isValid = ::OpenAPI::fromJsonValue(m_functional_identifier_code, json[QString("functionalIdentifierCode")]);
    m_functional_identifier_code_isSet = !json[QString("functionalIdentifierCode")].isNull() && m_functional_identifier_code_isValid;

    m_header_version_isValid = ::OpenAPI::fromJsonValue(m_header_version, json[QString("headerVersion")]);
    m_header_version_isSet = !json[QString("headerVersion")].isNull() && m_header_version_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_protocol_version_isValid = ::OpenAPI::fromJsonValue(m_protocol_version, json[QString("protocolVersion")]);
    m_protocol_version_isSet = !json[QString("protocolVersion")].isNull() && m_protocol_version_isValid;

    m_receiver_application_id_isValid = ::OpenAPI::fromJsonValue(m_receiver_application_id, json[QString("receiverApplicationId")]);
    m_receiver_application_id_isSet = !json[QString("receiverApplicationId")].isNull() && m_receiver_application_id_isValid;

    m_responsible_agency_code_isValid = ::OpenAPI::fromJsonValue(m_responsible_agency_code, json[QString("responsibleAgencyCode")]);
    m_responsible_agency_code_isSet = !json[QString("responsibleAgencyCode")].isNull() && m_responsible_agency_code_isValid;

    m_sender_application_id_isValid = ::OpenAPI::fromJsonValue(m_sender_application_id, json[QString("senderApplicationId")]);
    m_sender_application_id_isSet = !json[QString("senderApplicationId")].isNull() && m_sender_application_id_isValid;

    m_target_namespace_isValid = ::OpenAPI::fromJsonValue(m_target_namespace, json[QString("targetNamespace")]);
    m_target_namespace_isSet = !json[QString("targetNamespace")].isNull() && m_target_namespace_isValid;

    m_time_format_isValid = ::OpenAPI::fromJsonValue(m_time_format, json[QString("timeFormat")]);
    m_time_format_isSet = !json[QString("timeFormat")].isNull() && m_time_format_isValid;
}

QString OAIX12EnvelopeOverride::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIX12EnvelopeOverride::asJsonObject() const {
    QJsonObject obj;
    if (m_date_format.isSet()) {
        obj.insert(QString("dateFormat"), ::OpenAPI::toJsonValue(m_date_format));
    }
    if (m_functional_identifier_code_isSet) {
        obj.insert(QString("functionalIdentifierCode"), ::OpenAPI::toJsonValue(m_functional_identifier_code));
    }
    if (m_header_version_isSet) {
        obj.insert(QString("headerVersion"), ::OpenAPI::toJsonValue(m_header_version));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_protocol_version_isSet) {
        obj.insert(QString("protocolVersion"), ::OpenAPI::toJsonValue(m_protocol_version));
    }
    if (m_receiver_application_id_isSet) {
        obj.insert(QString("receiverApplicationId"), ::OpenAPI::toJsonValue(m_receiver_application_id));
    }
    if (m_responsible_agency_code_isSet) {
        obj.insert(QString("responsibleAgencyCode"), ::OpenAPI::toJsonValue(m_responsible_agency_code));
    }
    if (m_sender_application_id_isSet) {
        obj.insert(QString("senderApplicationId"), ::OpenAPI::toJsonValue(m_sender_application_id));
    }
    if (m_target_namespace_isSet) {
        obj.insert(QString("targetNamespace"), ::OpenAPI::toJsonValue(m_target_namespace));
    }
    if (m_time_format.isSet()) {
        obj.insert(QString("timeFormat"), ::OpenAPI::toJsonValue(m_time_format));
    }
    return obj;
}

OAIX12DateFormat OAIX12EnvelopeOverride::getDateFormat() const {
    return m_date_format;
}
void OAIX12EnvelopeOverride::setDateFormat(const OAIX12DateFormat &date_format) {
    m_date_format = date_format;
    m_date_format_isSet = true;
}

bool OAIX12EnvelopeOverride::is_date_format_Set() const{
    return m_date_format_isSet;
}

bool OAIX12EnvelopeOverride::is_date_format_Valid() const{
    return m_date_format_isValid;
}

QString OAIX12EnvelopeOverride::getFunctionalIdentifierCode() const {
    return m_functional_identifier_code;
}
void OAIX12EnvelopeOverride::setFunctionalIdentifierCode(const QString &functional_identifier_code) {
    m_functional_identifier_code = functional_identifier_code;
    m_functional_identifier_code_isSet = true;
}

bool OAIX12EnvelopeOverride::is_functional_identifier_code_Set() const{
    return m_functional_identifier_code_isSet;
}

bool OAIX12EnvelopeOverride::is_functional_identifier_code_Valid() const{
    return m_functional_identifier_code_isValid;
}

QString OAIX12EnvelopeOverride::getHeaderVersion() const {
    return m_header_version;
}
void OAIX12EnvelopeOverride::setHeaderVersion(const QString &header_version) {
    m_header_version = header_version;
    m_header_version_isSet = true;
}

bool OAIX12EnvelopeOverride::is_header_version_Set() const{
    return m_header_version_isSet;
}

bool OAIX12EnvelopeOverride::is_header_version_Valid() const{
    return m_header_version_isValid;
}

QString OAIX12EnvelopeOverride::getMessageId() const {
    return m_message_id;
}
void OAIX12EnvelopeOverride::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIX12EnvelopeOverride::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIX12EnvelopeOverride::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIX12EnvelopeOverride::getProtocolVersion() const {
    return m_protocol_version;
}
void OAIX12EnvelopeOverride::setProtocolVersion(const QString &protocol_version) {
    m_protocol_version = protocol_version;
    m_protocol_version_isSet = true;
}

bool OAIX12EnvelopeOverride::is_protocol_version_Set() const{
    return m_protocol_version_isSet;
}

bool OAIX12EnvelopeOverride::is_protocol_version_Valid() const{
    return m_protocol_version_isValid;
}

QString OAIX12EnvelopeOverride::getReceiverApplicationId() const {
    return m_receiver_application_id;
}
void OAIX12EnvelopeOverride::setReceiverApplicationId(const QString &receiver_application_id) {
    m_receiver_application_id = receiver_application_id;
    m_receiver_application_id_isSet = true;
}

bool OAIX12EnvelopeOverride::is_receiver_application_id_Set() const{
    return m_receiver_application_id_isSet;
}

bool OAIX12EnvelopeOverride::is_receiver_application_id_Valid() const{
    return m_receiver_application_id_isValid;
}

qint32 OAIX12EnvelopeOverride::getResponsibleAgencyCode() const {
    return m_responsible_agency_code;
}
void OAIX12EnvelopeOverride::setResponsibleAgencyCode(const qint32 &responsible_agency_code) {
    m_responsible_agency_code = responsible_agency_code;
    m_responsible_agency_code_isSet = true;
}

bool OAIX12EnvelopeOverride::is_responsible_agency_code_Set() const{
    return m_responsible_agency_code_isSet;
}

bool OAIX12EnvelopeOverride::is_responsible_agency_code_Valid() const{
    return m_responsible_agency_code_isValid;
}

QString OAIX12EnvelopeOverride::getSenderApplicationId() const {
    return m_sender_application_id;
}
void OAIX12EnvelopeOverride::setSenderApplicationId(const QString &sender_application_id) {
    m_sender_application_id = sender_application_id;
    m_sender_application_id_isSet = true;
}

bool OAIX12EnvelopeOverride::is_sender_application_id_Set() const{
    return m_sender_application_id_isSet;
}

bool OAIX12EnvelopeOverride::is_sender_application_id_Valid() const{
    return m_sender_application_id_isValid;
}

QString OAIX12EnvelopeOverride::getTargetNamespace() const {
    return m_target_namespace;
}
void OAIX12EnvelopeOverride::setTargetNamespace(const QString &target_namespace) {
    m_target_namespace = target_namespace;
    m_target_namespace_isSet = true;
}

bool OAIX12EnvelopeOverride::is_target_namespace_Set() const{
    return m_target_namespace_isSet;
}

bool OAIX12EnvelopeOverride::is_target_namespace_Valid() const{
    return m_target_namespace_isValid;
}

OAIX12TimeFormat OAIX12EnvelopeOverride::getTimeFormat() const {
    return m_time_format;
}
void OAIX12EnvelopeOverride::setTimeFormat(const OAIX12TimeFormat &time_format) {
    m_time_format = time_format;
    m_time_format_isSet = true;
}

bool OAIX12EnvelopeOverride::is_time_format_Set() const{
    return m_time_format_isSet;
}

bool OAIX12EnvelopeOverride::is_time_format_Valid() const{
    return m_time_format_isValid;
}

bool OAIX12EnvelopeOverride::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_functional_identifier_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_header_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_responsible_agency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_format.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIX12EnvelopeOverride::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
