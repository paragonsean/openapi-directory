/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAgreementContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAgreementContent::OAIAgreementContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAgreementContent::OAIAgreementContent() {
    this->initializeModel();
}

OAIAgreementContent::~OAIAgreementContent() {}

void OAIAgreementContent::initializeModel() {

    m_as2_isSet = false;
    m_as2_isValid = false;

    m_edifact_isSet = false;
    m_edifact_isValid = false;

    m_x12_isSet = false;
    m_x12_isValid = false;
}

void OAIAgreementContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAgreementContent::fromJsonObject(QJsonObject json) {

    m_as2_isValid = ::OpenAPI::fromJsonValue(m_as2, json[QString("AS2")]);
    m_as2_isSet = !json[QString("AS2")].isNull() && m_as2_isValid;

    m_edifact_isValid = ::OpenAPI::fromJsonValue(m_edifact, json[QString("Edifact")]);
    m_edifact_isSet = !json[QString("Edifact")].isNull() && m_edifact_isValid;

    m_x12_isValid = ::OpenAPI::fromJsonValue(m_x12, json[QString("X12")]);
    m_x12_isSet = !json[QString("X12")].isNull() && m_x12_isValid;
}

QString OAIAgreementContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAgreementContent::asJsonObject() const {
    QJsonObject obj;
    if (m_as2.isSet()) {
        obj.insert(QString("AS2"), ::OpenAPI::toJsonValue(m_as2));
    }
    if (m_edifact.isSet()) {
        obj.insert(QString("Edifact"), ::OpenAPI::toJsonValue(m_edifact));
    }
    if (m_x12.isSet()) {
        obj.insert(QString("X12"), ::OpenAPI::toJsonValue(m_x12));
    }
    return obj;
}

OAIAS2AgreementContent OAIAgreementContent::getAs2() const {
    return m_as2;
}
void OAIAgreementContent::setAs2(const OAIAS2AgreementContent &as2) {
    m_as2 = as2;
    m_as2_isSet = true;
}

bool OAIAgreementContent::is_as2_Set() const{
    return m_as2_isSet;
}

bool OAIAgreementContent::is_as2_Valid() const{
    return m_as2_isValid;
}

OAIEdifactAgreementContent OAIAgreementContent::getEdifact() const {
    return m_edifact;
}
void OAIAgreementContent::setEdifact(const OAIEdifactAgreementContent &edifact) {
    m_edifact = edifact;
    m_edifact_isSet = true;
}

bool OAIAgreementContent::is_edifact_Set() const{
    return m_edifact_isSet;
}

bool OAIAgreementContent::is_edifact_Valid() const{
    return m_edifact_isValid;
}

OAIX12AgreementContent OAIAgreementContent::getX12() const {
    return m_x12;
}
void OAIAgreementContent::setX12(const OAIX12AgreementContent &x12) {
    m_x12 = x12;
    m_x12_isSet = true;
}

bool OAIAgreementContent::is_x12_Set() const{
    return m_x12_isSet;
}

bool OAIAgreementContent::is_x12_Valid() const{
    return m_x12_isValid;
}

bool OAIAgreementContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_as2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_edifact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_x12.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAgreementContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
