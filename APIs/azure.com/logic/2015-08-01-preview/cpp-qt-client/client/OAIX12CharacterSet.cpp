/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-08-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIX12CharacterSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIX12CharacterSet::OAIX12CharacterSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIX12CharacterSet::OAIX12CharacterSet() {
    this->initializeModel();
}

OAIX12CharacterSet::~OAIX12CharacterSet() {}

void OAIX12CharacterSet::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIX12CharacterSet::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIX12CharacterSet::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NotSpecified", Qt::CaseInsensitive) == 0) {
        m_value = eOAIX12CharacterSet::NOTSPECIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Basic", Qt::CaseInsensitive) == 0) {
        m_value = eOAIX12CharacterSet::BASIC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Extended", Qt::CaseInsensitive) == 0) {
        m_value = eOAIX12CharacterSet::EXTENDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UTF8", Qt::CaseInsensitive) == 0) {
        m_value = eOAIX12CharacterSet::UTF8;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIX12CharacterSet::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIX12CharacterSet::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIX12CharacterSet::NOTSPECIFIED:
            val = "NotSpecified";
            break;
        case eOAIX12CharacterSet::BASIC:
            val = "Basic";
            break;
        case eOAIX12CharacterSet::EXTENDED:
            val = "Extended";
            break;
        case eOAIX12CharacterSet::UTF8:
            val = "UTF8";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIX12CharacterSet::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIX12CharacterSet::eOAIX12CharacterSet OAIX12CharacterSet::getValue() const {
    return m_value;
}

void OAIX12CharacterSet::setValue(const OAIX12CharacterSet::eOAIX12CharacterSet& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIX12CharacterSet::isSet() const {
    
    return m_value_isSet;
}

bool OAIX12CharacterSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
