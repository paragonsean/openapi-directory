# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.edifact_acknowledgement_settings import EdifactAcknowledgementSettings
from openapi_server.models.edifact_delimiter_override import EdifactDelimiterOverride
from openapi_server.models.edifact_envelope_override import EdifactEnvelopeOverride
from openapi_server.models.edifact_envelope_settings import EdifactEnvelopeSettings
from openapi_server.models.edifact_framing_settings import EdifactFramingSettings
from openapi_server.models.edifact_message_filter import EdifactMessageFilter
from openapi_server.models.edifact_message_identifier import EdifactMessageIdentifier
from openapi_server.models.edifact_processing_settings import EdifactProcessingSettings
from openapi_server.models.edifact_schema_reference import EdifactSchemaReference
from openapi_server.models.edifact_validation_override import EdifactValidationOverride
from openapi_server.models.edifact_validation_settings import EdifactValidationSettings
from openapi_server import util


class EdifactProtocolSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acknowledgement_settings: EdifactAcknowledgementSettings=None, edifact_delimiter_overrides: List[EdifactDelimiterOverride]=None, envelope_overrides: List[EdifactEnvelopeOverride]=None, envelope_settings: EdifactEnvelopeSettings=None, framing_settings: EdifactFramingSettings=None, message_filter: EdifactMessageFilter=None, message_filter_list: List[EdifactMessageIdentifier]=None, processing_settings: EdifactProcessingSettings=None, schema_references: List[EdifactSchemaReference]=None, validation_overrides: List[EdifactValidationOverride]=None, validation_settings: EdifactValidationSettings=None):
        """EdifactProtocolSettings - a model defined in OpenAPI

        :param acknowledgement_settings: The acknowledgement_settings of this EdifactProtocolSettings.
        :param edifact_delimiter_overrides: The edifact_delimiter_overrides of this EdifactProtocolSettings.
        :param envelope_overrides: The envelope_overrides of this EdifactProtocolSettings.
        :param envelope_settings: The envelope_settings of this EdifactProtocolSettings.
        :param framing_settings: The framing_settings of this EdifactProtocolSettings.
        :param message_filter: The message_filter of this EdifactProtocolSettings.
        :param message_filter_list: The message_filter_list of this EdifactProtocolSettings.
        :param processing_settings: The processing_settings of this EdifactProtocolSettings.
        :param schema_references: The schema_references of this EdifactProtocolSettings.
        :param validation_overrides: The validation_overrides of this EdifactProtocolSettings.
        :param validation_settings: The validation_settings of this EdifactProtocolSettings.
        """
        self.openapi_types = {
            'acknowledgement_settings': EdifactAcknowledgementSettings,
            'edifact_delimiter_overrides': List[EdifactDelimiterOverride],
            'envelope_overrides': List[EdifactEnvelopeOverride],
            'envelope_settings': EdifactEnvelopeSettings,
            'framing_settings': EdifactFramingSettings,
            'message_filter': EdifactMessageFilter,
            'message_filter_list': List[EdifactMessageIdentifier],
            'processing_settings': EdifactProcessingSettings,
            'schema_references': List[EdifactSchemaReference],
            'validation_overrides': List[EdifactValidationOverride],
            'validation_settings': EdifactValidationSettings
        }

        self.attribute_map = {
            'acknowledgement_settings': 'acknowledgementSettings',
            'edifact_delimiter_overrides': 'edifactDelimiterOverrides',
            'envelope_overrides': 'envelopeOverrides',
            'envelope_settings': 'envelopeSettings',
            'framing_settings': 'framingSettings',
            'message_filter': 'messageFilter',
            'message_filter_list': 'messageFilterList',
            'processing_settings': 'processingSettings',
            'schema_references': 'schemaReferences',
            'validation_overrides': 'validationOverrides',
            'validation_settings': 'validationSettings'
        }

        self._acknowledgement_settings = acknowledgement_settings
        self._edifact_delimiter_overrides = edifact_delimiter_overrides
        self._envelope_overrides = envelope_overrides
        self._envelope_settings = envelope_settings
        self._framing_settings = framing_settings
        self._message_filter = message_filter
        self._message_filter_list = message_filter_list
        self._processing_settings = processing_settings
        self._schema_references = schema_references
        self._validation_overrides = validation_overrides
        self._validation_settings = validation_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EdifactProtocolSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EdifactProtocolSettings of this EdifactProtocolSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acknowledgement_settings(self):
        """Gets the acknowledgement_settings of this EdifactProtocolSettings.


        :return: The acknowledgement_settings of this EdifactProtocolSettings.
        :rtype: EdifactAcknowledgementSettings
        """
        return self._acknowledgement_settings

    @acknowledgement_settings.setter
    def acknowledgement_settings(self, acknowledgement_settings):
        """Sets the acknowledgement_settings of this EdifactProtocolSettings.


        :param acknowledgement_settings: The acknowledgement_settings of this EdifactProtocolSettings.
        :type acknowledgement_settings: EdifactAcknowledgementSettings
        """

        self._acknowledgement_settings = acknowledgement_settings

    @property
    def edifact_delimiter_overrides(self):
        """Gets the edifact_delimiter_overrides of this EdifactProtocolSettings.

        The EDIFACT delimiter override settings.

        :return: The edifact_delimiter_overrides of this EdifactProtocolSettings.
        :rtype: List[EdifactDelimiterOverride]
        """
        return self._edifact_delimiter_overrides

    @edifact_delimiter_overrides.setter
    def edifact_delimiter_overrides(self, edifact_delimiter_overrides):
        """Sets the edifact_delimiter_overrides of this EdifactProtocolSettings.

        The EDIFACT delimiter override settings.

        :param edifact_delimiter_overrides: The edifact_delimiter_overrides of this EdifactProtocolSettings.
        :type edifact_delimiter_overrides: List[EdifactDelimiterOverride]
        """

        self._edifact_delimiter_overrides = edifact_delimiter_overrides

    @property
    def envelope_overrides(self):
        """Gets the envelope_overrides of this EdifactProtocolSettings.

        The EDIFACT envelope override settings.

        :return: The envelope_overrides of this EdifactProtocolSettings.
        :rtype: List[EdifactEnvelopeOverride]
        """
        return self._envelope_overrides

    @envelope_overrides.setter
    def envelope_overrides(self, envelope_overrides):
        """Sets the envelope_overrides of this EdifactProtocolSettings.

        The EDIFACT envelope override settings.

        :param envelope_overrides: The envelope_overrides of this EdifactProtocolSettings.
        :type envelope_overrides: List[EdifactEnvelopeOverride]
        """

        self._envelope_overrides = envelope_overrides

    @property
    def envelope_settings(self):
        """Gets the envelope_settings of this EdifactProtocolSettings.


        :return: The envelope_settings of this EdifactProtocolSettings.
        :rtype: EdifactEnvelopeSettings
        """
        return self._envelope_settings

    @envelope_settings.setter
    def envelope_settings(self, envelope_settings):
        """Sets the envelope_settings of this EdifactProtocolSettings.


        :param envelope_settings: The envelope_settings of this EdifactProtocolSettings.
        :type envelope_settings: EdifactEnvelopeSettings
        """

        self._envelope_settings = envelope_settings

    @property
    def framing_settings(self):
        """Gets the framing_settings of this EdifactProtocolSettings.


        :return: The framing_settings of this EdifactProtocolSettings.
        :rtype: EdifactFramingSettings
        """
        return self._framing_settings

    @framing_settings.setter
    def framing_settings(self, framing_settings):
        """Sets the framing_settings of this EdifactProtocolSettings.


        :param framing_settings: The framing_settings of this EdifactProtocolSettings.
        :type framing_settings: EdifactFramingSettings
        """

        self._framing_settings = framing_settings

    @property
    def message_filter(self):
        """Gets the message_filter of this EdifactProtocolSettings.


        :return: The message_filter of this EdifactProtocolSettings.
        :rtype: EdifactMessageFilter
        """
        return self._message_filter

    @message_filter.setter
    def message_filter(self, message_filter):
        """Sets the message_filter of this EdifactProtocolSettings.


        :param message_filter: The message_filter of this EdifactProtocolSettings.
        :type message_filter: EdifactMessageFilter
        """

        self._message_filter = message_filter

    @property
    def message_filter_list(self):
        """Gets the message_filter_list of this EdifactProtocolSettings.

        The EDIFACT message filter list.

        :return: The message_filter_list of this EdifactProtocolSettings.
        :rtype: List[EdifactMessageIdentifier]
        """
        return self._message_filter_list

    @message_filter_list.setter
    def message_filter_list(self, message_filter_list):
        """Sets the message_filter_list of this EdifactProtocolSettings.

        The EDIFACT message filter list.

        :param message_filter_list: The message_filter_list of this EdifactProtocolSettings.
        :type message_filter_list: List[EdifactMessageIdentifier]
        """

        self._message_filter_list = message_filter_list

    @property
    def processing_settings(self):
        """Gets the processing_settings of this EdifactProtocolSettings.


        :return: The processing_settings of this EdifactProtocolSettings.
        :rtype: EdifactProcessingSettings
        """
        return self._processing_settings

    @processing_settings.setter
    def processing_settings(self, processing_settings):
        """Sets the processing_settings of this EdifactProtocolSettings.


        :param processing_settings: The processing_settings of this EdifactProtocolSettings.
        :type processing_settings: EdifactProcessingSettings
        """

        self._processing_settings = processing_settings

    @property
    def schema_references(self):
        """Gets the schema_references of this EdifactProtocolSettings.

        The EDIFACT schema references.

        :return: The schema_references of this EdifactProtocolSettings.
        :rtype: List[EdifactSchemaReference]
        """
        return self._schema_references

    @schema_references.setter
    def schema_references(self, schema_references):
        """Sets the schema_references of this EdifactProtocolSettings.

        The EDIFACT schema references.

        :param schema_references: The schema_references of this EdifactProtocolSettings.
        :type schema_references: List[EdifactSchemaReference]
        """

        self._schema_references = schema_references

    @property
    def validation_overrides(self):
        """Gets the validation_overrides of this EdifactProtocolSettings.

        The EDIFACT validation override settings.

        :return: The validation_overrides of this EdifactProtocolSettings.
        :rtype: List[EdifactValidationOverride]
        """
        return self._validation_overrides

    @validation_overrides.setter
    def validation_overrides(self, validation_overrides):
        """Sets the validation_overrides of this EdifactProtocolSettings.

        The EDIFACT validation override settings.

        :param validation_overrides: The validation_overrides of this EdifactProtocolSettings.
        :type validation_overrides: List[EdifactValidationOverride]
        """

        self._validation_overrides = validation_overrides

    @property
    def validation_settings(self):
        """Gets the validation_settings of this EdifactProtocolSettings.


        :return: The validation_settings of this EdifactProtocolSettings.
        :rtype: EdifactValidationSettings
        """
        return self._validation_settings

    @validation_settings.setter
    def validation_settings(self, validation_settings):
        """Sets the validation_settings of this EdifactProtocolSettings.


        :param validation_settings: The validation_settings of this EdifactProtocolSettings.
        :type validation_settings: EdifactValidationSettings
        """

        self._validation_settings = validation_settings
