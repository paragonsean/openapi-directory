# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.x12_date_format import X12DateFormat
from openapi_server.models.x12_time_format import X12TimeFormat
from openapi_server import util


class X12EnvelopeOverride(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_format: X12DateFormat=None, functional_identifier_code: str=None, header_version: str=None, message_id: str=None, protocol_version: str=None, receiver_application_id: str=None, responsible_agency_code: int=None, sender_application_id: str=None, target_namespace: str=None, time_format: X12TimeFormat=None):
        """X12EnvelopeOverride - a model defined in OpenAPI

        :param date_format: The date_format of this X12EnvelopeOverride.
        :param functional_identifier_code: The functional_identifier_code of this X12EnvelopeOverride.
        :param header_version: The header_version of this X12EnvelopeOverride.
        :param message_id: The message_id of this X12EnvelopeOverride.
        :param protocol_version: The protocol_version of this X12EnvelopeOverride.
        :param receiver_application_id: The receiver_application_id of this X12EnvelopeOverride.
        :param responsible_agency_code: The responsible_agency_code of this X12EnvelopeOverride.
        :param sender_application_id: The sender_application_id of this X12EnvelopeOverride.
        :param target_namespace: The target_namespace of this X12EnvelopeOverride.
        :param time_format: The time_format of this X12EnvelopeOverride.
        """
        self.openapi_types = {
            'date_format': X12DateFormat,
            'functional_identifier_code': str,
            'header_version': str,
            'message_id': str,
            'protocol_version': str,
            'receiver_application_id': str,
            'responsible_agency_code': int,
            'sender_application_id': str,
            'target_namespace': str,
            'time_format': X12TimeFormat
        }

        self.attribute_map = {
            'date_format': 'dateFormat',
            'functional_identifier_code': 'functionalIdentifierCode',
            'header_version': 'headerVersion',
            'message_id': 'messageId',
            'protocol_version': 'protocolVersion',
            'receiver_application_id': 'receiverApplicationId',
            'responsible_agency_code': 'responsibleAgencyCode',
            'sender_application_id': 'senderApplicationId',
            'target_namespace': 'targetNamespace',
            'time_format': 'timeFormat'
        }

        self._date_format = date_format
        self._functional_identifier_code = functional_identifier_code
        self._header_version = header_version
        self._message_id = message_id
        self._protocol_version = protocol_version
        self._receiver_application_id = receiver_application_id
        self._responsible_agency_code = responsible_agency_code
        self._sender_application_id = sender_application_id
        self._target_namespace = target_namespace
        self._time_format = time_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'X12EnvelopeOverride':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The X12EnvelopeOverride of this X12EnvelopeOverride.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_format(self):
        """Gets the date_format of this X12EnvelopeOverride.


        :return: The date_format of this X12EnvelopeOverride.
        :rtype: X12DateFormat
        """
        return self._date_format

    @date_format.setter
    def date_format(self, date_format):
        """Sets the date_format of this X12EnvelopeOverride.


        :param date_format: The date_format of this X12EnvelopeOverride.
        :type date_format: X12DateFormat
        """

        self._date_format = date_format

    @property
    def functional_identifier_code(self):
        """Gets the functional_identifier_code of this X12EnvelopeOverride.

        The functional identifier code.

        :return: The functional_identifier_code of this X12EnvelopeOverride.
        :rtype: str
        """
        return self._functional_identifier_code

    @functional_identifier_code.setter
    def functional_identifier_code(self, functional_identifier_code):
        """Sets the functional_identifier_code of this X12EnvelopeOverride.

        The functional identifier code.

        :param functional_identifier_code: The functional_identifier_code of this X12EnvelopeOverride.
        :type functional_identifier_code: str
        """

        self._functional_identifier_code = functional_identifier_code

    @property
    def header_version(self):
        """Gets the header_version of this X12EnvelopeOverride.

        The header version.

        :return: The header_version of this X12EnvelopeOverride.
        :rtype: str
        """
        return self._header_version

    @header_version.setter
    def header_version(self, header_version):
        """Sets the header_version of this X12EnvelopeOverride.

        The header version.

        :param header_version: The header_version of this X12EnvelopeOverride.
        :type header_version: str
        """

        self._header_version = header_version

    @property
    def message_id(self):
        """Gets the message_id of this X12EnvelopeOverride.

        The message id on which this envelope settings has to be applied.

        :return: The message_id of this X12EnvelopeOverride.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this X12EnvelopeOverride.

        The message id on which this envelope settings has to be applied.

        :param message_id: The message_id of this X12EnvelopeOverride.
        :type message_id: str
        """

        self._message_id = message_id

    @property
    def protocol_version(self):
        """Gets the protocol_version of this X12EnvelopeOverride.

        The protocol version on which this envelope settings has to be applied.

        :return: The protocol_version of this X12EnvelopeOverride.
        :rtype: str
        """
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, protocol_version):
        """Sets the protocol_version of this X12EnvelopeOverride.

        The protocol version on which this envelope settings has to be applied.

        :param protocol_version: The protocol_version of this X12EnvelopeOverride.
        :type protocol_version: str
        """

        self._protocol_version = protocol_version

    @property
    def receiver_application_id(self):
        """Gets the receiver_application_id of this X12EnvelopeOverride.

        The receiver application id.

        :return: The receiver_application_id of this X12EnvelopeOverride.
        :rtype: str
        """
        return self._receiver_application_id

    @receiver_application_id.setter
    def receiver_application_id(self, receiver_application_id):
        """Sets the receiver_application_id of this X12EnvelopeOverride.

        The receiver application id.

        :param receiver_application_id: The receiver_application_id of this X12EnvelopeOverride.
        :type receiver_application_id: str
        """

        self._receiver_application_id = receiver_application_id

    @property
    def responsible_agency_code(self):
        """Gets the responsible_agency_code of this X12EnvelopeOverride.

        The responsible agency code.

        :return: The responsible_agency_code of this X12EnvelopeOverride.
        :rtype: int
        """
        return self._responsible_agency_code

    @responsible_agency_code.setter
    def responsible_agency_code(self, responsible_agency_code):
        """Sets the responsible_agency_code of this X12EnvelopeOverride.

        The responsible agency code.

        :param responsible_agency_code: The responsible_agency_code of this X12EnvelopeOverride.
        :type responsible_agency_code: int
        """

        self._responsible_agency_code = responsible_agency_code

    @property
    def sender_application_id(self):
        """Gets the sender_application_id of this X12EnvelopeOverride.

        The sender application id.

        :return: The sender_application_id of this X12EnvelopeOverride.
        :rtype: str
        """
        return self._sender_application_id

    @sender_application_id.setter
    def sender_application_id(self, sender_application_id):
        """Sets the sender_application_id of this X12EnvelopeOverride.

        The sender application id.

        :param sender_application_id: The sender_application_id of this X12EnvelopeOverride.
        :type sender_application_id: str
        """

        self._sender_application_id = sender_application_id

    @property
    def target_namespace(self):
        """Gets the target_namespace of this X12EnvelopeOverride.

        The target namespace on which this envelope settings has to be applied.

        :return: The target_namespace of this X12EnvelopeOverride.
        :rtype: str
        """
        return self._target_namespace

    @target_namespace.setter
    def target_namespace(self, target_namespace):
        """Sets the target_namespace of this X12EnvelopeOverride.

        The target namespace on which this envelope settings has to be applied.

        :param target_namespace: The target_namespace of this X12EnvelopeOverride.
        :type target_namespace: str
        """

        self._target_namespace = target_namespace

    @property
    def time_format(self):
        """Gets the time_format of this X12EnvelopeOverride.


        :return: The time_format of this X12EnvelopeOverride.
        :rtype: X12TimeFormat
        """
        return self._time_format

    @time_format.setter
    def time_format(self, time_format):
        """Sets the time_format of this X12EnvelopeOverride.


        :param time_format: The time_format of this X12EnvelopeOverride.
        :type time_format: X12TimeFormat
        """

        self._time_format = time_format
