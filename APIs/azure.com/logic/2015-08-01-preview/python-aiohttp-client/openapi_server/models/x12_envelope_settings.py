# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.usage_indicator import UsageIndicator
from openapi_server.models.x12_date_format import X12DateFormat
from openapi_server.models.x12_time_format import X12TimeFormat
from openapi_server import util


class X12EnvelopeSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, control_standards_id: int=None, control_version_number: str=None, enable_default_group_headers: bool=None, functional_group_id: str=None, group_control_number_lower_bound: int=None, group_control_number_upper_bound: int=None, group_header_agency_code: str=None, group_header_date_format: X12DateFormat=None, group_header_time_format: X12TimeFormat=None, group_header_version: str=None, interchange_control_number_lower_bound: int=None, interchange_control_number_upper_bound: int=None, overwrite_existing_transaction_set_control_number: bool=None, receiver_application_id: str=None, rollover_group_control_number: bool=None, rollover_interchange_control_number: bool=None, rollover_transaction_set_control_number: bool=None, sender_application_id: str=None, transaction_set_control_number_lower_bound: int=None, transaction_set_control_number_prefix: str=None, transaction_set_control_number_suffix: str=None, transaction_set_control_number_upper_bound: int=None, usage_indicator: UsageIndicator=None, use_control_standards_id_as_repetition_character: bool=None):
        """X12EnvelopeSettings - a model defined in OpenAPI

        :param control_standards_id: The control_standards_id of this X12EnvelopeSettings.
        :param control_version_number: The control_version_number of this X12EnvelopeSettings.
        :param enable_default_group_headers: The enable_default_group_headers of this X12EnvelopeSettings.
        :param functional_group_id: The functional_group_id of this X12EnvelopeSettings.
        :param group_control_number_lower_bound: The group_control_number_lower_bound of this X12EnvelopeSettings.
        :param group_control_number_upper_bound: The group_control_number_upper_bound of this X12EnvelopeSettings.
        :param group_header_agency_code: The group_header_agency_code of this X12EnvelopeSettings.
        :param group_header_date_format: The group_header_date_format of this X12EnvelopeSettings.
        :param group_header_time_format: The group_header_time_format of this X12EnvelopeSettings.
        :param group_header_version: The group_header_version of this X12EnvelopeSettings.
        :param interchange_control_number_lower_bound: The interchange_control_number_lower_bound of this X12EnvelopeSettings.
        :param interchange_control_number_upper_bound: The interchange_control_number_upper_bound of this X12EnvelopeSettings.
        :param overwrite_existing_transaction_set_control_number: The overwrite_existing_transaction_set_control_number of this X12EnvelopeSettings.
        :param receiver_application_id: The receiver_application_id of this X12EnvelopeSettings.
        :param rollover_group_control_number: The rollover_group_control_number of this X12EnvelopeSettings.
        :param rollover_interchange_control_number: The rollover_interchange_control_number of this X12EnvelopeSettings.
        :param rollover_transaction_set_control_number: The rollover_transaction_set_control_number of this X12EnvelopeSettings.
        :param sender_application_id: The sender_application_id of this X12EnvelopeSettings.
        :param transaction_set_control_number_lower_bound: The transaction_set_control_number_lower_bound of this X12EnvelopeSettings.
        :param transaction_set_control_number_prefix: The transaction_set_control_number_prefix of this X12EnvelopeSettings.
        :param transaction_set_control_number_suffix: The transaction_set_control_number_suffix of this X12EnvelopeSettings.
        :param transaction_set_control_number_upper_bound: The transaction_set_control_number_upper_bound of this X12EnvelopeSettings.
        :param usage_indicator: The usage_indicator of this X12EnvelopeSettings.
        :param use_control_standards_id_as_repetition_character: The use_control_standards_id_as_repetition_character of this X12EnvelopeSettings.
        """
        self.openapi_types = {
            'control_standards_id': int,
            'control_version_number': str,
            'enable_default_group_headers': bool,
            'functional_group_id': str,
            'group_control_number_lower_bound': int,
            'group_control_number_upper_bound': int,
            'group_header_agency_code': str,
            'group_header_date_format': X12DateFormat,
            'group_header_time_format': X12TimeFormat,
            'group_header_version': str,
            'interchange_control_number_lower_bound': int,
            'interchange_control_number_upper_bound': int,
            'overwrite_existing_transaction_set_control_number': bool,
            'receiver_application_id': str,
            'rollover_group_control_number': bool,
            'rollover_interchange_control_number': bool,
            'rollover_transaction_set_control_number': bool,
            'sender_application_id': str,
            'transaction_set_control_number_lower_bound': int,
            'transaction_set_control_number_prefix': str,
            'transaction_set_control_number_suffix': str,
            'transaction_set_control_number_upper_bound': int,
            'usage_indicator': UsageIndicator,
            'use_control_standards_id_as_repetition_character': bool
        }

        self.attribute_map = {
            'control_standards_id': 'controlStandardsId',
            'control_version_number': 'controlVersionNumber',
            'enable_default_group_headers': 'enableDefaultGroupHeaders',
            'functional_group_id': 'functionalGroupId',
            'group_control_number_lower_bound': 'groupControlNumberLowerBound',
            'group_control_number_upper_bound': 'groupControlNumberUpperBound',
            'group_header_agency_code': 'groupHeaderAgencyCode',
            'group_header_date_format': 'groupHeaderDateFormat',
            'group_header_time_format': 'groupHeaderTimeFormat',
            'group_header_version': 'groupHeaderVersion',
            'interchange_control_number_lower_bound': 'interchangeControlNumberLowerBound',
            'interchange_control_number_upper_bound': 'interchangeControlNumberUpperBound',
            'overwrite_existing_transaction_set_control_number': 'overwriteExistingTransactionSetControlNumber',
            'receiver_application_id': 'receiverApplicationId',
            'rollover_group_control_number': 'rolloverGroupControlNumber',
            'rollover_interchange_control_number': 'rolloverInterchangeControlNumber',
            'rollover_transaction_set_control_number': 'rolloverTransactionSetControlNumber',
            'sender_application_id': 'senderApplicationId',
            'transaction_set_control_number_lower_bound': 'transactionSetControlNumberLowerBound',
            'transaction_set_control_number_prefix': 'transactionSetControlNumberPrefix',
            'transaction_set_control_number_suffix': 'transactionSetControlNumberSuffix',
            'transaction_set_control_number_upper_bound': 'transactionSetControlNumberUpperBound',
            'usage_indicator': 'usageIndicator',
            'use_control_standards_id_as_repetition_character': 'useControlStandardsIdAsRepetitionCharacter'
        }

        self._control_standards_id = control_standards_id
        self._control_version_number = control_version_number
        self._enable_default_group_headers = enable_default_group_headers
        self._functional_group_id = functional_group_id
        self._group_control_number_lower_bound = group_control_number_lower_bound
        self._group_control_number_upper_bound = group_control_number_upper_bound
        self._group_header_agency_code = group_header_agency_code
        self._group_header_date_format = group_header_date_format
        self._group_header_time_format = group_header_time_format
        self._group_header_version = group_header_version
        self._interchange_control_number_lower_bound = interchange_control_number_lower_bound
        self._interchange_control_number_upper_bound = interchange_control_number_upper_bound
        self._overwrite_existing_transaction_set_control_number = overwrite_existing_transaction_set_control_number
        self._receiver_application_id = receiver_application_id
        self._rollover_group_control_number = rollover_group_control_number
        self._rollover_interchange_control_number = rollover_interchange_control_number
        self._rollover_transaction_set_control_number = rollover_transaction_set_control_number
        self._sender_application_id = sender_application_id
        self._transaction_set_control_number_lower_bound = transaction_set_control_number_lower_bound
        self._transaction_set_control_number_prefix = transaction_set_control_number_prefix
        self._transaction_set_control_number_suffix = transaction_set_control_number_suffix
        self._transaction_set_control_number_upper_bound = transaction_set_control_number_upper_bound
        self._usage_indicator = usage_indicator
        self._use_control_standards_id_as_repetition_character = use_control_standards_id_as_repetition_character

    @classmethod
    def from_dict(cls, dikt: dict) -> 'X12EnvelopeSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The X12EnvelopeSettings of this X12EnvelopeSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def control_standards_id(self):
        """Gets the control_standards_id of this X12EnvelopeSettings.

        The controls standards id.

        :return: The control_standards_id of this X12EnvelopeSettings.
        :rtype: int
        """
        return self._control_standards_id

    @control_standards_id.setter
    def control_standards_id(self, control_standards_id):
        """Sets the control_standards_id of this X12EnvelopeSettings.

        The controls standards id.

        :param control_standards_id: The control_standards_id of this X12EnvelopeSettings.
        :type control_standards_id: int
        """

        self._control_standards_id = control_standards_id

    @property
    def control_version_number(self):
        """Gets the control_version_number of this X12EnvelopeSettings.

        The control version number.

        :return: The control_version_number of this X12EnvelopeSettings.
        :rtype: str
        """
        return self._control_version_number

    @control_version_number.setter
    def control_version_number(self, control_version_number):
        """Sets the control_version_number of this X12EnvelopeSettings.

        The control version number.

        :param control_version_number: The control_version_number of this X12EnvelopeSettings.
        :type control_version_number: str
        """

        self._control_version_number = control_version_number

    @property
    def enable_default_group_headers(self):
        """Gets the enable_default_group_headers of this X12EnvelopeSettings.

        The value indicating whether to enable default group headers.

        :return: The enable_default_group_headers of this X12EnvelopeSettings.
        :rtype: bool
        """
        return self._enable_default_group_headers

    @enable_default_group_headers.setter
    def enable_default_group_headers(self, enable_default_group_headers):
        """Sets the enable_default_group_headers of this X12EnvelopeSettings.

        The value indicating whether to enable default group headers.

        :param enable_default_group_headers: The enable_default_group_headers of this X12EnvelopeSettings.
        :type enable_default_group_headers: bool
        """

        self._enable_default_group_headers = enable_default_group_headers

    @property
    def functional_group_id(self):
        """Gets the functional_group_id of this X12EnvelopeSettings.

        The functional group id.

        :return: The functional_group_id of this X12EnvelopeSettings.
        :rtype: str
        """
        return self._functional_group_id

    @functional_group_id.setter
    def functional_group_id(self, functional_group_id):
        """Sets the functional_group_id of this X12EnvelopeSettings.

        The functional group id.

        :param functional_group_id: The functional_group_id of this X12EnvelopeSettings.
        :type functional_group_id: str
        """

        self._functional_group_id = functional_group_id

    @property
    def group_control_number_lower_bound(self):
        """Gets the group_control_number_lower_bound of this X12EnvelopeSettings.

        The group control number lower bound.

        :return: The group_control_number_lower_bound of this X12EnvelopeSettings.
        :rtype: int
        """
        return self._group_control_number_lower_bound

    @group_control_number_lower_bound.setter
    def group_control_number_lower_bound(self, group_control_number_lower_bound):
        """Sets the group_control_number_lower_bound of this X12EnvelopeSettings.

        The group control number lower bound.

        :param group_control_number_lower_bound: The group_control_number_lower_bound of this X12EnvelopeSettings.
        :type group_control_number_lower_bound: int
        """

        self._group_control_number_lower_bound = group_control_number_lower_bound

    @property
    def group_control_number_upper_bound(self):
        """Gets the group_control_number_upper_bound of this X12EnvelopeSettings.

        The group control number upper bound.

        :return: The group_control_number_upper_bound of this X12EnvelopeSettings.
        :rtype: int
        """
        return self._group_control_number_upper_bound

    @group_control_number_upper_bound.setter
    def group_control_number_upper_bound(self, group_control_number_upper_bound):
        """Sets the group_control_number_upper_bound of this X12EnvelopeSettings.

        The group control number upper bound.

        :param group_control_number_upper_bound: The group_control_number_upper_bound of this X12EnvelopeSettings.
        :type group_control_number_upper_bound: int
        """

        self._group_control_number_upper_bound = group_control_number_upper_bound

    @property
    def group_header_agency_code(self):
        """Gets the group_header_agency_code of this X12EnvelopeSettings.

        The group header agency code.

        :return: The group_header_agency_code of this X12EnvelopeSettings.
        :rtype: str
        """
        return self._group_header_agency_code

    @group_header_agency_code.setter
    def group_header_agency_code(self, group_header_agency_code):
        """Sets the group_header_agency_code of this X12EnvelopeSettings.

        The group header agency code.

        :param group_header_agency_code: The group_header_agency_code of this X12EnvelopeSettings.
        :type group_header_agency_code: str
        """

        self._group_header_agency_code = group_header_agency_code

    @property
    def group_header_date_format(self):
        """Gets the group_header_date_format of this X12EnvelopeSettings.


        :return: The group_header_date_format of this X12EnvelopeSettings.
        :rtype: X12DateFormat
        """
        return self._group_header_date_format

    @group_header_date_format.setter
    def group_header_date_format(self, group_header_date_format):
        """Sets the group_header_date_format of this X12EnvelopeSettings.


        :param group_header_date_format: The group_header_date_format of this X12EnvelopeSettings.
        :type group_header_date_format: X12DateFormat
        """

        self._group_header_date_format = group_header_date_format

    @property
    def group_header_time_format(self):
        """Gets the group_header_time_format of this X12EnvelopeSettings.


        :return: The group_header_time_format of this X12EnvelopeSettings.
        :rtype: X12TimeFormat
        """
        return self._group_header_time_format

    @group_header_time_format.setter
    def group_header_time_format(self, group_header_time_format):
        """Sets the group_header_time_format of this X12EnvelopeSettings.


        :param group_header_time_format: The group_header_time_format of this X12EnvelopeSettings.
        :type group_header_time_format: X12TimeFormat
        """

        self._group_header_time_format = group_header_time_format

    @property
    def group_header_version(self):
        """Gets the group_header_version of this X12EnvelopeSettings.

        The group header version.

        :return: The group_header_version of this X12EnvelopeSettings.
        :rtype: str
        """
        return self._group_header_version

    @group_header_version.setter
    def group_header_version(self, group_header_version):
        """Sets the group_header_version of this X12EnvelopeSettings.

        The group header version.

        :param group_header_version: The group_header_version of this X12EnvelopeSettings.
        :type group_header_version: str
        """

        self._group_header_version = group_header_version

    @property
    def interchange_control_number_lower_bound(self):
        """Gets the interchange_control_number_lower_bound of this X12EnvelopeSettings.

        The interchange  control number lower bound.

        :return: The interchange_control_number_lower_bound of this X12EnvelopeSettings.
        :rtype: int
        """
        return self._interchange_control_number_lower_bound

    @interchange_control_number_lower_bound.setter
    def interchange_control_number_lower_bound(self, interchange_control_number_lower_bound):
        """Sets the interchange_control_number_lower_bound of this X12EnvelopeSettings.

        The interchange  control number lower bound.

        :param interchange_control_number_lower_bound: The interchange_control_number_lower_bound of this X12EnvelopeSettings.
        :type interchange_control_number_lower_bound: int
        """

        self._interchange_control_number_lower_bound = interchange_control_number_lower_bound

    @property
    def interchange_control_number_upper_bound(self):
        """Gets the interchange_control_number_upper_bound of this X12EnvelopeSettings.

        The interchange  control number upper bound.

        :return: The interchange_control_number_upper_bound of this X12EnvelopeSettings.
        :rtype: int
        """
        return self._interchange_control_number_upper_bound

    @interchange_control_number_upper_bound.setter
    def interchange_control_number_upper_bound(self, interchange_control_number_upper_bound):
        """Sets the interchange_control_number_upper_bound of this X12EnvelopeSettings.

        The interchange  control number upper bound.

        :param interchange_control_number_upper_bound: The interchange_control_number_upper_bound of this X12EnvelopeSettings.
        :type interchange_control_number_upper_bound: int
        """

        self._interchange_control_number_upper_bound = interchange_control_number_upper_bound

    @property
    def overwrite_existing_transaction_set_control_number(self):
        """Gets the overwrite_existing_transaction_set_control_number of this X12EnvelopeSettings.

        The value indicating whether to overwrite existing transaction set control number.

        :return: The overwrite_existing_transaction_set_control_number of this X12EnvelopeSettings.
        :rtype: bool
        """
        return self._overwrite_existing_transaction_set_control_number

    @overwrite_existing_transaction_set_control_number.setter
    def overwrite_existing_transaction_set_control_number(self, overwrite_existing_transaction_set_control_number):
        """Sets the overwrite_existing_transaction_set_control_number of this X12EnvelopeSettings.

        The value indicating whether to overwrite existing transaction set control number.

        :param overwrite_existing_transaction_set_control_number: The overwrite_existing_transaction_set_control_number of this X12EnvelopeSettings.
        :type overwrite_existing_transaction_set_control_number: bool
        """

        self._overwrite_existing_transaction_set_control_number = overwrite_existing_transaction_set_control_number

    @property
    def receiver_application_id(self):
        """Gets the receiver_application_id of this X12EnvelopeSettings.

        The receiver application id.

        :return: The receiver_application_id of this X12EnvelopeSettings.
        :rtype: str
        """
        return self._receiver_application_id

    @receiver_application_id.setter
    def receiver_application_id(self, receiver_application_id):
        """Sets the receiver_application_id of this X12EnvelopeSettings.

        The receiver application id.

        :param receiver_application_id: The receiver_application_id of this X12EnvelopeSettings.
        :type receiver_application_id: str
        """

        self._receiver_application_id = receiver_application_id

    @property
    def rollover_group_control_number(self):
        """Gets the rollover_group_control_number of this X12EnvelopeSettings.

        The value indicating whether to rollover group control number.

        :return: The rollover_group_control_number of this X12EnvelopeSettings.
        :rtype: bool
        """
        return self._rollover_group_control_number

    @rollover_group_control_number.setter
    def rollover_group_control_number(self, rollover_group_control_number):
        """Sets the rollover_group_control_number of this X12EnvelopeSettings.

        The value indicating whether to rollover group control number.

        :param rollover_group_control_number: The rollover_group_control_number of this X12EnvelopeSettings.
        :type rollover_group_control_number: bool
        """

        self._rollover_group_control_number = rollover_group_control_number

    @property
    def rollover_interchange_control_number(self):
        """Gets the rollover_interchange_control_number of this X12EnvelopeSettings.

        The value indicating whether to rollover interchange control number.

        :return: The rollover_interchange_control_number of this X12EnvelopeSettings.
        :rtype: bool
        """
        return self._rollover_interchange_control_number

    @rollover_interchange_control_number.setter
    def rollover_interchange_control_number(self, rollover_interchange_control_number):
        """Sets the rollover_interchange_control_number of this X12EnvelopeSettings.

        The value indicating whether to rollover interchange control number.

        :param rollover_interchange_control_number: The rollover_interchange_control_number of this X12EnvelopeSettings.
        :type rollover_interchange_control_number: bool
        """

        self._rollover_interchange_control_number = rollover_interchange_control_number

    @property
    def rollover_transaction_set_control_number(self):
        """Gets the rollover_transaction_set_control_number of this X12EnvelopeSettings.

        The value indicating whether to rollover transaction set control number.

        :return: The rollover_transaction_set_control_number of this X12EnvelopeSettings.
        :rtype: bool
        """
        return self._rollover_transaction_set_control_number

    @rollover_transaction_set_control_number.setter
    def rollover_transaction_set_control_number(self, rollover_transaction_set_control_number):
        """Sets the rollover_transaction_set_control_number of this X12EnvelopeSettings.

        The value indicating whether to rollover transaction set control number.

        :param rollover_transaction_set_control_number: The rollover_transaction_set_control_number of this X12EnvelopeSettings.
        :type rollover_transaction_set_control_number: bool
        """

        self._rollover_transaction_set_control_number = rollover_transaction_set_control_number

    @property
    def sender_application_id(self):
        """Gets the sender_application_id of this X12EnvelopeSettings.

        The sender application id.

        :return: The sender_application_id of this X12EnvelopeSettings.
        :rtype: str
        """
        return self._sender_application_id

    @sender_application_id.setter
    def sender_application_id(self, sender_application_id):
        """Sets the sender_application_id of this X12EnvelopeSettings.

        The sender application id.

        :param sender_application_id: The sender_application_id of this X12EnvelopeSettings.
        :type sender_application_id: str
        """

        self._sender_application_id = sender_application_id

    @property
    def transaction_set_control_number_lower_bound(self):
        """Gets the transaction_set_control_number_lower_bound of this X12EnvelopeSettings.

        The transaction set control number lower bound.

        :return: The transaction_set_control_number_lower_bound of this X12EnvelopeSettings.
        :rtype: int
        """
        return self._transaction_set_control_number_lower_bound

    @transaction_set_control_number_lower_bound.setter
    def transaction_set_control_number_lower_bound(self, transaction_set_control_number_lower_bound):
        """Sets the transaction_set_control_number_lower_bound of this X12EnvelopeSettings.

        The transaction set control number lower bound.

        :param transaction_set_control_number_lower_bound: The transaction_set_control_number_lower_bound of this X12EnvelopeSettings.
        :type transaction_set_control_number_lower_bound: int
        """

        self._transaction_set_control_number_lower_bound = transaction_set_control_number_lower_bound

    @property
    def transaction_set_control_number_prefix(self):
        """Gets the transaction_set_control_number_prefix of this X12EnvelopeSettings.

        The transaction set control number prefix.

        :return: The transaction_set_control_number_prefix of this X12EnvelopeSettings.
        :rtype: str
        """
        return self._transaction_set_control_number_prefix

    @transaction_set_control_number_prefix.setter
    def transaction_set_control_number_prefix(self, transaction_set_control_number_prefix):
        """Sets the transaction_set_control_number_prefix of this X12EnvelopeSettings.

        The transaction set control number prefix.

        :param transaction_set_control_number_prefix: The transaction_set_control_number_prefix of this X12EnvelopeSettings.
        :type transaction_set_control_number_prefix: str
        """

        self._transaction_set_control_number_prefix = transaction_set_control_number_prefix

    @property
    def transaction_set_control_number_suffix(self):
        """Gets the transaction_set_control_number_suffix of this X12EnvelopeSettings.

        The transaction set control number suffix.

        :return: The transaction_set_control_number_suffix of this X12EnvelopeSettings.
        :rtype: str
        """
        return self._transaction_set_control_number_suffix

    @transaction_set_control_number_suffix.setter
    def transaction_set_control_number_suffix(self, transaction_set_control_number_suffix):
        """Sets the transaction_set_control_number_suffix of this X12EnvelopeSettings.

        The transaction set control number suffix.

        :param transaction_set_control_number_suffix: The transaction_set_control_number_suffix of this X12EnvelopeSettings.
        :type transaction_set_control_number_suffix: str
        """

        self._transaction_set_control_number_suffix = transaction_set_control_number_suffix

    @property
    def transaction_set_control_number_upper_bound(self):
        """Gets the transaction_set_control_number_upper_bound of this X12EnvelopeSettings.

        The transaction set control number upper bound.

        :return: The transaction_set_control_number_upper_bound of this X12EnvelopeSettings.
        :rtype: int
        """
        return self._transaction_set_control_number_upper_bound

    @transaction_set_control_number_upper_bound.setter
    def transaction_set_control_number_upper_bound(self, transaction_set_control_number_upper_bound):
        """Sets the transaction_set_control_number_upper_bound of this X12EnvelopeSettings.

        The transaction set control number upper bound.

        :param transaction_set_control_number_upper_bound: The transaction_set_control_number_upper_bound of this X12EnvelopeSettings.
        :type transaction_set_control_number_upper_bound: int
        """

        self._transaction_set_control_number_upper_bound = transaction_set_control_number_upper_bound

    @property
    def usage_indicator(self):
        """Gets the usage_indicator of this X12EnvelopeSettings.


        :return: The usage_indicator of this X12EnvelopeSettings.
        :rtype: UsageIndicator
        """
        return self._usage_indicator

    @usage_indicator.setter
    def usage_indicator(self, usage_indicator):
        """Sets the usage_indicator of this X12EnvelopeSettings.


        :param usage_indicator: The usage_indicator of this X12EnvelopeSettings.
        :type usage_indicator: UsageIndicator
        """

        self._usage_indicator = usage_indicator

    @property
    def use_control_standards_id_as_repetition_character(self):
        """Gets the use_control_standards_id_as_repetition_character of this X12EnvelopeSettings.

        The value indicating whether to use control standards id as repetition character.

        :return: The use_control_standards_id_as_repetition_character of this X12EnvelopeSettings.
        :rtype: bool
        """
        return self._use_control_standards_id_as_repetition_character

    @use_control_standards_id_as_repetition_character.setter
    def use_control_standards_id_as_repetition_character(self, use_control_standards_id_as_repetition_character):
        """Sets the use_control_standards_id_as_repetition_character of this X12EnvelopeSettings.

        The value indicating whether to use control standards id as repetition character.

        :param use_control_standards_id_as_repetition_character: The use_control_standards_id_as_repetition_character of this X12EnvelopeSettings.
        :type use_control_standards_id_as_repetition_character: bool
        """

        self._use_control_standards_id_as_repetition_character = use_control_standards_id_as_repetition_character
