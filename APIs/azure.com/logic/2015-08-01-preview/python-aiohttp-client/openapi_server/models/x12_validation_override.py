# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.trailing_separator_policy import TrailingSeparatorPolicy
from openapi_server import util


class X12ValidationOverride(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_leading_and_trailing_spaces_and_zeroes: bool=None, message_id: str=None, trailing_separator_policy: TrailingSeparatorPolicy=None, trim_leading_and_trailing_spaces_and_zeroes: bool=None, validate_character_set: bool=None, validate_edi_types: bool=None, validate_xsd_types: bool=None):
        """X12ValidationOverride - a model defined in OpenAPI

        :param allow_leading_and_trailing_spaces_and_zeroes: The allow_leading_and_trailing_spaces_and_zeroes of this X12ValidationOverride.
        :param message_id: The message_id of this X12ValidationOverride.
        :param trailing_separator_policy: The trailing_separator_policy of this X12ValidationOverride.
        :param trim_leading_and_trailing_spaces_and_zeroes: The trim_leading_and_trailing_spaces_and_zeroes of this X12ValidationOverride.
        :param validate_character_set: The validate_character_set of this X12ValidationOverride.
        :param validate_edi_types: The validate_edi_types of this X12ValidationOverride.
        :param validate_xsd_types: The validate_xsd_types of this X12ValidationOverride.
        """
        self.openapi_types = {
            'allow_leading_and_trailing_spaces_and_zeroes': bool,
            'message_id': str,
            'trailing_separator_policy': TrailingSeparatorPolicy,
            'trim_leading_and_trailing_spaces_and_zeroes': bool,
            'validate_character_set': bool,
            'validate_edi_types': bool,
            'validate_xsd_types': bool
        }

        self.attribute_map = {
            'allow_leading_and_trailing_spaces_and_zeroes': 'allowLeadingAndTrailingSpacesAndZeroes',
            'message_id': 'messageId',
            'trailing_separator_policy': 'trailingSeparatorPolicy',
            'trim_leading_and_trailing_spaces_and_zeroes': 'trimLeadingAndTrailingSpacesAndZeroes',
            'validate_character_set': 'validateCharacterSet',
            'validate_edi_types': 'validateEDITypes',
            'validate_xsd_types': 'validateXSDTypes'
        }

        self._allow_leading_and_trailing_spaces_and_zeroes = allow_leading_and_trailing_spaces_and_zeroes
        self._message_id = message_id
        self._trailing_separator_policy = trailing_separator_policy
        self._trim_leading_and_trailing_spaces_and_zeroes = trim_leading_and_trailing_spaces_and_zeroes
        self._validate_character_set = validate_character_set
        self._validate_edi_types = validate_edi_types
        self._validate_xsd_types = validate_xsd_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'X12ValidationOverride':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The X12ValidationOverride of this X12ValidationOverride.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_leading_and_trailing_spaces_and_zeroes(self):
        """Gets the allow_leading_and_trailing_spaces_and_zeroes of this X12ValidationOverride.

        The value indicating whether to allow leading and trailing spaces and zeroes.

        :return: The allow_leading_and_trailing_spaces_and_zeroes of this X12ValidationOverride.
        :rtype: bool
        """
        return self._allow_leading_and_trailing_spaces_and_zeroes

    @allow_leading_and_trailing_spaces_and_zeroes.setter
    def allow_leading_and_trailing_spaces_and_zeroes(self, allow_leading_and_trailing_spaces_and_zeroes):
        """Sets the allow_leading_and_trailing_spaces_and_zeroes of this X12ValidationOverride.

        The value indicating whether to allow leading and trailing spaces and zeroes.

        :param allow_leading_and_trailing_spaces_and_zeroes: The allow_leading_and_trailing_spaces_and_zeroes of this X12ValidationOverride.
        :type allow_leading_and_trailing_spaces_and_zeroes: bool
        """

        self._allow_leading_and_trailing_spaces_and_zeroes = allow_leading_and_trailing_spaces_and_zeroes

    @property
    def message_id(self):
        """Gets the message_id of this X12ValidationOverride.

        The message id on which the validation settings has to be applied.

        :return: The message_id of this X12ValidationOverride.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this X12ValidationOverride.

        The message id on which the validation settings has to be applied.

        :param message_id: The message_id of this X12ValidationOverride.
        :type message_id: str
        """

        self._message_id = message_id

    @property
    def trailing_separator_policy(self):
        """Gets the trailing_separator_policy of this X12ValidationOverride.


        :return: The trailing_separator_policy of this X12ValidationOverride.
        :rtype: TrailingSeparatorPolicy
        """
        return self._trailing_separator_policy

    @trailing_separator_policy.setter
    def trailing_separator_policy(self, trailing_separator_policy):
        """Sets the trailing_separator_policy of this X12ValidationOverride.


        :param trailing_separator_policy: The trailing_separator_policy of this X12ValidationOverride.
        :type trailing_separator_policy: TrailingSeparatorPolicy
        """

        self._trailing_separator_policy = trailing_separator_policy

    @property
    def trim_leading_and_trailing_spaces_and_zeroes(self):
        """Gets the trim_leading_and_trailing_spaces_and_zeroes of this X12ValidationOverride.

        The value indicating whether to trim leading and trailing spaces and zeroes.

        :return: The trim_leading_and_trailing_spaces_and_zeroes of this X12ValidationOverride.
        :rtype: bool
        """
        return self._trim_leading_and_trailing_spaces_and_zeroes

    @trim_leading_and_trailing_spaces_and_zeroes.setter
    def trim_leading_and_trailing_spaces_and_zeroes(self, trim_leading_and_trailing_spaces_and_zeroes):
        """Sets the trim_leading_and_trailing_spaces_and_zeroes of this X12ValidationOverride.

        The value indicating whether to trim leading and trailing spaces and zeroes.

        :param trim_leading_and_trailing_spaces_and_zeroes: The trim_leading_and_trailing_spaces_and_zeroes of this X12ValidationOverride.
        :type trim_leading_and_trailing_spaces_and_zeroes: bool
        """

        self._trim_leading_and_trailing_spaces_and_zeroes = trim_leading_and_trailing_spaces_and_zeroes

    @property
    def validate_character_set(self):
        """Gets the validate_character_set of this X12ValidationOverride.

        The value indicating whether to validate character Set.

        :return: The validate_character_set of this X12ValidationOverride.
        :rtype: bool
        """
        return self._validate_character_set

    @validate_character_set.setter
    def validate_character_set(self, validate_character_set):
        """Sets the validate_character_set of this X12ValidationOverride.

        The value indicating whether to validate character Set.

        :param validate_character_set: The validate_character_set of this X12ValidationOverride.
        :type validate_character_set: bool
        """

        self._validate_character_set = validate_character_set

    @property
    def validate_edi_types(self):
        """Gets the validate_edi_types of this X12ValidationOverride.

        The value indicating whether to validate EDI types.

        :return: The validate_edi_types of this X12ValidationOverride.
        :rtype: bool
        """
        return self._validate_edi_types

    @validate_edi_types.setter
    def validate_edi_types(self, validate_edi_types):
        """Sets the validate_edi_types of this X12ValidationOverride.

        The value indicating whether to validate EDI types.

        :param validate_edi_types: The validate_edi_types of this X12ValidationOverride.
        :type validate_edi_types: bool
        """

        self._validate_edi_types = validate_edi_types

    @property
    def validate_xsd_types(self):
        """Gets the validate_xsd_types of this X12ValidationOverride.

        The value indicating whether to validate XSD types.

        :return: The validate_xsd_types of this X12ValidationOverride.
        :rtype: bool
        """
        return self._validate_xsd_types

    @validate_xsd_types.setter
    def validate_xsd_types(self, validate_xsd_types):
        """Sets the validate_xsd_types of this X12ValidationOverride.

        The value indicating whether to validate XSD types.

        :param validate_xsd_types: The validate_xsd_types of this X12ValidationOverride.
        :type validate_xsd_types: bool
        """

        self._validate_xsd_types = validate_xsd_types
