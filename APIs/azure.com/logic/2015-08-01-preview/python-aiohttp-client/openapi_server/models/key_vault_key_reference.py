# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_vault_key_reference_key_vault import KeyVaultKeyReferenceKeyVault
from openapi_server import util


class KeyVaultKeyReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_name: str=None, key_vault: KeyVaultKeyReferenceKeyVault=None, key_version: str=None):
        """KeyVaultKeyReference - a model defined in OpenAPI

        :param key_name: The key_name of this KeyVaultKeyReference.
        :param key_vault: The key_vault of this KeyVaultKeyReference.
        :param key_version: The key_version of this KeyVaultKeyReference.
        """
        self.openapi_types = {
            'key_name': str,
            'key_vault': KeyVaultKeyReferenceKeyVault,
            'key_version': str
        }

        self.attribute_map = {
            'key_name': 'keyName',
            'key_vault': 'keyVault',
            'key_version': 'keyVersion'
        }

        self._key_name = key_name
        self._key_vault = key_vault
        self._key_version = key_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KeyVaultKeyReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KeyVaultKeyReference of this KeyVaultKeyReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_name(self):
        """Gets the key_name of this KeyVaultKeyReference.

        The private key name in key vault.

        :return: The key_name of this KeyVaultKeyReference.
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this KeyVaultKeyReference.

        The private key name in key vault.

        :param key_name: The key_name of this KeyVaultKeyReference.
        :type key_name: str
        """

        self._key_name = key_name

    @property
    def key_vault(self):
        """Gets the key_vault of this KeyVaultKeyReference.


        :return: The key_vault of this KeyVaultKeyReference.
        :rtype: KeyVaultKeyReferenceKeyVault
        """
        return self._key_vault

    @key_vault.setter
    def key_vault(self, key_vault):
        """Sets the key_vault of this KeyVaultKeyReference.


        :param key_vault: The key_vault of this KeyVaultKeyReference.
        :type key_vault: KeyVaultKeyReferenceKeyVault
        """

        self._key_vault = key_vault

    @property
    def key_version(self):
        """Gets the key_version of this KeyVaultKeyReference.

        The private key version in key vault.

        :return: The key_version of this KeyVaultKeyReference.
        :rtype: str
        """
        return self._key_version

    @key_version.setter
    def key_version(self, key_version):
        """Sets the key_version of this KeyVaultKeyReference.

        The private key version in key vault.

        :param key_version: The key_version of this KeyVaultKeyReference.
        :type key_version: str
        """

        self._key_version = key_version
