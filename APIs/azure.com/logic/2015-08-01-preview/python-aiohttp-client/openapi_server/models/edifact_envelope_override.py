# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EdifactEnvelopeOverride(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_password: str=None, association_assigned_code: str=None, controlling_agency_code: str=None, functional_group_id: str=None, group_header_message_release: str=None, group_header_message_version: str=None, message_association_assigned_code: str=None, message_id: str=None, message_release: str=None, message_version: str=None, receiver_application_id: str=None, receiver_application_qualifier: str=None, sender_application_id: str=None, sender_application_qualifier: str=None, target_namespace: str=None):
        """EdifactEnvelopeOverride - a model defined in OpenAPI

        :param application_password: The application_password of this EdifactEnvelopeOverride.
        :param association_assigned_code: The association_assigned_code of this EdifactEnvelopeOverride.
        :param controlling_agency_code: The controlling_agency_code of this EdifactEnvelopeOverride.
        :param functional_group_id: The functional_group_id of this EdifactEnvelopeOverride.
        :param group_header_message_release: The group_header_message_release of this EdifactEnvelopeOverride.
        :param group_header_message_version: The group_header_message_version of this EdifactEnvelopeOverride.
        :param message_association_assigned_code: The message_association_assigned_code of this EdifactEnvelopeOverride.
        :param message_id: The message_id of this EdifactEnvelopeOverride.
        :param message_release: The message_release of this EdifactEnvelopeOverride.
        :param message_version: The message_version of this EdifactEnvelopeOverride.
        :param receiver_application_id: The receiver_application_id of this EdifactEnvelopeOverride.
        :param receiver_application_qualifier: The receiver_application_qualifier of this EdifactEnvelopeOverride.
        :param sender_application_id: The sender_application_id of this EdifactEnvelopeOverride.
        :param sender_application_qualifier: The sender_application_qualifier of this EdifactEnvelopeOverride.
        :param target_namespace: The target_namespace of this EdifactEnvelopeOverride.
        """
        self.openapi_types = {
            'application_password': str,
            'association_assigned_code': str,
            'controlling_agency_code': str,
            'functional_group_id': str,
            'group_header_message_release': str,
            'group_header_message_version': str,
            'message_association_assigned_code': str,
            'message_id': str,
            'message_release': str,
            'message_version': str,
            'receiver_application_id': str,
            'receiver_application_qualifier': str,
            'sender_application_id': str,
            'sender_application_qualifier': str,
            'target_namespace': str
        }

        self.attribute_map = {
            'application_password': 'applicationPassword',
            'association_assigned_code': 'associationAssignedCode',
            'controlling_agency_code': 'controllingAgencyCode',
            'functional_group_id': 'functionalGroupId',
            'group_header_message_release': 'groupHeaderMessageRelease',
            'group_header_message_version': 'groupHeaderMessageVersion',
            'message_association_assigned_code': 'messageAssociationAssignedCode',
            'message_id': 'messageId',
            'message_release': 'messageRelease',
            'message_version': 'messageVersion',
            'receiver_application_id': 'receiverApplicationId',
            'receiver_application_qualifier': 'receiverApplicationQualifier',
            'sender_application_id': 'senderApplicationId',
            'sender_application_qualifier': 'senderApplicationQualifier',
            'target_namespace': 'targetNamespace'
        }

        self._application_password = application_password
        self._association_assigned_code = association_assigned_code
        self._controlling_agency_code = controlling_agency_code
        self._functional_group_id = functional_group_id
        self._group_header_message_release = group_header_message_release
        self._group_header_message_version = group_header_message_version
        self._message_association_assigned_code = message_association_assigned_code
        self._message_id = message_id
        self._message_release = message_release
        self._message_version = message_version
        self._receiver_application_id = receiver_application_id
        self._receiver_application_qualifier = receiver_application_qualifier
        self._sender_application_id = sender_application_id
        self._sender_application_qualifier = sender_application_qualifier
        self._target_namespace = target_namespace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EdifactEnvelopeOverride':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EdifactEnvelopeOverride of this EdifactEnvelopeOverride.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_password(self):
        """Gets the application_password of this EdifactEnvelopeOverride.

        The application password.

        :return: The application_password of this EdifactEnvelopeOverride.
        :rtype: str
        """
        return self._application_password

    @application_password.setter
    def application_password(self, application_password):
        """Sets the application_password of this EdifactEnvelopeOverride.

        The application password.

        :param application_password: The application_password of this EdifactEnvelopeOverride.
        :type application_password: str
        """

        self._application_password = application_password

    @property
    def association_assigned_code(self):
        """Gets the association_assigned_code of this EdifactEnvelopeOverride.

        The association assigned code.

        :return: The association_assigned_code of this EdifactEnvelopeOverride.
        :rtype: str
        """
        return self._association_assigned_code

    @association_assigned_code.setter
    def association_assigned_code(self, association_assigned_code):
        """Sets the association_assigned_code of this EdifactEnvelopeOverride.

        The association assigned code.

        :param association_assigned_code: The association_assigned_code of this EdifactEnvelopeOverride.
        :type association_assigned_code: str
        """

        self._association_assigned_code = association_assigned_code

    @property
    def controlling_agency_code(self):
        """Gets the controlling_agency_code of this EdifactEnvelopeOverride.

        The controlling agency code.

        :return: The controlling_agency_code of this EdifactEnvelopeOverride.
        :rtype: str
        """
        return self._controlling_agency_code

    @controlling_agency_code.setter
    def controlling_agency_code(self, controlling_agency_code):
        """Sets the controlling_agency_code of this EdifactEnvelopeOverride.

        The controlling agency code.

        :param controlling_agency_code: The controlling_agency_code of this EdifactEnvelopeOverride.
        :type controlling_agency_code: str
        """

        self._controlling_agency_code = controlling_agency_code

    @property
    def functional_group_id(self):
        """Gets the functional_group_id of this EdifactEnvelopeOverride.

        The functional group id.

        :return: The functional_group_id of this EdifactEnvelopeOverride.
        :rtype: str
        """
        return self._functional_group_id

    @functional_group_id.setter
    def functional_group_id(self, functional_group_id):
        """Sets the functional_group_id of this EdifactEnvelopeOverride.

        The functional group id.

        :param functional_group_id: The functional_group_id of this EdifactEnvelopeOverride.
        :type functional_group_id: str
        """

        self._functional_group_id = functional_group_id

    @property
    def group_header_message_release(self):
        """Gets the group_header_message_release of this EdifactEnvelopeOverride.

        The group header message release.

        :return: The group_header_message_release of this EdifactEnvelopeOverride.
        :rtype: str
        """
        return self._group_header_message_release

    @group_header_message_release.setter
    def group_header_message_release(self, group_header_message_release):
        """Sets the group_header_message_release of this EdifactEnvelopeOverride.

        The group header message release.

        :param group_header_message_release: The group_header_message_release of this EdifactEnvelopeOverride.
        :type group_header_message_release: str
        """

        self._group_header_message_release = group_header_message_release

    @property
    def group_header_message_version(self):
        """Gets the group_header_message_version of this EdifactEnvelopeOverride.

        The group header message version.

        :return: The group_header_message_version of this EdifactEnvelopeOverride.
        :rtype: str
        """
        return self._group_header_message_version

    @group_header_message_version.setter
    def group_header_message_version(self, group_header_message_version):
        """Sets the group_header_message_version of this EdifactEnvelopeOverride.

        The group header message version.

        :param group_header_message_version: The group_header_message_version of this EdifactEnvelopeOverride.
        :type group_header_message_version: str
        """

        self._group_header_message_version = group_header_message_version

    @property
    def message_association_assigned_code(self):
        """Gets the message_association_assigned_code of this EdifactEnvelopeOverride.

        The message association assigned code.

        :return: The message_association_assigned_code of this EdifactEnvelopeOverride.
        :rtype: str
        """
        return self._message_association_assigned_code

    @message_association_assigned_code.setter
    def message_association_assigned_code(self, message_association_assigned_code):
        """Sets the message_association_assigned_code of this EdifactEnvelopeOverride.

        The message association assigned code.

        :param message_association_assigned_code: The message_association_assigned_code of this EdifactEnvelopeOverride.
        :type message_association_assigned_code: str
        """

        self._message_association_assigned_code = message_association_assigned_code

    @property
    def message_id(self):
        """Gets the message_id of this EdifactEnvelopeOverride.

        The message id on which this envelope settings has to be applied.

        :return: The message_id of this EdifactEnvelopeOverride.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this EdifactEnvelopeOverride.

        The message id on which this envelope settings has to be applied.

        :param message_id: The message_id of this EdifactEnvelopeOverride.
        :type message_id: str
        """

        self._message_id = message_id

    @property
    def message_release(self):
        """Gets the message_release of this EdifactEnvelopeOverride.

        The message release version on which this envelope settings has to be applied.

        :return: The message_release of this EdifactEnvelopeOverride.
        :rtype: str
        """
        return self._message_release

    @message_release.setter
    def message_release(self, message_release):
        """Sets the message_release of this EdifactEnvelopeOverride.

        The message release version on which this envelope settings has to be applied.

        :param message_release: The message_release of this EdifactEnvelopeOverride.
        :type message_release: str
        """

        self._message_release = message_release

    @property
    def message_version(self):
        """Gets the message_version of this EdifactEnvelopeOverride.

        The message version on which this envelope settings has to be applied.

        :return: The message_version of this EdifactEnvelopeOverride.
        :rtype: str
        """
        return self._message_version

    @message_version.setter
    def message_version(self, message_version):
        """Sets the message_version of this EdifactEnvelopeOverride.

        The message version on which this envelope settings has to be applied.

        :param message_version: The message_version of this EdifactEnvelopeOverride.
        :type message_version: str
        """

        self._message_version = message_version

    @property
    def receiver_application_id(self):
        """Gets the receiver_application_id of this EdifactEnvelopeOverride.

        The receiver application id.

        :return: The receiver_application_id of this EdifactEnvelopeOverride.
        :rtype: str
        """
        return self._receiver_application_id

    @receiver_application_id.setter
    def receiver_application_id(self, receiver_application_id):
        """Sets the receiver_application_id of this EdifactEnvelopeOverride.

        The receiver application id.

        :param receiver_application_id: The receiver_application_id of this EdifactEnvelopeOverride.
        :type receiver_application_id: str
        """

        self._receiver_application_id = receiver_application_id

    @property
    def receiver_application_qualifier(self):
        """Gets the receiver_application_qualifier of this EdifactEnvelopeOverride.

        The receiver application qualifier.

        :return: The receiver_application_qualifier of this EdifactEnvelopeOverride.
        :rtype: str
        """
        return self._receiver_application_qualifier

    @receiver_application_qualifier.setter
    def receiver_application_qualifier(self, receiver_application_qualifier):
        """Sets the receiver_application_qualifier of this EdifactEnvelopeOverride.

        The receiver application qualifier.

        :param receiver_application_qualifier: The receiver_application_qualifier of this EdifactEnvelopeOverride.
        :type receiver_application_qualifier: str
        """

        self._receiver_application_qualifier = receiver_application_qualifier

    @property
    def sender_application_id(self):
        """Gets the sender_application_id of this EdifactEnvelopeOverride.

        The sender application id.

        :return: The sender_application_id of this EdifactEnvelopeOverride.
        :rtype: str
        """
        return self._sender_application_id

    @sender_application_id.setter
    def sender_application_id(self, sender_application_id):
        """Sets the sender_application_id of this EdifactEnvelopeOverride.

        The sender application id.

        :param sender_application_id: The sender_application_id of this EdifactEnvelopeOverride.
        :type sender_application_id: str
        """

        self._sender_application_id = sender_application_id

    @property
    def sender_application_qualifier(self):
        """Gets the sender_application_qualifier of this EdifactEnvelopeOverride.

        The sender application qualifier.

        :return: The sender_application_qualifier of this EdifactEnvelopeOverride.
        :rtype: str
        """
        return self._sender_application_qualifier

    @sender_application_qualifier.setter
    def sender_application_qualifier(self, sender_application_qualifier):
        """Sets the sender_application_qualifier of this EdifactEnvelopeOverride.

        The sender application qualifier.

        :param sender_application_qualifier: The sender_application_qualifier of this EdifactEnvelopeOverride.
        :type sender_application_qualifier: str
        """

        self._sender_application_qualifier = sender_application_qualifier

    @property
    def target_namespace(self):
        """Gets the target_namespace of this EdifactEnvelopeOverride.

        The target namespace on which this envelope settings has to be applied.

        :return: The target_namespace of this EdifactEnvelopeOverride.
        :rtype: str
        """
        return self._target_namespace

    @target_namespace.setter
    def target_namespace(self, target_namespace):
        """Sets the target_namespace of this EdifactEnvelopeOverride.

        The target namespace on which this envelope settings has to be applied.

        :param target_namespace: The target_namespace of this EdifactEnvelopeOverride.
        :type target_namespace: str
        """

        self._target_namespace = target_namespace
