# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EdifactProcessingSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_empty_xml_tags_for_trailing_separators: bool=None, mask_security_info: bool=None, preserve_interchange: bool=None, suspend_interchange_on_error: bool=None, use_dot_as_decimal_separator: bool=None):
        """EdifactProcessingSettings - a model defined in OpenAPI

        :param create_empty_xml_tags_for_trailing_separators: The create_empty_xml_tags_for_trailing_separators of this EdifactProcessingSettings.
        :param mask_security_info: The mask_security_info of this EdifactProcessingSettings.
        :param preserve_interchange: The preserve_interchange of this EdifactProcessingSettings.
        :param suspend_interchange_on_error: The suspend_interchange_on_error of this EdifactProcessingSettings.
        :param use_dot_as_decimal_separator: The use_dot_as_decimal_separator of this EdifactProcessingSettings.
        """
        self.openapi_types = {
            'create_empty_xml_tags_for_trailing_separators': bool,
            'mask_security_info': bool,
            'preserve_interchange': bool,
            'suspend_interchange_on_error': bool,
            'use_dot_as_decimal_separator': bool
        }

        self.attribute_map = {
            'create_empty_xml_tags_for_trailing_separators': 'createEmptyXmlTagsForTrailingSeparators',
            'mask_security_info': 'maskSecurityInfo',
            'preserve_interchange': 'preserveInterchange',
            'suspend_interchange_on_error': 'suspendInterchangeOnError',
            'use_dot_as_decimal_separator': 'useDotAsDecimalSeparator'
        }

        self._create_empty_xml_tags_for_trailing_separators = create_empty_xml_tags_for_trailing_separators
        self._mask_security_info = mask_security_info
        self._preserve_interchange = preserve_interchange
        self._suspend_interchange_on_error = suspend_interchange_on_error
        self._use_dot_as_decimal_separator = use_dot_as_decimal_separator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EdifactProcessingSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EdifactProcessingSettings of this EdifactProcessingSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_empty_xml_tags_for_trailing_separators(self):
        """Gets the create_empty_xml_tags_for_trailing_separators of this EdifactProcessingSettings.

        The value indicating whether to create empty xml tags for trailing separators.

        :return: The create_empty_xml_tags_for_trailing_separators of this EdifactProcessingSettings.
        :rtype: bool
        """
        return self._create_empty_xml_tags_for_trailing_separators

    @create_empty_xml_tags_for_trailing_separators.setter
    def create_empty_xml_tags_for_trailing_separators(self, create_empty_xml_tags_for_trailing_separators):
        """Sets the create_empty_xml_tags_for_trailing_separators of this EdifactProcessingSettings.

        The value indicating whether to create empty xml tags for trailing separators.

        :param create_empty_xml_tags_for_trailing_separators: The create_empty_xml_tags_for_trailing_separators of this EdifactProcessingSettings.
        :type create_empty_xml_tags_for_trailing_separators: bool
        """

        self._create_empty_xml_tags_for_trailing_separators = create_empty_xml_tags_for_trailing_separators

    @property
    def mask_security_info(self):
        """Gets the mask_security_info of this EdifactProcessingSettings.

        The value indicating whether to mask security information.

        :return: The mask_security_info of this EdifactProcessingSettings.
        :rtype: bool
        """
        return self._mask_security_info

    @mask_security_info.setter
    def mask_security_info(self, mask_security_info):
        """Sets the mask_security_info of this EdifactProcessingSettings.

        The value indicating whether to mask security information.

        :param mask_security_info: The mask_security_info of this EdifactProcessingSettings.
        :type mask_security_info: bool
        """

        self._mask_security_info = mask_security_info

    @property
    def preserve_interchange(self):
        """Gets the preserve_interchange of this EdifactProcessingSettings.

        The value indicating whether to preserve interchange.

        :return: The preserve_interchange of this EdifactProcessingSettings.
        :rtype: bool
        """
        return self._preserve_interchange

    @preserve_interchange.setter
    def preserve_interchange(self, preserve_interchange):
        """Sets the preserve_interchange of this EdifactProcessingSettings.

        The value indicating whether to preserve interchange.

        :param preserve_interchange: The preserve_interchange of this EdifactProcessingSettings.
        :type preserve_interchange: bool
        """

        self._preserve_interchange = preserve_interchange

    @property
    def suspend_interchange_on_error(self):
        """Gets the suspend_interchange_on_error of this EdifactProcessingSettings.

        The value indicating whether to suspend interchange on error.

        :return: The suspend_interchange_on_error of this EdifactProcessingSettings.
        :rtype: bool
        """
        return self._suspend_interchange_on_error

    @suspend_interchange_on_error.setter
    def suspend_interchange_on_error(self, suspend_interchange_on_error):
        """Sets the suspend_interchange_on_error of this EdifactProcessingSettings.

        The value indicating whether to suspend interchange on error.

        :param suspend_interchange_on_error: The suspend_interchange_on_error of this EdifactProcessingSettings.
        :type suspend_interchange_on_error: bool
        """

        self._suspend_interchange_on_error = suspend_interchange_on_error

    @property
    def use_dot_as_decimal_separator(self):
        """Gets the use_dot_as_decimal_separator of this EdifactProcessingSettings.

        The value indicating whether to use dot as decimal separator.

        :return: The use_dot_as_decimal_separator of this EdifactProcessingSettings.
        :rtype: bool
        """
        return self._use_dot_as_decimal_separator

    @use_dot_as_decimal_separator.setter
    def use_dot_as_decimal_separator(self, use_dot_as_decimal_separator):
        """Sets the use_dot_as_decimal_separator of this EdifactProcessingSettings.

        The value indicating whether to use dot as decimal separator.

        :param use_dot_as_decimal_separator: The use_dot_as_decimal_separator of this EdifactProcessingSettings.
        :type use_dot_as_decimal_separator: bool
        """

        self._use_dot_as_decimal_separator = use_dot_as_decimal_separator
