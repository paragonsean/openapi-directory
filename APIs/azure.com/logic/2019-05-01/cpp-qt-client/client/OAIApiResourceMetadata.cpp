/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiResourceMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiResourceMetadata::OAIApiResourceMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiResourceMetadata::OAIApiResourceMetadata() {
    this->initializeModel();
}

OAIApiResourceMetadata::~OAIApiResourceMetadata() {}

void OAIApiResourceMetadata::initializeModel() {

    m_api_type_isSet = false;
    m_api_type_isValid = false;

    m_brand_color_isSet = false;
    m_brand_color_isValid = false;

    m_connection_type_isSet = false;
    m_connection_type_isValid = false;

    m_deployment_parameters_isSet = false;
    m_deployment_parameters_isValid = false;

    m_hide_key_isSet = false;
    m_hide_key_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_wsdl_import_method_isSet = false;
    m_wsdl_import_method_isValid = false;

    m_wsdl_service_isSet = false;
    m_wsdl_service_isValid = false;
}

void OAIApiResourceMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiResourceMetadata::fromJsonObject(QJsonObject json) {

    m_api_type_isValid = ::OpenAPI::fromJsonValue(m_api_type, json[QString("ApiType")]);
    m_api_type_isSet = !json[QString("ApiType")].isNull() && m_api_type_isValid;

    m_brand_color_isValid = ::OpenAPI::fromJsonValue(m_brand_color, json[QString("brandColor")]);
    m_brand_color_isSet = !json[QString("brandColor")].isNull() && m_brand_color_isValid;

    m_connection_type_isValid = ::OpenAPI::fromJsonValue(m_connection_type, json[QString("connectionType")]);
    m_connection_type_isSet = !json[QString("connectionType")].isNull() && m_connection_type_isValid;

    m_deployment_parameters_isValid = ::OpenAPI::fromJsonValue(m_deployment_parameters, json[QString("deploymentParameters")]);
    m_deployment_parameters_isSet = !json[QString("deploymentParameters")].isNull() && m_deployment_parameters_isValid;

    m_hide_key_isValid = ::OpenAPI::fromJsonValue(m_hide_key, json[QString("hideKey")]);
    m_hide_key_isSet = !json[QString("hideKey")].isNull() && m_hide_key_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_wsdl_import_method_isValid = ::OpenAPI::fromJsonValue(m_wsdl_import_method, json[QString("wsdlImportMethod")]);
    m_wsdl_import_method_isSet = !json[QString("wsdlImportMethod")].isNull() && m_wsdl_import_method_isValid;

    m_wsdl_service_isValid = ::OpenAPI::fromJsonValue(m_wsdl_service, json[QString("wsdlService")]);
    m_wsdl_service_isSet = !json[QString("wsdlService")].isNull() && m_wsdl_service_isValid;
}

QString OAIApiResourceMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiResourceMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_api_type.isSet()) {
        obj.insert(QString("ApiType"), ::OpenAPI::toJsonValue(m_api_type));
    }
    if (m_brand_color_isSet) {
        obj.insert(QString("brandColor"), ::OpenAPI::toJsonValue(m_brand_color));
    }
    if (m_connection_type_isSet) {
        obj.insert(QString("connectionType"), ::OpenAPI::toJsonValue(m_connection_type));
    }
    if (m_deployment_parameters.isSet()) {
        obj.insert(QString("deploymentParameters"), ::OpenAPI::toJsonValue(m_deployment_parameters));
    }
    if (m_hide_key_isSet) {
        obj.insert(QString("hideKey"), ::OpenAPI::toJsonValue(m_hide_key));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_wsdl_import_method.isSet()) {
        obj.insert(QString("wsdlImportMethod"), ::OpenAPI::toJsonValue(m_wsdl_import_method));
    }
    if (m_wsdl_service.isSet()) {
        obj.insert(QString("wsdlService"), ::OpenAPI::toJsonValue(m_wsdl_service));
    }
    return obj;
}

OAIApiType OAIApiResourceMetadata::getApiType() const {
    return m_api_type;
}
void OAIApiResourceMetadata::setApiType(const OAIApiType &api_type) {
    m_api_type = api_type;
    m_api_type_isSet = true;
}

bool OAIApiResourceMetadata::is_api_type_Set() const{
    return m_api_type_isSet;
}

bool OAIApiResourceMetadata::is_api_type_Valid() const{
    return m_api_type_isValid;
}

QString OAIApiResourceMetadata::getBrandColor() const {
    return m_brand_color;
}
void OAIApiResourceMetadata::setBrandColor(const QString &brand_color) {
    m_brand_color = brand_color;
    m_brand_color_isSet = true;
}

bool OAIApiResourceMetadata::is_brand_color_Set() const{
    return m_brand_color_isSet;
}

bool OAIApiResourceMetadata::is_brand_color_Valid() const{
    return m_brand_color_isValid;
}

QString OAIApiResourceMetadata::getConnectionType() const {
    return m_connection_type;
}
void OAIApiResourceMetadata::setConnectionType(const QString &connection_type) {
    m_connection_type = connection_type;
    m_connection_type_isSet = true;
}

bool OAIApiResourceMetadata::is_connection_type_Set() const{
    return m_connection_type_isSet;
}

bool OAIApiResourceMetadata::is_connection_type_Valid() const{
    return m_connection_type_isValid;
}

OAIApiDeploymentParameterMetadataSet OAIApiResourceMetadata::getDeploymentParameters() const {
    return m_deployment_parameters;
}
void OAIApiResourceMetadata::setDeploymentParameters(const OAIApiDeploymentParameterMetadataSet &deployment_parameters) {
    m_deployment_parameters = deployment_parameters;
    m_deployment_parameters_isSet = true;
}

bool OAIApiResourceMetadata::is_deployment_parameters_Set() const{
    return m_deployment_parameters_isSet;
}

bool OAIApiResourceMetadata::is_deployment_parameters_Valid() const{
    return m_deployment_parameters_isValid;
}

QString OAIApiResourceMetadata::getHideKey() const {
    return m_hide_key;
}
void OAIApiResourceMetadata::setHideKey(const QString &hide_key) {
    m_hide_key = hide_key;
    m_hide_key_isSet = true;
}

bool OAIApiResourceMetadata::is_hide_key_Set() const{
    return m_hide_key_isSet;
}

bool OAIApiResourceMetadata::is_hide_key_Valid() const{
    return m_hide_key_isValid;
}

OAIWorkflowProvisioningState OAIApiResourceMetadata::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIApiResourceMetadata::setProvisioningState(const OAIWorkflowProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIApiResourceMetadata::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIApiResourceMetadata::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIApiResourceMetadata::getSource() const {
    return m_source;
}
void OAIApiResourceMetadata::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIApiResourceMetadata::is_source_Set() const{
    return m_source_isSet;
}

bool OAIApiResourceMetadata::is_source_Valid() const{
    return m_source_isValid;
}

QMap<QString, QString> OAIApiResourceMetadata::getTags() const {
    return m_tags;
}
void OAIApiResourceMetadata::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIApiResourceMetadata::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIApiResourceMetadata::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIWsdlImportMethod OAIApiResourceMetadata::getWsdlImportMethod() const {
    return m_wsdl_import_method;
}
void OAIApiResourceMetadata::setWsdlImportMethod(const OAIWsdlImportMethod &wsdl_import_method) {
    m_wsdl_import_method = wsdl_import_method;
    m_wsdl_import_method_isSet = true;
}

bool OAIApiResourceMetadata::is_wsdl_import_method_Set() const{
    return m_wsdl_import_method_isSet;
}

bool OAIApiResourceMetadata::is_wsdl_import_method_Valid() const{
    return m_wsdl_import_method_isValid;
}

OAIWsdlService OAIApiResourceMetadata::getWsdlService() const {
    return m_wsdl_service;
}
void OAIApiResourceMetadata::setWsdlService(const OAIWsdlService &wsdl_service) {
    m_wsdl_service = wsdl_service;
    m_wsdl_service_isSet = true;
}

bool OAIApiResourceMetadata::is_wsdl_service_Set() const{
    return m_wsdl_service_isSet;
}

bool OAIApiResourceMetadata::is_wsdl_service_Valid() const{
    return m_wsdl_service_isValid;
}

bool OAIApiResourceMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_wsdl_import_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wsdl_service.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiResourceMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
