/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIX12FramingSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIX12FramingSettings::OAIX12FramingSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIX12FramingSettings::OAIX12FramingSettings() {
    this->initializeModel();
}

OAIX12FramingSettings::~OAIX12FramingSettings() {}

void OAIX12FramingSettings::initializeModel() {

    m_character_set_isSet = false;
    m_character_set_isValid = false;

    m_component_separator_isSet = false;
    m_component_separator_isValid = false;

    m_data_element_separator_isSet = false;
    m_data_element_separator_isValid = false;

    m_replace_character_isSet = false;
    m_replace_character_isValid = false;

    m_replace_separators_in_payload_isSet = false;
    m_replace_separators_in_payload_isValid = false;

    m_segment_terminator_isSet = false;
    m_segment_terminator_isValid = false;

    m_segment_terminator_suffix_isSet = false;
    m_segment_terminator_suffix_isValid = false;
}

void OAIX12FramingSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIX12FramingSettings::fromJsonObject(QJsonObject json) {

    m_character_set_isValid = ::OpenAPI::fromJsonValue(m_character_set, json[QString("characterSet")]);
    m_character_set_isSet = !json[QString("characterSet")].isNull() && m_character_set_isValid;

    m_component_separator_isValid = ::OpenAPI::fromJsonValue(m_component_separator, json[QString("componentSeparator")]);
    m_component_separator_isSet = !json[QString("componentSeparator")].isNull() && m_component_separator_isValid;

    m_data_element_separator_isValid = ::OpenAPI::fromJsonValue(m_data_element_separator, json[QString("dataElementSeparator")]);
    m_data_element_separator_isSet = !json[QString("dataElementSeparator")].isNull() && m_data_element_separator_isValid;

    m_replace_character_isValid = ::OpenAPI::fromJsonValue(m_replace_character, json[QString("replaceCharacter")]);
    m_replace_character_isSet = !json[QString("replaceCharacter")].isNull() && m_replace_character_isValid;

    m_replace_separators_in_payload_isValid = ::OpenAPI::fromJsonValue(m_replace_separators_in_payload, json[QString("replaceSeparatorsInPayload")]);
    m_replace_separators_in_payload_isSet = !json[QString("replaceSeparatorsInPayload")].isNull() && m_replace_separators_in_payload_isValid;

    m_segment_terminator_isValid = ::OpenAPI::fromJsonValue(m_segment_terminator, json[QString("segmentTerminator")]);
    m_segment_terminator_isSet = !json[QString("segmentTerminator")].isNull() && m_segment_terminator_isValid;

    m_segment_terminator_suffix_isValid = ::OpenAPI::fromJsonValue(m_segment_terminator_suffix, json[QString("segmentTerminatorSuffix")]);
    m_segment_terminator_suffix_isSet = !json[QString("segmentTerminatorSuffix")].isNull() && m_segment_terminator_suffix_isValid;
}

QString OAIX12FramingSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIX12FramingSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_character_set.isSet()) {
        obj.insert(QString("characterSet"), ::OpenAPI::toJsonValue(m_character_set));
    }
    if (m_component_separator_isSet) {
        obj.insert(QString("componentSeparator"), ::OpenAPI::toJsonValue(m_component_separator));
    }
    if (m_data_element_separator_isSet) {
        obj.insert(QString("dataElementSeparator"), ::OpenAPI::toJsonValue(m_data_element_separator));
    }
    if (m_replace_character_isSet) {
        obj.insert(QString("replaceCharacter"), ::OpenAPI::toJsonValue(m_replace_character));
    }
    if (m_replace_separators_in_payload_isSet) {
        obj.insert(QString("replaceSeparatorsInPayload"), ::OpenAPI::toJsonValue(m_replace_separators_in_payload));
    }
    if (m_segment_terminator_isSet) {
        obj.insert(QString("segmentTerminator"), ::OpenAPI::toJsonValue(m_segment_terminator));
    }
    if (m_segment_terminator_suffix.isSet()) {
        obj.insert(QString("segmentTerminatorSuffix"), ::OpenAPI::toJsonValue(m_segment_terminator_suffix));
    }
    return obj;
}

OAIX12CharacterSet OAIX12FramingSettings::getCharacterSet() const {
    return m_character_set;
}
void OAIX12FramingSettings::setCharacterSet(const OAIX12CharacterSet &character_set) {
    m_character_set = character_set;
    m_character_set_isSet = true;
}

bool OAIX12FramingSettings::is_character_set_Set() const{
    return m_character_set_isSet;
}

bool OAIX12FramingSettings::is_character_set_Valid() const{
    return m_character_set_isValid;
}

qint32 OAIX12FramingSettings::getComponentSeparator() const {
    return m_component_separator;
}
void OAIX12FramingSettings::setComponentSeparator(const qint32 &component_separator) {
    m_component_separator = component_separator;
    m_component_separator_isSet = true;
}

bool OAIX12FramingSettings::is_component_separator_Set() const{
    return m_component_separator_isSet;
}

bool OAIX12FramingSettings::is_component_separator_Valid() const{
    return m_component_separator_isValid;
}

qint32 OAIX12FramingSettings::getDataElementSeparator() const {
    return m_data_element_separator;
}
void OAIX12FramingSettings::setDataElementSeparator(const qint32 &data_element_separator) {
    m_data_element_separator = data_element_separator;
    m_data_element_separator_isSet = true;
}

bool OAIX12FramingSettings::is_data_element_separator_Set() const{
    return m_data_element_separator_isSet;
}

bool OAIX12FramingSettings::is_data_element_separator_Valid() const{
    return m_data_element_separator_isValid;
}

qint32 OAIX12FramingSettings::getReplaceCharacter() const {
    return m_replace_character;
}
void OAIX12FramingSettings::setReplaceCharacter(const qint32 &replace_character) {
    m_replace_character = replace_character;
    m_replace_character_isSet = true;
}

bool OAIX12FramingSettings::is_replace_character_Set() const{
    return m_replace_character_isSet;
}

bool OAIX12FramingSettings::is_replace_character_Valid() const{
    return m_replace_character_isValid;
}

bool OAIX12FramingSettings::isReplaceSeparatorsInPayload() const {
    return m_replace_separators_in_payload;
}
void OAIX12FramingSettings::setReplaceSeparatorsInPayload(const bool &replace_separators_in_payload) {
    m_replace_separators_in_payload = replace_separators_in_payload;
    m_replace_separators_in_payload_isSet = true;
}

bool OAIX12FramingSettings::is_replace_separators_in_payload_Set() const{
    return m_replace_separators_in_payload_isSet;
}

bool OAIX12FramingSettings::is_replace_separators_in_payload_Valid() const{
    return m_replace_separators_in_payload_isValid;
}

qint32 OAIX12FramingSettings::getSegmentTerminator() const {
    return m_segment_terminator;
}
void OAIX12FramingSettings::setSegmentTerminator(const qint32 &segment_terminator) {
    m_segment_terminator = segment_terminator;
    m_segment_terminator_isSet = true;
}

bool OAIX12FramingSettings::is_segment_terminator_Set() const{
    return m_segment_terminator_isSet;
}

bool OAIX12FramingSettings::is_segment_terminator_Valid() const{
    return m_segment_terminator_isValid;
}

OAISegmentTerminatorSuffix OAIX12FramingSettings::getSegmentTerminatorSuffix() const {
    return m_segment_terminator_suffix;
}
void OAIX12FramingSettings::setSegmentTerminatorSuffix(const OAISegmentTerminatorSuffix &segment_terminator_suffix) {
    m_segment_terminator_suffix = segment_terminator_suffix;
    m_segment_terminator_suffix_isSet = true;
}

bool OAIX12FramingSettings::is_segment_terminator_suffix_Set() const{
    return m_segment_terminator_suffix_isSet;
}

bool OAIX12FramingSettings::is_segment_terminator_suffix_Valid() const{
    return m_segment_terminator_suffix_isValid;
}

bool OAIX12FramingSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_character_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_element_separator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_character_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replace_separators_in_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_terminator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_terminator_suffix.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIX12FramingSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_character_set_isValid && m_component_separator_isValid && m_data_element_separator_isValid && m_replace_character_isValid && m_replace_separators_in_payload_isValid && m_segment_terminator_isValid && m_segment_terminator_suffix_isValid && true;
}

} // namespace OpenAPI
