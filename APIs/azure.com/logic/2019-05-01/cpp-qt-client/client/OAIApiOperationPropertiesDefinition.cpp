/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiOperationPropertiesDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiOperationPropertiesDefinition::OAIApiOperationPropertiesDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiOperationPropertiesDefinition::OAIApiOperationPropertiesDefinition() {
    this->initializeModel();
}

OAIApiOperationPropertiesDefinition::~OAIApiOperationPropertiesDefinition() {}

void OAIApiOperationPropertiesDefinition::initializeModel() {

    m_annotation_isSet = false;
    m_annotation_isValid = false;

    m_api_isSet = false;
    m_api_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_inputs_definition_isSet = false;
    m_inputs_definition_isValid = false;

    m_is_notification_isSet = false;
    m_is_notification_isValid = false;

    m_is_webhook_isSet = false;
    m_is_webhook_isValid = false;

    m_pageable_isSet = false;
    m_pageable_isValid = false;

    m_responses_definition_isSet = false;
    m_responses_definition_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;

    m_trigger_hint_isSet = false;
    m_trigger_hint_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIApiOperationPropertiesDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiOperationPropertiesDefinition::fromJsonObject(QJsonObject json) {

    m_annotation_isValid = ::OpenAPI::fromJsonValue(m_annotation, json[QString("annotation")]);
    m_annotation_isSet = !json[QString("annotation")].isNull() && m_annotation_isValid;

    m_api_isValid = ::OpenAPI::fromJsonValue(m_api, json[QString("api")]);
    m_api_isSet = !json[QString("api")].isNull() && m_api_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_inputs_definition_isValid = ::OpenAPI::fromJsonValue(m_inputs_definition, json[QString("inputsDefinition")]);
    m_inputs_definition_isSet = !json[QString("inputsDefinition")].isNull() && m_inputs_definition_isValid;

    m_is_notification_isValid = ::OpenAPI::fromJsonValue(m_is_notification, json[QString("isNotification")]);
    m_is_notification_isSet = !json[QString("isNotification")].isNull() && m_is_notification_isValid;

    m_is_webhook_isValid = ::OpenAPI::fromJsonValue(m_is_webhook, json[QString("isWebhook")]);
    m_is_webhook_isSet = !json[QString("isWebhook")].isNull() && m_is_webhook_isValid;

    m_pageable_isValid = ::OpenAPI::fromJsonValue(m_pageable, json[QString("pageable")]);
    m_pageable_isSet = !json[QString("pageable")].isNull() && m_pageable_isValid;

    m_responses_definition_isValid = ::OpenAPI::fromJsonValue(m_responses_definition, json[QString("responsesDefinition")]);
    m_responses_definition_isSet = !json[QString("responsesDefinition")].isNull() && m_responses_definition_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(m_trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;

    m_trigger_hint_isValid = ::OpenAPI::fromJsonValue(m_trigger_hint, json[QString("triggerHint")]);
    m_trigger_hint_isSet = !json[QString("triggerHint")].isNull() && m_trigger_hint_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIApiOperationPropertiesDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiOperationPropertiesDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation.isSet()) {
        obj.insert(QString("annotation"), ::OpenAPI::toJsonValue(m_annotation));
    }
    if (m_api.isSet()) {
        obj.insert(QString("api"), ::OpenAPI::toJsonValue(m_api));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_inputs_definition.isSet()) {
        obj.insert(QString("inputsDefinition"), ::OpenAPI::toJsonValue(m_inputs_definition));
    }
    if (m_is_notification_isSet) {
        obj.insert(QString("isNotification"), ::OpenAPI::toJsonValue(m_is_notification));
    }
    if (m_is_webhook_isSet) {
        obj.insert(QString("isWebhook"), ::OpenAPI::toJsonValue(m_is_webhook));
    }
    if (m_pageable_isSet) {
        obj.insert(QString("pageable"), ::OpenAPI::toJsonValue(m_pageable));
    }
    if (m_responses_definition.size() > 0) {
        obj.insert(QString("responsesDefinition"), ::OpenAPI::toJsonValue(m_responses_definition));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_trigger_isSet) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(m_trigger));
    }
    if (m_trigger_hint_isSet) {
        obj.insert(QString("triggerHint"), ::OpenAPI::toJsonValue(m_trigger_hint));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

OAIApiOperationAnnotation OAIApiOperationPropertiesDefinition::getAnnotation() const {
    return m_annotation;
}
void OAIApiOperationPropertiesDefinition::setAnnotation(const OAIApiOperationAnnotation &annotation) {
    m_annotation = annotation;
    m_annotation_isSet = true;
}

bool OAIApiOperationPropertiesDefinition::is_annotation_Set() const{
    return m_annotation_isSet;
}

bool OAIApiOperationPropertiesDefinition::is_annotation_Valid() const{
    return m_annotation_isValid;
}

OAIApiReference OAIApiOperationPropertiesDefinition::getApi() const {
    return m_api;
}
void OAIApiOperationPropertiesDefinition::setApi(const OAIApiReference &api) {
    m_api = api;
    m_api_isSet = true;
}

bool OAIApiOperationPropertiesDefinition::is_api_Set() const{
    return m_api_isSet;
}

bool OAIApiOperationPropertiesDefinition::is_api_Valid() const{
    return m_api_isValid;
}

QString OAIApiOperationPropertiesDefinition::getDescription() const {
    return m_description;
}
void OAIApiOperationPropertiesDefinition::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApiOperationPropertiesDefinition::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApiOperationPropertiesDefinition::is_description_Valid() const{
    return m_description_isValid;
}

OAISwaggerSchema OAIApiOperationPropertiesDefinition::getInputsDefinition() const {
    return m_inputs_definition;
}
void OAIApiOperationPropertiesDefinition::setInputsDefinition(const OAISwaggerSchema &inputs_definition) {
    m_inputs_definition = inputs_definition;
    m_inputs_definition_isSet = true;
}

bool OAIApiOperationPropertiesDefinition::is_inputs_definition_Set() const{
    return m_inputs_definition_isSet;
}

bool OAIApiOperationPropertiesDefinition::is_inputs_definition_Valid() const{
    return m_inputs_definition_isValid;
}

bool OAIApiOperationPropertiesDefinition::isIsNotification() const {
    return m_is_notification;
}
void OAIApiOperationPropertiesDefinition::setIsNotification(const bool &is_notification) {
    m_is_notification = is_notification;
    m_is_notification_isSet = true;
}

bool OAIApiOperationPropertiesDefinition::is_is_notification_Set() const{
    return m_is_notification_isSet;
}

bool OAIApiOperationPropertiesDefinition::is_is_notification_Valid() const{
    return m_is_notification_isValid;
}

bool OAIApiOperationPropertiesDefinition::isIsWebhook() const {
    return m_is_webhook;
}
void OAIApiOperationPropertiesDefinition::setIsWebhook(const bool &is_webhook) {
    m_is_webhook = is_webhook;
    m_is_webhook_isSet = true;
}

bool OAIApiOperationPropertiesDefinition::is_is_webhook_Set() const{
    return m_is_webhook_isSet;
}

bool OAIApiOperationPropertiesDefinition::is_is_webhook_Valid() const{
    return m_is_webhook_isValid;
}

bool OAIApiOperationPropertiesDefinition::isPageable() const {
    return m_pageable;
}
void OAIApiOperationPropertiesDefinition::setPageable(const bool &pageable) {
    m_pageable = pageable;
    m_pageable_isSet = true;
}

bool OAIApiOperationPropertiesDefinition::is_pageable_Set() const{
    return m_pageable_isSet;
}

bool OAIApiOperationPropertiesDefinition::is_pageable_Valid() const{
    return m_pageable_isValid;
}

QMap<QString, OAISwaggerSchema> OAIApiOperationPropertiesDefinition::getResponsesDefinition() const {
    return m_responses_definition;
}
void OAIApiOperationPropertiesDefinition::setResponsesDefinition(const QMap<QString, OAISwaggerSchema> &responses_definition) {
    m_responses_definition = responses_definition;
    m_responses_definition_isSet = true;
}

bool OAIApiOperationPropertiesDefinition::is_responses_definition_Set() const{
    return m_responses_definition_isSet;
}

bool OAIApiOperationPropertiesDefinition::is_responses_definition_Valid() const{
    return m_responses_definition_isValid;
}

QString OAIApiOperationPropertiesDefinition::getSummary() const {
    return m_summary;
}
void OAIApiOperationPropertiesDefinition::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIApiOperationPropertiesDefinition::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIApiOperationPropertiesDefinition::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAIApiOperationPropertiesDefinition::getTrigger() const {
    return m_trigger;
}
void OAIApiOperationPropertiesDefinition::setTrigger(const QString &trigger) {
    m_trigger = trigger;
    m_trigger_isSet = true;
}

bool OAIApiOperationPropertiesDefinition::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool OAIApiOperationPropertiesDefinition::is_trigger_Valid() const{
    return m_trigger_isValid;
}

QString OAIApiOperationPropertiesDefinition::getTriggerHint() const {
    return m_trigger_hint;
}
void OAIApiOperationPropertiesDefinition::setTriggerHint(const QString &trigger_hint) {
    m_trigger_hint = trigger_hint;
    m_trigger_hint_isSet = true;
}

bool OAIApiOperationPropertiesDefinition::is_trigger_hint_Set() const{
    return m_trigger_hint_isSet;
}

bool OAIApiOperationPropertiesDefinition::is_trigger_hint_Valid() const{
    return m_trigger_hint_isValid;
}

QString OAIApiOperationPropertiesDefinition::getVisibility() const {
    return m_visibility;
}
void OAIApiOperationPropertiesDefinition::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIApiOperationPropertiesDefinition::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIApiOperationPropertiesDefinition::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIApiOperationPropertiesDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_api.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inputs_definition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_webhook_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pageable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_responses_definition.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_hint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiOperationPropertiesDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
