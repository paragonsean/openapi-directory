/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIntegrationServiceEnvironmentsApi_H
#define OAI_OAIIntegrationServiceEnvironmentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIIntegrationServiceEnvironment.h"
#include "OAIIntegrationServiceEnvironmentListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIntegrationServiceEnvironmentsApi : public QObject {
    Q_OBJECT

public:
    OAIIntegrationServiceEnvironmentsApi(const int timeOut = 0);
    ~OAIIntegrationServiceEnvironmentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  integration_service_environment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  integration_service_environment OAIIntegrationServiceEnvironment [required]
    */
    virtual void integrationServiceEnvironmentsCreateOrUpdate(const QString &subscription_id, const QString &resource_group, const QString &integration_service_environment_name, const QString &api_version, const OAIIntegrationServiceEnvironment &integration_service_environment);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  integration_service_environment_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void integrationServiceEnvironmentsDelete(const QString &subscription_id, const QString &resource_group, const QString &integration_service_environment_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  integration_service_environment_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void integrationServiceEnvironmentsGet(const QString &subscription_id, const QString &resource_group, const QString &integration_service_environment_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void integrationServiceEnvironmentsListByResourceGroup(const QString &subscription_id, const QString &resource_group, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void integrationServiceEnvironmentsListBySubscription(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  integration_service_environment_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  integration_service_environment OAIIntegrationServiceEnvironment [required]
    */
    virtual void integrationServiceEnvironmentsUpdate(const QString &subscription_id, const QString &resource_group, const QString &integration_service_environment_name, const QString &api_version, const OAIIntegrationServiceEnvironment &integration_service_environment);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void integrationServiceEnvironmentsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void integrationServiceEnvironmentsDeleteCallback(OAIHttpRequestWorker *worker);
    void integrationServiceEnvironmentsGetCallback(OAIHttpRequestWorker *worker);
    void integrationServiceEnvironmentsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void integrationServiceEnvironmentsListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void integrationServiceEnvironmentsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void integrationServiceEnvironmentsCreateOrUpdateSignal(OAIIntegrationServiceEnvironment summary);
    void integrationServiceEnvironmentsDeleteSignal();
    void integrationServiceEnvironmentsGetSignal(OAIIntegrationServiceEnvironment summary);
    void integrationServiceEnvironmentsListByResourceGroupSignal(OAIIntegrationServiceEnvironmentListResult summary);
    void integrationServiceEnvironmentsListBySubscriptionSignal(OAIIntegrationServiceEnvironmentListResult summary);
    void integrationServiceEnvironmentsUpdateSignal(OAIIntegrationServiceEnvironment summary);


    void integrationServiceEnvironmentsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationServiceEnvironment summary);
    void integrationServiceEnvironmentsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void integrationServiceEnvironmentsGetSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationServiceEnvironment summary);
    void integrationServiceEnvironmentsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationServiceEnvironmentListResult summary);
    void integrationServiceEnvironmentsListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationServiceEnvironmentListResult summary);
    void integrationServiceEnvironmentsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationServiceEnvironment summary);

    Q_DECL_DEPRECATED_X("Use integrationServiceEnvironmentsCreateOrUpdateSignalError() instead")
    void integrationServiceEnvironmentsCreateOrUpdateSignalE(OAIIntegrationServiceEnvironment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationServiceEnvironmentsCreateOrUpdateSignalError(OAIIntegrationServiceEnvironment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationServiceEnvironmentsDeleteSignalError() instead")
    void integrationServiceEnvironmentsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void integrationServiceEnvironmentsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationServiceEnvironmentsGetSignalError() instead")
    void integrationServiceEnvironmentsGetSignalE(OAIIntegrationServiceEnvironment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationServiceEnvironmentsGetSignalError(OAIIntegrationServiceEnvironment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationServiceEnvironmentsListByResourceGroupSignalError() instead")
    void integrationServiceEnvironmentsListByResourceGroupSignalE(OAIIntegrationServiceEnvironmentListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationServiceEnvironmentsListByResourceGroupSignalError(OAIIntegrationServiceEnvironmentListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationServiceEnvironmentsListBySubscriptionSignalError() instead")
    void integrationServiceEnvironmentsListBySubscriptionSignalE(OAIIntegrationServiceEnvironmentListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationServiceEnvironmentsListBySubscriptionSignalError(OAIIntegrationServiceEnvironmentListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationServiceEnvironmentsUpdateSignalError() instead")
    void integrationServiceEnvironmentsUpdateSignalE(OAIIntegrationServiceEnvironment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationServiceEnvironmentsUpdateSignalError(OAIIntegrationServiceEnvironment summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use integrationServiceEnvironmentsCreateOrUpdateSignalErrorFull() instead")
    void integrationServiceEnvironmentsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationServiceEnvironmentsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationServiceEnvironmentsDeleteSignalErrorFull() instead")
    void integrationServiceEnvironmentsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationServiceEnvironmentsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationServiceEnvironmentsGetSignalErrorFull() instead")
    void integrationServiceEnvironmentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationServiceEnvironmentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationServiceEnvironmentsListByResourceGroupSignalErrorFull() instead")
    void integrationServiceEnvironmentsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationServiceEnvironmentsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationServiceEnvironmentsListBySubscriptionSignalErrorFull() instead")
    void integrationServiceEnvironmentsListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationServiceEnvironmentsListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationServiceEnvironmentsUpdateSignalErrorFull() instead")
    void integrationServiceEnvironmentsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationServiceEnvironmentsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
