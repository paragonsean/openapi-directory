/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventLevel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventLevel::OAIEventLevel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventLevel::OAIEventLevel() {
    this->initializeModel();
}

OAIEventLevel::~OAIEventLevel() {}

void OAIEventLevel::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEventLevel::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEventLevel::fromJson(QString jsonString) {
    
    if ( jsonString.compare("LogAlways", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventLevel::LOGALWAYS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Critical", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventLevel::CRITICAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Error", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventLevel::ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Warning", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventLevel::WARNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Informational", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventLevel::INFORMATIONAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Verbose", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventLevel::VERBOSE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEventLevel::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEventLevel::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEventLevel::LOGALWAYS:
            val = "LogAlways";
            break;
        case eOAIEventLevel::CRITICAL:
            val = "Critical";
            break;
        case eOAIEventLevel::ERROR:
            val = "Error";
            break;
        case eOAIEventLevel::WARNING:
            val = "Warning";
            break;
        case eOAIEventLevel::INFORMATIONAL:
            val = "Informational";
            break;
        case eOAIEventLevel::VERBOSE:
            val = "Verbose";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEventLevel::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEventLevel::eOAIEventLevel OAIEventLevel::getValue() const {
    return m_value;
}

void OAIEventLevel::setValue(const OAIEventLevel::eOAIEventLevel& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEventLevel::isSet() const {
    
    return m_value_isSet;
}

bool OAIEventLevel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
