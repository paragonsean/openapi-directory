/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIntegrationAccountMapsApi_H
#define OAI_OAIIntegrationAccountMapsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIGetCallbackUrlParameters.h"
#include "OAIIntegrationAccountMap.h"
#include "OAIIntegrationAccountMapListResult.h"
#include "OAIWorkflowTriggerCallbackUrl.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIntegrationAccountMapsApi : public QObject {
    Q_OBJECT

public:
    OAIIntegrationAccountMapsApi(const int timeOut = 0);
    ~OAIIntegrationAccountMapsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  map_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  map OAIIntegrationAccountMap [required]
    */
    virtual void integrationAccountMapsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &map_name, const QString &api_version, const OAIIntegrationAccountMap &map);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  map_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void integrationAccountMapsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &map_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  map_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void integrationAccountMapsGet(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &map_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void integrationAccountMapsList(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  map_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  list_content_callback_url OAIGetCallbackUrlParameters [required]
    */
    virtual void integrationAccountMapsListContentCallbackUrl(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &map_name, const QString &api_version, const OAIGetCallbackUrlParameters &list_content_callback_url);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void integrationAccountMapsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void integrationAccountMapsDeleteCallback(OAIHttpRequestWorker *worker);
    void integrationAccountMapsGetCallback(OAIHttpRequestWorker *worker);
    void integrationAccountMapsListCallback(OAIHttpRequestWorker *worker);
    void integrationAccountMapsListContentCallbackUrlCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void integrationAccountMapsCreateOrUpdateSignal(OAIIntegrationAccountMap summary);
    void integrationAccountMapsDeleteSignal();
    void integrationAccountMapsGetSignal(OAIIntegrationAccountMap summary);
    void integrationAccountMapsListSignal(OAIIntegrationAccountMapListResult summary);
    void integrationAccountMapsListContentCallbackUrlSignal(OAIWorkflowTriggerCallbackUrl summary);


    void integrationAccountMapsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationAccountMap summary);
    void integrationAccountMapsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void integrationAccountMapsGetSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationAccountMap summary);
    void integrationAccountMapsListSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationAccountMapListResult summary);
    void integrationAccountMapsListContentCallbackUrlSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowTriggerCallbackUrl summary);

    Q_DECL_DEPRECATED_X("Use integrationAccountMapsCreateOrUpdateSignalError() instead")
    void integrationAccountMapsCreateOrUpdateSignalE(OAIIntegrationAccountMap summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountMapsCreateOrUpdateSignalError(OAIIntegrationAccountMap summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountMapsDeleteSignalError() instead")
    void integrationAccountMapsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountMapsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountMapsGetSignalError() instead")
    void integrationAccountMapsGetSignalE(OAIIntegrationAccountMap summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountMapsGetSignalError(OAIIntegrationAccountMap summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountMapsListSignalError() instead")
    void integrationAccountMapsListSignalE(OAIIntegrationAccountMapListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountMapsListSignalError(OAIIntegrationAccountMapListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountMapsListContentCallbackUrlSignalError() instead")
    void integrationAccountMapsListContentCallbackUrlSignalE(OAIWorkflowTriggerCallbackUrl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountMapsListContentCallbackUrlSignalError(OAIWorkflowTriggerCallbackUrl summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use integrationAccountMapsCreateOrUpdateSignalErrorFull() instead")
    void integrationAccountMapsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountMapsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountMapsDeleteSignalErrorFull() instead")
    void integrationAccountMapsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountMapsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountMapsGetSignalErrorFull() instead")
    void integrationAccountMapsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountMapsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountMapsListSignalErrorFull() instead")
    void integrationAccountMapsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountMapsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountMapsListContentCallbackUrlSignalErrorFull() instead")
    void integrationAccountMapsListContentCallbackUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountMapsListContentCallbackUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
